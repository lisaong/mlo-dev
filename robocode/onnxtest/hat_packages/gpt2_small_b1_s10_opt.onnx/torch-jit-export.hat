
#ifndef __torch-jit-export__
#define __torch-jit-export__

#ifdef TOML
[description]
comment = 'torch-jit-export'
author = ''
version = ''
license_url = ''

[functions]
[functions.Gemm_1012]
name = 'Gemm_1012'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012.auxiliary]
[functions.Gemm_1012.auxiliary.onnx]
node_name = "Gemm_1012"
node_type = "Gemm"
node_domain = ""
node_args = ["1336", "h.4.attn.c_attn.weight", "h.4.attn.c_attn.bias", "1337"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_1012.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_attn.weight" = ["Gemm_1012_reshape_B", "Gemm_1012_reshape_B_size"]

[functions.Gemm_1012_reshape_B]
name = 'Gemm_1012_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012_reshape_B_size]
name = 'Gemm_1012_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1155]
name = 'Gemm_1155'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155.auxiliary]
[functions.Gemm_1155.auxiliary.onnx]
node_name = "Gemm_1155"
node_type = "Gemm"
node_domain = ""
node_args = ["1498", "h.4.attn.c_proj.weight", "h.4.attn.c_proj.bias", "1499"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_1155.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_proj.weight" = ["Gemm_1155_reshape_B", "Gemm_1155_reshape_B_size"]

[functions.Gemm_1155_reshape_B]
name = 'Gemm_1155_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155_reshape_B_size]
name = 'Gemm_1155_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1187]
name = 'Gemm_1187'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187.auxiliary]
[functions.Gemm_1187.auxiliary.onnx]
node_name = "Gemm_1187"
node_type = "Gemm"
node_domain = ""
node_args = ["1536", "h.4.mlp.c_fc.weight", "h.4.mlp.c_fc.bias", "1537"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_1187.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_fc.weight" = ["Gemm_1187_reshape_B", "Gemm_1187_reshape_B_size"]

[functions.Gemm_1187_reshape_B]
name = 'Gemm_1187_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187_reshape_B_size]
name = 'Gemm_1187_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1220]
name = 'Gemm_1220'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220.auxiliary]
[functions.Gemm_1220.auxiliary.onnx]
node_name = "Gemm_1220"
node_type = "Gemm"
node_domain = ""
node_args = ["1573", "h.4.mlp.c_proj.weight", "h.4.mlp.c_proj.bias", "1574"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_1220.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_proj.weight" = ["Gemm_1220_reshape_B", "Gemm_1220_reshape_B_size"]

[functions.Gemm_1220_reshape_B]
name = 'Gemm_1220_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220_reshape_B_size]
name = 'Gemm_1220_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1252]
name = 'Gemm_1252'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252.auxiliary]
[functions.Gemm_1252.auxiliary.onnx]
node_name = "Gemm_1252"
node_type = "Gemm"
node_domain = ""
node_args = ["1611", "h.5.attn.c_attn.weight", "h.5.attn.c_attn.bias", "1612"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_1252.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_attn.weight" = ["Gemm_1252_reshape_B", "Gemm_1252_reshape_B_size"]

[functions.Gemm_1252_reshape_B]
name = 'Gemm_1252_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252_reshape_B_size]
name = 'Gemm_1252_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1395]
name = 'Gemm_1395'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395.auxiliary]
[functions.Gemm_1395.auxiliary.onnx]
node_name = "Gemm_1395"
node_type = "Gemm"
node_domain = ""
node_args = ["1773", "h.5.attn.c_proj.weight", "h.5.attn.c_proj.bias", "1774"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_1395.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_proj.weight" = ["Gemm_1395_reshape_B", "Gemm_1395_reshape_B_size"]

[functions.Gemm_1395_reshape_B]
name = 'Gemm_1395_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395_reshape_B_size]
name = 'Gemm_1395_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1427]
name = 'Gemm_1427'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427.auxiliary]
[functions.Gemm_1427.auxiliary.onnx]
node_name = "Gemm_1427"
node_type = "Gemm"
node_domain = ""
node_args = ["1811", "h.5.mlp.c_fc.weight", "h.5.mlp.c_fc.bias", "1812"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_1427.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_fc.weight" = ["Gemm_1427_reshape_B", "Gemm_1427_reshape_B_size"]

[functions.Gemm_1427_reshape_B]
name = 'Gemm_1427_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427_reshape_B_size]
name = 'Gemm_1427_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1460]
name = 'Gemm_1460'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460.auxiliary]
[functions.Gemm_1460.auxiliary.onnx]
node_name = "Gemm_1460"
node_type = "Gemm"
node_domain = ""
node_args = ["1848", "h.5.mlp.c_proj.weight", "h.5.mlp.c_proj.bias", "1849"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_1460.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_proj.weight" = ["Gemm_1460_reshape_B", "Gemm_1460_reshape_B_size"]

[functions.Gemm_1460_reshape_B]
name = 'Gemm_1460_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460_reshape_B_size]
name = 'Gemm_1460_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1492]
name = 'Gemm_1492'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492.auxiliary]
[functions.Gemm_1492.auxiliary.onnx]
node_name = "Gemm_1492"
node_type = "Gemm"
node_domain = ""
node_args = ["1886", "h.6.attn.c_attn.weight", "h.6.attn.c_attn.bias", "1887"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_1492.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_attn.weight" = ["Gemm_1492_reshape_B", "Gemm_1492_reshape_B_size"]

[functions.Gemm_1492_reshape_B]
name = 'Gemm_1492_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492_reshape_B_size]
name = 'Gemm_1492_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1635]
name = 'Gemm_1635'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635.auxiliary]
[functions.Gemm_1635.auxiliary.onnx]
node_name = "Gemm_1635"
node_type = "Gemm"
node_domain = ""
node_args = ["2048", "h.6.attn.c_proj.weight", "h.6.attn.c_proj.bias", "2049"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_1635.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_proj.weight" = ["Gemm_1635_reshape_B", "Gemm_1635_reshape_B_size"]

[functions.Gemm_1635_reshape_B]
name = 'Gemm_1635_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635_reshape_B_size]
name = 'Gemm_1635_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1667]
name = 'Gemm_1667'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667.auxiliary]
[functions.Gemm_1667.auxiliary.onnx]
node_name = "Gemm_1667"
node_type = "Gemm"
node_domain = ""
node_args = ["2086", "h.6.mlp.c_fc.weight", "h.6.mlp.c_fc.bias", "2087"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_1667.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_fc.weight" = ["Gemm_1667_reshape_B", "Gemm_1667_reshape_B_size"]

[functions.Gemm_1667_reshape_B]
name = 'Gemm_1667_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667_reshape_B_size]
name = 'Gemm_1667_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1700]
name = 'Gemm_1700'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700.auxiliary]
[functions.Gemm_1700.auxiliary.onnx]
node_name = "Gemm_1700"
node_type = "Gemm"
node_domain = ""
node_args = ["2123", "h.6.mlp.c_proj.weight", "h.6.mlp.c_proj.bias", "2124"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_1700.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_proj.weight" = ["Gemm_1700_reshape_B", "Gemm_1700_reshape_B_size"]

[functions.Gemm_1700_reshape_B]
name = 'Gemm_1700_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700_reshape_B_size]
name = 'Gemm_1700_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1732]
name = 'Gemm_1732'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732.auxiliary]
[functions.Gemm_1732.auxiliary.onnx]
node_name = "Gemm_1732"
node_type = "Gemm"
node_domain = ""
node_args = ["2161", "h.7.attn.c_attn.weight", "h.7.attn.c_attn.bias", "2162"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_1732.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_attn.weight" = ["Gemm_1732_reshape_B", "Gemm_1732_reshape_B_size"]

[functions.Gemm_1732_reshape_B]
name = 'Gemm_1732_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732_reshape_B_size]
name = 'Gemm_1732_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1875]
name = 'Gemm_1875'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875.auxiliary]
[functions.Gemm_1875.auxiliary.onnx]
node_name = "Gemm_1875"
node_type = "Gemm"
node_domain = ""
node_args = ["2323", "h.7.attn.c_proj.weight", "h.7.attn.c_proj.bias", "2324"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_1875.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_proj.weight" = ["Gemm_1875_reshape_B", "Gemm_1875_reshape_B_size"]

[functions.Gemm_1875_reshape_B]
name = 'Gemm_1875_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875_reshape_B_size]
name = 'Gemm_1875_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1907]
name = 'Gemm_1907'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907.auxiliary]
[functions.Gemm_1907.auxiliary.onnx]
node_name = "Gemm_1907"
node_type = "Gemm"
node_domain = ""
node_args = ["2361", "h.7.mlp.c_fc.weight", "h.7.mlp.c_fc.bias", "2362"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_1907.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_fc.weight" = ["Gemm_1907_reshape_B", "Gemm_1907_reshape_B_size"]

[functions.Gemm_1907_reshape_B]
name = 'Gemm_1907_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907_reshape_B_size]
name = 'Gemm_1907_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1940]
name = 'Gemm_1940'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940.auxiliary]
[functions.Gemm_1940.auxiliary.onnx]
node_name = "Gemm_1940"
node_type = "Gemm"
node_domain = ""
node_args = ["2398", "h.7.mlp.c_proj.weight", "h.7.mlp.c_proj.bias", "2399"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_1940.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_proj.weight" = ["Gemm_1940_reshape_B", "Gemm_1940_reshape_B_size"]

[functions.Gemm_1940_reshape_B]
name = 'Gemm_1940_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940_reshape_B_size]
name = 'Gemm_1940_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_195]
name = 'Gemm_195'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195.auxiliary]
[functions.Gemm_195.auxiliary.onnx]
node_name = "Gemm_195"
node_type = "Gemm"
node_domain = ""
node_args = ["398", "h.0.attn.c_proj.weight", "h.0.attn.c_proj.bias", "399"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_195.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_proj.weight" = ["Gemm_195_reshape_B", "Gemm_195_reshape_B_size"]

[functions.Gemm_195_reshape_B]
name = 'Gemm_195_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195_reshape_B_size]
name = 'Gemm_195_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1972]
name = 'Gemm_1972'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972.auxiliary]
[functions.Gemm_1972.auxiliary.onnx]
node_name = "Gemm_1972"
node_type = "Gemm"
node_domain = ""
node_args = ["2436", "h.8.attn.c_attn.weight", "h.8.attn.c_attn.bias", "2437"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_1972.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_attn.weight" = ["Gemm_1972_reshape_B", "Gemm_1972_reshape_B_size"]

[functions.Gemm_1972_reshape_B]
name = 'Gemm_1972_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972_reshape_B_size]
name = 'Gemm_1972_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2115]
name = 'Gemm_2115'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115.auxiliary]
[functions.Gemm_2115.auxiliary.onnx]
node_name = "Gemm_2115"
node_type = "Gemm"
node_domain = ""
node_args = ["2598", "h.8.attn.c_proj.weight", "h.8.attn.c_proj.bias", "2599"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_2115.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_proj.weight" = ["Gemm_2115_reshape_B", "Gemm_2115_reshape_B_size"]

[functions.Gemm_2115_reshape_B]
name = 'Gemm_2115_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115_reshape_B_size]
name = 'Gemm_2115_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2147]
name = 'Gemm_2147'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147.auxiliary]
[functions.Gemm_2147.auxiliary.onnx]
node_name = "Gemm_2147"
node_type = "Gemm"
node_domain = ""
node_args = ["2636", "h.8.mlp.c_fc.weight", "h.8.mlp.c_fc.bias", "2637"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_2147.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_fc.weight" = ["Gemm_2147_reshape_B", "Gemm_2147_reshape_B_size"]

[functions.Gemm_2147_reshape_B]
name = 'Gemm_2147_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147_reshape_B_size]
name = 'Gemm_2147_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2180]
name = 'Gemm_2180'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180.auxiliary]
[functions.Gemm_2180.auxiliary.onnx]
node_name = "Gemm_2180"
node_type = "Gemm"
node_domain = ""
node_args = ["2673", "h.8.mlp.c_proj.weight", "h.8.mlp.c_proj.bias", "2674"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_2180.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_proj.weight" = ["Gemm_2180_reshape_B", "Gemm_2180_reshape_B_size"]

[functions.Gemm_2180_reshape_B]
name = 'Gemm_2180_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180_reshape_B_size]
name = 'Gemm_2180_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2212]
name = 'Gemm_2212'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212.auxiliary]
[functions.Gemm_2212.auxiliary.onnx]
node_name = "Gemm_2212"
node_type = "Gemm"
node_domain = ""
node_args = ["2711", "h.9.attn.c_attn.weight", "h.9.attn.c_attn.bias", "2712"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_2212.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_attn.weight" = ["Gemm_2212_reshape_B", "Gemm_2212_reshape_B_size"]

[functions.Gemm_2212_reshape_B]
name = 'Gemm_2212_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212_reshape_B_size]
name = 'Gemm_2212_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_227]
name = 'Gemm_227'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227.auxiliary]
[functions.Gemm_227.auxiliary.onnx]
node_name = "Gemm_227"
node_type = "Gemm"
node_domain = ""
node_args = ["436", "h.0.mlp.c_fc.weight", "h.0.mlp.c_fc.bias", "437"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_227.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_fc.weight" = ["Gemm_227_reshape_B", "Gemm_227_reshape_B_size"]

[functions.Gemm_227_reshape_B]
name = 'Gemm_227_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227_reshape_B_size]
name = 'Gemm_227_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2355]
name = 'Gemm_2355'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355.auxiliary]
[functions.Gemm_2355.auxiliary.onnx]
node_name = "Gemm_2355"
node_type = "Gemm"
node_domain = ""
node_args = ["2873", "h.9.attn.c_proj.weight", "h.9.attn.c_proj.bias", "2874"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_2355.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_proj.weight" = ["Gemm_2355_reshape_B", "Gemm_2355_reshape_B_size"]

[functions.Gemm_2355_reshape_B]
name = 'Gemm_2355_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355_reshape_B_size]
name = 'Gemm_2355_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2387]
name = 'Gemm_2387'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387.auxiliary]
[functions.Gemm_2387.auxiliary.onnx]
node_name = "Gemm_2387"
node_type = "Gemm"
node_domain = ""
node_args = ["2911", "h.9.mlp.c_fc.weight", "h.9.mlp.c_fc.bias", "2912"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_2387.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_fc.weight" = ["Gemm_2387_reshape_B", "Gemm_2387_reshape_B_size"]

[functions.Gemm_2387_reshape_B]
name = 'Gemm_2387_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387_reshape_B_size]
name = 'Gemm_2387_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2420]
name = 'Gemm_2420'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420.auxiliary]
[functions.Gemm_2420.auxiliary.onnx]
node_name = "Gemm_2420"
node_type = "Gemm"
node_domain = ""
node_args = ["2948", "h.9.mlp.c_proj.weight", "h.9.mlp.c_proj.bias", "2949"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_2420.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_proj.weight" = ["Gemm_2420_reshape_B", "Gemm_2420_reshape_B_size"]

[functions.Gemm_2420_reshape_B]
name = 'Gemm_2420_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420_reshape_B_size]
name = 'Gemm_2420_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2452]
name = 'Gemm_2452'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452.auxiliary]
[functions.Gemm_2452.auxiliary.onnx]
node_name = "Gemm_2452"
node_type = "Gemm"
node_domain = ""
node_args = ["2986", "h.10.attn.c_attn.weight", "h.10.attn.c_attn.bias", "2987"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_2452.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_attn.weight" = ["Gemm_2452_reshape_B", "Gemm_2452_reshape_B_size"]

[functions.Gemm_2452_reshape_B]
name = 'Gemm_2452_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452_reshape_B_size]
name = 'Gemm_2452_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2595]
name = 'Gemm_2595'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595.auxiliary]
[functions.Gemm_2595.auxiliary.onnx]
node_name = "Gemm_2595"
node_type = "Gemm"
node_domain = ""
node_args = ["3148", "h.10.attn.c_proj.weight", "h.10.attn.c_proj.bias", "3149"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_2595.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_proj.weight" = ["Gemm_2595_reshape_B", "Gemm_2595_reshape_B_size"]

[functions.Gemm_2595_reshape_B]
name = 'Gemm_2595_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595_reshape_B_size]
name = 'Gemm_2595_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_260]
name = 'Gemm_260'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260.auxiliary]
[functions.Gemm_260.auxiliary.onnx]
node_name = "Gemm_260"
node_type = "Gemm"
node_domain = ""
node_args = ["473", "h.0.mlp.c_proj.weight", "h.0.mlp.c_proj.bias", "474"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_260.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_proj.weight" = ["Gemm_260_reshape_B", "Gemm_260_reshape_B_size"]

[functions.Gemm_260_reshape_B]
name = 'Gemm_260_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260_reshape_B_size]
name = 'Gemm_260_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2627]
name = 'Gemm_2627'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627.auxiliary]
[functions.Gemm_2627.auxiliary.onnx]
node_name = "Gemm_2627"
node_type = "Gemm"
node_domain = ""
node_args = ["3186", "h.10.mlp.c_fc.weight", "h.10.mlp.c_fc.bias", "3187"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_2627.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_fc.weight" = ["Gemm_2627_reshape_B", "Gemm_2627_reshape_B_size"]

[functions.Gemm_2627_reshape_B]
name = 'Gemm_2627_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627_reshape_B_size]
name = 'Gemm_2627_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2660]
name = 'Gemm_2660'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660.auxiliary]
[functions.Gemm_2660.auxiliary.onnx]
node_name = "Gemm_2660"
node_type = "Gemm"
node_domain = ""
node_args = ["3223", "h.10.mlp.c_proj.weight", "h.10.mlp.c_proj.bias", "3224"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_2660.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_proj.weight" = ["Gemm_2660_reshape_B", "Gemm_2660_reshape_B_size"]

[functions.Gemm_2660_reshape_B]
name = 'Gemm_2660_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660_reshape_B_size]
name = 'Gemm_2660_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2692]
name = 'Gemm_2692'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692.auxiliary]
[functions.Gemm_2692.auxiliary.onnx]
node_name = "Gemm_2692"
node_type = "Gemm"
node_domain = ""
node_args = ["3261", "h.11.attn.c_attn.weight", "h.11.attn.c_attn.bias", "3262"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_2692.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_attn.weight" = ["Gemm_2692_reshape_B", "Gemm_2692_reshape_B_size"]

[functions.Gemm_2692_reshape_B]
name = 'Gemm_2692_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692_reshape_B_size]
name = 'Gemm_2692_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2835]
name = 'Gemm_2835'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835.auxiliary]
[functions.Gemm_2835.auxiliary.onnx]
node_name = "Gemm_2835"
node_type = "Gemm"
node_domain = ""
node_args = ["3423", "h.11.attn.c_proj.weight", "h.11.attn.c_proj.bias", "3424"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_2835.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_proj.weight" = ["Gemm_2835_reshape_B", "Gemm_2835_reshape_B_size"]

[functions.Gemm_2835_reshape_B]
name = 'Gemm_2835_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835_reshape_B_size]
name = 'Gemm_2835_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2867]
name = 'Gemm_2867'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867.auxiliary]
[functions.Gemm_2867.auxiliary.onnx]
node_name = "Gemm_2867"
node_type = "Gemm"
node_domain = ""
node_args = ["3461", "h.11.mlp.c_fc.weight", "h.11.mlp.c_fc.bias", "3462"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_2867.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_fc.weight" = ["Gemm_2867_reshape_B", "Gemm_2867_reshape_B_size"]

[functions.Gemm_2867_reshape_B]
name = 'Gemm_2867_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867_reshape_B_size]
name = 'Gemm_2867_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2900]
name = 'Gemm_2900'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900.auxiliary]
[functions.Gemm_2900.auxiliary.onnx]
node_name = "Gemm_2900"
node_type = "Gemm"
node_domain = ""
node_args = ["3498", "h.11.mlp.c_proj.weight", "h.11.mlp.c_proj.bias", "3499"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_2900.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_proj.weight" = ["Gemm_2900_reshape_B", "Gemm_2900_reshape_B_size"]

[functions.Gemm_2900_reshape_B]
name = 'Gemm_2900_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900_reshape_B_size]
name = 'Gemm_2900_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_292]
name = 'Gemm_292'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292.auxiliary]
[functions.Gemm_292.auxiliary.onnx]
node_name = "Gemm_292"
node_type = "Gemm"
node_domain = ""
node_args = ["511", "h.1.attn.c_attn.weight", "h.1.attn.c_attn.bias", "512"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_292.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_attn.weight" = ["Gemm_292_reshape_B", "Gemm_292_reshape_B_size"]

[functions.Gemm_292_reshape_B]
name = 'Gemm_292_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292_reshape_B_size]
name = 'Gemm_292_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_435]
name = 'Gemm_435'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435.auxiliary]
[functions.Gemm_435.auxiliary.onnx]
node_name = "Gemm_435"
node_type = "Gemm"
node_domain = ""
node_args = ["673", "h.1.attn.c_proj.weight", "h.1.attn.c_proj.bias", "674"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_435.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_proj.weight" = ["Gemm_435_reshape_B", "Gemm_435_reshape_B_size"]

[functions.Gemm_435_reshape_B]
name = 'Gemm_435_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435_reshape_B_size]
name = 'Gemm_435_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_467]
name = 'Gemm_467'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467.auxiliary]
[functions.Gemm_467.auxiliary.onnx]
node_name = "Gemm_467"
node_type = "Gemm"
node_domain = ""
node_args = ["711", "h.1.mlp.c_fc.weight", "h.1.mlp.c_fc.bias", "712"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_467.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_fc.weight" = ["Gemm_467_reshape_B", "Gemm_467_reshape_B_size"]

[functions.Gemm_467_reshape_B]
name = 'Gemm_467_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467_reshape_B_size]
name = 'Gemm_467_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_500]
name = 'Gemm_500'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500.auxiliary]
[functions.Gemm_500.auxiliary.onnx]
node_name = "Gemm_500"
node_type = "Gemm"
node_domain = ""
node_args = ["748", "h.1.mlp.c_proj.weight", "h.1.mlp.c_proj.bias", "749"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_500.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_proj.weight" = ["Gemm_500_reshape_B", "Gemm_500_reshape_B_size"]

[functions.Gemm_500_reshape_B]
name = 'Gemm_500_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500_reshape_B_size]
name = 'Gemm_500_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_52]
name = 'Gemm_52'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52.auxiliary]
[functions.Gemm_52.auxiliary.onnx]
node_name = "Gemm_52"
node_type = "Gemm"
node_domain = ""
node_args = ["236", "h.0.attn.c_attn.weight", "h.0.attn.c_attn.bias", "237"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_52.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_attn.weight" = ["Gemm_52_reshape_B", "Gemm_52_reshape_B_size"]

[functions.Gemm_52_reshape_B]
name = 'Gemm_52_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52_reshape_B_size]
name = 'Gemm_52_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_532]
name = 'Gemm_532'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532.auxiliary]
[functions.Gemm_532.auxiliary.onnx]
node_name = "Gemm_532"
node_type = "Gemm"
node_domain = ""
node_args = ["786", "h.2.attn.c_attn.weight", "h.2.attn.c_attn.bias", "787"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_532.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_attn.weight" = ["Gemm_532_reshape_B", "Gemm_532_reshape_B_size"]

[functions.Gemm_532_reshape_B]
name = 'Gemm_532_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532_reshape_B_size]
name = 'Gemm_532_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_675]
name = 'Gemm_675'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675.auxiliary]
[functions.Gemm_675.auxiliary.onnx]
node_name = "Gemm_675"
node_type = "Gemm"
node_domain = ""
node_args = ["948", "h.2.attn.c_proj.weight", "h.2.attn.c_proj.bias", "949"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_675.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_proj.weight" = ["Gemm_675_reshape_B", "Gemm_675_reshape_B_size"]

[functions.Gemm_675_reshape_B]
name = 'Gemm_675_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675_reshape_B_size]
name = 'Gemm_675_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_707]
name = 'Gemm_707'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707.auxiliary]
[functions.Gemm_707.auxiliary.onnx]
node_name = "Gemm_707"
node_type = "Gemm"
node_domain = ""
node_args = ["986", "h.2.mlp.c_fc.weight", "h.2.mlp.c_fc.bias", "987"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_707.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_fc.weight" = ["Gemm_707_reshape_B", "Gemm_707_reshape_B_size"]

[functions.Gemm_707_reshape_B]
name = 'Gemm_707_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707_reshape_B_size]
name = 'Gemm_707_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_740]
name = 'Gemm_740'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740.auxiliary]
[functions.Gemm_740.auxiliary.onnx]
node_name = "Gemm_740"
node_type = "Gemm"
node_domain = ""
node_args = ["1023", "h.2.mlp.c_proj.weight", "h.2.mlp.c_proj.bias", "1024"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_740.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_proj.weight" = ["Gemm_740_reshape_B", "Gemm_740_reshape_B_size"]

[functions.Gemm_740_reshape_B]
name = 'Gemm_740_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740_reshape_B_size]
name = 'Gemm_740_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_772]
name = 'Gemm_772'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772.auxiliary]
[functions.Gemm_772.auxiliary.onnx]
node_name = "Gemm_772"
node_type = "Gemm"
node_domain = ""
node_args = ["1061", "h.3.attn.c_attn.weight", "h.3.attn.c_attn.bias", "1062"]
node_arg_shapes = [[10, 768], [768, 2304], [2304], [10, 2304]]

[functions.Gemm_772.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_attn.weight" = ["Gemm_772_reshape_B", "Gemm_772_reshape_B_size"]

[functions.Gemm_772_reshape_B]
name = 'Gemm_772_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772_reshape_B_size]
name = 'Gemm_772_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_915]
name = 'Gemm_915'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915.auxiliary]
[functions.Gemm_915.auxiliary.onnx]
node_name = "Gemm_915"
node_type = "Gemm"
node_domain = ""
node_args = ["1223", "h.3.attn.c_proj.weight", "h.3.attn.c_proj.bias", "1224"]
node_arg_shapes = [[10, 768], [768, 768], [768], [10, 768]]

[functions.Gemm_915.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_proj.weight" = ["Gemm_915_reshape_B", "Gemm_915_reshape_B_size"]

[functions.Gemm_915_reshape_B]
name = 'Gemm_915_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915_reshape_B_size]
name = 'Gemm_915_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_947]
name = 'Gemm_947'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947.auxiliary]
[functions.Gemm_947.auxiliary.onnx]
node_name = "Gemm_947"
node_type = "Gemm"
node_domain = ""
node_args = ["1261", "h.3.mlp.c_fc.weight", "h.3.mlp.c_fc.bias", "1262"]
node_arg_shapes = [[10, 768], [768, 3072], [3072], [10, 3072]]

[functions.Gemm_947.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_fc.weight" = ["Gemm_947_reshape_B", "Gemm_947_reshape_B_size"]

[functions.Gemm_947_reshape_B]
name = 'Gemm_947_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947_reshape_B_size]
name = 'Gemm_947_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_980]
name = 'Gemm_980'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980.auxiliary]
[functions.Gemm_980.auxiliary.onnx]
node_name = "Gemm_980"
node_type = "Gemm"
node_domain = ""
node_args = ["1298", "h.3.mlp.c_proj.weight", "h.3.mlp.c_proj.bias", "1299"]
node_arg_shapes = [[10, 3072], [3072, 768], [768], [10, 768]]

[functions.Gemm_980.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_proj.weight" = ["Gemm_980_reshape_B", "Gemm_980_reshape_B_size"]

[functions.Gemm_980_reshape_B]
name = 'Gemm_980_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980_reshape_B_size]
name = 'Gemm_980_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale]
name = 'MatMul_1088_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1088_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1088_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1370", "1394", "1425"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_1114]
name = 'MatMul_1114'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1114.auxiliary]
[functions.MatMul_1114.auxiliary.onnx]
node_name = "MatMul_1114"
node_type = "MatMul"
node_domain = ""
node_args = ["1455", "1418", "1456"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_128_FusedMatMulAndScale]
name = 'MatMul_128_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_128_FusedMatMulAndScale.auxiliary]
[functions.MatMul_128_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_128_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["270", "294", "325"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_1328_FusedMatMulAndScale]
name = 'MatMul_1328_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1328_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1328_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1328_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1645", "1669", "1700"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_1354]
name = 'MatMul_1354'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1354.auxiliary]
[functions.MatMul_1354.auxiliary.onnx]
node_name = "MatMul_1354"
node_type = "MatMul"
node_domain = ""
node_args = ["1730", "1693", "1731"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_154]
name = 'MatMul_154'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_154.auxiliary]
[functions.MatMul_154.auxiliary.onnx]
node_name = "MatMul_154"
node_type = "MatMul"
node_domain = ""
node_args = ["355", "318", "356"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_1568_FusedMatMulAndScale]
name = 'MatMul_1568_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1568_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1568_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1568_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1920", "1944", "1975"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_1594]
name = 'MatMul_1594'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1594.auxiliary]
[functions.MatMul_1594.auxiliary.onnx]
node_name = "MatMul_1594"
node_type = "MatMul"
node_domain = ""
node_args = ["2005", "1968", "2006"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_1808_FusedMatMulAndScale]
name = 'MatMul_1808_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1808_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1808_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1808_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2195", "2219", "2250"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_1834]
name = 'MatMul_1834'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1834.auxiliary]
[functions.MatMul_1834.auxiliary.onnx]
node_name = "MatMul_1834"
node_type = "MatMul"
node_domain = ""
node_args = ["2280", "2243", "2281"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_2048_FusedMatMulAndScale]
name = 'MatMul_2048_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2048_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2048_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2048_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2470", "2494", "2525"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_2074]
name = 'MatMul_2074'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2074.auxiliary]
[functions.MatMul_2074.auxiliary.onnx]
node_name = "MatMul_2074"
node_type = "MatMul"
node_domain = ""
node_args = ["2555", "2518", "2556"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_2288_FusedMatMulAndScale]
name = 'MatMul_2288_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2288_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2288_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2288_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2745", "2769", "2800"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_2314]
name = 'MatMul_2314'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2314.auxiliary]
[functions.MatMul_2314.auxiliary.onnx]
node_name = "MatMul_2314"
node_type = "MatMul"
node_domain = ""
node_args = ["2830", "2793", "2831"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_2528_FusedMatMulAndScale]
name = 'MatMul_2528_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2528_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2528_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2528_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3020", "3044", "3075"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_2554]
name = 'MatMul_2554'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2554.auxiliary]
[functions.MatMul_2554.auxiliary.onnx]
node_name = "MatMul_2554"
node_type = "MatMul"
node_domain = ""
node_args = ["3105", "3068", "3106"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_2768_FusedMatMulAndScale]
name = 'MatMul_2768_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2768_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2768_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2768_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3295", "3319", "3350"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_2794]
name = 'MatMul_2794'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2794.auxiliary]
[functions.MatMul_2794.auxiliary.onnx]
node_name = "MatMul_2794"
node_type = "MatMul"
node_domain = ""
node_args = ["3380", "3343", "3381"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_368_FusedMatMulAndScale]
name = 'MatMul_368_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_368_FusedMatMulAndScale.auxiliary]
[functions.MatMul_368_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_368_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["545", "569", "600"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_394]
name = 'MatMul_394'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_394.auxiliary]
[functions.MatMul_394.auxiliary.onnx]
node_name = "MatMul_394"
node_type = "MatMul"
node_domain = ""
node_args = ["630", "593", "631"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_608_FusedMatMulAndScale]
name = 'MatMul_608_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_608_FusedMatMulAndScale.auxiliary]
[functions.MatMul_608_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_608_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["820", "844", "875"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_634]
name = 'MatMul_634'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_634.auxiliary]
[functions.MatMul_634.auxiliary.onnx]
node_name = "MatMul_634"
node_type = "MatMul"
node_domain = ""
node_args = ["905", "868", "906"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.MatMul_848_FusedMatMulAndScale]
name = 'MatMul_848_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_848_FusedMatMulAndScale.auxiliary]
[functions.MatMul_848_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_848_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1095", "1119", "1150"]
node_arg_shapes = [[1, 12, 10, 64], [1, 12, 64, 10], [1, 12, 10, 10]]

[functions.MatMul_874]
name = 'MatMul_874'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_874.auxiliary]
[functions.MatMul_874.auxiliary.onnx]
node_name = "MatMul_874"
node_type = "MatMul"
node_domain = ""
node_args = ["1180", "1143", "1181"]
node_arg_shapes = [[1, 12, 10, 10], [1, 12, 10, 64], [1, 12, 10, 64]]

[functions.mlas_impl_008e46e6fc00c8416b1cc764768c1850]
name = 'mlas_impl_008e46e6fc00c8416b1cc764768c1850'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_01ecf7bcaacb19c94a7593e7dc8e49bb]
name = 'mlas_impl_01ecf7bcaacb19c94a7593e7dc8e49bb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_09e73e6d391bd92040e8ada2a164802f]
name = 'mlas_impl_09e73e6d391bd92040e8ada2a164802f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_0ddb4d57db9e777fc142c577ef2c5dc2]
name = 'mlas_impl_0ddb4d57db9e777fc142c577ef2c5dc2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_12f5da2a0adf58cd29d4d5e8a2295441]
name = 'mlas_impl_12f5da2a0adf58cd29d4d5e8a2295441'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_1b8364e0b8a9980510a7bf3a01392b0e]
name = 'mlas_impl_1b8364e0b8a9980510a7bf3a01392b0e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2df72a820ee8dd692200b3e547eba7d6]
name = 'mlas_impl_2df72a820ee8dd692200b3e547eba7d6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_3fa9572bccb0e434983de1e44276ac21]
name = 'mlas_impl_3fa9572bccb0e434983de1e44276ac21'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_412ca8cc2ebe3178215cb9bec08a383c]
name = 'mlas_impl_412ca8cc2ebe3178215cb9bec08a383c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_42522ecfee4cd6f6c6788fbda0718d45]
name = 'mlas_impl_42522ecfee4cd6f6c6788fbda0718d45'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_43f0bf1d844022b614f126bf9fe15401]
name = 'mlas_impl_43f0bf1d844022b614f126bf9fe15401'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_43f6a35afc38dd0ec717c1eb1a7ecbcb]
name = 'mlas_impl_43f6a35afc38dd0ec717c1eb1a7ecbcb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_44d13b7c146389d9271157e262acb94f]
name = 'mlas_impl_44d13b7c146389d9271157e262acb94f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_47e2b8202db386abc0307f75cd0a65ca]
name = 'mlas_impl_47e2b8202db386abc0307f75cd0a65ca'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4a78e4a2d7af670c6384ef1610fa4bab]
name = 'mlas_impl_4a78e4a2d7af670c6384ef1610fa4bab'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4d2a93a420508f5a7e152ee299ccf5d3]
name = 'mlas_impl_4d2a93a420508f5a7e152ee299ccf5d3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4ea311d4ad120853cd3bb8d4537d8fe9]
name = 'mlas_impl_4ea311d4ad120853cd3bb8d4537d8fe9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_514a2fcc4b81cfe1fb8259a10f8c423e]
name = 'mlas_impl_514a2fcc4b81cfe1fb8259a10f8c423e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_59683b206b07eda413762678f0d0f4bc]
name = 'mlas_impl_59683b206b07eda413762678f0d0f4bc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5b1a3da14b00e93bc100e7d368bb8046]
name = 'mlas_impl_5b1a3da14b00e93bc100e7d368bb8046'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_6187d8ec7fe34b2a7736feb5b163d734]
name = 'mlas_impl_6187d8ec7fe34b2a7736feb5b163d734'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_678b10c3b98e59d5a36fbe56ad61a66f]
name = 'mlas_impl_678b10c3b98e59d5a36fbe56ad61a66f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_728c493301572f8d65144b5fdb395382]
name = 'mlas_impl_728c493301572f8d65144b5fdb395382'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_730b2b939fad3f71e734d915ef77f4eb]
name = 'mlas_impl_730b2b939fad3f71e734d915ef77f4eb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_74047c1981df8db85e2a83ea90bb5438]
name = 'mlas_impl_74047c1981df8db85e2a83ea90bb5438'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_75e9ac5af3c5114b389b5bc2207a60a5]
name = 'mlas_impl_75e9ac5af3c5114b389b5bc2207a60a5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_76c57c00405e63c6cf8098c6c5477ef6]
name = 'mlas_impl_76c57c00405e63c6cf8098c6c5477ef6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_787c9876fa5d20d5bb00e23b013b62f0]
name = 'mlas_impl_787c9876fa5d20d5bb00e23b013b62f0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_7d029ec0c5fe7235b0b312fb5f85ab36]
name = 'mlas_impl_7d029ec0c5fe7235b0b312fb5f85ab36'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_80c9c38b0b2a0339b87cffdfd3faff17]
name = 'mlas_impl_80c9c38b0b2a0339b87cffdfd3faff17'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_85ca50818cfcf12224a088caefffbdfe]
name = 'mlas_impl_85ca50818cfcf12224a088caefffbdfe'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8f65a7677f704967c5a42cf2f5975815]
name = 'mlas_impl_8f65a7677f704967c5a42cf2f5975815'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9ad4eb0971a13370b238d525bb510359]
name = 'mlas_impl_9ad4eb0971a13370b238d525bb510359'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9ca7591c15ba978266d0c9e983879fbb]
name = 'mlas_impl_9ca7591c15ba978266d0c9e983879fbb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_a27946c9a63b5064ccd097eeb7a30fc3]
name = 'mlas_impl_a27946c9a63b5064ccd097eeb7a30fc3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_a3e98c51beeaccfbb1bd2c9edb1a32f0]
name = 'mlas_impl_a3e98c51beeaccfbb1bd2c9edb1a32f0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_af84b06e191514f3cbe7a84ff4f4e31b]
name = 'mlas_impl_af84b06e191514f3cbe7a84ff4f4e31b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b2b15abb08f7411167c8a5b46ad576c6]
name = 'mlas_impl_b2b15abb08f7411167c8a5b46ad576c6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b3b369e4971aafa3dc600b55a81ea818]
name = 'mlas_impl_b3b369e4971aafa3dc600b55a81ea818'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b638be799582dcc9fd735bc73e788eb4]
name = 'mlas_impl_b638be799582dcc9fd735bc73e788eb4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b73e0881df9a5f0dca43ca51dcf57de8]
name = 'mlas_impl_b73e0881df9a5f0dca43ca51dcf57de8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_bad7408e376c62dd84f3e9c05a46af9c]
name = 'mlas_impl_bad7408e376c62dd84f3e9c05a46af9c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c32a44436e4905fd3790ed2d41f61c18]
name = 'mlas_impl_c32a44436e4905fd3790ed2d41f61c18'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_cbeee67610856a2ff3c3d8297a5ce349]
name = 'mlas_impl_cbeee67610856a2ff3c3d8297a5ce349'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_d9a16103890bbe47e8952eece07dbe36]
name = 'mlas_impl_d9a16103890bbe47e8952eece07dbe36'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_d9d19f7c81cd2a85fde3b2f952612db6]
name = 'mlas_impl_d9d19f7c81cd2a85fde3b2f952612db6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e2443bc3516c9055ad493558d80ff4fc]
name = 'mlas_impl_e2443bc3516c9055ad493558d80ff4fc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e2a089fc4f4edef2823e3e206fca51aa]
name = 'mlas_impl_e2a089fc4f4edef2823e3e206fca51aa'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0229c6004c7ec179aa92f54ab11decb9]
name = 'nest_impl_0229c6004c7ec179aa92f54ab11decb9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_03cfea7f673050d92864eef07527d9c9]
name = 'nest_impl_03cfea7f673050d92864eef07527d9c9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_067b636e22d2059f6f8187516cd0fa6b]
name = 'nest_impl_067b636e22d2059f6f8187516cd0fa6b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0b65484a188450746e9a21ab45debaba]
name = 'nest_impl_0b65484a188450746e9a21ab45debaba'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0be32f43262869ecfc3f5152b7747fd9]
name = 'nest_impl_0be32f43262869ecfc3f5152b7747fd9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0c0f6ddd267d776fcbbcab4ea830978e]
name = 'nest_impl_0c0f6ddd267d776fcbbcab4ea830978e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_11de5f5d5c687c3c94003e62f3fa9dc9]
name = 'nest_impl_11de5f5d5c687c3c94003e62f3fa9dc9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_12c6356017cb9d5c70d41290d18b6215]
name = 'nest_impl_12c6356017cb9d5c70d41290d18b6215'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_15e88b0c7b4f3e3e4b5112e31e039ed4]
name = 'nest_impl_15e88b0c7b4f3e3e4b5112e31e039ed4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1d9b15c445a3e74ec5b2ef3fca74e7b4]
name = 'nest_impl_1d9b15c445a3e74ec5b2ef3fca74e7b4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_22a2de5918b7f8bc4ab9f192c35d5158]
name = 'nest_impl_22a2de5918b7f8bc4ab9f192c35d5158'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2344f7b16d39cfd985f6d006926345b7]
name = 'nest_impl_2344f7b16d39cfd985f6d006926345b7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_26d449889645a6d49983556a654ec4a8]
name = 'nest_impl_26d449889645a6d49983556a654ec4a8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_28e3dd2f4ab2d9bade19295483cee329]
name = 'nest_impl_28e3dd2f4ab2d9bade19295483cee329'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2d8e745ca361f03a38d12e9a12466ce1]
name = 'nest_impl_2d8e745ca361f03a38d12e9a12466ce1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_332901945e4e473b9687d27db1ae179c]
name = 'nest_impl_332901945e4e473b9687d27db1ae179c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3ef23cb546a1f2feb8aa312f257ef9b7]
name = 'nest_impl_3ef23cb546a1f2feb8aa312f257ef9b7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4863f38f6900f75c972d1f1e0ed66160]
name = 'nest_impl_4863f38f6900f75c972d1f1e0ed66160'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_498a473e67ab7c81b486266660ce7265]
name = 'nest_impl_498a473e67ab7c81b486266660ce7265'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4e3f8a7ee69f51510d62b35102142da5]
name = 'nest_impl_4e3f8a7ee69f51510d62b35102142da5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4f075fcf6c671d36d30a5ce5828a77d2]
name = 'nest_impl_4f075fcf6c671d36d30a5ce5828a77d2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_52452b89c637c3ae9088c8600e18f4b7]
name = 'nest_impl_52452b89c637c3ae9088c8600e18f4b7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_534b9a466505cd4ef94edd9114cdcc70]
name = 'nest_impl_534b9a466505cd4ef94edd9114cdcc70'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5cb4c0899637ce600a10ab22688c6104]
name = 'nest_impl_5cb4c0899637ce600a10ab22688c6104'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5fbb8c6d1aa5cb51c6198e1405089478]
name = 'nest_impl_5fbb8c6d1aa5cb51c6198e1405089478'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_60535cfa503a5a0d569968ee405c0f71]
name = 'nest_impl_60535cfa503a5a0d569968ee405c0f71'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6a5af5502e85f7aff0bfbea3fa5c24db]
name = 'nest_impl_6a5af5502e85f7aff0bfbea3fa5c24db'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6b00fbf0a94ad913c5cd006c84129d87]
name = 'nest_impl_6b00fbf0a94ad913c5cd006c84129d87'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6bb1f2a9064142aa8ccda55deaffcfe4]
name = 'nest_impl_6bb1f2a9064142aa8ccda55deaffcfe4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6cf8047045d2898d2c19ce089a6decd9]
name = 'nest_impl_6cf8047045d2898d2c19ce089a6decd9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6f541a9f9f94689a0349c216dfddda02]
name = 'nest_impl_6f541a9f9f94689a0349c216dfddda02'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_71e7b0840abd3b38ab636bd068940ea0]
name = 'nest_impl_71e7b0840abd3b38ab636bd068940ea0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7688fd472b49c3ffc67e5cfe4f5e6e44]
name = 'nest_impl_7688fd472b49c3ffc67e5cfe4f5e6e44'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_79ab2028461d41a3f4997a4947046989]
name = 'nest_impl_79ab2028461d41a3f4997a4947046989'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7b72791160a0203f876fc93fffc66401]
name = 'nest_impl_7b72791160a0203f876fc93fffc66401'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7b8ff3c2368e92f7490c40e961d124db]
name = 'nest_impl_7b8ff3c2368e92f7490c40e961d124db'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7cdfc7e646eefa76d2fe58e61fe1b1e4]
name = 'nest_impl_7cdfc7e646eefa76d2fe58e61fe1b1e4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_85d8b1c23f08593429eb10017f5b6d04]
name = 'nest_impl_85d8b1c23f08593429eb10017f5b6d04'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_86ac30704661f97d22fe7d7c03536dbf]
name = 'nest_impl_86ac30704661f97d22fe7d7c03536dbf'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8a914ab0c3f37163edbe08bea2bf04c8]
name = 'nest_impl_8a914ab0c3f37163edbe08bea2bf04c8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_92d26c56c13a6f8e90bfe9ca8e9e20a0]
name = 'nest_impl_92d26c56c13a6f8e90bfe9ca8e9e20a0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_97091c58379628476fa64ea09d44e872]
name = 'nest_impl_97091c58379628476fa64ea09d44e872'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_992dc8ef98f1caaf2991f6d65fb6474e]
name = 'nest_impl_992dc8ef98f1caaf2991f6d65fb6474e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a2dc3d3099d3fb938afedbcde092752c]
name = 'nest_impl_a2dc3d3099d3fb938afedbcde092752c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a3d70465e331d3b1e8eec456350b7c5e]
name = 'nest_impl_a3d70465e331d3b1e8eec456350b7c5e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a517444ab48980f05aee314393679cc5]
name = 'nest_impl_a517444ab48980f05aee314393679cc5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_aa801c8f76cf041abb4b3810fd0583e2]
name = 'nest_impl_aa801c8f76cf041abb4b3810fd0583e2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ae0d0c9ada483a71903bf59ff757b80b]
name = 'nest_impl_ae0d0c9ada483a71903bf59ff757b80b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b1486abaf9368665c31c7ccc7fe818e4]
name = 'nest_impl_b1486abaf9368665c31c7ccc7fe818e4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b7b9d649e655a117766a5235286ec6fa]
name = 'nest_impl_b7b9d649e655a117766a5235286ec6fa'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bb1a332340c5a1ad48902de81ec825c6]
name = 'nest_impl_bb1a332340c5a1ad48902de81ec825c6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bc3bfe368aa9b2181e6f68f632df0f54]
name = 'nest_impl_bc3bfe368aa9b2181e6f68f632df0f54'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bd7f74c2e0db5c5ca5dec57a6596909d]
name = 'nest_impl_bd7f74c2e0db5c5ca5dec57a6596909d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_be53d63ec2e718377d1cea84dd9489f8]
name = 'nest_impl_be53d63ec2e718377d1cea84dd9489f8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c003103aa6c72c1df7dc52f34455feb3]
name = 'nest_impl_c003103aa6c72c1df7dc52f34455feb3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c27b4b58512c276c07b3a9aedfa87095]
name = 'nest_impl_c27b4b58512c276c07b3a9aedfa87095'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c54739a54a36b9eb6043b8820e531441]
name = 'nest_impl_c54739a54a36b9eb6043b8820e531441'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c98ebb96dc899537144246c3555906f8]
name = 'nest_impl_c98ebb96dc899537144246c3555906f8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_cafe19745c7e9ddbd7e440897c13a9c9]
name = 'nest_impl_cafe19745c7e9ddbd7e440897c13a9c9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_cc902c2f8a206ea6a0a1007f79669b59]
name = 'nest_impl_cc902c2f8a206ea6a0a1007f79669b59'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d4ee2ca28f1a505be714c0bd48875654]
name = 'nest_impl_d4ee2ca28f1a505be714c0bd48875654'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d78180b4f621e96c4b9b77a05d09e3b8]
name = 'nest_impl_d78180b4f621e96c4b9b77a05d09e3b8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_dc40163f83ee72eebb51d04885c46218]
name = 'nest_impl_dc40163f83ee72eebb51d04885c46218'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e82546c68bf6c71e1184646c8d8f2103]
name = 'nest_impl_e82546c68bf6c71e1184646c8d8f2103'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_edaf9714083701a0f5ee5e02da2ab04b]
name = 'nest_impl_edaf9714083701a0f5ee5e02da2ab04b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_eece29a036ccd1b37e02e54a9559b707]
name = 'nest_impl_eece29a036ccd1b37e02e54a9559b707'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ef04c5ba4d643e42002680431d51312e]
name = 'nest_impl_ef04c5ba4d643e42002680431d51312e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ef1c27700cc877cdd9a4a371754d3cea]
name = 'nest_impl_ef1c27700cc877cdd9a4a371754d3cea'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_efa15d3818dbd40e38242be06b5215b1]
name = 'nest_impl_efa15d3818dbd40e38242be06b5215b1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f15f936ac2471b31254ca3b677aa41bd]
name = 'nest_impl_f15f936ac2471b31254ca3b677aa41bd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f3205467bbf7a80c10c566205e9c5ece]
name = 'nest_impl_f3205467bbf7a80c10c566205e9c5ece'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 10, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_fbfe695a8420f378600533eb7c247bc2]
name = 'nest_impl_fbfe695a8420f378600533eb7c247bc2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 64 ], affine_map = [ 7680, 640, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 10 ], affine_map = [ 7680, 640, 10, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 10, 10 ], affine_map = [ 1200, 100, 10, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[target]
[target.required]
os = "linux"

[target.required.CPU]
architecture = "x86_64"
extensions = ["+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3"]

[dependencies]
link_target = "torch-jit-export.o"
deploy_files = []
dynamic = []

[compiled_with]
compiler = ''
flags = ''
crt = ''
libraries = []

[declaration]
code = '''
#endif // __TOML__
//
// Header for RoboCode library torch-jit-export
//

#include <stdint.h>

#if defined(__cplusplus)
extern "C"
{
#endif // defined(__cplusplus)

//
// Functions
//

void Gemm_52_reshape_B(float*, float*);


int64_t Gemm_52_reshape_B_size();


void nest_impl_ef1c27700cc877cdd9a4a371754d3cea(float*, float*, float*);


void mlas_impl_76c57c00405e63c6cf8098c6c5477ef6(float*, float*, float*, float*);


void Gemm_52(float*, float*, float*, float*);


void nest_impl_fbfe695a8420f378600533eb7c247bc2(float*, float*, float*);


void MatMul_128_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_0b65484a188450746e9a21ab45debaba(float*, float*, float*);


void MatMul_154(float*, float*, float*);


void Gemm_195_reshape_B(float*, float*);


int64_t Gemm_195_reshape_B_size();


void nest_impl_a517444ab48980f05aee314393679cc5(float*, float*, float*);


void mlas_impl_a27946c9a63b5064ccd097eeb7a30fc3(float*, float*, float*, float*);


void Gemm_195(float*, float*, float*, float*);


void Gemm_227_reshape_B(float*, float*);


int64_t Gemm_227_reshape_B_size();


void nest_impl_f3205467bbf7a80c10c566205e9c5ece(float*, float*, float*);


void mlas_impl_9ca7591c15ba978266d0c9e983879fbb(float*, float*, float*, float*);


void Gemm_227(float*, float*, float*, float*);


void Gemm_260_reshape_B(float*, float*);


int64_t Gemm_260_reshape_B_size();


void nest_impl_1d9b15c445a3e74ec5b2ef3fca74e7b4(float*, float*, float*);


void mlas_impl_75e9ac5af3c5114b389b5bc2207a60a5(float*, float*, float*, float*);


void Gemm_260(float*, float*, float*, float*);


void Gemm_292_reshape_B(float*, float*);


int64_t Gemm_292_reshape_B_size();


void nest_impl_3ef23cb546a1f2feb8aa312f257ef9b7(float*, float*, float*);


void mlas_impl_42522ecfee4cd6f6c6788fbda0718d45(float*, float*, float*, float*);


void Gemm_292(float*, float*, float*, float*);


void nest_impl_5cb4c0899637ce600a10ab22688c6104(float*, float*, float*);


void MatMul_368_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_c27b4b58512c276c07b3a9aedfa87095(float*, float*, float*);


void MatMul_394(float*, float*, float*);


void Gemm_435_reshape_B(float*, float*);


int64_t Gemm_435_reshape_B_size();


void nest_impl_6f541a9f9f94689a0349c216dfddda02(float*, float*, float*);


void mlas_impl_e2a089fc4f4edef2823e3e206fca51aa(float*, float*, float*, float*);


void Gemm_435(float*, float*, float*, float*);


void Gemm_467_reshape_B(float*, float*);


int64_t Gemm_467_reshape_B_size();


void nest_impl_97091c58379628476fa64ea09d44e872(float*, float*, float*);


void mlas_impl_c32a44436e4905fd3790ed2d41f61c18(float*, float*, float*, float*);


void Gemm_467(float*, float*, float*, float*);


void Gemm_500_reshape_B(float*, float*);


int64_t Gemm_500_reshape_B_size();


void nest_impl_85d8b1c23f08593429eb10017f5b6d04(float*, float*, float*);


void mlas_impl_7d029ec0c5fe7235b0b312fb5f85ab36(float*, float*, float*, float*);


void Gemm_500(float*, float*, float*, float*);


void Gemm_532_reshape_B(float*, float*);


int64_t Gemm_532_reshape_B_size();


void nest_impl_5fbb8c6d1aa5cb51c6198e1405089478(float*, float*, float*);


void mlas_impl_12f5da2a0adf58cd29d4d5e8a2295441(float*, float*, float*, float*);


void Gemm_532(float*, float*, float*, float*);


void nest_impl_8a914ab0c3f37163edbe08bea2bf04c8(float*, float*, float*);


void MatMul_608_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_60535cfa503a5a0d569968ee405c0f71(float*, float*, float*);


void MatMul_634(float*, float*, float*);


void Gemm_675_reshape_B(float*, float*);


int64_t Gemm_675_reshape_B_size();


void nest_impl_c98ebb96dc899537144246c3555906f8(float*, float*, float*);


void mlas_impl_728c493301572f8d65144b5fdb395382(float*, float*, float*, float*);


void Gemm_675(float*, float*, float*, float*);


void Gemm_707_reshape_B(float*, float*);


int64_t Gemm_707_reshape_B_size();


void nest_impl_2d8e745ca361f03a38d12e9a12466ce1(float*, float*, float*);


void mlas_impl_412ca8cc2ebe3178215cb9bec08a383c(float*, float*, float*, float*);


void Gemm_707(float*, float*, float*, float*);


void Gemm_740_reshape_B(float*, float*);


int64_t Gemm_740_reshape_B_size();


void nest_impl_0be32f43262869ecfc3f5152b7747fd9(float*, float*, float*);


void mlas_impl_b638be799582dcc9fd735bc73e788eb4(float*, float*, float*, float*);


void Gemm_740(float*, float*, float*, float*);


void Gemm_772_reshape_B(float*, float*);


int64_t Gemm_772_reshape_B_size();


void nest_impl_d4ee2ca28f1a505be714c0bd48875654(float*, float*, float*);


void mlas_impl_2df72a820ee8dd692200b3e547eba7d6(float*, float*, float*, float*);


void Gemm_772(float*, float*, float*, float*);


void nest_impl_cafe19745c7e9ddbd7e440897c13a9c9(float*, float*, float*);


void MatMul_848_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_a2dc3d3099d3fb938afedbcde092752c(float*, float*, float*);


void MatMul_874(float*, float*, float*);


void Gemm_915_reshape_B(float*, float*);


int64_t Gemm_915_reshape_B_size();


void nest_impl_d78180b4f621e96c4b9b77a05d09e3b8(float*, float*, float*);


void mlas_impl_bad7408e376c62dd84f3e9c05a46af9c(float*, float*, float*, float*);


void Gemm_915(float*, float*, float*, float*);


void Gemm_947_reshape_B(float*, float*);


int64_t Gemm_947_reshape_B_size();


void nest_impl_bb1a332340c5a1ad48902de81ec825c6(float*, float*, float*);


void mlas_impl_3fa9572bccb0e434983de1e44276ac21(float*, float*, float*, float*);


void Gemm_947(float*, float*, float*, float*);


void Gemm_980_reshape_B(float*, float*);


int64_t Gemm_980_reshape_B_size();


void nest_impl_eece29a036ccd1b37e02e54a9559b707(float*, float*, float*);


void mlas_impl_85ca50818cfcf12224a088caefffbdfe(float*, float*, float*, float*);


void Gemm_980(float*, float*, float*, float*);


void Gemm_1012_reshape_B(float*, float*);


int64_t Gemm_1012_reshape_B_size();


void nest_impl_0c0f6ddd267d776fcbbcab4ea830978e(float*, float*, float*);


void mlas_impl_09e73e6d391bd92040e8ada2a164802f(float*, float*, float*, float*);


void Gemm_1012(float*, float*, float*, float*);


void nest_impl_26d449889645a6d49983556a654ec4a8(float*, float*, float*);


void MatMul_1088_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_92d26c56c13a6f8e90bfe9ca8e9e20a0(float*, float*, float*);


void MatMul_1114(float*, float*, float*);


void Gemm_1155_reshape_B(float*, float*);


int64_t Gemm_1155_reshape_B_size();


void nest_impl_f15f936ac2471b31254ca3b677aa41bd(float*, float*, float*);


void mlas_impl_b2b15abb08f7411167c8a5b46ad576c6(float*, float*, float*, float*);


void Gemm_1155(float*, float*, float*, float*);


void Gemm_1187_reshape_B(float*, float*);


int64_t Gemm_1187_reshape_B_size();


void nest_impl_ef04c5ba4d643e42002680431d51312e(float*, float*, float*);


void mlas_impl_d9a16103890bbe47e8952eece07dbe36(float*, float*, float*, float*);


void Gemm_1187(float*, float*, float*, float*);


void Gemm_1220_reshape_B(float*, float*);


int64_t Gemm_1220_reshape_B_size();


void nest_impl_aa801c8f76cf041abb4b3810fd0583e2(float*, float*, float*);


void mlas_impl_1b8364e0b8a9980510a7bf3a01392b0e(float*, float*, float*, float*);


void Gemm_1220(float*, float*, float*, float*);


void Gemm_1252_reshape_B(float*, float*);


int64_t Gemm_1252_reshape_B_size();


void nest_impl_86ac30704661f97d22fe7d7c03536dbf(float*, float*, float*);


void mlas_impl_80c9c38b0b2a0339b87cffdfd3faff17(float*, float*, float*, float*);


void Gemm_1252(float*, float*, float*, float*);


void nest_impl_b7b9d649e655a117766a5235286ec6fa(float*, float*, float*);


void MatMul_1328_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_dc40163f83ee72eebb51d04885c46218(float*, float*, float*);


void MatMul_1354(float*, float*, float*);


void Gemm_1395_reshape_B(float*, float*);


int64_t Gemm_1395_reshape_B_size();


void nest_impl_79ab2028461d41a3f4997a4947046989(float*, float*, float*);


void mlas_impl_787c9876fa5d20d5bb00e23b013b62f0(float*, float*, float*, float*);


void Gemm_1395(float*, float*, float*, float*);


void Gemm_1427_reshape_B(float*, float*);


int64_t Gemm_1427_reshape_B_size();


void nest_impl_4e3f8a7ee69f51510d62b35102142da5(float*, float*, float*);


void mlas_impl_8f65a7677f704967c5a42cf2f5975815(float*, float*, float*, float*);


void Gemm_1427(float*, float*, float*, float*);


void Gemm_1460_reshape_B(float*, float*);


int64_t Gemm_1460_reshape_B_size();


void nest_impl_2344f7b16d39cfd985f6d006926345b7(float*, float*, float*);


void mlas_impl_74047c1981df8db85e2a83ea90bb5438(float*, float*, float*, float*);


void Gemm_1460(float*, float*, float*, float*);


void Gemm_1492_reshape_B(float*, float*);


int64_t Gemm_1492_reshape_B_size();


void nest_impl_efa15d3818dbd40e38242be06b5215b1(float*, float*, float*);


void mlas_impl_47e2b8202db386abc0307f75cd0a65ca(float*, float*, float*, float*);


void Gemm_1492(float*, float*, float*, float*);


void nest_impl_4863f38f6900f75c972d1f1e0ed66160(float*, float*, float*);


void MatMul_1568_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_c003103aa6c72c1df7dc52f34455feb3(float*, float*, float*);


void MatMul_1594(float*, float*, float*);


void Gemm_1635_reshape_B(float*, float*);


int64_t Gemm_1635_reshape_B_size();


void nest_impl_a3d70465e331d3b1e8eec456350b7c5e(float*, float*, float*);


void mlas_impl_4d2a93a420508f5a7e152ee299ccf5d3(float*, float*, float*, float*);


void Gemm_1635(float*, float*, float*, float*);


void Gemm_1667_reshape_B(float*, float*);


int64_t Gemm_1667_reshape_B_size();


void nest_impl_ae0d0c9ada483a71903bf59ff757b80b(float*, float*, float*);


void mlas_impl_b73e0881df9a5f0dca43ca51dcf57de8(float*, float*, float*, float*);


void Gemm_1667(float*, float*, float*, float*);


void Gemm_1700_reshape_B(float*, float*);


int64_t Gemm_1700_reshape_B_size();


void nest_impl_332901945e4e473b9687d27db1ae179c(float*, float*, float*);


void mlas_impl_43f0bf1d844022b614f126bf9fe15401(float*, float*, float*, float*);


void Gemm_1700(float*, float*, float*, float*);


void Gemm_1732_reshape_B(float*, float*);


int64_t Gemm_1732_reshape_B_size();


void nest_impl_cc902c2f8a206ea6a0a1007f79669b59(float*, float*, float*);


void mlas_impl_d9d19f7c81cd2a85fde3b2f952612db6(float*, float*, float*, float*);


void Gemm_1732(float*, float*, float*, float*);


void nest_impl_4f075fcf6c671d36d30a5ce5828a77d2(float*, float*, float*);


void MatMul_1808_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_c54739a54a36b9eb6043b8820e531441(float*, float*, float*);


void MatMul_1834(float*, float*, float*);


void Gemm_1875_reshape_B(float*, float*);


int64_t Gemm_1875_reshape_B_size();


void nest_impl_11de5f5d5c687c3c94003e62f3fa9dc9(float*, float*, float*);


void mlas_impl_43f6a35afc38dd0ec717c1eb1a7ecbcb(float*, float*, float*, float*);


void Gemm_1875(float*, float*, float*, float*);


void Gemm_1907_reshape_B(float*, float*);


int64_t Gemm_1907_reshape_B_size();


void nest_impl_71e7b0840abd3b38ab636bd068940ea0(float*, float*, float*);


void mlas_impl_0ddb4d57db9e777fc142c577ef2c5dc2(float*, float*, float*, float*);


void Gemm_1907(float*, float*, float*, float*);


void Gemm_1940_reshape_B(float*, float*);


int64_t Gemm_1940_reshape_B_size();


void nest_impl_bd7f74c2e0db5c5ca5dec57a6596909d(float*, float*, float*);


void mlas_impl_678b10c3b98e59d5a36fbe56ad61a66f(float*, float*, float*, float*);


void Gemm_1940(float*, float*, float*, float*);


void Gemm_1972_reshape_B(float*, float*);


int64_t Gemm_1972_reshape_B_size();


void nest_impl_12c6356017cb9d5c70d41290d18b6215(float*, float*, float*);


void mlas_impl_4a78e4a2d7af670c6384ef1610fa4bab(float*, float*, float*, float*);


void Gemm_1972(float*, float*, float*, float*);


void nest_impl_03cfea7f673050d92864eef07527d9c9(float*, float*, float*);


void MatMul_2048_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_28e3dd2f4ab2d9bade19295483cee329(float*, float*, float*);


void MatMul_2074(float*, float*, float*);


void Gemm_2115_reshape_B(float*, float*);


int64_t Gemm_2115_reshape_B_size();


void nest_impl_bc3bfe368aa9b2181e6f68f632df0f54(float*, float*, float*);


void mlas_impl_9ad4eb0971a13370b238d525bb510359(float*, float*, float*, float*);


void Gemm_2115(float*, float*, float*, float*);


void Gemm_2147_reshape_B(float*, float*);


int64_t Gemm_2147_reshape_B_size();


void nest_impl_7688fd472b49c3ffc67e5cfe4f5e6e44(float*, float*, float*);


void mlas_impl_01ecf7bcaacb19c94a7593e7dc8e49bb(float*, float*, float*, float*);


void Gemm_2147(float*, float*, float*, float*);


void Gemm_2180_reshape_B(float*, float*);


int64_t Gemm_2180_reshape_B_size();


void nest_impl_be53d63ec2e718377d1cea84dd9489f8(float*, float*, float*);


void mlas_impl_6187d8ec7fe34b2a7736feb5b163d734(float*, float*, float*, float*);


void Gemm_2180(float*, float*, float*, float*);


void Gemm_2212_reshape_B(float*, float*);


int64_t Gemm_2212_reshape_B_size();


void nest_impl_6bb1f2a9064142aa8ccda55deaffcfe4(float*, float*, float*);


void mlas_impl_4ea311d4ad120853cd3bb8d4537d8fe9(float*, float*, float*, float*);


void Gemm_2212(float*, float*, float*, float*);


void nest_impl_7cdfc7e646eefa76d2fe58e61fe1b1e4(float*, float*, float*);


void MatMul_2288_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_0229c6004c7ec179aa92f54ab11decb9(float*, float*, float*);


void MatMul_2314(float*, float*, float*);


void Gemm_2355_reshape_B(float*, float*);


int64_t Gemm_2355_reshape_B_size();


void nest_impl_6a5af5502e85f7aff0bfbea3fa5c24db(float*, float*, float*);


void mlas_impl_a3e98c51beeaccfbb1bd2c9edb1a32f0(float*, float*, float*, float*);


void Gemm_2355(float*, float*, float*, float*);


void Gemm_2387_reshape_B(float*, float*);


int64_t Gemm_2387_reshape_B_size();


void nest_impl_067b636e22d2059f6f8187516cd0fa6b(float*, float*, float*);


void mlas_impl_cbeee67610856a2ff3c3d8297a5ce349(float*, float*, float*, float*);


void Gemm_2387(float*, float*, float*, float*);


void Gemm_2420_reshape_B(float*, float*);


int64_t Gemm_2420_reshape_B_size();


void nest_impl_992dc8ef98f1caaf2991f6d65fb6474e(float*, float*, float*);


void mlas_impl_e2443bc3516c9055ad493558d80ff4fc(float*, float*, float*, float*);


void Gemm_2420(float*, float*, float*, float*);


void Gemm_2452_reshape_B(float*, float*);


int64_t Gemm_2452_reshape_B_size();


void nest_impl_7b8ff3c2368e92f7490c40e961d124db(float*, float*, float*);


void mlas_impl_730b2b939fad3f71e734d915ef77f4eb(float*, float*, float*, float*);


void Gemm_2452(float*, float*, float*, float*);


void nest_impl_22a2de5918b7f8bc4ab9f192c35d5158(float*, float*, float*);


void MatMul_2528_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_7b72791160a0203f876fc93fffc66401(float*, float*, float*);


void MatMul_2554(float*, float*, float*);


void Gemm_2595_reshape_B(float*, float*);


int64_t Gemm_2595_reshape_B_size();


void nest_impl_6cf8047045d2898d2c19ce089a6decd9(float*, float*, float*);


void mlas_impl_514a2fcc4b81cfe1fb8259a10f8c423e(float*, float*, float*, float*);


void Gemm_2595(float*, float*, float*, float*);


void Gemm_2627_reshape_B(float*, float*);


int64_t Gemm_2627_reshape_B_size();


void nest_impl_edaf9714083701a0f5ee5e02da2ab04b(float*, float*, float*);


void mlas_impl_59683b206b07eda413762678f0d0f4bc(float*, float*, float*, float*);


void Gemm_2627(float*, float*, float*, float*);


void Gemm_2660_reshape_B(float*, float*);


int64_t Gemm_2660_reshape_B_size();


void nest_impl_e82546c68bf6c71e1184646c8d8f2103(float*, float*, float*);


void mlas_impl_008e46e6fc00c8416b1cc764768c1850(float*, float*, float*, float*);


void Gemm_2660(float*, float*, float*, float*);


void Gemm_2692_reshape_B(float*, float*);


int64_t Gemm_2692_reshape_B_size();


void nest_impl_498a473e67ab7c81b486266660ce7265(float*, float*, float*);


void mlas_impl_44d13b7c146389d9271157e262acb94f(float*, float*, float*, float*);


void Gemm_2692(float*, float*, float*, float*);


void nest_impl_534b9a466505cd4ef94edd9114cdcc70(float*, float*, float*);


void MatMul_2768_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_b1486abaf9368665c31c7ccc7fe818e4(float*, float*, float*);


void MatMul_2794(float*, float*, float*);


void Gemm_2835_reshape_B(float*, float*);


int64_t Gemm_2835_reshape_B_size();


void nest_impl_6b00fbf0a94ad913c5cd006c84129d87(float*, float*, float*);


void mlas_impl_5b1a3da14b00e93bc100e7d368bb8046(float*, float*, float*, float*);


void Gemm_2835(float*, float*, float*, float*);


void Gemm_2867_reshape_B(float*, float*);


int64_t Gemm_2867_reshape_B_size();


void nest_impl_52452b89c637c3ae9088c8600e18f4b7(float*, float*, float*);


void mlas_impl_b3b369e4971aafa3dc600b55a81ea818(float*, float*, float*, float*);


void Gemm_2867(float*, float*, float*, float*);


void Gemm_2900_reshape_B(float*, float*);


int64_t Gemm_2900_reshape_B_size();


void nest_impl_15e88b0c7b4f3e3e4b5112e31e039ed4(float*, float*, float*);


void mlas_impl_af84b06e191514f3cbe7a84ff4f4e31b(float*, float*, float*, float*);


void Gemm_2900(float*, float*, float*, float*);


#if defined(__cplusplus)
} // extern "C"
#endif // defined(__cplusplus)

#ifdef __TOML__
'''

#endif // TOML

#endif // __torch-jit-export__