
#ifndef __torch-jit-export__
#define __torch-jit-export__

#ifdef TOML
[description]
comment = 'torch-jit-export'
author = ''
version = ''
license_url = ''

[functions]
[functions.Gemm_1012]
name = 'Gemm_1012'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012.auxiliary]
[functions.Gemm_1012.auxiliary.onnx]
node_name = "Gemm_1012"
node_type = "Gemm"
node_domain = ""
node_args = ["1504", "h.4.attn.c_attn.weight", "h.4.attn.c_attn.bias", "1505"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_1012.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_attn.weight" = ["Gemm_1012_reshape_B", "Gemm_1012_reshape_B_size"]

[functions.Gemm_1012_reshape_B]
name = 'Gemm_1012_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012_reshape_B_size]
name = 'Gemm_1012_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1155]
name = 'Gemm_1155'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155.auxiliary]
[functions.Gemm_1155.auxiliary.onnx]
node_name = "Gemm_1155"
node_type = "Gemm"
node_domain = ""
node_args = ["1666", "h.4.attn.c_proj.weight", "h.4.attn.c_proj.bias", "1667"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_1155.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_proj.weight" = ["Gemm_1155_reshape_B", "Gemm_1155_reshape_B_size"]

[functions.Gemm_1155_reshape_B]
name = 'Gemm_1155_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155_reshape_B_size]
name = 'Gemm_1155_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1187]
name = 'Gemm_1187'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187.auxiliary]
[functions.Gemm_1187.auxiliary.onnx]
node_name = "Gemm_1187"
node_type = "Gemm"
node_domain = ""
node_args = ["1704", "h.4.mlp.c_fc.weight", "h.4.mlp.c_fc.bias", "1705"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_1187.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_fc.weight" = ["Gemm_1187_reshape_B", "Gemm_1187_reshape_B_size"]

[functions.Gemm_1187_reshape_B]
name = 'Gemm_1187_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187_reshape_B_size]
name = 'Gemm_1187_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1220]
name = 'Gemm_1220'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220.auxiliary]
[functions.Gemm_1220.auxiliary.onnx]
node_name = "Gemm_1220"
node_type = "Gemm"
node_domain = ""
node_args = ["1741", "h.4.mlp.c_proj.weight", "h.4.mlp.c_proj.bias", "1742"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_1220.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_proj.weight" = ["Gemm_1220_reshape_B", "Gemm_1220_reshape_B_size"]

[functions.Gemm_1220_reshape_B]
name = 'Gemm_1220_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220_reshape_B_size]
name = 'Gemm_1220_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1252]
name = 'Gemm_1252'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252.auxiliary]
[functions.Gemm_1252.auxiliary.onnx]
node_name = "Gemm_1252"
node_type = "Gemm"
node_domain = ""
node_args = ["1779", "h.5.attn.c_attn.weight", "h.5.attn.c_attn.bias", "1780"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_1252.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_attn.weight" = ["Gemm_1252_reshape_B", "Gemm_1252_reshape_B_size"]

[functions.Gemm_1252_reshape_B]
name = 'Gemm_1252_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252_reshape_B_size]
name = 'Gemm_1252_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1395]
name = 'Gemm_1395'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395.auxiliary]
[functions.Gemm_1395.auxiliary.onnx]
node_name = "Gemm_1395"
node_type = "Gemm"
node_domain = ""
node_args = ["1941", "h.5.attn.c_proj.weight", "h.5.attn.c_proj.bias", "1942"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_1395.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_proj.weight" = ["Gemm_1395_reshape_B", "Gemm_1395_reshape_B_size"]

[functions.Gemm_1395_reshape_B]
name = 'Gemm_1395_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395_reshape_B_size]
name = 'Gemm_1395_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1427]
name = 'Gemm_1427'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427.auxiliary]
[functions.Gemm_1427.auxiliary.onnx]
node_name = "Gemm_1427"
node_type = "Gemm"
node_domain = ""
node_args = ["1979", "h.5.mlp.c_fc.weight", "h.5.mlp.c_fc.bias", "1980"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_1427.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_fc.weight" = ["Gemm_1427_reshape_B", "Gemm_1427_reshape_B_size"]

[functions.Gemm_1427_reshape_B]
name = 'Gemm_1427_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427_reshape_B_size]
name = 'Gemm_1427_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1460]
name = 'Gemm_1460'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460.auxiliary]
[functions.Gemm_1460.auxiliary.onnx]
node_name = "Gemm_1460"
node_type = "Gemm"
node_domain = ""
node_args = ["2016", "h.5.mlp.c_proj.weight", "h.5.mlp.c_proj.bias", "2017"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_1460.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_proj.weight" = ["Gemm_1460_reshape_B", "Gemm_1460_reshape_B_size"]

[functions.Gemm_1460_reshape_B]
name = 'Gemm_1460_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460_reshape_B_size]
name = 'Gemm_1460_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1492]
name = 'Gemm_1492'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492.auxiliary]
[functions.Gemm_1492.auxiliary.onnx]
node_name = "Gemm_1492"
node_type = "Gemm"
node_domain = ""
node_args = ["2054", "h.6.attn.c_attn.weight", "h.6.attn.c_attn.bias", "2055"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_1492.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_attn.weight" = ["Gemm_1492_reshape_B", "Gemm_1492_reshape_B_size"]

[functions.Gemm_1492_reshape_B]
name = 'Gemm_1492_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492_reshape_B_size]
name = 'Gemm_1492_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1635]
name = 'Gemm_1635'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635.auxiliary]
[functions.Gemm_1635.auxiliary.onnx]
node_name = "Gemm_1635"
node_type = "Gemm"
node_domain = ""
node_args = ["2216", "h.6.attn.c_proj.weight", "h.6.attn.c_proj.bias", "2217"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_1635.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_proj.weight" = ["Gemm_1635_reshape_B", "Gemm_1635_reshape_B_size"]

[functions.Gemm_1635_reshape_B]
name = 'Gemm_1635_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635_reshape_B_size]
name = 'Gemm_1635_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1667]
name = 'Gemm_1667'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667.auxiliary]
[functions.Gemm_1667.auxiliary.onnx]
node_name = "Gemm_1667"
node_type = "Gemm"
node_domain = ""
node_args = ["2254", "h.6.mlp.c_fc.weight", "h.6.mlp.c_fc.bias", "2255"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_1667.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_fc.weight" = ["Gemm_1667_reshape_B", "Gemm_1667_reshape_B_size"]

[functions.Gemm_1667_reshape_B]
name = 'Gemm_1667_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667_reshape_B_size]
name = 'Gemm_1667_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1700]
name = 'Gemm_1700'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700.auxiliary]
[functions.Gemm_1700.auxiliary.onnx]
node_name = "Gemm_1700"
node_type = "Gemm"
node_domain = ""
node_args = ["2291", "h.6.mlp.c_proj.weight", "h.6.mlp.c_proj.bias", "2292"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_1700.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_proj.weight" = ["Gemm_1700_reshape_B", "Gemm_1700_reshape_B_size"]

[functions.Gemm_1700_reshape_B]
name = 'Gemm_1700_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700_reshape_B_size]
name = 'Gemm_1700_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1732]
name = 'Gemm_1732'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732.auxiliary]
[functions.Gemm_1732.auxiliary.onnx]
node_name = "Gemm_1732"
node_type = "Gemm"
node_domain = ""
node_args = ["2329", "h.7.attn.c_attn.weight", "h.7.attn.c_attn.bias", "2330"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_1732.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_attn.weight" = ["Gemm_1732_reshape_B", "Gemm_1732_reshape_B_size"]

[functions.Gemm_1732_reshape_B]
name = 'Gemm_1732_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732_reshape_B_size]
name = 'Gemm_1732_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1875]
name = 'Gemm_1875'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875.auxiliary]
[functions.Gemm_1875.auxiliary.onnx]
node_name = "Gemm_1875"
node_type = "Gemm"
node_domain = ""
node_args = ["2491", "h.7.attn.c_proj.weight", "h.7.attn.c_proj.bias", "2492"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_1875.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_proj.weight" = ["Gemm_1875_reshape_B", "Gemm_1875_reshape_B_size"]

[functions.Gemm_1875_reshape_B]
name = 'Gemm_1875_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875_reshape_B_size]
name = 'Gemm_1875_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1907]
name = 'Gemm_1907'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907.auxiliary]
[functions.Gemm_1907.auxiliary.onnx]
node_name = "Gemm_1907"
node_type = "Gemm"
node_domain = ""
node_args = ["2529", "h.7.mlp.c_fc.weight", "h.7.mlp.c_fc.bias", "2530"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_1907.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_fc.weight" = ["Gemm_1907_reshape_B", "Gemm_1907_reshape_B_size"]

[functions.Gemm_1907_reshape_B]
name = 'Gemm_1907_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907_reshape_B_size]
name = 'Gemm_1907_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1940]
name = 'Gemm_1940'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940.auxiliary]
[functions.Gemm_1940.auxiliary.onnx]
node_name = "Gemm_1940"
node_type = "Gemm"
node_domain = ""
node_args = ["2566", "h.7.mlp.c_proj.weight", "h.7.mlp.c_proj.bias", "2567"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_1940.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_proj.weight" = ["Gemm_1940_reshape_B", "Gemm_1940_reshape_B_size"]

[functions.Gemm_1940_reshape_B]
name = 'Gemm_1940_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940_reshape_B_size]
name = 'Gemm_1940_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_195]
name = 'Gemm_195'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195.auxiliary]
[functions.Gemm_195.auxiliary.onnx]
node_name = "Gemm_195"
node_type = "Gemm"
node_domain = ""
node_args = ["566", "h.0.attn.c_proj.weight", "h.0.attn.c_proj.bias", "567"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_195.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_proj.weight" = ["Gemm_195_reshape_B", "Gemm_195_reshape_B_size"]

[functions.Gemm_195_reshape_B]
name = 'Gemm_195_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195_reshape_B_size]
name = 'Gemm_195_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1972]
name = 'Gemm_1972'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972.auxiliary]
[functions.Gemm_1972.auxiliary.onnx]
node_name = "Gemm_1972"
node_type = "Gemm"
node_domain = ""
node_args = ["2604", "h.8.attn.c_attn.weight", "h.8.attn.c_attn.bias", "2605"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_1972.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_attn.weight" = ["Gemm_1972_reshape_B", "Gemm_1972_reshape_B_size"]

[functions.Gemm_1972_reshape_B]
name = 'Gemm_1972_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972_reshape_B_size]
name = 'Gemm_1972_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2115]
name = 'Gemm_2115'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115.auxiliary]
[functions.Gemm_2115.auxiliary.onnx]
node_name = "Gemm_2115"
node_type = "Gemm"
node_domain = ""
node_args = ["2766", "h.8.attn.c_proj.weight", "h.8.attn.c_proj.bias", "2767"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_2115.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_proj.weight" = ["Gemm_2115_reshape_B", "Gemm_2115_reshape_B_size"]

[functions.Gemm_2115_reshape_B]
name = 'Gemm_2115_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115_reshape_B_size]
name = 'Gemm_2115_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2147]
name = 'Gemm_2147'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147.auxiliary]
[functions.Gemm_2147.auxiliary.onnx]
node_name = "Gemm_2147"
node_type = "Gemm"
node_domain = ""
node_args = ["2804", "h.8.mlp.c_fc.weight", "h.8.mlp.c_fc.bias", "2805"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_2147.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_fc.weight" = ["Gemm_2147_reshape_B", "Gemm_2147_reshape_B_size"]

[functions.Gemm_2147_reshape_B]
name = 'Gemm_2147_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147_reshape_B_size]
name = 'Gemm_2147_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2180]
name = 'Gemm_2180'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180.auxiliary]
[functions.Gemm_2180.auxiliary.onnx]
node_name = "Gemm_2180"
node_type = "Gemm"
node_domain = ""
node_args = ["2841", "h.8.mlp.c_proj.weight", "h.8.mlp.c_proj.bias", "2842"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_2180.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_proj.weight" = ["Gemm_2180_reshape_B", "Gemm_2180_reshape_B_size"]

[functions.Gemm_2180_reshape_B]
name = 'Gemm_2180_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180_reshape_B_size]
name = 'Gemm_2180_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2212]
name = 'Gemm_2212'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212.auxiliary]
[functions.Gemm_2212.auxiliary.onnx]
node_name = "Gemm_2212"
node_type = "Gemm"
node_domain = ""
node_args = ["2879", "h.9.attn.c_attn.weight", "h.9.attn.c_attn.bias", "2880"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_2212.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_attn.weight" = ["Gemm_2212_reshape_B", "Gemm_2212_reshape_B_size"]

[functions.Gemm_2212_reshape_B]
name = 'Gemm_2212_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212_reshape_B_size]
name = 'Gemm_2212_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_227]
name = 'Gemm_227'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227.auxiliary]
[functions.Gemm_227.auxiliary.onnx]
node_name = "Gemm_227"
node_type = "Gemm"
node_domain = ""
node_args = ["604", "h.0.mlp.c_fc.weight", "h.0.mlp.c_fc.bias", "605"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_227.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_fc.weight" = ["Gemm_227_reshape_B", "Gemm_227_reshape_B_size"]

[functions.Gemm_227_reshape_B]
name = 'Gemm_227_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227_reshape_B_size]
name = 'Gemm_227_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2355]
name = 'Gemm_2355'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355.auxiliary]
[functions.Gemm_2355.auxiliary.onnx]
node_name = "Gemm_2355"
node_type = "Gemm"
node_domain = ""
node_args = ["3041", "h.9.attn.c_proj.weight", "h.9.attn.c_proj.bias", "3042"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_2355.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_proj.weight" = ["Gemm_2355_reshape_B", "Gemm_2355_reshape_B_size"]

[functions.Gemm_2355_reshape_B]
name = 'Gemm_2355_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355_reshape_B_size]
name = 'Gemm_2355_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2387]
name = 'Gemm_2387'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387.auxiliary]
[functions.Gemm_2387.auxiliary.onnx]
node_name = "Gemm_2387"
node_type = "Gemm"
node_domain = ""
node_args = ["3079", "h.9.mlp.c_fc.weight", "h.9.mlp.c_fc.bias", "3080"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_2387.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_fc.weight" = ["Gemm_2387_reshape_B", "Gemm_2387_reshape_B_size"]

[functions.Gemm_2387_reshape_B]
name = 'Gemm_2387_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387_reshape_B_size]
name = 'Gemm_2387_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2420]
name = 'Gemm_2420'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420.auxiliary]
[functions.Gemm_2420.auxiliary.onnx]
node_name = "Gemm_2420"
node_type = "Gemm"
node_domain = ""
node_args = ["3116", "h.9.mlp.c_proj.weight", "h.9.mlp.c_proj.bias", "3117"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_2420.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_proj.weight" = ["Gemm_2420_reshape_B", "Gemm_2420_reshape_B_size"]

[functions.Gemm_2420_reshape_B]
name = 'Gemm_2420_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420_reshape_B_size]
name = 'Gemm_2420_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2452]
name = 'Gemm_2452'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452.auxiliary]
[functions.Gemm_2452.auxiliary.onnx]
node_name = "Gemm_2452"
node_type = "Gemm"
node_domain = ""
node_args = ["3154", "h.10.attn.c_attn.weight", "h.10.attn.c_attn.bias", "3155"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_2452.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_attn.weight" = ["Gemm_2452_reshape_B", "Gemm_2452_reshape_B_size"]

[functions.Gemm_2452_reshape_B]
name = 'Gemm_2452_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452_reshape_B_size]
name = 'Gemm_2452_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2595]
name = 'Gemm_2595'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595.auxiliary]
[functions.Gemm_2595.auxiliary.onnx]
node_name = "Gemm_2595"
node_type = "Gemm"
node_domain = ""
node_args = ["3316", "h.10.attn.c_proj.weight", "h.10.attn.c_proj.bias", "3317"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_2595.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_proj.weight" = ["Gemm_2595_reshape_B", "Gemm_2595_reshape_B_size"]

[functions.Gemm_2595_reshape_B]
name = 'Gemm_2595_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595_reshape_B_size]
name = 'Gemm_2595_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_260]
name = 'Gemm_260'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260.auxiliary]
[functions.Gemm_260.auxiliary.onnx]
node_name = "Gemm_260"
node_type = "Gemm"
node_domain = ""
node_args = ["641", "h.0.mlp.c_proj.weight", "h.0.mlp.c_proj.bias", "642"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_260.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_proj.weight" = ["Gemm_260_reshape_B", "Gemm_260_reshape_B_size"]

[functions.Gemm_260_reshape_B]
name = 'Gemm_260_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260_reshape_B_size]
name = 'Gemm_260_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2627]
name = 'Gemm_2627'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627.auxiliary]
[functions.Gemm_2627.auxiliary.onnx]
node_name = "Gemm_2627"
node_type = "Gemm"
node_domain = ""
node_args = ["3354", "h.10.mlp.c_fc.weight", "h.10.mlp.c_fc.bias", "3355"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_2627.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_fc.weight" = ["Gemm_2627_reshape_B", "Gemm_2627_reshape_B_size"]

[functions.Gemm_2627_reshape_B]
name = 'Gemm_2627_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627_reshape_B_size]
name = 'Gemm_2627_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2660]
name = 'Gemm_2660'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660.auxiliary]
[functions.Gemm_2660.auxiliary.onnx]
node_name = "Gemm_2660"
node_type = "Gemm"
node_domain = ""
node_args = ["3391", "h.10.mlp.c_proj.weight", "h.10.mlp.c_proj.bias", "3392"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_2660.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_proj.weight" = ["Gemm_2660_reshape_B", "Gemm_2660_reshape_B_size"]

[functions.Gemm_2660_reshape_B]
name = 'Gemm_2660_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660_reshape_B_size]
name = 'Gemm_2660_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2692]
name = 'Gemm_2692'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692.auxiliary]
[functions.Gemm_2692.auxiliary.onnx]
node_name = "Gemm_2692"
node_type = "Gemm"
node_domain = ""
node_args = ["3429", "h.11.attn.c_attn.weight", "h.11.attn.c_attn.bias", "3430"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_2692.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_attn.weight" = ["Gemm_2692_reshape_B", "Gemm_2692_reshape_B_size"]

[functions.Gemm_2692_reshape_B]
name = 'Gemm_2692_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692_reshape_B_size]
name = 'Gemm_2692_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2835]
name = 'Gemm_2835'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835.auxiliary]
[functions.Gemm_2835.auxiliary.onnx]
node_name = "Gemm_2835"
node_type = "Gemm"
node_domain = ""
node_args = ["3591", "h.11.attn.c_proj.weight", "h.11.attn.c_proj.bias", "3592"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_2835.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_proj.weight" = ["Gemm_2835_reshape_B", "Gemm_2835_reshape_B_size"]

[functions.Gemm_2835_reshape_B]
name = 'Gemm_2835_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835_reshape_B_size]
name = 'Gemm_2835_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2867]
name = 'Gemm_2867'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867.auxiliary]
[functions.Gemm_2867.auxiliary.onnx]
node_name = "Gemm_2867"
node_type = "Gemm"
node_domain = ""
node_args = ["3629", "h.11.mlp.c_fc.weight", "h.11.mlp.c_fc.bias", "3630"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_2867.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_fc.weight" = ["Gemm_2867_reshape_B", "Gemm_2867_reshape_B_size"]

[functions.Gemm_2867_reshape_B]
name = 'Gemm_2867_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867_reshape_B_size]
name = 'Gemm_2867_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2900]
name = 'Gemm_2900'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900.auxiliary]
[functions.Gemm_2900.auxiliary.onnx]
node_name = "Gemm_2900"
node_type = "Gemm"
node_domain = ""
node_args = ["3666", "h.11.mlp.c_proj.weight", "h.11.mlp.c_proj.bias", "3667"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_2900.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_proj.weight" = ["Gemm_2900_reshape_B", "Gemm_2900_reshape_B_size"]

[functions.Gemm_2900_reshape_B]
name = 'Gemm_2900_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900_reshape_B_size]
name = 'Gemm_2900_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_292]
name = 'Gemm_292'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292.auxiliary]
[functions.Gemm_292.auxiliary.onnx]
node_name = "Gemm_292"
node_type = "Gemm"
node_domain = ""
node_args = ["679", "h.1.attn.c_attn.weight", "h.1.attn.c_attn.bias", "680"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_292.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_attn.weight" = ["Gemm_292_reshape_B", "Gemm_292_reshape_B_size"]

[functions.Gemm_292_reshape_B]
name = 'Gemm_292_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292_reshape_B_size]
name = 'Gemm_292_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2932]
name = 'Gemm_2932'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2932.auxiliary]
[functions.Gemm_2932.auxiliary.onnx]
node_name = "Gemm_2932"
node_type = "Gemm"
node_domain = ""
node_args = ["3704", "h.12.attn.c_attn.weight", "h.12.attn.c_attn.bias", "3705"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_2932.auxiliary.onnx.node_packing_functions]
"h.12.attn.c_attn.weight" = ["Gemm_2932_reshape_B", "Gemm_2932_reshape_B_size"]

[functions.Gemm_2932_reshape_B]
name = 'Gemm_2932_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2932_reshape_B_size]
name = 'Gemm_2932_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3075]
name = 'Gemm_3075'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3075.auxiliary]
[functions.Gemm_3075.auxiliary.onnx]
node_name = "Gemm_3075"
node_type = "Gemm"
node_domain = ""
node_args = ["3866", "h.12.attn.c_proj.weight", "h.12.attn.c_proj.bias", "3867"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_3075.auxiliary.onnx.node_packing_functions]
"h.12.attn.c_proj.weight" = ["Gemm_3075_reshape_B", "Gemm_3075_reshape_B_size"]

[functions.Gemm_3075_reshape_B]
name = 'Gemm_3075_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3075_reshape_B_size]
name = 'Gemm_3075_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3107]
name = 'Gemm_3107'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3107.auxiliary]
[functions.Gemm_3107.auxiliary.onnx]
node_name = "Gemm_3107"
node_type = "Gemm"
node_domain = ""
node_args = ["3904", "h.12.mlp.c_fc.weight", "h.12.mlp.c_fc.bias", "3905"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_3107.auxiliary.onnx.node_packing_functions]
"h.12.mlp.c_fc.weight" = ["Gemm_3107_reshape_B", "Gemm_3107_reshape_B_size"]

[functions.Gemm_3107_reshape_B]
name = 'Gemm_3107_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3107_reshape_B_size]
name = 'Gemm_3107_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3140]
name = 'Gemm_3140'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3140.auxiliary]
[functions.Gemm_3140.auxiliary.onnx]
node_name = "Gemm_3140"
node_type = "Gemm"
node_domain = ""
node_args = ["3941", "h.12.mlp.c_proj.weight", "h.12.mlp.c_proj.bias", "3942"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_3140.auxiliary.onnx.node_packing_functions]
"h.12.mlp.c_proj.weight" = ["Gemm_3140_reshape_B", "Gemm_3140_reshape_B_size"]

[functions.Gemm_3140_reshape_B]
name = 'Gemm_3140_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3140_reshape_B_size]
name = 'Gemm_3140_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3172]
name = 'Gemm_3172'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3172.auxiliary]
[functions.Gemm_3172.auxiliary.onnx]
node_name = "Gemm_3172"
node_type = "Gemm"
node_domain = ""
node_args = ["3979", "h.13.attn.c_attn.weight", "h.13.attn.c_attn.bias", "3980"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_3172.auxiliary.onnx.node_packing_functions]
"h.13.attn.c_attn.weight" = ["Gemm_3172_reshape_B", "Gemm_3172_reshape_B_size"]

[functions.Gemm_3172_reshape_B]
name = 'Gemm_3172_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3172_reshape_B_size]
name = 'Gemm_3172_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3315]
name = 'Gemm_3315'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3315.auxiliary]
[functions.Gemm_3315.auxiliary.onnx]
node_name = "Gemm_3315"
node_type = "Gemm"
node_domain = ""
node_args = ["4141", "h.13.attn.c_proj.weight", "h.13.attn.c_proj.bias", "4142"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_3315.auxiliary.onnx.node_packing_functions]
"h.13.attn.c_proj.weight" = ["Gemm_3315_reshape_B", "Gemm_3315_reshape_B_size"]

[functions.Gemm_3315_reshape_B]
name = 'Gemm_3315_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3315_reshape_B_size]
name = 'Gemm_3315_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3347]
name = 'Gemm_3347'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3347.auxiliary]
[functions.Gemm_3347.auxiliary.onnx]
node_name = "Gemm_3347"
node_type = "Gemm"
node_domain = ""
node_args = ["4179", "h.13.mlp.c_fc.weight", "h.13.mlp.c_fc.bias", "4180"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_3347.auxiliary.onnx.node_packing_functions]
"h.13.mlp.c_fc.weight" = ["Gemm_3347_reshape_B", "Gemm_3347_reshape_B_size"]

[functions.Gemm_3347_reshape_B]
name = 'Gemm_3347_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3347_reshape_B_size]
name = 'Gemm_3347_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3380]
name = 'Gemm_3380'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3380.auxiliary]
[functions.Gemm_3380.auxiliary.onnx]
node_name = "Gemm_3380"
node_type = "Gemm"
node_domain = ""
node_args = ["4216", "h.13.mlp.c_proj.weight", "h.13.mlp.c_proj.bias", "4217"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_3380.auxiliary.onnx.node_packing_functions]
"h.13.mlp.c_proj.weight" = ["Gemm_3380_reshape_B", "Gemm_3380_reshape_B_size"]

[functions.Gemm_3380_reshape_B]
name = 'Gemm_3380_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3380_reshape_B_size]
name = 'Gemm_3380_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3412]
name = 'Gemm_3412'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3412.auxiliary]
[functions.Gemm_3412.auxiliary.onnx]
node_name = "Gemm_3412"
node_type = "Gemm"
node_domain = ""
node_args = ["4254", "h.14.attn.c_attn.weight", "h.14.attn.c_attn.bias", "4255"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_3412.auxiliary.onnx.node_packing_functions]
"h.14.attn.c_attn.weight" = ["Gemm_3412_reshape_B", "Gemm_3412_reshape_B_size"]

[functions.Gemm_3412_reshape_B]
name = 'Gemm_3412_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3412_reshape_B_size]
name = 'Gemm_3412_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3555]
name = 'Gemm_3555'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3555.auxiliary]
[functions.Gemm_3555.auxiliary.onnx]
node_name = "Gemm_3555"
node_type = "Gemm"
node_domain = ""
node_args = ["4416", "h.14.attn.c_proj.weight", "h.14.attn.c_proj.bias", "4417"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_3555.auxiliary.onnx.node_packing_functions]
"h.14.attn.c_proj.weight" = ["Gemm_3555_reshape_B", "Gemm_3555_reshape_B_size"]

[functions.Gemm_3555_reshape_B]
name = 'Gemm_3555_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3555_reshape_B_size]
name = 'Gemm_3555_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3587]
name = 'Gemm_3587'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3587.auxiliary]
[functions.Gemm_3587.auxiliary.onnx]
node_name = "Gemm_3587"
node_type = "Gemm"
node_domain = ""
node_args = ["4454", "h.14.mlp.c_fc.weight", "h.14.mlp.c_fc.bias", "4455"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_3587.auxiliary.onnx.node_packing_functions]
"h.14.mlp.c_fc.weight" = ["Gemm_3587_reshape_B", "Gemm_3587_reshape_B_size"]

[functions.Gemm_3587_reshape_B]
name = 'Gemm_3587_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3587_reshape_B_size]
name = 'Gemm_3587_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3620]
name = 'Gemm_3620'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3620.auxiliary]
[functions.Gemm_3620.auxiliary.onnx]
node_name = "Gemm_3620"
node_type = "Gemm"
node_domain = ""
node_args = ["4491", "h.14.mlp.c_proj.weight", "h.14.mlp.c_proj.bias", "4492"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_3620.auxiliary.onnx.node_packing_functions]
"h.14.mlp.c_proj.weight" = ["Gemm_3620_reshape_B", "Gemm_3620_reshape_B_size"]

[functions.Gemm_3620_reshape_B]
name = 'Gemm_3620_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3620_reshape_B_size]
name = 'Gemm_3620_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3652]
name = 'Gemm_3652'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3652.auxiliary]
[functions.Gemm_3652.auxiliary.onnx]
node_name = "Gemm_3652"
node_type = "Gemm"
node_domain = ""
node_args = ["4529", "h.15.attn.c_attn.weight", "h.15.attn.c_attn.bias", "4530"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_3652.auxiliary.onnx.node_packing_functions]
"h.15.attn.c_attn.weight" = ["Gemm_3652_reshape_B", "Gemm_3652_reshape_B_size"]

[functions.Gemm_3652_reshape_B]
name = 'Gemm_3652_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3652_reshape_B_size]
name = 'Gemm_3652_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3795]
name = 'Gemm_3795'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3795.auxiliary]
[functions.Gemm_3795.auxiliary.onnx]
node_name = "Gemm_3795"
node_type = "Gemm"
node_domain = ""
node_args = ["4691", "h.15.attn.c_proj.weight", "h.15.attn.c_proj.bias", "4692"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_3795.auxiliary.onnx.node_packing_functions]
"h.15.attn.c_proj.weight" = ["Gemm_3795_reshape_B", "Gemm_3795_reshape_B_size"]

[functions.Gemm_3795_reshape_B]
name = 'Gemm_3795_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3795_reshape_B_size]
name = 'Gemm_3795_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3827]
name = 'Gemm_3827'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3827.auxiliary]
[functions.Gemm_3827.auxiliary.onnx]
node_name = "Gemm_3827"
node_type = "Gemm"
node_domain = ""
node_args = ["4729", "h.15.mlp.c_fc.weight", "h.15.mlp.c_fc.bias", "4730"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_3827.auxiliary.onnx.node_packing_functions]
"h.15.mlp.c_fc.weight" = ["Gemm_3827_reshape_B", "Gemm_3827_reshape_B_size"]

[functions.Gemm_3827_reshape_B]
name = 'Gemm_3827_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3827_reshape_B_size]
name = 'Gemm_3827_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3860]
name = 'Gemm_3860'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3860.auxiliary]
[functions.Gemm_3860.auxiliary.onnx]
node_name = "Gemm_3860"
node_type = "Gemm"
node_domain = ""
node_args = ["4766", "h.15.mlp.c_proj.weight", "h.15.mlp.c_proj.bias", "4767"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_3860.auxiliary.onnx.node_packing_functions]
"h.15.mlp.c_proj.weight" = ["Gemm_3860_reshape_B", "Gemm_3860_reshape_B_size"]

[functions.Gemm_3860_reshape_B]
name = 'Gemm_3860_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3860_reshape_B_size]
name = 'Gemm_3860_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_3892]
name = 'Gemm_3892'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3892.auxiliary]
[functions.Gemm_3892.auxiliary.onnx]
node_name = "Gemm_3892"
node_type = "Gemm"
node_domain = ""
node_args = ["4804", "h.16.attn.c_attn.weight", "h.16.attn.c_attn.bias", "4805"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_3892.auxiliary.onnx.node_packing_functions]
"h.16.attn.c_attn.weight" = ["Gemm_3892_reshape_B", "Gemm_3892_reshape_B_size"]

[functions.Gemm_3892_reshape_B]
name = 'Gemm_3892_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_3892_reshape_B_size]
name = 'Gemm_3892_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4035]
name = 'Gemm_4035'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4035.auxiliary]
[functions.Gemm_4035.auxiliary.onnx]
node_name = "Gemm_4035"
node_type = "Gemm"
node_domain = ""
node_args = ["4966", "h.16.attn.c_proj.weight", "h.16.attn.c_proj.bias", "4967"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_4035.auxiliary.onnx.node_packing_functions]
"h.16.attn.c_proj.weight" = ["Gemm_4035_reshape_B", "Gemm_4035_reshape_B_size"]

[functions.Gemm_4035_reshape_B]
name = 'Gemm_4035_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4035_reshape_B_size]
name = 'Gemm_4035_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4067]
name = 'Gemm_4067'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4067.auxiliary]
[functions.Gemm_4067.auxiliary.onnx]
node_name = "Gemm_4067"
node_type = "Gemm"
node_domain = ""
node_args = ["5004", "h.16.mlp.c_fc.weight", "h.16.mlp.c_fc.bias", "5005"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_4067.auxiliary.onnx.node_packing_functions]
"h.16.mlp.c_fc.weight" = ["Gemm_4067_reshape_B", "Gemm_4067_reshape_B_size"]

[functions.Gemm_4067_reshape_B]
name = 'Gemm_4067_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4067_reshape_B_size]
name = 'Gemm_4067_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4100]
name = 'Gemm_4100'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4100.auxiliary]
[functions.Gemm_4100.auxiliary.onnx]
node_name = "Gemm_4100"
node_type = "Gemm"
node_domain = ""
node_args = ["5041", "h.16.mlp.c_proj.weight", "h.16.mlp.c_proj.bias", "5042"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_4100.auxiliary.onnx.node_packing_functions]
"h.16.mlp.c_proj.weight" = ["Gemm_4100_reshape_B", "Gemm_4100_reshape_B_size"]

[functions.Gemm_4100_reshape_B]
name = 'Gemm_4100_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4100_reshape_B_size]
name = 'Gemm_4100_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4132]
name = 'Gemm_4132'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4132.auxiliary]
[functions.Gemm_4132.auxiliary.onnx]
node_name = "Gemm_4132"
node_type = "Gemm"
node_domain = ""
node_args = ["5079", "h.17.attn.c_attn.weight", "h.17.attn.c_attn.bias", "5080"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_4132.auxiliary.onnx.node_packing_functions]
"h.17.attn.c_attn.weight" = ["Gemm_4132_reshape_B", "Gemm_4132_reshape_B_size"]

[functions.Gemm_4132_reshape_B]
name = 'Gemm_4132_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4132_reshape_B_size]
name = 'Gemm_4132_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4275]
name = 'Gemm_4275'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4275.auxiliary]
[functions.Gemm_4275.auxiliary.onnx]
node_name = "Gemm_4275"
node_type = "Gemm"
node_domain = ""
node_args = ["5241", "h.17.attn.c_proj.weight", "h.17.attn.c_proj.bias", "5242"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_4275.auxiliary.onnx.node_packing_functions]
"h.17.attn.c_proj.weight" = ["Gemm_4275_reshape_B", "Gemm_4275_reshape_B_size"]

[functions.Gemm_4275_reshape_B]
name = 'Gemm_4275_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4275_reshape_B_size]
name = 'Gemm_4275_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4307]
name = 'Gemm_4307'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4307.auxiliary]
[functions.Gemm_4307.auxiliary.onnx]
node_name = "Gemm_4307"
node_type = "Gemm"
node_domain = ""
node_args = ["5279", "h.17.mlp.c_fc.weight", "h.17.mlp.c_fc.bias", "5280"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_4307.auxiliary.onnx.node_packing_functions]
"h.17.mlp.c_fc.weight" = ["Gemm_4307_reshape_B", "Gemm_4307_reshape_B_size"]

[functions.Gemm_4307_reshape_B]
name = 'Gemm_4307_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4307_reshape_B_size]
name = 'Gemm_4307_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4340]
name = 'Gemm_4340'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4340.auxiliary]
[functions.Gemm_4340.auxiliary.onnx]
node_name = "Gemm_4340"
node_type = "Gemm"
node_domain = ""
node_args = ["5316", "h.17.mlp.c_proj.weight", "h.17.mlp.c_proj.bias", "5317"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_4340.auxiliary.onnx.node_packing_functions]
"h.17.mlp.c_proj.weight" = ["Gemm_4340_reshape_B", "Gemm_4340_reshape_B_size"]

[functions.Gemm_4340_reshape_B]
name = 'Gemm_4340_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4340_reshape_B_size]
name = 'Gemm_4340_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_435]
name = 'Gemm_435'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435.auxiliary]
[functions.Gemm_435.auxiliary.onnx]
node_name = "Gemm_435"
node_type = "Gemm"
node_domain = ""
node_args = ["841", "h.1.attn.c_proj.weight", "h.1.attn.c_proj.bias", "842"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_435.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_proj.weight" = ["Gemm_435_reshape_B", "Gemm_435_reshape_B_size"]

[functions.Gemm_435_reshape_B]
name = 'Gemm_435_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435_reshape_B_size]
name = 'Gemm_435_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4372]
name = 'Gemm_4372'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4372.auxiliary]
[functions.Gemm_4372.auxiliary.onnx]
node_name = "Gemm_4372"
node_type = "Gemm"
node_domain = ""
node_args = ["5354", "h.18.attn.c_attn.weight", "h.18.attn.c_attn.bias", "5355"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_4372.auxiliary.onnx.node_packing_functions]
"h.18.attn.c_attn.weight" = ["Gemm_4372_reshape_B", "Gemm_4372_reshape_B_size"]

[functions.Gemm_4372_reshape_B]
name = 'Gemm_4372_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4372_reshape_B_size]
name = 'Gemm_4372_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4515]
name = 'Gemm_4515'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4515.auxiliary]
[functions.Gemm_4515.auxiliary.onnx]
node_name = "Gemm_4515"
node_type = "Gemm"
node_domain = ""
node_args = ["5516", "h.18.attn.c_proj.weight", "h.18.attn.c_proj.bias", "5517"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_4515.auxiliary.onnx.node_packing_functions]
"h.18.attn.c_proj.weight" = ["Gemm_4515_reshape_B", "Gemm_4515_reshape_B_size"]

[functions.Gemm_4515_reshape_B]
name = 'Gemm_4515_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4515_reshape_B_size]
name = 'Gemm_4515_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4547]
name = 'Gemm_4547'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4547.auxiliary]
[functions.Gemm_4547.auxiliary.onnx]
node_name = "Gemm_4547"
node_type = "Gemm"
node_domain = ""
node_args = ["5554", "h.18.mlp.c_fc.weight", "h.18.mlp.c_fc.bias", "5555"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_4547.auxiliary.onnx.node_packing_functions]
"h.18.mlp.c_fc.weight" = ["Gemm_4547_reshape_B", "Gemm_4547_reshape_B_size"]

[functions.Gemm_4547_reshape_B]
name = 'Gemm_4547_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4547_reshape_B_size]
name = 'Gemm_4547_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4580]
name = 'Gemm_4580'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4580.auxiliary]
[functions.Gemm_4580.auxiliary.onnx]
node_name = "Gemm_4580"
node_type = "Gemm"
node_domain = ""
node_args = ["5591", "h.18.mlp.c_proj.weight", "h.18.mlp.c_proj.bias", "5592"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_4580.auxiliary.onnx.node_packing_functions]
"h.18.mlp.c_proj.weight" = ["Gemm_4580_reshape_B", "Gemm_4580_reshape_B_size"]

[functions.Gemm_4580_reshape_B]
name = 'Gemm_4580_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4580_reshape_B_size]
name = 'Gemm_4580_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4612]
name = 'Gemm_4612'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4612.auxiliary]
[functions.Gemm_4612.auxiliary.onnx]
node_name = "Gemm_4612"
node_type = "Gemm"
node_domain = ""
node_args = ["5629", "h.19.attn.c_attn.weight", "h.19.attn.c_attn.bias", "5630"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_4612.auxiliary.onnx.node_packing_functions]
"h.19.attn.c_attn.weight" = ["Gemm_4612_reshape_B", "Gemm_4612_reshape_B_size"]

[functions.Gemm_4612_reshape_B]
name = 'Gemm_4612_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4612_reshape_B_size]
name = 'Gemm_4612_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_467]
name = 'Gemm_467'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467.auxiliary]
[functions.Gemm_467.auxiliary.onnx]
node_name = "Gemm_467"
node_type = "Gemm"
node_domain = ""
node_args = ["879", "h.1.mlp.c_fc.weight", "h.1.mlp.c_fc.bias", "880"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_467.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_fc.weight" = ["Gemm_467_reshape_B", "Gemm_467_reshape_B_size"]

[functions.Gemm_467_reshape_B]
name = 'Gemm_467_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467_reshape_B_size]
name = 'Gemm_467_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4755]
name = 'Gemm_4755'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4755.auxiliary]
[functions.Gemm_4755.auxiliary.onnx]
node_name = "Gemm_4755"
node_type = "Gemm"
node_domain = ""
node_args = ["5791", "h.19.attn.c_proj.weight", "h.19.attn.c_proj.bias", "5792"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_4755.auxiliary.onnx.node_packing_functions]
"h.19.attn.c_proj.weight" = ["Gemm_4755_reshape_B", "Gemm_4755_reshape_B_size"]

[functions.Gemm_4755_reshape_B]
name = 'Gemm_4755_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4755_reshape_B_size]
name = 'Gemm_4755_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4787]
name = 'Gemm_4787'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4787.auxiliary]
[functions.Gemm_4787.auxiliary.onnx]
node_name = "Gemm_4787"
node_type = "Gemm"
node_domain = ""
node_args = ["5829", "h.19.mlp.c_fc.weight", "h.19.mlp.c_fc.bias", "5830"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_4787.auxiliary.onnx.node_packing_functions]
"h.19.mlp.c_fc.weight" = ["Gemm_4787_reshape_B", "Gemm_4787_reshape_B_size"]

[functions.Gemm_4787_reshape_B]
name = 'Gemm_4787_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4787_reshape_B_size]
name = 'Gemm_4787_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4820]
name = 'Gemm_4820'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4820.auxiliary]
[functions.Gemm_4820.auxiliary.onnx]
node_name = "Gemm_4820"
node_type = "Gemm"
node_domain = ""
node_args = ["5866", "h.19.mlp.c_proj.weight", "h.19.mlp.c_proj.bias", "5867"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_4820.auxiliary.onnx.node_packing_functions]
"h.19.mlp.c_proj.weight" = ["Gemm_4820_reshape_B", "Gemm_4820_reshape_B_size"]

[functions.Gemm_4820_reshape_B]
name = 'Gemm_4820_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4820_reshape_B_size]
name = 'Gemm_4820_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4852]
name = 'Gemm_4852'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4852.auxiliary]
[functions.Gemm_4852.auxiliary.onnx]
node_name = "Gemm_4852"
node_type = "Gemm"
node_domain = ""
node_args = ["5904", "h.20.attn.c_attn.weight", "h.20.attn.c_attn.bias", "5905"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_4852.auxiliary.onnx.node_packing_functions]
"h.20.attn.c_attn.weight" = ["Gemm_4852_reshape_B", "Gemm_4852_reshape_B_size"]

[functions.Gemm_4852_reshape_B]
name = 'Gemm_4852_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4852_reshape_B_size]
name = 'Gemm_4852_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_4995]
name = 'Gemm_4995'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4995.auxiliary]
[functions.Gemm_4995.auxiliary.onnx]
node_name = "Gemm_4995"
node_type = "Gemm"
node_domain = ""
node_args = ["6066", "h.20.attn.c_proj.weight", "h.20.attn.c_proj.bias", "6067"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_4995.auxiliary.onnx.node_packing_functions]
"h.20.attn.c_proj.weight" = ["Gemm_4995_reshape_B", "Gemm_4995_reshape_B_size"]

[functions.Gemm_4995_reshape_B]
name = 'Gemm_4995_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_4995_reshape_B_size]
name = 'Gemm_4995_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_500]
name = 'Gemm_500'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500.auxiliary]
[functions.Gemm_500.auxiliary.onnx]
node_name = "Gemm_500"
node_type = "Gemm"
node_domain = ""
node_args = ["916", "h.1.mlp.c_proj.weight", "h.1.mlp.c_proj.bias", "917"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_500.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_proj.weight" = ["Gemm_500_reshape_B", "Gemm_500_reshape_B_size"]

[functions.Gemm_500_reshape_B]
name = 'Gemm_500_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500_reshape_B_size]
name = 'Gemm_500_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5027]
name = 'Gemm_5027'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5027.auxiliary]
[functions.Gemm_5027.auxiliary.onnx]
node_name = "Gemm_5027"
node_type = "Gemm"
node_domain = ""
node_args = ["6104", "h.20.mlp.c_fc.weight", "h.20.mlp.c_fc.bias", "6105"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_5027.auxiliary.onnx.node_packing_functions]
"h.20.mlp.c_fc.weight" = ["Gemm_5027_reshape_B", "Gemm_5027_reshape_B_size"]

[functions.Gemm_5027_reshape_B]
name = 'Gemm_5027_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5027_reshape_B_size]
name = 'Gemm_5027_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5060]
name = 'Gemm_5060'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5060.auxiliary]
[functions.Gemm_5060.auxiliary.onnx]
node_name = "Gemm_5060"
node_type = "Gemm"
node_domain = ""
node_args = ["6141", "h.20.mlp.c_proj.weight", "h.20.mlp.c_proj.bias", "6142"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_5060.auxiliary.onnx.node_packing_functions]
"h.20.mlp.c_proj.weight" = ["Gemm_5060_reshape_B", "Gemm_5060_reshape_B_size"]

[functions.Gemm_5060_reshape_B]
name = 'Gemm_5060_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5060_reshape_B_size]
name = 'Gemm_5060_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5092]
name = 'Gemm_5092'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5092.auxiliary]
[functions.Gemm_5092.auxiliary.onnx]
node_name = "Gemm_5092"
node_type = "Gemm"
node_domain = ""
node_args = ["6179", "h.21.attn.c_attn.weight", "h.21.attn.c_attn.bias", "6180"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_5092.auxiliary.onnx.node_packing_functions]
"h.21.attn.c_attn.weight" = ["Gemm_5092_reshape_B", "Gemm_5092_reshape_B_size"]

[functions.Gemm_5092_reshape_B]
name = 'Gemm_5092_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5092_reshape_B_size]
name = 'Gemm_5092_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_52]
name = 'Gemm_52'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52.auxiliary]
[functions.Gemm_52.auxiliary.onnx]
node_name = "Gemm_52"
node_type = "Gemm"
node_domain = ""
node_args = ["404", "h.0.attn.c_attn.weight", "h.0.attn.c_attn.bias", "405"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_52.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_attn.weight" = ["Gemm_52_reshape_B", "Gemm_52_reshape_B_size"]

[functions.Gemm_5235]
name = 'Gemm_5235'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5235.auxiliary]
[functions.Gemm_5235.auxiliary.onnx]
node_name = "Gemm_5235"
node_type = "Gemm"
node_domain = ""
node_args = ["6341", "h.21.attn.c_proj.weight", "h.21.attn.c_proj.bias", "6342"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_5235.auxiliary.onnx.node_packing_functions]
"h.21.attn.c_proj.weight" = ["Gemm_5235_reshape_B", "Gemm_5235_reshape_B_size"]

[functions.Gemm_5235_reshape_B]
name = 'Gemm_5235_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5235_reshape_B_size]
name = 'Gemm_5235_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5267]
name = 'Gemm_5267'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5267.auxiliary]
[functions.Gemm_5267.auxiliary.onnx]
node_name = "Gemm_5267"
node_type = "Gemm"
node_domain = ""
node_args = ["6379", "h.21.mlp.c_fc.weight", "h.21.mlp.c_fc.bias", "6380"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_5267.auxiliary.onnx.node_packing_functions]
"h.21.mlp.c_fc.weight" = ["Gemm_5267_reshape_B", "Gemm_5267_reshape_B_size"]

[functions.Gemm_5267_reshape_B]
name = 'Gemm_5267_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5267_reshape_B_size]
name = 'Gemm_5267_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_52_reshape_B]
name = 'Gemm_52_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52_reshape_B_size]
name = 'Gemm_52_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5300]
name = 'Gemm_5300'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5300.auxiliary]
[functions.Gemm_5300.auxiliary.onnx]
node_name = "Gemm_5300"
node_type = "Gemm"
node_domain = ""
node_args = ["6416", "h.21.mlp.c_proj.weight", "h.21.mlp.c_proj.bias", "6417"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_5300.auxiliary.onnx.node_packing_functions]
"h.21.mlp.c_proj.weight" = ["Gemm_5300_reshape_B", "Gemm_5300_reshape_B_size"]

[functions.Gemm_5300_reshape_B]
name = 'Gemm_5300_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5300_reshape_B_size]
name = 'Gemm_5300_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_532]
name = 'Gemm_532'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532.auxiliary]
[functions.Gemm_532.auxiliary.onnx]
node_name = "Gemm_532"
node_type = "Gemm"
node_domain = ""
node_args = ["954", "h.2.attn.c_attn.weight", "h.2.attn.c_attn.bias", "955"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_532.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_attn.weight" = ["Gemm_532_reshape_B", "Gemm_532_reshape_B_size"]

[functions.Gemm_532_reshape_B]
name = 'Gemm_532_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532_reshape_B_size]
name = 'Gemm_532_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5332]
name = 'Gemm_5332'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5332.auxiliary]
[functions.Gemm_5332.auxiliary.onnx]
node_name = "Gemm_5332"
node_type = "Gemm"
node_domain = ""
node_args = ["6454", "h.22.attn.c_attn.weight", "h.22.attn.c_attn.bias", "6455"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_5332.auxiliary.onnx.node_packing_functions]
"h.22.attn.c_attn.weight" = ["Gemm_5332_reshape_B", "Gemm_5332_reshape_B_size"]

[functions.Gemm_5332_reshape_B]
name = 'Gemm_5332_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5332_reshape_B_size]
name = 'Gemm_5332_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5475]
name = 'Gemm_5475'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5475.auxiliary]
[functions.Gemm_5475.auxiliary.onnx]
node_name = "Gemm_5475"
node_type = "Gemm"
node_domain = ""
node_args = ["6616", "h.22.attn.c_proj.weight", "h.22.attn.c_proj.bias", "6617"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_5475.auxiliary.onnx.node_packing_functions]
"h.22.attn.c_proj.weight" = ["Gemm_5475_reshape_B", "Gemm_5475_reshape_B_size"]

[functions.Gemm_5475_reshape_B]
name = 'Gemm_5475_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5475_reshape_B_size]
name = 'Gemm_5475_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5507]
name = 'Gemm_5507'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5507.auxiliary]
[functions.Gemm_5507.auxiliary.onnx]
node_name = "Gemm_5507"
node_type = "Gemm"
node_domain = ""
node_args = ["6654", "h.22.mlp.c_fc.weight", "h.22.mlp.c_fc.bias", "6655"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_5507.auxiliary.onnx.node_packing_functions]
"h.22.mlp.c_fc.weight" = ["Gemm_5507_reshape_B", "Gemm_5507_reshape_B_size"]

[functions.Gemm_5507_reshape_B]
name = 'Gemm_5507_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5507_reshape_B_size]
name = 'Gemm_5507_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5540]
name = 'Gemm_5540'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5540.auxiliary]
[functions.Gemm_5540.auxiliary.onnx]
node_name = "Gemm_5540"
node_type = "Gemm"
node_domain = ""
node_args = ["6691", "h.22.mlp.c_proj.weight", "h.22.mlp.c_proj.bias", "6692"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_5540.auxiliary.onnx.node_packing_functions]
"h.22.mlp.c_proj.weight" = ["Gemm_5540_reshape_B", "Gemm_5540_reshape_B_size"]

[functions.Gemm_5540_reshape_B]
name = 'Gemm_5540_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5540_reshape_B_size]
name = 'Gemm_5540_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5572]
name = 'Gemm_5572'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5572.auxiliary]
[functions.Gemm_5572.auxiliary.onnx]
node_name = "Gemm_5572"
node_type = "Gemm"
node_domain = ""
node_args = ["6729", "h.23.attn.c_attn.weight", "h.23.attn.c_attn.bias", "6730"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_5572.auxiliary.onnx.node_packing_functions]
"h.23.attn.c_attn.weight" = ["Gemm_5572_reshape_B", "Gemm_5572_reshape_B_size"]

[functions.Gemm_5572_reshape_B]
name = 'Gemm_5572_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5572_reshape_B_size]
name = 'Gemm_5572_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5715]
name = 'Gemm_5715'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5715.auxiliary]
[functions.Gemm_5715.auxiliary.onnx]
node_name = "Gemm_5715"
node_type = "Gemm"
node_domain = ""
node_args = ["6891", "h.23.attn.c_proj.weight", "h.23.attn.c_proj.bias", "6892"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_5715.auxiliary.onnx.node_packing_functions]
"h.23.attn.c_proj.weight" = ["Gemm_5715_reshape_B", "Gemm_5715_reshape_B_size"]

[functions.Gemm_5715_reshape_B]
name = 'Gemm_5715_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5715_reshape_B_size]
name = 'Gemm_5715_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5747]
name = 'Gemm_5747'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5747.auxiliary]
[functions.Gemm_5747.auxiliary.onnx]
node_name = "Gemm_5747"
node_type = "Gemm"
node_domain = ""
node_args = ["6929", "h.23.mlp.c_fc.weight", "h.23.mlp.c_fc.bias", "6930"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_5747.auxiliary.onnx.node_packing_functions]
"h.23.mlp.c_fc.weight" = ["Gemm_5747_reshape_B", "Gemm_5747_reshape_B_size"]

[functions.Gemm_5747_reshape_B]
name = 'Gemm_5747_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5747_reshape_B_size]
name = 'Gemm_5747_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_5780]
name = 'Gemm_5780'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5780.auxiliary]
[functions.Gemm_5780.auxiliary.onnx]
node_name = "Gemm_5780"
node_type = "Gemm"
node_domain = ""
node_args = ["6966", "h.23.mlp.c_proj.weight", "h.23.mlp.c_proj.bias", "6967"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_5780.auxiliary.onnx.node_packing_functions]
"h.23.mlp.c_proj.weight" = ["Gemm_5780_reshape_B", "Gemm_5780_reshape_B_size"]

[functions.Gemm_5780_reshape_B]
name = 'Gemm_5780_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_5780_reshape_B_size]
name = 'Gemm_5780_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_675]
name = 'Gemm_675'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675.auxiliary]
[functions.Gemm_675.auxiliary.onnx]
node_name = "Gemm_675"
node_type = "Gemm"
node_domain = ""
node_args = ["1116", "h.2.attn.c_proj.weight", "h.2.attn.c_proj.bias", "1117"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_675.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_proj.weight" = ["Gemm_675_reshape_B", "Gemm_675_reshape_B_size"]

[functions.Gemm_675_reshape_B]
name = 'Gemm_675_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675_reshape_B_size]
name = 'Gemm_675_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_707]
name = 'Gemm_707'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707.auxiliary]
[functions.Gemm_707.auxiliary.onnx]
node_name = "Gemm_707"
node_type = "Gemm"
node_domain = ""
node_args = ["1154", "h.2.mlp.c_fc.weight", "h.2.mlp.c_fc.bias", "1155"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_707.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_fc.weight" = ["Gemm_707_reshape_B", "Gemm_707_reshape_B_size"]

[functions.Gemm_707_reshape_B]
name = 'Gemm_707_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707_reshape_B_size]
name = 'Gemm_707_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_740]
name = 'Gemm_740'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740.auxiliary]
[functions.Gemm_740.auxiliary.onnx]
node_name = "Gemm_740"
node_type = "Gemm"
node_domain = ""
node_args = ["1191", "h.2.mlp.c_proj.weight", "h.2.mlp.c_proj.bias", "1192"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_740.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_proj.weight" = ["Gemm_740_reshape_B", "Gemm_740_reshape_B_size"]

[functions.Gemm_740_reshape_B]
name = 'Gemm_740_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740_reshape_B_size]
name = 'Gemm_740_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_772]
name = 'Gemm_772'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772.auxiliary]
[functions.Gemm_772.auxiliary.onnx]
node_name = "Gemm_772"
node_type = "Gemm"
node_domain = ""
node_args = ["1229", "h.3.attn.c_attn.weight", "h.3.attn.c_attn.bias", "1230"]
node_arg_shapes = [[256, 1024], [1024, 3072], [3072], [256, 3072]]

[functions.Gemm_772.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_attn.weight" = ["Gemm_772_reshape_B", "Gemm_772_reshape_B_size"]

[functions.Gemm_772_reshape_B]
name = 'Gemm_772_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772_reshape_B_size]
name = 'Gemm_772_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_915]
name = 'Gemm_915'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915.auxiliary]
[functions.Gemm_915.auxiliary.onnx]
node_name = "Gemm_915"
node_type = "Gemm"
node_domain = ""
node_args = ["1391", "h.3.attn.c_proj.weight", "h.3.attn.c_proj.bias", "1392"]
node_arg_shapes = [[256, 1024], [1024, 1024], [1024], [256, 1024]]

[functions.Gemm_915.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_proj.weight" = ["Gemm_915_reshape_B", "Gemm_915_reshape_B_size"]

[functions.Gemm_915_reshape_B]
name = 'Gemm_915_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915_reshape_B_size]
name = 'Gemm_915_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_947]
name = 'Gemm_947'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947.auxiliary]
[functions.Gemm_947.auxiliary.onnx]
node_name = "Gemm_947"
node_type = "Gemm"
node_domain = ""
node_args = ["1429", "h.3.mlp.c_fc.weight", "h.3.mlp.c_fc.bias", "1430"]
node_arg_shapes = [[256, 1024], [1024, 4096], [4096], [256, 4096]]

[functions.Gemm_947.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_fc.weight" = ["Gemm_947_reshape_B", "Gemm_947_reshape_B_size"]

[functions.Gemm_947_reshape_B]
name = 'Gemm_947_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 16, 8, 16, 128, 16 ], affine_map = [ 262144, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947_reshape_B_size]
name = 'Gemm_947_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_980]
name = 'Gemm_980'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980.auxiliary]
[functions.Gemm_980.auxiliary.onnx]
node_name = "Gemm_980"
node_type = "Gemm"
node_domain = ""
node_args = ["1466", "h.3.mlp.c_proj.weight", "h.3.mlp.c_proj.bias", "1467"]
node_arg_shapes = [[256, 4096], [4096, 1024], [1024], [256, 1024]]

[functions.Gemm_980.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_proj.weight" = ["Gemm_980_reshape_B", "Gemm_980_reshape_B_size"]

[functions.Gemm_980_reshape_B]
name = 'Gemm_980_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4, 32, 16, 128, 16 ], affine_map = [ 1048576, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980_reshape_B_size]
name = 'Gemm_980_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale]
name = 'MatMul_1088_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1088_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1088_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1538", "1562", "1593"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_1114]
name = 'MatMul_1114'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1114.auxiliary]
[functions.MatMul_1114.auxiliary.onnx]
node_name = "MatMul_1114"
node_type = "MatMul"
node_domain = ""
node_args = ["1623", "1586", "1624"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_128_FusedMatMulAndScale]
name = 'MatMul_128_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_128_FusedMatMulAndScale.auxiliary]
[functions.MatMul_128_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_128_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["438", "462", "493"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_1328_FusedMatMulAndScale]
name = 'MatMul_1328_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1328_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1328_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1328_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1813", "1837", "1868"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_1354]
name = 'MatMul_1354'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1354.auxiliary]
[functions.MatMul_1354.auxiliary.onnx]
node_name = "MatMul_1354"
node_type = "MatMul"
node_domain = ""
node_args = ["1898", "1861", "1899"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_154]
name = 'MatMul_154'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_154.auxiliary]
[functions.MatMul_154.auxiliary.onnx]
node_name = "MatMul_154"
node_type = "MatMul"
node_domain = ""
node_args = ["523", "486", "524"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_1568_FusedMatMulAndScale]
name = 'MatMul_1568_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1568_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1568_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1568_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2088", "2112", "2143"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_1594]
name = 'MatMul_1594'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1594.auxiliary]
[functions.MatMul_1594.auxiliary.onnx]
node_name = "MatMul_1594"
node_type = "MatMul"
node_domain = ""
node_args = ["2173", "2136", "2174"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_1808_FusedMatMulAndScale]
name = 'MatMul_1808_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1808_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1808_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1808_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2363", "2387", "2418"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_1834]
name = 'MatMul_1834'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1834.auxiliary]
[functions.MatMul_1834.auxiliary.onnx]
node_name = "MatMul_1834"
node_type = "MatMul"
node_domain = ""
node_args = ["2448", "2411", "2449"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_2048_FusedMatMulAndScale]
name = 'MatMul_2048_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2048_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2048_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2048_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2638", "2662", "2693"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_2074]
name = 'MatMul_2074'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2074.auxiliary]
[functions.MatMul_2074.auxiliary.onnx]
node_name = "MatMul_2074"
node_type = "MatMul"
node_domain = ""
node_args = ["2723", "2686", "2724"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_2288_FusedMatMulAndScale]
name = 'MatMul_2288_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2288_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2288_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2288_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2913", "2937", "2968"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_2314]
name = 'MatMul_2314'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2314.auxiliary]
[functions.MatMul_2314.auxiliary.onnx]
node_name = "MatMul_2314"
node_type = "MatMul"
node_domain = ""
node_args = ["2998", "2961", "2999"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_2528_FusedMatMulAndScale]
name = 'MatMul_2528_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2528_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2528_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2528_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3188", "3212", "3243"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_2554]
name = 'MatMul_2554'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2554.auxiliary]
[functions.MatMul_2554.auxiliary.onnx]
node_name = "MatMul_2554"
node_type = "MatMul"
node_domain = ""
node_args = ["3273", "3236", "3274"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_2768_FusedMatMulAndScale]
name = 'MatMul_2768_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2768_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2768_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2768_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3463", "3487", "3518"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_2794]
name = 'MatMul_2794'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2794.auxiliary]
[functions.MatMul_2794.auxiliary.onnx]
node_name = "MatMul_2794"
node_type = "MatMul"
node_domain = ""
node_args = ["3548", "3511", "3549"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_3008_FusedMatMulAndScale]
name = 'MatMul_3008_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3008_FusedMatMulAndScale.auxiliary]
[functions.MatMul_3008_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_3008_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3738", "3762", "3793"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_3034]
name = 'MatMul_3034'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3034.auxiliary]
[functions.MatMul_3034.auxiliary.onnx]
node_name = "MatMul_3034"
node_type = "MatMul"
node_domain = ""
node_args = ["3823", "3786", "3824"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_3248_FusedMatMulAndScale]
name = 'MatMul_3248_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3248_FusedMatMulAndScale.auxiliary]
[functions.MatMul_3248_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_3248_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["4013", "4037", "4068"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_3274]
name = 'MatMul_3274'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3274.auxiliary]
[functions.MatMul_3274.auxiliary.onnx]
node_name = "MatMul_3274"
node_type = "MatMul"
node_domain = ""
node_args = ["4098", "4061", "4099"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_3488_FusedMatMulAndScale]
name = 'MatMul_3488_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3488_FusedMatMulAndScale.auxiliary]
[functions.MatMul_3488_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_3488_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["4288", "4312", "4343"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_3514]
name = 'MatMul_3514'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3514.auxiliary]
[functions.MatMul_3514.auxiliary.onnx]
node_name = "MatMul_3514"
node_type = "MatMul"
node_domain = ""
node_args = ["4373", "4336", "4374"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_368_FusedMatMulAndScale]
name = 'MatMul_368_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_368_FusedMatMulAndScale.auxiliary]
[functions.MatMul_368_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_368_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["713", "737", "768"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_3728_FusedMatMulAndScale]
name = 'MatMul_3728_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3728_FusedMatMulAndScale.auxiliary]
[functions.MatMul_3728_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_3728_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["4563", "4587", "4618"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_3754]
name = 'MatMul_3754'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3754.auxiliary]
[functions.MatMul_3754.auxiliary.onnx]
node_name = "MatMul_3754"
node_type = "MatMul"
node_domain = ""
node_args = ["4648", "4611", "4649"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_394]
name = 'MatMul_394'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_394.auxiliary]
[functions.MatMul_394.auxiliary.onnx]
node_name = "MatMul_394"
node_type = "MatMul"
node_domain = ""
node_args = ["798", "761", "799"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_3968_FusedMatMulAndScale]
name = 'MatMul_3968_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3968_FusedMatMulAndScale.auxiliary]
[functions.MatMul_3968_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_3968_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["4838", "4862", "4893"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_3994]
name = 'MatMul_3994'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_3994.auxiliary]
[functions.MatMul_3994.auxiliary.onnx]
node_name = "MatMul_3994"
node_type = "MatMul"
node_domain = ""
node_args = ["4923", "4886", "4924"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_4208_FusedMatMulAndScale]
name = 'MatMul_4208_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_4208_FusedMatMulAndScale.auxiliary]
[functions.MatMul_4208_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_4208_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["5113", "5137", "5168"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_4234]
name = 'MatMul_4234'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_4234.auxiliary]
[functions.MatMul_4234.auxiliary.onnx]
node_name = "MatMul_4234"
node_type = "MatMul"
node_domain = ""
node_args = ["5198", "5161", "5199"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_4448_FusedMatMulAndScale]
name = 'MatMul_4448_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_4448_FusedMatMulAndScale.auxiliary]
[functions.MatMul_4448_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_4448_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["5388", "5412", "5443"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_4474]
name = 'MatMul_4474'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_4474.auxiliary]
[functions.MatMul_4474.auxiliary.onnx]
node_name = "MatMul_4474"
node_type = "MatMul"
node_domain = ""
node_args = ["5473", "5436", "5474"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_4688_FusedMatMulAndScale]
name = 'MatMul_4688_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_4688_FusedMatMulAndScale.auxiliary]
[functions.MatMul_4688_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_4688_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["5663", "5687", "5718"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_4714]
name = 'MatMul_4714'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_4714.auxiliary]
[functions.MatMul_4714.auxiliary.onnx]
node_name = "MatMul_4714"
node_type = "MatMul"
node_domain = ""
node_args = ["5748", "5711", "5749"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_4928_FusedMatMulAndScale]
name = 'MatMul_4928_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_4928_FusedMatMulAndScale.auxiliary]
[functions.MatMul_4928_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_4928_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["5938", "5962", "5993"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_4954]
name = 'MatMul_4954'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_4954.auxiliary]
[functions.MatMul_4954.auxiliary.onnx]
node_name = "MatMul_4954"
node_type = "MatMul"
node_domain = ""
node_args = ["6023", "5986", "6024"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_5168_FusedMatMulAndScale]
name = 'MatMul_5168_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_5168_FusedMatMulAndScale.auxiliary]
[functions.MatMul_5168_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_5168_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["6213", "6237", "6268"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_5194]
name = 'MatMul_5194'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_5194.auxiliary]
[functions.MatMul_5194.auxiliary.onnx]
node_name = "MatMul_5194"
node_type = "MatMul"
node_domain = ""
node_args = ["6298", "6261", "6299"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_5408_FusedMatMulAndScale]
name = 'MatMul_5408_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_5408_FusedMatMulAndScale.auxiliary]
[functions.MatMul_5408_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_5408_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["6488", "6512", "6543"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_5434]
name = 'MatMul_5434'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_5434.auxiliary]
[functions.MatMul_5434.auxiliary.onnx]
node_name = "MatMul_5434"
node_type = "MatMul"
node_domain = ""
node_args = ["6573", "6536", "6574"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_5648_FusedMatMulAndScale]
name = 'MatMul_5648_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_5648_FusedMatMulAndScale.auxiliary]
[functions.MatMul_5648_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_5648_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["6763", "6787", "6818"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_5674]
name = 'MatMul_5674'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_5674.auxiliary]
[functions.MatMul_5674.auxiliary.onnx]
node_name = "MatMul_5674"
node_type = "MatMul"
node_domain = ""
node_args = ["6848", "6811", "6849"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_608_FusedMatMulAndScale]
name = 'MatMul_608_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_608_FusedMatMulAndScale.auxiliary]
[functions.MatMul_608_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_608_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["988", "1012", "1043"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_634]
name = 'MatMul_634'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_634.auxiliary]
[functions.MatMul_634.auxiliary.onnx]
node_name = "MatMul_634"
node_type = "MatMul"
node_domain = ""
node_args = ["1073", "1036", "1074"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.MatMul_848_FusedMatMulAndScale]
name = 'MatMul_848_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_848_FusedMatMulAndScale.auxiliary]
[functions.MatMul_848_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_848_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1263", "1287", "1318"]
node_arg_shapes = [[1, 16, 256, 64], [1, 16, 64, 256], [1, 16, 256, 256]]

[functions.MatMul_874]
name = 'MatMul_874'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_874.auxiliary]
[functions.MatMul_874.auxiliary.onnx]
node_name = "MatMul_874"
node_type = "MatMul"
node_domain = ""
node_args = ["1348", "1311", "1349"]
node_arg_shapes = [[1, 16, 256, 256], [1, 16, 256, 64], [1, 16, 256, 64]]

[functions.mlas_impl_0367cf0d1ece7e904d3ce085a87e1a7e]
name = 'mlas_impl_0367cf0d1ece7e904d3ce085a87e1a7e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_07ef19b5387832d4faa868430a046820]
name = 'mlas_impl_07ef19b5387832d4faa868430a046820'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_0de14b8f67685243d5b534027b49d89e]
name = 'mlas_impl_0de14b8f67685243d5b534027b49d89e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_0fc9537a6cbb9bcdb178cfe43ef48066]
name = 'mlas_impl_0fc9537a6cbb9bcdb178cfe43ef48066'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_1216813ab5028ad6f7baab4134bb5214]
name = 'mlas_impl_1216813ab5028ad6f7baab4134bb5214'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_128b10eebb527829ab2a7370a492d010]
name = 'mlas_impl_128b10eebb527829ab2a7370a492d010'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_16110d2fc9ddb5e66d93d7f2a2b09f3e]
name = 'mlas_impl_16110d2fc9ddb5e66d93d7f2a2b09f3e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_182c678b928993335abd97ad8f40a73c]
name = 'mlas_impl_182c678b928993335abd97ad8f40a73c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_1d341e364b6922e733e4959743aec580]
name = 'mlas_impl_1d341e364b6922e733e4959743aec580'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_1e3b04bf94ed0313248045a19a333726]
name = 'mlas_impl_1e3b04bf94ed0313248045a19a333726'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_202c7723fba479786bca338652e29b9d]
name = 'mlas_impl_202c7723fba479786bca338652e29b9d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_203a65066064f95d73c7fbb96c061e0d]
name = 'mlas_impl_203a65066064f95d73c7fbb96c061e0d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_251868e3f2960db8787f9345fa65d918]
name = 'mlas_impl_251868e3f2960db8787f9345fa65d918'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_253008f9e17005ae2f15f0622f06ee03]
name = 'mlas_impl_253008f9e17005ae2f15f0622f06ee03'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_26a602d5912e3999f61b6153c682fb2b]
name = 'mlas_impl_26a602d5912e3999f61b6153c682fb2b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2fdd2c6851b038076bb03250d4cb993f]
name = 'mlas_impl_2fdd2c6851b038076bb03250d4cb993f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_35076bcdd70aac1938aa2bf14653457f]
name = 'mlas_impl_35076bcdd70aac1938aa2bf14653457f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_3803adc4c0acfb834dd695cdc03e14b0]
name = 'mlas_impl_3803adc4c0acfb834dd695cdc03e14b0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_38f7f7bc30dc098f4066d3a637e8701b]
name = 'mlas_impl_38f7f7bc30dc098f4066d3a637e8701b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_39009a419eb945531d71f40a656afda7]
name = 'mlas_impl_39009a419eb945531d71f40a656afda7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_3aa7315b78d61e9c0adba42c77ddadf5]
name = 'mlas_impl_3aa7315b78d61e9c0adba42c77ddadf5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_3e10567ae27511cee8fe4c584a136af9]
name = 'mlas_impl_3e10567ae27511cee8fe4c584a136af9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_3f05f5c2f43231a825189395645b852e]
name = 'mlas_impl_3f05f5c2f43231a825189395645b852e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_41831e23687f5c2b19e700a48aad4c6e]
name = 'mlas_impl_41831e23687f5c2b19e700a48aad4c6e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_41df7af7af70f427da4b072c13eeff43]
name = 'mlas_impl_41df7af7af70f427da4b072c13eeff43'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_432973e895a943dc850b31636138c4f3]
name = 'mlas_impl_432973e895a943dc850b31636138c4f3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_49451f8414309a5e1d7cb50c5834a0a5]
name = 'mlas_impl_49451f8414309a5e1d7cb50c5834a0a5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4a50c5542d2f210d90c6770179ed1855]
name = 'mlas_impl_4a50c5542d2f210d90c6770179ed1855'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4bc7d7a9697cc9cab0212c89e86af0a8]
name = 'mlas_impl_4bc7d7a9697cc9cab0212c89e86af0a8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4d3c1ee4096b4dce37f7f47c0b4a4fa8]
name = 'mlas_impl_4d3c1ee4096b4dce37f7f47c0b4a4fa8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4f425c33dbe44779739aa3af7e219cfd]
name = 'mlas_impl_4f425c33dbe44779739aa3af7e219cfd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_50e78c5d2d9fa878c99ab4a0f636c6a6]
name = 'mlas_impl_50e78c5d2d9fa878c99ab4a0f636c6a6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_56fe3b7c2e3243cf7c6b0a4e8868c965]
name = 'mlas_impl_56fe3b7c2e3243cf7c6b0a4e8868c965'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5c152acf1b8860b7894238f10a23f696]
name = 'mlas_impl_5c152acf1b8860b7894238f10a23f696'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5dfbcb20ee63fa36c794fa6389cfb39b]
name = 'mlas_impl_5dfbcb20ee63fa36c794fa6389cfb39b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_63fdecede68e7edd302435e4637c2ac4]
name = 'mlas_impl_63fdecede68e7edd302435e4637c2ac4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_6b84062a7beb897dd2fef687abc11520]
name = 'mlas_impl_6b84062a7beb897dd2fef687abc11520'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_6bd6632cbda349daa1afe89c5cecfde5]
name = 'mlas_impl_6bd6632cbda349daa1afe89c5cecfde5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_6bd8cb627b17820cd7221459b13f78f3]
name = 'mlas_impl_6bd8cb627b17820cd7221459b13f78f3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_6ca3ad498725f50d8b3234b693540caa]
name = 'mlas_impl_6ca3ad498725f50d8b3234b693540caa'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_708a918205b2ad8912a8226e3515476b]
name = 'mlas_impl_708a918205b2ad8912a8226e3515476b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_72ef6aa19f2982dc553ebad9fcdb6024]
name = 'mlas_impl_72ef6aa19f2982dc553ebad9fcdb6024'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_747cebc6e4024e375843ac7c45a7bb70]
name = 'mlas_impl_747cebc6e4024e375843ac7c45a7bb70'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_7673813eaef76a518091442672bfc003]
name = 'mlas_impl_7673813eaef76a518091442672bfc003'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_793fa27b31d9589375db323afa0b4c1c]
name = 'mlas_impl_793fa27b31d9589375db323afa0b4c1c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_79798529f2dafd815e87800f1459aebd]
name = 'mlas_impl_79798529f2dafd815e87800f1459aebd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_79d59f5e38f744dac9102cf867e207dc]
name = 'mlas_impl_79d59f5e38f744dac9102cf867e207dc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_7c0a45cbd9d7e3ce9790d20c6e35551d]
name = 'mlas_impl_7c0a45cbd9d7e3ce9790d20c6e35551d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8077261e67765fe39b1d456bbbbbda49]
name = 'mlas_impl_8077261e67765fe39b1d456bbbbbda49'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_81c4c5105d9c91857602f307acf620aa]
name = 'mlas_impl_81c4c5105d9c91857602f307acf620aa'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_81f945c70402c874fa53accfe67d7ddd]
name = 'mlas_impl_81f945c70402c874fa53accfe67d7ddd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8361ec45e2cf5a2c1c4f6a8b3a850681]
name = 'mlas_impl_8361ec45e2cf5a2c1c4f6a8b3a850681'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_896eeedd497bf728eae5a6e80bc98a68]
name = 'mlas_impl_896eeedd497bf728eae5a6e80bc98a68'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8d0e00f1c18fde20801922999d5e586f]
name = 'mlas_impl_8d0e00f1c18fde20801922999d5e586f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8e59b1fa4b1cf8b2b80bed15beba303d]
name = 'mlas_impl_8e59b1fa4b1cf8b2b80bed15beba303d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9075c5f784a59f5793f60e0094e3a107]
name = 'mlas_impl_9075c5f784a59f5793f60e0094e3a107'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_90b366f25df61381614e84f062c4f8d1]
name = 'mlas_impl_90b366f25df61381614e84f062c4f8d1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_91f133acd9eee0da1ac0ca5ea71feeb8]
name = 'mlas_impl_91f133acd9eee0da1ac0ca5ea71feeb8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_938bb7ed9580448504ff43daac8d7034]
name = 'mlas_impl_938bb7ed9580448504ff43daac8d7034'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_957b399419d75eb313c318a586672fdd]
name = 'mlas_impl_957b399419d75eb313c318a586672fdd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9685d6ab828fd5c9fab7a0b0900ccdf5]
name = 'mlas_impl_9685d6ab828fd5c9fab7a0b0900ccdf5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9bfe0fec5b427b854ccf6b8677185c4e]
name = 'mlas_impl_9bfe0fec5b427b854ccf6b8677185c4e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9cee68c44a8df42541833df7825ac8ac]
name = 'mlas_impl_9cee68c44a8df42541833df7825ac8ac'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9d4fe659e8e511a0f044f26541d90fe7]
name = 'mlas_impl_9d4fe659e8e511a0f044f26541d90fe7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9e8e3beb0ac4c9e7aaeda49cd5d98840]
name = 'mlas_impl_9e8e3beb0ac4c9e7aaeda49cd5d98840'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_a61bcc13d72ea4def672eb9e9507141d]
name = 'mlas_impl_a61bcc13d72ea4def672eb9e9507141d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_ac1292ad8b7c66873e7104ce6f1af2c4]
name = 'mlas_impl_ac1292ad8b7c66873e7104ce6f1af2c4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_ad9cdd0e81f1c480a1591a465af82c1f]
name = 'mlas_impl_ad9cdd0e81f1c480a1591a465af82c1f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b72c47fbbc3b3125de7c3a6583b81e84]
name = 'mlas_impl_b72c47fbbc3b3125de7c3a6583b81e84'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b7bee5ff2e82457584bd8af7a64c5d6e]
name = 'mlas_impl_b7bee5ff2e82457584bd8af7a64c5d6e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_bba94dcc7f6f5d29e07773c4c2b771f9]
name = 'mlas_impl_bba94dcc7f6f5d29e07773c4c2b771f9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_bc4911207ec4bcd0d5bdb4558885115b]
name = 'mlas_impl_bc4911207ec4bcd0d5bdb4558885115b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c328bc2511af6aee8138503c0a0d239a]
name = 'mlas_impl_c328bc2511af6aee8138503c0a0d239a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c47fe93828d2f7a6b502fee054e433e0]
name = 'mlas_impl_c47fe93828d2f7a6b502fee054e433e0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_cb1da6f782226ac2f515361d830ae90b]
name = 'mlas_impl_cb1da6f782226ac2f515361d830ae90b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_cbc7648f4d1595cf88fd372a136698ee]
name = 'mlas_impl_cbc7648f4d1595cf88fd372a136698ee'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_cc0f2882f2f5e79b9efb8e847b3fde8e]
name = 'mlas_impl_cc0f2882f2f5e79b9efb8e847b3fde8e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_d21a2ae133f9592db411203268b32631]
name = 'mlas_impl_d21a2ae133f9592db411203268b32631'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_dfedba69ae9a12d2c495764fc51706d1]
name = 'mlas_impl_dfedba69ae9a12d2c495764fc51706d1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e2261f1a3064eb805ffa5ef155a7c5a3]
name = 'mlas_impl_e2261f1a3064eb805ffa5ef155a7c5a3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e273f6b360e1aa8e9e94305a5046f74d]
name = 'mlas_impl_e273f6b360e1aa8e9e94305a5046f74d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e38848cba1beb351557db4e8aa23278e]
name = 'mlas_impl_e38848cba1beb351557db4e8aa23278e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e6524239911c5f93f6f0491e7e9e4646]
name = 'mlas_impl_e6524239911c5f93f6f0491e7e9e4646'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e6c84578aa567b4c63846b6e1bdd1016]
name = 'mlas_impl_e6c84578aa567b4c63846b6e1bdd1016'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e8e1b19516b797a4db10c929845016e4]
name = 'mlas_impl_e8e1b19516b797a4db10c929845016e4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_ea69f2f70eaf6c2e25ac6c8f5897505a]
name = 'mlas_impl_ea69f2f70eaf6c2e25ac6c8f5897505a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f10f574178f9d79e84093199161dd662]
name = 'mlas_impl_f10f574178f9d79e84093199161dd662'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f2ec48bb709e197d02e995b1b4fa75ea]
name = 'mlas_impl_f2ec48bb709e197d02e995b1b4fa75ea'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f31e4a1c9be74e353e8d9be02b7d1b91]
name = 'mlas_impl_f31e4a1c9be74e353e8d9be02b7d1b91'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f5ed84efa96eb68b563099275c942c2b]
name = 'mlas_impl_f5ed84efa96eb68b563099275c942c2b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f7be074899a68af9b392a38941a1c476]
name = 'mlas_impl_f7be074899a68af9b392a38941a1c476'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f8591ed4b344cb7b9b127e0a3125afd8]
name = 'mlas_impl_f8591ed4b344cb7b9b127e0a3125afd8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_fd4800d4cb0eafbad919c99c4157ac5d]
name = 'mlas_impl_fd4800d4cb0eafbad919c99c4157ac5d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_fec4d1e0bef392962a41b00b2d3fa85e]
name = 'mlas_impl_fec4d1e0bef392962a41b00b2d3fa85e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_ff367916b2ade4f2beff89459b52e3e1]
name = 'mlas_impl_ff367916b2ade4f2beff89459b52e3e1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_ffefe6ac33a6671141990c36c2987926]
name = 'mlas_impl_ffefe6ac33a6671141990c36c2987926'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_02f18ae0d16d14e357ba034fa3031640]
name = 'nest_impl_02f18ae0d16d14e357ba034fa3031640'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_031565209edf87e6cb71835a190281fc]
name = 'nest_impl_031565209edf87e6cb71835a190281fc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_040c14f6ee70e0b23182e9d8dfe4ad0a]
name = 'nest_impl_040c14f6ee70e0b23182e9d8dfe4ad0a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0afca2d69632490b95d3c30f83262b6f]
name = 'nest_impl_0afca2d69632490b95d3c30f83262b6f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0b09a7b9cf900ca01a125b70a069bfe3]
name = 'nest_impl_0b09a7b9cf900ca01a125b70a069bfe3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0c3d93bdc8ad1ef4b110e1c1faed2752]
name = 'nest_impl_0c3d93bdc8ad1ef4b110e1c1faed2752'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0c4f45fc564dd1f9a483b95e84067ab8]
name = 'nest_impl_0c4f45fc564dd1f9a483b95e84067ab8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0dd0f264c342efb5e3777612dbc3a91b]
name = 'nest_impl_0dd0f264c342efb5e3777612dbc3a91b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0f09b35015613abbe135cb78ebad1abc]
name = 'nest_impl_0f09b35015613abbe135cb78ebad1abc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0f3470b1bff63f95c4dd5b85e8d085ff]
name = 'nest_impl_0f3470b1bff63f95c4dd5b85e8d085ff'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0f90e08211744ed26a418338ac714e71]
name = 'nest_impl_0f90e08211744ed26a418338ac714e71'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_117f77362e593e475356391c770782e6]
name = 'nest_impl_117f77362e593e475356391c770782e6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1361f4d0df8136ba4828bca55e4cb8bb]
name = 'nest_impl_1361f4d0df8136ba4828bca55e4cb8bb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_137650a913b200c787ae80cf4ab23a2c]
name = 'nest_impl_137650a913b200c787ae80cf4ab23a2c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_150b39b47a9be6e0622b02e15ca12c99]
name = 'nest_impl_150b39b47a9be6e0622b02e15ca12c99'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_18100bc242d701a0ed0e79752d50cf62]
name = 'nest_impl_18100bc242d701a0ed0e79752d50cf62'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_18d5b4263103ef462b61004642b0c5bf]
name = 'nest_impl_18d5b4263103ef462b61004642b0c5bf'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1943f4c5205cdb6117bc9bb7d50660d5]
name = 'nest_impl_1943f4c5205cdb6117bc9bb7d50660d5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1b32b745af465bf14b2a4d1a646d1ba1]
name = 'nest_impl_1b32b745af465bf14b2a4d1a646d1ba1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1c84552dc65034415b04a14ec9f764fb]
name = 'nest_impl_1c84552dc65034415b04a14ec9f764fb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1f1ccb07780d21ee070a03ae02a08514]
name = 'nest_impl_1f1ccb07780d21ee070a03ae02a08514'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1f1f6de8e17a5fbd32cb20e14ed5b9d1]
name = 'nest_impl_1f1f6de8e17a5fbd32cb20e14ed5b9d1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2151f1672cc0fcf1162f346315549d69]
name = 'nest_impl_2151f1672cc0fcf1162f346315549d69'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2250889c9ec4a99c5cad25577036b9ac]
name = 'nest_impl_2250889c9ec4a99c5cad25577036b9ac'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_28123dcf2c26cdcaeed79d73b955d272]
name = 'nest_impl_28123dcf2c26cdcaeed79d73b955d272'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_281bc80ec14ab780084b500f35e8a8bb]
name = 'nest_impl_281bc80ec14ab780084b500f35e8a8bb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_29cb483ac57f8747b9dfb58c19182960]
name = 'nest_impl_29cb483ac57f8747b9dfb58c19182960'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2b1ada6685a083c2764df491509624b6]
name = 'nest_impl_2b1ada6685a083c2764df491509624b6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2e186d92051c1f9aac62730f49918d9d]
name = 'nest_impl_2e186d92051c1f9aac62730f49918d9d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_30e77a7955111d9e36a57576a6f03318]
name = 'nest_impl_30e77a7955111d9e36a57576a6f03318'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_315b22080239b0dbdf7c4f65850741cc]
name = 'nest_impl_315b22080239b0dbdf7c4f65850741cc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_36dd2a86b9e910d71a4752acbd753e95]
name = 'nest_impl_36dd2a86b9e910d71a4752acbd753e95'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_37667a1309f3b0938a288439a554dbb5]
name = 'nest_impl_37667a1309f3b0938a288439a554dbb5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3769dc7edf8dd7dd0babf778f49416db]
name = 'nest_impl_3769dc7edf8dd7dd0babf778f49416db'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_37c316a3b432b7c941988cc51b76d78a]
name = 'nest_impl_37c316a3b432b7c941988cc51b76d78a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3bbb0e5ced59b7755bc96ad6458a38a4]
name = 'nest_impl_3bbb0e5ced59b7755bc96ad6458a38a4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_46cba8e55772825eb506f2951da97c5a]
name = 'nest_impl_46cba8e55772825eb506f2951da97c5a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_472f261b8ff097921395de7aeddc65fa]
name = 'nest_impl_472f261b8ff097921395de7aeddc65fa'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_47c62251ae20596b909928308614aad4]
name = 'nest_impl_47c62251ae20596b909928308614aad4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_48d8f54548a4fa0a758cb0d1cc0dfaad]
name = 'nest_impl_48d8f54548a4fa0a758cb0d1cc0dfaad'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4a4e58dab2fe5d094ab0790b889e6861]
name = 'nest_impl_4a4e58dab2fe5d094ab0790b889e6861'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4c9409999c5960e486ddf8465a12d6b5]
name = 'nest_impl_4c9409999c5960e486ddf8465a12d6b5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4eb02478fc589ef3e5688020c549d1d8]
name = 'nest_impl_4eb02478fc589ef3e5688020c549d1d8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_52a1d6139cd3531ae0820deb3432b164]
name = 'nest_impl_52a1d6139cd3531ae0820deb3432b164'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_576da69b1ae003848196056870942511]
name = 'nest_impl_576da69b1ae003848196056870942511'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_58350185d14b272bc4fba23b50dabc8f]
name = 'nest_impl_58350185d14b272bc4fba23b50dabc8f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5887883c8ada88ac86afd9a42cc40959]
name = 'nest_impl_5887883c8ada88ac86afd9a42cc40959'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_59172f2167add58a42ca361f9a3aa5be]
name = 'nest_impl_59172f2167add58a42ca361f9a3aa5be'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5a282b5747d5e7f2a351cb305391f579]
name = 'nest_impl_5a282b5747d5e7f2a351cb305391f579'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5ace50f7f3c8ca1ba46ae7d0dec2d7d3]
name = 'nest_impl_5ace50f7f3c8ca1ba46ae7d0dec2d7d3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5f125ecd9e81b1abec8f743c195f1920]
name = 'nest_impl_5f125ecd9e81b1abec8f743c195f1920'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_622652e2e12ca28211484cb789b4f9ce]
name = 'nest_impl_622652e2e12ca28211484cb789b4f9ce'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6521575d65aa8da9a0b121eb00a5c239]
name = 'nest_impl_6521575d65aa8da9a0b121eb00a5c239'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_68b1e4c0c516c08e14fa6f23dbc96c16]
name = 'nest_impl_68b1e4c0c516c08e14fa6f23dbc96c16'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6a18620c0eb896edf96cc5a3befbb743]
name = 'nest_impl_6a18620c0eb896edf96cc5a3befbb743'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6ed04b4e2164e08148ebe949980472d0]
name = 'nest_impl_6ed04b4e2164e08148ebe949980472d0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6ed782ba713523a3a3ff436bb1249193]
name = 'nest_impl_6ed782ba713523a3a3ff436bb1249193'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6fdc5005bfa297f6ca5725417381ef16]
name = 'nest_impl_6fdc5005bfa297f6ca5725417381ef16'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_742d789b4bdb11c21bf9f30de4f70a44]
name = 'nest_impl_742d789b4bdb11c21bf9f30de4f70a44'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_77f2a2ea45c9705de885f70388703112]
name = 'nest_impl_77f2a2ea45c9705de885f70388703112'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7a10ff6b13c3c1860e56bb68e27859bb]
name = 'nest_impl_7a10ff6b13c3c1860e56bb68e27859bb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7c7b60b8407ef4ecb444da092cf38c9d]
name = 'nest_impl_7c7b60b8407ef4ecb444da092cf38c9d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7c7b662ea6c314bf516ba89dc6384274]
name = 'nest_impl_7c7b662ea6c314bf516ba89dc6384274'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7dde595eb5dae9355b06a78c8246d614]
name = 'nest_impl_7dde595eb5dae9355b06a78c8246d614'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7fe2794fbf73fd10371dc17bd9dd73b0]
name = 'nest_impl_7fe2794fbf73fd10371dc17bd9dd73b0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8044cfdfd5dd711978be00a07ce16b02]
name = 'nest_impl_8044cfdfd5dd711978be00a07ce16b02'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8085f87e06bf02d127986cdcd5dbf8bb]
name = 'nest_impl_8085f87e06bf02d127986cdcd5dbf8bb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_80f7111b7d8cebe05e52339d05cd12d1]
name = 'nest_impl_80f7111b7d8cebe05e52339d05cd12d1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_80fefd135928a7facb27fa66636f1265]
name = 'nest_impl_80fefd135928a7facb27fa66636f1265'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_83bc9ebaf76ec6418c36d53add5c8d2a]
name = 'nest_impl_83bc9ebaf76ec6418c36d53add5c8d2a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_85c0f21ec48456c4ba0d0a6f8a4bc8ac]
name = 'nest_impl_85c0f21ec48456c4ba0d0a6f8a4bc8ac'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_87fe36a7d963bffd1dd9017cb957c69b]
name = 'nest_impl_87fe36a7d963bffd1dd9017cb957c69b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_883bda6333deb1ab9d6443d8a8ce368a]
name = 'nest_impl_883bda6333deb1ab9d6443d8a8ce368a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8b77f6b67675afa77115ca3bbac56340]
name = 'nest_impl_8b77f6b67675afa77115ca3bbac56340'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8c3686823ab54b9e69ccd67c64ad06fb]
name = 'nest_impl_8c3686823ab54b9e69ccd67c64ad06fb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8d50948b1a43fe775ea6aff983c7e972]
name = 'nest_impl_8d50948b1a43fe775ea6aff983c7e972'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_935716ea361c93c2f2bb3c8ece0d4104]
name = 'nest_impl_935716ea361c93c2f2bb3c8ece0d4104'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_95450e9e82c9614881f436e0b342bafc]
name = 'nest_impl_95450e9e82c9614881f436e0b342bafc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_965138cbec2a2fa50abfe78a07939c48]
name = 'nest_impl_965138cbec2a2fa50abfe78a07939c48'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_976d0aedd97740e7ba9042c5c7737115]
name = 'nest_impl_976d0aedd97740e7ba9042c5c7737115'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_981a4da180a6f703311502ff7864c446]
name = 'nest_impl_981a4da180a6f703311502ff7864c446'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_991bc29750a248f3ed6de6cad050a254]
name = 'nest_impl_991bc29750a248f3ed6de6cad050a254'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_999fd8019fa88cb30c3f3a6247dc7844]
name = 'nest_impl_999fd8019fa88cb30c3f3a6247dc7844'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_99d129e3765cd2eb0ae81711d37af83a]
name = 'nest_impl_99d129e3765cd2eb0ae81711d37af83a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9c3dfc54dae00ff2098c0f6c156ee674]
name = 'nest_impl_9c3dfc54dae00ff2098c0f6c156ee674'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9e3b8906b97632567e35a35a82002408]
name = 'nest_impl_9e3b8906b97632567e35a35a82002408'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9eb1cf122d252af4c91f1c8f5ea90512]
name = 'nest_impl_9eb1cf122d252af4c91f1c8f5ea90512'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a094507ee991c50f3282db90e5ec89c9]
name = 'nest_impl_a094507ee991c50f3282db90e5ec89c9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a3a40fa34ad10cb4b726d032a788b20d]
name = 'nest_impl_a3a40fa34ad10cb4b726d032a788b20d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a418467c32d3945524f1e1ee6145bdc1]
name = 'nest_impl_a418467c32d3945524f1e1ee6145bdc1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a67a3e8de754418a189b7ae40911ec35]
name = 'nest_impl_a67a3e8de754418a189b7ae40911ec35'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a6a30d74de667d434985a02c3eca859b]
name = 'nest_impl_a6a30d74de667d434985a02c3eca859b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a749e978ffa630fd26c21c7c3989a3a8]
name = 'nest_impl_a749e978ffa630fd26c21c7c3989a3a8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a8bc5b88bd977a682233c569cb104995]
name = 'nest_impl_a8bc5b88bd977a682233c569cb104995'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a8c2cde025255ff4829125cfe7637ab4]
name = 'nest_impl_a8c2cde025255ff4829125cfe7637ab4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a99c6410f0aa9d06e810af82d02d9eb3]
name = 'nest_impl_a99c6410f0aa9d06e810af82d02d9eb3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ab80652e63ae1264b367a0d44e043535]
name = 'nest_impl_ab80652e63ae1264b367a0d44e043535'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ad81d43f1b88f985112c9c16752eba30]
name = 'nest_impl_ad81d43f1b88f985112c9c16752eba30'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_aeb36be868bdc1dc1b408529c131393d]
name = 'nest_impl_aeb36be868bdc1dc1b408529c131393d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_afadeeaea85fcf4b9fd627f606d52a5b]
name = 'nest_impl_afadeeaea85fcf4b9fd627f606d52a5b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_afd381e28e6c99f94809b9b6fb2a1baf]
name = 'nest_impl_afd381e28e6c99f94809b9b6fb2a1baf'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b09df7cc5c6f1171c8cc25e534e9cb2f]
name = 'nest_impl_b09df7cc5c6f1171c8cc25e534e9cb2f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b2403566b3b4ef200cea10da5b2dc5af]
name = 'nest_impl_b2403566b3b4ef200cea10da5b2dc5af'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b34f44a3a50d8277bb419b8333013ab9]
name = 'nest_impl_b34f44a3a50d8277bb419b8333013ab9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b582da78bfdcadb0666ade7b5ce30a88]
name = 'nest_impl_b582da78bfdcadb0666ade7b5ce30a88'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b62e9ee685f94124b5e994a9cf10e3b9]
name = 'nest_impl_b62e9ee685f94124b5e994a9cf10e3b9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b6b3e613682bd8e748a2c83bb4091c53]
name = 'nest_impl_b6b3e613682bd8e748a2c83bb4091c53'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b72300304a690d58fbb8e241f70067c6]
name = 'nest_impl_b72300304a690d58fbb8e241f70067c6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b7cc604de629f710e34c6415ab5d6629]
name = 'nest_impl_b7cc604de629f710e34c6415ab5d6629'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bc4887233634e916c659982f4d2c272f]
name = 'nest_impl_bc4887233634e916c659982f4d2c272f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bd8cc0328621a597b12d7118b9400f45]
name = 'nest_impl_bd8cc0328621a597b12d7118b9400f45'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bd97bbc4d6df3d29f8cd8e5b3c55f1d5]
name = 'nest_impl_bd97bbc4d6df3d29f8cd8e5b3c55f1d5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bfb89c5884ed07326f411b6bb66fbd1c]
name = 'nest_impl_bfb89c5884ed07326f411b6bb66fbd1c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c2297c1c42c71ee846d53bf5dd87dcd4]
name = 'nest_impl_c2297c1c42c71ee846d53bf5dd87dcd4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c2e393537a79c4421c17cec9a6e72872]
name = 'nest_impl_c2e393537a79c4421c17cec9a6e72872'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c3a6d27920c4f85ec177d0cbc4c000fe]
name = 'nest_impl_c3a6d27920c4f85ec177d0cbc4c000fe'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c59cfdbc2388e29d57809cae69fd324c]
name = 'nest_impl_c59cfdbc2388e29d57809cae69fd324c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c6540496396dad8736dea7d809900ac5]
name = 'nest_impl_c6540496396dad8736dea7d809900ac5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c7064b44605c53bcafb622465e654fc8]
name = 'nest_impl_c7064b44605c53bcafb622465e654fc8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c766a36b959b5a1eea40b11b03d329fe]
name = 'nest_impl_c766a36b959b5a1eea40b11b03d329fe'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ca6c651a3f02368596ccd793e8d489b6]
name = 'nest_impl_ca6c651a3f02368596ccd793e8d489b6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_cc63c2f05c80d954a8122362f64da07e]
name = 'nest_impl_cc63c2f05c80d954a8122362f64da07e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d200d469d91c79a239e1adc47c81b956]
name = 'nest_impl_d200d469d91c79a239e1adc47c81b956'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d83360e00e6b5e226cf0bb9122fb8564]
name = 'nest_impl_d83360e00e6b5e226cf0bb9122fb8564'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d8ef242e87c06065c09f0e94cc2a1f68]
name = 'nest_impl_d8ef242e87c06065c09f0e94cc2a1f68'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_da41d2e63bd482903891fc40b6e4e398]
name = 'nest_impl_da41d2e63bd482903891fc40b6e4e398'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_dafd8979912f12ed7650faf8d2b4a4b2]
name = 'nest_impl_dafd8979912f12ed7650faf8d2b4a4b2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_dc84a1e081b1011f9ac3a1e759856b91]
name = 'nest_impl_dc84a1e081b1011f9ac3a1e759856b91'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e02d87c9a8b329b5164a34767cf47a05]
name = 'nest_impl_e02d87c9a8b329b5164a34767cf47a05'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e32459e372a3b16351596487a772fb1d]
name = 'nest_impl_e32459e372a3b16351596487a772fb1d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 64, 256 ], affine_map = [ 262144, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e335d90d958e57cdee28593862f725fd]
name = 'nest_impl_e335d90d958e57cdee28593862f725fd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e86db86a9907ac1cc9d05ccca1141d8f]
name = 'nest_impl_e86db86a9907ac1cc9d05ccca1141d8f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e9fdef270e19ea0d532701bb6791d147]
name = 'nest_impl_e9fdef270e19ea0d532701bb6791d147'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ea42000fefa9821bad6463704ebfa568]
name = 'nest_impl_ea42000fefa9821bad6463704ebfa568'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ec14f8ea27bd87594507e62599644721]
name = 'nest_impl_ec14f8ea27bd87594507e62599644721'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 256 ], affine_map = [ 1048576, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 16, 256, 64 ], affine_map = [ 262144, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ee4e1accaf9885bea71f628f30673831]
name = 'nest_impl_ee4e1accaf9885bea71f628f30673831'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ef7b20522e4f2a4d520b58a2c1e86af0]
name = 'nest_impl_ef7b20522e4f2a4d520b58a2c1e86af0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f0afbf7018999191add5aded5b1532fc]
name = 'nest_impl_f0afbf7018999191add5aded5b1532fc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f7c6910586d17bc1a7dc52de41e5b0c7]
name = 'nest_impl_f7c6910586d17bc1a7dc52de41e5b0c7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f92a0d0206496e3bed55fdef9ad5e07a]
name = 'nest_impl_f92a0d0206496e3bed55fdef9ad5e07a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f96d06220f0b25fd7e53f2a70dc9ad06]
name = 'nest_impl_f96d06220f0b25fd7e53f2a70dc9ad06'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_fcbb8ac32a4e5d45c23fef6427b4ff90]
name = 'nest_impl_fcbb8ac32a4e5d45c23fef6427b4ff90'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_fe07355d4cdc863f837450863b096085]
name = 'nest_impl_fe07355d4cdc863f837450863b096085'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ff713dbb5e996f53aeb52fc5470bb3f2]
name = 'nest_impl_ff713dbb5e996f53aeb52fc5470bb3f2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 4096 ], affine_map = [ 4096, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 4096, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 1024 ], affine_map = [ 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[target]
[target.required]
os = "linux"

[target.required.CPU]
architecture = "x86_64"
extensions = ["+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3"]

[dependencies]
link_target = "torch-jit-export.o"
deploy_files = []
dynamic = []

[compiled_with]
compiler = ''
flags = ''
crt = ''
libraries = []

[declaration]
code = '''
#endif // __TOML__
//
// Header for RoboCode library torch-jit-export
//

#include <stdint.h>

#if defined(__cplusplus)
extern "C"
{
#endif // defined(__cplusplus)

//
// Functions
//

void Gemm_52_reshape_B(float*, float*);


int64_t Gemm_52_reshape_B_size();


void nest_impl_58350185d14b272bc4fba23b50dabc8f(float*, float*, float*);


void mlas_impl_79798529f2dafd815e87800f1459aebd(float*, float*, float*, float*);


void Gemm_52(float*, float*, float*, float*);


void nest_impl_d200d469d91c79a239e1adc47c81b956(float*, float*, float*);


void MatMul_128_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_1b32b745af465bf14b2a4d1a646d1ba1(float*, float*, float*);


void MatMul_154(float*, float*, float*);


void Gemm_195_reshape_B(float*, float*);


int64_t Gemm_195_reshape_B_size();


void nest_impl_f7c6910586d17bc1a7dc52de41e5b0c7(float*, float*, float*);


void mlas_impl_3f05f5c2f43231a825189395645b852e(float*, float*, float*, float*);


void Gemm_195(float*, float*, float*, float*);


void Gemm_227_reshape_B(float*, float*);


int64_t Gemm_227_reshape_B_size();


void nest_impl_b7cc604de629f710e34c6415ab5d6629(float*, float*, float*);


void mlas_impl_9d4fe659e8e511a0f044f26541d90fe7(float*, float*, float*, float*);


void Gemm_227(float*, float*, float*, float*);


void Gemm_260_reshape_B(float*, float*);


int64_t Gemm_260_reshape_B_size();


void nest_impl_0c4f45fc564dd1f9a483b95e84067ab8(float*, float*, float*);


void mlas_impl_91f133acd9eee0da1ac0ca5ea71feeb8(float*, float*, float*, float*);


void Gemm_260(float*, float*, float*, float*);


void Gemm_292_reshape_B(float*, float*);


int64_t Gemm_292_reshape_B_size();


void nest_impl_bd8cc0328621a597b12d7118b9400f45(float*, float*, float*);


void mlas_impl_b7bee5ff2e82457584bd8af7a64c5d6e(float*, float*, float*, float*);


void Gemm_292(float*, float*, float*, float*);


void nest_impl_7c7b662ea6c314bf516ba89dc6384274(float*, float*, float*);


void MatMul_368_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_85c0f21ec48456c4ba0d0a6f8a4bc8ac(float*, float*, float*);


void MatMul_394(float*, float*, float*);


void Gemm_435_reshape_B(float*, float*);


int64_t Gemm_435_reshape_B_size();


void nest_impl_e335d90d958e57cdee28593862f725fd(float*, float*, float*);


void mlas_impl_203a65066064f95d73c7fbb96c061e0d(float*, float*, float*, float*);


void Gemm_435(float*, float*, float*, float*);


void Gemm_467_reshape_B(float*, float*);


int64_t Gemm_467_reshape_B_size();


void nest_impl_f0afbf7018999191add5aded5b1532fc(float*, float*, float*);


void mlas_impl_d21a2ae133f9592db411203268b32631(float*, float*, float*, float*);


void Gemm_467(float*, float*, float*, float*);


void Gemm_500_reshape_B(float*, float*);


int64_t Gemm_500_reshape_B_size();


void nest_impl_95450e9e82c9614881f436e0b342bafc(float*, float*, float*);


void mlas_impl_39009a419eb945531d71f40a656afda7(float*, float*, float*, float*);


void Gemm_500(float*, float*, float*, float*);


void Gemm_532_reshape_B(float*, float*);


int64_t Gemm_532_reshape_B_size();


void nest_impl_742d789b4bdb11c21bf9f30de4f70a44(float*, float*, float*);


void mlas_impl_e38848cba1beb351557db4e8aa23278e(float*, float*, float*, float*);


void Gemm_532(float*, float*, float*, float*);


void nest_impl_981a4da180a6f703311502ff7864c446(float*, float*, float*);


void MatMul_608_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_dc84a1e081b1011f9ac3a1e759856b91(float*, float*, float*);


void MatMul_634(float*, float*, float*);


void Gemm_675_reshape_B(float*, float*);


int64_t Gemm_675_reshape_B_size();


void nest_impl_576da69b1ae003848196056870942511(float*, float*, float*);


void mlas_impl_1e3b04bf94ed0313248045a19a333726(float*, float*, float*, float*);


void Gemm_675(float*, float*, float*, float*);


void Gemm_707_reshape_B(float*, float*);


int64_t Gemm_707_reshape_B_size();


void nest_impl_f92a0d0206496e3bed55fdef9ad5e07a(float*, float*, float*);


void mlas_impl_ff367916b2ade4f2beff89459b52e3e1(float*, float*, float*, float*);


void Gemm_707(float*, float*, float*, float*);


void Gemm_740_reshape_B(float*, float*);


int64_t Gemm_740_reshape_B_size();


void nest_impl_6ed782ba713523a3a3ff436bb1249193(float*, float*, float*);


void mlas_impl_49451f8414309a5e1d7cb50c5834a0a5(float*, float*, float*, float*);


void Gemm_740(float*, float*, float*, float*);


void Gemm_772_reshape_B(float*, float*);


int64_t Gemm_772_reshape_B_size();


void nest_impl_2250889c9ec4a99c5cad25577036b9ac(float*, float*, float*);


void mlas_impl_4d3c1ee4096b4dce37f7f47c0b4a4fa8(float*, float*, float*, float*);


void Gemm_772(float*, float*, float*, float*);


void nest_impl_0b09a7b9cf900ca01a125b70a069bfe3(float*, float*, float*);


void MatMul_848_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_18100bc242d701a0ed0e79752d50cf62(float*, float*, float*);


void MatMul_874(float*, float*, float*);


void Gemm_915_reshape_B(float*, float*);


int64_t Gemm_915_reshape_B_size();


void nest_impl_80f7111b7d8cebe05e52339d05cd12d1(float*, float*, float*);


void mlas_impl_26a602d5912e3999f61b6153c682fb2b(float*, float*, float*, float*);


void Gemm_915(float*, float*, float*, float*);


void Gemm_947_reshape_B(float*, float*);


int64_t Gemm_947_reshape_B_size();


void nest_impl_b582da78bfdcadb0666ade7b5ce30a88(float*, float*, float*);


void mlas_impl_9cee68c44a8df42541833df7825ac8ac(float*, float*, float*, float*);


void Gemm_947(float*, float*, float*, float*);


void Gemm_980_reshape_B(float*, float*);


int64_t Gemm_980_reshape_B_size();


void nest_impl_5ace50f7f3c8ca1ba46ae7d0dec2d7d3(float*, float*, float*);


void mlas_impl_957b399419d75eb313c318a586672fdd(float*, float*, float*, float*);


void Gemm_980(float*, float*, float*, float*);


void Gemm_1012_reshape_B(float*, float*);


int64_t Gemm_1012_reshape_B_size();


void nest_impl_37c316a3b432b7c941988cc51b76d78a(float*, float*, float*);


void mlas_impl_0fc9537a6cbb9bcdb178cfe43ef48066(float*, float*, float*, float*);


void Gemm_1012(float*, float*, float*, float*);


void nest_impl_7dde595eb5dae9355b06a78c8246d614(float*, float*, float*);


void MatMul_1088_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_1f1f6de8e17a5fbd32cb20e14ed5b9d1(float*, float*, float*);


void MatMul_1114(float*, float*, float*);


void Gemm_1155_reshape_B(float*, float*);


int64_t Gemm_1155_reshape_B_size();


void nest_impl_2151f1672cc0fcf1162f346315549d69(float*, float*, float*);


void mlas_impl_3803adc4c0acfb834dd695cdc03e14b0(float*, float*, float*, float*);


void Gemm_1155(float*, float*, float*, float*);


void Gemm_1187_reshape_B(float*, float*);


int64_t Gemm_1187_reshape_B_size();


void nest_impl_c6540496396dad8736dea7d809900ac5(float*, float*, float*);


void mlas_impl_cc0f2882f2f5e79b9efb8e847b3fde8e(float*, float*, float*, float*);


void Gemm_1187(float*, float*, float*, float*);


void Gemm_1220_reshape_B(float*, float*);


int64_t Gemm_1220_reshape_B_size();


void nest_impl_c7064b44605c53bcafb622465e654fc8(float*, float*, float*);


void mlas_impl_f8591ed4b344cb7b9b127e0a3125afd8(float*, float*, float*, float*);


void Gemm_1220(float*, float*, float*, float*);


void Gemm_1252_reshape_B(float*, float*);


int64_t Gemm_1252_reshape_B_size();


void nest_impl_6ed04b4e2164e08148ebe949980472d0(float*, float*, float*);


void mlas_impl_a61bcc13d72ea4def672eb9e9507141d(float*, float*, float*, float*);


void Gemm_1252(float*, float*, float*, float*);


void nest_impl_1943f4c5205cdb6117bc9bb7d50660d5(float*, float*, float*);


void MatMul_1328_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_0f3470b1bff63f95c4dd5b85e8d085ff(float*, float*, float*);


void MatMul_1354(float*, float*, float*);


void Gemm_1395_reshape_B(float*, float*);


int64_t Gemm_1395_reshape_B_size();


void nest_impl_52a1d6139cd3531ae0820deb3432b164(float*, float*, float*);


void mlas_impl_1d341e364b6922e733e4959743aec580(float*, float*, float*, float*);


void Gemm_1395(float*, float*, float*, float*);


void Gemm_1427_reshape_B(float*, float*);


int64_t Gemm_1427_reshape_B_size();


void nest_impl_0f90e08211744ed26a418338ac714e71(float*, float*, float*);


void mlas_impl_896eeedd497bf728eae5a6e80bc98a68(float*, float*, float*, float*);


void Gemm_1427(float*, float*, float*, float*);


void Gemm_1460_reshape_B(float*, float*);


int64_t Gemm_1460_reshape_B_size();


void nest_impl_a67a3e8de754418a189b7ae40911ec35(float*, float*, float*);


void mlas_impl_0367cf0d1ece7e904d3ce085a87e1a7e(float*, float*, float*, float*);


void Gemm_1460(float*, float*, float*, float*);


void Gemm_1492_reshape_B(float*, float*);


int64_t Gemm_1492_reshape_B_size();


void nest_impl_3769dc7edf8dd7dd0babf778f49416db(float*, float*, float*);


void mlas_impl_6ca3ad498725f50d8b3234b693540caa(float*, float*, float*, float*);


void Gemm_1492(float*, float*, float*, float*);


void nest_impl_5f125ecd9e81b1abec8f743c195f1920(float*, float*, float*);


void MatMul_1568_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_29cb483ac57f8747b9dfb58c19182960(float*, float*, float*);


void MatMul_1594(float*, float*, float*);


void Gemm_1635_reshape_B(float*, float*);


int64_t Gemm_1635_reshape_B_size();


void nest_impl_c59cfdbc2388e29d57809cae69fd324c(float*, float*, float*);


void mlas_impl_72ef6aa19f2982dc553ebad9fcdb6024(float*, float*, float*, float*);


void Gemm_1635(float*, float*, float*, float*);


void Gemm_1667_reshape_B(float*, float*);


int64_t Gemm_1667_reshape_B_size();


void nest_impl_80fefd135928a7facb27fa66636f1265(float*, float*, float*);


void mlas_impl_dfedba69ae9a12d2c495764fc51706d1(float*, float*, float*, float*);


void Gemm_1667(float*, float*, float*, float*);


void Gemm_1700_reshape_B(float*, float*);


int64_t Gemm_1700_reshape_B_size();


void nest_impl_77f2a2ea45c9705de885f70388703112(float*, float*, float*);


void mlas_impl_9e8e3beb0ac4c9e7aaeda49cd5d98840(float*, float*, float*, float*);


void Gemm_1700(float*, float*, float*, float*);


void Gemm_1732_reshape_B(float*, float*);


int64_t Gemm_1732_reshape_B_size();


void nest_impl_59172f2167add58a42ca361f9a3aa5be(float*, float*, float*);


void mlas_impl_9bfe0fec5b427b854ccf6b8677185c4e(float*, float*, float*, float*);


void Gemm_1732(float*, float*, float*, float*);


void nest_impl_30e77a7955111d9e36a57576a6f03318(float*, float*, float*);


void MatMul_1808_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_040c14f6ee70e0b23182e9d8dfe4ad0a(float*, float*, float*);


void MatMul_1834(float*, float*, float*);


void Gemm_1875_reshape_B(float*, float*);


int64_t Gemm_1875_reshape_B_size();


void nest_impl_fe07355d4cdc863f837450863b096085(float*, float*, float*);


void mlas_impl_2fdd2c6851b038076bb03250d4cb993f(float*, float*, float*, float*);


void Gemm_1875(float*, float*, float*, float*);


void Gemm_1907_reshape_B(float*, float*);


int64_t Gemm_1907_reshape_B_size();


void nest_impl_e9fdef270e19ea0d532701bb6791d147(float*, float*, float*);


void mlas_impl_ffefe6ac33a6671141990c36c2987926(float*, float*, float*, float*);


void Gemm_1907(float*, float*, float*, float*);


void Gemm_1940_reshape_B(float*, float*);


int64_t Gemm_1940_reshape_B_size();


void nest_impl_ea42000fefa9821bad6463704ebfa568(float*, float*, float*);


void mlas_impl_8077261e67765fe39b1d456bbbbbda49(float*, float*, float*, float*);


void Gemm_1940(float*, float*, float*, float*);


void Gemm_1972_reshape_B(float*, float*);


int64_t Gemm_1972_reshape_B_size();


void nest_impl_999fd8019fa88cb30c3f3a6247dc7844(float*, float*, float*);


void mlas_impl_1216813ab5028ad6f7baab4134bb5214(float*, float*, float*, float*);


void Gemm_1972(float*, float*, float*, float*);


void nest_impl_4c9409999c5960e486ddf8465a12d6b5(float*, float*, float*);


void MatMul_2048_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_4eb02478fc589ef3e5688020c549d1d8(float*, float*, float*);


void MatMul_2074(float*, float*, float*);


void Gemm_2115_reshape_B(float*, float*);


int64_t Gemm_2115_reshape_B_size();


void nest_impl_0c3d93bdc8ad1ef4b110e1c1faed2752(float*, float*, float*);


void mlas_impl_38f7f7bc30dc098f4066d3a637e8701b(float*, float*, float*, float*);


void Gemm_2115(float*, float*, float*, float*);


void Gemm_2147_reshape_B(float*, float*);


int64_t Gemm_2147_reshape_B_size();


void nest_impl_dafd8979912f12ed7650faf8d2b4a4b2(float*, float*, float*);


void mlas_impl_41831e23687f5c2b19e700a48aad4c6e(float*, float*, float*, float*);


void Gemm_2147(float*, float*, float*, float*);


void Gemm_2180_reshape_B(float*, float*);


int64_t Gemm_2180_reshape_B_size();


void nest_impl_bc4887233634e916c659982f4d2c272f(float*, float*, float*);


void mlas_impl_432973e895a943dc850b31636138c4f3(float*, float*, float*, float*);


void Gemm_2180(float*, float*, float*, float*);


void Gemm_2212_reshape_B(float*, float*);


int64_t Gemm_2212_reshape_B_size();


void nest_impl_8044cfdfd5dd711978be00a07ce16b02(float*, float*, float*);


void mlas_impl_ac1292ad8b7c66873e7104ce6f1af2c4(float*, float*, float*, float*);


void Gemm_2212(float*, float*, float*, float*);


void nest_impl_d83360e00e6b5e226cf0bb9122fb8564(float*, float*, float*);


void MatMul_2288_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_ec14f8ea27bd87594507e62599644721(float*, float*, float*);


void MatMul_2314(float*, float*, float*);


void Gemm_2355_reshape_B(float*, float*);


int64_t Gemm_2355_reshape_B_size();


void nest_impl_8c3686823ab54b9e69ccd67c64ad06fb(float*, float*, float*);


void mlas_impl_c328bc2511af6aee8138503c0a0d239a(float*, float*, float*, float*);


void Gemm_2355(float*, float*, float*, float*);


void Gemm_2387_reshape_B(float*, float*);


int64_t Gemm_2387_reshape_B_size();


void nest_impl_ef7b20522e4f2a4d520b58a2c1e86af0(float*, float*, float*);


void mlas_impl_41df7af7af70f427da4b072c13eeff43(float*, float*, float*, float*);


void Gemm_2387(float*, float*, float*, float*);


void Gemm_2420_reshape_B(float*, float*);


int64_t Gemm_2420_reshape_B_size();


void nest_impl_02f18ae0d16d14e357ba034fa3031640(float*, float*, float*);


void mlas_impl_fd4800d4cb0eafbad919c99c4157ac5d(float*, float*, float*, float*);


void Gemm_2420(float*, float*, float*, float*);


void Gemm_2452_reshape_B(float*, float*);


int64_t Gemm_2452_reshape_B_size();


void nest_impl_e02d87c9a8b329b5164a34767cf47a05(float*, float*, float*);


void mlas_impl_8d0e00f1c18fde20801922999d5e586f(float*, float*, float*, float*);


void Gemm_2452(float*, float*, float*, float*);


void nest_impl_87fe36a7d963bffd1dd9017cb957c69b(float*, float*, float*);


void MatMul_2528_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_da41d2e63bd482903891fc40b6e4e398(float*, float*, float*);


void MatMul_2554(float*, float*, float*);


void Gemm_2595_reshape_B(float*, float*);


int64_t Gemm_2595_reshape_B_size();


void nest_impl_d8ef242e87c06065c09f0e94cc2a1f68(float*, float*, float*);


void mlas_impl_bc4911207ec4bcd0d5bdb4558885115b(float*, float*, float*, float*);


void Gemm_2595(float*, float*, float*, float*);


void Gemm_2627_reshape_B(float*, float*);


int64_t Gemm_2627_reshape_B_size();


void nest_impl_a094507ee991c50f3282db90e5ec89c9(float*, float*, float*);


void mlas_impl_4bc7d7a9697cc9cab0212c89e86af0a8(float*, float*, float*, float*);


void Gemm_2627(float*, float*, float*, float*);


void Gemm_2660_reshape_B(float*, float*);


int64_t Gemm_2660_reshape_B_size();


void nest_impl_c2e393537a79c4421c17cec9a6e72872(float*, float*, float*);


void mlas_impl_8361ec45e2cf5a2c1c4f6a8b3a850681(float*, float*, float*, float*);


void Gemm_2660(float*, float*, float*, float*);


void Gemm_2692_reshape_B(float*, float*);


int64_t Gemm_2692_reshape_B_size();


void nest_impl_68b1e4c0c516c08e14fa6f23dbc96c16(float*, float*, float*);


void mlas_impl_e6524239911c5f93f6f0491e7e9e4646(float*, float*, float*, float*);


void Gemm_2692(float*, float*, float*, float*);


void nest_impl_b62e9ee685f94124b5e994a9cf10e3b9(float*, float*, float*);


void MatMul_2768_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_8d50948b1a43fe775ea6aff983c7e972(float*, float*, float*);


void MatMul_2794(float*, float*, float*);


void Gemm_2835_reshape_B(float*, float*);


int64_t Gemm_2835_reshape_B_size();


void nest_impl_a3a40fa34ad10cb4b726d032a788b20d(float*, float*, float*);


void mlas_impl_e2261f1a3064eb805ffa5ef155a7c5a3(float*, float*, float*, float*);


void Gemm_2835(float*, float*, float*, float*);


void Gemm_2867_reshape_B(float*, float*);


int64_t Gemm_2867_reshape_B_size();


void nest_impl_117f77362e593e475356391c770782e6(float*, float*, float*);


void mlas_impl_79d59f5e38f744dac9102cf867e207dc(float*, float*, float*, float*);


void Gemm_2867(float*, float*, float*, float*);


void Gemm_2900_reshape_B(float*, float*);


int64_t Gemm_2900_reshape_B_size();


void nest_impl_cc63c2f05c80d954a8122362f64da07e(float*, float*, float*);


void mlas_impl_5dfbcb20ee63fa36c794fa6389cfb39b(float*, float*, float*, float*);


void Gemm_2900(float*, float*, float*, float*);


void Gemm_2932_reshape_B(float*, float*);


int64_t Gemm_2932_reshape_B_size();


void nest_impl_9eb1cf122d252af4c91f1c8f5ea90512(float*, float*, float*);


void mlas_impl_7673813eaef76a518091442672bfc003(float*, float*, float*, float*);


void Gemm_2932(float*, float*, float*, float*);


void nest_impl_bfb89c5884ed07326f411b6bb66fbd1c(float*, float*, float*);


void MatMul_3008_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_e86db86a9907ac1cc9d05ccca1141d8f(float*, float*, float*);


void MatMul_3034(float*, float*, float*);


void Gemm_3075_reshape_B(float*, float*);


int64_t Gemm_3075_reshape_B_size();


void nest_impl_28123dcf2c26cdcaeed79d73b955d272(float*, float*, float*);


void mlas_impl_81f945c70402c874fa53accfe67d7ddd(float*, float*, float*, float*);


void Gemm_3075(float*, float*, float*, float*);


void Gemm_3107_reshape_B(float*, float*);


int64_t Gemm_3107_reshape_B_size();


void nest_impl_48d8f54548a4fa0a758cb0d1cc0dfaad(float*, float*, float*);


void mlas_impl_f31e4a1c9be74e353e8d9be02b7d1b91(float*, float*, float*, float*);


void Gemm_3107(float*, float*, float*, float*);


void Gemm_3140_reshape_B(float*, float*);


int64_t Gemm_3140_reshape_B_size();


void nest_impl_afd381e28e6c99f94809b9b6fb2a1baf(float*, float*, float*);


void mlas_impl_07ef19b5387832d4faa868430a046820(float*, float*, float*, float*);


void Gemm_3140(float*, float*, float*, float*);


void Gemm_3172_reshape_B(float*, float*);


int64_t Gemm_3172_reshape_B_size();


void nest_impl_1361f4d0df8136ba4828bca55e4cb8bb(float*, float*, float*);


void mlas_impl_bba94dcc7f6f5d29e07773c4c2b771f9(float*, float*, float*, float*);


void Gemm_3172(float*, float*, float*, float*);


void nest_impl_991bc29750a248f3ed6de6cad050a254(float*, float*, float*);


void MatMul_3248_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_83bc9ebaf76ec6418c36d53add5c8d2a(float*, float*, float*);


void MatMul_3274(float*, float*, float*);


void Gemm_3315_reshape_B(float*, float*);


int64_t Gemm_3315_reshape_B_size();


void nest_impl_5a282b5747d5e7f2a351cb305391f579(float*, float*, float*);


void mlas_impl_182c678b928993335abd97ad8f40a73c(float*, float*, float*, float*);


void Gemm_3315(float*, float*, float*, float*);


void Gemm_3347_reshape_B(float*, float*);


int64_t Gemm_3347_reshape_B_size();


void nest_impl_622652e2e12ca28211484cb789b4f9ce(float*, float*, float*);


void mlas_impl_3aa7315b78d61e9c0adba42c77ddadf5(float*, float*, float*, float*);


void Gemm_3347(float*, float*, float*, float*);


void Gemm_3380_reshape_B(float*, float*);


int64_t Gemm_3380_reshape_B_size();


void nest_impl_976d0aedd97740e7ba9042c5c7737115(float*, float*, float*);


void mlas_impl_81c4c5105d9c91857602f307acf620aa(float*, float*, float*, float*);


void Gemm_3380(float*, float*, float*, float*);


void Gemm_3412_reshape_B(float*, float*);


int64_t Gemm_3412_reshape_B_size();


void nest_impl_2b1ada6685a083c2764df491509624b6(float*, float*, float*);


void mlas_impl_50e78c5d2d9fa878c99ab4a0f636c6a6(float*, float*, float*, float*);


void Gemm_3412(float*, float*, float*, float*);


void nest_impl_ad81d43f1b88f985112c9c16752eba30(float*, float*, float*);


void MatMul_3488_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_a99c6410f0aa9d06e810af82d02d9eb3(float*, float*, float*);


void MatMul_3514(float*, float*, float*);


void Gemm_3555_reshape_B(float*, float*);


int64_t Gemm_3555_reshape_B_size();


void nest_impl_c3a6d27920c4f85ec177d0cbc4c000fe(float*, float*, float*);


void mlas_impl_9685d6ab828fd5c9fab7a0b0900ccdf5(float*, float*, float*, float*);


void Gemm_3555(float*, float*, float*, float*);


void Gemm_3587_reshape_B(float*, float*);


int64_t Gemm_3587_reshape_B_size();


void nest_impl_315b22080239b0dbdf7c4f65850741cc(float*, float*, float*);


void mlas_impl_e8e1b19516b797a4db10c929845016e4(float*, float*, float*, float*);


void Gemm_3587(float*, float*, float*, float*);


void Gemm_3620_reshape_B(float*, float*);


int64_t Gemm_3620_reshape_B_size();


void nest_impl_37667a1309f3b0938a288439a554dbb5(float*, float*, float*);


void mlas_impl_90b366f25df61381614e84f062c4f8d1(float*, float*, float*, float*);


void Gemm_3620(float*, float*, float*, float*);


void Gemm_3652_reshape_B(float*, float*);


int64_t Gemm_3652_reshape_B_size();


void nest_impl_0afca2d69632490b95d3c30f83262b6f(float*, float*, float*);


void mlas_impl_e6c84578aa567b4c63846b6e1bdd1016(float*, float*, float*, float*);


void Gemm_3652(float*, float*, float*, float*);


void nest_impl_bd97bbc4d6df3d29f8cd8e5b3c55f1d5(float*, float*, float*);


void MatMul_3728_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_4a4e58dab2fe5d094ab0790b889e6861(float*, float*, float*);


void MatMul_3754(float*, float*, float*);


void Gemm_3795_reshape_B(float*, float*);


int64_t Gemm_3795_reshape_B_size();


void nest_impl_47c62251ae20596b909928308614aad4(float*, float*, float*);


void mlas_impl_cb1da6f782226ac2f515361d830ae90b(float*, float*, float*, float*);


void Gemm_3795(float*, float*, float*, float*);


void Gemm_3827_reshape_B(float*, float*);


int64_t Gemm_3827_reshape_B_size();


void nest_impl_1c84552dc65034415b04a14ec9f764fb(float*, float*, float*);


void mlas_impl_793fa27b31d9589375db323afa0b4c1c(float*, float*, float*, float*);


void Gemm_3827(float*, float*, float*, float*);


void Gemm_3860_reshape_B(float*, float*);


int64_t Gemm_3860_reshape_B_size();


void nest_impl_46cba8e55772825eb506f2951da97c5a(float*, float*, float*);


void mlas_impl_56fe3b7c2e3243cf7c6b0a4e8868c965(float*, float*, float*, float*);


void Gemm_3860(float*, float*, float*, float*);


void Gemm_3892_reshape_B(float*, float*);


int64_t Gemm_3892_reshape_B_size();


void nest_impl_18d5b4263103ef462b61004642b0c5bf(float*, float*, float*);


void mlas_impl_4a50c5542d2f210d90c6770179ed1855(float*, float*, float*, float*);


void Gemm_3892(float*, float*, float*, float*);


void nest_impl_281bc80ec14ab780084b500f35e8a8bb(float*, float*, float*);


void MatMul_3968_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_a6a30d74de667d434985a02c3eca859b(float*, float*, float*);


void MatMul_3994(float*, float*, float*);


void Gemm_4035_reshape_B(float*, float*);


int64_t Gemm_4035_reshape_B_size();


void nest_impl_99d129e3765cd2eb0ae81711d37af83a(float*, float*, float*);


void mlas_impl_cbc7648f4d1595cf88fd372a136698ee(float*, float*, float*, float*);


void Gemm_4035(float*, float*, float*, float*);


void Gemm_4067_reshape_B(float*, float*);


int64_t Gemm_4067_reshape_B_size();


void nest_impl_36dd2a86b9e910d71a4752acbd753e95(float*, float*, float*);


void mlas_impl_4f425c33dbe44779739aa3af7e219cfd(float*, float*, float*, float*);


void Gemm_4067(float*, float*, float*, float*);


void Gemm_4100_reshape_B(float*, float*);


int64_t Gemm_4100_reshape_B_size();


void nest_impl_7c7b60b8407ef4ecb444da092cf38c9d(float*, float*, float*);


void mlas_impl_8e59b1fa4b1cf8b2b80bed15beba303d(float*, float*, float*, float*);


void Gemm_4100(float*, float*, float*, float*);


void Gemm_4132_reshape_B(float*, float*);


int64_t Gemm_4132_reshape_B_size();


void nest_impl_965138cbec2a2fa50abfe78a07939c48(float*, float*, float*);


void mlas_impl_6b84062a7beb897dd2fef687abc11520(float*, float*, float*, float*);


void Gemm_4132(float*, float*, float*, float*);


void nest_impl_2e186d92051c1f9aac62730f49918d9d(float*, float*, float*);


void MatMul_4208_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_6a18620c0eb896edf96cc5a3befbb743(float*, float*, float*);


void MatMul_4234(float*, float*, float*);


void Gemm_4275_reshape_B(float*, float*);


int64_t Gemm_4275_reshape_B_size();


void nest_impl_b72300304a690d58fbb8e241f70067c6(float*, float*, float*);


void mlas_impl_b72c47fbbc3b3125de7c3a6583b81e84(float*, float*, float*, float*);


void Gemm_4275(float*, float*, float*, float*);


void Gemm_4307_reshape_B(float*, float*);


int64_t Gemm_4307_reshape_B_size();


void nest_impl_ca6c651a3f02368596ccd793e8d489b6(float*, float*, float*);


void mlas_impl_ad9cdd0e81f1c480a1591a465af82c1f(float*, float*, float*, float*);


void Gemm_4307(float*, float*, float*, float*);


void Gemm_4340_reshape_B(float*, float*);


int64_t Gemm_4340_reshape_B_size();


void nest_impl_c766a36b959b5a1eea40b11b03d329fe(float*, float*, float*);


void mlas_impl_251868e3f2960db8787f9345fa65d918(float*, float*, float*, float*);


void Gemm_4340(float*, float*, float*, float*);


void Gemm_4372_reshape_B(float*, float*);


int64_t Gemm_4372_reshape_B_size();


void nest_impl_472f261b8ff097921395de7aeddc65fa(float*, float*, float*);


void mlas_impl_e273f6b360e1aa8e9e94305a5046f74d(float*, float*, float*, float*);


void Gemm_4372(float*, float*, float*, float*);


void nest_impl_e32459e372a3b16351596487a772fb1d(float*, float*, float*);


void MatMul_4448_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_0f09b35015613abbe135cb78ebad1abc(float*, float*, float*);


void MatMul_4474(float*, float*, float*);


void Gemm_4515_reshape_B(float*, float*);


int64_t Gemm_4515_reshape_B_size();


void nest_impl_b34f44a3a50d8277bb419b8333013ab9(float*, float*, float*);


void mlas_impl_9075c5f784a59f5793f60e0094e3a107(float*, float*, float*, float*);


void Gemm_4515(float*, float*, float*, float*);


void Gemm_4547_reshape_B(float*, float*);


int64_t Gemm_4547_reshape_B_size();


void nest_impl_a8bc5b88bd977a682233c569cb104995(float*, float*, float*);


void mlas_impl_3e10567ae27511cee8fe4c584a136af9(float*, float*, float*, float*);


void Gemm_4547(float*, float*, float*, float*);


void Gemm_4580_reshape_B(float*, float*);


int64_t Gemm_4580_reshape_B_size();


void nest_impl_a8c2cde025255ff4829125cfe7637ab4(float*, float*, float*);


void mlas_impl_ea69f2f70eaf6c2e25ac6c8f5897505a(float*, float*, float*, float*);


void Gemm_4580(float*, float*, float*, float*);


void Gemm_4612_reshape_B(float*, float*);


int64_t Gemm_4612_reshape_B_size();


void nest_impl_a749e978ffa630fd26c21c7c3989a3a8(float*, float*, float*);


void mlas_impl_35076bcdd70aac1938aa2bf14653457f(float*, float*, float*, float*);


void Gemm_4612(float*, float*, float*, float*);


void nest_impl_b6b3e613682bd8e748a2c83bb4091c53(float*, float*, float*);


void MatMul_4688_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_137650a913b200c787ae80cf4ab23a2c(float*, float*, float*);


void MatMul_4714(float*, float*, float*);


void Gemm_4755_reshape_B(float*, float*);


int64_t Gemm_4755_reshape_B_size();


void nest_impl_8b77f6b67675afa77115ca3bbac56340(float*, float*, float*);


void mlas_impl_6bd6632cbda349daa1afe89c5cecfde5(float*, float*, float*, float*);


void Gemm_4755(float*, float*, float*, float*);


void Gemm_4787_reshape_B(float*, float*);


int64_t Gemm_4787_reshape_B_size();


void nest_impl_9c3dfc54dae00ff2098c0f6c156ee674(float*, float*, float*);


void mlas_impl_253008f9e17005ae2f15f0622f06ee03(float*, float*, float*, float*);


void Gemm_4787(float*, float*, float*, float*);


void Gemm_4820_reshape_B(float*, float*);


int64_t Gemm_4820_reshape_B_size();


void nest_impl_6fdc5005bfa297f6ca5725417381ef16(float*, float*, float*);


void mlas_impl_fec4d1e0bef392962a41b00b2d3fa85e(float*, float*, float*, float*);


void Gemm_4820(float*, float*, float*, float*);


void Gemm_4852_reshape_B(float*, float*);


int64_t Gemm_4852_reshape_B_size();


void nest_impl_0dd0f264c342efb5e3777612dbc3a91b(float*, float*, float*);


void mlas_impl_16110d2fc9ddb5e66d93d7f2a2b09f3e(float*, float*, float*, float*);


void Gemm_4852(float*, float*, float*, float*);


void nest_impl_8085f87e06bf02d127986cdcd5dbf8bb(float*, float*, float*);


void MatMul_4928_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_ab80652e63ae1264b367a0d44e043535(float*, float*, float*);


void MatMul_4954(float*, float*, float*);


void Gemm_4995_reshape_B(float*, float*);


int64_t Gemm_4995_reshape_B_size();


void nest_impl_a418467c32d3945524f1e1ee6145bdc1(float*, float*, float*);


void mlas_impl_7c0a45cbd9d7e3ce9790d20c6e35551d(float*, float*, float*, float*);


void Gemm_4995(float*, float*, float*, float*);


void Gemm_5027_reshape_B(float*, float*);


int64_t Gemm_5027_reshape_B_size();


void nest_impl_fcbb8ac32a4e5d45c23fef6427b4ff90(float*, float*, float*);


void mlas_impl_938bb7ed9580448504ff43daac8d7034(float*, float*, float*, float*);


void Gemm_5027(float*, float*, float*, float*);


void Gemm_5060_reshape_B(float*, float*);


int64_t Gemm_5060_reshape_B_size();


void nest_impl_ee4e1accaf9885bea71f628f30673831(float*, float*, float*);


void mlas_impl_f2ec48bb709e197d02e995b1b4fa75ea(float*, float*, float*, float*);


void Gemm_5060(float*, float*, float*, float*);


void Gemm_5092_reshape_B(float*, float*);


int64_t Gemm_5092_reshape_B_size();


void nest_impl_b2403566b3b4ef200cea10da5b2dc5af(float*, float*, float*);


void mlas_impl_747cebc6e4024e375843ac7c45a7bb70(float*, float*, float*, float*);


void Gemm_5092(float*, float*, float*, float*);


void nest_impl_9e3b8906b97632567e35a35a82002408(float*, float*, float*);


void MatMul_5168_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_aeb36be868bdc1dc1b408529c131393d(float*, float*, float*);


void MatMul_5194(float*, float*, float*);


void Gemm_5235_reshape_B(float*, float*);


int64_t Gemm_5235_reshape_B_size();


void nest_impl_7a10ff6b13c3c1860e56bb68e27859bb(float*, float*, float*);


void mlas_impl_f7be074899a68af9b392a38941a1c476(float*, float*, float*, float*);


void Gemm_5235(float*, float*, float*, float*);


void Gemm_5267_reshape_B(float*, float*);


int64_t Gemm_5267_reshape_B_size();


void nest_impl_3bbb0e5ced59b7755bc96ad6458a38a4(float*, float*, float*);


void mlas_impl_f10f574178f9d79e84093199161dd662(float*, float*, float*, float*);


void Gemm_5267(float*, float*, float*, float*);


void Gemm_5300_reshape_B(float*, float*);


int64_t Gemm_5300_reshape_B_size();


void nest_impl_1f1ccb07780d21ee070a03ae02a08514(float*, float*, float*);


void mlas_impl_f5ed84efa96eb68b563099275c942c2b(float*, float*, float*, float*);


void Gemm_5300(float*, float*, float*, float*);


void Gemm_5332_reshape_B(float*, float*);


int64_t Gemm_5332_reshape_B_size();


void nest_impl_f96d06220f0b25fd7e53f2a70dc9ad06(float*, float*, float*);


void mlas_impl_c47fe93828d2f7a6b502fee054e433e0(float*, float*, float*, float*);


void Gemm_5332(float*, float*, float*, float*);


void nest_impl_883bda6333deb1ab9d6443d8a8ce368a(float*, float*, float*);


void MatMul_5408_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_b09df7cc5c6f1171c8cc25e534e9cb2f(float*, float*, float*);


void MatMul_5434(float*, float*, float*);


void Gemm_5475_reshape_B(float*, float*);


int64_t Gemm_5475_reshape_B_size();


void nest_impl_7fe2794fbf73fd10371dc17bd9dd73b0(float*, float*, float*);


void mlas_impl_708a918205b2ad8912a8226e3515476b(float*, float*, float*, float*);


void Gemm_5475(float*, float*, float*, float*);


void Gemm_5507_reshape_B(float*, float*);


int64_t Gemm_5507_reshape_B_size();


void nest_impl_5887883c8ada88ac86afd9a42cc40959(float*, float*, float*);


void mlas_impl_63fdecede68e7edd302435e4637c2ac4(float*, float*, float*, float*);


void Gemm_5507(float*, float*, float*, float*);


void Gemm_5540_reshape_B(float*, float*);


int64_t Gemm_5540_reshape_B_size();


void nest_impl_ff713dbb5e996f53aeb52fc5470bb3f2(float*, float*, float*);


void mlas_impl_0de14b8f67685243d5b534027b49d89e(float*, float*, float*, float*);


void Gemm_5540(float*, float*, float*, float*);


void Gemm_5572_reshape_B(float*, float*);


int64_t Gemm_5572_reshape_B_size();


void nest_impl_afadeeaea85fcf4b9fd627f606d52a5b(float*, float*, float*);


void mlas_impl_128b10eebb527829ab2a7370a492d010(float*, float*, float*, float*);


void Gemm_5572(float*, float*, float*, float*);


void nest_impl_935716ea361c93c2f2bb3c8ece0d4104(float*, float*, float*);


void MatMul_5648_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_031565209edf87e6cb71835a190281fc(float*, float*, float*);


void MatMul_5674(float*, float*, float*);


void Gemm_5715_reshape_B(float*, float*);


int64_t Gemm_5715_reshape_B_size();


void nest_impl_6521575d65aa8da9a0b121eb00a5c239(float*, float*, float*);


void mlas_impl_202c7723fba479786bca338652e29b9d(float*, float*, float*, float*);


void Gemm_5715(float*, float*, float*, float*);


void Gemm_5747_reshape_B(float*, float*);


int64_t Gemm_5747_reshape_B_size();


void nest_impl_150b39b47a9be6e0622b02e15ca12c99(float*, float*, float*);


void mlas_impl_5c152acf1b8860b7894238f10a23f696(float*, float*, float*, float*);


void Gemm_5747(float*, float*, float*, float*);


void Gemm_5780_reshape_B(float*, float*);


int64_t Gemm_5780_reshape_B_size();


void nest_impl_c2297c1c42c71ee846d53bf5dd87dcd4(float*, float*, float*);


void mlas_impl_6bd8cb627b17820cd7221459b13f78f3(float*, float*, float*, float*);


void Gemm_5780(float*, float*, float*, float*);


#if defined(__cplusplus)
} // extern "C"
#endif // defined(__cplusplus)

#ifdef __TOML__
'''

#endif // TOML

#endif // __torch-jit-export__