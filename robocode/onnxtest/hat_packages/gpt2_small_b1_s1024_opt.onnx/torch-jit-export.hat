
#ifndef __torch-jit-export__
#define __torch-jit-export__

#ifdef TOML
[description]
comment = 'torch-jit-export'
author = ''
version = ''
license_url = ''

[functions]
[functions.Gemm_1012]
name = 'Gemm_1012'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012.auxiliary]
[functions.Gemm_1012.auxiliary.onnx]
node_name = "Gemm_1012"
node_type = "Gemm"
node_domain = ""
node_args = ["1336", "h.4.attn.c_attn.weight", "h.4.attn.c_attn.bias", "1337"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_1012.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_attn.weight" = ["Gemm_1012_reshape_B", "Gemm_1012_reshape_B_size"]

[functions.Gemm_1012_reshape_B]
name = 'Gemm_1012_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012_reshape_B_size]
name = 'Gemm_1012_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1155]
name = 'Gemm_1155'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155.auxiliary]
[functions.Gemm_1155.auxiliary.onnx]
node_name = "Gemm_1155"
node_type = "Gemm"
node_domain = ""
node_args = ["1498", "h.4.attn.c_proj.weight", "h.4.attn.c_proj.bias", "1499"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_1155.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_proj.weight" = ["Gemm_1155_reshape_B", "Gemm_1155_reshape_B_size"]

[functions.Gemm_1155_reshape_B]
name = 'Gemm_1155_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155_reshape_B_size]
name = 'Gemm_1155_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1187]
name = 'Gemm_1187'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187.auxiliary]
[functions.Gemm_1187.auxiliary.onnx]
node_name = "Gemm_1187"
node_type = "Gemm"
node_domain = ""
node_args = ["1536", "h.4.mlp.c_fc.weight", "h.4.mlp.c_fc.bias", "1537"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_1187.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_fc.weight" = ["Gemm_1187_reshape_B", "Gemm_1187_reshape_B_size"]

[functions.Gemm_1187_reshape_B]
name = 'Gemm_1187_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187_reshape_B_size]
name = 'Gemm_1187_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1220]
name = 'Gemm_1220'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220.auxiliary]
[functions.Gemm_1220.auxiliary.onnx]
node_name = "Gemm_1220"
node_type = "Gemm"
node_domain = ""
node_args = ["1573", "h.4.mlp.c_proj.weight", "h.4.mlp.c_proj.bias", "1574"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_1220.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_proj.weight" = ["Gemm_1220_reshape_B", "Gemm_1220_reshape_B_size"]

[functions.Gemm_1220_reshape_B]
name = 'Gemm_1220_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220_reshape_B_size]
name = 'Gemm_1220_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1252]
name = 'Gemm_1252'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252.auxiliary]
[functions.Gemm_1252.auxiliary.onnx]
node_name = "Gemm_1252"
node_type = "Gemm"
node_domain = ""
node_args = ["1611", "h.5.attn.c_attn.weight", "h.5.attn.c_attn.bias", "1612"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_1252.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_attn.weight" = ["Gemm_1252_reshape_B", "Gemm_1252_reshape_B_size"]

[functions.Gemm_1252_reshape_B]
name = 'Gemm_1252_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252_reshape_B_size]
name = 'Gemm_1252_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1395]
name = 'Gemm_1395'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395.auxiliary]
[functions.Gemm_1395.auxiliary.onnx]
node_name = "Gemm_1395"
node_type = "Gemm"
node_domain = ""
node_args = ["1773", "h.5.attn.c_proj.weight", "h.5.attn.c_proj.bias", "1774"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_1395.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_proj.weight" = ["Gemm_1395_reshape_B", "Gemm_1395_reshape_B_size"]

[functions.Gemm_1395_reshape_B]
name = 'Gemm_1395_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395_reshape_B_size]
name = 'Gemm_1395_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1427]
name = 'Gemm_1427'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427.auxiliary]
[functions.Gemm_1427.auxiliary.onnx]
node_name = "Gemm_1427"
node_type = "Gemm"
node_domain = ""
node_args = ["1811", "h.5.mlp.c_fc.weight", "h.5.mlp.c_fc.bias", "1812"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_1427.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_fc.weight" = ["Gemm_1427_reshape_B", "Gemm_1427_reshape_B_size"]

[functions.Gemm_1427_reshape_B]
name = 'Gemm_1427_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427_reshape_B_size]
name = 'Gemm_1427_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1460]
name = 'Gemm_1460'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460.auxiliary]
[functions.Gemm_1460.auxiliary.onnx]
node_name = "Gemm_1460"
node_type = "Gemm"
node_domain = ""
node_args = ["1848", "h.5.mlp.c_proj.weight", "h.5.mlp.c_proj.bias", "1849"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_1460.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_proj.weight" = ["Gemm_1460_reshape_B", "Gemm_1460_reshape_B_size"]

[functions.Gemm_1460_reshape_B]
name = 'Gemm_1460_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460_reshape_B_size]
name = 'Gemm_1460_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1492]
name = 'Gemm_1492'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492.auxiliary]
[functions.Gemm_1492.auxiliary.onnx]
node_name = "Gemm_1492"
node_type = "Gemm"
node_domain = ""
node_args = ["1886", "h.6.attn.c_attn.weight", "h.6.attn.c_attn.bias", "1887"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_1492.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_attn.weight" = ["Gemm_1492_reshape_B", "Gemm_1492_reshape_B_size"]

[functions.Gemm_1492_reshape_B]
name = 'Gemm_1492_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492_reshape_B_size]
name = 'Gemm_1492_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1635]
name = 'Gemm_1635'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635.auxiliary]
[functions.Gemm_1635.auxiliary.onnx]
node_name = "Gemm_1635"
node_type = "Gemm"
node_domain = ""
node_args = ["2048", "h.6.attn.c_proj.weight", "h.6.attn.c_proj.bias", "2049"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_1635.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_proj.weight" = ["Gemm_1635_reshape_B", "Gemm_1635_reshape_B_size"]

[functions.Gemm_1635_reshape_B]
name = 'Gemm_1635_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635_reshape_B_size]
name = 'Gemm_1635_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1667]
name = 'Gemm_1667'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667.auxiliary]
[functions.Gemm_1667.auxiliary.onnx]
node_name = "Gemm_1667"
node_type = "Gemm"
node_domain = ""
node_args = ["2086", "h.6.mlp.c_fc.weight", "h.6.mlp.c_fc.bias", "2087"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_1667.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_fc.weight" = ["Gemm_1667_reshape_B", "Gemm_1667_reshape_B_size"]

[functions.Gemm_1667_reshape_B]
name = 'Gemm_1667_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667_reshape_B_size]
name = 'Gemm_1667_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1700]
name = 'Gemm_1700'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700.auxiliary]
[functions.Gemm_1700.auxiliary.onnx]
node_name = "Gemm_1700"
node_type = "Gemm"
node_domain = ""
node_args = ["2123", "h.6.mlp.c_proj.weight", "h.6.mlp.c_proj.bias", "2124"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_1700.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_proj.weight" = ["Gemm_1700_reshape_B", "Gemm_1700_reshape_B_size"]

[functions.Gemm_1700_reshape_B]
name = 'Gemm_1700_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700_reshape_B_size]
name = 'Gemm_1700_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1732]
name = 'Gemm_1732'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732.auxiliary]
[functions.Gemm_1732.auxiliary.onnx]
node_name = "Gemm_1732"
node_type = "Gemm"
node_domain = ""
node_args = ["2161", "h.7.attn.c_attn.weight", "h.7.attn.c_attn.bias", "2162"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_1732.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_attn.weight" = ["Gemm_1732_reshape_B", "Gemm_1732_reshape_B_size"]

[functions.Gemm_1732_reshape_B]
name = 'Gemm_1732_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732_reshape_B_size]
name = 'Gemm_1732_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1875]
name = 'Gemm_1875'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875.auxiliary]
[functions.Gemm_1875.auxiliary.onnx]
node_name = "Gemm_1875"
node_type = "Gemm"
node_domain = ""
node_args = ["2323", "h.7.attn.c_proj.weight", "h.7.attn.c_proj.bias", "2324"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_1875.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_proj.weight" = ["Gemm_1875_reshape_B", "Gemm_1875_reshape_B_size"]

[functions.Gemm_1875_reshape_B]
name = 'Gemm_1875_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875_reshape_B_size]
name = 'Gemm_1875_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1907]
name = 'Gemm_1907'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907.auxiliary]
[functions.Gemm_1907.auxiliary.onnx]
node_name = "Gemm_1907"
node_type = "Gemm"
node_domain = ""
node_args = ["2361", "h.7.mlp.c_fc.weight", "h.7.mlp.c_fc.bias", "2362"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_1907.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_fc.weight" = ["Gemm_1907_reshape_B", "Gemm_1907_reshape_B_size"]

[functions.Gemm_1907_reshape_B]
name = 'Gemm_1907_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907_reshape_B_size]
name = 'Gemm_1907_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1940]
name = 'Gemm_1940'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940.auxiliary]
[functions.Gemm_1940.auxiliary.onnx]
node_name = "Gemm_1940"
node_type = "Gemm"
node_domain = ""
node_args = ["2398", "h.7.mlp.c_proj.weight", "h.7.mlp.c_proj.bias", "2399"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_1940.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_proj.weight" = ["Gemm_1940_reshape_B", "Gemm_1940_reshape_B_size"]

[functions.Gemm_1940_reshape_B]
name = 'Gemm_1940_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940_reshape_B_size]
name = 'Gemm_1940_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_195]
name = 'Gemm_195'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195.auxiliary]
[functions.Gemm_195.auxiliary.onnx]
node_name = "Gemm_195"
node_type = "Gemm"
node_domain = ""
node_args = ["398", "h.0.attn.c_proj.weight", "h.0.attn.c_proj.bias", "399"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_195.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_proj.weight" = ["Gemm_195_reshape_B", "Gemm_195_reshape_B_size"]

[functions.Gemm_195_reshape_B]
name = 'Gemm_195_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195_reshape_B_size]
name = 'Gemm_195_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1972]
name = 'Gemm_1972'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972.auxiliary]
[functions.Gemm_1972.auxiliary.onnx]
node_name = "Gemm_1972"
node_type = "Gemm"
node_domain = ""
node_args = ["2436", "h.8.attn.c_attn.weight", "h.8.attn.c_attn.bias", "2437"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_1972.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_attn.weight" = ["Gemm_1972_reshape_B", "Gemm_1972_reshape_B_size"]

[functions.Gemm_1972_reshape_B]
name = 'Gemm_1972_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972_reshape_B_size]
name = 'Gemm_1972_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2115]
name = 'Gemm_2115'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115.auxiliary]
[functions.Gemm_2115.auxiliary.onnx]
node_name = "Gemm_2115"
node_type = "Gemm"
node_domain = ""
node_args = ["2598", "h.8.attn.c_proj.weight", "h.8.attn.c_proj.bias", "2599"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_2115.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_proj.weight" = ["Gemm_2115_reshape_B", "Gemm_2115_reshape_B_size"]

[functions.Gemm_2115_reshape_B]
name = 'Gemm_2115_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115_reshape_B_size]
name = 'Gemm_2115_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2147]
name = 'Gemm_2147'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147.auxiliary]
[functions.Gemm_2147.auxiliary.onnx]
node_name = "Gemm_2147"
node_type = "Gemm"
node_domain = ""
node_args = ["2636", "h.8.mlp.c_fc.weight", "h.8.mlp.c_fc.bias", "2637"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_2147.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_fc.weight" = ["Gemm_2147_reshape_B", "Gemm_2147_reshape_B_size"]

[functions.Gemm_2147_reshape_B]
name = 'Gemm_2147_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147_reshape_B_size]
name = 'Gemm_2147_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2180]
name = 'Gemm_2180'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180.auxiliary]
[functions.Gemm_2180.auxiliary.onnx]
node_name = "Gemm_2180"
node_type = "Gemm"
node_domain = ""
node_args = ["2673", "h.8.mlp.c_proj.weight", "h.8.mlp.c_proj.bias", "2674"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_2180.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_proj.weight" = ["Gemm_2180_reshape_B", "Gemm_2180_reshape_B_size"]

[functions.Gemm_2180_reshape_B]
name = 'Gemm_2180_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180_reshape_B_size]
name = 'Gemm_2180_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2212]
name = 'Gemm_2212'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212.auxiliary]
[functions.Gemm_2212.auxiliary.onnx]
node_name = "Gemm_2212"
node_type = "Gemm"
node_domain = ""
node_args = ["2711", "h.9.attn.c_attn.weight", "h.9.attn.c_attn.bias", "2712"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_2212.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_attn.weight" = ["Gemm_2212_reshape_B", "Gemm_2212_reshape_B_size"]

[functions.Gemm_2212_reshape_B]
name = 'Gemm_2212_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212_reshape_B_size]
name = 'Gemm_2212_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_227]
name = 'Gemm_227'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227.auxiliary]
[functions.Gemm_227.auxiliary.onnx]
node_name = "Gemm_227"
node_type = "Gemm"
node_domain = ""
node_args = ["436", "h.0.mlp.c_fc.weight", "h.0.mlp.c_fc.bias", "437"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_227.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_fc.weight" = ["Gemm_227_reshape_B", "Gemm_227_reshape_B_size"]

[functions.Gemm_227_reshape_B]
name = 'Gemm_227_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227_reshape_B_size]
name = 'Gemm_227_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2355]
name = 'Gemm_2355'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355.auxiliary]
[functions.Gemm_2355.auxiliary.onnx]
node_name = "Gemm_2355"
node_type = "Gemm"
node_domain = ""
node_args = ["2873", "h.9.attn.c_proj.weight", "h.9.attn.c_proj.bias", "2874"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_2355.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_proj.weight" = ["Gemm_2355_reshape_B", "Gemm_2355_reshape_B_size"]

[functions.Gemm_2355_reshape_B]
name = 'Gemm_2355_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355_reshape_B_size]
name = 'Gemm_2355_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2387]
name = 'Gemm_2387'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387.auxiliary]
[functions.Gemm_2387.auxiliary.onnx]
node_name = "Gemm_2387"
node_type = "Gemm"
node_domain = ""
node_args = ["2911", "h.9.mlp.c_fc.weight", "h.9.mlp.c_fc.bias", "2912"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_2387.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_fc.weight" = ["Gemm_2387_reshape_B", "Gemm_2387_reshape_B_size"]

[functions.Gemm_2387_reshape_B]
name = 'Gemm_2387_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387_reshape_B_size]
name = 'Gemm_2387_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2420]
name = 'Gemm_2420'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420.auxiliary]
[functions.Gemm_2420.auxiliary.onnx]
node_name = "Gemm_2420"
node_type = "Gemm"
node_domain = ""
node_args = ["2948", "h.9.mlp.c_proj.weight", "h.9.mlp.c_proj.bias", "2949"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_2420.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_proj.weight" = ["Gemm_2420_reshape_B", "Gemm_2420_reshape_B_size"]

[functions.Gemm_2420_reshape_B]
name = 'Gemm_2420_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420_reshape_B_size]
name = 'Gemm_2420_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2452]
name = 'Gemm_2452'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452.auxiliary]
[functions.Gemm_2452.auxiliary.onnx]
node_name = "Gemm_2452"
node_type = "Gemm"
node_domain = ""
node_args = ["2986", "h.10.attn.c_attn.weight", "h.10.attn.c_attn.bias", "2987"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_2452.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_attn.weight" = ["Gemm_2452_reshape_B", "Gemm_2452_reshape_B_size"]

[functions.Gemm_2452_reshape_B]
name = 'Gemm_2452_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452_reshape_B_size]
name = 'Gemm_2452_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2595]
name = 'Gemm_2595'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595.auxiliary]
[functions.Gemm_2595.auxiliary.onnx]
node_name = "Gemm_2595"
node_type = "Gemm"
node_domain = ""
node_args = ["3148", "h.10.attn.c_proj.weight", "h.10.attn.c_proj.bias", "3149"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_2595.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_proj.weight" = ["Gemm_2595_reshape_B", "Gemm_2595_reshape_B_size"]

[functions.Gemm_2595_reshape_B]
name = 'Gemm_2595_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595_reshape_B_size]
name = 'Gemm_2595_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_260]
name = 'Gemm_260'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260.auxiliary]
[functions.Gemm_260.auxiliary.onnx]
node_name = "Gemm_260"
node_type = "Gemm"
node_domain = ""
node_args = ["473", "h.0.mlp.c_proj.weight", "h.0.mlp.c_proj.bias", "474"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_260.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_proj.weight" = ["Gemm_260_reshape_B", "Gemm_260_reshape_B_size"]

[functions.Gemm_260_reshape_B]
name = 'Gemm_260_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260_reshape_B_size]
name = 'Gemm_260_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2627]
name = 'Gemm_2627'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627.auxiliary]
[functions.Gemm_2627.auxiliary.onnx]
node_name = "Gemm_2627"
node_type = "Gemm"
node_domain = ""
node_args = ["3186", "h.10.mlp.c_fc.weight", "h.10.mlp.c_fc.bias", "3187"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_2627.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_fc.weight" = ["Gemm_2627_reshape_B", "Gemm_2627_reshape_B_size"]

[functions.Gemm_2627_reshape_B]
name = 'Gemm_2627_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627_reshape_B_size]
name = 'Gemm_2627_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2660]
name = 'Gemm_2660'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660.auxiliary]
[functions.Gemm_2660.auxiliary.onnx]
node_name = "Gemm_2660"
node_type = "Gemm"
node_domain = ""
node_args = ["3223", "h.10.mlp.c_proj.weight", "h.10.mlp.c_proj.bias", "3224"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_2660.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_proj.weight" = ["Gemm_2660_reshape_B", "Gemm_2660_reshape_B_size"]

[functions.Gemm_2660_reshape_B]
name = 'Gemm_2660_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660_reshape_B_size]
name = 'Gemm_2660_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2692]
name = 'Gemm_2692'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692.auxiliary]
[functions.Gemm_2692.auxiliary.onnx]
node_name = "Gemm_2692"
node_type = "Gemm"
node_domain = ""
node_args = ["3261", "h.11.attn.c_attn.weight", "h.11.attn.c_attn.bias", "3262"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_2692.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_attn.weight" = ["Gemm_2692_reshape_B", "Gemm_2692_reshape_B_size"]

[functions.Gemm_2692_reshape_B]
name = 'Gemm_2692_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692_reshape_B_size]
name = 'Gemm_2692_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2835]
name = 'Gemm_2835'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835.auxiliary]
[functions.Gemm_2835.auxiliary.onnx]
node_name = "Gemm_2835"
node_type = "Gemm"
node_domain = ""
node_args = ["3423", "h.11.attn.c_proj.weight", "h.11.attn.c_proj.bias", "3424"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_2835.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_proj.weight" = ["Gemm_2835_reshape_B", "Gemm_2835_reshape_B_size"]

[functions.Gemm_2835_reshape_B]
name = 'Gemm_2835_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835_reshape_B_size]
name = 'Gemm_2835_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2867]
name = 'Gemm_2867'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867.auxiliary]
[functions.Gemm_2867.auxiliary.onnx]
node_name = "Gemm_2867"
node_type = "Gemm"
node_domain = ""
node_args = ["3461", "h.11.mlp.c_fc.weight", "h.11.mlp.c_fc.bias", "3462"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_2867.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_fc.weight" = ["Gemm_2867_reshape_B", "Gemm_2867_reshape_B_size"]

[functions.Gemm_2867_reshape_B]
name = 'Gemm_2867_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867_reshape_B_size]
name = 'Gemm_2867_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2900]
name = 'Gemm_2900'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900.auxiliary]
[functions.Gemm_2900.auxiliary.onnx]
node_name = "Gemm_2900"
node_type = "Gemm"
node_domain = ""
node_args = ["3498", "h.11.mlp.c_proj.weight", "h.11.mlp.c_proj.bias", "3499"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_2900.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_proj.weight" = ["Gemm_2900_reshape_B", "Gemm_2900_reshape_B_size"]

[functions.Gemm_2900_reshape_B]
name = 'Gemm_2900_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900_reshape_B_size]
name = 'Gemm_2900_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_292]
name = 'Gemm_292'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292.auxiliary]
[functions.Gemm_292.auxiliary.onnx]
node_name = "Gemm_292"
node_type = "Gemm"
node_domain = ""
node_args = ["511", "h.1.attn.c_attn.weight", "h.1.attn.c_attn.bias", "512"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_292.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_attn.weight" = ["Gemm_292_reshape_B", "Gemm_292_reshape_B_size"]

[functions.Gemm_292_reshape_B]
name = 'Gemm_292_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292_reshape_B_size]
name = 'Gemm_292_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_435]
name = 'Gemm_435'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435.auxiliary]
[functions.Gemm_435.auxiliary.onnx]
node_name = "Gemm_435"
node_type = "Gemm"
node_domain = ""
node_args = ["673", "h.1.attn.c_proj.weight", "h.1.attn.c_proj.bias", "674"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_435.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_proj.weight" = ["Gemm_435_reshape_B", "Gemm_435_reshape_B_size"]

[functions.Gemm_435_reshape_B]
name = 'Gemm_435_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435_reshape_B_size]
name = 'Gemm_435_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_467]
name = 'Gemm_467'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467.auxiliary]
[functions.Gemm_467.auxiliary.onnx]
node_name = "Gemm_467"
node_type = "Gemm"
node_domain = ""
node_args = ["711", "h.1.mlp.c_fc.weight", "h.1.mlp.c_fc.bias", "712"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_467.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_fc.weight" = ["Gemm_467_reshape_B", "Gemm_467_reshape_B_size"]

[functions.Gemm_467_reshape_B]
name = 'Gemm_467_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467_reshape_B_size]
name = 'Gemm_467_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_500]
name = 'Gemm_500'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500.auxiliary]
[functions.Gemm_500.auxiliary.onnx]
node_name = "Gemm_500"
node_type = "Gemm"
node_domain = ""
node_args = ["748", "h.1.mlp.c_proj.weight", "h.1.mlp.c_proj.bias", "749"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_500.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_proj.weight" = ["Gemm_500_reshape_B", "Gemm_500_reshape_B_size"]

[functions.Gemm_500_reshape_B]
name = 'Gemm_500_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500_reshape_B_size]
name = 'Gemm_500_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_52]
name = 'Gemm_52'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52.auxiliary]
[functions.Gemm_52.auxiliary.onnx]
node_name = "Gemm_52"
node_type = "Gemm"
node_domain = ""
node_args = ["236", "h.0.attn.c_attn.weight", "h.0.attn.c_attn.bias", "237"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_52.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_attn.weight" = ["Gemm_52_reshape_B", "Gemm_52_reshape_B_size"]

[functions.Gemm_52_reshape_B]
name = 'Gemm_52_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52_reshape_B_size]
name = 'Gemm_52_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_532]
name = 'Gemm_532'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532.auxiliary]
[functions.Gemm_532.auxiliary.onnx]
node_name = "Gemm_532"
node_type = "Gemm"
node_domain = ""
node_args = ["786", "h.2.attn.c_attn.weight", "h.2.attn.c_attn.bias", "787"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_532.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_attn.weight" = ["Gemm_532_reshape_B", "Gemm_532_reshape_B_size"]

[functions.Gemm_532_reshape_B]
name = 'Gemm_532_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532_reshape_B_size]
name = 'Gemm_532_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_675]
name = 'Gemm_675'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675.auxiliary]
[functions.Gemm_675.auxiliary.onnx]
node_name = "Gemm_675"
node_type = "Gemm"
node_domain = ""
node_args = ["948", "h.2.attn.c_proj.weight", "h.2.attn.c_proj.bias", "949"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_675.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_proj.weight" = ["Gemm_675_reshape_B", "Gemm_675_reshape_B_size"]

[functions.Gemm_675_reshape_B]
name = 'Gemm_675_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675_reshape_B_size]
name = 'Gemm_675_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_707]
name = 'Gemm_707'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707.auxiliary]
[functions.Gemm_707.auxiliary.onnx]
node_name = "Gemm_707"
node_type = "Gemm"
node_domain = ""
node_args = ["986", "h.2.mlp.c_fc.weight", "h.2.mlp.c_fc.bias", "987"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_707.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_fc.weight" = ["Gemm_707_reshape_B", "Gemm_707_reshape_B_size"]

[functions.Gemm_707_reshape_B]
name = 'Gemm_707_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707_reshape_B_size]
name = 'Gemm_707_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_740]
name = 'Gemm_740'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740.auxiliary]
[functions.Gemm_740.auxiliary.onnx]
node_name = "Gemm_740"
node_type = "Gemm"
node_domain = ""
node_args = ["1023", "h.2.mlp.c_proj.weight", "h.2.mlp.c_proj.bias", "1024"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_740.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_proj.weight" = ["Gemm_740_reshape_B", "Gemm_740_reshape_B_size"]

[functions.Gemm_740_reshape_B]
name = 'Gemm_740_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740_reshape_B_size]
name = 'Gemm_740_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_772]
name = 'Gemm_772'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772.auxiliary]
[functions.Gemm_772.auxiliary.onnx]
node_name = "Gemm_772"
node_type = "Gemm"
node_domain = ""
node_args = ["1061", "h.3.attn.c_attn.weight", "h.3.attn.c_attn.bias", "1062"]
node_arg_shapes = [[1024, 768], [768, 2304], [2304], [1024, 2304]]

[functions.Gemm_772.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_attn.weight" = ["Gemm_772_reshape_B", "Gemm_772_reshape_B_size"]

[functions.Gemm_772_reshape_B]
name = 'Gemm_772_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772_reshape_B_size]
name = 'Gemm_772_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_915]
name = 'Gemm_915'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915.auxiliary]
[functions.Gemm_915.auxiliary.onnx]
node_name = "Gemm_915"
node_type = "Gemm"
node_domain = ""
node_args = ["1223", "h.3.attn.c_proj.weight", "h.3.attn.c_proj.bias", "1224"]
node_arg_shapes = [[1024, 768], [768, 768], [768], [1024, 768]]

[functions.Gemm_915.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_proj.weight" = ["Gemm_915_reshape_B", "Gemm_915_reshape_B_size"]

[functions.Gemm_915_reshape_B]
name = 'Gemm_915_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915_reshape_B_size]
name = 'Gemm_915_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_947]
name = 'Gemm_947'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947.auxiliary]
[functions.Gemm_947.auxiliary.onnx]
node_name = "Gemm_947"
node_type = "Gemm"
node_domain = ""
node_args = ["1261", "h.3.mlp.c_fc.weight", "h.3.mlp.c_fc.bias", "1262"]
node_arg_shapes = [[1024, 768], [768, 3072], [3072], [1024, 3072]]

[functions.Gemm_947.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_fc.weight" = ["Gemm_947_reshape_B", "Gemm_947_reshape_B_size"]

[functions.Gemm_947_reshape_B]
name = 'Gemm_947_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947_reshape_B_size]
name = 'Gemm_947_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_980]
name = 'Gemm_980'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980.auxiliary]
[functions.Gemm_980.auxiliary.onnx]
node_name = "Gemm_980"
node_type = "Gemm"
node_domain = ""
node_args = ["1298", "h.3.mlp.c_proj.weight", "h.3.mlp.c_proj.bias", "1299"]
node_arg_shapes = [[1024, 3072], [3072, 768], [768], [1024, 768]]

[functions.Gemm_980.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_proj.weight" = ["Gemm_980_reshape_B", "Gemm_980_reshape_B_size"]

[functions.Gemm_980_reshape_B]
name = 'Gemm_980_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980_reshape_B_size]
name = 'Gemm_980_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale]
name = 'MatMul_1088_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1088_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1088_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1370", "1394", "1425"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_1114]
name = 'MatMul_1114'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1114.auxiliary]
[functions.MatMul_1114.auxiliary.onnx]
node_name = "MatMul_1114"
node_type = "MatMul"
node_domain = ""
node_args = ["1455", "1418", "1456"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_128_FusedMatMulAndScale]
name = 'MatMul_128_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_128_FusedMatMulAndScale.auxiliary]
[functions.MatMul_128_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_128_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["270", "294", "325"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_1328_FusedMatMulAndScale]
name = 'MatMul_1328_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1328_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1328_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1328_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1645", "1669", "1700"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_1354]
name = 'MatMul_1354'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1354.auxiliary]
[functions.MatMul_1354.auxiliary.onnx]
node_name = "MatMul_1354"
node_type = "MatMul"
node_domain = ""
node_args = ["1730", "1693", "1731"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_154]
name = 'MatMul_154'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_154.auxiliary]
[functions.MatMul_154.auxiliary.onnx]
node_name = "MatMul_154"
node_type = "MatMul"
node_domain = ""
node_args = ["355", "318", "356"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_1568_FusedMatMulAndScale]
name = 'MatMul_1568_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1568_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1568_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1568_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1920", "1944", "1975"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_1594]
name = 'MatMul_1594'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1594.auxiliary]
[functions.MatMul_1594.auxiliary.onnx]
node_name = "MatMul_1594"
node_type = "MatMul"
node_domain = ""
node_args = ["2005", "1968", "2006"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_1808_FusedMatMulAndScale]
name = 'MatMul_1808_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1808_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1808_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1808_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2195", "2219", "2250"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_1834]
name = 'MatMul_1834'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1834.auxiliary]
[functions.MatMul_1834.auxiliary.onnx]
node_name = "MatMul_1834"
node_type = "MatMul"
node_domain = ""
node_args = ["2280", "2243", "2281"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_2048_FusedMatMulAndScale]
name = 'MatMul_2048_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2048_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2048_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2048_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2470", "2494", "2525"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_2074]
name = 'MatMul_2074'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2074.auxiliary]
[functions.MatMul_2074.auxiliary.onnx]
node_name = "MatMul_2074"
node_type = "MatMul"
node_domain = ""
node_args = ["2555", "2518", "2556"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_2288_FusedMatMulAndScale]
name = 'MatMul_2288_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2288_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2288_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2288_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2745", "2769", "2800"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_2314]
name = 'MatMul_2314'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2314.auxiliary]
[functions.MatMul_2314.auxiliary.onnx]
node_name = "MatMul_2314"
node_type = "MatMul"
node_domain = ""
node_args = ["2830", "2793", "2831"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_2528_FusedMatMulAndScale]
name = 'MatMul_2528_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2528_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2528_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2528_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3020", "3044", "3075"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_2554]
name = 'MatMul_2554'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2554.auxiliary]
[functions.MatMul_2554.auxiliary.onnx]
node_name = "MatMul_2554"
node_type = "MatMul"
node_domain = ""
node_args = ["3105", "3068", "3106"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_2768_FusedMatMulAndScale]
name = 'MatMul_2768_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2768_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2768_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2768_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3295", "3319", "3350"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_2794]
name = 'MatMul_2794'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2794.auxiliary]
[functions.MatMul_2794.auxiliary.onnx]
node_name = "MatMul_2794"
node_type = "MatMul"
node_domain = ""
node_args = ["3380", "3343", "3381"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_368_FusedMatMulAndScale]
name = 'MatMul_368_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_368_FusedMatMulAndScale.auxiliary]
[functions.MatMul_368_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_368_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["545", "569", "600"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_394]
name = 'MatMul_394'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_394.auxiliary]
[functions.MatMul_394.auxiliary.onnx]
node_name = "MatMul_394"
node_type = "MatMul"
node_domain = ""
node_args = ["630", "593", "631"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_608_FusedMatMulAndScale]
name = 'MatMul_608_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_608_FusedMatMulAndScale.auxiliary]
[functions.MatMul_608_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_608_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["820", "844", "875"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_634]
name = 'MatMul_634'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_634.auxiliary]
[functions.MatMul_634.auxiliary.onnx]
node_name = "MatMul_634"
node_type = "MatMul"
node_domain = ""
node_args = ["905", "868", "906"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.MatMul_848_FusedMatMulAndScale]
name = 'MatMul_848_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_848_FusedMatMulAndScale.auxiliary]
[functions.MatMul_848_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_848_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1095", "1119", "1150"]
node_arg_shapes = [[1, 12, 1024, 64], [1, 12, 64, 1024], [1, 12, 1024, 1024]]

[functions.MatMul_874]
name = 'MatMul_874'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_874.auxiliary]
[functions.MatMul_874.auxiliary.onnx]
node_name = "MatMul_874"
node_type = "MatMul"
node_domain = ""
node_args = ["1180", "1143", "1181"]
node_arg_shapes = [[1, 12, 1024, 1024], [1, 12, 1024, 64], [1, 12, 1024, 64]]

[functions.mlas_impl_0f922825384ff10e2136eab3e2713eb8]
name = 'mlas_impl_0f922825384ff10e2136eab3e2713eb8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2282b9f23f32c4798feb0abf366bc7af]
name = 'mlas_impl_2282b9f23f32c4798feb0abf366bc7af'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_237e007398186f74eb589a9908f6f34e]
name = 'mlas_impl_237e007398186f74eb589a9908f6f34e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_249dcb38d653c3318fa7549e351100cc]
name = 'mlas_impl_249dcb38d653c3318fa7549e351100cc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_289e59f9de7349c1428fbd8ff2673629]
name = 'mlas_impl_289e59f9de7349c1428fbd8ff2673629'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2ae8f478b5c3eada8577f45553505fdd]
name = 'mlas_impl_2ae8f478b5c3eada8577f45553505fdd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2fda39dd1766c368cf1a5cac93638e63]
name = 'mlas_impl_2fda39dd1766c368cf1a5cac93638e63'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_396579ea5a11faad28c91b880a2b981c]
name = 'mlas_impl_396579ea5a11faad28c91b880a2b981c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_3d170ead70343f8c18e74eee34f9fc25]
name = 'mlas_impl_3d170ead70343f8c18e74eee34f9fc25'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_467ef2936acaa138f482261af5e9478a]
name = 'mlas_impl_467ef2936acaa138f482261af5e9478a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4d4a53bfad24672ea871669719bb2161]
name = 'mlas_impl_4d4a53bfad24672ea871669719bb2161'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5161288a9bc8ffb3c5345d78dd589fb5]
name = 'mlas_impl_5161288a9bc8ffb3c5345d78dd589fb5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5a219f17bc5222e7c010b2d50139d6a4]
name = 'mlas_impl_5a219f17bc5222e7c010b2d50139d6a4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5b4803ff75b342612d9b2740ecc7d24f]
name = 'mlas_impl_5b4803ff75b342612d9b2740ecc7d24f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5ebf224c36c639f6e28877f873b75d5b]
name = 'mlas_impl_5ebf224c36c639f6e28877f873b75d5b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5f31a62578f74aa3cad5de0526b692f9]
name = 'mlas_impl_5f31a62578f74aa3cad5de0526b692f9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_61d50c1ea103b235f74bff0d7f3f6912]
name = 'mlas_impl_61d50c1ea103b235f74bff0d7f3f6912'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_62ac01a3f81f659ba1c082a6d2396302]
name = 'mlas_impl_62ac01a3f81f659ba1c082a6d2396302'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_64116dfa59a3d068d189ddee522db06b]
name = 'mlas_impl_64116dfa59a3d068d189ddee522db06b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_696be989f2dc00d192a63607090e600f]
name = 'mlas_impl_696be989f2dc00d192a63607090e600f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_6a995d573cde1906e1e3adec866def05]
name = 'mlas_impl_6a995d573cde1906e1e3adec866def05'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_774c4129af318d396264b05345e8627e]
name = 'mlas_impl_774c4129af318d396264b05345e8627e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_7cf3376a40f30860504e12d7dc82f84e]
name = 'mlas_impl_7cf3376a40f30860504e12d7dc82f84e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_80641c5886fcd6cf8fe7cb166d7a0153]
name = 'mlas_impl_80641c5886fcd6cf8fe7cb166d7a0153'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_889d192ef9163e107e5163a0c8fdd7bc]
name = 'mlas_impl_889d192ef9163e107e5163a0c8fdd7bc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8b0e78f6f17d7fc86a2f5d766ef7d1db]
name = 'mlas_impl_8b0e78f6f17d7fc86a2f5d766ef7d1db'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8eef25a46ebf5b265c0e9fe3bc80b992]
name = 'mlas_impl_8eef25a46ebf5b265c0e9fe3bc80b992'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_92d8160af04ad83aa53022eb154f19fc]
name = 'mlas_impl_92d8160af04ad83aa53022eb154f19fc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9535aed54ef1eb082a1d5618472b2bdf]
name = 'mlas_impl_9535aed54ef1eb082a1d5618472b2bdf'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_99dda387a47b2aa7fb319cc7d70a12de]
name = 'mlas_impl_99dda387a47b2aa7fb319cc7d70a12de'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9a314bb2e6381725d4b48883763c183c]
name = 'mlas_impl_9a314bb2e6381725d4b48883763c183c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9c3e1dee27e7f66c2166eb1c38a99d93]
name = 'mlas_impl_9c3e1dee27e7f66c2166eb1c38a99d93'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9c51f4da1bc32ccf1343265c55e535cc]
name = 'mlas_impl_9c51f4da1bc32ccf1343265c55e535cc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_a04c8405c66ba3e2f4091c12a472901b]
name = 'mlas_impl_a04c8405c66ba3e2f4091c12a472901b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b091b179b05235eeaa06345d4fa7d5ce]
name = 'mlas_impl_b091b179b05235eeaa06345d4fa7d5ce'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_ba4b5fffb46b0508fbedef71ce4ff537]
name = 'mlas_impl_ba4b5fffb46b0508fbedef71ce4ff537'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_bd1716d3c67076672e5f2c6720d07e66]
name = 'mlas_impl_bd1716d3c67076672e5f2c6720d07e66'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_be660ff4d494b339d98dc973c0b4b292]
name = 'mlas_impl_be660ff4d494b339d98dc973c0b4b292'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_bf4760776390bb22105b53a4cf9c30eb]
name = 'mlas_impl_bf4760776390bb22105b53a4cf9c30eb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c62b362a00cac7457cfc1726a9d42fef]
name = 'mlas_impl_c62b362a00cac7457cfc1726a9d42fef'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c644fefd9d4dbd07be7b29054c5a4a2d]
name = 'mlas_impl_c644fefd9d4dbd07be7b29054c5a4a2d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c9607c6ef010ea98ebde47bdda841358]
name = 'mlas_impl_c9607c6ef010ea98ebde47bdda841358'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_d5725306864b954bfc19e47a448113e0]
name = 'mlas_impl_d5725306864b954bfc19e47a448113e0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_dcaa9e26a23eb42f9eec4ab89d6ccd97]
name = 'mlas_impl_dcaa9e26a23eb42f9eec4ab89d6ccd97'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e378677a08324dbd973edc60d48cb55b]
name = 'mlas_impl_e378677a08324dbd973edc60d48cb55b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e382c886290846bb3425ac868a36a55d]
name = 'mlas_impl_e382c886290846bb3425ac868a36a55d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_efc3ff67b1b8582d72d6ae3e63a39cfd]
name = 'mlas_impl_efc3ff67b1b8582d72d6ae3e63a39cfd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_feb819f2a75186c839739ad3235bddfa]
name = 'mlas_impl_feb819f2a75186c839739ad3235bddfa'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_04b6e8fcb648186a7f2cadf1ff8c6b32]
name = 'nest_impl_04b6e8fcb648186a7f2cadf1ff8c6b32'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_058421169236e74d2f9115aa0076deed]
name = 'nest_impl_058421169236e74d2f9115aa0076deed'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_079ac53ed12e86c10051df5c0a49c094]
name = 'nest_impl_079ac53ed12e86c10051df5c0a49c094'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0946301f4b71de45ac7b6c95490b3ed1]
name = 'nest_impl_0946301f4b71de45ac7b6c95490b3ed1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_09708009d2337649263c19643b0ccf03]
name = 'nest_impl_09708009d2337649263c19643b0ccf03'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0998d371ff6bf29bf078b88ed19eeab5]
name = 'nest_impl_0998d371ff6bf29bf078b88ed19eeab5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0a8e2693d1db4a13c1b42d2b03a4d8a7]
name = 'nest_impl_0a8e2693d1db4a13c1b42d2b03a4d8a7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0ea4471b9745aa43c0901a2cf05fc9ec]
name = 'nest_impl_0ea4471b9745aa43c0901a2cf05fc9ec'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0f3a732190b92877178dcbbac458e148]
name = 'nest_impl_0f3a732190b92877178dcbbac458e148'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_10276cc249c10d622da06aa1c372e718]
name = 'nest_impl_10276cc249c10d622da06aa1c372e718'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_114fcc870d8d3fe8eeda21dd127b89ae]
name = 'nest_impl_114fcc870d8d3fe8eeda21dd127b89ae'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_15077e62d8fb2b12d1917963a0c7d76b]
name = 'nest_impl_15077e62d8fb2b12d1917963a0c7d76b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1d898a0e21edb4c6e7ead580943f14d6]
name = 'nest_impl_1d898a0e21edb4c6e7ead580943f14d6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1d92b1264823ee58f0ec9d143c474389]
name = 'nest_impl_1d92b1264823ee58f0ec9d143c474389'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1f32bbf04da86c29b56d64ca3038fb7a]
name = 'nest_impl_1f32bbf04da86c29b56d64ca3038fb7a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_26238506c18d786b82e5ed94dc549027]
name = 'nest_impl_26238506c18d786b82e5ed94dc549027'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_29085f3bb07d797696bbbab9fc7a0ea6]
name = 'nest_impl_29085f3bb07d797696bbbab9fc7a0ea6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2b39605fc63aaa24594d51c6571007b9]
name = 'nest_impl_2b39605fc63aaa24594d51c6571007b9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2e092929fe654fe3edba1d77aa149ad2]
name = 'nest_impl_2e092929fe654fe3edba1d77aa149ad2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_367ca225be3dbc94b29c769afc72b3c4]
name = 'nest_impl_367ca225be3dbc94b29c769afc72b3c4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_370502e09949f2185eb1802f7c275b15]
name = 'nest_impl_370502e09949f2185eb1802f7c275b15'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_391b9764e1614cd90c4df58928c3ff6c]
name = 'nest_impl_391b9764e1614cd90c4df58928c3ff6c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4bf10483a57006f4291178eecd444e58]
name = 'nest_impl_4bf10483a57006f4291178eecd444e58'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_506fef678d0e1f744a10a28db7c0b22f]
name = 'nest_impl_506fef678d0e1f744a10a28db7c0b22f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_52301a3a11062857a7da1416ebc8dba4]
name = 'nest_impl_52301a3a11062857a7da1416ebc8dba4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_58865fc8ddd1257fc7097da01792ad81]
name = 'nest_impl_58865fc8ddd1257fc7097da01792ad81'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5a67d8df871d56df9493411cfe0e915d]
name = 'nest_impl_5a67d8df871d56df9493411cfe0e915d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5f0f32a49bc65d4ed847b946f3a3af07]
name = 'nest_impl_5f0f32a49bc65d4ed847b946f3a3af07'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5fd48b7c926919e98dff1f1ac10eb041]
name = 'nest_impl_5fd48b7c926919e98dff1f1ac10eb041'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6383f62185d0cb377717df2d9e949a91]
name = 'nest_impl_6383f62185d0cb377717df2d9e949a91'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_68151ce5cfe570e0c00d04947ffef8c9]
name = 'nest_impl_68151ce5cfe570e0c00d04947ffef8c9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6dcfc378da485bc8f926b4ebc9d0e84f]
name = 'nest_impl_6dcfc378da485bc8f926b4ebc9d0e84f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6e67129ecfd503b276b60faa9d652ac4]
name = 'nest_impl_6e67129ecfd503b276b60faa9d652ac4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6f0177da239e321f8da7faa2ea79f0c4]
name = 'nest_impl_6f0177da239e321f8da7faa2ea79f0c4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_72f606e96a8ee85c4a6beaa02b10d86a]
name = 'nest_impl_72f606e96a8ee85c4a6beaa02b10d86a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_757801dfce20fc74ae6460f8453698b2]
name = 'nest_impl_757801dfce20fc74ae6460f8453698b2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7b0551bbb6fed9571b772b3b5a93591a]
name = 'nest_impl_7b0551bbb6fed9571b772b3b5a93591a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7b155f1560963949f3c0985488b21fad]
name = 'nest_impl_7b155f1560963949f3c0985488b21fad'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_878dee3b4c5332e2ee46e66c70ed6c8a]
name = 'nest_impl_878dee3b4c5332e2ee46e66c70ed6c8a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8ba9c70ce56185ef81002648a7d22c90]
name = 'nest_impl_8ba9c70ce56185ef81002648a7d22c90'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8f0e6971b9d4ef29b857b63a3da2aa26]
name = 'nest_impl_8f0e6971b9d4ef29b857b63a3da2aa26'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9015683277b5dc7d6fa17b41bb3d2672]
name = 'nest_impl_9015683277b5dc7d6fa17b41bb3d2672'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9ab5de0a79c13481041f5223aa4e65f2]
name = 'nest_impl_9ab5de0a79c13481041f5223aa4e65f2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9b9bfca933bcaf50347f600ebdd5d267]
name = 'nest_impl_9b9bfca933bcaf50347f600ebdd5d267'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a0dbe6eba2359e6cba5f89fd81af5bd5]
name = 'nest_impl_a0dbe6eba2359e6cba5f89fd81af5bd5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ab5e8e3df1311ef0d689b89b9ad9f0ea]
name = 'nest_impl_ab5e8e3df1311ef0d689b89b9ad9f0ea'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_afdff7adb507b7d510a111e6ad28e7ba]
name = 'nest_impl_afdff7adb507b7d510a111e6ad28e7ba'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b1459074848c3733084204a3cc013e18]
name = 'nest_impl_b1459074848c3733084204a3cc013e18'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b482295a95934e40386fcc0f140d8f88]
name = 'nest_impl_b482295a95934e40386fcc0f140d8f88'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b817b2deddcb0c9d8b37c6666673b4cb]
name = 'nest_impl_b817b2deddcb0c9d8b37c6666673b4cb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bd1a0a7bf08630c52824c435cde1e694]
name = 'nest_impl_bd1a0a7bf08630c52824c435cde1e694'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bf5d511a3cdee9d95e662768acceceac]
name = 'nest_impl_bf5d511a3cdee9d95e662768acceceac'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_cae3f6bb9716be98e842f1003c915586]
name = 'nest_impl_cae3f6bb9716be98e842f1003c915586'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d16d6e81c97fd5dff61da19cf0699647]
name = 'nest_impl_d16d6e81c97fd5dff61da19cf0699647'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d463a8894e907187b31b2c880bef60ae]
name = 'nest_impl_d463a8894e907187b31b2c880bef60ae'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d5ef787b796bdaa01642af35aa00d5e7]
name = 'nest_impl_d5ef787b796bdaa01642af35aa00d5e7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d78d3d748014141253dbbb18bb079ef9]
name = 'nest_impl_d78d3d748014141253dbbb18bb079ef9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e0081f4db6c293bfdf3568254371284d]
name = 'nest_impl_e0081f4db6c293bfdf3568254371284d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e06e7347c91470314888fff66cd181ff]
name = 'nest_impl_e06e7347c91470314888fff66cd181ff'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e235e4f507ec271bb5b8d79b0c1b04bd]
name = 'nest_impl_e235e4f507ec271bb5b8d79b0c1b04bd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e948625102367838eb608f1a8bec641a]
name = 'nest_impl_e948625102367838eb608f1a8bec641a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ea1774c5bba476df97430642431f3e5a]
name = 'nest_impl_ea1774c5bba476df97430642431f3e5a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ec4e6bbd5ad1bc874bfc654bcd359002]
name = 'nest_impl_ec4e6bbd5ad1bc874bfc654bcd359002'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ee77fde76f9f040052286c6938030e27]
name = 'nest_impl_ee77fde76f9f040052286c6938030e27'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f00f92fec3b0c36a852425a425f928dc]
name = 'nest_impl_f00f92fec3b0c36a852425a425f928dc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f0bbbb0a46eb09e44faa7573bfcca20c]
name = 'nest_impl_f0bbbb0a46eb09e44faa7573bfcca20c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f247b6aec163273af1e8803eb0ddc0b9]
name = 'nest_impl_f247b6aec163273af1e8803eb0ddc0b9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f3deec55473d6566b7acc7f09238f175]
name = 'nest_impl_f3deec55473d6566b7acc7f09238f175'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f7904ea9f2b271613d564c59d47a3835]
name = 'nest_impl_f7904ea9f2b271613d564c59d47a3835'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 1024 ], affine_map = [ 786432, 65536, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f87cf74b4701e61e16f1dc5663e25a3f]
name = 'nest_impl_f87cf74b4701e61e16f1dc5663e25a3f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_fa87b2fbf11ebc0746533e0ee50100ef]
name = 'nest_impl_fa87b2fbf11ebc0746533e0ee50100ef'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 1024 ], affine_map = [ 12582912, 1048576, 1024, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 1024, 64 ], affine_map = [ 786432, 65536, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_fce4d606a8ac247f5b431dffa1647312]
name = 'nest_impl_fce4d606a8ac247f5b431dffa1647312'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1024, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[target]
[target.required]
os = "linux"

[target.required.CPU]
architecture = "x86_64"
extensions = ["+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3"]

[dependencies]
link_target = "torch-jit-export.o"
deploy_files = []
dynamic = []

[compiled_with]
compiler = ''
flags = ''
crt = ''
libraries = []

[declaration]
code = '''
#endif // __TOML__
//
// Header for RoboCode library torch-jit-export
//

#include <stdint.h>

#if defined(__cplusplus)
extern "C"
{
#endif // defined(__cplusplus)

//
// Functions
//

void Gemm_52_reshape_B(float*, float*);


int64_t Gemm_52_reshape_B_size();


void nest_impl_d5ef787b796bdaa01642af35aa00d5e7(float*, float*, float*);


void mlas_impl_237e007398186f74eb589a9908f6f34e(float*, float*, float*, float*);


void Gemm_52(float*, float*, float*, float*);


void nest_impl_68151ce5cfe570e0c00d04947ffef8c9(float*, float*, float*);


void MatMul_128_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_2e092929fe654fe3edba1d77aa149ad2(float*, float*, float*);


void MatMul_154(float*, float*, float*);


void Gemm_195_reshape_B(float*, float*);


int64_t Gemm_195_reshape_B_size();


void nest_impl_757801dfce20fc74ae6460f8453698b2(float*, float*, float*);


void mlas_impl_5ebf224c36c639f6e28877f873b75d5b(float*, float*, float*, float*);


void Gemm_195(float*, float*, float*, float*);


void Gemm_227_reshape_B(float*, float*);


int64_t Gemm_227_reshape_B_size();


void nest_impl_bf5d511a3cdee9d95e662768acceceac(float*, float*, float*);


void mlas_impl_b091b179b05235eeaa06345d4fa7d5ce(float*, float*, float*, float*);


void Gemm_227(float*, float*, float*, float*);


void Gemm_260_reshape_B(float*, float*);


int64_t Gemm_260_reshape_B_size();


void nest_impl_058421169236e74d2f9115aa0076deed(float*, float*, float*);


void mlas_impl_889d192ef9163e107e5163a0c8fdd7bc(float*, float*, float*, float*);


void Gemm_260(float*, float*, float*, float*);


void Gemm_292_reshape_B(float*, float*);


int64_t Gemm_292_reshape_B_size();


void nest_impl_391b9764e1614cd90c4df58928c3ff6c(float*, float*, float*);


void mlas_impl_64116dfa59a3d068d189ddee522db06b(float*, float*, float*, float*);


void Gemm_292(float*, float*, float*, float*);


void nest_impl_ee77fde76f9f040052286c6938030e27(float*, float*, float*);


void MatMul_368_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_9b9bfca933bcaf50347f600ebdd5d267(float*, float*, float*);


void MatMul_394(float*, float*, float*);


void Gemm_435_reshape_B(float*, float*);


int64_t Gemm_435_reshape_B_size();


void nest_impl_d463a8894e907187b31b2c880bef60ae(float*, float*, float*);


void mlas_impl_8b0e78f6f17d7fc86a2f5d766ef7d1db(float*, float*, float*, float*);


void Gemm_435(float*, float*, float*, float*);


void Gemm_467_reshape_B(float*, float*);


int64_t Gemm_467_reshape_B_size();


void nest_impl_d78d3d748014141253dbbb18bb079ef9(float*, float*, float*);


void mlas_impl_c644fefd9d4dbd07be7b29054c5a4a2d(float*, float*, float*, float*);


void Gemm_467(float*, float*, float*, float*);


void Gemm_500_reshape_B(float*, float*);


int64_t Gemm_500_reshape_B_size();


void nest_impl_114fcc870d8d3fe8eeda21dd127b89ae(float*, float*, float*);


void mlas_impl_289e59f9de7349c1428fbd8ff2673629(float*, float*, float*, float*);


void Gemm_500(float*, float*, float*, float*);


void Gemm_532_reshape_B(float*, float*);


int64_t Gemm_532_reshape_B_size();


void nest_impl_ec4e6bbd5ad1bc874bfc654bcd359002(float*, float*, float*);


void mlas_impl_62ac01a3f81f659ba1c082a6d2396302(float*, float*, float*, float*);


void Gemm_532(float*, float*, float*, float*);


void nest_impl_6f0177da239e321f8da7faa2ea79f0c4(float*, float*, float*);


void MatMul_608_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_e0081f4db6c293bfdf3568254371284d(float*, float*, float*);


void MatMul_634(float*, float*, float*);


void Gemm_675_reshape_B(float*, float*);


int64_t Gemm_675_reshape_B_size();


void nest_impl_079ac53ed12e86c10051df5c0a49c094(float*, float*, float*);


void mlas_impl_4d4a53bfad24672ea871669719bb2161(float*, float*, float*, float*);


void Gemm_675(float*, float*, float*, float*);


void Gemm_707_reshape_B(float*, float*);


int64_t Gemm_707_reshape_B_size();


void nest_impl_1d92b1264823ee58f0ec9d143c474389(float*, float*, float*);


void mlas_impl_92d8160af04ad83aa53022eb154f19fc(float*, float*, float*, float*);


void Gemm_707(float*, float*, float*, float*);


void Gemm_740_reshape_B(float*, float*);


int64_t Gemm_740_reshape_B_size();


void nest_impl_f87cf74b4701e61e16f1dc5663e25a3f(float*, float*, float*);


void mlas_impl_0f922825384ff10e2136eab3e2713eb8(float*, float*, float*, float*);


void Gemm_740(float*, float*, float*, float*);


void Gemm_772_reshape_B(float*, float*);


int64_t Gemm_772_reshape_B_size();


void nest_impl_52301a3a11062857a7da1416ebc8dba4(float*, float*, float*);


void mlas_impl_5161288a9bc8ffb3c5345d78dd589fb5(float*, float*, float*, float*);


void Gemm_772(float*, float*, float*, float*);


void nest_impl_1f32bbf04da86c29b56d64ca3038fb7a(float*, float*, float*);


void MatMul_848_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_fa87b2fbf11ebc0746533e0ee50100ef(float*, float*, float*);


void MatMul_874(float*, float*, float*);


void Gemm_915_reshape_B(float*, float*);


int64_t Gemm_915_reshape_B_size();


void nest_impl_367ca225be3dbc94b29c769afc72b3c4(float*, float*, float*);


void mlas_impl_dcaa9e26a23eb42f9eec4ab89d6ccd97(float*, float*, float*, float*);


void Gemm_915(float*, float*, float*, float*);


void Gemm_947_reshape_B(float*, float*);


int64_t Gemm_947_reshape_B_size();


void nest_impl_f00f92fec3b0c36a852425a425f928dc(float*, float*, float*);


void mlas_impl_2fda39dd1766c368cf1a5cac93638e63(float*, float*, float*, float*);


void Gemm_947(float*, float*, float*, float*);


void Gemm_980_reshape_B(float*, float*);


int64_t Gemm_980_reshape_B_size();


void nest_impl_afdff7adb507b7d510a111e6ad28e7ba(float*, float*, float*);


void mlas_impl_c9607c6ef010ea98ebde47bdda841358(float*, float*, float*, float*);


void Gemm_980(float*, float*, float*, float*);


void Gemm_1012_reshape_B(float*, float*);


int64_t Gemm_1012_reshape_B_size();


void nest_impl_58865fc8ddd1257fc7097da01792ad81(float*, float*, float*);


void mlas_impl_467ef2936acaa138f482261af5e9478a(float*, float*, float*, float*);


void Gemm_1012(float*, float*, float*, float*);


void nest_impl_6383f62185d0cb377717df2d9e949a91(float*, float*, float*);


void MatMul_1088_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_0946301f4b71de45ac7b6c95490b3ed1(float*, float*, float*);


void MatMul_1114(float*, float*, float*);


void Gemm_1155_reshape_B(float*, float*);


int64_t Gemm_1155_reshape_B_size();


void nest_impl_fce4d606a8ac247f5b431dffa1647312(float*, float*, float*);


void mlas_impl_9c3e1dee27e7f66c2166eb1c38a99d93(float*, float*, float*, float*);


void Gemm_1155(float*, float*, float*, float*);


void Gemm_1187_reshape_B(float*, float*);


int64_t Gemm_1187_reshape_B_size();


void nest_impl_e948625102367838eb608f1a8bec641a(float*, float*, float*);


void mlas_impl_feb819f2a75186c839739ad3235bddfa(float*, float*, float*, float*);


void Gemm_1187(float*, float*, float*, float*);


void Gemm_1220_reshape_B(float*, float*);


int64_t Gemm_1220_reshape_B_size();


void nest_impl_b482295a95934e40386fcc0f140d8f88(float*, float*, float*);


void mlas_impl_a04c8405c66ba3e2f4091c12a472901b(float*, float*, float*, float*);


void Gemm_1220(float*, float*, float*, float*);


void Gemm_1252_reshape_B(float*, float*);


int64_t Gemm_1252_reshape_B_size();


void nest_impl_b1459074848c3733084204a3cc013e18(float*, float*, float*);


void mlas_impl_bf4760776390bb22105b53a4cf9c30eb(float*, float*, float*, float*);


void Gemm_1252(float*, float*, float*, float*);


void nest_impl_9ab5de0a79c13481041f5223aa4e65f2(float*, float*, float*);


void MatMul_1328_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_09708009d2337649263c19643b0ccf03(float*, float*, float*);


void MatMul_1354(float*, float*, float*);


void Gemm_1395_reshape_B(float*, float*);


int64_t Gemm_1395_reshape_B_size();


void nest_impl_0a8e2693d1db4a13c1b42d2b03a4d8a7(float*, float*, float*);


void mlas_impl_3d170ead70343f8c18e74eee34f9fc25(float*, float*, float*, float*);


void Gemm_1395(float*, float*, float*, float*);


void Gemm_1427_reshape_B(float*, float*);


int64_t Gemm_1427_reshape_B_size();


void nest_impl_10276cc249c10d622da06aa1c372e718(float*, float*, float*);


void mlas_impl_5f31a62578f74aa3cad5de0526b692f9(float*, float*, float*, float*);


void Gemm_1427(float*, float*, float*, float*);


void Gemm_1460_reshape_B(float*, float*);


int64_t Gemm_1460_reshape_B_size();


void nest_impl_15077e62d8fb2b12d1917963a0c7d76b(float*, float*, float*);


void mlas_impl_9535aed54ef1eb082a1d5618472b2bdf(float*, float*, float*, float*);


void Gemm_1460(float*, float*, float*, float*);


void Gemm_1492_reshape_B(float*, float*);


int64_t Gemm_1492_reshape_B_size();


void nest_impl_e06e7347c91470314888fff66cd181ff(float*, float*, float*);


void mlas_impl_6a995d573cde1906e1e3adec866def05(float*, float*, float*, float*);


void Gemm_1492(float*, float*, float*, float*);


void nest_impl_f0bbbb0a46eb09e44faa7573bfcca20c(float*, float*, float*);


void MatMul_1568_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_f3deec55473d6566b7acc7f09238f175(float*, float*, float*);


void MatMul_1594(float*, float*, float*);


void Gemm_1635_reshape_B(float*, float*);


int64_t Gemm_1635_reshape_B_size();


void nest_impl_878dee3b4c5332e2ee46e66c70ed6c8a(float*, float*, float*);


void mlas_impl_d5725306864b954bfc19e47a448113e0(float*, float*, float*, float*);


void Gemm_1635(float*, float*, float*, float*);


void Gemm_1667_reshape_B(float*, float*);


int64_t Gemm_1667_reshape_B_size();


void nest_impl_ea1774c5bba476df97430642431f3e5a(float*, float*, float*);


void mlas_impl_bd1716d3c67076672e5f2c6720d07e66(float*, float*, float*, float*);


void Gemm_1667(float*, float*, float*, float*);


void Gemm_1700_reshape_B(float*, float*);


int64_t Gemm_1700_reshape_B_size();


void nest_impl_0f3a732190b92877178dcbbac458e148(float*, float*, float*);


void mlas_impl_2282b9f23f32c4798feb0abf366bc7af(float*, float*, float*, float*);


void Gemm_1700(float*, float*, float*, float*);


void Gemm_1732_reshape_B(float*, float*);


int64_t Gemm_1732_reshape_B_size();


void nest_impl_5a67d8df871d56df9493411cfe0e915d(float*, float*, float*);


void mlas_impl_c62b362a00cac7457cfc1726a9d42fef(float*, float*, float*, float*);


void Gemm_1732(float*, float*, float*, float*);


void nest_impl_ab5e8e3df1311ef0d689b89b9ad9f0ea(float*, float*, float*);


void MatMul_1808_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_e235e4f507ec271bb5b8d79b0c1b04bd(float*, float*, float*);


void MatMul_1834(float*, float*, float*);


void Gemm_1875_reshape_B(float*, float*);


int64_t Gemm_1875_reshape_B_size();


void nest_impl_1d898a0e21edb4c6e7ead580943f14d6(float*, float*, float*);


void mlas_impl_9a314bb2e6381725d4b48883763c183c(float*, float*, float*, float*);


void Gemm_1875(float*, float*, float*, float*);


void Gemm_1907_reshape_B(float*, float*);


int64_t Gemm_1907_reshape_B_size();


void nest_impl_5fd48b7c926919e98dff1f1ac10eb041(float*, float*, float*);


void mlas_impl_99dda387a47b2aa7fb319cc7d70a12de(float*, float*, float*, float*);


void Gemm_1907(float*, float*, float*, float*);


void Gemm_1940_reshape_B(float*, float*);


int64_t Gemm_1940_reshape_B_size();


void nest_impl_d16d6e81c97fd5dff61da19cf0699647(float*, float*, float*);


void mlas_impl_2ae8f478b5c3eada8577f45553505fdd(float*, float*, float*, float*);


void Gemm_1940(float*, float*, float*, float*);


void Gemm_1972_reshape_B(float*, float*);


int64_t Gemm_1972_reshape_B_size();


void nest_impl_29085f3bb07d797696bbbab9fc7a0ea6(float*, float*, float*);


void mlas_impl_7cf3376a40f30860504e12d7dc82f84e(float*, float*, float*, float*);


void Gemm_1972(float*, float*, float*, float*);


void nest_impl_370502e09949f2185eb1802f7c275b15(float*, float*, float*);


void MatMul_2048_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_04b6e8fcb648186a7f2cadf1ff8c6b32(float*, float*, float*);


void MatMul_2074(float*, float*, float*);


void Gemm_2115_reshape_B(float*, float*);


int64_t Gemm_2115_reshape_B_size();


void nest_impl_506fef678d0e1f744a10a28db7c0b22f(float*, float*, float*);


void mlas_impl_e382c886290846bb3425ac868a36a55d(float*, float*, float*, float*);


void Gemm_2115(float*, float*, float*, float*);


void Gemm_2147_reshape_B(float*, float*);


int64_t Gemm_2147_reshape_B_size();


void nest_impl_5f0f32a49bc65d4ed847b946f3a3af07(float*, float*, float*);


void mlas_impl_396579ea5a11faad28c91b880a2b981c(float*, float*, float*, float*);


void Gemm_2147(float*, float*, float*, float*);


void Gemm_2180_reshape_B(float*, float*);


int64_t Gemm_2180_reshape_B_size();


void nest_impl_7b155f1560963949f3c0985488b21fad(float*, float*, float*);


void mlas_impl_5b4803ff75b342612d9b2740ecc7d24f(float*, float*, float*, float*);


void Gemm_2180(float*, float*, float*, float*);


void Gemm_2212_reshape_B(float*, float*);


int64_t Gemm_2212_reshape_B_size();


void nest_impl_6e67129ecfd503b276b60faa9d652ac4(float*, float*, float*);


void mlas_impl_5a219f17bc5222e7c010b2d50139d6a4(float*, float*, float*, float*);


void Gemm_2212(float*, float*, float*, float*);


void nest_impl_bd1a0a7bf08630c52824c435cde1e694(float*, float*, float*);


void MatMul_2288_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_b817b2deddcb0c9d8b37c6666673b4cb(float*, float*, float*);


void MatMul_2314(float*, float*, float*);


void Gemm_2355_reshape_B(float*, float*);


int64_t Gemm_2355_reshape_B_size();


void nest_impl_cae3f6bb9716be98e842f1003c915586(float*, float*, float*);


void mlas_impl_e378677a08324dbd973edc60d48cb55b(float*, float*, float*, float*);


void Gemm_2355(float*, float*, float*, float*);


void Gemm_2387_reshape_B(float*, float*);


int64_t Gemm_2387_reshape_B_size();


void nest_impl_8f0e6971b9d4ef29b857b63a3da2aa26(float*, float*, float*);


void mlas_impl_61d50c1ea103b235f74bff0d7f3f6912(float*, float*, float*, float*);


void Gemm_2387(float*, float*, float*, float*);


void Gemm_2420_reshape_B(float*, float*);


int64_t Gemm_2420_reshape_B_size();


void nest_impl_0998d371ff6bf29bf078b88ed19eeab5(float*, float*, float*);


void mlas_impl_774c4129af318d396264b05345e8627e(float*, float*, float*, float*);


void Gemm_2420(float*, float*, float*, float*);


void Gemm_2452_reshape_B(float*, float*);


int64_t Gemm_2452_reshape_B_size();


void nest_impl_26238506c18d786b82e5ed94dc549027(float*, float*, float*);


void mlas_impl_249dcb38d653c3318fa7549e351100cc(float*, float*, float*, float*);


void Gemm_2452(float*, float*, float*, float*);


void nest_impl_2b39605fc63aaa24594d51c6571007b9(float*, float*, float*);


void MatMul_2528_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_72f606e96a8ee85c4a6beaa02b10d86a(float*, float*, float*);


void MatMul_2554(float*, float*, float*);


void Gemm_2595_reshape_B(float*, float*);


int64_t Gemm_2595_reshape_B_size();


void nest_impl_7b0551bbb6fed9571b772b3b5a93591a(float*, float*, float*);


void mlas_impl_efc3ff67b1b8582d72d6ae3e63a39cfd(float*, float*, float*, float*);


void Gemm_2595(float*, float*, float*, float*);


void Gemm_2627_reshape_B(float*, float*);


int64_t Gemm_2627_reshape_B_size();


void nest_impl_6dcfc378da485bc8f926b4ebc9d0e84f(float*, float*, float*);


void mlas_impl_80641c5886fcd6cf8fe7cb166d7a0153(float*, float*, float*, float*);


void Gemm_2627(float*, float*, float*, float*);


void Gemm_2660_reshape_B(float*, float*);


int64_t Gemm_2660_reshape_B_size();


void nest_impl_a0dbe6eba2359e6cba5f89fd81af5bd5(float*, float*, float*);


void mlas_impl_ba4b5fffb46b0508fbedef71ce4ff537(float*, float*, float*, float*);


void Gemm_2660(float*, float*, float*, float*);


void Gemm_2692_reshape_B(float*, float*);


int64_t Gemm_2692_reshape_B_size();


void nest_impl_4bf10483a57006f4291178eecd444e58(float*, float*, float*);


void mlas_impl_696be989f2dc00d192a63607090e600f(float*, float*, float*, float*);


void Gemm_2692(float*, float*, float*, float*);


void nest_impl_f7904ea9f2b271613d564c59d47a3835(float*, float*, float*);


void MatMul_2768_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_0ea4471b9745aa43c0901a2cf05fc9ec(float*, float*, float*);


void MatMul_2794(float*, float*, float*);


void Gemm_2835_reshape_B(float*, float*);


int64_t Gemm_2835_reshape_B_size();


void nest_impl_8ba9c70ce56185ef81002648a7d22c90(float*, float*, float*);


void mlas_impl_9c51f4da1bc32ccf1343265c55e535cc(float*, float*, float*, float*);


void Gemm_2835(float*, float*, float*, float*);


void Gemm_2867_reshape_B(float*, float*);


int64_t Gemm_2867_reshape_B_size();


void nest_impl_9015683277b5dc7d6fa17b41bb3d2672(float*, float*, float*);


void mlas_impl_8eef25a46ebf5b265c0e9fe3bc80b992(float*, float*, float*, float*);


void Gemm_2867(float*, float*, float*, float*);


void Gemm_2900_reshape_B(float*, float*);


int64_t Gemm_2900_reshape_B_size();


void nest_impl_f247b6aec163273af1e8803eb0ddc0b9(float*, float*, float*);


void mlas_impl_be660ff4d494b339d98dc973c0b4b292(float*, float*, float*, float*);


void Gemm_2900(float*, float*, float*, float*);


#if defined(__cplusplus)
} // extern "C"
#endif // defined(__cplusplus)

#ifdef __TOML__
'''

#endif // TOML

#endif // __torch-jit-export__