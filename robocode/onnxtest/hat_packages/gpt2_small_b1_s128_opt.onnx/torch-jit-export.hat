
#ifndef __torch-jit-export__
#define __torch-jit-export__

#ifdef TOML
[description]
comment = 'torch-jit-export'
author = ''
version = ''
license_url = ''

[functions]
[functions.Gemm_1012]
name = 'Gemm_1012'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012.auxiliary]
[functions.Gemm_1012.auxiliary.onnx]
node_name = "Gemm_1012"
node_type = "Gemm"
node_domain = ""
node_args = ["1336", "h.4.attn.c_attn.weight", "h.4.attn.c_attn.bias", "1337"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_1012.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_attn.weight" = ["Gemm_1012_reshape_B", "Gemm_1012_reshape_B_size"]

[functions.Gemm_1012_reshape_B]
name = 'Gemm_1012_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012_reshape_B_size]
name = 'Gemm_1012_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1155]
name = 'Gemm_1155'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155.auxiliary]
[functions.Gemm_1155.auxiliary.onnx]
node_name = "Gemm_1155"
node_type = "Gemm"
node_domain = ""
node_args = ["1498", "h.4.attn.c_proj.weight", "h.4.attn.c_proj.bias", "1499"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_1155.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_proj.weight" = ["Gemm_1155_reshape_B", "Gemm_1155_reshape_B_size"]

[functions.Gemm_1155_reshape_B]
name = 'Gemm_1155_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155_reshape_B_size]
name = 'Gemm_1155_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1187]
name = 'Gemm_1187'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187.auxiliary]
[functions.Gemm_1187.auxiliary.onnx]
node_name = "Gemm_1187"
node_type = "Gemm"
node_domain = ""
node_args = ["1536", "h.4.mlp.c_fc.weight", "h.4.mlp.c_fc.bias", "1537"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_1187.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_fc.weight" = ["Gemm_1187_reshape_B", "Gemm_1187_reshape_B_size"]

[functions.Gemm_1187_reshape_B]
name = 'Gemm_1187_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187_reshape_B_size]
name = 'Gemm_1187_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1220]
name = 'Gemm_1220'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220.auxiliary]
[functions.Gemm_1220.auxiliary.onnx]
node_name = "Gemm_1220"
node_type = "Gemm"
node_domain = ""
node_args = ["1573", "h.4.mlp.c_proj.weight", "h.4.mlp.c_proj.bias", "1574"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_1220.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_proj.weight" = ["Gemm_1220_reshape_B", "Gemm_1220_reshape_B_size"]

[functions.Gemm_1220_reshape_B]
name = 'Gemm_1220_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220_reshape_B_size]
name = 'Gemm_1220_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1252]
name = 'Gemm_1252'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252.auxiliary]
[functions.Gemm_1252.auxiliary.onnx]
node_name = "Gemm_1252"
node_type = "Gemm"
node_domain = ""
node_args = ["1611", "h.5.attn.c_attn.weight", "h.5.attn.c_attn.bias", "1612"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_1252.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_attn.weight" = ["Gemm_1252_reshape_B", "Gemm_1252_reshape_B_size"]

[functions.Gemm_1252_reshape_B]
name = 'Gemm_1252_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252_reshape_B_size]
name = 'Gemm_1252_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1395]
name = 'Gemm_1395'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395.auxiliary]
[functions.Gemm_1395.auxiliary.onnx]
node_name = "Gemm_1395"
node_type = "Gemm"
node_domain = ""
node_args = ["1773", "h.5.attn.c_proj.weight", "h.5.attn.c_proj.bias", "1774"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_1395.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_proj.weight" = ["Gemm_1395_reshape_B", "Gemm_1395_reshape_B_size"]

[functions.Gemm_1395_reshape_B]
name = 'Gemm_1395_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395_reshape_B_size]
name = 'Gemm_1395_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1427]
name = 'Gemm_1427'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427.auxiliary]
[functions.Gemm_1427.auxiliary.onnx]
node_name = "Gemm_1427"
node_type = "Gemm"
node_domain = ""
node_args = ["1811", "h.5.mlp.c_fc.weight", "h.5.mlp.c_fc.bias", "1812"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_1427.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_fc.weight" = ["Gemm_1427_reshape_B", "Gemm_1427_reshape_B_size"]

[functions.Gemm_1427_reshape_B]
name = 'Gemm_1427_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427_reshape_B_size]
name = 'Gemm_1427_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1460]
name = 'Gemm_1460'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460.auxiliary]
[functions.Gemm_1460.auxiliary.onnx]
node_name = "Gemm_1460"
node_type = "Gemm"
node_domain = ""
node_args = ["1848", "h.5.mlp.c_proj.weight", "h.5.mlp.c_proj.bias", "1849"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_1460.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_proj.weight" = ["Gemm_1460_reshape_B", "Gemm_1460_reshape_B_size"]

[functions.Gemm_1460_reshape_B]
name = 'Gemm_1460_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460_reshape_B_size]
name = 'Gemm_1460_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1492]
name = 'Gemm_1492'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492.auxiliary]
[functions.Gemm_1492.auxiliary.onnx]
node_name = "Gemm_1492"
node_type = "Gemm"
node_domain = ""
node_args = ["1886", "h.6.attn.c_attn.weight", "h.6.attn.c_attn.bias", "1887"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_1492.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_attn.weight" = ["Gemm_1492_reshape_B", "Gemm_1492_reshape_B_size"]

[functions.Gemm_1492_reshape_B]
name = 'Gemm_1492_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492_reshape_B_size]
name = 'Gemm_1492_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1635]
name = 'Gemm_1635'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635.auxiliary]
[functions.Gemm_1635.auxiliary.onnx]
node_name = "Gemm_1635"
node_type = "Gemm"
node_domain = ""
node_args = ["2048", "h.6.attn.c_proj.weight", "h.6.attn.c_proj.bias", "2049"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_1635.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_proj.weight" = ["Gemm_1635_reshape_B", "Gemm_1635_reshape_B_size"]

[functions.Gemm_1635_reshape_B]
name = 'Gemm_1635_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635_reshape_B_size]
name = 'Gemm_1635_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1667]
name = 'Gemm_1667'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667.auxiliary]
[functions.Gemm_1667.auxiliary.onnx]
node_name = "Gemm_1667"
node_type = "Gemm"
node_domain = ""
node_args = ["2086", "h.6.mlp.c_fc.weight", "h.6.mlp.c_fc.bias", "2087"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_1667.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_fc.weight" = ["Gemm_1667_reshape_B", "Gemm_1667_reshape_B_size"]

[functions.Gemm_1667_reshape_B]
name = 'Gemm_1667_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667_reshape_B_size]
name = 'Gemm_1667_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1700]
name = 'Gemm_1700'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700.auxiliary]
[functions.Gemm_1700.auxiliary.onnx]
node_name = "Gemm_1700"
node_type = "Gemm"
node_domain = ""
node_args = ["2123", "h.6.mlp.c_proj.weight", "h.6.mlp.c_proj.bias", "2124"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_1700.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_proj.weight" = ["Gemm_1700_reshape_B", "Gemm_1700_reshape_B_size"]

[functions.Gemm_1700_reshape_B]
name = 'Gemm_1700_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700_reshape_B_size]
name = 'Gemm_1700_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1732]
name = 'Gemm_1732'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732.auxiliary]
[functions.Gemm_1732.auxiliary.onnx]
node_name = "Gemm_1732"
node_type = "Gemm"
node_domain = ""
node_args = ["2161", "h.7.attn.c_attn.weight", "h.7.attn.c_attn.bias", "2162"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_1732.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_attn.weight" = ["Gemm_1732_reshape_B", "Gemm_1732_reshape_B_size"]

[functions.Gemm_1732_reshape_B]
name = 'Gemm_1732_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732_reshape_B_size]
name = 'Gemm_1732_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1875]
name = 'Gemm_1875'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875.auxiliary]
[functions.Gemm_1875.auxiliary.onnx]
node_name = "Gemm_1875"
node_type = "Gemm"
node_domain = ""
node_args = ["2323", "h.7.attn.c_proj.weight", "h.7.attn.c_proj.bias", "2324"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_1875.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_proj.weight" = ["Gemm_1875_reshape_B", "Gemm_1875_reshape_B_size"]

[functions.Gemm_1875_reshape_B]
name = 'Gemm_1875_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875_reshape_B_size]
name = 'Gemm_1875_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1907]
name = 'Gemm_1907'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907.auxiliary]
[functions.Gemm_1907.auxiliary.onnx]
node_name = "Gemm_1907"
node_type = "Gemm"
node_domain = ""
node_args = ["2361", "h.7.mlp.c_fc.weight", "h.7.mlp.c_fc.bias", "2362"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_1907.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_fc.weight" = ["Gemm_1907_reshape_B", "Gemm_1907_reshape_B_size"]

[functions.Gemm_1907_reshape_B]
name = 'Gemm_1907_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907_reshape_B_size]
name = 'Gemm_1907_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1940]
name = 'Gemm_1940'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940.auxiliary]
[functions.Gemm_1940.auxiliary.onnx]
node_name = "Gemm_1940"
node_type = "Gemm"
node_domain = ""
node_args = ["2398", "h.7.mlp.c_proj.weight", "h.7.mlp.c_proj.bias", "2399"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_1940.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_proj.weight" = ["Gemm_1940_reshape_B", "Gemm_1940_reshape_B_size"]

[functions.Gemm_1940_reshape_B]
name = 'Gemm_1940_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940_reshape_B_size]
name = 'Gemm_1940_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_195]
name = 'Gemm_195'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195.auxiliary]
[functions.Gemm_195.auxiliary.onnx]
node_name = "Gemm_195"
node_type = "Gemm"
node_domain = ""
node_args = ["398", "h.0.attn.c_proj.weight", "h.0.attn.c_proj.bias", "399"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_195.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_proj.weight" = ["Gemm_195_reshape_B", "Gemm_195_reshape_B_size"]

[functions.Gemm_195_reshape_B]
name = 'Gemm_195_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195_reshape_B_size]
name = 'Gemm_195_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1972]
name = 'Gemm_1972'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972.auxiliary]
[functions.Gemm_1972.auxiliary.onnx]
node_name = "Gemm_1972"
node_type = "Gemm"
node_domain = ""
node_args = ["2436", "h.8.attn.c_attn.weight", "h.8.attn.c_attn.bias", "2437"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_1972.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_attn.weight" = ["Gemm_1972_reshape_B", "Gemm_1972_reshape_B_size"]

[functions.Gemm_1972_reshape_B]
name = 'Gemm_1972_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972_reshape_B_size]
name = 'Gemm_1972_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2115]
name = 'Gemm_2115'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115.auxiliary]
[functions.Gemm_2115.auxiliary.onnx]
node_name = "Gemm_2115"
node_type = "Gemm"
node_domain = ""
node_args = ["2598", "h.8.attn.c_proj.weight", "h.8.attn.c_proj.bias", "2599"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_2115.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_proj.weight" = ["Gemm_2115_reshape_B", "Gemm_2115_reshape_B_size"]

[functions.Gemm_2115_reshape_B]
name = 'Gemm_2115_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115_reshape_B_size]
name = 'Gemm_2115_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2147]
name = 'Gemm_2147'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147.auxiliary]
[functions.Gemm_2147.auxiliary.onnx]
node_name = "Gemm_2147"
node_type = "Gemm"
node_domain = ""
node_args = ["2636", "h.8.mlp.c_fc.weight", "h.8.mlp.c_fc.bias", "2637"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_2147.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_fc.weight" = ["Gemm_2147_reshape_B", "Gemm_2147_reshape_B_size"]

[functions.Gemm_2147_reshape_B]
name = 'Gemm_2147_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147_reshape_B_size]
name = 'Gemm_2147_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2180]
name = 'Gemm_2180'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180.auxiliary]
[functions.Gemm_2180.auxiliary.onnx]
node_name = "Gemm_2180"
node_type = "Gemm"
node_domain = ""
node_args = ["2673", "h.8.mlp.c_proj.weight", "h.8.mlp.c_proj.bias", "2674"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_2180.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_proj.weight" = ["Gemm_2180_reshape_B", "Gemm_2180_reshape_B_size"]

[functions.Gemm_2180_reshape_B]
name = 'Gemm_2180_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180_reshape_B_size]
name = 'Gemm_2180_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2212]
name = 'Gemm_2212'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212.auxiliary]
[functions.Gemm_2212.auxiliary.onnx]
node_name = "Gemm_2212"
node_type = "Gemm"
node_domain = ""
node_args = ["2711", "h.9.attn.c_attn.weight", "h.9.attn.c_attn.bias", "2712"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_2212.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_attn.weight" = ["Gemm_2212_reshape_B", "Gemm_2212_reshape_B_size"]

[functions.Gemm_2212_reshape_B]
name = 'Gemm_2212_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212_reshape_B_size]
name = 'Gemm_2212_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_227]
name = 'Gemm_227'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227.auxiliary]
[functions.Gemm_227.auxiliary.onnx]
node_name = "Gemm_227"
node_type = "Gemm"
node_domain = ""
node_args = ["436", "h.0.mlp.c_fc.weight", "h.0.mlp.c_fc.bias", "437"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_227.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_fc.weight" = ["Gemm_227_reshape_B", "Gemm_227_reshape_B_size"]

[functions.Gemm_227_reshape_B]
name = 'Gemm_227_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227_reshape_B_size]
name = 'Gemm_227_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2355]
name = 'Gemm_2355'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355.auxiliary]
[functions.Gemm_2355.auxiliary.onnx]
node_name = "Gemm_2355"
node_type = "Gemm"
node_domain = ""
node_args = ["2873", "h.9.attn.c_proj.weight", "h.9.attn.c_proj.bias", "2874"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_2355.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_proj.weight" = ["Gemm_2355_reshape_B", "Gemm_2355_reshape_B_size"]

[functions.Gemm_2355_reshape_B]
name = 'Gemm_2355_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355_reshape_B_size]
name = 'Gemm_2355_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2387]
name = 'Gemm_2387'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387.auxiliary]
[functions.Gemm_2387.auxiliary.onnx]
node_name = "Gemm_2387"
node_type = "Gemm"
node_domain = ""
node_args = ["2911", "h.9.mlp.c_fc.weight", "h.9.mlp.c_fc.bias", "2912"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_2387.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_fc.weight" = ["Gemm_2387_reshape_B", "Gemm_2387_reshape_B_size"]

[functions.Gemm_2387_reshape_B]
name = 'Gemm_2387_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387_reshape_B_size]
name = 'Gemm_2387_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2420]
name = 'Gemm_2420'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420.auxiliary]
[functions.Gemm_2420.auxiliary.onnx]
node_name = "Gemm_2420"
node_type = "Gemm"
node_domain = ""
node_args = ["2948", "h.9.mlp.c_proj.weight", "h.9.mlp.c_proj.bias", "2949"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_2420.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_proj.weight" = ["Gemm_2420_reshape_B", "Gemm_2420_reshape_B_size"]

[functions.Gemm_2420_reshape_B]
name = 'Gemm_2420_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420_reshape_B_size]
name = 'Gemm_2420_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2452]
name = 'Gemm_2452'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452.auxiliary]
[functions.Gemm_2452.auxiliary.onnx]
node_name = "Gemm_2452"
node_type = "Gemm"
node_domain = ""
node_args = ["2986", "h.10.attn.c_attn.weight", "h.10.attn.c_attn.bias", "2987"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_2452.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_attn.weight" = ["Gemm_2452_reshape_B", "Gemm_2452_reshape_B_size"]

[functions.Gemm_2452_reshape_B]
name = 'Gemm_2452_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452_reshape_B_size]
name = 'Gemm_2452_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2595]
name = 'Gemm_2595'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595.auxiliary]
[functions.Gemm_2595.auxiliary.onnx]
node_name = "Gemm_2595"
node_type = "Gemm"
node_domain = ""
node_args = ["3148", "h.10.attn.c_proj.weight", "h.10.attn.c_proj.bias", "3149"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_2595.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_proj.weight" = ["Gemm_2595_reshape_B", "Gemm_2595_reshape_B_size"]

[functions.Gemm_2595_reshape_B]
name = 'Gemm_2595_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595_reshape_B_size]
name = 'Gemm_2595_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_260]
name = 'Gemm_260'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260.auxiliary]
[functions.Gemm_260.auxiliary.onnx]
node_name = "Gemm_260"
node_type = "Gemm"
node_domain = ""
node_args = ["473", "h.0.mlp.c_proj.weight", "h.0.mlp.c_proj.bias", "474"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_260.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_proj.weight" = ["Gemm_260_reshape_B", "Gemm_260_reshape_B_size"]

[functions.Gemm_260_reshape_B]
name = 'Gemm_260_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260_reshape_B_size]
name = 'Gemm_260_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2627]
name = 'Gemm_2627'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627.auxiliary]
[functions.Gemm_2627.auxiliary.onnx]
node_name = "Gemm_2627"
node_type = "Gemm"
node_domain = ""
node_args = ["3186", "h.10.mlp.c_fc.weight", "h.10.mlp.c_fc.bias", "3187"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_2627.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_fc.weight" = ["Gemm_2627_reshape_B", "Gemm_2627_reshape_B_size"]

[functions.Gemm_2627_reshape_B]
name = 'Gemm_2627_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627_reshape_B_size]
name = 'Gemm_2627_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2660]
name = 'Gemm_2660'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660.auxiliary]
[functions.Gemm_2660.auxiliary.onnx]
node_name = "Gemm_2660"
node_type = "Gemm"
node_domain = ""
node_args = ["3223", "h.10.mlp.c_proj.weight", "h.10.mlp.c_proj.bias", "3224"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_2660.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_proj.weight" = ["Gemm_2660_reshape_B", "Gemm_2660_reshape_B_size"]

[functions.Gemm_2660_reshape_B]
name = 'Gemm_2660_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660_reshape_B_size]
name = 'Gemm_2660_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2692]
name = 'Gemm_2692'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692.auxiliary]
[functions.Gemm_2692.auxiliary.onnx]
node_name = "Gemm_2692"
node_type = "Gemm"
node_domain = ""
node_args = ["3261", "h.11.attn.c_attn.weight", "h.11.attn.c_attn.bias", "3262"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_2692.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_attn.weight" = ["Gemm_2692_reshape_B", "Gemm_2692_reshape_B_size"]

[functions.Gemm_2692_reshape_B]
name = 'Gemm_2692_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692_reshape_B_size]
name = 'Gemm_2692_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2835]
name = 'Gemm_2835'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835.auxiliary]
[functions.Gemm_2835.auxiliary.onnx]
node_name = "Gemm_2835"
node_type = "Gemm"
node_domain = ""
node_args = ["3423", "h.11.attn.c_proj.weight", "h.11.attn.c_proj.bias", "3424"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_2835.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_proj.weight" = ["Gemm_2835_reshape_B", "Gemm_2835_reshape_B_size"]

[functions.Gemm_2835_reshape_B]
name = 'Gemm_2835_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835_reshape_B_size]
name = 'Gemm_2835_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2867]
name = 'Gemm_2867'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867.auxiliary]
[functions.Gemm_2867.auxiliary.onnx]
node_name = "Gemm_2867"
node_type = "Gemm"
node_domain = ""
node_args = ["3461", "h.11.mlp.c_fc.weight", "h.11.mlp.c_fc.bias", "3462"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_2867.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_fc.weight" = ["Gemm_2867_reshape_B", "Gemm_2867_reshape_B_size"]

[functions.Gemm_2867_reshape_B]
name = 'Gemm_2867_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867_reshape_B_size]
name = 'Gemm_2867_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2900]
name = 'Gemm_2900'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900.auxiliary]
[functions.Gemm_2900.auxiliary.onnx]
node_name = "Gemm_2900"
node_type = "Gemm"
node_domain = ""
node_args = ["3498", "h.11.mlp.c_proj.weight", "h.11.mlp.c_proj.bias", "3499"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_2900.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_proj.weight" = ["Gemm_2900_reshape_B", "Gemm_2900_reshape_B_size"]

[functions.Gemm_2900_reshape_B]
name = 'Gemm_2900_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900_reshape_B_size]
name = 'Gemm_2900_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_292]
name = 'Gemm_292'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292.auxiliary]
[functions.Gemm_292.auxiliary.onnx]
node_name = "Gemm_292"
node_type = "Gemm"
node_domain = ""
node_args = ["511", "h.1.attn.c_attn.weight", "h.1.attn.c_attn.bias", "512"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_292.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_attn.weight" = ["Gemm_292_reshape_B", "Gemm_292_reshape_B_size"]

[functions.Gemm_292_reshape_B]
name = 'Gemm_292_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292_reshape_B_size]
name = 'Gemm_292_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_435]
name = 'Gemm_435'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435.auxiliary]
[functions.Gemm_435.auxiliary.onnx]
node_name = "Gemm_435"
node_type = "Gemm"
node_domain = ""
node_args = ["673", "h.1.attn.c_proj.weight", "h.1.attn.c_proj.bias", "674"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_435.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_proj.weight" = ["Gemm_435_reshape_B", "Gemm_435_reshape_B_size"]

[functions.Gemm_435_reshape_B]
name = 'Gemm_435_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435_reshape_B_size]
name = 'Gemm_435_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_467]
name = 'Gemm_467'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467.auxiliary]
[functions.Gemm_467.auxiliary.onnx]
node_name = "Gemm_467"
node_type = "Gemm"
node_domain = ""
node_args = ["711", "h.1.mlp.c_fc.weight", "h.1.mlp.c_fc.bias", "712"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_467.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_fc.weight" = ["Gemm_467_reshape_B", "Gemm_467_reshape_B_size"]

[functions.Gemm_467_reshape_B]
name = 'Gemm_467_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467_reshape_B_size]
name = 'Gemm_467_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_500]
name = 'Gemm_500'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500.auxiliary]
[functions.Gemm_500.auxiliary.onnx]
node_name = "Gemm_500"
node_type = "Gemm"
node_domain = ""
node_args = ["748", "h.1.mlp.c_proj.weight", "h.1.mlp.c_proj.bias", "749"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_500.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_proj.weight" = ["Gemm_500_reshape_B", "Gemm_500_reshape_B_size"]

[functions.Gemm_500_reshape_B]
name = 'Gemm_500_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500_reshape_B_size]
name = 'Gemm_500_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_52]
name = 'Gemm_52'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52.auxiliary]
[functions.Gemm_52.auxiliary.onnx]
node_name = "Gemm_52"
node_type = "Gemm"
node_domain = ""
node_args = ["236", "h.0.attn.c_attn.weight", "h.0.attn.c_attn.bias", "237"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_52.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_attn.weight" = ["Gemm_52_reshape_B", "Gemm_52_reshape_B_size"]

[functions.Gemm_52_reshape_B]
name = 'Gemm_52_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52_reshape_B_size]
name = 'Gemm_52_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_532]
name = 'Gemm_532'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532.auxiliary]
[functions.Gemm_532.auxiliary.onnx]
node_name = "Gemm_532"
node_type = "Gemm"
node_domain = ""
node_args = ["786", "h.2.attn.c_attn.weight", "h.2.attn.c_attn.bias", "787"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_532.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_attn.weight" = ["Gemm_532_reshape_B", "Gemm_532_reshape_B_size"]

[functions.Gemm_532_reshape_B]
name = 'Gemm_532_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532_reshape_B_size]
name = 'Gemm_532_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_675]
name = 'Gemm_675'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675.auxiliary]
[functions.Gemm_675.auxiliary.onnx]
node_name = "Gemm_675"
node_type = "Gemm"
node_domain = ""
node_args = ["948", "h.2.attn.c_proj.weight", "h.2.attn.c_proj.bias", "949"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_675.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_proj.weight" = ["Gemm_675_reshape_B", "Gemm_675_reshape_B_size"]

[functions.Gemm_675_reshape_B]
name = 'Gemm_675_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675_reshape_B_size]
name = 'Gemm_675_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_707]
name = 'Gemm_707'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707.auxiliary]
[functions.Gemm_707.auxiliary.onnx]
node_name = "Gemm_707"
node_type = "Gemm"
node_domain = ""
node_args = ["986", "h.2.mlp.c_fc.weight", "h.2.mlp.c_fc.bias", "987"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_707.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_fc.weight" = ["Gemm_707_reshape_B", "Gemm_707_reshape_B_size"]

[functions.Gemm_707_reshape_B]
name = 'Gemm_707_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707_reshape_B_size]
name = 'Gemm_707_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_740]
name = 'Gemm_740'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740.auxiliary]
[functions.Gemm_740.auxiliary.onnx]
node_name = "Gemm_740"
node_type = "Gemm"
node_domain = ""
node_args = ["1023", "h.2.mlp.c_proj.weight", "h.2.mlp.c_proj.bias", "1024"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_740.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_proj.weight" = ["Gemm_740_reshape_B", "Gemm_740_reshape_B_size"]

[functions.Gemm_740_reshape_B]
name = 'Gemm_740_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740_reshape_B_size]
name = 'Gemm_740_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_772]
name = 'Gemm_772'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772.auxiliary]
[functions.Gemm_772.auxiliary.onnx]
node_name = "Gemm_772"
node_type = "Gemm"
node_domain = ""
node_args = ["1061", "h.3.attn.c_attn.weight", "h.3.attn.c_attn.bias", "1062"]
node_arg_shapes = [[128, 768], [768, 2304], [2304], [128, 2304]]

[functions.Gemm_772.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_attn.weight" = ["Gemm_772_reshape_B", "Gemm_772_reshape_B_size"]

[functions.Gemm_772_reshape_B]
name = 'Gemm_772_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772_reshape_B_size]
name = 'Gemm_772_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_915]
name = 'Gemm_915'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915.auxiliary]
[functions.Gemm_915.auxiliary.onnx]
node_name = "Gemm_915"
node_type = "Gemm"
node_domain = ""
node_args = ["1223", "h.3.attn.c_proj.weight", "h.3.attn.c_proj.bias", "1224"]
node_arg_shapes = [[128, 768], [768, 768], [768], [128, 768]]

[functions.Gemm_915.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_proj.weight" = ["Gemm_915_reshape_B", "Gemm_915_reshape_B_size"]

[functions.Gemm_915_reshape_B]
name = 'Gemm_915_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915_reshape_B_size]
name = 'Gemm_915_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_947]
name = 'Gemm_947'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947.auxiliary]
[functions.Gemm_947.auxiliary.onnx]
node_name = "Gemm_947"
node_type = "Gemm"
node_domain = ""
node_args = ["1261", "h.3.mlp.c_fc.weight", "h.3.mlp.c_fc.bias", "1262"]
node_arg_shapes = [[128, 768], [768, 3072], [3072], [128, 3072]]

[functions.Gemm_947.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_fc.weight" = ["Gemm_947_reshape_B", "Gemm_947_reshape_B_size"]

[functions.Gemm_947_reshape_B]
name = 'Gemm_947_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947_reshape_B_size]
name = 'Gemm_947_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_980]
name = 'Gemm_980'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980.auxiliary]
[functions.Gemm_980.auxiliary.onnx]
node_name = "Gemm_980"
node_type = "Gemm"
node_domain = ""
node_args = ["1298", "h.3.mlp.c_proj.weight", "h.3.mlp.c_proj.bias", "1299"]
node_arg_shapes = [[128, 3072], [3072, 768], [768], [128, 768]]

[functions.Gemm_980.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_proj.weight" = ["Gemm_980_reshape_B", "Gemm_980_reshape_B_size"]

[functions.Gemm_980_reshape_B]
name = 'Gemm_980_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980_reshape_B_size]
name = 'Gemm_980_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale]
name = 'MatMul_1088_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1088_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1088_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1370", "1394", "1425"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_1114]
name = 'MatMul_1114'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1114.auxiliary]
[functions.MatMul_1114.auxiliary.onnx]
node_name = "MatMul_1114"
node_type = "MatMul"
node_domain = ""
node_args = ["1455", "1418", "1456"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_128_FusedMatMulAndScale]
name = 'MatMul_128_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_128_FusedMatMulAndScale.auxiliary]
[functions.MatMul_128_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_128_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["270", "294", "325"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_1328_FusedMatMulAndScale]
name = 'MatMul_1328_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1328_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1328_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1328_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1645", "1669", "1700"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_1354]
name = 'MatMul_1354'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1354.auxiliary]
[functions.MatMul_1354.auxiliary.onnx]
node_name = "MatMul_1354"
node_type = "MatMul"
node_domain = ""
node_args = ["1730", "1693", "1731"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_154]
name = 'MatMul_154'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_154.auxiliary]
[functions.MatMul_154.auxiliary.onnx]
node_name = "MatMul_154"
node_type = "MatMul"
node_domain = ""
node_args = ["355", "318", "356"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_1568_FusedMatMulAndScale]
name = 'MatMul_1568_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1568_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1568_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1568_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1920", "1944", "1975"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_1594]
name = 'MatMul_1594'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1594.auxiliary]
[functions.MatMul_1594.auxiliary.onnx]
node_name = "MatMul_1594"
node_type = "MatMul"
node_domain = ""
node_args = ["2005", "1968", "2006"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_1808_FusedMatMulAndScale]
name = 'MatMul_1808_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1808_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1808_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1808_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2195", "2219", "2250"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_1834]
name = 'MatMul_1834'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1834.auxiliary]
[functions.MatMul_1834.auxiliary.onnx]
node_name = "MatMul_1834"
node_type = "MatMul"
node_domain = ""
node_args = ["2280", "2243", "2281"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_2048_FusedMatMulAndScale]
name = 'MatMul_2048_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2048_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2048_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2048_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2470", "2494", "2525"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_2074]
name = 'MatMul_2074'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2074.auxiliary]
[functions.MatMul_2074.auxiliary.onnx]
node_name = "MatMul_2074"
node_type = "MatMul"
node_domain = ""
node_args = ["2555", "2518", "2556"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_2288_FusedMatMulAndScale]
name = 'MatMul_2288_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2288_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2288_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2288_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2745", "2769", "2800"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_2314]
name = 'MatMul_2314'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2314.auxiliary]
[functions.MatMul_2314.auxiliary.onnx]
node_name = "MatMul_2314"
node_type = "MatMul"
node_domain = ""
node_args = ["2830", "2793", "2831"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_2528_FusedMatMulAndScale]
name = 'MatMul_2528_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2528_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2528_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2528_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3020", "3044", "3075"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_2554]
name = 'MatMul_2554'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2554.auxiliary]
[functions.MatMul_2554.auxiliary.onnx]
node_name = "MatMul_2554"
node_type = "MatMul"
node_domain = ""
node_args = ["3105", "3068", "3106"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_2768_FusedMatMulAndScale]
name = 'MatMul_2768_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2768_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2768_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2768_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3295", "3319", "3350"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_2794]
name = 'MatMul_2794'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2794.auxiliary]
[functions.MatMul_2794.auxiliary.onnx]
node_name = "MatMul_2794"
node_type = "MatMul"
node_domain = ""
node_args = ["3380", "3343", "3381"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_368_FusedMatMulAndScale]
name = 'MatMul_368_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_368_FusedMatMulAndScale.auxiliary]
[functions.MatMul_368_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_368_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["545", "569", "600"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_394]
name = 'MatMul_394'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_394.auxiliary]
[functions.MatMul_394.auxiliary.onnx]
node_name = "MatMul_394"
node_type = "MatMul"
node_domain = ""
node_args = ["630", "593", "631"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_608_FusedMatMulAndScale]
name = 'MatMul_608_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_608_FusedMatMulAndScale.auxiliary]
[functions.MatMul_608_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_608_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["820", "844", "875"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_634]
name = 'MatMul_634'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_634.auxiliary]
[functions.MatMul_634.auxiliary.onnx]
node_name = "MatMul_634"
node_type = "MatMul"
node_domain = ""
node_args = ["905", "868", "906"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.MatMul_848_FusedMatMulAndScale]
name = 'MatMul_848_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_848_FusedMatMulAndScale.auxiliary]
[functions.MatMul_848_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_848_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1095", "1119", "1150"]
node_arg_shapes = [[1, 12, 128, 64], [1, 12, 64, 128], [1, 12, 128, 128]]

[functions.MatMul_874]
name = 'MatMul_874'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_874.auxiliary]
[functions.MatMul_874.auxiliary.onnx]
node_name = "MatMul_874"
node_type = "MatMul"
node_domain = ""
node_args = ["1180", "1143", "1181"]
node_arg_shapes = [[1, 12, 128, 128], [1, 12, 128, 64], [1, 12, 128, 64]]

[functions.mlas_impl_0721d8d5dcdc7411e955fcdef9e51618]
name = 'mlas_impl_0721d8d5dcdc7411e955fcdef9e51618'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_0af4f140af9f3f8da06069f084fe4e88]
name = 'mlas_impl_0af4f140af9f3f8da06069f084fe4e88'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_16076a091a80393e529f13226a92975d]
name = 'mlas_impl_16076a091a80393e529f13226a92975d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_1f15affd9a6a27d53345cbcc4a0c3512]
name = 'mlas_impl_1f15affd9a6a27d53345cbcc4a0c3512'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_23e68b96e56271496f4e436d847b7dc4]
name = 'mlas_impl_23e68b96e56271496f4e436d847b7dc4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_24d5bb8ddc43bbdd9dde7433298c4489]
name = 'mlas_impl_24d5bb8ddc43bbdd9dde7433298c4489'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2ecf4107170c25f0881c7a2c58633e0d]
name = 'mlas_impl_2ecf4107170c25f0881c7a2c58633e0d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2f5e873176e0706f56b6a680549d535b]
name = 'mlas_impl_2f5e873176e0706f56b6a680549d535b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_31699b48eedca53e229704bd161e09c5]
name = 'mlas_impl_31699b48eedca53e229704bd161e09c5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_327f8b201cd0332846fd25cf36484edc]
name = 'mlas_impl_327f8b201cd0332846fd25cf36484edc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_3d9eb4c26dcf531bba5208d2de9a4cdc]
name = 'mlas_impl_3d9eb4c26dcf531bba5208d2de9a4cdc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_408dc301e700f4cdbf5b36868f6980d2]
name = 'mlas_impl_408dc301e700f4cdbf5b36868f6980d2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_48821f6bc585bf3465be85d74b4c212f]
name = 'mlas_impl_48821f6bc585bf3465be85d74b4c212f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5900c7b2fba8851cc8293c67bae05342]
name = 'mlas_impl_5900c7b2fba8851cc8293c67bae05342'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5bee0528cbce516815760dcda10378fd]
name = 'mlas_impl_5bee0528cbce516815760dcda10378fd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5cbab6302610968be127efd34bb4f91c]
name = 'mlas_impl_5cbab6302610968be127efd34bb4f91c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_60a54d3c40d84604daab0fc7a3807ac0]
name = 'mlas_impl_60a54d3c40d84604daab0fc7a3807ac0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_62b384c426b60a10657c51ef30f7e04d]
name = 'mlas_impl_62b384c426b60a10657c51ef30f7e04d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_669596987cc3c0f66a04acbf92945f68]
name = 'mlas_impl_669596987cc3c0f66a04acbf92945f68'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_66d1d705505f861453985a726a509d67]
name = 'mlas_impl_66d1d705505f861453985a726a509d67'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_70e2ff5e1a067e56c2b8c23cd0cc7f3e]
name = 'mlas_impl_70e2ff5e1a067e56c2b8c23cd0cc7f3e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_779ec32e26a25e4093d518cc8e7d5106]
name = 'mlas_impl_779ec32e26a25e4093d518cc8e7d5106'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_7db9a5edb9c8cc3bac4ddb9f2814fd90]
name = 'mlas_impl_7db9a5edb9c8cc3bac4ddb9f2814fd90'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8f35cfa05ac39024b0941b51be3ecac4]
name = 'mlas_impl_8f35cfa05ac39024b0941b51be3ecac4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_90d59556b3c74f9c847c8ba53311c7c2]
name = 'mlas_impl_90d59556b3c74f9c847c8ba53311c7c2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9577dd7af6b26daa917d16af3de55921]
name = 'mlas_impl_9577dd7af6b26daa917d16af3de55921'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_961427f09b463c8b55657f4e6377740e]
name = 'mlas_impl_961427f09b463c8b55657f4e6377740e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_980d01d090273d92ecc3c81209bc5efa]
name = 'mlas_impl_980d01d090273d92ecc3c81209bc5efa'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_a4958523cfd80f6edc9d1bd253a4d88b]
name = 'mlas_impl_a4958523cfd80f6edc9d1bd253a4d88b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_a9d7f11b8ece56698011791708bc1b4b]
name = 'mlas_impl_a9d7f11b8ece56698011791708bc1b4b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b53a3421ab339d42261091a3019d7a36]
name = 'mlas_impl_b53a3421ab339d42261091a3019d7a36'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b903f7068e419ac5fd638cbb67db1139]
name = 'mlas_impl_b903f7068e419ac5fd638cbb67db1139'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c1e131878a09567bb13c2d3828e64ed2]
name = 'mlas_impl_c1e131878a09567bb13c2d3828e64ed2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c23f6aaa06160576b5e5488d85879314]
name = 'mlas_impl_c23f6aaa06160576b5e5488d85879314'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c28fc3afb2b08eef6a3f1391bd1e0511]
name = 'mlas_impl_c28fc3afb2b08eef6a3f1391bd1e0511'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c32f0911b4ba20de9fdd8d777bd407a3]
name = 'mlas_impl_c32f0911b4ba20de9fdd8d777bd407a3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c5e3edd38b6a41517eeb5059b0c69388]
name = 'mlas_impl_c5e3edd38b6a41517eeb5059b0c69388'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c700d80d9e4020c50fcf45942c99778f]
name = 'mlas_impl_c700d80d9e4020c50fcf45942c99778f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_cd976ebfeece3ccc53e6ac6ac495659a]
name = 'mlas_impl_cd976ebfeece3ccc53e6ac6ac495659a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_d25fb85c9fc71bfde1b20c460ffb00a1]
name = 'mlas_impl_d25fb85c9fc71bfde1b20c460ffb00a1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_d5bf928ccd5dae697daedc15913ffa46]
name = 'mlas_impl_d5bf928ccd5dae697daedc15913ffa46'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e4bf790c3330c0f0bb87689925d64e13]
name = 'mlas_impl_e4bf790c3330c0f0bb87689925d64e13'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e7a1e6c2c6cee223ed0b6c541225fea1]
name = 'mlas_impl_e7a1e6c2c6cee223ed0b6c541225fea1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f409c459019176c0a73749b463868d59]
name = 'mlas_impl_f409c459019176c0a73749b463868d59'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f588d0c24e78acbd15ba40481d40c193]
name = 'mlas_impl_f588d0c24e78acbd15ba40481d40c193'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f8b3a2c7d4d172472e7ceeae99053da8]
name = 'mlas_impl_f8b3a2c7d4d172472e7ceeae99053da8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_fd8905b04598d054384ca22f5ad037a2]
name = 'mlas_impl_fd8905b04598d054384ca22f5ad037a2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_fde700614454096cbf820af75ba4d3b3]
name = 'mlas_impl_fde700614454096cbf820af75ba4d3b3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0405dbfb4494fb6423bb62779f759203]
name = 'nest_impl_0405dbfb4494fb6423bb62779f759203'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0426d057f25e3c80971f0dee2511d8b1]
name = 'nest_impl_0426d057f25e3c80971f0dee2511d8b1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_08592e6a6008a4f52ed0c9a404c31947]
name = 'nest_impl_08592e6a6008a4f52ed0c9a404c31947'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1ead6ef0b0b2d0673909285e9802cded]
name = 'nest_impl_1ead6ef0b0b2d0673909285e9802cded'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_248d8e05b741fdc63738709f9b6848fd]
name = 'nest_impl_248d8e05b741fdc63738709f9b6848fd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_28f0cbe196609f3651a1b2fd47ef075a]
name = 'nest_impl_28f0cbe196609f3651a1b2fd47ef075a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2c13ad186696e155e0655c18907c3f91]
name = 'nest_impl_2c13ad186696e155e0655c18907c3f91'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2c4dbd7827f096ba13265b9f525f6107]
name = 'nest_impl_2c4dbd7827f096ba13265b9f525f6107'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2d89fe1c68ae52ab300e162a4757bc8e]
name = 'nest_impl_2d89fe1c68ae52ab300e162a4757bc8e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2e2f8f386a7652f76f888d515a4adb9c]
name = 'nest_impl_2e2f8f386a7652f76f888d515a4adb9c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_33ab3db71e793ae4327732592881243c]
name = 'nest_impl_33ab3db71e793ae4327732592881243c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_348bacdf323054de250233693aa9cbc1]
name = 'nest_impl_348bacdf323054de250233693aa9cbc1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3579f5c4e6e70793a826dfda259a2491]
name = 'nest_impl_3579f5c4e6e70793a826dfda259a2491'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3c14ca799ad5443b0cac742f710ffcf6]
name = 'nest_impl_3c14ca799ad5443b0cac742f710ffcf6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3ca141aacb05e0fe5bae5ec70f275758]
name = 'nest_impl_3ca141aacb05e0fe5bae5ec70f275758'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3dd5655d7c126960a35b8737fe7c0ffd]
name = 'nest_impl_3dd5655d7c126960a35b8737fe7c0ffd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_44b447cc5f1b18ffeeb10fa68644e770]
name = 'nest_impl_44b447cc5f1b18ffeeb10fa68644e770'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_467e9b95782791df4a9dd20deabb44ac]
name = 'nest_impl_467e9b95782791df4a9dd20deabb44ac'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_546e16d85c4925dce2293999adb88259]
name = 'nest_impl_546e16d85c4925dce2293999adb88259'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_581e78417e650c8825bec86bb1d5ebf5]
name = 'nest_impl_581e78417e650c8825bec86bb1d5ebf5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5852c64ba5987a57a7ad0b8bd17e4f30]
name = 'nest_impl_5852c64ba5987a57a7ad0b8bd17e4f30'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5c83fc145c7a412e24ac7bf9e88438f3]
name = 'nest_impl_5c83fc145c7a412e24ac7bf9e88438f3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5ceb6347b52f5366dd16a6aacf2f3a0f]
name = 'nest_impl_5ceb6347b52f5366dd16a6aacf2f3a0f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5eccfda3c2c39c444ccf221cd75936a7]
name = 'nest_impl_5eccfda3c2c39c444ccf221cd75936a7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_63c38d6b22144b8fd90e952fc83bafe0]
name = 'nest_impl_63c38d6b22144b8fd90e952fc83bafe0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6521e7a64c51e664364790b1c44e02ca]
name = 'nest_impl_6521e7a64c51e664364790b1c44e02ca'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_673824aef92f5a72403d21aa706ed3cb]
name = 'nest_impl_673824aef92f5a72403d21aa706ed3cb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_681fbabd7a6754896053ac5c574bfc10]
name = 'nest_impl_681fbabd7a6754896053ac5c574bfc10'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6c391b2b386b03b24d25bcdc26266a32]
name = 'nest_impl_6c391b2b386b03b24d25bcdc26266a32'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6d8943c00dafb405c1e7c2653262a975]
name = 'nest_impl_6d8943c00dafb405c1e7c2653262a975'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6e8e716b9d7e1a5f7643285c27ddf2bb]
name = 'nest_impl_6e8e716b9d7e1a5f7643285c27ddf2bb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6fe500ccb81cef2e13e2933f188f5ec3]
name = 'nest_impl_6fe500ccb81cef2e13e2933f188f5ec3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_737698c1b3d7c2ab710c17055e46bac6]
name = 'nest_impl_737698c1b3d7c2ab710c17055e46bac6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_74a97825ec9f5590704e284ffc499a2b]
name = 'nest_impl_74a97825ec9f5590704e284ffc499a2b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_750dee5b876f0209d9815d418869917a]
name = 'nest_impl_750dee5b876f0209d9815d418869917a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_764bcf02e38412ad487e727dbdce3022]
name = 'nest_impl_764bcf02e38412ad487e727dbdce3022'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7a516b589ccf22a7aca3568f28545a15]
name = 'nest_impl_7a516b589ccf22a7aca3568f28545a15'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7a7506f08a1651851de0272c20d9ebd9]
name = 'nest_impl_7a7506f08a1651851de0272c20d9ebd9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7bd495bab761c0ea23546de1ff082847]
name = 'nest_impl_7bd495bab761c0ea23546de1ff082847'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7c945950aff5bc8218261a121b8bd7c8]
name = 'nest_impl_7c945950aff5bc8218261a121b8bd7c8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7d1159932ae878a4d1628c62947725d9]
name = 'nest_impl_7d1159932ae878a4d1628c62947725d9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_89b69ff1ed015ae3b974a97169731a62]
name = 'nest_impl_89b69ff1ed015ae3b974a97169731a62'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_89f9cff07d78dd1227d4253920ec640f]
name = 'nest_impl_89f9cff07d78dd1227d4253920ec640f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8d1ff56651e37af87e93051faf55b1b2]
name = 'nest_impl_8d1ff56651e37af87e93051faf55b1b2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8f72242c310cb5d0c32f20afa4d40c47]
name = 'nest_impl_8f72242c310cb5d0c32f20afa4d40c47'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_913a688d8512e2939b59b9bad2dee164]
name = 'nest_impl_913a688d8512e2939b59b9bad2dee164'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_918c24f45fa161e1e8bbbc82a994bf04]
name = 'nest_impl_918c24f45fa161e1e8bbbc82a994bf04'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_944eb8cbc9cad00cf5604dfc90078f6e]
name = 'nest_impl_944eb8cbc9cad00cf5604dfc90078f6e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_966bb85a090681da65a49d964871e127]
name = 'nest_impl_966bb85a090681da65a49d964871e127'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_99f9b2ba399961d48acef2baeb689f8f]
name = 'nest_impl_99f9b2ba399961d48acef2baeb689f8f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9b9239ee3ce2cb77633e59045058125a]
name = 'nest_impl_9b9239ee3ce2cb77633e59045058125a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9ce1e0b4b38645dea556eaf364f4223f]
name = 'nest_impl_9ce1e0b4b38645dea556eaf364f4223f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a4ab437e58be41709c4f2b5bc6a32f56]
name = 'nest_impl_a4ab437e58be41709c4f2b5bc6a32f56'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a6bd24f276c5f2e96a75f4f262153601]
name = 'nest_impl_a6bd24f276c5f2e96a75f4f262153601'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a75fa7a132d8020263d099fd777c1d75]
name = 'nest_impl_a75fa7a132d8020263d099fd777c1d75'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a96cba8c3b86a6784805bbdcee34eee6]
name = 'nest_impl_a96cba8c3b86a6784805bbdcee34eee6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_adf5f1593871136eb4189f3c09ac86a9]
name = 'nest_impl_adf5f1593871136eb4189f3c09ac86a9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b8c246d0623c70f2479fa7dc914f8224]
name = 'nest_impl_b8c246d0623c70f2479fa7dc914f8224'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bdd3401b9dfde8174240f5b4d24d42d9]
name = 'nest_impl_bdd3401b9dfde8174240f5b4d24d42d9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c3b8e1c3295b036c20bd7acb7ac505bc]
name = 'nest_impl_c3b8e1c3295b036c20bd7acb7ac505bc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c94d76bbafa8f138339ca94abb985e44]
name = 'nest_impl_c94d76bbafa8f138339ca94abb985e44'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d0672a506f4708909cf30441a48e7529]
name = 'nest_impl_d0672a506f4708909cf30441a48e7529'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d27f686c003884e111de27f031113702]
name = 'nest_impl_d27f686c003884e111de27f031113702'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 128 ], affine_map = [ 98304, 8192, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d8d5636c0310e8c778cd85293e23fe71]
name = 'nest_impl_d8d5636c0310e8c778cd85293e23fe71'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_dec50ecdfb1155f4aca1cf8f5682969e]
name = 'nest_impl_dec50ecdfb1155f4aca1cf8f5682969e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 128 ], affine_map = [ 196608, 16384, 128, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 128, 64 ], affine_map = [ 98304, 8192, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e215a4627cc48ac801e30477ced63f53]
name = 'nest_impl_e215a4627cc48ac801e30477ced63f53'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e479e1273d81144ff93ab37fed731261]
name = 'nest_impl_e479e1273d81144ff93ab37fed731261'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e4d96036aaec01b0ed81ebff3b760d23]
name = 'nest_impl_e4d96036aaec01b0ed81ebff3b760d23'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ebb1310de6e53b19c57292663a664b79]
name = 'nest_impl_ebb1310de6e53b19c57292663a664b79'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f16b3330191487c9b00d6ab556b28edb]
name = 'nest_impl_f16b3330191487c9b00d6ab556b28edb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f48462879d842e5564e57ebb6a789182]
name = 'nest_impl_f48462879d842e5564e57ebb6a789182'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f6a81cfe8937b3f1369d629aa9424833]
name = 'nest_impl_f6a81cfe8937b3f1369d629aa9424833'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 128, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[target]
[target.required]
os = "linux"

[target.required.CPU]
architecture = "x86_64"
extensions = ["+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3"]

[dependencies]
link_target = "torch-jit-export.o"
deploy_files = []
dynamic = []

[compiled_with]
compiler = ''
flags = ''
crt = ''
libraries = []

[declaration]
code = '''
#endif // __TOML__
//
// Header for RoboCode library torch-jit-export
//

#include <stdint.h>

#if defined(__cplusplus)
extern "C"
{
#endif // defined(__cplusplus)

//
// Functions
//

void Gemm_52_reshape_B(float*, float*);


int64_t Gemm_52_reshape_B_size();


void nest_impl_a4ab437e58be41709c4f2b5bc6a32f56(float*, float*, float*);


void mlas_impl_f588d0c24e78acbd15ba40481d40c193(float*, float*, float*, float*);


void Gemm_52(float*, float*, float*, float*);


void nest_impl_5852c64ba5987a57a7ad0b8bd17e4f30(float*, float*, float*);


void MatMul_128_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_6c391b2b386b03b24d25bcdc26266a32(float*, float*, float*);


void MatMul_154(float*, float*, float*);


void Gemm_195_reshape_B(float*, float*);


int64_t Gemm_195_reshape_B_size();


void nest_impl_d8d5636c0310e8c778cd85293e23fe71(float*, float*, float*);


void mlas_impl_408dc301e700f4cdbf5b36868f6980d2(float*, float*, float*, float*);


void Gemm_195(float*, float*, float*, float*);


void Gemm_227_reshape_B(float*, float*);


int64_t Gemm_227_reshape_B_size();


void nest_impl_b8c246d0623c70f2479fa7dc914f8224(float*, float*, float*);


void mlas_impl_e7a1e6c2c6cee223ed0b6c541225fea1(float*, float*, float*, float*);


void Gemm_227(float*, float*, float*, float*);


void Gemm_260_reshape_B(float*, float*);


int64_t Gemm_260_reshape_B_size();


void nest_impl_28f0cbe196609f3651a1b2fd47ef075a(float*, float*, float*);


void mlas_impl_48821f6bc585bf3465be85d74b4c212f(float*, float*, float*, float*);


void Gemm_260(float*, float*, float*, float*);


void Gemm_292_reshape_B(float*, float*);


int64_t Gemm_292_reshape_B_size();


void nest_impl_348bacdf323054de250233693aa9cbc1(float*, float*, float*);


void mlas_impl_3d9eb4c26dcf531bba5208d2de9a4cdc(float*, float*, float*, float*);


void Gemm_292(float*, float*, float*, float*);


void nest_impl_63c38d6b22144b8fd90e952fc83bafe0(float*, float*, float*);


void MatMul_368_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_dec50ecdfb1155f4aca1cf8f5682969e(float*, float*, float*);


void MatMul_394(float*, float*, float*);


void Gemm_435_reshape_B(float*, float*);


int64_t Gemm_435_reshape_B_size();


void nest_impl_764bcf02e38412ad487e727dbdce3022(float*, float*, float*);


void mlas_impl_7db9a5edb9c8cc3bac4ddb9f2814fd90(float*, float*, float*, float*);


void Gemm_435(float*, float*, float*, float*);


void Gemm_467_reshape_B(float*, float*);


int64_t Gemm_467_reshape_B_size();


void nest_impl_7d1159932ae878a4d1628c62947725d9(float*, float*, float*);


void mlas_impl_a4958523cfd80f6edc9d1bd253a4d88b(float*, float*, float*, float*);


void Gemm_467(float*, float*, float*, float*);


void Gemm_500_reshape_B(float*, float*);


int64_t Gemm_500_reshape_B_size();


void nest_impl_2c4dbd7827f096ba13265b9f525f6107(float*, float*, float*);


void mlas_impl_5cbab6302610968be127efd34bb4f91c(float*, float*, float*, float*);


void Gemm_500(float*, float*, float*, float*);


void Gemm_532_reshape_B(float*, float*);


int64_t Gemm_532_reshape_B_size();


void nest_impl_966bb85a090681da65a49d964871e127(float*, float*, float*);


void mlas_impl_2f5e873176e0706f56b6a680549d535b(float*, float*, float*, float*);


void Gemm_532(float*, float*, float*, float*);


void nest_impl_2d89fe1c68ae52ab300e162a4757bc8e(float*, float*, float*);


void MatMul_608_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_c3b8e1c3295b036c20bd7acb7ac505bc(float*, float*, float*);


void MatMul_634(float*, float*, float*);


void Gemm_675_reshape_B(float*, float*);


int64_t Gemm_675_reshape_B_size();


void nest_impl_546e16d85c4925dce2293999adb88259(float*, float*, float*);


void mlas_impl_31699b48eedca53e229704bd161e09c5(float*, float*, float*, float*);


void Gemm_675(float*, float*, float*, float*);


void Gemm_707_reshape_B(float*, float*);


int64_t Gemm_707_reshape_B_size();


void nest_impl_581e78417e650c8825bec86bb1d5ebf5(float*, float*, float*);


void mlas_impl_70e2ff5e1a067e56c2b8c23cd0cc7f3e(float*, float*, float*, float*);


void Gemm_707(float*, float*, float*, float*);


void Gemm_740_reshape_B(float*, float*);


int64_t Gemm_740_reshape_B_size();


void nest_impl_0405dbfb4494fb6423bb62779f759203(float*, float*, float*);


void mlas_impl_a9d7f11b8ece56698011791708bc1b4b(float*, float*, float*, float*);


void Gemm_740(float*, float*, float*, float*);


void Gemm_772_reshape_B(float*, float*);


int64_t Gemm_772_reshape_B_size();


void nest_impl_f16b3330191487c9b00d6ab556b28edb(float*, float*, float*);


void mlas_impl_c28fc3afb2b08eef6a3f1391bd1e0511(float*, float*, float*, float*);


void Gemm_772(float*, float*, float*, float*);


void nest_impl_d0672a506f4708909cf30441a48e7529(float*, float*, float*);


void MatMul_848_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_8f72242c310cb5d0c32f20afa4d40c47(float*, float*, float*);


void MatMul_874(float*, float*, float*);


void Gemm_915_reshape_B(float*, float*);


int64_t Gemm_915_reshape_B_size();


void nest_impl_a96cba8c3b86a6784805bbdcee34eee6(float*, float*, float*);


void mlas_impl_90d59556b3c74f9c847c8ba53311c7c2(float*, float*, float*, float*);


void Gemm_915(float*, float*, float*, float*);


void Gemm_947_reshape_B(float*, float*);


int64_t Gemm_947_reshape_B_size();


void nest_impl_3dd5655d7c126960a35b8737fe7c0ffd(float*, float*, float*);


void mlas_impl_cd976ebfeece3ccc53e6ac6ac495659a(float*, float*, float*, float*);


void Gemm_947(float*, float*, float*, float*);


void Gemm_980_reshape_B(float*, float*);


int64_t Gemm_980_reshape_B_size();


void nest_impl_750dee5b876f0209d9815d418869917a(float*, float*, float*);


void mlas_impl_f8b3a2c7d4d172472e7ceeae99053da8(float*, float*, float*, float*);


void Gemm_980(float*, float*, float*, float*);


void Gemm_1012_reshape_B(float*, float*);


int64_t Gemm_1012_reshape_B_size();


void nest_impl_3c14ca799ad5443b0cac742f710ffcf6(float*, float*, float*);


void mlas_impl_5900c7b2fba8851cc8293c67bae05342(float*, float*, float*, float*);


void Gemm_1012(float*, float*, float*, float*);


void nest_impl_d27f686c003884e111de27f031113702(float*, float*, float*);


void MatMul_1088_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_0426d057f25e3c80971f0dee2511d8b1(float*, float*, float*);


void MatMul_1114(float*, float*, float*);


void Gemm_1155_reshape_B(float*, float*);


int64_t Gemm_1155_reshape_B_size();


void nest_impl_918c24f45fa161e1e8bbbc82a994bf04(float*, float*, float*);


void mlas_impl_2ecf4107170c25f0881c7a2c58633e0d(float*, float*, float*, float*);


void Gemm_1155(float*, float*, float*, float*);


void Gemm_1187_reshape_B(float*, float*);


int64_t Gemm_1187_reshape_B_size();


void nest_impl_5eccfda3c2c39c444ccf221cd75936a7(float*, float*, float*);


void mlas_impl_62b384c426b60a10657c51ef30f7e04d(float*, float*, float*, float*);


void Gemm_1187(float*, float*, float*, float*);


void Gemm_1220_reshape_B(float*, float*);


int64_t Gemm_1220_reshape_B_size();


void nest_impl_bdd3401b9dfde8174240f5b4d24d42d9(float*, float*, float*);


void mlas_impl_961427f09b463c8b55657f4e6377740e(float*, float*, float*, float*);


void Gemm_1220(float*, float*, float*, float*);


void Gemm_1252_reshape_B(float*, float*);


int64_t Gemm_1252_reshape_B_size();


void nest_impl_adf5f1593871136eb4189f3c09ac86a9(float*, float*, float*);


void mlas_impl_9577dd7af6b26daa917d16af3de55921(float*, float*, float*, float*);


void Gemm_1252(float*, float*, float*, float*);


void nest_impl_89f9cff07d78dd1227d4253920ec640f(float*, float*, float*);


void MatMul_1328_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_3ca141aacb05e0fe5bae5ec70f275758(float*, float*, float*);


void MatMul_1354(float*, float*, float*);


void Gemm_1395_reshape_B(float*, float*);


int64_t Gemm_1395_reshape_B_size();


void nest_impl_a6bd24f276c5f2e96a75f4f262153601(float*, float*, float*);


void mlas_impl_5bee0528cbce516815760dcda10378fd(float*, float*, float*, float*);


void Gemm_1395(float*, float*, float*, float*);


void Gemm_1427_reshape_B(float*, float*);


int64_t Gemm_1427_reshape_B_size();


void nest_impl_9b9239ee3ce2cb77633e59045058125a(float*, float*, float*);


void mlas_impl_d5bf928ccd5dae697daedc15913ffa46(float*, float*, float*, float*);


void Gemm_1427(float*, float*, float*, float*);


void Gemm_1460_reshape_B(float*, float*);


int64_t Gemm_1460_reshape_B_size();


void nest_impl_e4d96036aaec01b0ed81ebff3b760d23(float*, float*, float*);


void mlas_impl_d25fb85c9fc71bfde1b20c460ffb00a1(float*, float*, float*, float*);


void Gemm_1460(float*, float*, float*, float*);


void Gemm_1492_reshape_B(float*, float*);


int64_t Gemm_1492_reshape_B_size();


void nest_impl_e215a4627cc48ac801e30477ced63f53(float*, float*, float*);


void mlas_impl_980d01d090273d92ecc3c81209bc5efa(float*, float*, float*, float*);


void Gemm_1492(float*, float*, float*, float*);


void nest_impl_8d1ff56651e37af87e93051faf55b1b2(float*, float*, float*);


void MatMul_1568_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_681fbabd7a6754896053ac5c574bfc10(float*, float*, float*);


void MatMul_1594(float*, float*, float*);


void Gemm_1635_reshape_B(float*, float*);


int64_t Gemm_1635_reshape_B_size();


void nest_impl_6d8943c00dafb405c1e7c2653262a975(float*, float*, float*);


void mlas_impl_b53a3421ab339d42261091a3019d7a36(float*, float*, float*, float*);


void Gemm_1635(float*, float*, float*, float*);


void Gemm_1667_reshape_B(float*, float*);


int64_t Gemm_1667_reshape_B_size();


void nest_impl_e479e1273d81144ff93ab37fed731261(float*, float*, float*);


void mlas_impl_b903f7068e419ac5fd638cbb67db1139(float*, float*, float*, float*);


void Gemm_1667(float*, float*, float*, float*);


void Gemm_1700_reshape_B(float*, float*);


int64_t Gemm_1700_reshape_B_size();


void nest_impl_74a97825ec9f5590704e284ffc499a2b(float*, float*, float*);


void mlas_impl_66d1d705505f861453985a726a509d67(float*, float*, float*, float*);


void Gemm_1700(float*, float*, float*, float*);


void Gemm_1732_reshape_B(float*, float*);


int64_t Gemm_1732_reshape_B_size();


void nest_impl_89b69ff1ed015ae3b974a97169731a62(float*, float*, float*);


void mlas_impl_f409c459019176c0a73749b463868d59(float*, float*, float*, float*);


void Gemm_1732(float*, float*, float*, float*);


void nest_impl_248d8e05b741fdc63738709f9b6848fd(float*, float*, float*);


void MatMul_1808_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_6fe500ccb81cef2e13e2933f188f5ec3(float*, float*, float*);


void MatMul_1834(float*, float*, float*);


void Gemm_1875_reshape_B(float*, float*);


int64_t Gemm_1875_reshape_B_size();


void nest_impl_467e9b95782791df4a9dd20deabb44ac(float*, float*, float*);


void mlas_impl_16076a091a80393e529f13226a92975d(float*, float*, float*, float*);


void Gemm_1875(float*, float*, float*, float*);


void Gemm_1907_reshape_B(float*, float*);


int64_t Gemm_1907_reshape_B_size();


void nest_impl_2e2f8f386a7652f76f888d515a4adb9c(float*, float*, float*);


void mlas_impl_c32f0911b4ba20de9fdd8d777bd407a3(float*, float*, float*, float*);


void Gemm_1907(float*, float*, float*, float*);


void Gemm_1940_reshape_B(float*, float*);


int64_t Gemm_1940_reshape_B_size();


void nest_impl_673824aef92f5a72403d21aa706ed3cb(float*, float*, float*);


void mlas_impl_0af4f140af9f3f8da06069f084fe4e88(float*, float*, float*, float*);


void Gemm_1940(float*, float*, float*, float*);


void Gemm_1972_reshape_B(float*, float*);


int64_t Gemm_1972_reshape_B_size();


void nest_impl_1ead6ef0b0b2d0673909285e9802cded(float*, float*, float*);


void mlas_impl_e4bf790c3330c0f0bb87689925d64e13(float*, float*, float*, float*);


void Gemm_1972(float*, float*, float*, float*);


void nest_impl_6521e7a64c51e664364790b1c44e02ca(float*, float*, float*);


void MatMul_2048_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_99f9b2ba399961d48acef2baeb689f8f(float*, float*, float*);


void MatMul_2074(float*, float*, float*);


void Gemm_2115_reshape_B(float*, float*);


int64_t Gemm_2115_reshape_B_size();


void nest_impl_7c945950aff5bc8218261a121b8bd7c8(float*, float*, float*);


void mlas_impl_c5e3edd38b6a41517eeb5059b0c69388(float*, float*, float*, float*);


void Gemm_2115(float*, float*, float*, float*);


void Gemm_2147_reshape_B(float*, float*);


int64_t Gemm_2147_reshape_B_size();


void nest_impl_2c13ad186696e155e0655c18907c3f91(float*, float*, float*);


void mlas_impl_fde700614454096cbf820af75ba4d3b3(float*, float*, float*, float*);


void Gemm_2147(float*, float*, float*, float*);


void Gemm_2180_reshape_B(float*, float*);


int64_t Gemm_2180_reshape_B_size();


void nest_impl_a75fa7a132d8020263d099fd777c1d75(float*, float*, float*);


void mlas_impl_8f35cfa05ac39024b0941b51be3ecac4(float*, float*, float*, float*);


void Gemm_2180(float*, float*, float*, float*);


void Gemm_2212_reshape_B(float*, float*);


int64_t Gemm_2212_reshape_B_size();


void nest_impl_944eb8cbc9cad00cf5604dfc90078f6e(float*, float*, float*);


void mlas_impl_c1e131878a09567bb13c2d3828e64ed2(float*, float*, float*, float*);


void Gemm_2212(float*, float*, float*, float*);


void nest_impl_33ab3db71e793ae4327732592881243c(float*, float*, float*);


void MatMul_2288_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_913a688d8512e2939b59b9bad2dee164(float*, float*, float*);


void MatMul_2314(float*, float*, float*);


void Gemm_2355_reshape_B(float*, float*);


int64_t Gemm_2355_reshape_B_size();


void nest_impl_ebb1310de6e53b19c57292663a664b79(float*, float*, float*);


void mlas_impl_327f8b201cd0332846fd25cf36484edc(float*, float*, float*, float*);


void Gemm_2355(float*, float*, float*, float*);


void Gemm_2387_reshape_B(float*, float*);


int64_t Gemm_2387_reshape_B_size();


void nest_impl_7bd495bab761c0ea23546de1ff082847(float*, float*, float*);


void mlas_impl_c700d80d9e4020c50fcf45942c99778f(float*, float*, float*, float*);


void Gemm_2387(float*, float*, float*, float*);


void Gemm_2420_reshape_B(float*, float*);


int64_t Gemm_2420_reshape_B_size();


void nest_impl_737698c1b3d7c2ab710c17055e46bac6(float*, float*, float*);


void mlas_impl_fd8905b04598d054384ca22f5ad037a2(float*, float*, float*, float*);


void Gemm_2420(float*, float*, float*, float*);


void Gemm_2452_reshape_B(float*, float*);


int64_t Gemm_2452_reshape_B_size();


void nest_impl_6e8e716b9d7e1a5f7643285c27ddf2bb(float*, float*, float*);


void mlas_impl_23e68b96e56271496f4e436d847b7dc4(float*, float*, float*, float*);


void Gemm_2452(float*, float*, float*, float*);


void nest_impl_5ceb6347b52f5366dd16a6aacf2f3a0f(float*, float*, float*);


void MatMul_2528_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_5c83fc145c7a412e24ac7bf9e88438f3(float*, float*, float*);


void MatMul_2554(float*, float*, float*);


void Gemm_2595_reshape_B(float*, float*);


int64_t Gemm_2595_reshape_B_size();


void nest_impl_f6a81cfe8937b3f1369d629aa9424833(float*, float*, float*);


void mlas_impl_779ec32e26a25e4093d518cc8e7d5106(float*, float*, float*, float*);


void Gemm_2595(float*, float*, float*, float*);


void Gemm_2627_reshape_B(float*, float*);


int64_t Gemm_2627_reshape_B_size();


void nest_impl_7a516b589ccf22a7aca3568f28545a15(float*, float*, float*);


void mlas_impl_24d5bb8ddc43bbdd9dde7433298c4489(float*, float*, float*, float*);


void Gemm_2627(float*, float*, float*, float*);


void Gemm_2660_reshape_B(float*, float*);


int64_t Gemm_2660_reshape_B_size();


void nest_impl_3579f5c4e6e70793a826dfda259a2491(float*, float*, float*);


void mlas_impl_60a54d3c40d84604daab0fc7a3807ac0(float*, float*, float*, float*);


void Gemm_2660(float*, float*, float*, float*);


void Gemm_2692_reshape_B(float*, float*);


int64_t Gemm_2692_reshape_B_size();


void nest_impl_44b447cc5f1b18ffeeb10fa68644e770(float*, float*, float*);


void mlas_impl_669596987cc3c0f66a04acbf92945f68(float*, float*, float*, float*);


void Gemm_2692(float*, float*, float*, float*);


void nest_impl_9ce1e0b4b38645dea556eaf364f4223f(float*, float*, float*);


void MatMul_2768_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_c94d76bbafa8f138339ca94abb985e44(float*, float*, float*);


void MatMul_2794(float*, float*, float*);


void Gemm_2835_reshape_B(float*, float*);


int64_t Gemm_2835_reshape_B_size();


void nest_impl_7a7506f08a1651851de0272c20d9ebd9(float*, float*, float*);


void mlas_impl_c23f6aaa06160576b5e5488d85879314(float*, float*, float*, float*);


void Gemm_2835(float*, float*, float*, float*);


void Gemm_2867_reshape_B(float*, float*);


int64_t Gemm_2867_reshape_B_size();


void nest_impl_f48462879d842e5564e57ebb6a789182(float*, float*, float*);


void mlas_impl_1f15affd9a6a27d53345cbcc4a0c3512(float*, float*, float*, float*);


void Gemm_2867(float*, float*, float*, float*);


void Gemm_2900_reshape_B(float*, float*);


int64_t Gemm_2900_reshape_B_size();


void nest_impl_08592e6a6008a4f52ed0c9a404c31947(float*, float*, float*);


void mlas_impl_0721d8d5dcdc7411e955fcdef9e51618(float*, float*, float*, float*);


void Gemm_2900(float*, float*, float*, float*);


#if defined(__cplusplus)
} // extern "C"
#endif // defined(__cplusplus)

#ifdef __TOML__
'''

#endif // TOML

#endif // __torch-jit-export__