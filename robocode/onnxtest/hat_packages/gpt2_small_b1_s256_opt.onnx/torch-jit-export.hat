
#ifndef __torch-jit-export__
#define __torch-jit-export__

#ifdef TOML
[description]
comment = 'torch-jit-export'
author = ''
version = ''
license_url = ''

[functions]
[functions.Gemm_1012]
name = 'Gemm_1012'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012.auxiliary]
[functions.Gemm_1012.auxiliary.onnx]
node_name = "Gemm_1012"
node_type = "Gemm"
node_domain = ""
node_args = ["1336", "h.4.attn.c_attn.weight", "h.4.attn.c_attn.bias", "1337"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_1012.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_attn.weight" = ["Gemm_1012_reshape_B", "Gemm_1012_reshape_B_size"]

[functions.Gemm_1012_reshape_B]
name = 'Gemm_1012_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1012_reshape_B_size]
name = 'Gemm_1012_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1155]
name = 'Gemm_1155'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155.auxiliary]
[functions.Gemm_1155.auxiliary.onnx]
node_name = "Gemm_1155"
node_type = "Gemm"
node_domain = ""
node_args = ["1498", "h.4.attn.c_proj.weight", "h.4.attn.c_proj.bias", "1499"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_1155.auxiliary.onnx.node_packing_functions]
"h.4.attn.c_proj.weight" = ["Gemm_1155_reshape_B", "Gemm_1155_reshape_B_size"]

[functions.Gemm_1155_reshape_B]
name = 'Gemm_1155_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1155_reshape_B_size]
name = 'Gemm_1155_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1187]
name = 'Gemm_1187'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187.auxiliary]
[functions.Gemm_1187.auxiliary.onnx]
node_name = "Gemm_1187"
node_type = "Gemm"
node_domain = ""
node_args = ["1536", "h.4.mlp.c_fc.weight", "h.4.mlp.c_fc.bias", "1537"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_1187.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_fc.weight" = ["Gemm_1187_reshape_B", "Gemm_1187_reshape_B_size"]

[functions.Gemm_1187_reshape_B]
name = 'Gemm_1187_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1187_reshape_B_size]
name = 'Gemm_1187_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1220]
name = 'Gemm_1220'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220.auxiliary]
[functions.Gemm_1220.auxiliary.onnx]
node_name = "Gemm_1220"
node_type = "Gemm"
node_domain = ""
node_args = ["1573", "h.4.mlp.c_proj.weight", "h.4.mlp.c_proj.bias", "1574"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_1220.auxiliary.onnx.node_packing_functions]
"h.4.mlp.c_proj.weight" = ["Gemm_1220_reshape_B", "Gemm_1220_reshape_B_size"]

[functions.Gemm_1220_reshape_B]
name = 'Gemm_1220_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1220_reshape_B_size]
name = 'Gemm_1220_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1252]
name = 'Gemm_1252'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252.auxiliary]
[functions.Gemm_1252.auxiliary.onnx]
node_name = "Gemm_1252"
node_type = "Gemm"
node_domain = ""
node_args = ["1611", "h.5.attn.c_attn.weight", "h.5.attn.c_attn.bias", "1612"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_1252.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_attn.weight" = ["Gemm_1252_reshape_B", "Gemm_1252_reshape_B_size"]

[functions.Gemm_1252_reshape_B]
name = 'Gemm_1252_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1252_reshape_B_size]
name = 'Gemm_1252_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1395]
name = 'Gemm_1395'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395.auxiliary]
[functions.Gemm_1395.auxiliary.onnx]
node_name = "Gemm_1395"
node_type = "Gemm"
node_domain = ""
node_args = ["1773", "h.5.attn.c_proj.weight", "h.5.attn.c_proj.bias", "1774"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_1395.auxiliary.onnx.node_packing_functions]
"h.5.attn.c_proj.weight" = ["Gemm_1395_reshape_B", "Gemm_1395_reshape_B_size"]

[functions.Gemm_1395_reshape_B]
name = 'Gemm_1395_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1395_reshape_B_size]
name = 'Gemm_1395_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1427]
name = 'Gemm_1427'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427.auxiliary]
[functions.Gemm_1427.auxiliary.onnx]
node_name = "Gemm_1427"
node_type = "Gemm"
node_domain = ""
node_args = ["1811", "h.5.mlp.c_fc.weight", "h.5.mlp.c_fc.bias", "1812"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_1427.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_fc.weight" = ["Gemm_1427_reshape_B", "Gemm_1427_reshape_B_size"]

[functions.Gemm_1427_reshape_B]
name = 'Gemm_1427_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1427_reshape_B_size]
name = 'Gemm_1427_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1460]
name = 'Gemm_1460'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460.auxiliary]
[functions.Gemm_1460.auxiliary.onnx]
node_name = "Gemm_1460"
node_type = "Gemm"
node_domain = ""
node_args = ["1848", "h.5.mlp.c_proj.weight", "h.5.mlp.c_proj.bias", "1849"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_1460.auxiliary.onnx.node_packing_functions]
"h.5.mlp.c_proj.weight" = ["Gemm_1460_reshape_B", "Gemm_1460_reshape_B_size"]

[functions.Gemm_1460_reshape_B]
name = 'Gemm_1460_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1460_reshape_B_size]
name = 'Gemm_1460_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1492]
name = 'Gemm_1492'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492.auxiliary]
[functions.Gemm_1492.auxiliary.onnx]
node_name = "Gemm_1492"
node_type = "Gemm"
node_domain = ""
node_args = ["1886", "h.6.attn.c_attn.weight", "h.6.attn.c_attn.bias", "1887"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_1492.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_attn.weight" = ["Gemm_1492_reshape_B", "Gemm_1492_reshape_B_size"]

[functions.Gemm_1492_reshape_B]
name = 'Gemm_1492_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1492_reshape_B_size]
name = 'Gemm_1492_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1635]
name = 'Gemm_1635'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635.auxiliary]
[functions.Gemm_1635.auxiliary.onnx]
node_name = "Gemm_1635"
node_type = "Gemm"
node_domain = ""
node_args = ["2048", "h.6.attn.c_proj.weight", "h.6.attn.c_proj.bias", "2049"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_1635.auxiliary.onnx.node_packing_functions]
"h.6.attn.c_proj.weight" = ["Gemm_1635_reshape_B", "Gemm_1635_reshape_B_size"]

[functions.Gemm_1635_reshape_B]
name = 'Gemm_1635_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1635_reshape_B_size]
name = 'Gemm_1635_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1667]
name = 'Gemm_1667'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667.auxiliary]
[functions.Gemm_1667.auxiliary.onnx]
node_name = "Gemm_1667"
node_type = "Gemm"
node_domain = ""
node_args = ["2086", "h.6.mlp.c_fc.weight", "h.6.mlp.c_fc.bias", "2087"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_1667.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_fc.weight" = ["Gemm_1667_reshape_B", "Gemm_1667_reshape_B_size"]

[functions.Gemm_1667_reshape_B]
name = 'Gemm_1667_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1667_reshape_B_size]
name = 'Gemm_1667_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1700]
name = 'Gemm_1700'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700.auxiliary]
[functions.Gemm_1700.auxiliary.onnx]
node_name = "Gemm_1700"
node_type = "Gemm"
node_domain = ""
node_args = ["2123", "h.6.mlp.c_proj.weight", "h.6.mlp.c_proj.bias", "2124"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_1700.auxiliary.onnx.node_packing_functions]
"h.6.mlp.c_proj.weight" = ["Gemm_1700_reshape_B", "Gemm_1700_reshape_B_size"]

[functions.Gemm_1700_reshape_B]
name = 'Gemm_1700_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1700_reshape_B_size]
name = 'Gemm_1700_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1732]
name = 'Gemm_1732'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732.auxiliary]
[functions.Gemm_1732.auxiliary.onnx]
node_name = "Gemm_1732"
node_type = "Gemm"
node_domain = ""
node_args = ["2161", "h.7.attn.c_attn.weight", "h.7.attn.c_attn.bias", "2162"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_1732.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_attn.weight" = ["Gemm_1732_reshape_B", "Gemm_1732_reshape_B_size"]

[functions.Gemm_1732_reshape_B]
name = 'Gemm_1732_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1732_reshape_B_size]
name = 'Gemm_1732_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1875]
name = 'Gemm_1875'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875.auxiliary]
[functions.Gemm_1875.auxiliary.onnx]
node_name = "Gemm_1875"
node_type = "Gemm"
node_domain = ""
node_args = ["2323", "h.7.attn.c_proj.weight", "h.7.attn.c_proj.bias", "2324"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_1875.auxiliary.onnx.node_packing_functions]
"h.7.attn.c_proj.weight" = ["Gemm_1875_reshape_B", "Gemm_1875_reshape_B_size"]

[functions.Gemm_1875_reshape_B]
name = 'Gemm_1875_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1875_reshape_B_size]
name = 'Gemm_1875_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1907]
name = 'Gemm_1907'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907.auxiliary]
[functions.Gemm_1907.auxiliary.onnx]
node_name = "Gemm_1907"
node_type = "Gemm"
node_domain = ""
node_args = ["2361", "h.7.mlp.c_fc.weight", "h.7.mlp.c_fc.bias", "2362"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_1907.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_fc.weight" = ["Gemm_1907_reshape_B", "Gemm_1907_reshape_B_size"]

[functions.Gemm_1907_reshape_B]
name = 'Gemm_1907_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1907_reshape_B_size]
name = 'Gemm_1907_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1940]
name = 'Gemm_1940'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940.auxiliary]
[functions.Gemm_1940.auxiliary.onnx]
node_name = "Gemm_1940"
node_type = "Gemm"
node_domain = ""
node_args = ["2398", "h.7.mlp.c_proj.weight", "h.7.mlp.c_proj.bias", "2399"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_1940.auxiliary.onnx.node_packing_functions]
"h.7.mlp.c_proj.weight" = ["Gemm_1940_reshape_B", "Gemm_1940_reshape_B_size"]

[functions.Gemm_1940_reshape_B]
name = 'Gemm_1940_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1940_reshape_B_size]
name = 'Gemm_1940_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_195]
name = 'Gemm_195'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195.auxiliary]
[functions.Gemm_195.auxiliary.onnx]
node_name = "Gemm_195"
node_type = "Gemm"
node_domain = ""
node_args = ["398", "h.0.attn.c_proj.weight", "h.0.attn.c_proj.bias", "399"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_195.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_proj.weight" = ["Gemm_195_reshape_B", "Gemm_195_reshape_B_size"]

[functions.Gemm_195_reshape_B]
name = 'Gemm_195_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_195_reshape_B_size]
name = 'Gemm_195_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_1972]
name = 'Gemm_1972'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972.auxiliary]
[functions.Gemm_1972.auxiliary.onnx]
node_name = "Gemm_1972"
node_type = "Gemm"
node_domain = ""
node_args = ["2436", "h.8.attn.c_attn.weight", "h.8.attn.c_attn.bias", "2437"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_1972.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_attn.weight" = ["Gemm_1972_reshape_B", "Gemm_1972_reshape_B_size"]

[functions.Gemm_1972_reshape_B]
name = 'Gemm_1972_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_1972_reshape_B_size]
name = 'Gemm_1972_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2115]
name = 'Gemm_2115'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115.auxiliary]
[functions.Gemm_2115.auxiliary.onnx]
node_name = "Gemm_2115"
node_type = "Gemm"
node_domain = ""
node_args = ["2598", "h.8.attn.c_proj.weight", "h.8.attn.c_proj.bias", "2599"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_2115.auxiliary.onnx.node_packing_functions]
"h.8.attn.c_proj.weight" = ["Gemm_2115_reshape_B", "Gemm_2115_reshape_B_size"]

[functions.Gemm_2115_reshape_B]
name = 'Gemm_2115_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2115_reshape_B_size]
name = 'Gemm_2115_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2147]
name = 'Gemm_2147'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147.auxiliary]
[functions.Gemm_2147.auxiliary.onnx]
node_name = "Gemm_2147"
node_type = "Gemm"
node_domain = ""
node_args = ["2636", "h.8.mlp.c_fc.weight", "h.8.mlp.c_fc.bias", "2637"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_2147.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_fc.weight" = ["Gemm_2147_reshape_B", "Gemm_2147_reshape_B_size"]

[functions.Gemm_2147_reshape_B]
name = 'Gemm_2147_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2147_reshape_B_size]
name = 'Gemm_2147_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2180]
name = 'Gemm_2180'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180.auxiliary]
[functions.Gemm_2180.auxiliary.onnx]
node_name = "Gemm_2180"
node_type = "Gemm"
node_domain = ""
node_args = ["2673", "h.8.mlp.c_proj.weight", "h.8.mlp.c_proj.bias", "2674"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_2180.auxiliary.onnx.node_packing_functions]
"h.8.mlp.c_proj.weight" = ["Gemm_2180_reshape_B", "Gemm_2180_reshape_B_size"]

[functions.Gemm_2180_reshape_B]
name = 'Gemm_2180_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2180_reshape_B_size]
name = 'Gemm_2180_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2212]
name = 'Gemm_2212'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212.auxiliary]
[functions.Gemm_2212.auxiliary.onnx]
node_name = "Gemm_2212"
node_type = "Gemm"
node_domain = ""
node_args = ["2711", "h.9.attn.c_attn.weight", "h.9.attn.c_attn.bias", "2712"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_2212.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_attn.weight" = ["Gemm_2212_reshape_B", "Gemm_2212_reshape_B_size"]

[functions.Gemm_2212_reshape_B]
name = 'Gemm_2212_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2212_reshape_B_size]
name = 'Gemm_2212_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_227]
name = 'Gemm_227'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227.auxiliary]
[functions.Gemm_227.auxiliary.onnx]
node_name = "Gemm_227"
node_type = "Gemm"
node_domain = ""
node_args = ["436", "h.0.mlp.c_fc.weight", "h.0.mlp.c_fc.bias", "437"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_227.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_fc.weight" = ["Gemm_227_reshape_B", "Gemm_227_reshape_B_size"]

[functions.Gemm_227_reshape_B]
name = 'Gemm_227_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_227_reshape_B_size]
name = 'Gemm_227_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2355]
name = 'Gemm_2355'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355.auxiliary]
[functions.Gemm_2355.auxiliary.onnx]
node_name = "Gemm_2355"
node_type = "Gemm"
node_domain = ""
node_args = ["2873", "h.9.attn.c_proj.weight", "h.9.attn.c_proj.bias", "2874"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_2355.auxiliary.onnx.node_packing_functions]
"h.9.attn.c_proj.weight" = ["Gemm_2355_reshape_B", "Gemm_2355_reshape_B_size"]

[functions.Gemm_2355_reshape_B]
name = 'Gemm_2355_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2355_reshape_B_size]
name = 'Gemm_2355_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2387]
name = 'Gemm_2387'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387.auxiliary]
[functions.Gemm_2387.auxiliary.onnx]
node_name = "Gemm_2387"
node_type = "Gemm"
node_domain = ""
node_args = ["2911", "h.9.mlp.c_fc.weight", "h.9.mlp.c_fc.bias", "2912"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_2387.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_fc.weight" = ["Gemm_2387_reshape_B", "Gemm_2387_reshape_B_size"]

[functions.Gemm_2387_reshape_B]
name = 'Gemm_2387_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2387_reshape_B_size]
name = 'Gemm_2387_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2420]
name = 'Gemm_2420'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420.auxiliary]
[functions.Gemm_2420.auxiliary.onnx]
node_name = "Gemm_2420"
node_type = "Gemm"
node_domain = ""
node_args = ["2948", "h.9.mlp.c_proj.weight", "h.9.mlp.c_proj.bias", "2949"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_2420.auxiliary.onnx.node_packing_functions]
"h.9.mlp.c_proj.weight" = ["Gemm_2420_reshape_B", "Gemm_2420_reshape_B_size"]

[functions.Gemm_2420_reshape_B]
name = 'Gemm_2420_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2420_reshape_B_size]
name = 'Gemm_2420_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2452]
name = 'Gemm_2452'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452.auxiliary]
[functions.Gemm_2452.auxiliary.onnx]
node_name = "Gemm_2452"
node_type = "Gemm"
node_domain = ""
node_args = ["2986", "h.10.attn.c_attn.weight", "h.10.attn.c_attn.bias", "2987"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_2452.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_attn.weight" = ["Gemm_2452_reshape_B", "Gemm_2452_reshape_B_size"]

[functions.Gemm_2452_reshape_B]
name = 'Gemm_2452_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2452_reshape_B_size]
name = 'Gemm_2452_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2595]
name = 'Gemm_2595'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595.auxiliary]
[functions.Gemm_2595.auxiliary.onnx]
node_name = "Gemm_2595"
node_type = "Gemm"
node_domain = ""
node_args = ["3148", "h.10.attn.c_proj.weight", "h.10.attn.c_proj.bias", "3149"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_2595.auxiliary.onnx.node_packing_functions]
"h.10.attn.c_proj.weight" = ["Gemm_2595_reshape_B", "Gemm_2595_reshape_B_size"]

[functions.Gemm_2595_reshape_B]
name = 'Gemm_2595_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2595_reshape_B_size]
name = 'Gemm_2595_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_260]
name = 'Gemm_260'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260.auxiliary]
[functions.Gemm_260.auxiliary.onnx]
node_name = "Gemm_260"
node_type = "Gemm"
node_domain = ""
node_args = ["473", "h.0.mlp.c_proj.weight", "h.0.mlp.c_proj.bias", "474"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_260.auxiliary.onnx.node_packing_functions]
"h.0.mlp.c_proj.weight" = ["Gemm_260_reshape_B", "Gemm_260_reshape_B_size"]

[functions.Gemm_260_reshape_B]
name = 'Gemm_260_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_260_reshape_B_size]
name = 'Gemm_260_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2627]
name = 'Gemm_2627'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627.auxiliary]
[functions.Gemm_2627.auxiliary.onnx]
node_name = "Gemm_2627"
node_type = "Gemm"
node_domain = ""
node_args = ["3186", "h.10.mlp.c_fc.weight", "h.10.mlp.c_fc.bias", "3187"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_2627.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_fc.weight" = ["Gemm_2627_reshape_B", "Gemm_2627_reshape_B_size"]

[functions.Gemm_2627_reshape_B]
name = 'Gemm_2627_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2627_reshape_B_size]
name = 'Gemm_2627_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2660]
name = 'Gemm_2660'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660.auxiliary]
[functions.Gemm_2660.auxiliary.onnx]
node_name = "Gemm_2660"
node_type = "Gemm"
node_domain = ""
node_args = ["3223", "h.10.mlp.c_proj.weight", "h.10.mlp.c_proj.bias", "3224"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_2660.auxiliary.onnx.node_packing_functions]
"h.10.mlp.c_proj.weight" = ["Gemm_2660_reshape_B", "Gemm_2660_reshape_B_size"]

[functions.Gemm_2660_reshape_B]
name = 'Gemm_2660_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2660_reshape_B_size]
name = 'Gemm_2660_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2692]
name = 'Gemm_2692'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692.auxiliary]
[functions.Gemm_2692.auxiliary.onnx]
node_name = "Gemm_2692"
node_type = "Gemm"
node_domain = ""
node_args = ["3261", "h.11.attn.c_attn.weight", "h.11.attn.c_attn.bias", "3262"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_2692.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_attn.weight" = ["Gemm_2692_reshape_B", "Gemm_2692_reshape_B_size"]

[functions.Gemm_2692_reshape_B]
name = 'Gemm_2692_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2692_reshape_B_size]
name = 'Gemm_2692_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2835]
name = 'Gemm_2835'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835.auxiliary]
[functions.Gemm_2835.auxiliary.onnx]
node_name = "Gemm_2835"
node_type = "Gemm"
node_domain = ""
node_args = ["3423", "h.11.attn.c_proj.weight", "h.11.attn.c_proj.bias", "3424"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_2835.auxiliary.onnx.node_packing_functions]
"h.11.attn.c_proj.weight" = ["Gemm_2835_reshape_B", "Gemm_2835_reshape_B_size"]

[functions.Gemm_2835_reshape_B]
name = 'Gemm_2835_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2835_reshape_B_size]
name = 'Gemm_2835_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2867]
name = 'Gemm_2867'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867.auxiliary]
[functions.Gemm_2867.auxiliary.onnx]
node_name = "Gemm_2867"
node_type = "Gemm"
node_domain = ""
node_args = ["3461", "h.11.mlp.c_fc.weight", "h.11.mlp.c_fc.bias", "3462"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_2867.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_fc.weight" = ["Gemm_2867_reshape_B", "Gemm_2867_reshape_B_size"]

[functions.Gemm_2867_reshape_B]
name = 'Gemm_2867_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2867_reshape_B_size]
name = 'Gemm_2867_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_2900]
name = 'Gemm_2900'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900.auxiliary]
[functions.Gemm_2900.auxiliary.onnx]
node_name = "Gemm_2900"
node_type = "Gemm"
node_domain = ""
node_args = ["3498", "h.11.mlp.c_proj.weight", "h.11.mlp.c_proj.bias", "3499"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_2900.auxiliary.onnx.node_packing_functions]
"h.11.mlp.c_proj.weight" = ["Gemm_2900_reshape_B", "Gemm_2900_reshape_B_size"]

[functions.Gemm_2900_reshape_B]
name = 'Gemm_2900_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_2900_reshape_B_size]
name = 'Gemm_2900_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_292]
name = 'Gemm_292'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292.auxiliary]
[functions.Gemm_292.auxiliary.onnx]
node_name = "Gemm_292"
node_type = "Gemm"
node_domain = ""
node_args = ["511", "h.1.attn.c_attn.weight", "h.1.attn.c_attn.bias", "512"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_292.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_attn.weight" = ["Gemm_292_reshape_B", "Gemm_292_reshape_B_size"]

[functions.Gemm_292_reshape_B]
name = 'Gemm_292_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_292_reshape_B_size]
name = 'Gemm_292_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_435]
name = 'Gemm_435'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435.auxiliary]
[functions.Gemm_435.auxiliary.onnx]
node_name = "Gemm_435"
node_type = "Gemm"
node_domain = ""
node_args = ["673", "h.1.attn.c_proj.weight", "h.1.attn.c_proj.bias", "674"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_435.auxiliary.onnx.node_packing_functions]
"h.1.attn.c_proj.weight" = ["Gemm_435_reshape_B", "Gemm_435_reshape_B_size"]

[functions.Gemm_435_reshape_B]
name = 'Gemm_435_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_435_reshape_B_size]
name = 'Gemm_435_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_467]
name = 'Gemm_467'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467.auxiliary]
[functions.Gemm_467.auxiliary.onnx]
node_name = "Gemm_467"
node_type = "Gemm"
node_domain = ""
node_args = ["711", "h.1.mlp.c_fc.weight", "h.1.mlp.c_fc.bias", "712"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_467.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_fc.weight" = ["Gemm_467_reshape_B", "Gemm_467_reshape_B_size"]

[functions.Gemm_467_reshape_B]
name = 'Gemm_467_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_467_reshape_B_size]
name = 'Gemm_467_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_500]
name = 'Gemm_500'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500.auxiliary]
[functions.Gemm_500.auxiliary.onnx]
node_name = "Gemm_500"
node_type = "Gemm"
node_domain = ""
node_args = ["748", "h.1.mlp.c_proj.weight", "h.1.mlp.c_proj.bias", "749"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_500.auxiliary.onnx.node_packing_functions]
"h.1.mlp.c_proj.weight" = ["Gemm_500_reshape_B", "Gemm_500_reshape_B_size"]

[functions.Gemm_500_reshape_B]
name = 'Gemm_500_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_500_reshape_B_size]
name = 'Gemm_500_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_52]
name = 'Gemm_52'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52.auxiliary]
[functions.Gemm_52.auxiliary.onnx]
node_name = "Gemm_52"
node_type = "Gemm"
node_domain = ""
node_args = ["236", "h.0.attn.c_attn.weight", "h.0.attn.c_attn.bias", "237"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_52.auxiliary.onnx.node_packing_functions]
"h.0.attn.c_attn.weight" = ["Gemm_52_reshape_B", "Gemm_52_reshape_B_size"]

[functions.Gemm_52_reshape_B]
name = 'Gemm_52_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_52_reshape_B_size]
name = 'Gemm_52_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_532]
name = 'Gemm_532'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532.auxiliary]
[functions.Gemm_532.auxiliary.onnx]
node_name = "Gemm_532"
node_type = "Gemm"
node_domain = ""
node_args = ["786", "h.2.attn.c_attn.weight", "h.2.attn.c_attn.bias", "787"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_532.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_attn.weight" = ["Gemm_532_reshape_B", "Gemm_532_reshape_B_size"]

[functions.Gemm_532_reshape_B]
name = 'Gemm_532_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_532_reshape_B_size]
name = 'Gemm_532_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_675]
name = 'Gemm_675'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675.auxiliary]
[functions.Gemm_675.auxiliary.onnx]
node_name = "Gemm_675"
node_type = "Gemm"
node_domain = ""
node_args = ["948", "h.2.attn.c_proj.weight", "h.2.attn.c_proj.bias", "949"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_675.auxiliary.onnx.node_packing_functions]
"h.2.attn.c_proj.weight" = ["Gemm_675_reshape_B", "Gemm_675_reshape_B_size"]

[functions.Gemm_675_reshape_B]
name = 'Gemm_675_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_675_reshape_B_size]
name = 'Gemm_675_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_707]
name = 'Gemm_707'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707.auxiliary]
[functions.Gemm_707.auxiliary.onnx]
node_name = "Gemm_707"
node_type = "Gemm"
node_domain = ""
node_args = ["986", "h.2.mlp.c_fc.weight", "h.2.mlp.c_fc.bias", "987"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_707.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_fc.weight" = ["Gemm_707_reshape_B", "Gemm_707_reshape_B_size"]

[functions.Gemm_707_reshape_B]
name = 'Gemm_707_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_707_reshape_B_size]
name = 'Gemm_707_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_740]
name = 'Gemm_740'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740.auxiliary]
[functions.Gemm_740.auxiliary.onnx]
node_name = "Gemm_740"
node_type = "Gemm"
node_domain = ""
node_args = ["1023", "h.2.mlp.c_proj.weight", "h.2.mlp.c_proj.bias", "1024"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_740.auxiliary.onnx.node_packing_functions]
"h.2.mlp.c_proj.weight" = ["Gemm_740_reshape_B", "Gemm_740_reshape_B_size"]

[functions.Gemm_740_reshape_B]
name = 'Gemm_740_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_740_reshape_B_size]
name = 'Gemm_740_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_772]
name = 'Gemm_772'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772.auxiliary]
[functions.Gemm_772.auxiliary.onnx]
node_name = "Gemm_772"
node_type = "Gemm"
node_domain = ""
node_args = ["1061", "h.3.attn.c_attn.weight", "h.3.attn.c_attn.bias", "1062"]
node_arg_shapes = [[256, 768], [768, 2304], [2304], [256, 2304]]

[functions.Gemm_772.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_attn.weight" = ["Gemm_772_reshape_B", "Gemm_772_reshape_B_size"]

[functions.Gemm_772_reshape_B]
name = 'Gemm_772_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 9, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_772_reshape_B_size]
name = 'Gemm_772_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_915]
name = 'Gemm_915'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915.auxiliary]
[functions.Gemm_915.auxiliary.onnx]
node_name = "Gemm_915"
node_type = "Gemm"
node_domain = ""
node_args = ["1223", "h.3.attn.c_proj.weight", "h.3.attn.c_proj.bias", "1224"]
node_arg_shapes = [[256, 768], [768, 768], [768], [256, 768]]

[functions.Gemm_915.auxiliary.onnx.node_packing_functions]
"h.3.attn.c_proj.weight" = ["Gemm_915_reshape_B", "Gemm_915_reshape_B_size"]

[functions.Gemm_915_reshape_B]
name = 'Gemm_915_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_915_reshape_B_size]
name = 'Gemm_915_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_947]
name = 'Gemm_947'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947.auxiliary]
[functions.Gemm_947.auxiliary.onnx]
node_name = "Gemm_947"
node_type = "Gemm"
node_domain = ""
node_args = ["1261", "h.3.mlp.c_fc.weight", "h.3.mlp.c_fc.bias", "1262"]
node_arg_shapes = [[256, 768], [768, 3072], [3072], [256, 3072]]

[functions.Gemm_947.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_fc.weight" = ["Gemm_947_reshape_B", "Gemm_947_reshape_B_size"]

[functions.Gemm_947_reshape_B]
name = 'Gemm_947_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 12, 6, 16, 128, 16 ], affine_map = [ 196608, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_947_reshape_B_size]
name = 'Gemm_947_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.Gemm_980]
name = 'Gemm_980'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980.auxiliary]
[functions.Gemm_980.auxiliary.onnx]
node_name = "Gemm_980"
node_type = "Gemm"
node_domain = ""
node_args = ["1298", "h.3.mlp.c_proj.weight", "h.3.mlp.c_proj.bias", "1299"]
node_arg_shapes = [[256, 3072], [3072, 768], [768], [256, 768]]

[functions.Gemm_980.auxiliary.onnx.node_packing_functions]
"h.3.mlp.c_proj.weight" = ["Gemm_980_reshape_B", "Gemm_980_reshape_B_size"]

[functions.Gemm_980_reshape_B]
name = 'Gemm_980_reshape_B'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3, 24, 16, 128, 16 ], affine_map = [ 786432, 32768, 2048, 16, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.Gemm_980_reshape_B_size]
name = 'Gemm_980_reshape_B_size'
description = ''
calling_convention = "cdecl"
arguments = []
return = {name = '', description = '', logical_type = "element", declared_type = '', element_type = '', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale]
name = 'MatMul_1088_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1088_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1088_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1088_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1370", "1394", "1425"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_1114]
name = 'MatMul_1114'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1114.auxiliary]
[functions.MatMul_1114.auxiliary.onnx]
node_name = "MatMul_1114"
node_type = "MatMul"
node_domain = ""
node_args = ["1455", "1418", "1456"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_128_FusedMatMulAndScale]
name = 'MatMul_128_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_128_FusedMatMulAndScale.auxiliary]
[functions.MatMul_128_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_128_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["270", "294", "325"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_1328_FusedMatMulAndScale]
name = 'MatMul_1328_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1328_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1328_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1328_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1645", "1669", "1700"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_1354]
name = 'MatMul_1354'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1354.auxiliary]
[functions.MatMul_1354.auxiliary.onnx]
node_name = "MatMul_1354"
node_type = "MatMul"
node_domain = ""
node_args = ["1730", "1693", "1731"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_154]
name = 'MatMul_154'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_154.auxiliary]
[functions.MatMul_154.auxiliary.onnx]
node_name = "MatMul_154"
node_type = "MatMul"
node_domain = ""
node_args = ["355", "318", "356"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_1568_FusedMatMulAndScale]
name = 'MatMul_1568_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1568_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1568_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1568_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1920", "1944", "1975"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_1594]
name = 'MatMul_1594'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1594.auxiliary]
[functions.MatMul_1594.auxiliary.onnx]
node_name = "MatMul_1594"
node_type = "MatMul"
node_domain = ""
node_args = ["2005", "1968", "2006"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_1808_FusedMatMulAndScale]
name = 'MatMul_1808_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1808_FusedMatMulAndScale.auxiliary]
[functions.MatMul_1808_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_1808_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2195", "2219", "2250"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_1834]
name = 'MatMul_1834'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_1834.auxiliary]
[functions.MatMul_1834.auxiliary.onnx]
node_name = "MatMul_1834"
node_type = "MatMul"
node_domain = ""
node_args = ["2280", "2243", "2281"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_2048_FusedMatMulAndScale]
name = 'MatMul_2048_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2048_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2048_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2048_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2470", "2494", "2525"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_2074]
name = 'MatMul_2074'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2074.auxiliary]
[functions.MatMul_2074.auxiliary.onnx]
node_name = "MatMul_2074"
node_type = "MatMul"
node_domain = ""
node_args = ["2555", "2518", "2556"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_2288_FusedMatMulAndScale]
name = 'MatMul_2288_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2288_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2288_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2288_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["2745", "2769", "2800"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_2314]
name = 'MatMul_2314'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2314.auxiliary]
[functions.MatMul_2314.auxiliary.onnx]
node_name = "MatMul_2314"
node_type = "MatMul"
node_domain = ""
node_args = ["2830", "2793", "2831"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_2528_FusedMatMulAndScale]
name = 'MatMul_2528_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2528_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2528_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2528_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3020", "3044", "3075"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_2554]
name = 'MatMul_2554'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2554.auxiliary]
[functions.MatMul_2554.auxiliary.onnx]
node_name = "MatMul_2554"
node_type = "MatMul"
node_domain = ""
node_args = ["3105", "3068", "3106"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_2768_FusedMatMulAndScale]
name = 'MatMul_2768_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2768_FusedMatMulAndScale.auxiliary]
[functions.MatMul_2768_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_2768_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["3295", "3319", "3350"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_2794]
name = 'MatMul_2794'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_2794.auxiliary]
[functions.MatMul_2794.auxiliary.onnx]
node_name = "MatMul_2794"
node_type = "MatMul"
node_domain = ""
node_args = ["3380", "3343", "3381"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_368_FusedMatMulAndScale]
name = 'MatMul_368_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_368_FusedMatMulAndScale.auxiliary]
[functions.MatMul_368_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_368_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["545", "569", "600"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_394]
name = 'MatMul_394'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_394.auxiliary]
[functions.MatMul_394.auxiliary.onnx]
node_name = "MatMul_394"
node_type = "MatMul"
node_domain = ""
node_args = ["630", "593", "631"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_608_FusedMatMulAndScale]
name = 'MatMul_608_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_608_FusedMatMulAndScale.auxiliary]
[functions.MatMul_608_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_608_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["820", "844", "875"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_634]
name = 'MatMul_634'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_634.auxiliary]
[functions.MatMul_634.auxiliary.onnx]
node_name = "MatMul_634"
node_type = "MatMul"
node_domain = ""
node_args = ["905", "868", "906"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.MatMul_848_FusedMatMulAndScale]
name = 'MatMul_848_FusedMatMulAndScale'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_848_FusedMatMulAndScale.auxiliary]
[functions.MatMul_848_FusedMatMulAndScale.auxiliary.onnx]
node_name = "MatMul_848_FusedMatMulAndScale"
node_type = "FusedMatMul"
node_domain = "com.microsoft"
node_args = ["1095", "1119", "1150"]
node_arg_shapes = [[1, 12, 256, 64], [1, 12, 64, 256], [1, 12, 256, 256]]

[functions.MatMul_874]
name = 'MatMul_874'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.MatMul_874.auxiliary]
[functions.MatMul_874.auxiliary.onnx]
node_name = "MatMul_874"
node_type = "MatMul"
node_domain = ""
node_args = ["1180", "1143", "1181"]
node_arg_shapes = [[1, 12, 256, 256], [1, 12, 256, 64], [1, 12, 256, 64]]

[functions.mlas_impl_01abcfc6531cd36088fed3a9731135f1]
name = 'mlas_impl_01abcfc6531cd36088fed3a9731135f1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_02642cfab8af36b7c7fcccfea57bc745]
name = 'mlas_impl_02642cfab8af36b7c7fcccfea57bc745'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_11a46f2e2c953e2b8b9f8d24463ddfcc]
name = 'mlas_impl_11a46f2e2c953e2b8b9f8d24463ddfcc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_17955279af5723bd1a67b93bfbb2fd1e]
name = 'mlas_impl_17955279af5723bd1a67b93bfbb2fd1e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_1ab320463205fcd0ba7eff01728375b5]
name = 'mlas_impl_1ab320463205fcd0ba7eff01728375b5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2caea62a3f20c9cfd7169a269d38a966]
name = 'mlas_impl_2caea62a3f20c9cfd7169a269d38a966'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_2de8e18a7ff150dfb55a3ba1a9bff08b]
name = 'mlas_impl_2de8e18a7ff150dfb55a3ba1a9bff08b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_32eb0f0d9df83c8a040980efca65463e]
name = 'mlas_impl_32eb0f0d9df83c8a040980efca65463e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_3cde27087221fb3c950b728a0a6f6cfd]
name = 'mlas_impl_3cde27087221fb3c950b728a0a6f6cfd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_40d0bafa533081669414e9cc8132dce2]
name = 'mlas_impl_40d0bafa533081669414e9cc8132dce2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4772569c6e7e2ffc5f73501700df0b37]
name = 'mlas_impl_4772569c6e7e2ffc5f73501700df0b37'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4c6b5742fa4b34621ee5283bde13c93e]
name = 'mlas_impl_4c6b5742fa4b34621ee5283bde13c93e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4c9974900dbee241b4fb0e9a13aec79e]
name = 'mlas_impl_4c9974900dbee241b4fb0e9a13aec79e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4ef72da5588be5d4014ec0d87d45c629]
name = 'mlas_impl_4ef72da5588be5d4014ec0d87d45c629'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_4f9334e6f822ccc3d4331b51c17929f6]
name = 'mlas_impl_4f9334e6f822ccc3d4331b51c17929f6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_51888ea22956121fd1dd550bf82ba5d1]
name = 'mlas_impl_51888ea22956121fd1dd550bf82ba5d1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_547762e690feb3319aa8dcc5a2a706a8]
name = 'mlas_impl_547762e690feb3319aa8dcc5a2a706a8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_59a26329bca29dc9c311c206809a29ad]
name = 'mlas_impl_59a26329bca29dc9c311c206809a29ad'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_5a2ef8a710bb1b78cd5eaee6b7ec8dd0]
name = 'mlas_impl_5a2ef8a710bb1b78cd5eaee6b7ec8dd0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_681b1e5c6c95af38be7c2fb535b0009e]
name = 'mlas_impl_681b1e5c6c95af38be7c2fb535b0009e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_6bf1706c6017b482a913a1649cf585e1]
name = 'mlas_impl_6bf1706c6017b482a913a1649cf585e1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_6e18f4093bac99de3ca0d95cc2e517fd]
name = 'mlas_impl_6e18f4093bac99de3ca0d95cc2e517fd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_77cde10438911f4061f19afa13d0011e]
name = 'mlas_impl_77cde10438911f4061f19afa13d0011e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_799bbf43d966b8ee08f4520432fc2228]
name = 'mlas_impl_799bbf43d966b8ee08f4520432fc2228'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_7b888e9e697fa040746ffd558da4d6da]
name = 'mlas_impl_7b888e9e697fa040746ffd558da4d6da'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_804897f810ccc996bfe8c54430ecd919]
name = 'mlas_impl_804897f810ccc996bfe8c54430ecd919'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8456f4e5f4e95ca2ae1df14ff0075d91]
name = 'mlas_impl_8456f4e5f4e95ca2ae1df14ff0075d91'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8c9821072a22bd74e03a2cde0a0c9ac6]
name = 'mlas_impl_8c9821072a22bd74e03a2cde0a0c9ac6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_8f08e27ae8fceec1aff231e7aa573732]
name = 'mlas_impl_8f08e27ae8fceec1aff231e7aa573732'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_930f2c2bcd617acb64e29cde4bbe4651]
name = 'mlas_impl_930f2c2bcd617acb64e29cde4bbe4651'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9375103345d0708c50a125db20212e9b]
name = 'mlas_impl_9375103345d0708c50a125db20212e9b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9396a204173b53ddcca908d0323537a0]
name = 'mlas_impl_9396a204173b53ddcca908d0323537a0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_96a417f446738f1d40863914bd2b4a22]
name = 'mlas_impl_96a417f446738f1d40863914bd2b4a22'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9d7e0cdc530a2b2d9800c7bb496ecfe6]
name = 'mlas_impl_9d7e0cdc530a2b2d9800c7bb496ecfe6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9e5d9857f891526183c5c599ab71238a]
name = 'mlas_impl_9e5d9857f891526183c5c599ab71238a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_9e97b2eaf6e6cfafbc901325e9112593]
name = 'mlas_impl_9e97b2eaf6e6cfafbc901325e9112593'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_a830fcd8d6283151e6a860b2f013f110]
name = 'mlas_impl_a830fcd8d6283151e6a860b2f013f110'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_abd5bfbb76c7c2e15f752515bb26ad54]
name = 'mlas_impl_abd5bfbb76c7c2e15f752515bb26ad54'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b11d0250e24b1b200ef5e87ba697aa10]
name = 'mlas_impl_b11d0250e24b1b200ef5e87ba697aa10'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_b9111e7337b7701133f41b2d7fd984ee]
name = 'mlas_impl_b9111e7337b7701133f41b2d7fd984ee'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_bbcafaf5e08dee78900d5a9556e6ac7e]
name = 'mlas_impl_bbcafaf5e08dee78900d5a9556e6ac7e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_c51e33b0c9ed976c3828ee1030f2fe3e]
name = 'mlas_impl_c51e33b0c9ed976c3828ee1030f2fe3e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_ddc9c50f623f83b4382fe00c93680940]
name = 'mlas_impl_ddc9c50f623f83b4382fe00c93680940'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e631d1de0b58ab4499b0a4c9394dc58a]
name = 'mlas_impl_e631d1de0b58ab4499b0a4c9394dc58a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e7e37f6b02691fa6a2f2b3324e37ee12]
name = 'mlas_impl_e7e37f6b02691fa6a2f2b3324e37ee12'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_e81003f339673bf68f700f879c26e7f6]
name = 'mlas_impl_e81003f339673bf68f700f879c26e7f6'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_f57e40ff0f0a83688c17c4499ab6f998]
name = 'mlas_impl_f57e40ff0f0a83688c17c4499ab6f998'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 2304 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.mlas_impl_fd3e00e48af08c15409cfc0ee092aca3]
name = 'mlas_impl_fd3e00e48af08c15409cfc0ee092aca3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768 ], affine_map = [ 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_02a607ecfc57ff197431e97cbe852dc5]
name = 'nest_impl_02a607ecfc57ff197431e97cbe852dc5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_0945abc10c9cc945f8b1364374fe5a98]
name = 'nest_impl_0945abc10c9cc945f8b1364374fe5a98'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_11bfe9cfa246e9c1985ccacf9a9fc17e]
name = 'nest_impl_11bfe9cfa246e9c1985ccacf9a9fc17e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_158d9c4d5641eb336469750259a8c3e3]
name = 'nest_impl_158d9c4d5641eb336469750259a8c3e3'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_1f4983e7e88067e82e55171dcddb8401]
name = 'nest_impl_1f4983e7e88067e82e55171dcddb8401'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2162ad391f5d574ca7a0eca769042d19]
name = 'nest_impl_2162ad391f5d574ca7a0eca769042d19'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_259b362827b5885942ef0647f576d15d]
name = 'nest_impl_259b362827b5885942ef0647f576d15d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_260ebde3664cd1e50be549cb83c28ab8]
name = 'nest_impl_260ebde3664cd1e50be549cb83c28ab8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_2883d76303b2b7e49b511e9c3f8e3de2]
name = 'nest_impl_2883d76303b2b7e49b511e9c3f8e3de2'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3083a55899925ac89db7c953418cd636]
name = 'nest_impl_3083a55899925ac89db7c953418cd636'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_368ecfca22cec6f2bceab1d359d96217]
name = 'nest_impl_368ecfca22cec6f2bceab1d359d96217'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_3a05a5c3dc94f568bb651e201008a37c]
name = 'nest_impl_3a05a5c3dc94f568bb651e201008a37c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_42135ec0dbe6e39b82b9f5dc307f77bf]
name = 'nest_impl_42135ec0dbe6e39b82b9f5dc307f77bf'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_42e8f76940ec7386f867d418bc20b0c1]
name = 'nest_impl_42e8f76940ec7386f867d418bc20b0c1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4422157f0c204799f88d45f2a12e23dc]
name = 'nest_impl_4422157f0c204799f88d45f2a12e23dc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_46f34163457b7da029b7351000ff041b]
name = 'nest_impl_46f34163457b7da029b7351000ff041b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4a04a86fef328b44ac275f8ed35c259c]
name = 'nest_impl_4a04a86fef328b44ac275f8ed35c259c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4e013252920e241f132a352d04305b6b]
name = 'nest_impl_4e013252920e241f132a352d04305b6b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_4f4c41b5109821944d6fdb015f93d127]
name = 'nest_impl_4f4c41b5109821944d6fdb015f93d127'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_54e5604218d7c7143e07a22d121d7ac0]
name = 'nest_impl_54e5604218d7c7143e07a22d121d7ac0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5a517afeb4ad445b4cf132aed3663114]
name = 'nest_impl_5a517afeb4ad445b4cf132aed3663114'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_5fdfab2418b4c67654b5bd612fdd8231]
name = 'nest_impl_5fdfab2418b4c67654b5bd612fdd8231'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_652f67c0a70d1b4b201eabf7308c6417]
name = 'nest_impl_652f67c0a70d1b4b201eabf7308c6417'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_65cd93edeef573e1f5c11f845f2700ce]
name = 'nest_impl_65cd93edeef573e1f5c11f845f2700ce'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6821206985504bf04b87df81a6cb1a6f]
name = 'nest_impl_6821206985504bf04b87df81a6cb1a6f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_6eb0e552ed7e85c3df9a23c8844a4fc1]
name = 'nest_impl_6eb0e552ed7e85c3df9a23c8844a4fc1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_75c0af5b29b7939fc1621faff2c02869]
name = 'nest_impl_75c0af5b29b7939fc1621faff2c02869'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7c3680890c50e458793b66e8246a9ccf]
name = 'nest_impl_7c3680890c50e458793b66e8246a9ccf'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_7f730c3da0e1c17292c7f6b2ac1c903e]
name = 'nest_impl_7f730c3da0e1c17292c7f6b2ac1c903e'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_804bd40a619531f948562e0007d631bc]
name = 'nest_impl_804bd40a619531f948562e0007d631bc'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_83917c74d39e2592376fcf9a638cbf70]
name = 'nest_impl_83917c74d39e2592376fcf9a638cbf70'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_87604fa1eec3ff2013cf436b05a84411]
name = 'nest_impl_87604fa1eec3ff2013cf436b05a84411'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8775ac36e2d17f3fdf15c81f90f7065d]
name = 'nest_impl_8775ac36e2d17f3fdf15c81f90f7065d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_8f8434e1f21722bd3e9d6f29ab865a9a]
name = 'nest_impl_8f8434e1f21722bd3e9d6f29ab865a9a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_954e31cf85becaee48f077815f43cc74]
name = 'nest_impl_954e31cf85becaee48f077815f43cc74'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_989bbe032021cc6018599f613fbcd529]
name = 'nest_impl_989bbe032021cc6018599f613fbcd529'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9996d3ceef64f9b6d2b2e375a97246b7]
name = 'nest_impl_9996d3ceef64f9b6d2b2e375a97246b7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_9ac0dd49d5abeafadcc04accff3749f4]
name = 'nest_impl_9ac0dd49d5abeafadcc04accff3749f4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a267e8d8aec887d2e7198f31de4df816]
name = 'nest_impl_a267e8d8aec887d2e7198f31de4df816'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a5253a40858406b2e9895e447fea535d]
name = 'nest_impl_a5253a40858406b2e9895e447fea535d'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a64e4a09f10b96ea078fc05fb59715c4]
name = 'nest_impl_a64e4a09f10b96ea078fc05fb59715c4'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_a6bd042a7a9e85eb52facc49f192ac3c]
name = 'nest_impl_a6bd042a7a9e85eb52facc49f192ac3c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ad724043490c1d8a422ffd37364c7af9]
name = 'nest_impl_ad724043490c1d8a422ffd37364c7af9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b10a14b8fccd5d620961fc6e8a36b386]
name = 'nest_impl_b10a14b8fccd5d620961fc6e8a36b386'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b394660e0fa3736eac6b02f8ad063583]
name = 'nest_impl_b394660e0fa3736eac6b02f8ad063583'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b39d067c56d59c671c459c3cf09a0ea8]
name = 'nest_impl_b39d067c56d59c671c459c3cf09a0ea8'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b60697c3d83bc6e5808177a6efc47553]
name = 'nest_impl_b60697c3d83bc6e5808177a6efc47553'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b6f93363b8dfb2bff504232ca953f93a]
name = 'nest_impl_b6f93363b8dfb2bff504232ca953f93a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_b7a5ea980018a7436623011815ec72d5]
name = 'nest_impl_b7a5ea980018a7436623011815ec72d5'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bb257a2c99217afd599054a3510a6d6b]
name = 'nest_impl_bb257a2c99217afd599054a3510a6d6b'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_be0436b901d118b397ca3faff6804114]
name = 'nest_impl_be0436b901d118b397ca3faff6804114'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_bf08a9f79f0c98a1afa15a2fd7c01860]
name = 'nest_impl_bf08a9f79f0c98a1afa15a2fd7c01860'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c0b8051e195e84b5d7b7e853c4e32a5c]
name = 'nest_impl_c0b8051e195e84b5d7b7e853c4e32a5c'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c0b8470285ae2bd94a8dc34666987929]
name = 'nest_impl_c0b8470285ae2bd94a8dc34666987929'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c0fd32796505393360d1e4f9e184b4c0]
name = 'nest_impl_c0fd32796505393360d1e4f9e184b4c0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_c6a7b78474b46ae740a0017bf616a8a9]
name = 'nest_impl_c6a7b78474b46ae740a0017bf616a8a9'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_cf70a987ab764764485b255b1154b6eb]
name = 'nest_impl_cf70a987ab764764485b255b1154b6eb'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_d02c3f362bd59515a93e2de6fba8e39f]
name = 'nest_impl_d02c3f362bd59515a93e2de6fba8e39f'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_da193bd5b1ad2497da28c1834b264742]
name = 'nest_impl_da193bd5b1ad2497da28c1834b264742'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_de7dfc4d55f1b6ad0a838ca66ea24156]
name = 'nest_impl_de7dfc4d55f1b6ad0a838ca66ea24156'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e5198d2fab78c60f58d8d7af4fcbfcfa]
name = 'nest_impl_e5198d2fab78c60f58d8d7af4fcbfcfa'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e52f0a7ea65bf82f8358832797ae4316]
name = 'nest_impl_e52f0a7ea65bf82f8358832797ae4316'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_e7ec67226baeb117b0df9b83316607cd]
name = 'nest_impl_e7ec67226baeb117b0df9b83316607cd'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ea7220d721bb667e75cbc3b09f141876]
name = 'nest_impl_ea7220d721bb667e75cbc3b09f141876'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 2304 ], affine_map = [ 2304, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_eccd9890ac632adc0677b88dc98c4d35]
name = 'nest_impl_eccd9890ac632adc0677b88dc98c4d35'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_ee280a4f9f2d20df139c2b8ea62ff55a]
name = 'nest_impl_ee280a4f9f2d20df139c2b8ea62ff55a'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 64, 256 ], affine_map = [ 196608, 16384, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_efa27e83f86f720e38bfa8a25f69e3e1]
name = 'nest_impl_efa27e83f86f720e38bfa8a25f69e3e1'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 256 ], affine_map = [ 786432, 65536, 256, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 1, 12, 256, 64 ], affine_map = [ 196608, 16384, 64, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f0ed29331f9d1bc48aa93b53128546e0]
name = 'nest_impl_f0ed29331f9d1bc48aa93b53128546e0'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f78b22c3231854bee719d87d739bef82]
name = 'nest_impl_f78b22c3231854bee719d87d739bef82'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_f8cce4d335beda21dd2003c7fc941ec7]
name = 'nest_impl_f8cce4d335beda21dd2003c7fc941ec7'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_fa00e6503bebc2d81015260705f1bd65]
name = 'nest_impl_fa00e6503bebc2d81015260705f1bd65'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 3072, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[functions.nest_impl_fc56adaa1fdf21a6443672c71ae4c7cf]
name = 'nest_impl_fc56adaa1fdf21a6443672c71ae4c7cf'
description = ''
calling_convention = "cdecl"
arguments = [{name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 768 ], affine_map = [ 768, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 768, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}, {name = '', description = '', logical_type = "affine_array", declared_type = 'float*', element_type = 'float', usage = "input_output", shape = [ 256, 3072 ], affine_map = [ 3072, 1 ], affine_offset = 0}]
return = {name = '', description = '', logical_type = "void", declared_type = 'void', element_type = 'void', usage = "output"}

[target]
[target.required]
os = "linux"

[target.required.CPU]
architecture = "x86_64"
extensions = ["+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3+sse2", "+cx16", "+sahf", "+prfchw", "+bmi2", "+fsgsbase", "+popcnt", "+aes", "+xsaves", "+xsavec", "+mmx", "+rdseed", "+clflushopt", "+xsave", "+64bit", "+invpcid", "+avx", "+cx8", "+fma", "+bmi", "+rdrnd", "+sse4.1", "+sse4.2", "+avx2", "+fxsr", "+sse", "+lzcnt", "+pclmul", "+f16c", "+ssse3", "+sgx", "+cmov", "+movbe", "+xsaveopt", "+adx", "+sse3"]

[dependencies]
link_target = "torch-jit-export.o"
deploy_files = []
dynamic = []

[compiled_with]
compiler = ''
flags = ''
crt = ''
libraries = []

[declaration]
code = '''
#endif // __TOML__
//
// Header for RoboCode library torch-jit-export
//

#include <stdint.h>

#if defined(__cplusplus)
extern "C"
{
#endif // defined(__cplusplus)

//
// Functions
//

void Gemm_52_reshape_B(float*, float*);


int64_t Gemm_52_reshape_B_size();


void nest_impl_b60697c3d83bc6e5808177a6efc47553(float*, float*, float*);


void mlas_impl_96a417f446738f1d40863914bd2b4a22(float*, float*, float*, float*);


void Gemm_52(float*, float*, float*, float*);


void nest_impl_3a05a5c3dc94f568bb651e201008a37c(float*, float*, float*);


void MatMul_128_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_efa27e83f86f720e38bfa8a25f69e3e1(float*, float*, float*);


void MatMul_154(float*, float*, float*);


void Gemm_195_reshape_B(float*, float*);


int64_t Gemm_195_reshape_B_size();


void nest_impl_954e31cf85becaee48f077815f43cc74(float*, float*, float*);


void mlas_impl_4c9974900dbee241b4fb0e9a13aec79e(float*, float*, float*, float*);


void Gemm_195(float*, float*, float*, float*);


void Gemm_227_reshape_B(float*, float*);


int64_t Gemm_227_reshape_B_size();


void nest_impl_a5253a40858406b2e9895e447fea535d(float*, float*, float*);


void mlas_impl_799bbf43d966b8ee08f4520432fc2228(float*, float*, float*, float*);


void Gemm_227(float*, float*, float*, float*);


void Gemm_260_reshape_B(float*, float*);


int64_t Gemm_260_reshape_B_size();


void nest_impl_9996d3ceef64f9b6d2b2e375a97246b7(float*, float*, float*);


void mlas_impl_547762e690feb3319aa8dcc5a2a706a8(float*, float*, float*, float*);


void Gemm_260(float*, float*, float*, float*);


void Gemm_292_reshape_B(float*, float*);


int64_t Gemm_292_reshape_B_size();


void nest_impl_cf70a987ab764764485b255b1154b6eb(float*, float*, float*);


void mlas_impl_2caea62a3f20c9cfd7169a269d38a966(float*, float*, float*, float*);


void Gemm_292(float*, float*, float*, float*);


void nest_impl_4e013252920e241f132a352d04305b6b(float*, float*, float*);


void MatMul_368_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_54e5604218d7c7143e07a22d121d7ac0(float*, float*, float*);


void MatMul_394(float*, float*, float*);


void Gemm_435_reshape_B(float*, float*);


int64_t Gemm_435_reshape_B_size();


void nest_impl_8f8434e1f21722bd3e9d6f29ab865a9a(float*, float*, float*);


void mlas_impl_681b1e5c6c95af38be7c2fb535b0009e(float*, float*, float*, float*);


void Gemm_435(float*, float*, float*, float*);


void Gemm_467_reshape_B(float*, float*);


int64_t Gemm_467_reshape_B_size();


void nest_impl_a267e8d8aec887d2e7198f31de4df816(float*, float*, float*);


void mlas_impl_2de8e18a7ff150dfb55a3ba1a9bff08b(float*, float*, float*, float*);


void Gemm_467(float*, float*, float*, float*);


void Gemm_500_reshape_B(float*, float*);


int64_t Gemm_500_reshape_B_size();


void nest_impl_4f4c41b5109821944d6fdb015f93d127(float*, float*, float*);


void mlas_impl_9e97b2eaf6e6cfafbc901325e9112593(float*, float*, float*, float*);


void Gemm_500(float*, float*, float*, float*);


void Gemm_532_reshape_B(float*, float*);


int64_t Gemm_532_reshape_B_size();


void nest_impl_a6bd042a7a9e85eb52facc49f192ac3c(float*, float*, float*);


void mlas_impl_8c9821072a22bd74e03a2cde0a0c9ac6(float*, float*, float*, float*);


void Gemm_532(float*, float*, float*, float*);


void nest_impl_ee280a4f9f2d20df139c2b8ea62ff55a(float*, float*, float*);


void MatMul_608_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_2883d76303b2b7e49b511e9c3f8e3de2(float*, float*, float*);


void MatMul_634(float*, float*, float*);


void Gemm_675_reshape_B(float*, float*);


int64_t Gemm_675_reshape_B_size();


void nest_impl_d02c3f362bd59515a93e2de6fba8e39f(float*, float*, float*);


void mlas_impl_9396a204173b53ddcca908d0323537a0(float*, float*, float*, float*);


void Gemm_675(float*, float*, float*, float*);


void Gemm_707_reshape_B(float*, float*);


int64_t Gemm_707_reshape_B_size();


void nest_impl_fc56adaa1fdf21a6443672c71ae4c7cf(float*, float*, float*);


void mlas_impl_4f9334e6f822ccc3d4331b51c17929f6(float*, float*, float*, float*);


void Gemm_707(float*, float*, float*, float*);


void Gemm_740_reshape_B(float*, float*);


int64_t Gemm_740_reshape_B_size();


void nest_impl_b394660e0fa3736eac6b02f8ad063583(float*, float*, float*);


void mlas_impl_02642cfab8af36b7c7fcccfea57bc745(float*, float*, float*, float*);


void Gemm_740(float*, float*, float*, float*);


void Gemm_772_reshape_B(float*, float*);


int64_t Gemm_772_reshape_B_size();


void nest_impl_42e8f76940ec7386f867d418bc20b0c1(float*, float*, float*);


void mlas_impl_7b888e9e697fa040746ffd558da4d6da(float*, float*, float*, float*);


void Gemm_772(float*, float*, float*, float*);


void nest_impl_b6f93363b8dfb2bff504232ca953f93a(float*, float*, float*);


void MatMul_848_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_eccd9890ac632adc0677b88dc98c4d35(float*, float*, float*);


void MatMul_874(float*, float*, float*);


void Gemm_915_reshape_B(float*, float*);


int64_t Gemm_915_reshape_B_size();


void nest_impl_989bbe032021cc6018599f613fbcd529(float*, float*, float*);


void mlas_impl_804897f810ccc996bfe8c54430ecd919(float*, float*, float*, float*);


void Gemm_915(float*, float*, float*, float*);


void Gemm_947_reshape_B(float*, float*);


int64_t Gemm_947_reshape_B_size();


void nest_impl_ad724043490c1d8a422ffd37364c7af9(float*, float*, float*);


void mlas_impl_9e5d9857f891526183c5c599ab71238a(float*, float*, float*, float*);


void Gemm_947(float*, float*, float*, float*);


void Gemm_980_reshape_B(float*, float*);


int64_t Gemm_980_reshape_B_size();


void nest_impl_f0ed29331f9d1bc48aa93b53128546e0(float*, float*, float*);


void mlas_impl_59a26329bca29dc9c311c206809a29ad(float*, float*, float*, float*);


void Gemm_980(float*, float*, float*, float*);


void Gemm_1012_reshape_B(float*, float*);


int64_t Gemm_1012_reshape_B_size();


void nest_impl_ea7220d721bb667e75cbc3b09f141876(float*, float*, float*);


void mlas_impl_9375103345d0708c50a125db20212e9b(float*, float*, float*, float*);


void Gemm_1012(float*, float*, float*, float*);


void nest_impl_c0b8470285ae2bd94a8dc34666987929(float*, float*, float*);


void MatMul_1088_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_260ebde3664cd1e50be549cb83c28ab8(float*, float*, float*);


void MatMul_1114(float*, float*, float*);


void Gemm_1155_reshape_B(float*, float*);


int64_t Gemm_1155_reshape_B_size();


void nest_impl_e5198d2fab78c60f58d8d7af4fcbfcfa(float*, float*, float*);


void mlas_impl_3cde27087221fb3c950b728a0a6f6cfd(float*, float*, float*, float*);


void Gemm_1155(float*, float*, float*, float*);


void Gemm_1187_reshape_B(float*, float*);


int64_t Gemm_1187_reshape_B_size();


void nest_impl_b39d067c56d59c671c459c3cf09a0ea8(float*, float*, float*);


void mlas_impl_51888ea22956121fd1dd550bf82ba5d1(float*, float*, float*, float*);


void Gemm_1187(float*, float*, float*, float*);


void Gemm_1220_reshape_B(float*, float*);


int64_t Gemm_1220_reshape_B_size();


void nest_impl_b10a14b8fccd5d620961fc6e8a36b386(float*, float*, float*);


void mlas_impl_e7e37f6b02691fa6a2f2b3324e37ee12(float*, float*, float*, float*);


void Gemm_1220(float*, float*, float*, float*);


void Gemm_1252_reshape_B(float*, float*);


int64_t Gemm_1252_reshape_B_size();


void nest_impl_11bfe9cfa246e9c1985ccacf9a9fc17e(float*, float*, float*);


void mlas_impl_b9111e7337b7701133f41b2d7fd984ee(float*, float*, float*, float*);


void Gemm_1252(float*, float*, float*, float*);


void nest_impl_7f730c3da0e1c17292c7f6b2ac1c903e(float*, float*, float*);


void MatMul_1328_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_5a517afeb4ad445b4cf132aed3663114(float*, float*, float*);


void MatMul_1354(float*, float*, float*);


void Gemm_1395_reshape_B(float*, float*);


int64_t Gemm_1395_reshape_B_size();


void nest_impl_02a607ecfc57ff197431e97cbe852dc5(float*, float*, float*);


void mlas_impl_ddc9c50f623f83b4382fe00c93680940(float*, float*, float*, float*);


void Gemm_1395(float*, float*, float*, float*);


void Gemm_1427_reshape_B(float*, float*);


int64_t Gemm_1427_reshape_B_size();


void nest_impl_75c0af5b29b7939fc1621faff2c02869(float*, float*, float*);


void mlas_impl_a830fcd8d6283151e6a860b2f013f110(float*, float*, float*, float*);


void Gemm_1427(float*, float*, float*, float*);


void Gemm_1460_reshape_B(float*, float*);


int64_t Gemm_1460_reshape_B_size();


void nest_impl_fa00e6503bebc2d81015260705f1bd65(float*, float*, float*);


void mlas_impl_4772569c6e7e2ffc5f73501700df0b37(float*, float*, float*, float*);


void Gemm_1460(float*, float*, float*, float*);


void Gemm_1492_reshape_B(float*, float*);


int64_t Gemm_1492_reshape_B_size();


void nest_impl_c0b8051e195e84b5d7b7e853c4e32a5c(float*, float*, float*);


void mlas_impl_11a46f2e2c953e2b8b9f8d24463ddfcc(float*, float*, float*, float*);


void Gemm_1492(float*, float*, float*, float*);


void nest_impl_804bd40a619531f948562e0007d631bc(float*, float*, float*);


void MatMul_1568_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_be0436b901d118b397ca3faff6804114(float*, float*, float*);


void MatMul_1594(float*, float*, float*);


void Gemm_1635_reshape_B(float*, float*);


int64_t Gemm_1635_reshape_B_size();


void nest_impl_e52f0a7ea65bf82f8358832797ae4316(float*, float*, float*);


void mlas_impl_6bf1706c6017b482a913a1649cf585e1(float*, float*, float*, float*);


void Gemm_1635(float*, float*, float*, float*);


void Gemm_1667_reshape_B(float*, float*);


int64_t Gemm_1667_reshape_B_size();


void nest_impl_8775ac36e2d17f3fdf15c81f90f7065d(float*, float*, float*);


void mlas_impl_01abcfc6531cd36088fed3a9731135f1(float*, float*, float*, float*);


void Gemm_1667(float*, float*, float*, float*);


void Gemm_1700_reshape_B(float*, float*);


int64_t Gemm_1700_reshape_B_size();


void nest_impl_bb257a2c99217afd599054a3510a6d6b(float*, float*, float*);


void mlas_impl_32eb0f0d9df83c8a040980efca65463e(float*, float*, float*, float*);


void Gemm_1700(float*, float*, float*, float*);


void Gemm_1732_reshape_B(float*, float*);


int64_t Gemm_1732_reshape_B_size();


void nest_impl_9ac0dd49d5abeafadcc04accff3749f4(float*, float*, float*);


void mlas_impl_8456f4e5f4e95ca2ae1df14ff0075d91(float*, float*, float*, float*);


void Gemm_1732(float*, float*, float*, float*);


void nest_impl_0945abc10c9cc945f8b1364374fe5a98(float*, float*, float*);


void MatMul_1808_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_6eb0e552ed7e85c3df9a23c8844a4fc1(float*, float*, float*);


void MatMul_1834(float*, float*, float*);


void Gemm_1875_reshape_B(float*, float*);


int64_t Gemm_1875_reshape_B_size();


void nest_impl_7c3680890c50e458793b66e8246a9ccf(float*, float*, float*);


void mlas_impl_6e18f4093bac99de3ca0d95cc2e517fd(float*, float*, float*, float*);


void Gemm_1875(float*, float*, float*, float*);


void Gemm_1907_reshape_B(float*, float*);


int64_t Gemm_1907_reshape_B_size();


void nest_impl_87604fa1eec3ff2013cf436b05a84411(float*, float*, float*);


void mlas_impl_17955279af5723bd1a67b93bfbb2fd1e(float*, float*, float*, float*);


void Gemm_1907(float*, float*, float*, float*);


void Gemm_1940_reshape_B(float*, float*);


int64_t Gemm_1940_reshape_B_size();


void nest_impl_46f34163457b7da029b7351000ff041b(float*, float*, float*);


void mlas_impl_abd5bfbb76c7c2e15f752515bb26ad54(float*, float*, float*, float*);


void Gemm_1940(float*, float*, float*, float*);


void Gemm_1972_reshape_B(float*, float*);


int64_t Gemm_1972_reshape_B_size();


void nest_impl_5fdfab2418b4c67654b5bd612fdd8231(float*, float*, float*);


void mlas_impl_4c6b5742fa4b34621ee5283bde13c93e(float*, float*, float*, float*);


void Gemm_1972(float*, float*, float*, float*);


void nest_impl_3083a55899925ac89db7c953418cd636(float*, float*, float*);


void MatMul_2048_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_a64e4a09f10b96ea078fc05fb59715c4(float*, float*, float*);


void MatMul_2074(float*, float*, float*);


void Gemm_2115_reshape_B(float*, float*);


int64_t Gemm_2115_reshape_B_size();


void nest_impl_f8cce4d335beda21dd2003c7fc941ec7(float*, float*, float*);


void mlas_impl_4ef72da5588be5d4014ec0d87d45c629(float*, float*, float*, float*);


void Gemm_2115(float*, float*, float*, float*);


void Gemm_2147_reshape_B(float*, float*);


int64_t Gemm_2147_reshape_B_size();


void nest_impl_368ecfca22cec6f2bceab1d359d96217(float*, float*, float*);


void mlas_impl_b11d0250e24b1b200ef5e87ba697aa10(float*, float*, float*, float*);


void Gemm_2147(float*, float*, float*, float*);


void Gemm_2180_reshape_B(float*, float*);


int64_t Gemm_2180_reshape_B_size();


void nest_impl_259b362827b5885942ef0647f576d15d(float*, float*, float*);


void mlas_impl_fd3e00e48af08c15409cfc0ee092aca3(float*, float*, float*, float*);


void Gemm_2180(float*, float*, float*, float*);


void Gemm_2212_reshape_B(float*, float*);


int64_t Gemm_2212_reshape_B_size();


void nest_impl_4a04a86fef328b44ac275f8ed35c259c(float*, float*, float*);


void mlas_impl_c51e33b0c9ed976c3828ee1030f2fe3e(float*, float*, float*, float*);


void Gemm_2212(float*, float*, float*, float*);


void nest_impl_e7ec67226baeb117b0df9b83316607cd(float*, float*, float*);


void MatMul_2288_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_6821206985504bf04b87df81a6cb1a6f(float*, float*, float*);


void MatMul_2314(float*, float*, float*);


void Gemm_2355_reshape_B(float*, float*);


int64_t Gemm_2355_reshape_B_size();


void nest_impl_c0fd32796505393360d1e4f9e184b4c0(float*, float*, float*);


void mlas_impl_40d0bafa533081669414e9cc8132dce2(float*, float*, float*, float*);


void Gemm_2355(float*, float*, float*, float*);


void Gemm_2387_reshape_B(float*, float*);


int64_t Gemm_2387_reshape_B_size();


void nest_impl_b7a5ea980018a7436623011815ec72d5(float*, float*, float*);


void mlas_impl_77cde10438911f4061f19afa13d0011e(float*, float*, float*, float*);


void Gemm_2387(float*, float*, float*, float*);


void Gemm_2420_reshape_B(float*, float*);


int64_t Gemm_2420_reshape_B_size();


void nest_impl_158d9c4d5641eb336469750259a8c3e3(float*, float*, float*);


void mlas_impl_e81003f339673bf68f700f879c26e7f6(float*, float*, float*, float*);


void Gemm_2420(float*, float*, float*, float*);


void Gemm_2452_reshape_B(float*, float*);


int64_t Gemm_2452_reshape_B_size();


void nest_impl_4422157f0c204799f88d45f2a12e23dc(float*, float*, float*);


void mlas_impl_f57e40ff0f0a83688c17c4499ab6f998(float*, float*, float*, float*);


void Gemm_2452(float*, float*, float*, float*);


void nest_impl_c6a7b78474b46ae740a0017bf616a8a9(float*, float*, float*);


void MatMul_2528_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_bf08a9f79f0c98a1afa15a2fd7c01860(float*, float*, float*);


void MatMul_2554(float*, float*, float*);


void Gemm_2595_reshape_B(float*, float*);


int64_t Gemm_2595_reshape_B_size();


void nest_impl_65cd93edeef573e1f5c11f845f2700ce(float*, float*, float*);


void mlas_impl_930f2c2bcd617acb64e29cde4bbe4651(float*, float*, float*, float*);


void Gemm_2595(float*, float*, float*, float*);


void Gemm_2627_reshape_B(float*, float*);


int64_t Gemm_2627_reshape_B_size();


void nest_impl_de7dfc4d55f1b6ad0a838ca66ea24156(float*, float*, float*);


void mlas_impl_e631d1de0b58ab4499b0a4c9394dc58a(float*, float*, float*, float*);


void Gemm_2627(float*, float*, float*, float*);


void Gemm_2660_reshape_B(float*, float*);


int64_t Gemm_2660_reshape_B_size();


void nest_impl_42135ec0dbe6e39b82b9f5dc307f77bf(float*, float*, float*);


void mlas_impl_5a2ef8a710bb1b78cd5eaee6b7ec8dd0(float*, float*, float*, float*);


void Gemm_2660(float*, float*, float*, float*);


void Gemm_2692_reshape_B(float*, float*);


int64_t Gemm_2692_reshape_B_size();


void nest_impl_1f4983e7e88067e82e55171dcddb8401(float*, float*, float*);


void mlas_impl_9d7e0cdc530a2b2d9800c7bb496ecfe6(float*, float*, float*, float*);


void Gemm_2692(float*, float*, float*, float*);


void nest_impl_652f67c0a70d1b4b201eabf7308c6417(float*, float*, float*);


void MatMul_2768_FusedMatMulAndScale(float*, float*, float*);


void nest_impl_83917c74d39e2592376fcf9a638cbf70(float*, float*, float*);


void MatMul_2794(float*, float*, float*);


void Gemm_2835_reshape_B(float*, float*);


int64_t Gemm_2835_reshape_B_size();


void nest_impl_f78b22c3231854bee719d87d739bef82(float*, float*, float*);


void mlas_impl_8f08e27ae8fceec1aff231e7aa573732(float*, float*, float*, float*);


void Gemm_2835(float*, float*, float*, float*);


void Gemm_2867_reshape_B(float*, float*);


int64_t Gemm_2867_reshape_B_size();


void nest_impl_2162ad391f5d574ca7a0eca769042d19(float*, float*, float*);


void mlas_impl_1ab320463205fcd0ba7eff01728375b5(float*, float*, float*, float*);


void Gemm_2867(float*, float*, float*, float*);


void Gemm_2900_reshape_B(float*, float*);


int64_t Gemm_2900_reshape_B_size();


void nest_impl_da193bd5b1ad2497da28c1834b264742(float*, float*, float*);


void mlas_impl_bbcafaf5e08dee78900d5a9556e6ac7e(float*, float*, float*, float*);


void Gemm_2900(float*, float*, float*, float*);


#if defined(__cplusplus)
} // extern "C"
#endif // defined(__cplusplus)

#ifdef __TOML__
'''

#endif // TOML

#endif // __torch-jit-export__