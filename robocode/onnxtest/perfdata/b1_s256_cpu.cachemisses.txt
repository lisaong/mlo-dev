# ========
# captured on    : Mon Apr 26 13:51:03 2021
# header version : 1
# data offset    : 296
# data size      : 1017384
# feat offset    : 1017680
# hostname : lisa-msi
# os release : 5.4.0-72-generic
# perf version : 5.4.101
# arch : x86_64
# nrcpus online : 8
# nrcpus avail : 8
# cpudesc : Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz
# cpuid : GenuineIntel,6,158,9
# total memory : 32765148 kB
# cmdline : /usr/lib/linux-hwe-5.4-tools-5.4.0-72/perf record -p 16201 -e cache-misses -g 
# event : name = cache-misses, , id = { 405, 406, 407, 408, 409, 410, 411, 412 }, size = 112, config = 0x3, { sample_period, sample_freq } = 4000, sample_type = IP|TID|TIME|CALLCHAIN|PERIOD, read_format = ID, disabled = 1, inherit = 1, mmap = 1, comm = 1, freq = 1, task = 1, sample_id_all = 1, exclude_guest = 1, mmap2 = 1, comm_exec = 1, ksymbol = 1, bpf_event = 1
# sibling sockets : 0-7
# sibling dies    : 0-7
# sibling threads : 0,4
# sibling threads : 1,5
# sibling threads : 2,6
# sibling threads : 3,7
# CPU 0: Core ID 0, Die ID 0, Socket ID 0
# CPU 1: Core ID 1, Die ID 0, Socket ID 0
# CPU 2: Core ID 2, Die ID 0, Socket ID 0
# CPU 3: Core ID 3, Die ID 0, Socket ID 0
# CPU 4: Core ID 0, Die ID 0, Socket ID 0
# CPU 5: Core ID 1, Die ID 0, Socket ID 0
# CPU 6: Core ID 2, Die ID 0, Socket ID 0
# CPU 7: Core ID 3, Die ID 0, Socket ID 0
# node0 meminfo  : total = 32765148 kB, free = 6368628 kB
# node0 cpu list : 0-7
# pmu mappings: intel_pt = 8, software = 1, power = 19, uprobe = 7, uncore_imc = 10, cpu = 4, cstate_core = 17, uncore_cbox_2 = 13, breakpoint = 5, uncore_cbox_0 = 11, tracepoint = 2, cstate_pkg = 18, uncore_arb = 15, kprobe = 6, i915 = 16, msr = 9, uncore_cbox_3 = 14, uncore_cbox_1 = 12
# CPU cache info:
#  L1 Data                 32K [0,4]
#  L1 Instruction          32K [0,4]
#  L1 Data                 32K [1,5]
#  L1 Instruction          32K [1,5]
#  L1 Data                 32K [2,6]
#  L1 Instruction          32K [2,6]
#  L1 Data                 32K [3,7]
#  L1 Instruction          32K [3,7]
#  L2 Unified             256K [0,4]
#  L2 Unified             256K [1,5]
#  L2 Unified             256K [2,6]
#  L2 Unified             256K [3,7]
#  L3 Unified            6144K [0-7]
# time of first sample : 10555.345107
# time of last sample : 10560.891817
# sample duration :   5546.711 ms
# memory nodes (nr 1, block size 0x8000000):
#    0 [32G]: 0-13,32-273
# bpf_prog_info 2: bpf_prog_7be49e3934a125ba addr 0xffffffffc0219886 size 200
# bpf_prog_info 3: bpf_prog_2a142ef67aaad174 addr 0xffffffffc025347c size 200
# bpf_prog_info 4: bpf_prog_7be49e3934a125ba addr 0xffffffffc02ef153 size 200
# bpf_prog_info 5: bpf_prog_2a142ef67aaad174 addr 0xffffffffc02f148e size 200
# bpf_prog_info 6: bpf_prog_7be49e3934a125ba addr 0xffffffffc0444b5d size 200
# bpf_prog_info 7: bpf_prog_2a142ef67aaad174 addr 0xffffffffc0446888 size 200
# missing features: TRACING_DATA BRANCH_STACK GROUP_DESC AUXTRACE STAT CLOCKID DIR_FORMAT COMPRESSED 
# ========
#
#
# Total Lost Samples: 0
#
# Samples: 14K of event 'cache-misses'
# Event count (approx.): 326444039
#
# Children      Self  Command  Shared Object                  Symbol

#
    58.87%    58.47%  python   onnxruntime_pybind11_state.so  [.] MlasGemmFloatKernelFma3
            |          
             --58.85%--MlasGemmFloatKernelFma3

     9.41%     9.41%  python   libc-2.27.so                   [.] __memmove_avx_unaligned_erms
            |          
            |--2.46%--0x8b4807894810c083
            |          onnxruntime::OpKernelContextInternal::~OpKernelContextInternal
            |          0x7fff78979ab0
            |          |          
            |           --2.46%--onnxruntime::Split::Compute
            |                     __memmove_avx_unaligned_erms
            |          
             --2.33%--0x7efe6e1d1f80
                       0x19d3a8b941e5a900
                       onnxruntime::python::AddTensorAsPyObj
                       __memmove_avx_unaligned_erms

     6.64%     6.62%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::GemmBroadcastBias<float>
     5.17%     0.27%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
            |          
             --4.90%--onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
                       onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     4.90%     4.86%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN
            |          
             --4.86%--0x4848778b48078b48
                       onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
                       onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     4.63%     4.63%  python   onnxruntime_pybind11_state.so  [.] std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN
            |
            ---0x2825048b4864
               std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     4.63%     0.00%  python   [unknown]                      [.] 0x00002825048b4864
            |
            ---0x2825048b4864
               std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     4.63%     0.00%  python   onnxruntime_pybind11_state.so  [.] std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
            |
            ---std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     4.48%     0.00%  python   [unknown]                      [.] 0x4848778b48078b48
            |
            ---0x4848778b48078b48
               onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               |          
                --4.27%--onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     4.47%     0.00%  python   [unknown]                      [k] 0x00007efdedefaa40
            |
            ---0x7efdedefaa40
               0x7fff78979520
               |          
                --4.46%--onnxruntime::contrib::BiasGelu<float, true>::Compute

     4.47%     0.00%  python   [JIT] tid 16201                [.] 0x00007fff78979520
            |
            ---0x7fff78979520
               |          
                --4.46%--onnxruntime::contrib::BiasGelu<float, true>::Compute

     4.46%     4.42%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::contrib::BiasGelu<float, true>::Compute
            |          
             --4.42%--0x7efdedefaa40
                       0x7fff78979520
                       onnxruntime::contrib::BiasGelu<float, true>::Compute

     3.00%     0.00%  python   [unknown]                      [.] 0x00e0908b4830488b
            |
            ---0xe0908b4830488b
               onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               |          
                --2.99%--Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >

     3.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
            |
            ---onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               |          
                --2.99%--Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >

     2.99%     2.99%  python   onnxruntime_pybind11_state.so  [.] Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >
            |
            ---0xe0908b4830488b
               onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >

     2.53%     0.00%  python   [unknown]                      [.] 0x8b4807894810c083
            |
            ---0x8b4807894810c083
               onnxruntime::OpKernelContextInternal::~OpKernelContextInternal
               0x7fff78979ab0
               |          
                --2.47%--onnxruntime::Split::Compute
                          |          
                           --2.46%--__memmove_avx_unaligned_erms

     2.53%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::OpKernelContextInternal::~OpKernelContextInternal
            |
            ---onnxruntime::OpKernelContextInternal::~OpKernelContextInternal
               0x7fff78979ab0
               |          
                --2.47%--onnxruntime::Split::Compute
                          |          
                           --2.46%--__memmove_avx_unaligned_erms

     2.53%     0.00%  python   [JIT] tid 16201                [.] 0x00007fff78979ab0
            |
            ---0x7fff78979ab0
               |          
                --2.47%--onnxruntime::Split::Compute
                          |          
                           --2.46%--__memmove_avx_unaligned_erms

     2.47%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Split::Compute
            |
            ---onnxruntime::Split::Compute
               |          
                --2.46%--__memmove_avx_unaligned_erms

     2.33%     0.00%  python   [unknown]                      [.] 0x00007efe6e1d1f80
            |
            ---0x7efe6e1d1f80
               0x19d3a8b941e5a900
               onnxruntime::python::AddTensorAsPyObj
               __memmove_avx_unaligned_erms

     2.33%     0.00%  python   [unknown]                      [.] 0x19d3a8b941e5a900
            |
            ---0x19d3a8b941e5a900
               onnxruntime::python::AddTensorAsPyObj
               __memmove_avx_unaligned_erms

     2.33%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::python::AddTensorAsPyObj
            |
            ---onnxruntime::python::AddTensorAsPyObj
               __memmove_avx_unaligned_erms

     2.19%     2.17%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::contrib::LayerNorm<float, false>::Compute
     1.41%     1.41%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::TransposeSingleAxisInwards
     1.29%     1.29%  python   onnxruntime_pybind11_state.so  [.] MlasSgemmCopyPackB
     0.75%     0.75%  python   onnxruntime_pybind11_state.so  [.] MlasComputeSumExpF32KernelFma3
     0.68%     0.00%  python   [unknown]                      [.] 0x4848778b48078b48
            |
            ---0x4848778b48078b48
               onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               |          
                --0.62%--onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     0.49%     0.49%  python   onnxruntime_pybind11_state.so  [.] MlasReduceMaximumF32KernelAvx
     0.43%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab401c6f
     0.41%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab4027af
     0.35%     0.35%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::TransposeSingleAxisOutwards
     0.34%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa935d47
     0.30%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa93555f
     0.28%     0.00%  python   [unknown]                      [.] 0x3bff7116be776779
     0.28%     0.00%  python   [unknown]                      [.] 0x3d623348be4bad6c
     0.27%     0.00%  python   [unknown]                      [.] 0x3c307b5abca52bfb
     0.26%     0.00%  python   [unknown]                      [.] 0x08ec834800000138
     0.26%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ExecutionFrame::~ExecutionFrame
     0.26%     0.00%  python   [unknown]                      [.] 0x0000555f37f46e70
     0.26%     0.00%  python   [unknown]                      [.] 0xbd07c93ebe0f9d75
     0.26%     0.00%  python   [unknown]                      [.] 0xbd6fcd01be136e27
     0.26%     0.00%  python   [unknown]                      [.] 0xbdf086e6bd9db237
     0.25%     0.00%  python   [unknown]                      [.] 0xbdd22bb13e907171
     0.24%     0.00%  python   [unknown]                      [.] 0xbdbfa9e1be3f72a7
     0.24%     0.00%  python   [unknown]                      [.] 0xbe44dd02bd481223
     0.24%     0.00%  python   [unknown]                      [.] 0xbe2d93debde6e4bd
     0.23%     0.00%  python   [unknown]                      [.] 0xbd6451f0be3eab7d
     0.23%     0.00%  python   [unknown]                      [.] 0xbdf81210ba5c1cd5
     0.19%     0.00%  python   [unknown]                      [.] 0x3ea3897e3cb6ce0f
     0.19%     0.00%  python   [unknown]                      [.] 0xbce12b83be1048b9
     0.19%     0.00%  python   [unknown]                      [.] 0xbddc82d13af34219
     0.19%     0.00%  python   [unknown]                      [.] 0xbdc399fbbe114bb5
     0.18%     0.00%  python   [unknown]                      [.] 0x3e21d7d03d077544
     0.18%     0.00%  python   [unknown]                      [.] 0xbda9be283cff01c6
     0.17%     0.00%  python   [unknown]                      [.] 0xbe1b3c73be6971e1
     0.17%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa94650c
     0.17%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa946265
     0.17%     0.00%  python   [unknown]                      [.] 0x3e0a8614bdcb001f
     0.17%     0.00%  python   [unknown]                      [.] 0x3eac8322bec4b041
     0.17%     0.00%  python   [unknown]                      [.] 0xbdc7dc1e3dae0dee
     0.16%     0.00%  python   [unknown]                      [.] 0xbe52e536bedbc890
     0.16%     0.00%  python   [unknown]                      [.] 0x3ccad4833e21a9e3
     0.16%     0.16%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::contrib::SkipLayerNorm<float>::Compute
     0.12%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa9464fc
     0.12%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa934800
     0.12%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa9464c8
     0.12%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa94642b
     0.12%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa938b70
     0.10%     0.00%  python   [unknown]                      [k] 0000000000000000
     0.09%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d9708
     0.08%     0.00%  python   [unknown]                      [.] 0xbd389e31bb91e83a
     0.08%     0.07%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::SequentialExecutor::Execute
     0.08%     0.08%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::OpKernel::Node
     0.08%     0.00%  python   [unknown]                      [.] 0xbe169fc33ceabe60
     0.08%     0.00%  python   [unknown]                      [.] 0xbe2d72523d2847f3
     0.08%     0.00%  python   [unknown]                      [.] 0x3d29d79bbbef33b3
     0.08%     0.00%  python   [unknown]                      [.] 0xbdcb037bbe16265b
     0.07%     0.00%  python   [unknown]                      [.] 0x3decd0a5bc95966b
     0.07%     0.00%  python   [unknown]                      [.] 0xbe8d5c793d2f8f57
     0.07%     0.00%  python   [unknown]                      [.] 0x3b5a9264bd332dd4
     0.07%     0.00%  python   [unknown]                      [.] 0xbd326e86bdac123f
     0.07%     0.00%  python   [unknown]                      [.] 0xbe4da14cbd628147
     0.07%     0.00%  python   [unknown]                      [.] 0xbdc19ed2bd59a7a0
     0.07%     0.00%  python   [unknown]                      [.] 0x3e2ff332be0216c5
     0.07%     0.00%  python   [unknown]                      [.] 0x3e1eb6e9be8b8e50
     0.06%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa938006
     0.06%     0.00%  python   [unknown]                      [.] 0x3d5e37153bdcc9b6
     0.06%     0.00%  python   [unknown]                      [.] 0x3e12ecefbe4ddc97
     0.06%     0.00%  python   [unknown]                      [.] 0x3d0708e3bca9e309
     0.06%     0.00%  python   [unknown]                      [.] 0x3e1409b5bd4db3c0
     0.06%     0.06%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::OpKernelContext::OpKernelContext
     0.06%     0.00%  python   [unknown]                      [.] 0x3e28857fbe31d213
     0.06%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa935ce4
     0.06%     0.06%  python   onnxruntime_pybind11_state.so  [.] MlasSgemmPackedOperation
     0.06%     0.00%  python   [unknown]                      [.] 0xbc9c9af4bd4cdd73
     0.05%     0.00%  python   [unknown]                      [.] 0xbc8e05aebca39256
     0.05%     0.00%  python   [unknown]                      [.] 0xbc05bbe6bdb5574d
     0.05%     0.05%  python   [kernel.kallsyms]              [k] 0xffffffffaa938c6d
     0.05%     0.05%  python   onnxruntime_pybind11_state.so  [.] memcpy@plt
     0.05%     0.05%  python   libc-2.27.so                   [.] _int_malloc
     0.04%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa9347dc
     0.04%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8dc1bd
     0.04%     0.04%  python   onnxruntime_pybind11_state.so  [.] MlasComputeSoftmaxThreaded
     0.04%     0.00%  python   [unknown]                      [.] 0x0000000000000002
     0.04%     0.00%  python   [unknown]                      [.] 0x0000000000000001
     0.04%     0.00%  python   [unknown]                      [.] 0x8b4c53fd89485554
     0.04%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::BFCArena::~BFCArena
     0.04%     0.00%  python   onnxruntime_pybind11_state.so  [.] 0x00007efe6ebb1058
     0.04%     0.04%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::TensorShape::SizeHelper
     0.04%     0.04%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::IExecutionProvider::GetAllocator
     0.04%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e3e3f
     0.04%     0.00%  python   [unknown]                      [.] 0xbd3a022f3cdd86a8
     0.03%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa935541
     0.03%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa934fac
     0.03%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer
     0.03%     0.00%  python   [unknown]                      [.] 0x0000555f3818dd38
     0.03%     0.00%  python   [unknown]                      [.] 0xc61c4000c61c4000
     0.03%     0.03%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan
     0.03%     0.03%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::TensorShape::Size
     0.03%     0.00%  python   [unknown]                      [.] 0x0000000000000041
     0.03%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa9371d5
     0.03%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8caf46
     0.03%     0.03%  python   onnxruntime_pybind11_state.so  [.] std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node
     0.03%     0.00%  python   [JIT] tid 16201                [.] 0x00007fff78979bf8
     0.03%     0.00%  python   [unknown]                      [.] 0x0000555f381b1bf0
     0.03%     0.03%  python   libc-2.27.so                   [.] cfree@GLIBC_2.2.5
     0.03%     0.03%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::OpKernelInfo::GetAllocator
     0.03%     0.03%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::BFCArena::FindChunkPtr
     0.03%     0.00%  python   [unknown]                      [.] 0xbe41eb50bc7022e0
     0.03%     0.00%  python   onnxruntime_pybind11_state.so  [.] MlasSgemmThreaded
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab401284
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa88059c
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa880341
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa6085b
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa5fdce
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa99978
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa7f703
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>
     0.02%     0.00%  python   onnxruntime_pybind11_state.so  [.] pybind11::cpp_function::dispatcher
     0.02%     0.00%  python   [unknown]                      [.] 0xbe1a25ea3c72a04b
     0.02%     0.00%  python   [unknown]                      [.] 0xbd8cc4833e3f000a
     0.02%     0.00%  python   [unknown]                      [.] 0x3e9335debde02103
     0.02%     0.02%  python   [kernel.kallsyms]              [k] 0xffffffffab2baa87
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa7e38c
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa7a35a
     0.02%     0.02%  python   [kvm]                          [k] pvclock_gtod_notify
     0.02%     0.02%  python   [kernel.kallsyms]              [k] 0xffffffffaa94704e
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa9371bc
     0.02%     0.00%  python   [unknown]                      [.] 0x40252903402c8610
     0.02%     0.00%  python   [unknown]                      [.] 0x3e929e733ed939d2
     0.02%     0.00%  python   [unknown]                      [.] 0xbea540c4bf55f4dc
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::OpKernelInfo::node
     0.02%     0.00%  python   [unknown]                      [.] 0x412235aa4101cf1e
     0.02%     0.00%  python   [unknown]                      [.] 0xbefb77acbe559c3a
     0.02%     0.00%  python   [unknown]                      [.] 0xbf15e52dbfb50f38
     0.02%     0.00%  python   [unknown]                      [.] 0x3eb0b0e43f058853
     0.02%     0.00%  python   [unknown]                      [.] 0xbfc73813bfdfbad0
     0.02%     0.00%  python   [unknown]                      [.] 0xc014d904c003a3e4
     0.02%     0.00%  python   [unknown]                      [.] 0xbe87a1febf380900
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab4027b9
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8a69be
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab6000e4
     0.02%     0.00%  python   [unknown]                      [.] 0x3f8964273e3eb13c
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8dbd85
     0.02%     0.00%  python   [unknown]                      [.] 0xbf063ce2bfcf232a
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::BFCArena::RegionManager::RegionFor
     0.02%     0.00%  python   [unknown]                      [.] 0xbf41ef8f3fa17dfc
     0.02%     0.00%  python   [unknown]                      [.] 0x3fa246063f20e2ab
     0.02%     0.00%  python   [unknown]                      [k] 0x0000555f36b8d010
     0.02%     0.02%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e05d0
     0.02%     0.00%  python   [unknown]                      [.] 0xbe0a638abe339b22
     0.02%     0.00%  python   [unknown]                      [.] 0x3e0974d93e3c355a
     0.02%     0.00%  python   [unknown]                      [.] 0x3f1a6bda3ef0ae59
     0.02%     0.00%  python   [unknown]                      [.] 0x3f2062303e94a25a
     0.02%     0.00%  python   [unknown]                      [.] 0xbdbb8b15be09f394
     0.02%     0.00%  python   [unknown]                      [.] 0x3f9159e74003628f
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e426d
     0.02%     0.00%  python   [unknown]                      [.] 0x3f32fb6dbecc6f6d
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::MatMulComputeHelper::Compute
     0.02%     0.00%  python   [unknown]                      [.] 0xbf05d0313d281fbe
     0.02%     0.00%  python   [unknown]                      [.] 0xbe037632be899b40
     0.02%     0.00%  python   [unknown]                      [.] 0x3fef42b43fbda378
     0.02%     0.00%  python   [unknown]                      [.] 0xbe71b36abf771e6e
     0.02%     0.00%  python   [unknown]                      [.] 0x3d1b0cf03c0f5100
     0.02%     0.00%  python   [unknown]                      [.] 0x3e074f7f3e1a7ffc
     0.02%     0.00%  python   [unknown]                      [.] 0x3fa6f6983f2a2abc
     0.02%     0.00%  python   [unknown]                      [.] 0xbd468ce0bd97663a
     0.02%     0.00%  python   [unknown]                      [.] 0xbf93c347c036e5c1
     0.02%     0.00%  python   [unknown]                      [.] 0xc0644349c05e58bd
     0.02%     0.00%  python   [unknown]                      [.] 0xc0074734401d8953
     0.02%     0.00%  python   [unknown]                      [.] 0xc006bafc3f3a08ca
     0.02%     0.00%  python   [unknown]                      [.] 0xbf548ce2be0aca89
     0.02%     0.00%  python   [unknown]                      [.] 0xbd83f4a7c001ed84
     0.02%     0.00%  python   [unknown]                      [.] 0x3f92f66e3eced586
     0.02%     0.00%  python   [unknown]                      [.] 0x3ffc02fa3e96d2b8
     0.02%     0.00%  python   [unknown]                      [.] 0xbe0b66d840002703
     0.02%     0.00%  python   [unknown]                      [.] 0x3f318bbc4003d14c
     0.02%     0.00%  python   [unknown]                      [.] 0x3f17edfdbe916762
     0.02%     0.00%  python   [unknown]                      [.] 0x3f63bc2c3f20740e
     0.02%     0.00%  python   [unknown]                      [.] 0xc047fc15c01b2c74
     0.02%     0.02%  python   [kernel.kallsyms]              [k] 0xffffffffab2af813
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab2b32fe
     0.02%     0.00%  python   [unknown]                      [.] 0x40896101408bc2d8
     0.02%     0.00%  python   [unknown]                      [.] 0x3cc289fcbe03ff4f
     0.02%     0.00%  python   [unknown]                      [.] 0x3f6354e33fbe94e2
     0.02%     0.00%  python   [unknown]                      [.] 0x3e89bbe53fa6350d
     0.02%     0.00%  python   [unknown]                      [.] 0x3f2669acbe85d3c6
     0.02%     0.00%  python   [unknown]                      [.] 0xba670680bd5d99ba
     0.02%     0.00%  python   [unknown]                      [.] 0x3fa261453ff9b9f3
     0.02%     0.00%  python   [unknown]                      [.] 0xbf3ccbde3ec2a0b7
     0.02%     0.00%  python   [unknown]                      [.] 0x3f7c201f3f91b051
     0.02%     0.00%  python   [unknown]                      [.] 0xbe0f4ee4bed1ef7e
     0.02%     0.00%  python   [unknown]                      [.] 0x3f638f903fcdd300
     0.02%     0.00%  python   [unknown]                      [.] 0x3f6a125c3f93a878
     0.02%     0.00%  python   [unknown]                      [.] 0x4005d2a83f0095e5
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e3e93
     0.02%     0.00%  python   [unknown]                      [.] 0xbfc8c018bffeaad6
     0.02%     0.00%  python   [unknown]                      [.] 0xbf351b963f8cb60a
     0.02%     0.00%  python   [unknown]                      [.] 0x3f3f45a73e86c104
     0.02%     0.00%  python   [unknown]                      [.] 0x3e5d52e0bcdcb940
     0.02%     0.00%  python   [unknown]                      [.] 0xbf6bad17bfdb78ce
     0.02%     0.00%  python   [unknown]                      [.] 0xbd0baf38bf87666a
     0.02%     0.00%  python   [unknown]                      [.] 0x3eb61b563eaa80ca
     0.02%     0.00%  python   [unknown]                      [.] 0xbd2786983eae7114
     0.02%     0.00%  python   [unknown]                      [.] 0x3ed088403fd7d150
     0.02%     0.00%  python   [unknown]                      [.] 0x40dadc3f40c5c747
     0.02%     0.00%  python   [unknown]                      [.] 0x3f3d656b408c0b23
     0.02%     0.00%  python   [unknown]                      [.] 0x3d3215fe3e7410ce
     0.02%     0.00%  python   [unknown]                      [.] 0x3f2c44083dfdce5c
     0.02%     0.00%  python   [unknown]                      [.] 0x3f5d49653f63b2d9
     0.02%     0.00%  python   [unknown]                      [.] 0xbf2c0e243f426318
     0.02%     0.00%  python   [unknown]                      [.] 0x3f91a63f3f914619
     0.02%     0.00%  python   [unknown]                      [.] 0x3f13b6793e309525
     0.02%     0.00%  python   [unknown]                      [.] 0x3e093b28bf93331b
     0.02%     0.00%  python   [unknown]                      [.] 0xbfef1c12c0881ec8
     0.02%     0.00%  python   [unknown]                      [.] 0xbfcf11d5402dfda6
     0.02%     0.00%  python   [unknown]                      [.] 0xbebd1b62bf62d8eb
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] MlasSgemmSchedule
     0.02%     0.00%  python   [unknown]                      [.] 0xbfae5f7ebfa580a0
     0.02%     0.00%  python   [unknown]                      [.] 0x3f73f2193fac06e7
     0.02%     0.00%  python   [unknown]                      [.] 0x4019070c3fb00c48
     0.02%     0.00%  python   [unknown]                      [.] 0xbf4eba2abf6aee0d
     0.02%     0.00%  python   [unknown]                      [.] 0x3f479f143f0f3c41
     0.02%     0.02%  python   [kernel.kallsyms]              [k] 0xffffffffaa8dbd98
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::PrimitiveDataType<float>::Size
     0.02%     0.00%  python   [unknown]                      [.] 0xbf024dedbfc6adce
     0.02%     0.00%  python   [unknown]                      [.] 0x3ee59c1c3e9a42e8
     0.02%     0.00%  python   [unknown]                      [.] 0xbeabb130be583ecd
     0.02%     0.00%  python   [unknown]                      [.] 0x3ed482623edd7f58
     0.02%     0.00%  python   [unknown]                      [.] 0xbe076a783f5413d0
     0.02%     0.00%  python   [unknown]                      [.] 0x3f983a603fc1069d
     0.02%     0.00%  python   [unknown]                      [.] 0xbe574c6a3f0a4712
     0.02%     0.00%  python   [unknown]                      [.] 0xbf4e901abf3fb144
     0.02%     0.00%  python   [unknown]                      [.] 0x3f75ee163cc012b0
     0.02%     0.00%  python   [unknown]                      [.] 0x3fa0d4553f816a62
     0.02%     0.00%  python   [unknown]                      [.] 0xc01b3dd0bfe3208c
     0.02%     0.00%  python   [unknown]                      [.] 0xbf249c533f58d06f
     0.02%     0.00%  python   [unknown]                      [.] 0xbf7389a1be8c774d
     0.02%     0.00%  python   [unknown]                      [.] 0x40fae0ac40f86016
     0.02%     0.00%  python   [unknown]                      [.] 0xbf66cf72bfb7f5c6
     0.02%     0.00%  python   [unknown]                      [.] 0x3fa9f272bf5b2e1c
     0.02%     0.00%  python   [unknown]                      [.] 0xbf4e131abf08b067
     0.02%     0.00%  python   [unknown]                      [.] 0xbec4d6ee3f2bb2f8
     0.02%     0.00%  python   [unknown]                      [.] 0xbdc2c665be0ddfd5
     0.02%     0.00%  python   [unknown]                      [.] 0xbe2e57803f7ba03e
     0.02%     0.00%  python   [unknown]                      [.] 0xc02fb89fc08246cd
     0.02%     0.00%  python   [unknown]                      [.] 0x3e7ab61b3ec56d61
     0.02%     0.00%  python   [unknown]                      [.] 0x3e026b423f4bf841
     0.02%     0.02%  python   [kernel.kallsyms]              [k] 0xffffffffaa83b3f7
     0.02%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa937c75
     0.02%     0.00%  python   [unknown]                      [.] 0xbf2780e5bf9a6037
     0.02%     0.00%  python   [unknown]                      [.] 0xbf4dc9343ecd8e2a
     0.02%     0.00%  python   [unknown]                      [.] 0x3f61fe2a3f34dc28
     0.02%     0.00%  python   [unknown]                      [.] 0xbfc5d5eebfada910
     0.02%     0.00%  python   [unknown]                      [.] 0xbde0c4e43f4b4a46
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Transpose::Compute
     0.02%     0.00%  python   [unknown]                      [.] 0x4012b2f83f10dbc4
     0.02%     0.00%  python   [unknown]                      [.] 0x40323bb64023e430
     0.02%     0.00%  python   [unknown]                      [.] 0xbeec382abf03e126
     0.02%     0.00%  python   [unknown]                      [.] 0x402dd8454015d434
     0.02%     0.00%  python   [unknown]                      [.] 0x3e0038ccbf71b151
     0.02%     0.00%  python   [unknown]                      [.] 0x3e9c3700bf08e1f8
     0.02%     0.00%  python   [unknown]                      [.] 0x3edab538beb54535
     0.02%     0.00%  python   [unknown]                      [.] 0xbeb58bb43ec1d4ef
     0.02%     0.00%  python   [unknown]                      [.] 0x3ea56560be8bd06a
     0.02%     0.00%  python   [unknown]                      [.] 0xbd76d880bd7c047f
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Where<float>::Compute
     0.02%     0.00%  python   [unknown]                      [.] 0x3f1ef3a23f07709d
     0.02%     0.00%  python   [unknown]                      [.] 0xbf233ece3fbcc1e8
     0.02%     0.00%  python   [unknown]                      [.] 0x3ebf9acc3e5e989a
     0.02%     0.00%  python   [unknown]                      [.] 0x3c5b961cbf206fde
     0.02%     0.00%  python   [unknown]                      [.] 0x3fd502d83f53ea24
     0.02%     0.00%  python   [unknown]                      [.] 0x3e0d528a3e3bc7bc
     0.02%     0.00%  python   [unknown]                      [.] 0xbefb4f15bf80b194
     0.02%     0.00%  python   [unknown]                      [.] 0xbfe47fc0bf30f022
     0.02%     0.00%  python   [unknown]                      [.] 0xc07fa35ebebd9372
     0.02%     0.02%  python   [kernel.kallsyms]              [k] 0xffffffffab401ce0
     0.02%     0.00%  python   [unknown]                      [.] 0x3f3ef92e3f5208bf
     0.02%     0.00%  python   [unknown]                      [.] 0xbea535e3beb42c2a
     0.02%     0.00%  python   [unknown]                      [.] 0xc027e345c01f0ea8
     0.02%     0.00%  python   [unknown]                      [.] 0x3f4fa3a8be2368ec
     0.02%     0.00%  python   [unknown]                      [.] 0x3f7f0dffbdb53fc0
     0.02%     0.00%  python   [unknown]                      [.] 0x3eea252c3f92bc94
     0.02%     0.00%  python   [unknown]                      [.] 0x3ee1a4ca3ed36420
     0.02%     0.00%  python   [unknown]                      [.] 0xbee45ae8bf51d067
     0.02%     0.00%  python   [unknown]                      [.] 0x3f577946bf8dfe95
     0.02%     0.02%  python   [kernel.kallsyms]              [k] 0xffffffffaa937c78
     0.02%     0.00%  python   [unknown]                      [.] 0xbd3272b43eea004e
     0.02%     0.00%  python   [unknown]                      [.] 0x3e187afcbe7426cc
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Tensor::Tensor
     0.02%     0.00%  python   [unknown]                      [.] 0x0000555f3ef7ac50
     0.02%     0.00%  python   [unknown]                      [.] 0x3d472a683c344a88
     0.02%     0.00%  python   [unknown]                      [.] 0x3d425417be148c04
     0.02%     0.00%  python   [unknown]                      [.] 0xbf03d3223fc75abf
     0.02%     0.00%  python   [unknown]                      [.] 0xbfc37490bf7018dc
     0.02%     0.00%  python   [unknown]                      [.] 0xbfb2ef34bfe65037
     0.02%     0.00%  python   [unknown]                      [.] 0xbdcb47d0be0e7db8
     0.02%     0.00%  python   [unknown]                      [.] 0x3b79277ebd640344
     0.02%     0.00%  python   [unknown]                      [.] 0xbd9bb4b83e350d96
     0.02%     0.00%  python   [unknown]                      [.] 0xbe040c3f3ccb04ee
     0.02%     0.00%  python   [unknown]                      [.] 0xbf441fd23f194727
     0.02%     0.00%  python   [unknown]                      [.] 0x40e8dd65c0ba85f2
     0.02%     0.00%  python   [unknown]                      [.] 0x3d4d78f63c46acf0
     0.02%     0.00%  python   [unknown]                      [.] 0x3f41003abe6a321c
     0.02%     0.00%  python   [unknown]                      [.] 0xbfb18963be259559
     0.02%     0.00%  python   [unknown]                      [.] 0xbd3db8f43df354d8
     0.02%     0.00%  python   [unknown]                      [.] 0x3def0e70bef9c67a
     0.02%     0.00%  python   [unknown]                      [.] 0xbfbe1a4ebdfc0994
     0.02%     0.00%  python   [unknown]                      [.] 0xbe0cfb1440705558
     0.02%     0.00%  python   [unknown]                      [.] 0xbdcbe4a53c12a84a
     0.02%     0.00%  python   [unknown]                      [.] 0xbdcc52ac3a57108c
     0.02%     0.00%  python   [unknown]                      [.] 0x3fc532c8c08979bc
     0.02%     0.00%  python   [unknown]                      [.] 0x3c3d2f42bc064b87
     0.02%     0.00%  python   [unknown]                      [.] 0xbe813dabbfa38e60
     0.02%     0.00%  python   [unknown]                      [.] 0x3f1c0ed0be900d2e
     0.02%     0.00%  python   [unknown]                      [.] 0x3ec8cb23be265ccb
     0.02%     0.00%  python   [unknown]                      [.] 0x3f8dde7ebe43f811
     0.02%     0.00%  python   [unknown]                      [.] 0x3f3e3e34c01f5200
     0.02%     0.00%  python   [unknown]                      [.] 0xc0747e68407befa2
     0.02%     0.00%  python   [unknown]                      [.] 0xc14822d5c10826f3
     0.02%     0.00%  python   [unknown]                      [.] 0x3da670ea3f285b73
     0.02%     0.00%  python   [unknown]                      [.] 0xbeb266c13eb207eb
     0.02%     0.00%  python   [unknown]                      [.] 0xbf3cd91d3efdb9c5
     0.02%     0.00%  python   [unknown]                      [.] 0xbfce46823f54eebd
     0.02%     0.00%  python   [unknown]                      [.] 0x3d44590e3e391ed8
     0.02%     0.00%  python   [unknown]                      [.] 0x3bd067f1bc1ef2dc
     0.02%     0.00%  python   [unknown]                      [.] 0xbf112969bf991be3
     0.02%     0.00%  python   [unknown]                      [.] 0x3e042ff4bdd5e4d9
     0.02%     0.00%  python   [unknown]                      [.] 0x3baffdcf3bdf73c7
     0.02%     0.00%  python   [unknown]                      [.] 0x3f8e43253e0c93fe
     0.02%     0.00%  python   [unknown]                      [.] 0x3f2002b5be9550d1
     0.02%     0.00%  python   [unknown]                      [.] 0xbeb92111bfdaaf74
     0.02%     0.00%  python   [unknown]                      [.] 0xbee76a35bf5f669a
     0.02%     0.00%  python   [unknown]                      [.] 0xbf8b933b3f1c63d5
     0.02%     0.00%  python   [unknown]                      [.] 0xbd7064aabd59fcf4
     0.02%     0.00%  python   [unknown]                      [.] 0x3d53e65d3c0a4668
     0.02%     0.00%  python   [unknown]                      [.] 0xbffab427bfc8ba69
     0.02%     0.00%  python   [unknown]                      [.] 0x3f901fad3e1c55c2
     0.02%     0.00%  python   [unknown]                      [.] 0x3f94a79a3ff6f77e
     0.02%     0.00%  python   [unknown]                      [.] 0x404e9993401ddeb6
     0.02%     0.00%  python   [unknown]                      [.] 0x3f1c1533be99f396
     0.02%     0.00%  python   [unknown]                      [.] 0x3ee9e034beea5cb7
     0.02%     0.00%  python   [unknown]                      [.] 0xbdc46868be11f7d0
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ExecutionFrame::TraceAllocate
     0.02%     0.00%  python   [unknown]                      [.] 0x3ed87c08bee08933
     0.02%     0.00%  python   [unknown]                      [.] 0x3e13d078bf2c5041
     0.02%     0.00%  python   [unknown]                      [.] 0x3ee3e6c4bee75793
     0.02%     0.00%  python   [unknown]                      [.] 0x3ec0abe0bf80b607
     0.02%     0.00%  python   [unknown]                      [.] 0x3f95f5213f7d2026
     0.02%     0.02%  python   onnxruntime_pybind11_state.so  [.] nsync::nsync_mu_lock
     0.02%     0.00%  python   [unknown]                      [.] 0x0000555f381aba40
     0.02%     0.00%  python   [unknown]                      [.] 0xbefcebcabeba5dc2
     0.02%     0.00%  python   [unknown]                      [.] 0x3f4b02edbf5d5e07
     0.02%     0.00%  python   [unknown]                      [.] 0x3ee46dc1bee681dd
     0.02%     0.00%  python   [unknown]                      [.] 0x390bb1363934b2a2
     0.02%     0.00%  python   [unknown]                      [.] 0x3f909add3e2094cc
     0.02%     0.00%  python   [unknown]                      [.] 0xbeac85ae3ea547c0
     0.02%     0.00%  python   [unknown]                      [.] 0x3b4c74db3cd1a74b
     0.02%     0.00%  python   [unknown]                      [.] 0x3b356d0cbd68f572
     0.02%     0.00%  python   [unknown]                      [.] 0x3aa5a1cf3a3d2591
     0.02%     0.00%  python   [unknown]                      [.] 0xbe466c983e8cfc26
     0.02%     0.00%  python   [unknown]                      [.] 0xbf0a6f6b3f595034
     0.02%     0.00%  python   [unknown]                      [.] 0x3d4333103e733343
     0.02%     0.00%  python   [unknown]                      [.] 0xbf40b889bf482d56
     0.02%     0.00%  python   [unknown]                      [.] 0x3ab01d7739b3fd2b
     0.02%     0.00%  python   [unknown]                      [.] 0xbe29d540be0d079d
     0.02%     0.00%  python   [unknown]                      [.] 0x3f9ceb80bf572ff4
     0.02%     0.00%  python   [unknown]                      [.] 0x3ec41566be2bbaa8
     0.01%     0.00%  python   [unknown]                      [.] 0xbf968c573e4805cc
     0.01%     0.00%  python   [unknown]                      [.] 0x3e4419094033c4f4
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] std::vector<long, std::allocator<long> >::operator=
     0.01%     0.00%  python   [unknown]                      [.] 0xbee946c43f40c0d9
     0.01%     0.00%  python   [unknown]                      [.] 0xbf6daa9e3e7bcdc9
     0.01%     0.00%  python   [unknown]                      [.] 0x3ff099783d2c3250
     0.01%     0.00%  python   [unknown]                      [.] 0x3fc4587e3fa54a74
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa935477
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper
     0.01%     0.00%  python   [unknown]                      [.] 0xbe35a2f83daa25b5
     0.01%     0.00%  python   [unknown]                      [.] 0x3e060e593e2e9cff
     0.01%     0.00%  python   [unknown]                      [.] 0x2eb3de6b2f1c1014
     0.01%     0.00%  python   [unknown]                      [.] 0xbed82e4abecb3831
     0.01%     0.00%  python   [unknown]                      [.] 0xbec7cfddc021bae6
     0.01%     0.00%  python   [unknown]                      [.] 0xbc182ea2bde619b8
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] std::_Function_handler<std::shared_ptr<onnxruntime::IAllocator> (int, OrtMemType), onnxruntime::SessionState::SetupAllocators()::{lambda(int, OrtMemType)#1}>::_M_invoke
     0.01%     0.00%  python   [unknown]                      [.] 0x3dfcc8fe3e2dacec
     0.01%     0.00%  python   [unknown]                      [.] 0x402e3f0940052f5e
     0.01%     0.00%  python   [unknown]                      [.] 0x3c741fe53b8bffb8
     0.01%     0.00%  python   [unknown]                      [.] 0x3f8e78d43e0d0ffb
     0.01%     0.00%  python   [unknown]                      [.] 0xbe9c8155be5f3692
     0.01%     0.00%  python   [unknown]                      [.] 0x40871044c058ff3c
     0.01%     0.00%  python   [unknown]                      [.] 0xc0f0d885c0dccd63
     0.01%     0.00%  python   [unknown]                      [.] 0xbfe27285beb1aaa6
     0.01%     0.00%  python   [unknown]                      [.] 0xc063dccbc0789c6b
     0.01%     0.00%  python   [unknown]                      [.] 0x3eb0cc92c0296151
     0.01%     0.00%  python   [unknown]                      [.] 0xc14f42bcc14007c3
     0.01%     0.00%  python   [unknown]                      [.] 0xbd9286843f46073d
     0.01%     0.00%  python   [unknown]                      [.] 0xbf004ebc3eb48c14
     0.01%     0.00%  python   [unknown]                      [.] 0xc14b92cec09f86f1
     0.01%     0.00%  python   [unknown]                      [.] 0xbe0a90a53e15a28c
     0.01%     0.00%  python   [unknown]                      [.] 0xc06aed2fc068ac69
     0.01%     0.00%  python   [unknown]                      [.] 0x3fc922083f27c259
     0.01%     0.00%  python   [unknown]                      [.] 0x3d2a0a493ce5bb0a
     0.01%     0.00%  python   [unknown]                      [.] 0xbe154dc9bdd20195
     0.01%     0.00%  python   [unknown]                      [.] 0xbfe16c81c03e8525
     0.01%     0.00%  python   [unknown]                      [.] 0x3f439f14c004c383
     0.01%     0.00%  python   [unknown]                      [.] 0x3d4cbef33dea29b8
     0.01%     0.00%  python   [unknown]                      [.] 0xbe2407343f81177c
     0.01%     0.00%  python   [unknown]                      [.] 0xbfe71e9ac00efee2
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::BFCArena::DeallocateRawInternal
     0.01%     0.00%  python   [unknown]                      [.] 0x3f6c0f25be4a98e6
     0.01%     0.00%  python   [unknown]                      [.] 0xc0d1af82c0d9eb83
     0.01%     0.00%  python   [unknown]                      [.] 0x3cf09bd4bb684780
     0.01%     0.00%  python   [unknown]                      [.] 0xbec709463ef9c8ba
     0.01%     0.00%  python   [unknown]                      [.] 0xbe501e073e933e6e
     0.01%     0.00%  python   [unknown]                      [.] 0xbf23f4213e14cb92
     0.01%     0.00%  python   [unknown]                      [.] 0x3c42b0043cd630db
     0.01%     0.00%  python   [unknown]                      [.] 0xbd8786a23c436590
     0.01%     0.00%  python   [unknown]                      [.] 0x3a02b0613a132d33
     0.01%     0.00%  python   [unknown]                      [.] 0x3da593283ec23912
     0.01%     0.00%  python   [unknown]                      [.] 0x3b316ffa3aa1894d
     0.01%     0.00%  python   [unknown]                      [.] 0x3c3776c0c02a02de
     0.01%     0.00%  python   [unknown]                      [.] 0x3d7cc8003b340660
     0.01%     0.00%  python   [unknown]                      [.] 0xbd55aa4c3d8d6896
     0.01%     0.00%  python   [unknown]                      [.] 0xc0e15786c0d646bd
     0.01%     0.00%  python   [unknown]                      [.] 0x3f8e2f0cbe6f69e0
     0.01%     0.00%  python   [unknown]                      [.] 0xc0aebdd7c0aaa284
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000ff
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000fe
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000fd
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000fc
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000fb
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000fa
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f9
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f8
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f7
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f6
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f5
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f4
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f3
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f2
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f1
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000f0
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000ef
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000ee
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000ed
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000ec
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000eb
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000ea
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e9
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e8
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e7
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e6
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e5
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e4
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e3
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e2
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e1
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000e0
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000df
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000de
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000dd
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000dc
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000db
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000da
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d9
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d8
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d7
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d6
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d5
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d4
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d3
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d2
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d1
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000d0
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000cf
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000ce
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000cd
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000cc
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000cb
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000ca
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000c9
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000c8
     0.01%     0.00%  python   [unknown]                      [.] 0x00000000000000c7
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000060
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000005f
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000005e
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000005d
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000005c
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000005b
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000005a
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000059
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000058
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000057
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000056
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000055
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000054
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000053
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000052
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000051
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000050
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000004f
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000004e
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000004d
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000004c
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000004b
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000004a
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000049
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000048
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000047
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000046
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000045
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000044
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000043
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000042
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000040
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000003f
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000003e
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000003d
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000003c
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000003b
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000003a
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000039
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000038
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000037
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000036
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000035
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000034
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000033
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000032
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000031
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000030
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000002f
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000016
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000015
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000014
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000013
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000012
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000011
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000010
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000000f
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000000e
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000000d
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000000c
     0.01%     0.00%  python   [unknown]                      [.] 0x000000000000000b
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000004
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000003
     0.01%     0.00%  python   [unknown]                      [.] 0x0000555f3828bc20
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000337
     0.01%     0.00%  python   [unknown]                      [.] 0x389ed81f39acbb3c
     0.01%     0.00%  python   [unknown]                      [.] 0xbfcb37c83e97ef32
     0.01%     0.00%  python   [unknown]                      [.] 0x3cef13bebd7bc233
     0.01%     0.00%  python   [unknown]                      [.] 0x3fab430ac0077f7e
     0.01%     0.00%  python   [unknown]                      [.] 0x3e9c30a0bf262594
     0.01%     0.00%  python   [unknown]                      [.] 0x3cc402293be8ec58
     0.01%     0.00%  python   [unknown]                      [.] 0x3f53cf7cbf7d28f2
     0.01%     0.00%  python   [unknown]                      [.] 0xc0900dc4c09b2512
     0.01%     0.00%  python   [unknown]                      [.] 0xbfd37778bfbdbecb
     0.01%     0.00%  python   [unknown]                      [.] 0x3f73bf23bd902241
     0.01%     0.00%  python   [unknown]                      [.] 0xbc16e3a4bd824777
     0.01%     0.00%  python   [unknown]                      [.] 0xc08c0fd0c0c77f48
     0.01%     0.00%  python   [unknown]                      [.] 0xc05cf2cbc077229b
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffab2af14e
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab2b32e4
     0.01%     0.00%  python   [unknown]                      [.] 0xbe90bcc1be03707a
     0.01%     0.00%  python   [unknown]                      [.] 0x3f3f48a93f77de95
     0.01%     0.00%  python   [unknown]                      [.] 0xbd0639b8bc4cb4e0
     0.01%     0.00%  python   [unknown]                      [.] 0x3cbd64c03f8a5795
     0.01%     0.00%  python   [unknown]                      [.] 0x3bfeef123d77855f
     0.01%     0.00%  python   [unknown]                      [.] 0x3bf3283e3cd2bfb2
     0.01%     0.00%  python   [unknown]                      [.] 0x000000003d11ad2c
     0.01%     0.00%  python   [unknown]                      [.] 0x3c586d783c44a7e8
     0.01%     0.00%  python   [unknown]                      [.] 0x3eb40e87beff4149
     0.01%     0.00%  python   [unknown]                      [.] 0xbf14fb2d3f023ded
     0.01%     0.00%  python   [unknown]                      [.] 0x3e0ead6fbde3ea08
     0.01%     0.00%  python   [unknown]                      [.] 0xc0586ebec077cb24
     0.01%     0.00%  python   [unknown]                      [.] 0x3db53368bd09bf34
     0.01%     0.00%  python   [unknown]                      [.] 0xbd26f0644028158a
     0.01%     0.00%  python   [unknown]                      [.] 0xc17b40c93f4350c0
     0.01%     0.00%  python   [unknown]                      [.] 0x3d476a033dadc596
     0.01%     0.00%  python   [unknown]                      [.] 0x3c9a12e0be452fe4
     0.01%     0.00%  python   [unknown]                      [.] 0xbf43b48abf0b9082
     0.01%     0.00%  python   [unknown]                      [.] 0xbf0df7dcbf15a891
     0.01%     0.00%  python   [unknown]                      [.] 0x3eeded593daa8874
     0.01%     0.00%  python   [unknown]                      [.] 0x3f9f89203fb8cde3
     0.01%     0.00%  python   [unknown]                      [.] 0xbffb91f4bfe77178
     0.01%     0.00%  python   [unknown]                      [.] 0xc11ccfe7c0b4daa4
     0.01%     0.00%  python   [unknown]                      [.] 0xbedb6473bc7c6528
     0.01%     0.00%  python   [unknown]                      [.] 0xbee3cb9abe2107db
     0.01%     0.00%  python   [unknown]                      [.] 0x3db0f04b3db25cb9
     0.01%     0.00%  python   [unknown]                      [.] 0x3cef00c7bddd006d
     0.01%     0.00%  python   [unknown]                      [.] 0xbd9a6469374f5c00
     0.01%     0.00%  python   [unknown]                      [.] 0xc02b309abef4d8bc
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] MlasSgemmOperation
     0.01%     0.00%  python   [unknown]                      [.] 0x3d9ec7f43bb210b0
     0.01%     0.00%  python   [unknown]                      [.] 0xbfdefde73e2ce978
     0.01%     0.00%  python   [unknown]                      [.] 0x4044c598bfda18b6
     0.01%     0.00%  python   [unknown]                      [.] 0x3e2599883e38a3c4
     0.01%     0.00%  python   [unknown]                      [.] 0xc0622a57c08b7f48
     0.01%     0.00%  python   [unknown]                      [.] 0xc1125023c0f7a934
     0.01%     0.00%  python   [unknown]                      [.] 0x37eef5cd39b9ef7e
     0.01%     0.00%  python   [unknown]                      [.] 0x405ca0d040d18344
     0.01%     0.00%  python   [unknown]                      [.] 0xbf89676abf5a0304
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa932f4a
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::_M_erase
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000180000
     0.01%     0.00%  python   [unknown]                      [.] 0x3d83a86abd5c8e8c
     0.01%     0.00%  python   [unknown]                      [.] 0xbfe11b4dbfeefb56
     0.01%     0.00%  python   [unknown]                      [.] 0x3ebfe541be25154e
     0.01%     0.00%  python   [unknown]                      [.] 0x3925a7c1391f0399
     0.01%     0.00%  python   [unknown]                      [.] 0xbfefd8eebf806d67
     0.01%     0.00%  python   [unknown]                      [.] 0xc0c1cc8fc0a53ef1
     0.01%     0.00%  python   [unknown]                      [.] 0xbd9f9002bd9f6ac9
     0.01%     0.00%  python   [unknown]                      [.] 0x3b6df1343d3cc594
     0.01%     0.00%  python   [unknown]                      [.] 0xbe3563a53da504bf
     0.01%     0.00%  python   [unknown]                      [.] 0xc0d2969cc0c90bff
     0.01%     0.00%  python   [unknown]                      [.] 0xbe1a81ecbb60a758
     0.01%     0.00%  python   [unknown]                      [.] 0xbf689694bf9515b1
     0.01%     0.00%  python   [unknown]                      [.] 0x3c46308fbcd1b542
     0.01%     0.00%  python   [unknown]                      [.] 0xbf5a0c513e108759
     0.01%     0.00%  python   [unknown]                      [.] 0xbd9204b13bda164a
     0.01%     0.00%  python   [unknown]                      [.] 0xbf12c7c53d635f9b
     0.01%     0.00%  python   [unknown]                      [.] 0xc0a6419fc0a6654a
     0.01%     0.00%  python   [unknown]                      [.] 0x3d28d5be3b6d6ea3
     0.01%     0.00%  python   [unknown]                      [.] 0x3fd26e13beaf976a
     0.01%     0.00%  python   [unknown]                      [.] 0x3d6b2ba23efe3158
     0.01%     0.00%  python   [unknown]                      [.] 0x3c3739b43cc536ea
     0.01%     0.00%  python   [unknown]                      [.] 0x3d372a343f0097f7
     0.01%     0.00%  python   [unknown]                      [.] 0x3ddeb1113da99272
     0.01%     0.00%  python   [unknown]                      [.] 0xc0178a24be34e183
     0.01%     0.00%  python   [unknown]                      [.] 0x3d4483003cab8bb8
     0.01%     0.00%  python   [unknown]                      [.] 0xc093453fbfc396c1
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::(anonymous namespace)::UntypedSelect
     0.01%     0.00%  python   [unknown]                      [.] 0x0000555f3ef21720
     0.01%     0.00%  python   [unknown]                      [.] 0xc0ec0524c0d80cd5
     0.01%     0.00%  python   [unknown]                      [.] 0x353483c33463e107
     0.01%     0.00%  python   [unknown]                      [.] 0xbd4d02fe3dadac8d
     0.01%     0.00%  python   [unknown]                      [.] 0xc0eba867c0f6e5af
     0.01%     0.00%  python   [unknown]                      [.] 0x3f4d45c63fcc0cea
     0.01%     0.00%  python   [unknown]                      [.] 0x3b444b053c68f216
     0.01%     0.00%  python   [unknown]                      [.] 0x000000003f800000
     0.01%     0.00%  python   [unknown]                      [.] 0xbbe7d218bd0c0224
     0.01%     0.00%  python   [unknown]                      [.] 0xc056a7edbd984a80
     0.01%     0.00%  python   [unknown]                      [.] 0x3f7a24b4c0a75440
     0.01%     0.00%  python   [unknown]                      [.] 0xbf8fc478bf19f95a
     0.01%     0.00%  python   [unknown]                      [.] 0x3b4f8a333be74994
     0.01%     0.00%  python   [unknown]                      [.] 0xc026f311c05fd920
     0.01%     0.00%  python   [unknown]                      [.] 0xbcff91d83dd7016d
     0.01%     0.00%  python   [unknown]                      [.] 0xbf3e94b03f1e2ac1
     0.01%     0.00%  python   [unknown]                      [.] 0xbfccc860bf454d9f
     0.01%     0.00%  python   [unknown]                      [.] 0x3bede1983c8f4acf
     0.01%     0.00%  python   [unknown]                      [.] 0x3da95bdebe918b99
     0.01%     0.00%  python   [unknown]                      [.] 0xbe16e2eabc4ac1e4
     0.01%     0.00%  python   [unknown]                      [.] 0xbf929a0abdd595b4
     0.01%     0.00%  python   [unknown]                      [.] 0xc0872993c08de40b
     0.01%     0.00%  python   [unknown]                      [.] 0xc06def10c0163d81
     0.01%     0.00%  python   [unknown]                      [.] 0x3f50c8a5bf43faae
     0.01%     0.00%  python   [unknown]                      [.] 0xbcc80f733d0cd0f0
     0.01%     0.00%  python   [unknown]                      [.] 0x3ed6f12240b6e754
     0.01%     0.00%  python   [unknown]                      [.] 0x3fa154773e496439
     0.01%     0.00%  python   [unknown]                      [.] 0xbdd262aabcdbf5bc
     0.01%     0.00%  python   [unknown]                      [.] 0xbd909874bd90844a
     0.01%     0.00%  python   [unknown]                      [.] 0x337722993aa393b6
     0.01%     0.00%  python   [unknown]                      [.] 0x3e83080cbee92ed5
     0.01%     0.00%  python   [unknown]                      [.] 0xbde7a7283fe4f02a
     0.01%     0.00%  python   [unknown]                      [.] 0x3f30269f3e70a85c
     0.01%     0.00%  python   [unknown]                      [.] 0x3e73f5b0bf8cb390
     0.01%     0.00%  python   [unknown]                      [.] 0xbe0e03f33d5bce49
     0.01%     0.00%  python   [unknown]                      [.] 0xbd1f13a1bd4e0bb6
     0.01%     0.00%  python   [unknown]                      [.] 0xbf6e375c3f6a00d2
     0.01%     0.00%  python   [unknown]                      [.] 0xbe00cbf63f080208
     0.01%     0.00%  python   [unknown]                      [.] 0x40396638be9811ca
     0.01%     0.00%  python   [unknown]                      [.] 0x3e574550bd350b37
     0.01%     0.00%  python   [unknown]                      [.] 0xc0a5e662c067fd5b
     0.01%     0.00%  python   [unknown]                      [.] 0x3e0d5fcfbdb6af9e
     0.01%     0.00%  python   [unknown]                      [.] 0xc10e5b6fc0ded116
     0.01%     0.00%  python   [unknown]                      [.] 0xbeaf08e93f9893e6
     0.01%     0.00%  python   [unknown]                      [.] 0xc12d16fe40ac53f8
     0.01%     0.00%  python   [unknown]                      [.] 0x3cf877df3d5c2c3a
     0.01%     0.00%  python   [unknown]                      [.] 0x39b19ae739eee1e2
     0.01%     0.00%  python   [unknown]                      [.] 0xbd074fa7be5ef54f
     0.01%     0.00%  python   [unknown]                      [.] 0xc0cfade4c0aca299
     0.01%     0.00%  python   [unknown]                      [.] 0x3c75320f3c95995c
     0.01%     0.00%  python   [unknown]                      [.] 0xc00de304bf0b0510
     0.01%     0.00%  python   [unknown]                      [.] 0xc139a393c0fd0bc5
     0.01%     0.00%  python   [unknown]                      [.] 0x4002932e3fd7ac2e
     0.01%     0.00%  python   [unknown]                      [.] 0xc057a04fc0a995bc
     0.01%     0.00%  python   [unknown]                      [.] 0xbf0b9fb6bee9d29f
     0.01%     0.00%  python   [unknown]                      [.] 0xc087c81ac0926520
     0.01%     0.00%  python   [unknown]                      [.] 0xc04965babff2d640
     0.01%     0.00%  python   [unknown]                      [.] 0xc023f63bc022fb25
     0.01%     0.00%  python   [unknown]                      [.] 0xc0a79e93c0a6ed28
     0.01%     0.00%  python   [unknown]                      [.] 0xbe32e249bf19c3ec
     0.01%     0.00%  python   [unknown]                      [.] 0x3ee86852becf6abf
     0.01%     0.00%  python   [unknown]                      [.] 0xbfda4b6ebfbb50ad
     0.01%     0.00%  python   [unknown]                      [.] 0x3ea238243d0e4976
     0.01%     0.00%  python   [unknown]                      [.] 0xbe34a6863e088fe0
     0.01%     0.00%  python   [unknown]                      [.] 0xc02b11ebc0638905
     0.01%     0.00%  python   [unknown]                      [.] 0xbc96f98cbda9b498
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN
     0.01%     0.00%  python   [unknown]                      [.] 0xc01634c0c011120d
     0.01%     0.00%  python   [unknown]                      [.] 0x3dc23e9cbd53d9ce
     0.01%     0.00%  python   [unknown]                      [.] 0xbe6440993f969f85
     0.01%     0.00%  python   [unknown]                      [.] 0xbeb63b4a3ea0c088
     0.01%     0.00%  python   [unknown]                      [.] 0xbf2bb1f03fd640a0
     0.01%     0.00%  python   [unknown]                      [.] 0xbed3e070beb25e24
     0.01%     0.00%  python   [unknown]                      [.] 0x3f9a1cf0bdbbc1d3
     0.01%     0.00%  python   [unknown]                      [.] 0x3ec4a15b3ec0ba73
     0.01%     0.00%  python   [unknown]                      [.] 0xba55ac50bd8ad7dd
     0.01%     0.00%  python   [unknown]                      [.] 0xc0acae6ac0abc410
     0.01%     0.00%  python   [unknown]                      [.] 0x3da579293d02b970
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ConcatBase::PrepareForCompute
     0.01%     0.00%  python   [unknown]                      [.] 0x3e3aa66dbdbcc19c
     0.01%     0.00%  python   [unknown]                      [.] 0x4096da18c09a3ffe
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::BFCArena::Alloc
     0.01%     0.00%  python   [unknown]                      [.] 0x3f8051fa3ccdceb9
     0.01%     0.00%  python   [unknown]                      [.] 0xbea1036dbf00fc5e
     0.01%     0.00%  python   [unknown]                      [.] 0x3f2b08ba3fde621b
     0.01%     0.00%  python   [unknown]                      [.] 0xbfa359144032c1dc
     0.01%     0.00%  python   [unknown]                      [.] 0x4054af74402736e8
     0.01%     0.00%  python   [unknown]                      [.] 0x3da0db99be9e07ce
     0.01%     0.00%  python   [unknown]                      [.] 0x3e0902bebd590e1d
     0.01%     0.00%  python   [unknown]                      [.] 0x3dfc22043dd4a589
     0.01%     0.00%  python   [unknown]                      [.] 0xc021f44bc00762d2
     0.01%     0.00%  python   [unknown]                      [.] 0x3fc175e4c04162c7
     0.01%     0.00%  python   [unknown]                      [.] 0xbce53e9d3e352dd6
     0.01%     0.00%  python   [unknown]                      [.] 0x3f282a5c3ed1fd00
     0.01%     0.00%  python   [unknown]                      [.] 0xbe26d71cbeb0483c
     0.01%     0.00%  python   [unknown]                      [.] 0x3f20d7783fe3d179
     0.01%     0.00%  python   [unknown]                      [.] 0xbd84555ebc227880
     0.01%     0.00%  python   [unknown]                      [.] 0xbe3695993e8e8381
     0.01%     0.00%  python   [unknown]                      [.] 0xbd0c2286bdee8bdd
     0.01%     0.00%  python   [unknown]                      [.] 0x3dd1df1c3e6f6bb2
     0.01%     0.00%  python   [unknown]                      [.] 0xbd1799fc40310d06
     0.01%     0.00%  python   [unknown]                      [.] 0xbea45058bee76e52
     0.01%     0.00%  python   [unknown]                      [.] 0xbf947077bebcde25
     0.01%     0.00%  python   [unknown]                      [.] 0x3e7d1e8bbed62f95
     0.01%     0.00%  python   [unknown]                      [.] 0x3f9435683f0e50dd
     0.01%     0.00%  python   [unknown]                      [.] 0x3e371e23bd24faf8
     0.01%     0.00%  python   [unknown]                      [.] 0xbafdf8193ce36178
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Tensor::~Tensor
     0.01%     0.00%  python   [unknown]                      [.] 0x906613ebc2894cc9
     0.01%     0.00%  python   [unknown]                      [.] 0x401068a53e658958
     0.01%     0.00%  python   [unknown]                      [.] 0xba9144403e8fb092
     0.01%     0.00%  python   [unknown]                      [.] 0xc09c427e409e323f
     0.01%     0.00%  python   [unknown]                      [.] 0xbed2214dbfe6de2d
     0.01%     0.00%  python   [unknown]                      [.] 0x3cd8e972bcbda196
     0.01%     0.00%  python   [unknown]                      [.] 0x3fc364e2bf183a3a
     0.01%     0.00%  python   [unknown]                      [.] 0x3dc6589e3cda6496
     0.01%     0.00%  python   [unknown]                      [.] 0x3e46a3cfbd78a252
     0.01%     0.00%  python   [unknown]                      [.] 0xbf0960263f9d8822
     0.01%     0.00%  python   [unknown]                      [.] 0xbcc3121a3c1bbec7
     0.01%     0.00%  python   [unknown]                      [.] 0xbd15b316bdb7c8d9
     0.01%     0.00%  python   [unknown]                      [.] 0x3e3faaa03e9072c9
     0.01%     0.00%  python   [unknown]                      [.] 0xbf29353e3e51020b
     0.01%     0.00%  python   [unknown]                      [.] 0x3e589128bd34329d
     0.01%     0.00%  python   [unknown]                      [.] 0xbc866d83bd3420ba
     0.01%     0.00%  python   [unknown]                      [.] 0xbcde36203cf72264
     0.01%     0.00%  python   [unknown]                      [.] 0xc087dbc840247100
     0.01%     0.00%  python   [unknown]                      [.] 0x3db21fc63db5cd65
     0.01%     0.00%  python   [unknown]                      [.] 0x3e1dc1a9bd26dd4b
     0.01%     0.00%  python   [unknown]                      [.] 0xbd8e1150be0be7c0
     0.01%     0.00%  python   [unknown]                      [.] 0x3f55862cbf2117e6
     0.01%     0.00%  python   [unknown]                      [.] 0xc05282013e9e6a51
     0.01%     0.00%  python   [unknown]                      [.] 0xbe442534bf2ec059
     0.01%     0.00%  python   [unknown]                      [.] 0xbe19748abe559002
     0.01%     0.00%  python   [unknown]                      [.] 0x40af792ac08c1379
     0.01%     0.00%  python   [unknown]                      [.] 0xbeb9e66a3ead4e83
     0.01%     0.00%  python   [unknown]                      [.] 0xbe9e1d9e400907cb
     0.01%     0.00%  python   [unknown]                      [.] 0xbeadedd83d5d4964
     0.01%     0.00%  python   [unknown]                      [.] 0xbdf5b99e3d8b96c9
     0.01%     0.00%  python   [unknown]                      [.] 0xbd8b4ea5beabf458
     0.01%     0.00%  python   [unknown]                      [.] 0xbffea49abfbcf5d5
     0.01%     0.00%  python   [unknown]                      [.] 0x3f911e6ec04fc622
     0.01%     0.00%  python   [unknown]                      [.] 0xbf0e91ba3edcba94
     0.01%     0.00%  python   [unknown]                      [.] 0xbe53d5a8be895c82
     0.01%     0.00%  python   [unknown]                      [.] 0xbc89b75ebe5880ee
     0.01%     0.00%  python   [unknown]                      [.] 0x3f25c3923e9dbcf5
     0.01%     0.00%  python   [unknown]                      [.] 0x3fa6cbaf3f0466df
     0.01%     0.00%  python   [unknown]                      [.] 0xbf42376dc0110462
     0.01%     0.00%  python   [unknown]                      [.] 0x40bedb1640724f06
     0.01%     0.00%  python   [unknown]                      [.] 0x3be266b23c19c2e9
     0.01%     0.00%  python   [unknown]                      [.] 0x3fa577ecbfde314a
     0.01%     0.00%  python   [unknown]                      [.] 0x3ef7b6083de069d8
     0.01%     0.00%  python   [unknown]                      [.] 0xbf75bc42c083e744
     0.01%     0.00%  python   [unknown]                      [.] 0x3dad3fba3f11023a
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d96cd
     0.01%     0.00%  python   [unknown]                      [.] 0x3ac829f63ec046b7
     0.01%     0.00%  python   [unknown]                      [.] 0x3d3ab1123e94c4fd
     0.01%     0.00%  python   [unknown]                      [.] 0xbd1e97b8bea69b2f
     0.01%     0.00%  python   [unknown]                      [.] 0xbe18ab95bea82d40
     0.01%     0.00%  python   [unknown]                      [.] 0xbe33c3fe3dcc087b
     0.01%     0.00%  python   [unknown]                      [.] 0x3cc3d8c23d5bfc72
     0.01%     0.00%  python   [unknown]                      [.] 0x3c7a34c03c65832f
     0.01%     0.00%  python   [unknown]                      [.] 0xbdbd0ad9be55c8a6
     0.01%     0.00%  python   [unknown]                      [.] 0xbc1ac7713cb3993f
     0.01%     0.00%  python   [unknown]                      [.] 0xbe8334d8bca62bc8
     0.01%     0.00%  python   [unknown]                      [.] 0x3de6f0d63e95b189
     0.01%     0.00%  python   [unknown]                      [.] 0xbf1b3d6a3f3ee93a
     0.01%     0.00%  python   [unknown]                      [.] 0xbfbb1b3bbcc7dac0
     0.01%     0.00%  python   [unknown]                      [.] 0x3e683394c008efb2
     0.01%     0.00%  python   [unknown]                      [.] 0x3ed8d8043e41d1f4
     0.01%     0.00%  python   [unknown]                      [.] 0xc006a9babe2dbcc1
     0.01%     0.00%  python   [unknown]                      [.] 0x3ec28556bfb14cd7
     0.01%     0.00%  python   [unknown]                      [.] 0x3ff266c0bfdbbdf2
     0.01%     0.00%  python   [unknown]                      [.] 0xbe2e0979bd685e38
     0.01%     0.00%  python   [unknown]                      [.] 0xbfcbd2e93f547da6
     0.01%     0.00%  python   [unknown]                      [.] 0x3d7138c23dccaef8
     0.01%     0.00%  python   [unknown]                      [.] 0x3de83a74bf3892b4
     0.01%     0.00%  python   [unknown]                      [.] 0x3ec336e8be277fbf
     0.01%     0.00%  python   [unknown]                      [.] 0xbea2831c3e1505c7
     0.01%     0.00%  python   [unknown]                      [.] 0x3f0730203fbf9467
     0.01%     0.00%  python   [unknown]                      [.] 0xbf8a88083f8cfd48
     0.01%     0.00%  python   [unknown]                      [.] 0x403edfb23ed56888
     0.01%     0.00%  python   [unknown]                      [.] 0xc06f9e40c0797f60
     0.01%     0.00%  python   [unknown]                      [.] 0x3c4bdef23c8d0d1e
     0.01%     0.00%  python   [unknown]                      [.] 0x3da14b66be0b76af
     0.01%     0.00%  python   [unknown]                      [.] 0xbf0a1cefbdb3a250
     0.01%     0.00%  python   [unknown]                      [.] 0x3f045b8cc098b933
     0.01%     0.00%  python   [unknown]                      [.] 0x3e7b9e263ebfd60b
     0.01%     0.00%  python   [unknown]                      [.] 0x3f6d9e10bebe9e36
     0.01%     0.00%  python   [unknown]                      [.] 0x3f6debe0bf02d976
     0.01%     0.00%  python   [unknown]                      [.] 0xc050f6c3bfc494c2
     0.01%     0.00%  python   [unknown]                      [.] 0xbd8b998cbcee1aec
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa938019
     0.01%     0.00%  python   [unknown]                      [.] 0xc015dae6c042ed3e
     0.01%     0.00%  python   [unknown]                      [.] 0x3d96d09ebd8ecc1b
     0.01%     0.00%  python   [unknown]                      [.] 0x3e59b60f3f4eef7f
     0.01%     0.00%  python   [unknown]                      [.] 0xbe95bd7ebd9e322b
     0.01%     0.00%  python   [unknown]                      [.] 0xbfe91c183e4e8cd2
     0.01%     0.00%  python   [unknown]                      [.] 0xbffbe19cbfe9f2ff
     0.01%     0.00%  python   [unknown]                      [.] 0xbe974f1b3f6dabee
     0.01%     0.00%  python   [unknown]                      [.] 0x4085c71bc09091e1
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d9724
     0.01%     0.00%  python   [unknown]                      [.] 0xbdbbfd49bc0fafcb
     0.01%     0.00%  python   [unknown]                      [.] 0xbbf78f70bcee089f
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e05f7
     0.01%     0.00%  python   [unknown]                      [.] 0xbd4296a73d34d022
     0.01%     0.00%  python   [unknown]                      [.] 0x3fcccc7c40325165
     0.01%     0.00%  python   [unknown]                      [.] 0xc0e15daa3f969e3e
     0.01%     0.00%  python   [unknown]                      [.] 0x40253030c086ab8f
     0.01%     0.00%  python   [unknown]                      [.] 0xbf2b6d6bbeeea0b8
     0.01%     0.00%  python   [unknown]                      [.] 0x3b8b001f3ad193ab
     0.01%     0.00%  python   [unknown]                      [.] 0xbf6c269a405d2509
     0.01%     0.00%  python   [unknown]                      [.] 0xbe8329cc3d271b0c
     0.01%     0.00%  python   [unknown]                      [.] 0x3d90ec993bc3baf7
     0.01%     0.00%  python   [unknown]                      [.] 0x402f1eedbf32e1de
     0.01%     0.00%  python   [unknown]                      [.] 0xbf847c874079f19b
     0.01%     0.00%  python   [unknown]                      [.] 0x3e8afeb5bfa05564
     0.01%     0.00%  python   [unknown]                      [.] 0xbf8860d6be46c452
     0.01%     0.00%  python   [unknown]                      [.] 0xbdade83e3d87d42a
     0.01%     0.00%  python   [unknown]                      [.] 0xbf2225013ecc7148
     0.01%     0.00%  python   [unknown]                      [.] 0x3e7f32583f32c1f6
     0.01%     0.00%  python   [unknown]                      [.] 0x3fefbd5c3e86ff1a
     0.01%     0.00%  python   [unknown]                      [.] 0x3e4706bbbe7c4851
     0.01%     0.00%  python   [unknown]                      [.] 0xbce688b8bf1e70ee
     0.01%     0.00%  python   [unknown]                      [.] 0x3f09b9d13e8aa793
     0.01%     0.00%  python   [unknown]                      [.] 0x3ff927823f6b0384
     0.01%     0.00%  python   [unknown]                      [.] 0x40cee31640fca3b5
     0.01%     0.00%  python   [unknown]                      [.] 0xbe4a59fa400fafa8
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>
     0.01%     0.00%  python   [unknown]                      [.] 0xbfa87ef8bfd5abc0
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8fd684
     0.01%     0.00%  python   [unknown]                      [k] 0xbf62aafec00e0c1b
     0.01%     0.00%  python   [unknown]                      [.] 0xbbad9870be2162f5
     0.01%     0.00%  python   [unknown]                      [.] 0xbfe6e5b83fd3e156
     0.01%     0.00%  python   [unknown]                      [.] 0x3e092b40be6e8c72
     0.01%     0.00%  python   [unknown]                      [.] 0x409aa97c40cea5d4
     0.01%     0.00%  python   [unknown]                      [.] 0xc61c4000bfeb466d
     0.01%     0.00%  python   [unknown]                      [.] 0xbe532e15bd2fd8b9
     0.01%     0.00%  python   [unknown]                      [.] 0xc167f950c171afe6
     0.01%     0.00%  python   [unknown]                      [.] 0x3e6f0084bf8ee67c
     0.01%     0.00%  python   [unknown]                      [.] 0x3e8863e93dcc5f1a
     0.01%     0.00%  python   [unknown]                      [.] 0xbffdd2c93f4042f9
     0.01%     0.00%  python   [unknown]                      [.] 0x3e92ded340247b10
     0.01%     0.00%  python   [unknown]                      [.] 0xbff2f5e1bfe8e750
     0.01%     0.00%  python   [unknown]                      [.] 0xc0b65c30c0a9dcf8
     0.01%     0.00%  python   [unknown]                      [.] 0xbfb66d3a3e16584a
     0.01%     0.00%  python   [unknown]                      [.] 0x4008d615bfc0cb78
     0.01%     0.00%  python   [unknown]                      [.] 0xbbfe5a80be832994
     0.01%     0.00%  python   [unknown]                      [.] 0xbffb14d53ff4b620
     0.01%     0.00%  python   [unknown]                      [.] 0xbf9ffb79bf1483d8
     0.01%     0.00%  python   [unknown]                      [.] 0xbeccc2a2be3c4a11
     0.01%     0.00%  python   [unknown]                      [.] 0xbe0cac903f1a0979
     0.01%     0.00%  python   [unknown]                      [.] 0xc014f0c83fa3066d
     0.01%     0.00%  python   [unknown]                      [.] 0x3fa278683ca92df7
     0.01%     0.00%  python   [unknown]                      [.] 0x4026aeb73edf3d3a
     0.01%     0.00%  python   [unknown]                      [.] 0xc0813fe2401009e7
     0.01%     0.00%  python   [unknown]                      [.] 0x3eb20a61be2ff7cf
     0.01%     0.00%  python   [unknown]                      [.] 0xbedda6ac3f4a233e
     0.01%     0.00%  python   [unknown]                      [.] 0x4020105cc028e69f
     0.01%     0.00%  python   [unknown]                      [.] 0xbe6b4b5f3ea85d73
     0.01%     0.00%  python   [unknown]                      [.] 0xc0be4582c0cfc308
     0.01%     0.00%  python   [unknown]                      [.] 0x3f1bb3723eebe114
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::IsTransposeReshape
     0.01%     0.00%  python   [unknown]                      [.] 0x0000000000000100
     0.01%     0.00%  python   [unknown]                      [.] 0x0000555f3eefcd80
     0.01%     0.00%  python   [unknown]                      [.] 0x3db0f6d8bf393cfa
     0.01%     0.00%  python   [unknown]                      [.] 0xbfa2d3c2be497392
     0.01%     0.00%  python   [unknown]                      [.] 0x3cf08b8fbe80ce5c
     0.01%     0.00%  python   [unknown]                      [.] 0x3f83d40c3fd7234b
     0.01%     0.00%  python   [unknown]                      [.] 0x3fe697443f626cf9
     0.01%     0.00%  python   [unknown]                      [.] 0xbdc10ea5bd99a1cc
     0.01%     0.00%  python   [unknown]                      [.] 0xc015c9cfbdc46fac
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa80407e
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab400a34
     0.01%     0.00%  python   [unknown]                      [.] 0x40100c303f28e321
     0.01%     0.00%  python   [unknown]                      [.] 0x3e177a16be0bca4f
     0.01%     0.00%  python   [unknown]                      [.] 0x40181550c081b622
     0.01%     0.00%  python   [unknown]                      [.] 0x3eed9f61406fa77c
     0.01%     0.00%  python   [unknown]                      [.] 0xbf77a6053e29dc6e
     0.01%     0.00%  python   [unknown]                      [.] 0x3fabe9d2408059f9
     0.01%     0.00%  python   [unknown]                      [.] 0xbeb92d6a3ea805d2
     0.01%     0.00%  python   [unknown]                      [.] 0xc09b8310beb8ef2e
     0.01%     0.00%  python   [unknown]                      [.] 0x3eca0a61bd0193de
     0.01%     0.00%  python   [unknown]                      [.] 0xbee89399bfad151c
     0.01%     0.00%  python   [unknown]                      [.] 0xc0d8fefd40631553
     0.01%     0.00%  python   [unknown]                      [.] 0xbf5ebeaabfb789b1
     0.01%     0.00%  python   [unknown]                      [.] 0xbf3d47a73ea34cb2
     0.01%     0.00%  python   [unknown]                      [.] 0xc0156cdb40089bb1
     0.01%     0.00%  python   [unknown]                      [.] 0xc0c93fabc0ced57f
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8f7049
     0.01%     0.01%  python   libc-2.27.so                   [.] malloc
     0.01%     0.00%  python   [unknown]                      [.] 0x3febd56cbfb116f3
     0.01%     0.00%  python   [unknown]                      [.] 0xbe905c7a3f73acc8
     0.01%     0.00%  python   [unknown]                      [.] 0xbfedf5dfc02aea42
     0.01%     0.00%  python   [unknown]                      [.] 0xbf3d8a67bf1f2a88
     0.01%     0.00%  python   [unknown]                      [.] 0x3ee83f203f538756
     0.01%     0.00%  python   [unknown]                      [.] 0x3e3ce1183db7fffc
     0.01%     0.00%  python   [unknown]                      [.] 0xc0f3cf98c0f09943
     0.01%     0.00%  python   [unknown]                      [.] 0xbebf90e8bec4e578
     0.01%     0.00%  python   [unknown]                      [.] 0xc0003a884013b1fa
     0.01%     0.00%  python   [unknown]                      [.] 0x3efee8493f1aea53
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] MlasTanhKernelFma3
     0.01%     0.00%  python   [unknown]                      [.] 0xbe502aba3faf646a
     0.01%     0.00%  python   [unknown]                      [.] 0x3ec2b1e33ef296d7
     0.01%     0.00%  python   [unknown]                      [.] 0x412ab902416f26ff
     0.01%     0.00%  python   [unknown]                      [.] 0x3fa32c2a40859da8
     0.01%     0.00%  python   [unknown]                      [.] 0x409fb04cc0a27b78
     0.01%     0.00%  python   [unknown]                      [.] 0x3e1be0fb3f40f726
     0.01%     0.00%  python   [unknown]                      [.] 0x3c6af0803fbfcaa0
     0.01%     0.00%  python   [unknown]                      [.] 0xc0c4e9c2c0ba5214
     0.01%     0.00%  python   [unknown]                      [.] 0xbfb8aa61c0364bcd
     0.01%     0.00%  python   [unknown]                      [.] 0xbc253f1fbe945430
     0.01%     0.00%  python   [unknown]                      [.] 0xbf375c62be8ce3aa
     0.01%     0.00%  python   [unknown]                      [.] 0x3f24ccbebca89e18
     0.01%     0.00%  python   [unknown]                      [.] 0xbe1250293f908079
     0.01%     0.00%  python   [unknown]                      [.] 0xbf947b543f91517e
     0.01%     0.00%  python   [unknown]                      [.] 0x3f3b327d3d8238fe
     0.01%     0.00%  python   [unknown]                      [.] 0xc04a95d1409af6c8
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Gemm<float>::Compute
     0.01%     0.00%  python   [unknown]                      [.] 0xc0053c9cbf679b34
     0.01%     0.00%  python   [unknown]                      [.] 0xbdb4b510be847210
     0.01%     0.00%  python   [unknown]                      [.] 0x3931d76439343b96
     0.01%     0.00%  python   [unknown]                      [.] 0x3fcf3788c027e99a
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::TensorType<float>::GetElementType
     0.01%     0.00%  python   [unknown]                      [.] 0x3f303860401fbf04
     0.01%     0.00%  python   [unknown]                      [.] 0xbff7944c3eba4338
     0.01%     0.00%  python   [unknown]                      [.] 0x3ed87eca3f06345f
     0.01%     0.00%  python   [unknown]                      [.] 0xbdb5394dbf97b8ba
     0.01%     0.00%  python   [unknown]                      [.] 0xbff39bf1c0287264
     0.01%     0.00%  python   [unknown]                      [.] 0xbef302ccbf6eb139
     0.01%     0.00%  python   [unknown]                      [.] 0xbe824db6bf70d6ba
     0.01%     0.00%  python   [unknown]                      [.] 0xbfe8e71ebc9a6d98
     0.01%     0.00%  python   [unknown]                      [.] 0x3f0c7319bd7a6a29
     0.01%     0.00%  python   [unknown]                      [.] 0x3facbd0a3fc2e112
     0.01%     0.00%  python   [unknown]                      [.] 0xbec882f8bf3db83c
     0.01%     0.00%  python   [unknown]                      [.] 0x4090fe8cbf554de6
     0.01%     0.00%  python   [unknown]                      [.] 0x3d1b6b01bce1f3ab
     0.01%     0.00%  python   [unknown]                      [.] 0x38bf47cc39881bc9
     0.01%     0.00%  python   [unknown]                      [.] 0x3f12a0e43feb6880
     0.01%     0.00%  python   [unknown]                      [.] 0xbf408b8ebe0cc5f1
     0.01%     0.00%  python   [unknown]                      [.] 0xc0d234713e0cc30c
     0.01%     0.00%  python   [unknown]                      [.] 0xbfc482523f96dcdd
     0.01%     0.00%  python   [unknown]                      [.] 0xbe7e63ac3daf59cd
     0.01%     0.00%  python   [unknown]                      [.] 0xbe2476a43e3b6de5
     0.01%     0.00%  python   [unknown]                      [.] 0x3fbaefd2c03855fa
     0.01%     0.00%  python   [unknown]                      [.] 0x402685e7c096079a
     0.01%     0.00%  python   [unknown]                      [.] 0xbde84e97bdc92d59
     0.01%     0.00%  python   [unknown]                      [.] 0x3f194e7240136e79
     0.01%     0.00%  python   [unknown]                      [.] 0xbf0b3db4bfc63572
     0.01%     0.00%  python   [unknown]                      [.] 0x40a9acb0bfdc1c17
     0.01%     0.00%  python   [unknown]                      [.] 0xc007b0ea4041818c
     0.01%     0.00%  python   [unknown]                      [.] 0x3f80a63a3f9c102a
     0.01%     0.00%  python   [unknown]                      [.] 0xbf7549123f4fd7c4
     0.01%     0.00%  python   [unknown]                      [.] 0xbebba928404b15d5
     0.01%     0.00%  python   [unknown]                      [.] 0xbfbfbc513eba7daa
     0.01%     0.00%  python   [unknown]                      [.] 0x3d8ff3f8be2305bc
     0.01%     0.00%  python   [unknown]                      [.] 0xbfa4dd8cbf0b4db9
     0.01%     0.00%  python   [unknown]                      [.] 0xc0564118c052222e
     0.01%     0.00%  python   [unknown]                      [.] 0x4052b8bac013d3ab
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::SessionState::GetExecutionPlan
     0.01%     0.00%  python   [unknown]                      [.] 0xbcb40d583fedf4dc
     0.01%     0.00%  python   [unknown]                      [.] 0x3fc0154dbfe55238
     0.01%     0.00%  python   [unknown]                      [.] 0xbf5649213f2d52b6
     0.01%     0.00%  python   [unknown]                      [.] 0xc0725aa6c038cbfd
     0.01%     0.00%  python   [unknown]                      [.] 0x3f2736143f87f4b2
     0.01%     0.00%  python   [unknown]                      [.] 0xbca3ee23bea89e82
     0.01%     0.00%  python   [unknown]                      [.] 0x3ebd3b463eeb7f8e
     0.01%     0.00%  python   [unknown]                      [.] 0xbf1db594be90fcf8
     0.01%     0.00%  python   [unknown]                      [.] 0xbdb06862bcabed17
     0.01%     0.00%  python   [unknown]                      [.] 0x3dff1f483fecf620
     0.01%     0.00%  python   [unknown]                      [.] 0xc033540a3fbd3f9a
     0.01%     0.00%  python   [unknown]                      [.] 0x4082a5993eaaa0f5
     0.01%     0.00%  python   [unknown]                      [.] 0x3e69bfb03fc91442
     0.01%     0.00%  python   [unknown]                      [.] 0xbf4f10c23ee6a7d1
     0.01%     0.00%  python   [unknown]                      [.] 0x3e5c7a3c3fb77e79
     0.01%     0.00%  python   [unknown]                      [.] 0x3eda90063f63c4e7
     0.01%     0.00%  python   [unknown]                      [.] 0x3ea72fc23fa0c153
     0.01%     0.00%  python   [unknown]                      [.] 0x3eb2a01ebda18063
     0.01%     0.00%  python   [unknown]                      [.] 0x3f35d818bfffd939
     0.01%     0.00%  python   [unknown]                      [.] 0xbe5edd103f0a581b
     0.01%     0.00%  python   [unknown]                      [.] 0xbe87e770bfdbe3ff
     0.01%     0.00%  python   [unknown]                      [.] 0x3ee7bf46bf256a02
     0.01%     0.00%  python   [unknown]                      [.] 0xc01556f7c002e594
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e07a5
     0.01%     0.00%  python   [unknown]                      [.] 0x3fabb64a40545444
     0.01%     0.00%  python   [unknown]                      [.] 0x3d033d283fae1a29
     0.01%     0.00%  python   [unknown]                      [.] 0x3e0e8d9cbfeab6c2
     0.01%     0.00%  python   [unknown]                      [.] 0xc0c6f19340928407
     0.01%     0.00%  python   [unknown]                      [.] 0xbd95bb09be0101f7
     0.01%     0.00%  python   [unknown]                      [.] 0xc0bdd4d6c0887b4e
     0.01%     0.00%  python   [unknown]                      [.] 0x3fe70837c0251e46
     0.01%     0.00%  python   [unknown]                      [.] 0x405e7fb44093b88d
     0.01%     0.00%  python   [unknown]                      [.] 0x4007179fbfb87cc1
     0.01%     0.00%  python   [unknown]                      [.] 0x40792620402a6bf4
     0.01%     0.00%  python   [unknown]                      [.] 0xbefd5840c0ba08ba
     0.01%     0.00%  python   [unknown]                      [.] 0x3e853b8e3dbf8465
     0.01%     0.00%  python   [unknown]                      [.] 0xc080b332bf72816a
     0.01%     0.00%  python   [unknown]                      [.] 0x400d803bbe5fd078
     0.01%     0.00%  python   [unknown]                      [.] 0x407df741409f8d02
     0.01%     0.00%  python   [unknown]                      [.] 0xbd7233ae3f39fb8c
     0.01%     0.00%  python   [unknown]                      [.] 0xbfd4b398bfeeb7a5
     0.01%     0.00%  python   [unknown]                      [.] 0xbdcfc324c0815fb4
     0.01%     0.00%  python   [unknown]                      [.] 0xbf047d183f43c733
     0.01%     0.00%  python   [unknown]                      [.] 0x40133e4dc09b1978
     0.01%     0.00%  python   [unknown]                      [.] 0x3e0b038e3ccfc939
     0.01%     0.00%  python   [unknown]                      [.] 0xbed32c78c045a811
     0.01%     0.00%  python   [unknown]                      [.] 0x3fc53b023fb485fc
     0.01%     0.00%  python   [unknown]                      [.] 0xbfb2c2d53f5ea46e
     0.01%     0.00%  python   [unknown]                      [.] 0x4043972ebf928ba8
     0.01%     0.00%  python   [unknown]                      [.] 0x401150e3c043640c
     0.01%     0.00%  python   [unknown]                      [.] 0x400eba683eed4e50
     0.01%     0.00%  python   [unknown]                      [.] 0xbf3fc942c01695c5
     0.01%     0.00%  python   [unknown]                      [.] 0xbf0e3bb6401c3800
     0.01%     0.00%  python   [unknown]                      [.] 0x405c8b5ebfc2f1cd
     0.01%     0.00%  python   [unknown]                      [.] 0xc025e593c08d667c
     0.01%     0.00%  python   [unknown]                      [.] 0x3cb3a549be2660c3
     0.01%     0.00%  python   [unknown]                      [.] 0xbe40b5a63f936330
     0.01%     0.00%  python   [unknown]                      [.] 0x3ff2ec173fce3f5b
     0.01%     0.00%  python   [unknown]                      [k] 0xbf8f45ec400fb406
     0.01%     0.00%  python   [unknown]                      [.] 0xbda263b03e3c1590
     0.01%     0.00%  python   [unknown]                      [.] 0x3f4ccd773dee4ffa
     0.01%     0.00%  python   [unknown]                      [.] 0x402e5ba2c138f252
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffab2d9266
     0.01%     0.00%  python   [unknown]                      [.] 0xbf25d1ddc01786b4
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer
     0.01%     0.00%  python   [unknown]                      [.] 0x3f8efe8fbd80590a
     0.01%     0.00%  python   [unknown]                      [.] 0x41620b4f41939ecf
     0.01%     0.00%  python   [unknown]                      [.] 0xbedf7c04c00b809f
     0.01%     0.00%  python   [unknown]                      [.] 0xc105d4fa3f6f540c
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e0a12
     0.01%     0.00%  python   [unknown]                      [.] 0xc029e2c0c045fc71
     0.01%     0.00%  python   [unknown]                      [.] 0xbde41f003f636cec
     0.01%     0.00%  python   [unknown]                      [.] 0x3e9ea3ea3f0a394b
     0.01%     0.00%  python   [unknown]                      [.] 0x3db566c93d0f5c98
     0.01%     0.00%  python   [unknown]                      [.] 0xbeda7850be0968fd
     0.01%     0.00%  python   [unknown]                      [.] 0x3f9c92a03e0a6220
     0.01%     0.00%  python   [unknown]                      [.] 0xbefcb1c6bdf90f59
     0.01%     0.00%  python   [unknown]                      [.] 0x3ff554e4c00c8812
     0.01%     0.00%  python   [unknown]                      [.] 0x3e456f4c3d82cda2
     0.01%     0.00%  python   [unknown]                      [.] 0x3f3fe5b53f9c2a13
     0.01%     0.00%  python   [unknown]                      [.] 0xbfde4cb43ef5967a
     0.01%     0.00%  python   [unknown]                      [.] 0x41093ef4bfe3bff8
     0.01%     0.00%  python   [unknown]                      [.] 0x3edfaaf83fdf38c4
     0.01%     0.00%  python   [unknown]                      [.] 0xbea4e98d401b0b53
     0.01%     0.00%  python   [unknown]                      [.] 0xc0124a32bebc8daa
     0.01%     0.00%  python   [unknown]                      [.] 0x3e1f18063fd339ca
     0.01%     0.00%  python   [unknown]                      [.] 0x3db8bb233d6840f8
     0.01%     0.00%  python   [unknown]                      [.] 0xc0317a6a3f054039
     0.01%     0.00%  python   [unknown]                      [.] 0xbf9e3e103f730c9e
     0.01%     0.00%  python   [unknown]                      [.] 0x3f8d5f8f40574ce2
     0.01%     0.00%  python   [unknown]                      [.] 0x400fb4933fa00934
     0.01%     0.00%  python   [unknown]                      [.] 0xbf6833f13e5c9434
     0.01%     0.00%  python   [unknown]                      [.] 0xbdb2d4d5bfd35812
     0.01%     0.00%  python   [unknown]                      [.] 0xc0786f5a409c3566
     0.01%     0.00%  python   [unknown]                      [.] 0xbf8562003dfeca30
     0.01%     0.00%  python   [unknown]                      [.] 0xbdc4f5de3db5ded0
     0.01%     0.00%  python   [unknown]                      [.] 0x3f3baf36bfe55fef
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Split::ComputeImpl<float>
     0.01%     0.00%  python   [unknown]                      [.] 0xc0216721c05387f6
     0.01%     0.00%  python   [unknown]                      [.] 0xbdab21c23fb68a7c
     0.01%     0.00%  python   [unknown]                      [.] 0xbf6e4f4abe7fdb30
     0.01%     0.00%  python   [unknown]                      [.] 0x40f77055c09e68f5
     0.01%     0.00%  python   [unknown]                      [.] 0xc0b74fd4c072cc48
     0.01%     0.00%  python   [unknown]                      [.] 0xbf992736bf850dba
     0.01%     0.00%  python   [unknown]                      [.] 0x406911673fd702e6
     0.01%     0.00%  python   [unknown]                      [.] 0xbda43dac3f63b84b
     0.01%     0.00%  python   [unknown]                      [.] 0x405098083e7798fc
     0.01%     0.00%  python   [unknown]                      [.] 0xc04c4b7e3ea37454
     0.01%     0.00%  python   [unknown]                      [.] 0x3f25a87540043e1d
     0.01%     0.00%  python   [unknown]                      [.] 0xbf58c6424006b526
     0.01%     0.00%  python   [unknown]                      [.] 0x4060d8d6c08fceb6
     0.01%     0.00%  python   [unknown]                      [.] 0x403d7577c0d58a64
     0.01%     0.00%  python   [unknown]                      [.] 0x40344dd93fbce0a8
     0.01%     0.00%  python   [unknown]                      [.] 0xbf7e17eabf83ed11
     0.01%     0.00%  python   [unknown]                      [.] 0x3c8bf9b7be374469
     0.01%     0.00%  python   [unknown]                      [.] 0xbf91ba444107c38e
     0.01%     0.00%  python   [unknown]                      [.] 0x3d8059d03e15aeb4
     0.01%     0.00%  python   [unknown]                      [.] 0x401607edbf08ca9d
     0.01%     0.00%  python   [unknown]                      [.] 0xc02730b83fd2fb3c
     0.01%     0.00%  python   [unknown]                      [.] 0x3fd29d85bf5803e7
     0.01%     0.00%  python   [unknown]                      [.] 0xc0577431bdee268e
     0.01%     0.00%  python   [unknown]                      [.] 0xbf8918c04021ceb9
     0.01%     0.00%  python   [unknown]                      [.] 0x405fabc7409729f2
     0.01%     0.00%  python   [unknown]                      [.] 0x3f560ebb3f1d3599
     0.01%     0.00%  python   [unknown]                      [.] 0x3f7722653de9ae68
     0.01%     0.00%  python   [unknown]                      [.] 0xc0513d6c3f8df5ce
     0.01%     0.00%  python   [unknown]                      [.] 0x3fa6a854bfbca8a5
     0.01%     0.00%  python   [unknown]                      [.] 0xbd5dbcf03f409fd9
     0.01%     0.00%  python   [unknown]                      [.] 0x3f1d9d7cc00f95f9
     0.01%     0.00%  python   [unknown]                      [.] 0x3f245b1d3f363f50
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Reshape::Compute
     0.01%     0.00%  python   [unknown]                      [.] 0x3ff1af61409ddbbf
     0.01%     0.00%  python   [unknown]                      [.] 0xbf678718c04103c1
     0.01%     0.00%  python   [unknown]                      [.] 0x3e9a36d6c08352ed
     0.01%     0.00%  python   [unknown]                      [.] 0xc035ef263f8cdc6e
     0.01%     0.00%  python   [unknown]                      [.] 0xbdd23582be22f27d
     0.01%     0.00%  python   [unknown]                      [.] 0xc018a080c0115337
     0.01%     0.00%  python   [unknown]                      [.] 0xbfcbc1283f9ba7d2
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa94703b
     0.01%     0.00%  python   [unknown]                      [.] 0xbe8fec973f58ae74
     0.01%     0.00%  python   [unknown]                      [.] 0xbf6931fb3ff52464
     0.01%     0.00%  python   [unknown]                      [.] 0x401a10b23d70a9f0
     0.01%     0.00%  python   [unknown]                      [.] 0xbfd29e7bbf837316
     0.01%     0.00%  python   [unknown]                      [.] 0x3f7bccfec01134a0
     0.01%     0.00%  python   [unknown]                      [.] 0x4084193c3ecf9102
     0.01%     0.00%  python   [unknown]                      [.] 0xbfa1f302401c9bc2
     0.01%     0.00%  python   [unknown]                      [.] 0x3fcd85ecbf1af624
     0.01%     0.00%  python   [unknown]                      [.] 0xbeefc1c2401f1194
     0.01%     0.00%  python   [unknown]                      [.] 0xbf6fddf5402ade5b
     0.01%     0.00%  python   [unknown]                      [.] 0xbf996098be3fde6c
     0.01%     0.00%  python   [unknown]                      [.] 0xbf95d38e40e90dbf
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffab401c60
     0.01%     0.00%  python   [unknown]                      [.] 0xbfe9ed6a3fa978a0
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::FeedsFetchesManager::~FeedsFetchesManager
     0.01%     0.00%  python   [unknown]                      [.] 0xbf6e5f99bebb6bf4
     0.01%     0.00%  python   [unknown]                      [.] 0xbf3da70cbf3794fb
     0.01%     0.00%  python   [unknown]                      [.] 0x3dcbbd6b3f27b350
     0.01%     0.00%  python   [unknown]                      [.] 0xbf8d15db3ef3ea7a
     0.01%     0.00%  python   [unknown]                      [.] 0xbe399c31bd73c5ae
     0.01%     0.00%  python   [unknown]                      [.] 0xbedaa1c4bffc24bd
     0.01%     0.00%  python   [unknown]                      [.] 0xc051ea54405fd851
     0.01%     0.00%  python   [unknown]                      [.] 0xbf8498cd40000f24
     0.01%     0.00%  python   [unknown]                      [.] 0xbf0c92d2bdd94ba7
     0.01%     0.00%  python   [unknown]                      [.] 0x3db29b783f9b5ad8
     0.01%     0.00%  python   [unknown]                      [.] 0x3f25e3b0bf2049bc
     0.01%     0.00%  python   [unknown]                      [.] 0xbfd3205fc05f591a
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8dbd80
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Tensor::ReleaseBuffer
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa805486
     0.01%     0.00%  python   [unknown]                      [.] 0xbd39e70abe8bbcfc
     0.01%     0.00%  python   [unknown]                      [.] 0x3e109ad8bed42416
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::TensorTypeBase::IsTensorType
     0.01%     0.00%  python   [unknown]                      [.] 0xbd38a68fbd59c465
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Graph::NodeAtIndexImpl
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa937c46
     0.01%     0.01%  python   libstdc++.so.6.0.26            [.] operator new
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e05c1
     0.01%     0.00%  python   [unknown]                      [.] 0xbd13558f3e379175
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8f712d
     0.01%     0.00%  python   [unknown]                      [.] 0xbf8fafdf3ea63274
     0.01%     0.00%  python   [unknown]                      [.] 0x0000555f3ef01580
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffab400949
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8777fe
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab401cef
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab4022bf
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa852062
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8cae45
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffab401c65
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffab401250
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa934cad
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e4290
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e3e37
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8be115
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa933020
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa932a12
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8be389
     0.01%     0.00%  python   [unknown]                      [.] 0xbdc4a822bd733563
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa938bca
     0.01%     0.01%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::IExecutionFrame::GetMLValue
     0.01%     0.00%  python   [unknown]                      [.] 0x3d0ee9afbe7c936c
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8ea69f
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d974f
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8caf30
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d17ba
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d96f0
     0.01%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d4064
     0.01%     0.00%  python   [unknown]                      [.] 0x3ce8e057be91a46a
     0.01%     0.01%  python   [kernel.kallsyms]              [k] 0xffffffffaa9464be
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] operator delete@plt
     0.00%     0.00%  python   [unknown]                      [.] 0x3b9a6582be2bf688
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8054a0
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa0f2c0
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8fd6a7
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::SplitBase::PrepareForCompute
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa937f84
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab4009cf
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::DataTypeImpl::GetType<onnxruntime::Tensor>
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa7daa2
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa927449
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa9347e8
     0.00%     0.00%  python   libstdc++.so.6.0.26            [.] operator delete
     0.00%     0.00%  python   [unknown]                      [.] 0xbdfa617cbece9f5b
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, true> > >::_M_allocate_buckets
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8fd69b
     0.00%     0.00%  python   [unknown]                      [.] 0x00007efe6ef9b7c0
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::Tensor::Init
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] MlasExecuteThreaded
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d96d4
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::ExecutionFrame::ReleaseMLValueImpl
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab40001c
     0.00%     0.00%  python   [unknown]                      [k] 0x2a2a2a2a2a2a2a2a
     0.00%     0.00%  python   libc-2.27.so                   [.] memcpy@GLIBC_2.2.5
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::OpKernelContext::Output
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa935cb8
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa9370a0
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa9371f3
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab402797
     0.00%     0.00%  python   onnxruntime_pybind11_state.so  [.] onnxruntime::PrimitiveDataTypeBase::AsPrimitiveDataType
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa93836d
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa935d7a
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa945ce4
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa943daf
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8e3e46
     0.00%     0.00%  python   python3.7                      [.] _PyEval_EvalFrameDefault
     0.00%     0.00%  python   [unknown]                      [.] 0x0000555f35d9a0a0
     0.00%     0.00%  python   [unknown]                      [.] 0x00007efe6efc0a80
     0.00%     0.00%  python   libc-2.27.so                   [.] _IO_file_underflow@@GLIBC_2.2.5
     0.00%     0.00%  python   libc-2.27.so                   [.] read
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab40008c
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa804207
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaadccca
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaadcc77
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaadcade
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaadca2b
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaae801fe
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaae85532
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8f2df4
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab2d7c83
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab2d41f3
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffab2d3d4a
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaa8d2474
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa0f1c4
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa073f0
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa072d8
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa06a4d
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa071d2
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa0c2ab
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa0a518
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa070e6
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa0f169
     0.00%     0.00%  python   [kernel.kallsyms]              [k] 0xffffffffaaa0f150


#
# (Cannot load tips.txt file, please install perf!)
#
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (9759 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006c5ce0 <MlasGemmFloatKernelFma3>:
         :            MlasGemmFloatKernelFma3():
    0.12 :   6c5ce0:       push   %rbp
    0.00 :   6c5ce1:       push   %rbx
    0.00 :   6c5ce2:       push   %r15
    0.00 :   6c5ce4:       mov    %rdi,%r11
    0.02 :   6c5ce7:       mov    0x20(%rsp),%r10
    0.00 :   6c5cec:       shl    $0x2,%r10
    0.00 :   6c5cf0:       mov    0x28(%rsp),%rax
    0.02 :   6c5cf5:       shl    $0x2,%rax
    0.00 :   6c5cf9:       movzbq 0x30(%rsp),%r15
    0.00 :   6c5cff:       vmovss %xmm0,-0x10(%rsp)
    0.00 :   6c5d05:       vzeroall
    0.31 :   6c5d08:       cmp    $0x5,%r8
    0.00 :   6c5d0c:       ja     6c6565 <MlasGemmFloatKernelFma3+0x885>
    0.00 :   6c5d12:       je     6c7247 <MlasGemmFloatKernelFma3+0x1567>
    0.00 :   6c5d18:       cmp    $0x3,%r8
    0.00 :   6c5d1c:       ja     6c6057 <MlasGemmFloatKernelFma3+0x377>
    0.00 :   6c5d22:       je     6c6e3d <MlasGemmFloatKernelFma3+0x115d>
    0.00 :   6c5d28:       cmp    $0x1,%r8
    0.00 :   6c5d2c:       je     6c6c49 <MlasGemmFloatKernelFma3+0xf69>
    0.00 :   6c5d32:       cmp    $0x8,%r9
    0.00 :   6c5d36:       jbe    6c5ed8 <MlasGemmFloatKernelFma3+0x1f8>
    0.00 :   6c5d3c:       mov    %rcx,%rbp
    0.00 :   6c5d3f:       sub    $0x4,%rbp
    0.00 :   6c5d43:       jb     6c5e23 <MlasGemmFloatKernelFma3+0x143>
    0.00 :   6c5d49:       prefetcht0 0x100(%rsi)
    0.00 :   6c5d50:       vmovaps (%rsi),%ymm0
    0.00 :   6c5d54:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c5d59:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c5d5e:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5d63:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5d68:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c5d6e:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5d73:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5d78:       prefetcht0 0x140(%rsi)
    0.00 :   6c5d7f:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c5d84:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c5d89:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c5d8f:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5d94:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5d99:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c5da0:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5da5:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5daa:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c5dae:       prefetcht0 0x100(%rsi)
    0.00 :   6c5db5:       vmovaps (%rsi),%ymm0
    0.00 :   6c5db9:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c5dbe:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c5dc4:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5dc9:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5dce:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c5dd5:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5dda:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5ddf:       prefetcht0 0x140(%rsi)
    0.00 :   6c5de6:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c5deb:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c5df0:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c5df6:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5dfb:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5e00:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c5e07:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5e0c:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5e11:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c5e15:       add    $0x10,%rdi
    0.00 :   6c5e19:       sub    $0x4,%rbp
    0.00 :   6c5e1d:       jae    6c5d49 <MlasGemmFloatKernelFma3+0x69>
    0.00 :   6c5e23:       add    $0x4,%rbp
    0.00 :   6c5e27:       je     6c5e5e <MlasGemmFloatKernelFma3+0x17e>
    0.00 :   6c5e29:       vmovaps (%rsi),%ymm0
    0.00 :   6c5e2d:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c5e32:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c5e37:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5e3c:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5e41:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c5e47:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5e4c:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5e51:       add    $0x40,%rsi
    0.00 :   6c5e55:       add    $0x4,%rdi
    0.00 :   6c5e59:       dec    %rbp
    0.00 :   6c5e5c:       jne    6c5e29 <MlasGemmFloatKernelFma3+0x149>
    0.00 :   6c5e5e:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c5e65:       prefetcht0 0x40(%rdx)
    0.00 :   6c5e69:       prefetcht0 0x40(%rdx,%rax,1)
    0.00 :   6c5e6e:       sub    $0x10,%r9
    0.00 :   6c5e72:       jb     6c5fe4 <MlasGemmFloatKernelFma3+0x304>
    0.00 :   6c5e78:       test   %r15b,%r15b
    0.00 :   6c5e7b:       jne    6c5e97 <MlasGemmFloatKernelFma3+0x1b7>
    0.00 :   6c5e7d:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c5e82:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c5e88:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c5e8e:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c5e95:       jmp    6c5ea7 <MlasGemmFloatKernelFma3+0x1c7>
    0.00 :   6c5e97:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c5e9b:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c5e9f:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c5ea3:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c5ea7:       vmovups %ymm4,(%rdx)
    0.00 :   6c5eab:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c5eb0:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c5eb5:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.00 :   6c5ebb:       add    $0x40,%rdx
    0.00 :   6c5ebf:       mov    %r11,%rdi
    0.00 :   6c5ec2:       vzeroall
    0.00 :   6c5ec5:       cmp    $0x8,%r9
    0.00 :   6c5ec9:       ja     6c5d3c <MlasGemmFloatKernelFma3+0x5c>
    0.00 :   6c5ecf:       test   %r9,%r9
    0.00 :   6c5ed2:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c5ed8:       mov    %rcx,%rbp
    0.00 :   6c5edb:       sub    $0x4,%rbp
    0.00 :   6c5edf:       jb     6c5f83 <MlasGemmFloatKernelFma3+0x2a3>
    0.00 :   6c5ee5:       prefetcht0 0x100(%rsi)
    0.00 :   6c5eec:       vmovaps (%rsi),%ymm0
    0.00 :   6c5ef0:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c5ef5:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5efa:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c5f00:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5f05:       prefetcht0 0x140(%rsi)
    0.00 :   6c5f0c:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c5f11:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c5f17:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5f1c:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c5f23:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5f28:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c5f2c:       prefetcht0 0x100(%rsi)
    0.00 :   6c5f33:       vmovaps (%rsi),%ymm0
    0.00 :   6c5f37:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c5f3d:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5f42:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c5f49:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5f4e:       prefetcht0 0x140(%rsi)
    0.00 :   6c5f55:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c5f5a:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c5f60:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5f65:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c5f6c:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5f71:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c5f75:       add    $0x10,%rdi
    0.00 :   6c5f79:       sub    $0x4,%rbp
    0.00 :   6c5f7d:       jae    6c5ee5 <MlasGemmFloatKernelFma3+0x205>
    0.00 :   6c5f83:       add    $0x4,%rbp
    0.00 :   6c5f87:       je     6c5faf <MlasGemmFloatKernelFma3+0x2cf>
    0.00 :   6c5f89:       vmovaps (%rsi),%ymm0
    0.00 :   6c5f8d:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c5f92:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5f97:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c5f9d:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5fa2:       add    $0x40,%rsi
    0.00 :   6c5fa6:       add    $0x4,%rdi
    0.00 :   6c5faa:       dec    %rbp
    0.00 :   6c5fad:       jne    6c5f89 <MlasGemmFloatKernelFma3+0x2a9>
    0.00 :   6c5faf:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c5fb6:       cmp    $0x8,%r9
    0.00 :   6c5fba:       jb     6c600f <MlasGemmFloatKernelFma3+0x32f>
    0.00 :   6c5fbc:       test   %r15b,%r15b
    0.00 :   6c5fbf:       jne    6c5fce <MlasGemmFloatKernelFma3+0x2ee>
    0.00 :   6c5fc1:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c5fc6:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c5fcc:       jmp    6c5fd6 <MlasGemmFloatKernelFma3+0x2f6>
    0.00 :   6c5fce:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c5fd2:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c5fd6:       vmovups %ymm5,(%rdx)
    0.00 :   6c5fda:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c5fdf:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c5fe4:       test   %r15b,%r15b
    0.00 :   6c5fe7:       jne    6c5ff6 <MlasGemmFloatKernelFma3+0x316>
    0.00 :   6c5fe9:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c5fee:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c5ff4:       jmp    6c5ffe <MlasGemmFloatKernelFma3+0x31e>
    0.00 :   6c5ff6:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c5ffa:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c5ffe:       vmovups %ymm4,(%rdx)
    0.00 :   6c6002:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c6007:       add    $0x20,%rdx
    0.00 :   6c600b:       add    $0x8,%r9
    0.00 :   6c600f:       mov    %r9,-0x8(%rsp)
    0.00 :   6c6014:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c601b:       vpcmpgtd 0x1e13fd(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c6023:       test   %r15b,%r15b
    0.00 :   6c6026:       jne    6c603f <MlasGemmFloatKernelFma3+0x35f>
    0.00 :   6c6028:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c602d:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c6033:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c6038:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c603d:       jmp    6c6047 <MlasGemmFloatKernelFma3+0x367>
    0.00 :   6c603f:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6043:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6047:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c604c:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c6052:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.01 :   6c6057:       cmp    $0x8,%r9
    0.00 :   6c605b:       jbe    6c62f9 <MlasGemmFloatKernelFma3+0x619>
    0.00 :   6c6061:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c6065:       add    %rdi,%rbx
    0.00 :   6c6068:       mov    %rcx,%rbp
    0.00 :   6c606b:       sub    $0x4,%rbp
    0.00 :   6c606f:       jb     6c61d5 <MlasGemmFloatKernelFma3+0x4f5>
    0.01 :   6c6075:       prefetcht0 0x100(%rsi)
    0.02 :   6c607c:       vmovaps (%rsi),%ymm0
    0.01 :   6c6080:       vmovaps 0x20(%rsi),%ymm1
    0.04 :   6c6085:       vbroadcastss (%rdi),%ymm3
    0.07 :   6c608a:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.03 :   6c608f:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.01 :   6c6094:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.05 :   6c609a:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.01 :   6c609f:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.04 :   6c60a4:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.03 :   6c60aa:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.05 :   6c60af:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c60b4:       vbroadcastss (%rbx),%ymm3
    0.03 :   6c60b9:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.04 :   6c60be:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.01 :   6c60c3:       prefetcht0 0x140(%rsi)
    0.00 :   6c60ca:       vmovaps 0x40(%rsi),%ymm0
    0.04 :   6c60cf:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c60d4:       vbroadcastss 0x4(%rdi),%ymm3
    0.01 :   6c60da:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.01 :   6c60df:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.03 :   6c60e4:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.03 :   6c60eb:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.01 :   6c60f0:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.01 :   6c60f5:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.05 :   6c60fc:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.01 :   6c6101:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.02 :   6c6106:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c610c:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.01 :   6c6111:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c6116:       sub    $0xffffffffffffff80,%rsi
    0.01 :   6c611a:       prefetcht0 0x100(%rsi)
    0.00 :   6c6121:       vmovaps (%rsi),%ymm0
    0.03 :   6c6125:       vmovaps 0x20(%rsi),%ymm1
    0.01 :   6c612a:       vbroadcastss 0x8(%rdi),%ymm3
    0.02 :   6c6130:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.01 :   6c6135:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.05 :   6c613a:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.01 :   6c6141:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.01 :   6c6146:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.03 :   6c614b:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.02 :   6c6152:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6157:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.01 :   6c615c:       vbroadcastss 0x8(%rbx),%ymm3
    0.01 :   6c6162:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c6167:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.01 :   6c616c:       prefetcht0 0x140(%rsi)
    0.00 :   6c6173:       vmovaps 0x40(%rsi),%ymm0
    0.01 :   6c6178:       vmovaps 0x60(%rsi),%ymm1
    0.01 :   6c617d:       vbroadcastss 0xc(%rdi),%ymm3
    0.01 :   6c6183:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6188:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c618d:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.04 :   6c6194:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.02 :   6c6199:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c619e:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c61a5:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.02 :   6c61aa:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c61af:       vbroadcastss 0xc(%rbx),%ymm3
    0.01 :   6c61b5:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.04 :   6c61ba:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.02 :   6c61bf:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c61c3:       add    $0x10,%rdi
    0.02 :   6c61c7:       add    $0x10,%rbx
    0.04 :   6c61cb:       sub    $0x4,%rbp
    0.00 :   6c61cf:       jae    6c6075 <MlasGemmFloatKernelFma3+0x395>
    0.00 :   6c61d5:       add    $0x4,%rbp
    0.00 :   6c61d9:       je     6c6233 <MlasGemmFloatKernelFma3+0x553>
    0.00 :   6c61db:       vmovaps (%rsi),%ymm0
    0.00 :   6c61df:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c61e4:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c61e9:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c61ee:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c61f3:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c61f9:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c61fe:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6203:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6209:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c620e:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6213:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c6218:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c621d:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c6222:       add    $0x40,%rsi
    0.00 :   6c6226:       add    $0x4,%rdi
    0.00 :   6c622a:       add    $0x4,%rbx
    0.00 :   6c622e:       dec    %rbp
    0.00 :   6c6231:       jne    6c61db <MlasGemmFloatKernelFma3+0x4fb>
    0.00 :   6c6233:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c623a:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c623e:       add    %rdx,%rbx
    0.00 :   6c6241:       prefetcht0 0x40(%rdx)
    0.00 :   6c6245:       prefetcht0 0x40(%rdx,%rax,1)
    0.02 :   6c624a:       prefetcht0 0x40(%rdx,%rax,2)
    0.00 :   6c624f:       prefetcht0 0x40(%rbx)
    0.00 :   6c6253:       sub    $0x10,%r9
    0.00 :   6c6257:       jb     6c64aa <MlasGemmFloatKernelFma3+0x7ca>
    0.00 :   6c625d:       test   %r15b,%r15b
    0.00 :   6c6260:       jne    6c6294 <MlasGemmFloatKernelFma3+0x5b4>
    0.00 :   6c6262:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6267:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c626d:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c6273:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c627a:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c6280:       vfmadd213ps 0x20(%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c6287:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c628c:       vfmadd213ps 0x20(%rbx),%ymm2,%ymm11
    0.00 :   6c6292:       jmp    6c62b4 <MlasGemmFloatKernelFma3+0x5d4>
    0.00 :   6c6294:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6298:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c629c:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c62a0:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c62a4:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c62a8:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c62ac:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c62b0:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c62b4:       vmovups %ymm4,(%rdx)
    0.00 :   6c62b8:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c62bd:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c62c2:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.00 :   6c62c8:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c62cd:       vmovups %ymm9,0x20(%rdx,%rax,2)
    0.00 :   6c62d3:       vmovups %ymm10,(%rbx)
    0.00 :   6c62d7:       vmovups %ymm11,0x20(%rbx)
    0.00 :   6c62dc:       add    $0x40,%rdx
    0.00 :   6c62e0:       mov    %r11,%rdi
    0.00 :   6c62e3:       vzeroall
    0.00 :   6c62e6:       cmp    $0x8,%r9
    0.00 :   6c62ea:       ja     6c6061 <MlasGemmFloatKernelFma3+0x381>
    0.00 :   6c62f0:       test   %r9,%r9
    0.00 :   6c62f3:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c62f9:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c62fd:       add    %rdi,%rbx
    0.00 :   6c6300:       mov    %rcx,%rbp
    0.00 :   6c6303:       sub    $0x4,%rbp
    0.00 :   6c6307:       jb     6c6409 <MlasGemmFloatKernelFma3+0x729>
    0.00 :   6c630d:       prefetcht0 0x100(%rsi)
    0.00 :   6c6314:       vmovaps (%rsi),%ymm0
    0.00 :   6c6318:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c631d:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6322:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6328:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c632d:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6333:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6338:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c633d:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6342:       prefetcht0 0x140(%rsi)
    0.00 :   6c6349:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c634e:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c6354:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6359:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c6360:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6365:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c636c:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6371:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c6377:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c637c:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6380:       prefetcht0 0x100(%rsi)
    0.00 :   6c6387:       vmovaps (%rsi),%ymm0
    0.00 :   6c638b:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c6391:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6396:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c639d:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c63a2:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c63a9:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c63ae:       vbroadcastss 0x8(%rbx),%ymm3
    0.00 :   6c63b4:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c63b9:       prefetcht0 0x140(%rsi)
    0.00 :   6c63c0:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c63c5:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c63cb:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c63d0:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c63d7:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c63dc:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c63e3:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c63e8:       vbroadcastss 0xc(%rbx),%ymm3
    0.00 :   6c63ee:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c63f3:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c63f7:       add    $0x10,%rdi
    0.00 :   6c63fb:       add    $0x10,%rbx
    0.00 :   6c63ff:       sub    $0x4,%rbp
    0.00 :   6c6403:       jae    6c630d <MlasGemmFloatKernelFma3+0x62d>
    0.00 :   6c6409:       add    $0x4,%rbp
    0.00 :   6c640d:       je     6c644e <MlasGemmFloatKernelFma3+0x76e>
    0.00 :   6c640f:       vmovaps (%rsi),%ymm0
    0.00 :   6c6413:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6418:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c641d:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6423:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6428:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c642e:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6433:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c6438:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c643d:       add    $0x40,%rsi
    0.00 :   6c6441:       add    $0x4,%rdi
    0.00 :   6c6445:       add    $0x4,%rbx
    0.00 :   6c6449:       dec    %rbp
    0.00 :   6c644c:       jne    6c640f <MlasGemmFloatKernelFma3+0x72f>
    0.00 :   6c644e:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6455:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c6459:       add    %rdx,%rbx
    0.00 :   6c645c:       cmp    $0x8,%r9
    0.00 :   6c6460:       jb     6c64f5 <MlasGemmFloatKernelFma3+0x815>
    0.00 :   6c6466:       test   %r15b,%r15b
    0.00 :   6c6469:       jne    6c6483 <MlasGemmFloatKernelFma3+0x7a3>
    0.00 :   6c646b:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c6470:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c6476:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c647c:       vfmadd213ps (%rbx),%ymm2,%ymm11
    0.00 :   6c6481:       jmp    6c6493 <MlasGemmFloatKernelFma3+0x7b3>
    0.00 :   6c6483:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6487:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c648b:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c648f:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c6493:       vmovups %ymm5,(%rdx)
    0.00 :   6c6497:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c649c:       vmovups %ymm9,(%rdx,%rax,2)
    0.00 :   6c64a1:       vmovups %ymm11,(%rbx)
    0.00 :   6c64a5:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c64aa:       test   %r15b,%r15b
    0.00 :   6c64ad:       jne    6c64c7 <MlasGemmFloatKernelFma3+0x7e7>
    0.00 :   6c64af:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c64b4:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c64ba:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c64c0:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c64c5:       jmp    6c64d7 <MlasGemmFloatKernelFma3+0x7f7>
    0.00 :   6c64c7:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c64cb:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c64cf:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c64d3:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c64d7:       vmovups %ymm4,(%rdx)
    0.00 :   6c64db:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c64e0:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c64e5:       vmovups %ymm10,(%rbx)
    0.00 :   6c64e9:       add    $0x20,%rdx
    0.00 :   6c64ed:       add    $0x20,%rbx
    0.00 :   6c64f1:       add    $0x8,%r9
    0.00 :   6c64f5:       mov    %r9,-0x8(%rsp)
    0.00 :   6c64fa:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c6501:       vpcmpgtd 0x1e0f17(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c6509:       test   %r15b,%r15b
    0.00 :   6c650c:       jne    6c653a <MlasGemmFloatKernelFma3+0x85a>
    0.00 :   6c650e:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c6513:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c6519:       vmaskmovps (%rdx,%rax,2),%ymm0,%ymm8
    0.00 :   6c651f:       vmaskmovps (%rbx),%ymm0,%ymm10
    0.00 :   6c6524:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c6529:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c652e:       vfmadd213ps %ymm8,%ymm2,%ymm9
    0.00 :   6c6533:       vfmadd213ps %ymm10,%ymm2,%ymm11
    0.00 :   6c6538:       jmp    6c654a <MlasGemmFloatKernelFma3+0x86a>
    0.00 :   6c653a:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c653e:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6542:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c6546:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c654a:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c654f:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c6555:       vmaskmovps %ymm9,%ymm0,(%rdx,%rax,2)
    0.00 :   6c655b:       vmaskmovps %ymm11,%ymm0,(%rbx)
    0.00 :   6c6560:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c6565:       mov    $0x6,%r8d
    0.00 :   6c656b:       cmp    $0x8,%r9
    0.00 :   6c656f:       jbe    6c68fd <MlasGemmFloatKernelFma3+0xc1d>
    0.04 :   6c6575:       lea    (%r10,%r10,2),%rbx
    0.02 :   6c6579:       add    %rdi,%rbx
    0.00 :   6c657c:       mov    %rcx,%rbp
    0.03 :   6c657f:       sub    $0x4,%rbp
    0.00 :   6c6583:       jb     6c676f <MlasGemmFloatKernelFma3+0xa8f>
    0.39 :   6c6589:       prefetcht0 0x100(%rsi)
    1.14 :   6c6590:       vmovaps (%rsi),%ymm0
    3.25 :   6c6594:       vmovaps 0x20(%rsi),%ymm1
    2.30 :   6c6599:       vbroadcastss (%rdi),%ymm3
    2.06 :   6c659e:       vfmadd231ps %ymm0,%ymm3,%ymm4
    1.04 :   6c65a3:       vfmadd231ps %ymm1,%ymm3,%ymm5
    1.38 :   6c65a8:       vbroadcastss (%rdi,%r10,1),%ymm3
    2.03 :   6c65ae:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.61 :   6c65b3:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.57 :   6c65b8:       vbroadcastss (%rdi,%r10,2),%ymm3
    1.40 :   6c65be:       vfmadd231ps %ymm0,%ymm3,%ymm8
    1.21 :   6c65c3:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.59 :   6c65c8:       vbroadcastss (%rbx),%ymm3
    1.21 :   6c65cd:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.82 :   6c65d2:       vfmadd231ps %ymm1,%ymm3,%ymm11
    1.49 :   6c65d7:       vbroadcastss (%rbx,%r10,1),%ymm3
    1.19 :   6c65dd:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.71 :   6c65e2:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.78 :   6c65e7:       vbroadcastss (%rbx,%r10,2),%ymm3
    1.71 :   6c65ed:       vfmadd231ps %ymm0,%ymm3,%ymm14
    0.63 :   6c65f2:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.68 :   6c65f7:       prefetcht0 0x140(%rsi)
    1.03 :   6c65fe:       vmovaps 0x40(%rsi),%ymm0
    3.10 :   6c6603:       vmovaps 0x60(%rsi),%ymm1
    1.01 :   6c6608:       vbroadcastss 0x4(%rdi),%ymm3
    0.53 :   6c660e:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.97 :   6c6613:       vfmadd231ps %ymm1,%ymm3,%ymm5
    1.57 :   6c6618:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.29 :   6c661f:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.61 :   6c6624:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.60 :   6c6629:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    1.33 :   6c6630:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.50 :   6c6635:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.75 :   6c663a:       vbroadcastss 0x4(%rbx),%ymm3
    0.78 :   6c6640:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.88 :   6c6645:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.59 :   6c664a:       vbroadcastss 0x4(%rbx,%r10,1),%ymm3
    0.67 :   6c6651:       vfmadd231ps %ymm0,%ymm3,%ymm12
    1.30 :   6c6656:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.72 :   6c665b:       vbroadcastss 0x4(%rbx,%r10,2),%ymm3
    0.42 :   6c6662:       vfmadd231ps %ymm0,%ymm3,%ymm14
    1.38 :   6c6667:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.61 :   6c666c:       sub    $0xffffffffffffff80,%rsi
    0.61 :   6c6670:       prefetcht0 0x100(%rsi)
    0.67 :   6c6677:       vmovaps (%rsi),%ymm0
    5.94 :   6c667b:       vmovaps 0x20(%rsi),%ymm1
    1.30 :   6c6680:       vbroadcastss 0x8(%rdi),%ymm3
    0.83 :   6c6686:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.62 :   6c668b:       vfmadd231ps %ymm1,%ymm3,%ymm5
    1.95 :   6c6690:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.52 :   6c6697:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.63 :   6c669c:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.74 :   6c66a1:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    1.12 :   6c66a8:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.46 :   6c66ad:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.84 :   6c66b2:       vbroadcastss 0x8(%rbx),%ymm3
    0.60 :   6c66b8:       vfmadd231ps %ymm0,%ymm3,%ymm10
    1.05 :   6c66bd:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.86 :   6c66c2:       vbroadcastss 0x8(%rbx,%r10,1),%ymm3
    0.57 :   6c66c9:       vfmadd231ps %ymm0,%ymm3,%ymm12
    1.17 :   6c66ce:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.90 :   6c66d3:       vbroadcastss 0x8(%rbx,%r10,2),%ymm3
    0.53 :   6c66da:       vfmadd231ps %ymm0,%ymm3,%ymm14
    1.05 :   6c66df:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.36 :   6c66e4:       prefetcht0 0x140(%rsi)
    0.95 :   6c66eb:       vmovaps 0x40(%rsi),%ymm0
    3.85 :   6c66f0:       vmovaps 0x60(%rsi),%ymm1
    2.25 :   6c66f5:       vbroadcastss 0xc(%rdi),%ymm3
    0.34 :   6c66fb:       vfmadd231ps %ymm0,%ymm3,%ymm4
    1.04 :   6c6700:       vfmadd231ps %ymm1,%ymm3,%ymm5
    1.48 :   6c6705:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.87 :   6c670c:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.32 :   6c6711:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.87 :   6c6716:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.71 :   6c671d:       vfmadd231ps %ymm0,%ymm3,%ymm8
    1.01 :   6c6722:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.71 :   6c6727:       vbroadcastss 0xc(%rbx),%ymm3
    0.78 :   6c672d:       vfmadd231ps %ymm0,%ymm3,%ymm10
    1.44 :   6c6732:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.73 :   6c6737:       vbroadcastss 0xc(%rbx,%r10,1),%ymm3
    0.58 :   6c673e:       vfmadd231ps %ymm0,%ymm3,%ymm12
    1.19 :   6c6743:       vfmadd231ps %ymm1,%ymm3,%ymm13
    1.15 :   6c6748:       vbroadcastss 0xc(%rbx,%r10,2),%ymm3
    0.40 :   6c674f:       vfmadd231ps %ymm0,%ymm3,%ymm14
    1.26 :   6c6754:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.48 :   6c6759:       sub    $0xffffffffffffff80,%rsi
    0.87 :   6c675d:       add    $0x10,%rdi
    0.53 :   6c6761:       add    $0x10,%rbx
    1.22 :   6c6765:       sub    $0x4,%rbp
    0.00 :   6c6769:       jae    6c6589 <MlasGemmFloatKernelFma3+0x8a9>
    0.01 :   6c676f:       add    $0x4,%rbp
    0.00 :   6c6773:       je     6c67ed <MlasGemmFloatKernelFma3+0xb0d>
    0.00 :   6c6775:       vmovaps (%rsi),%ymm0
    0.00 :   6c6779:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c677e:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6783:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6788:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c678d:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6793:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6798:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c679d:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c67a3:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c67a8:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c67ad:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c67b2:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c67b7:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c67bc:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c67c2:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c67c7:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c67cc:       vbroadcastss (%rbx,%r10,2),%ymm3
    0.00 :   6c67d2:       vfmadd231ps %ymm0,%ymm3,%ymm14
    0.00 :   6c67d7:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.00 :   6c67dc:       add    $0x40,%rsi
    0.00 :   6c67e0:       add    $0x4,%rdi
    0.00 :   6c67e4:       add    $0x4,%rbx
    0.00 :   6c67e8:       dec    %rbp
    0.00 :   6c67eb:       jne    6c6775 <MlasGemmFloatKernelFma3+0xa95>
    0.02 :   6c67ed:       vbroadcastss -0x10(%rsp),%ymm2
    0.03 :   6c67f4:       lea    (%rax,%rax,2),%rbx
    0.01 :   6c67f8:       add    %rdx,%rbx
    0.00 :   6c67fb:       prefetcht0 0x40(%rdx)
    0.05 :   6c67ff:       prefetcht0 0x40(%rdx,%rax,1)
    0.02 :   6c6804:       prefetcht0 0x40(%rdx,%rax,2)
    0.06 :   6c6809:       prefetcht0 0x40(%rbx)
    0.04 :   6c680d:       prefetcht0 0x40(%rbx,%rax,1)
    0.14 :   6c6812:       prefetcht0 0x40(%rbx,%rax,2)
    0.02 :   6c6817:       sub    $0x10,%r9
    0.00 :   6c681b:       jb     6c6b40 <MlasGemmFloatKernelFma3+0xe60>
    0.01 :   6c6821:       test   %r15b,%r15b
    0.00 :   6c6824:       jne    6c6872 <MlasGemmFloatKernelFma3+0xb92>
    0.00 :   6c6826:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.78 :   6c682b:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.12 :   6c6831:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.35 :   6c6837:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.09 :   6c683e:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.20 :   6c6844:       vfmadd213ps 0x20(%rdx,%rax,2),%ymm2,%ymm9
    0.09 :   6c684b:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.22 :   6c6850:       vfmadd213ps 0x20(%rbx),%ymm2,%ymm11
    0.03 :   6c6856:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm12
    0.16 :   6c685c:       vfmadd213ps 0x20(%rbx,%rax,1),%ymm2,%ymm13
    0.02 :   6c6863:       vfmadd213ps (%rbx,%rax,2),%ymm2,%ymm14
    0.07 :   6c6869:       vfmadd213ps 0x20(%rbx,%rax,2),%ymm2,%ymm15
    0.01 :   6c6870:       jmp    6c68a2 <MlasGemmFloatKernelFma3+0xbc2>
    0.00 :   6c6872:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6876:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c687a:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c687e:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6882:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c6886:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c688a:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c688e:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c6892:       vmulps %ymm2,%ymm12,%ymm12
    0.00 :   6c6896:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c689a:       vmulps %ymm2,%ymm14,%ymm14
    0.00 :   6c689e:       vmulps %ymm2,%ymm15,%ymm15
    0.02 :   6c68a2:       vmovups %ymm4,(%rdx)
    0.00 :   6c68a6:       vmovups %ymm5,0x20(%rdx)
    0.01 :   6c68ab:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c68b0:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.03 :   6c68b6:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c68bb:       vmovups %ymm9,0x20(%rdx,%rax,2)
    0.03 :   6c68c1:       vmovups %ymm10,(%rbx)
    0.00 :   6c68c5:       vmovups %ymm11,0x20(%rbx)
    0.08 :   6c68ca:       vmovups %ymm12,(%rbx,%rax,1)
    0.00 :   6c68cf:       vmovups %ymm13,0x20(%rbx,%rax,1)
    0.01 :   6c68d5:       vmovups %ymm14,(%rbx,%rax,2)
    0.01 :   6c68da:       vmovups %ymm15,0x20(%rbx,%rax,2)
    0.04 :   6c68e0:       add    $0x40,%rdx
    0.00 :   6c68e4:       mov    %r11,%rdi
    0.00 :   6c68e7:       vzeroall
    0.25 :   6c68ea:       cmp    $0x8,%r9
    0.00 :   6c68ee:       ja     6c6575 <MlasGemmFloatKernelFma3+0x895>
    0.00 :   6c68f4:       test   %r9,%r9
    0.00 :   6c68f7:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c68fd:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c6901:       add    %rdi,%rbx
    0.00 :   6c6904:       mov    %rcx,%rbp
    0.00 :   6c6907:       sub    $0x4,%rbp
    0.00 :   6c690b:       jb     6c6a6b <MlasGemmFloatKernelFma3+0xd8b>
    0.00 :   6c6911:       prefetcht0 0x100(%rsi)
    0.00 :   6c6918:       vmovaps (%rsi),%ymm0
    0.00 :   6c691c:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6921:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6926:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c692c:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6931:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6937:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c693c:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c6941:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6946:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c694c:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c6951:       vbroadcastss (%rbx,%r10,2),%ymm3
    0.00 :   6c6957:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c695c:       prefetcht0 0x140(%rsi)
    0.00 :   6c6963:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c6968:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c696e:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6973:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c697a:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c697f:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c6986:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c698b:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c6991:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6996:       vbroadcastss 0x4(%rbx,%r10,1),%ymm3
    0.00 :   6c699d:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c69a2:       vbroadcastss 0x4(%rbx,%r10,2),%ymm3
    0.00 :   6c69a9:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c69ae:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c69b2:       prefetcht0 0x100(%rsi)
    0.00 :   6c69b9:       vmovaps (%rsi),%ymm0
    0.00 :   6c69bd:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c69c3:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c69c8:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c69cf:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c69d4:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c69db:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c69e0:       vbroadcastss 0x8(%rbx),%ymm3
    0.00 :   6c69e6:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c69eb:       vbroadcastss 0x8(%rbx,%r10,1),%ymm3
    0.00 :   6c69f2:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c69f7:       vbroadcastss 0x8(%rbx,%r10,2),%ymm3
    0.00 :   6c69fe:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c6a03:       prefetcht0 0x140(%rsi)
    0.00 :   6c6a0a:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c6a0f:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c6a15:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6a1a:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c6a21:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6a26:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c6a2d:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6a32:       vbroadcastss 0xc(%rbx),%ymm3
    0.00 :   6c6a38:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6a3d:       vbroadcastss 0xc(%rbx,%r10,1),%ymm3
    0.00 :   6c6a44:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c6a49:       vbroadcastss 0xc(%rbx,%r10,2),%ymm3
    0.00 :   6c6a50:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c6a55:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6a59:       add    $0x10,%rdi
    0.00 :   6c6a5d:       add    $0x10,%rbx
    0.00 :   6c6a61:       sub    $0x4,%rbp
    0.00 :   6c6a65:       jae    6c6911 <MlasGemmFloatKernelFma3+0xc31>
    0.00 :   6c6a6b:       add    $0x4,%rbp
    0.00 :   6c6a6f:       je     6c6ac6 <MlasGemmFloatKernelFma3+0xde6>
    0.00 :   6c6a71:       vmovaps (%rsi),%ymm0
    0.00 :   6c6a75:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6a7a:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6a7f:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6a85:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6a8a:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6a90:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6a95:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c6a9a:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6a9f:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c6aa5:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c6aaa:       vbroadcastss (%rbx,%r10,2),%ymm3
    0.00 :   6c6ab0:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c6ab5:       add    $0x40,%rsi
    0.00 :   6c6ab9:       add    $0x4,%rdi
    0.00 :   6c6abd:       add    $0x4,%rbx
    0.00 :   6c6ac1:       dec    %rbp
    0.00 :   6c6ac4:       jne    6c6a71 <MlasGemmFloatKernelFma3+0xd91>
    0.00 :   6c6ac6:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6acd:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c6ad1:       add    %rdx,%rbx
    0.00 :   6c6ad4:       cmp    $0x8,%r9
    0.00 :   6c6ad8:       jb     6c6ba9 <MlasGemmFloatKernelFma3+0xec9>
    0.00 :   6c6ade:       test   %r15b,%r15b
    0.00 :   6c6ae1:       jne    6c6b07 <MlasGemmFloatKernelFma3+0xe27>
    0.00 :   6c6ae3:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c6ae8:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c6aee:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c6af4:       vfmadd213ps (%rbx),%ymm2,%ymm11
    0.00 :   6c6af9:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm13
    0.00 :   6c6aff:       vfmadd213ps (%rbx,%rax,2),%ymm2,%ymm15
    0.00 :   6c6b05:       jmp    6c6b1f <MlasGemmFloatKernelFma3+0xe3f>
    0.00 :   6c6b07:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6b0b:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6b0f:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c6b13:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c6b17:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c6b1b:       vmulps %ymm2,%ymm15,%ymm15
    0.00 :   6c6b1f:       vmovups %ymm5,(%rdx)
    0.00 :   6c6b23:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c6b28:       vmovups %ymm9,(%rdx,%rax,2)
    0.00 :   6c6b2d:       vmovups %ymm11,(%rbx)
    0.00 :   6c6b31:       vmovups %ymm13,(%rbx,%rax,1)
    0.00 :   6c6b36:       vmovups %ymm15,(%rbx,%rax,2)
    0.00 :   6c6b3b:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c6b40:       test   %r15b,%r15b
    0.00 :   6c6b43:       jne    6c6b69 <MlasGemmFloatKernelFma3+0xe89>
    0.00 :   6c6b45:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6b4a:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c6b50:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c6b56:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c6b5b:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm12
    0.00 :   6c6b61:       vfmadd213ps (%rbx,%rax,2),%ymm2,%ymm14
    0.00 :   6c6b67:       jmp    6c6b81 <MlasGemmFloatKernelFma3+0xea1>
    0.00 :   6c6b69:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6b6d:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c6b71:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c6b75:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c6b79:       vmulps %ymm2,%ymm12,%ymm12
    0.00 :   6c6b7d:       vmulps %ymm2,%ymm14,%ymm14
    0.00 :   6c6b81:       vmovups %ymm4,(%rdx)
    0.00 :   6c6b85:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c6b8a:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c6b8f:       vmovups %ymm10,(%rbx)
    0.00 :   6c6b93:       vmovups %ymm12,(%rbx,%rax,1)
    0.00 :   6c6b98:       vmovups %ymm14,(%rbx,%rax,2)
    0.00 :   6c6b9d:       add    $0x20,%rdx
    0.00 :   6c6ba1:       add    $0x20,%rbx
    0.00 :   6c6ba5:       add    $0x8,%r9
    0.00 :   6c6ba9:       mov    %r9,-0x8(%rsp)
    0.00 :   6c6bae:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c6bb5:       vpcmpgtd 0x1e0863(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c6bbd:       test   %r15b,%r15b
    0.00 :   6c6bc0:       jne    6c6c04 <MlasGemmFloatKernelFma3+0xf24>
    0.00 :   6c6bc2:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c6bc7:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c6bcd:       vmaskmovps (%rdx,%rax,2),%ymm0,%ymm8
    0.00 :   6c6bd3:       vmaskmovps (%rbx),%ymm0,%ymm10
    0.00 :   6c6bd8:       vmaskmovps (%rbx,%rax,1),%ymm0,%ymm12
    0.00 :   6c6bde:       vmaskmovps (%rbx,%rax,2),%ymm0,%ymm14
    0.00 :   6c6be4:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c6be9:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c6bee:       vfmadd213ps %ymm8,%ymm2,%ymm9
    0.00 :   6c6bf3:       vfmadd213ps %ymm10,%ymm2,%ymm11
    0.00 :   6c6bf8:       vfmadd213ps %ymm12,%ymm2,%ymm13
    0.00 :   6c6bfd:       vfmadd213ps %ymm14,%ymm2,%ymm15
    0.00 :   6c6c02:       jmp    6c6c1c <MlasGemmFloatKernelFma3+0xf3c>
    0.00 :   6c6c04:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6c08:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6c0c:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c6c10:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c6c14:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c6c18:       vmulps %ymm2,%ymm15,%ymm15
    0.00 :   6c6c1c:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c6c21:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c6c27:       vmaskmovps %ymm9,%ymm0,(%rdx,%rax,2)
    0.00 :   6c6c2d:       vmaskmovps %ymm11,%ymm0,(%rbx)
    0.00 :   6c6c32:       vmaskmovps %ymm13,%ymm0,(%rbx,%rax,1)
    0.00 :   6c6c38:       vmaskmovps %ymm15,%ymm0,(%rbx,%rax,2)
    0.00 :   6c6c3e:       vzeroupper
    0.00 :   6c6c41:       mov    %r8d,%eax
    0.00 :   6c6c44:       pop    %r15
    0.01 :   6c6c46:       pop    %rbx
    0.01 :   6c6c47:       pop    %rbp
    0.00 :   6c6c48:       retq
    0.00 :   6c6c49:       cmp    $0x8,%r9
    0.00 :   6c6c4d:       jbe    6c6d47 <MlasGemmFloatKernelFma3+0x1067>
    0.00 :   6c6c53:       mov    %rcx,%rbp
    0.00 :   6c6c56:       sub    $0x4,%rbp
    0.00 :   6c6c5a:       jb     6c6ccf <MlasGemmFloatKernelFma3+0xfef>
    0.00 :   6c6c5c:       prefetcht0 0x100(%rsi)
    0.00 :   6c6c63:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6c68:       vfmadd231ps (%rsi),%ymm3,%ymm4
    0.00 :   6c6c6d:       vfmadd231ps 0x20(%rsi),%ymm3,%ymm5
    0.00 :   6c6c73:       prefetcht0 0x140(%rsi)
    0.00 :   6c6c7a:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c6c80:       vfmadd231ps 0x40(%rsi),%ymm3,%ymm4
    0.00 :   6c6c86:       vfmadd231ps 0x60(%rsi),%ymm3,%ymm5
    0.00 :   6c6c8c:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6c90:       prefetcht0 0x100(%rsi)
    0.00 :   6c6c97:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c6c9d:       vfmadd231ps (%rsi),%ymm3,%ymm4
    0.00 :   6c6ca2:       vfmadd231ps 0x20(%rsi),%ymm3,%ymm5
    0.00 :   6c6ca8:       prefetcht0 0x140(%rsi)
    0.00 :   6c6caf:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c6cb5:       vfmadd231ps 0x40(%rsi),%ymm3,%ymm4
    0.00 :   6c6cbb:       vfmadd231ps 0x60(%rsi),%ymm3,%ymm5
    0.00 :   6c6cc1:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6cc5:       add    $0x10,%rdi
    0.00 :   6c6cc9:       sub    $0x4,%rbp
    0.00 :   6c6ccd:       jae    6c6c5c <MlasGemmFloatKernelFma3+0xf7c>
    0.00 :   6c6ccf:       add    $0x4,%rbp
    0.00 :   6c6cd3:       je     6c6cf2 <MlasGemmFloatKernelFma3+0x1012>
    0.00 :   6c6cd5:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6cda:       vfmadd231ps (%rsi),%ymm3,%ymm4
    0.00 :   6c6cdf:       vfmadd231ps 0x20(%rsi),%ymm3,%ymm5
    0.00 :   6c6ce5:       add    $0x40,%rsi
    0.00 :   6c6ce9:       add    $0x4,%rdi
    0.00 :   6c6ced:       dec    %rbp
    0.00 :   6c6cf0:       jne    6c6cd5 <MlasGemmFloatKernelFma3+0xff5>
    0.00 :   6c6cf2:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6cf9:       prefetcht0 0x40(%rdx)
    0.00 :   6c6cfd:       sub    $0x10,%r9
    0.00 :   6c6d01:       jb     6c6dee <MlasGemmFloatKernelFma3+0x110e>
    0.00 :   6c6d07:       test   %r15b,%r15b
    0.00 :   6c6d0a:       jne    6c6d19 <MlasGemmFloatKernelFma3+0x1039>
    0.00 :   6c6d0c:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6d11:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c6d17:       jmp    6c6d21 <MlasGemmFloatKernelFma3+0x1041>
    0.00 :   6c6d19:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6d1d:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6d21:       vmovups %ymm4,(%rdx)
    0.00 :   6c6d25:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c6d2a:       add    $0x40,%rdx
    0.00 :   6c6d2e:       mov    %r11,%rdi
    0.00 :   6c6d31:       vzeroall
    0.00 :   6c6d34:       cmp    $0x8,%r9
    0.00 :   6c6d38:       ja     6c6c53 <MlasGemmFloatKernelFma3+0xf73>
    0.00 :   6c6d3e:       test   %r9,%r9
    0.00 :   6c6d41:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c6d47:       mov    %rcx,%rbp
    0.00 :   6c6d4a:       sub    $0x4,%rbp
    0.00 :   6c6d4e:       jb     6c6dab <MlasGemmFloatKernelFma3+0x10cb>
    0.00 :   6c6d50:       prefetcht0 0x100(%rsi)
    0.00 :   6c6d57:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6d5c:       vfmadd231ps (%rsi),%ymm3,%ymm5
    0.00 :   6c6d61:       prefetcht0 0x140(%rsi)
    0.00 :   6c6d68:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c6d6e:       vfmadd231ps 0x40(%rsi),%ymm3,%ymm5
    0.00 :   6c6d74:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6d78:       prefetcht0 0x100(%rsi)
    0.00 :   6c6d7f:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c6d85:       vfmadd231ps (%rsi),%ymm3,%ymm5
    0.00 :   6c6d8a:       prefetcht0 0x140(%rsi)
    0.00 :   6c6d91:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c6d97:       vfmadd231ps 0x40(%rsi),%ymm3,%ymm5
    0.00 :   6c6d9d:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6da1:       add    $0x10,%rdi
    0.00 :   6c6da5:       sub    $0x4,%rbp
    0.00 :   6c6da9:       jae    6c6d50 <MlasGemmFloatKernelFma3+0x1070>
    0.00 :   6c6dab:       add    $0x4,%rbp
    0.00 :   6c6daf:       je     6c6dc8 <MlasGemmFloatKernelFma3+0x10e8>
    0.00 :   6c6db1:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6db6:       vfmadd231ps (%rsi),%ymm3,%ymm5
    0.00 :   6c6dbb:       add    $0x40,%rsi
    0.00 :   6c6dbf:       add    $0x4,%rdi
    0.00 :   6c6dc3:       dec    %rbp
    0.00 :   6c6dc6:       jne    6c6db1 <MlasGemmFloatKernelFma3+0x10d1>
    0.00 :   6c6dc8:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6dcf:       cmp    $0x8,%r9
    0.00 :   6c6dd3:       jb     6c6e0a <MlasGemmFloatKernelFma3+0x112a>
    0.00 :   6c6dd5:       test   %r15b,%r15b
    0.00 :   6c6dd8:       jne    6c6de1 <MlasGemmFloatKernelFma3+0x1101>
    0.00 :   6c6dda:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c6ddf:       jmp    6c6de5 <MlasGemmFloatKernelFma3+0x1105>
    0.00 :   6c6de1:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6de5:       vmovups %ymm5,(%rdx)
    0.00 :   6c6de9:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c6dee:       test   %r15b,%r15b
    0.00 :   6c6df1:       jne    6c6dfa <MlasGemmFloatKernelFma3+0x111a>
    0.00 :   6c6df3:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6df8:       jmp    6c6dfe <MlasGemmFloatKernelFma3+0x111e>
    0.00 :   6c6dfa:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6dfe:       vmovups %ymm4,(%rdx)
    0.00 :   6c6e02:       add    $0x20,%rdx
    0.00 :   6c6e06:       add    $0x8,%r9
    0.00 :   6c6e0a:       mov    %r9,-0x8(%rsp)
    0.00 :   6c6e0f:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c6e16:       vpcmpgtd 0x1e0602(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c6e1e:       test   %r15b,%r15b
    0.00 :   6c6e21:       jne    6c6e2f <MlasGemmFloatKernelFma3+0x114f>
    0.00 :   6c6e23:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c6e28:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c6e2d:       jmp    6c6e33 <MlasGemmFloatKernelFma3+0x1153>
    0.00 :   6c6e2f:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6e33:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c6e38:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c6e3d:       cmp    $0x8,%r9
    0.00 :   6c6e41:       jbe    6c705b <MlasGemmFloatKernelFma3+0x137b>
    0.00 :   6c6e47:       mov    %rcx,%rbp
    0.00 :   6c6e4a:       sub    $0x4,%rbp
    0.00 :   6c6e4e:       jb     6c6f71 <MlasGemmFloatKernelFma3+0x1291>
    0.00 :   6c6e54:       prefetcht0 0x100(%rsi)
    0.00 :   6c6e5b:       vmovaps (%rsi),%ymm0
    0.00 :   6c6e5f:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c6e64:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6e69:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6e6e:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6e73:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6e79:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6e7e:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6e83:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6e89:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6e8e:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6e93:       prefetcht0 0x140(%rsi)
    0.00 :   6c6e9a:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c6e9f:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c6ea4:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c6eaa:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6eaf:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6eb4:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c6ebb:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6ec0:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6ec5:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c6ecc:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6ed1:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6ed6:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6eda:       prefetcht0 0x100(%rsi)
    0.00 :   6c6ee1:       vmovaps (%rsi),%ymm0
    0.00 :   6c6ee5:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c6eea:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c6ef0:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6ef5:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6efa:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c6f01:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6f06:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6f0b:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c6f12:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6f17:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6f1c:       prefetcht0 0x140(%rsi)
    0.00 :   6c6f23:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c6f28:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c6f2d:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c6f33:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6f38:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6f3d:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c6f44:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6f49:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6f4e:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c6f55:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6f5a:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6f5f:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6f63:       add    $0x10,%rdi
    0.00 :   6c6f67:       sub    $0x4,%rbp
    0.00 :   6c6f6b:       jae    6c6e54 <MlasGemmFloatKernelFma3+0x1174>
    0.00 :   6c6f71:       add    $0x4,%rbp
    0.00 :   6c6f75:       je     6c6fbc <MlasGemmFloatKernelFma3+0x12dc>
    0.00 :   6c6f77:       vmovaps (%rsi),%ymm0
    0.00 :   6c6f7b:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c6f80:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6f85:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6f8a:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6f8f:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6f95:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6f9a:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6f9f:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6fa5:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6faa:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6faf:       add    $0x40,%rsi
    0.00 :   6c6fb3:       add    $0x4,%rdi
    0.00 :   6c6fb7:       dec    %rbp
    0.00 :   6c6fba:       jne    6c6f77 <MlasGemmFloatKernelFma3+0x1297>
    0.00 :   6c6fbc:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6fc3:       prefetcht0 0x40(%rdx)
    0.00 :   6c6fc7:       prefetcht0 0x40(%rdx,%rax,1)
    0.00 :   6c6fcc:       prefetcht0 0x40(%rdx,%rax,2)
    0.00 :   6c6fd1:       sub    $0x10,%r9
    0.00 :   6c6fd5:       jb     6c71b0 <MlasGemmFloatKernelFma3+0x14d0>
    0.00 :   6c6fdb:       test   %r15b,%r15b
    0.00 :   6c6fde:       jne    6c7007 <MlasGemmFloatKernelFma3+0x1327>
    0.00 :   6c6fe0:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6fe5:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c6feb:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c6ff1:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c6ff8:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c6ffe:       vfmadd213ps 0x20(%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c7005:       jmp    6c701f <MlasGemmFloatKernelFma3+0x133f>
    0.00 :   6c7007:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c700b:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c700f:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c7013:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c7017:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c701b:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c701f:       vmovups %ymm4,(%rdx)
    0.00 :   6c7023:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c7028:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c702d:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.00 :   6c7033:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c7038:       vmovups %ymm9,0x20(%rdx,%rax,2)
    0.00 :   6c703e:       add    $0x40,%rdx
    0.00 :   6c7042:       mov    %r11,%rdi
    0.00 :   6c7045:       vzeroall
    0.00 :   6c7048:       cmp    $0x8,%r9
    0.00 :   6c704c:       ja     6c6e47 <MlasGemmFloatKernelFma3+0x1167>
    0.00 :   6c7052:       test   %r9,%r9
    0.00 :   6c7055:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c705b:       mov    %rcx,%rbp
    0.00 :   6c705e:       sub    $0x4,%rbp
    0.00 :   6c7062:       jb     6c7135 <MlasGemmFloatKernelFma3+0x1455>
    0.00 :   6c7068:       prefetcht0 0x100(%rsi)
    0.00 :   6c706f:       vmovaps (%rsi),%ymm0
    0.00 :   6c7073:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c7078:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c707d:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c7083:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7088:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c708e:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c7093:       prefetcht0 0x140(%rsi)
    0.00 :   6c709a:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c709f:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c70a5:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c70aa:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c70b1:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c70b6:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c70bd:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c70c2:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c70c6:       prefetcht0 0x100(%rsi)
    0.00 :   6c70cd:       vmovaps (%rsi),%ymm0
    0.00 :   6c70d1:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c70d7:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c70dc:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c70e3:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c70e8:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c70ef:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c70f4:       prefetcht0 0x140(%rsi)
    0.00 :   6c70fb:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c7100:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c7106:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c710b:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c7112:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7117:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c711e:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c7123:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c7127:       add    $0x10,%rdi
    0.00 :   6c712b:       sub    $0x4,%rbp
    0.00 :   6c712f:       jae    6c7068 <MlasGemmFloatKernelFma3+0x1388>
    0.00 :   6c7135:       add    $0x4,%rbp
    0.00 :   6c7139:       je     6c716c <MlasGemmFloatKernelFma3+0x148c>
    0.00 :   6c713b:       vmovaps (%rsi),%ymm0
    0.00 :   6c713f:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c7144:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c7149:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c714f:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7154:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c715a:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c715f:       add    $0x40,%rsi
    0.00 :   6c7163:       add    $0x4,%rdi
    0.00 :   6c7167:       dec    %rbp
    0.00 :   6c716a:       jne    6c713b <MlasGemmFloatKernelFma3+0x145b>
    0.00 :   6c716c:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c7173:       cmp    $0x8,%r9
    0.00 :   6c7177:       jb     6c71ea <MlasGemmFloatKernelFma3+0x150a>
    0.00 :   6c7179:       test   %r15b,%r15b
    0.00 :   6c717c:       jne    6c7191 <MlasGemmFloatKernelFma3+0x14b1>
    0.00 :   6c717e:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c7183:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c7189:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c718f:       jmp    6c719d <MlasGemmFloatKernelFma3+0x14bd>
    0.00 :   6c7191:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c7195:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c7199:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c719d:       vmovups %ymm5,(%rdx)
    0.00 :   6c71a1:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c71a6:       vmovups %ymm9,(%rdx,%rax,2)
    0.00 :   6c71ab:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c71b0:       test   %r15b,%r15b
    0.00 :   6c71b3:       jne    6c71c8 <MlasGemmFloatKernelFma3+0x14e8>
    0.00 :   6c71b5:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c71ba:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c71c0:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c71c6:       jmp    6c71d4 <MlasGemmFloatKernelFma3+0x14f4>
    0.00 :   6c71c8:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c71cc:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c71d0:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c71d4:       vmovups %ymm4,(%rdx)
    0.00 :   6c71d8:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c71dd:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c71e2:       add    $0x20,%rdx
    0.00 :   6c71e6:       add    $0x8,%r9
    0.00 :   6c71ea:       mov    %r9,-0x8(%rsp)
    0.00 :   6c71ef:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c71f6:       vpcmpgtd 0x1e0222(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c71fe:       test   %r15b,%r15b
    0.00 :   6c7201:       jne    6c7225 <MlasGemmFloatKernelFma3+0x1545>
    0.00 :   6c7203:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c7208:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c720e:       vmaskmovps (%rdx,%rax,2),%ymm0,%ymm8
    0.00 :   6c7214:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c7219:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c721e:       vfmadd213ps %ymm8,%ymm2,%ymm9
    0.00 :   6c7223:       jmp    6c7231 <MlasGemmFloatKernelFma3+0x1551>
    0.00 :   6c7225:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c7229:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c722d:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c7231:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c7236:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c723c:       vmaskmovps %ymm9,%ymm0,(%rdx,%rax,2)
    0.00 :   6c7242:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c7247:       cmp    $0x8,%r9
    0.00 :   6c724b:       jbe    6c7561 <MlasGemmFloatKernelFma3+0x1881>
    0.00 :   6c7251:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c7255:       add    %rdi,%rbx
    0.00 :   6c7258:       mov    %rcx,%rbp
    0.00 :   6c725b:       sub    $0x4,%rbp
    0.00 :   6c725f:       jb     6c7408 <MlasGemmFloatKernelFma3+0x1728>
    0.00 :   6c7265:       prefetcht0 0x100(%rsi)
    0.00 :   6c726c:       vmovaps (%rsi),%ymm0
    0.00 :   6c7270:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c7275:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c727a:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c727f:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c7284:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c728a:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c728f:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c7294:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c729a:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c729f:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c72a4:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c72a9:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c72ae:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c72b3:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c72b9:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c72be:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c72c3:       prefetcht0 0x140(%rsi)
    0.00 :   6c72ca:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c72cf:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c72d4:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c72da:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c72df:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c72e4:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c72eb:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c72f0:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c72f5:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c72fc:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c7301:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c7306:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c730c:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c7311:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c7316:       vbroadcastss 0x4(%rbx,%r10,1),%ymm3
    0.00 :   6c731d:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c7322:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c7327:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c732b:       prefetcht0 0x100(%rsi)
    0.00 :   6c7332:       vmovaps (%rsi),%ymm0
    0.00 :   6c7336:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c733b:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c7341:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c7346:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c734b:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c7352:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c7357:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c735c:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c7363:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c7368:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c736d:       vbroadcastss 0x8(%rbx),%ymm3
    0.00 :   6c7373:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c7378:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c737d:       vbroadcastss 0x8(%rbx,%r10,1),%ymm3
    0.00 :   6c7384:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c7389:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c738e:       prefetcht0 0x140(%rsi)
    0.00 :   6c7395:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c739a:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c739f:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c73a5:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c73aa:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c73af:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c73b6:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c73bb:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c73c0:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c73c7:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c73cc:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c73d1:       vbroadcastss 0xc(%rbx),%ymm3
    0.00 :   6c73d7:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c73dc:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c73e1:       vbroadcastss 0xc(%rbx,%r10,1),%ymm3
    0.00 :   6c73e8:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c73ed:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c73f2:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c73f6:       add    $0x10,%rdi
    0.00 :   6c73fa:       add    $0x10,%rbx
    0.00 :   6c73fe:       sub    $0x4,%rbp
    0.00 :   6c7402:       jae    6c7265 <MlasGemmFloatKernelFma3+0x1585>
    0.00 :   6c7408:       add    $0x4,%rbp
    0.00 :   6c740c:       je     6c7476 <MlasGemmFloatKernelFma3+0x1796>
    0.00 :   6c740e:       vmovaps (%rsi),%ymm0
    0.00 :   6c7412:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c7417:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c741c:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c7421:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c7426:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c742c:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c7431:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c7436:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c743c:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c7441:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c7446:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c744b:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c7450:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c7455:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c745b:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c7460:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c7465:       add    $0x40,%rsi
    0.00 :   6c7469:       add    $0x4,%rdi
    0.00 :   6c746d:       add    $0x4,%rbx
    0.00 :   6c7471:       dec    %rbp
    0.00 :   6c7474:       jne    6c740e <MlasGemmFloatKernelFma3+0x172e>
    0.00 :   6c7476:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c747d:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c7481:       add    %rdx,%rbx
    0.00 :   6c7484:       prefetcht0 0x40(%rdx)
    0.00 :   6c7488:       prefetcht0 0x40(%rdx,%rax,1)
    0.00 :   6c748d:       prefetcht0 0x40(%rdx,%rax,2)
    0.00 :   6c7492:       prefetcht0 0x40(%rbx)
    0.00 :   6c7496:       prefetcht0 0x40(%rbx,%rax,1)
    0.00 :   6c749b:       sub    $0x10,%r9
    0.00 :   6c749f:       jb     6c775b <MlasGemmFloatKernelFma3+0x1a7b>
    0.00 :   6c74a5:       test   %r15b,%r15b
    0.00 :   6c74a8:       jne    6c74e9 <MlasGemmFloatKernelFma3+0x1809>
    0.00 :   6c74aa:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c74af:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c74b5:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c74bb:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c74c2:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c74c8:       vfmadd213ps 0x20(%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c74cf:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c74d4:       vfmadd213ps 0x20(%rbx),%ymm2,%ymm11
    0.00 :   6c74da:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm12
    0.00 :   6c74e0:       vfmadd213ps 0x20(%rbx,%rax,1),%ymm2,%ymm13
    0.00 :   6c74e7:       jmp    6c7511 <MlasGemmFloatKernelFma3+0x1831>
    0.00 :   6c74e9:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c74ed:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c74f1:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c74f5:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c74f9:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c74fd:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c7501:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c7505:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c7509:       vmulps %ymm2,%ymm12,%ymm12
    0.00 :   6c750d:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c7511:       vmovups %ymm4,(%rdx)
    0.00 :   6c7515:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c751a:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c751f:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.00 :   6c7525:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c752a:       vmovups %ymm9,0x20(%rdx,%rax,2)
    0.00 :   6c7530:       vmovups %ymm10,(%rbx)
    0.00 :   6c7534:       vmovups %ymm11,0x20(%rbx)
    0.00 :   6c7539:       vmovups %ymm12,(%rbx,%rax,1)
    0.00 :   6c753e:       vmovups %ymm13,0x20(%rbx,%rax,1)
    0.00 :   6c7544:       add    $0x40,%rdx
    0.00 :   6c7548:       mov    %r11,%rdi
    0.00 :   6c754b:       vzeroall
    0.00 :   6c754e:       cmp    $0x8,%r9
    0.00 :   6c7552:       ja     6c7251 <MlasGemmFloatKernelFma3+0x1571>
    0.00 :   6c7558:       test   %r9,%r9
    0.00 :   6c755b:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c7561:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c7565:       add    %rdi,%rbx
    0.00 :   6c7568:       mov    %rcx,%rbp
    0.00 :   6c756b:       sub    $0x4,%rbp
    0.00 :   6c756f:       jb     6c76a0 <MlasGemmFloatKernelFma3+0x19c0>
    0.00 :   6c7575:       prefetcht0 0x100(%rsi)
    0.00 :   6c757c:       vmovaps (%rsi),%ymm0
    0.00 :   6c7580:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c7585:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c758a:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c7590:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7595:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c759b:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c75a0:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c75a5:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c75aa:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c75b0:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c75b5:       prefetcht0 0x140(%rsi)
    0.00 :   6c75bc:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c75c1:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c75c7:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c75cc:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c75d3:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c75d8:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c75df:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c75e4:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c75ea:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c75ef:       vbroadcastss 0x4(%rbx,%r10,1),%ymm3
    0.00 :   6c75f6:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c75fb:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c75ff:       prefetcht0 0x100(%rsi)
    0.00 :   6c7606:       vmovaps (%rsi),%ymm0
    0.00 :   6c760a:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c7610:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c7615:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c761c:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7621:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c7628:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c762d:       vbroadcastss 0x8(%rbx),%ymm3
    0.00 :   6c7633:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c7638:       vbroadcastss 0x8(%rbx,%r10,1),%ymm3
    0.00 :   6c763f:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c7644:       prefetcht0 0x140(%rsi)
    0.00 :   6c764b:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c7650:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c7656:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c765b:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c7662:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7667:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c766e:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c7673:       vbroadcastss 0xc(%rbx),%ymm3
    0.00 :   6c7679:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c767e:       vbroadcastss 0xc(%rbx,%r10,1),%ymm3
    0.00 :   6c7685:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c768a:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c768e:       add    $0x10,%rdi
    0.00 :   6c7692:       add    $0x10,%rbx
    0.00 :   6c7696:       sub    $0x4,%rbp
    0.00 :   6c769a:       jae    6c7575 <MlasGemmFloatKernelFma3+0x1895>
    0.00 :   6c76a0:       add    $0x4,%rbp
    0.00 :   6c76a4:       je     6c76f0 <MlasGemmFloatKernelFma3+0x1a10>
    0.00 :   6c76a6:       vmovaps (%rsi),%ymm0
    0.00 :   6c76aa:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c76af:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c76b4:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c76ba:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c76bf:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c76c5:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c76ca:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c76cf:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c76d4:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c76da:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c76df:       add    $0x40,%rsi
    0.00 :   6c76e3:       add    $0x4,%rdi
    0.00 :   6c76e7:       add    $0x4,%rbx
    0.00 :   6c76eb:       dec    %rbp
    0.00 :   6c76ee:       jne    6c76a6 <MlasGemmFloatKernelFma3+0x19c6>
    0.00 :   6c76f0:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c76f7:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c76fb:       add    %rdx,%rbx
    0.00 :   6c76fe:       cmp    $0x8,%r9
    0.00 :   6c7702:       jb     6c77b5 <MlasGemmFloatKernelFma3+0x1ad5>
    0.00 :   6c7708:       test   %r15b,%r15b
    0.00 :   6c770b:       jne    6c772b <MlasGemmFloatKernelFma3+0x1a4b>
    0.00 :   6c770d:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c7712:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c7718:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c771e:       vfmadd213ps (%rbx),%ymm2,%ymm11
    0.00 :   6c7723:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm13
    0.00 :   6c7729:       jmp    6c773f <MlasGemmFloatKernelFma3+0x1a5f>
    0.00 :   6c772b:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c772f:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c7733:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c7737:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c773b:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c773f:       vmovups %ymm5,(%rdx)
    0.00 :   6c7743:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c7748:       vmovups %ymm9,(%rdx,%rax,2)
    0.00 :   6c774d:       vmovups %ymm11,(%rbx)
    0.00 :   6c7751:       vmovups %ymm13,(%rbx,%rax,1)
    0.00 :   6c7756:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c775b:       test   %r15b,%r15b
    0.00 :   6c775e:       jne    6c777e <MlasGemmFloatKernelFma3+0x1a9e>
    0.00 :   6c7760:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c7765:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c776b:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c7771:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c7776:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm12
    0.00 :   6c777c:       jmp    6c7792 <MlasGemmFloatKernelFma3+0x1ab2>
    0.00 :   6c777e:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c7782:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c7786:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c778a:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c778e:       vmulps %ymm2,%ymm12,%ymm12
    0.00 :   6c7792:       vmovups %ymm4,(%rdx)
    0.00 :   6c7796:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c779b:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c77a0:       vmovups %ymm10,(%rbx)
    0.00 :   6c77a4:       vmovups %ymm12,(%rbx,%rax,1)
    0.00 :   6c77a9:       add    $0x20,%rdx
    0.00 :   6c77ad:       add    $0x20,%rbx
    0.00 :   6c77b1:       add    $0x8,%r9
    0.00 :   6c77b5:       mov    %r9,-0x8(%rsp)
    0.00 :   6c77ba:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c77c1:       vpcmpgtd 0x1dfc57(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c77c9:       test   %r15b,%r15b
    0.00 :   6c77cc:       jne    6c7805 <MlasGemmFloatKernelFma3+0x1b25>
    0.00 :   6c77ce:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c77d3:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c77d9:       vmaskmovps (%rdx,%rax,2),%ymm0,%ymm8
    0.00 :   6c77df:       vmaskmovps (%rbx),%ymm0,%ymm10
    0.00 :   6c77e4:       vmaskmovps (%rbx,%rax,1),%ymm0,%ymm12
    0.00 :   6c77ea:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c77ef:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c77f4:       vfmadd213ps %ymm8,%ymm2,%ymm9
    0.00 :   6c77f9:       vfmadd213ps %ymm10,%ymm2,%ymm11
    0.00 :   6c77fe:       vfmadd213ps %ymm12,%ymm2,%ymm13
    0.00 :   6c7803:       jmp    6c7819 <MlasGemmFloatKernelFma3+0x1b39>
    0.00 :   6c7805:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c7809:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c780d:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c7811:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c7815:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c7819:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c781e:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c7824:       vmaskmovps %ymm9,%ymm0,(%rdx,%rax,2)
    0.00 :   6c782a:       vmaskmovps %ymm11,%ymm0,(%rbx)
    0.00 :   6c782f:       vmaskmovps %ymm13,%ymm0,(%rbx,%rax,1)
    0.00 :   6c7835:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (838 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000018ea10 <__nss_group_lookup@GLIBC_2.2.5+0x24d90>:
    0.74 :   18ea10:       mov    %rdi,%rax
    0.04 :   18ea13:       cmp    $0x20,%rdx
    0.00 :   18ea17:       jb     18ea62 <__nss_group_lookup@GLIBC_2.2.5+0x24de2>
    0.00 :   18ea19:       cmp    $0x40,%rdx
    0.00 :   18ea1d:       ja     18eac2 <__nss_group_lookup@GLIBC_2.2.5+0x24e42>
    0.00 :   18ea23:       vmovdqu (%rsi),%ymm0
    0.14 :   18ea27:       vmovdqu -0x20(%rsi,%rdx,1),%ymm1
    0.00 :   18ea2d:       vmovdqu %ymm0,(%rdi)
    0.00 :   18ea31:       vmovdqu %ymm1,-0x20(%rdi,%rdx,1)
    0.00 :   18ea37:       vzeroupper
    0.00 :   18ea3a:       retq
    0.00 :   18ea3b:       cmp    0x261d16(%rip),%rdx        # 3f0758 <mallwatch@@GLIBC_2.2.5+0x8>
    0.00 :   18ea42:       jae    18eb6d <__nss_group_lookup@GLIBC_2.2.5+0x24eed>
    0.00 :   18ea48:       cmp    %rsi,%rdi
    0.00 :   18ea4b:       jb     18ea5c <__nss_group_lookup@GLIBC_2.2.5+0x24ddc>
    0.00 :   18ea4d:       je     18ea61 <__nss_group_lookup@GLIBC_2.2.5+0x24de1>
    0.00 :   18ea4f:       lea    (%rsi,%rdx,1),%r9
    0.00 :   18ea53:       cmp    %r9,%rdi
    0.00 :   18ea56:       jb     18ec21 <__nss_group_lookup@GLIBC_2.2.5+0x24fa1>
    0.00 :   18ea5c:       mov    %rdx,%rcx
   35.84 :   18ea5f:       rep movsb %ds:(%rsi),%es:(%rdi)
    0.00 :   18ea61:       retq
    0.00 :   18ea62:       cmp    $0x10,%dl
    0.00 :   18ea65:       jae    18ea7e <__nss_group_lookup@GLIBC_2.2.5+0x24dfe>
    0.00 :   18ea67:       cmp    $0x8,%dl
    0.00 :   18ea6a:       jae    18ea93 <__nss_group_lookup@GLIBC_2.2.5+0x24e13>
    0.00 :   18ea6c:       cmp    $0x4,%dl
    0.00 :   18ea6f:       jae    18eaa4 <__nss_group_lookup@GLIBC_2.2.5+0x24e24>
    0.00 :   18ea71:       cmp    $0x1,%dl
    0.00 :   18ea74:       ja     18eab1 <__nss_group_lookup@GLIBC_2.2.5+0x24e31>
    0.00 :   18ea76:       jb     18ea7d <__nss_group_lookup@GLIBC_2.2.5+0x24dfd>
    0.00 :   18ea78:       movzbl (%rsi),%ecx
    0.00 :   18ea7b:       mov    %cl,(%rdi)
    0.00 :   18ea7d:       retq
    0.00 :   18ea7e:       vmovdqu (%rsi),%xmm0
    0.00 :   18ea82:       vmovdqu -0x10(%rsi,%rdx,1),%xmm1
    0.00 :   18ea88:       vmovdqu %xmm0,(%rdi)
    0.00 :   18ea8c:       vmovdqu %xmm1,-0x10(%rdi,%rdx,1)
    0.00 :   18ea92:       retq
    0.00 :   18ea93:       mov    -0x8(%rsi,%rdx,1),%rcx
    0.00 :   18ea98:       mov    (%rsi),%rsi
    0.00 :   18ea9b:       mov    %rcx,-0x8(%rdi,%rdx,1)
    0.00 :   18eaa0:       mov    %rsi,(%rdi)
    0.00 :   18eaa3:       retq
    0.00 :   18eaa4:       mov    -0x4(%rsi,%rdx,1),%ecx
    0.00 :   18eaa8:       mov    (%rsi),%esi
    0.00 :   18eaaa:       mov    %ecx,-0x4(%rdi,%rdx,1)
    0.00 :   18eaae:       mov    %esi,(%rdi)
    0.00 :   18eab0:       retq
    0.00 :   18eab1:       movzwl -0x2(%rsi,%rdx,1),%ecx
    0.00 :   18eab6:       movzwl (%rsi),%esi
    0.00 :   18eab9:       mov    %cx,-0x2(%rdi,%rdx,1)
    0.00 :   18eabe:       mov    %si,(%rdi)
    0.00 :   18eac1:       retq
    1.16 :   18eac2:       cmp    $0x1000,%rdx
    0.00 :   18eac9:       ja     18ea3b <__nss_group_lookup@GLIBC_2.2.5+0x24dbb>
    0.00 :   18eacf:       cmp    $0x100,%rdx
    0.00 :   18ead6:       ja     18eb6d <__nss_group_lookup@GLIBC_2.2.5+0x24eed>
    0.00 :   18eadc:       cmp    $0x80,%rdx
    0.00 :   18eae3:       jb     18eb3f <__nss_group_lookup@GLIBC_2.2.5+0x24ebf>
    0.00 :   18eae5:       vmovdqu (%rsi),%ymm0
    5.94 :   18eae9:       vmovdqu 0x20(%rsi),%ymm1
    1.08 :   18eaee:       vmovdqu 0x40(%rsi),%ymm2
    4.51 :   18eaf3:       vmovdqu 0x60(%rsi),%ymm3
    0.82 :   18eaf8:       vmovdqu -0x20(%rsi,%rdx,1),%ymm4
   12.18 :   18eafe:       vmovdqu -0x40(%rsi,%rdx,1),%ymm5
    0.59 :   18eb04:       vmovdqu -0x60(%rsi,%rdx,1),%ymm6
    2.30 :   18eb0a:       vmovdqu -0x80(%rsi,%rdx,1),%ymm7
    1.26 :   18eb10:       vmovdqu %ymm0,(%rdi)
    0.78 :   18eb14:       vmovdqu %ymm1,0x20(%rdi)
    0.42 :   18eb19:       vmovdqu %ymm2,0x40(%rdi)
    1.07 :   18eb1e:       vmovdqu %ymm3,0x60(%rdi)
    1.68 :   18eb23:       vmovdqu %ymm4,-0x20(%rdi,%rdx,1)
    0.48 :   18eb29:       vmovdqu %ymm5,-0x40(%rdi,%rdx,1)
    0.00 :   18eb2f:       vmovdqu %ymm6,-0x60(%rdi,%rdx,1)
    0.77 :   18eb35:       vmovdqu %ymm7,-0x80(%rdi,%rdx,1)
    0.38 :   18eb3b:       vzeroupper
    0.22 :   18eb3e:       retq
    0.00 :   18eb3f:       vmovdqu (%rsi),%ymm0
    0.00 :   18eb43:       vmovdqu 0x20(%rsi),%ymm1
    0.00 :   18eb48:       vmovdqu -0x20(%rsi,%rdx,1),%ymm2
    0.00 :   18eb4e:       vmovdqu -0x40(%rsi,%rdx,1),%ymm3
    0.00 :   18eb54:       vmovdqu %ymm0,(%rdi)
    0.00 :   18eb58:       vmovdqu %ymm1,0x20(%rdi)
    0.00 :   18eb5d:       vmovdqu %ymm2,-0x20(%rdi,%rdx,1)
    0.00 :   18eb63:       vmovdqu %ymm3,-0x40(%rdi,%rdx,1)
    0.00 :   18eb69:       vzeroupper
    0.00 :   18eb6c:       retq
    0.00 :   18eb6d:       cmp    %rsi,%rdi
    0.00 :   18eb70:       ja     18ec21 <__nss_group_lookup@GLIBC_2.2.5+0x24fa1>
    0.00 :   18eb76:       je     18ea61 <__nss_group_lookup@GLIBC_2.2.5+0x24de1>
    0.00 :   18eb7c:       vmovdqu (%rsi),%ymm4
    1.33 :   18eb80:       vmovdqu -0x20(%rsi,%rdx,1),%ymm5
    0.64 :   18eb86:       vmovdqu -0x40(%rsi,%rdx,1),%ymm6
    0.04 :   18eb8c:       vmovdqu -0x60(%rsi,%rdx,1),%ymm7
    0.21 :   18eb92:       vmovdqu -0x80(%rsi,%rdx,1),%ymm8
    0.12 :   18eb98:       mov    %rdi,%r11
    0.00 :   18eb9b:       lea    -0x20(%rdi,%rdx,1),%rcx
    0.00 :   18eba0:       mov    %rdi,%r8
    0.00 :   18eba3:       and    $0x1f,%r8
    0.00 :   18eba7:       sub    $0x20,%r8
    0.00 :   18ebab:       sub    %r8,%rsi
    0.00 :   18ebae:       sub    %r8,%rdi
    0.00 :   18ebb1:       add    %r8,%rdx
    0.00 :   18ebb4:       cmp    0x261b9d(%rip),%rdx        # 3f0758 <mallwatch@@GLIBC_2.2.5+0x8>
    0.00 :   18ebbb:       ja     18ecc8 <__nss_group_lookup@GLIBC_2.2.5+0x25048>
    0.00 :   18ebc1:       vmovdqu (%rsi),%ymm0
    0.30 :   18ebc5:       vmovdqu 0x20(%rsi),%ymm1
    2.42 :   18ebca:       vmovdqu 0x40(%rsi),%ymm2
    0.08 :   18ebcf:       vmovdqu 0x60(%rsi),%ymm3
    2.39 :   18ebd4:       add    $0x80,%rsi
    0.19 :   18ebdb:       sub    $0x80,%rdx
    0.00 :   18ebe2:       vmovdqa %ymm0,(%rdi)
    0.25 :   18ebe6:       vmovdqa %ymm1,0x20(%rdi)
    0.24 :   18ebeb:       vmovdqa %ymm2,0x40(%rdi)
    0.43 :   18ebf0:       vmovdqa %ymm3,0x60(%rdi)
    0.14 :   18ebf5:       add    $0x80,%rdi
    0.04 :   18ebfc:       cmp    $0x80,%rdx
    0.00 :   18ec03:       ja     18ebc1 <__nss_group_lookup@GLIBC_2.2.5+0x24f41>
    0.00 :   18ec05:       vmovdqu %ymm5,(%rcx)
    0.00 :   18ec09:       vmovdqu %ymm6,-0x20(%rcx)
    0.00 :   18ec0e:       vmovdqu %ymm7,-0x40(%rcx)
    0.00 :   18ec13:       vmovdqu %ymm8,-0x60(%rcx)
    0.06 :   18ec18:       vmovdqu %ymm4,(%r11)
    0.00 :   18ec1d:       vzeroupper
    0.00 :   18ec20:       retq
    0.00 :   18ec21:       vmovdqu (%rsi),%ymm4
    0.85 :   18ec25:       vmovdqu 0x20(%rsi),%ymm5
    0.00 :   18ec2a:       vmovdqu 0x40(%rsi),%ymm6
    0.51 :   18ec2f:       vmovdqu 0x60(%rsi),%ymm7
    0.00 :   18ec34:       vmovdqu -0x20(%rsi,%rdx,1),%ymm8
    0.25 :   18ec3a:       lea    -0x20(%rdi,%rdx,1),%r11
    0.00 :   18ec3f:       lea    -0x20(%rsi,%rdx,1),%rcx
    0.00 :   18ec44:       mov    %r11,%r9
    0.00 :   18ec47:       mov    %r11,%r8
    0.00 :   18ec4a:       and    $0x1f,%r8
    0.00 :   18ec4e:       sub    %r8,%rcx
    0.00 :   18ec51:       sub    %r8,%r9
    0.00 :   18ec54:       sub    %r8,%rdx
    0.00 :   18ec57:       cmp    0x261afa(%rip),%rdx        # 3f0758 <mallwatch@@GLIBC_2.2.5+0x8>
    0.00 :   18ec5e:       ja     18ed54 <__nss_group_lookup@GLIBC_2.2.5+0x250d4>
    0.29 :   18ec64:       vmovdqu (%rcx),%ymm0
    5.89 :   18ec68:       vmovdqu -0x20(%rcx),%ymm1
    1.00 :   18ec6d:       vmovdqu -0x40(%rcx),%ymm2
    6.34 :   18ec72:       vmovdqu -0x60(%rcx),%ymm3
    0.52 :   18ec77:       sub    $0x80,%rcx
    0.09 :   18ec7e:       sub    $0x80,%rdx
    0.44 :   18ec85:       vmovdqa %ymm0,(%r9)
    1.30 :   18ec8a:       vmovdqa %ymm1,-0x20(%r9)
    0.38 :   18ec90:       vmovdqa %ymm2,-0x40(%r9)
    0.54 :   18ec96:       vmovdqa %ymm3,-0x60(%r9)
    0.26 :   18ec9c:       sub    $0x80,%r9
    0.00 :   18eca3:       cmp    $0x80,%rdx
    0.00 :   18ecaa:       ja     18ec64 <__nss_group_lookup@GLIBC_2.2.5+0x24fe4>
    0.09 :   18ecac:       vmovdqu %ymm4,(%rdi)
    0.00 :   18ecb0:       vmovdqu %ymm5,0x20(%rdi)
    0.00 :   18ecb5:       vmovdqu %ymm6,0x40(%rdi)
    0.00 :   18ecba:       vmovdqu %ymm7,0x60(%rdi)
    0.00 :   18ecbf:       vmovdqu %ymm8,(%r11)
    0.00 :   18ecc4:       vzeroupper
    0.00 :   18ecc7:       retq
    0.00 :   18ecc8:       lea    (%rdi,%rdx,1),%r10
    0.00 :   18eccc:       cmp    %r10,%rsi
    0.00 :   18eccf:       jb     18ebc1 <__nss_group_lookup@GLIBC_2.2.5+0x24f41>
    0.00 :   18ecd5:       prefetcht0 0x100(%rsi)
    0.00 :   18ecdc:       prefetcht0 0x140(%rsi)
    0.00 :   18ece3:       prefetcht0 0x180(%rsi)
    0.00 :   18ecea:       prefetcht0 0x1c0(%rsi)
    0.00 :   18ecf1:       vmovdqu (%rsi),%ymm0
    0.00 :   18ecf5:       vmovdqu 0x20(%rsi),%ymm1
    0.00 :   18ecfa:       vmovdqu 0x40(%rsi),%ymm2
    0.00 :   18ecff:       vmovdqu 0x60(%rsi),%ymm3
    0.00 :   18ed04:       add    $0x80,%rsi
    0.00 :   18ed0b:       sub    $0x80,%rdx
    0.00 :   18ed12:       vmovntdq %ymm0,(%rdi)
    0.00 :   18ed16:       vmovntdq %ymm1,0x20(%rdi)
    0.00 :   18ed1b:       vmovntdq %ymm2,0x40(%rdi)
    0.00 :   18ed20:       vmovntdq %ymm3,0x60(%rdi)
    0.00 :   18ed25:       add    $0x80,%rdi
    0.00 :   18ed2c:       cmp    $0x80,%rdx
    0.00 :   18ed33:       ja     18ecd5 <__nss_group_lookup@GLIBC_2.2.5+0x25055>
    0.00 :   18ed35:       sfence
    0.00 :   18ed38:       vmovdqu %ymm5,(%rcx)
    0.00 :   18ed3c:       vmovdqu %ymm6,-0x20(%rcx)
    0.00 :   18ed41:       vmovdqu %ymm7,-0x40(%rcx)
    0.00 :   18ed46:       vmovdqu %ymm8,-0x60(%rcx)
    0.00 :   18ed4b:       vmovdqu %ymm4,(%r11)
    0.00 :   18ed50:       vzeroupper
    0.00 :   18ed53:       retq
    0.00 :   18ed54:       lea    (%rcx,%rdx,1),%r10
    0.00 :   18ed58:       cmp    %r10,%r9
    0.00 :   18ed5b:       jb     18ec64 <__nss_group_lookup@GLIBC_2.2.5+0x24fe4>
    0.00 :   18ed61:       prefetcht0 -0x100(%rcx)
    0.00 :   18ed68:       prefetcht0 -0x140(%rcx)
    0.00 :   18ed6f:       prefetcht0 -0x180(%rcx)
    0.00 :   18ed76:       prefetcht0 -0x1c0(%rcx)
    0.00 :   18ed7d:       vmovdqu (%rcx),%ymm0
    0.00 :   18ed81:       vmovdqu -0x20(%rcx),%ymm1
    0.00 :   18ed86:       vmovdqu -0x40(%rcx),%ymm2
    0.00 :   18ed8b:       vmovdqu -0x60(%rcx),%ymm3
    0.00 :   18ed90:       sub    $0x80,%rcx
    0.00 :   18ed97:       sub    $0x80,%rdx
    0.00 :   18ed9e:       vmovntdq %ymm0,(%r9)
    0.00 :   18eda3:       vmovntdq %ymm1,-0x20(%r9)
    0.00 :   18eda9:       vmovntdq %ymm2,-0x40(%r9)
    0.00 :   18edaf:       vmovntdq %ymm3,-0x60(%r9)
    0.00 :   18edb5:       sub    $0x80,%r9
    0.00 :   18edbc:       cmp    $0x80,%rdx
    0.00 :   18edc3:       ja     18ed61 <__nss_group_lookup@GLIBC_2.2.5+0x250e1>
    0.00 :   18edc5:       sfence
    0.00 :   18edc8:       vmovdqu %ymm4,(%rdi)
    0.00 :   18edcc:       vmovdqu %ymm5,0x20(%rdi)
    0.00 :   18edd1:       vmovdqu %ymm6,0x40(%rdi)
    0.00 :   18edd6:       vmovdqu %ymm7,0x60(%rdi)
    0.00 :   18eddb:       vmovdqu %ymm8,(%r11)
    0.00 :   18ede0:       vzeroupper
    0.00 :   18ede3:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (677 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000002a0440 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)>:
         :            _ZN11onnxruntimeL17GemmBroadcastBiasIfEEvllfPKT_PKNS_11TensorShapeEPS1_():
    0.00 :   2a0440:       push   %r14
    0.00 :   2a0442:       pxor   %xmm1,%xmm1
    0.00 :   2a0446:       push   %r13
    0.00 :   2a0448:       push   %r12
    0.00 :   2a044a:       push   %rbp
    0.00 :   2a044b:       mov    %rdx,%rbp
    0.00 :   2a044e:       mov    $0x1,%edx
    0.00 :   2a0453:       push   %rbx
    0.00 :   2a0454:       sub    $0xb0,%rsp
    0.00 :   2a045b:       mov    %fs:0x28,%rax
    0.00 :   2a0464:       mov    %rax,0xa8(%rsp)
    0.00 :   2a046c:       xor    %eax,%eax
    0.00 :   2a046e:       ucomiss %xmm1,%xmm0
    0.00 :   2a0471:       setp   %al
    0.00 :   2a0474:       cmovne %edx,%eax
    0.00 :   2a0477:       test   %al,%al
    0.00 :   2a0479:       je     2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a047f:       test   %rbp,%rbp
    0.00 :   2a0482:       je     2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a0488:       mov    %rcx,%r14
    0.00 :   2a048b:       test   %rcx,%rcx
    0.00 :   2a048e:       je     2a0704 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x2c4>
    0.00 :   2a0494:       mov    %rdi,%r12
    0.00 :   2a0497:       mov    %rcx,%rdi
    0.00 :   2a049a:       mov    %rsi,%r13
    0.00 :   2a049d:       mov    %r8,%rbx
    0.00 :   2a04a0:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   2a04a5:       cmp    $0x1,%rax
    0.00 :   2a04a9:       je     2a0638 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1f8>
    0.00 :   2a04af:       mov    (%r14),%rdx
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2a04b2:       mov    0x8(%r14),%rax
    0.00 :   2a04b6:       sub    %rdx,%rax
    0.00 :   2a04b9:       cmp    $0x8,%rax
    0.00 :   2a04bd:       je     2a05e8 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1a8>
    0.00 :   2a04c3:       cmpq   $0x1,(%rdx)
    0.00 :   2a04c7:       je     2a05e8 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1a8>
    0.00 :   2a04cd:       cmpq   $0x1,0x8(%rdx)
    0.00 :   2a04d2:       je     2a0590 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x150>
    0.00 :   2a04d8:       imul   %r13,%r12
    0.00 :   2a04dc:       test   $0x3,%bl
    0.00 :   2a04df:       jne    2a06d8 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x298>
    0.00 :   2a04e5:       mov    %rbx,%rax
    0.00 :   2a04e8:       mov    %r12,%rcx
    0.00 :   2a04eb:       shr    $0x2,%rax
    0.00 :   2a04ef:       neg    %rax
    0.00 :   2a04f2:       and    $0x3,%eax
    0.00 :   2a04f5:       cmp    %r12,%rax
    0.00 :   2a04f8:       cmovg  %r12,%rax
    0.00 :   2a04fc:       sub    %rax,%rcx
    0.00 :   2a04ff:       lea    0x3(%rcx),%rdx
    0.00 :   2a0503:       cmovns %rcx,%rdx
    0.00 :   2a0507:       and    $0xfffffffffffffffc,%rdx
    0.00 :   2a050b:       add    %rax,%rdx
    0.00 :   2a050e:       test   %rax,%rax
    0.00 :   2a0511:       jle    2a052c <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0xec>
    0.00 :   2a0513:       xor    %ecx,%ecx
    0.00 :   2a0515:       nopl   (%rax)
    0.00 :   2a0518:       movss  0x0(%rbp,%rcx,4),%xmm0
    0.00 :   2a051e:       movss  %xmm0,(%rbx,%rcx,4)
    0.00 :   2a0523:       add    $0x1,%rcx
    0.00 :   2a0527:       cmp    %rax,%rcx
    0.00 :   2a052a:       jl     2a0518 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0xd8>
    0.00 :   2a052c:       cmp    %rdx,%rax
    0.00 :   2a052f:       jge    2a054a <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x10a>
    0.00 :   2a0531:       nopl   0x0(%rax)
         :            _mm_store_ps():
         :
         :            /* Store four SPFP values.  The address must be 16-byte aligned.  */
         :            extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_store_ps (float *__P, __m128 __A)
         :            {
         :            *(__m128 *)__P = __A;
    0.00 :   2a0538:       movups 0x0(%rbp,%rax,4),%xmm2
    0.00 :   2a053d:       movaps %xmm2,(%rbx,%rax,4)
         :            _ZN11onnxruntimeL17GemmBroadcastBiasIfEEvllfPKT_PKNS_11TensorShapeEPS1_():
    0.00 :   2a0541:       add    $0x4,%rax
    0.00 :   2a0545:       cmp    %rax,%rdx
    0.00 :   2a0548:       jg     2a0538 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0xf8>
    0.00 :   2a054a:       cmp    %r12,%rdx
    0.00 :   2a054d:       jge    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a054f:       nop
    0.00 :   2a0550:       movss  0x0(%rbp,%rdx,4),%xmm0
    0.00 :   2a0556:       movss  %xmm0,(%rbx,%rdx,4)
    0.00 :   2a055b:       add    $0x1,%rdx
    0.00 :   2a055f:       cmp    %rdx,%r12
    0.00 :   2a0562:       jne    2a0550 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x110>
    0.00 :   2a0564:       nopl   0x0(%rax)
    0.00 :   2a0568:       mov    0xa8(%rsp),%rax
    0.00 :   2a0570:       xor    %fs:0x28,%rax
    0.00 :   2a0579:       jne    2a07a1 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x361>
    0.00 :   2a057f:       add    $0xb0,%rsp
    0.00 :   2a0586:       pop    %rbx
    0.00 :   2a0587:       pop    %rbp
    0.00 :   2a0588:       pop    %r12
    0.00 :   2a058a:       pop    %r13
    0.00 :   2a058c:       pop    %r14
    0.00 :   2a058e:       retq
    0.00 :   2a058f:       nop
    0.00 :   2a0590:       test   %r12,%r12
    0.00 :   2a0593:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a0595:       mov    %r13,%rcx
    0.00 :   2a0598:       lea    0x0(,%r13,4),%rsi
    0.00 :   2a05a0:       xor    %edx,%edx
    0.00 :   2a05a2:       neg    %rcx
    0.00 :   2a05a5:       add    %rsi,%rbx
    0.00 :   2a05a8:       shl    $0x2,%rcx
    0.00 :   2a05ac:       nopl   0x0(%rax)
    0.00 :   2a05b0:       lea    (%rbx,%rcx,1),%rax
    0.00 :   2a05b4:       test   %r13,%r13
    0.00 :   2a05b7:       jle    2a05d4 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x194>
    0.00 :   2a05b9:       nopl   0x0(%rax)
    0.00 :   2a05c0:       movss  0x0(%rbp,%rdx,4),%xmm0
    0.00 :   2a05c6:       add    $0x4,%rax
    0.00 :   2a05ca:       movss  %xmm0,-0x4(%rax)
    0.00 :   2a05cf:       cmp    %rax,%rbx
    0.00 :   2a05d2:       jne    2a05c0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x180>
    0.00 :   2a05d4:       add    $0x1,%rdx
    0.00 :   2a05d8:       add    %rsi,%rbx
    0.00 :   2a05db:       cmp    %rdx,%r12
    0.00 :   2a05de:       jne    2a05b0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x170>
    0.00 :   2a05e0:       jmp    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a05e2:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a05e8:       lea    0x0(,%r13,4),%rcx
    0.00 :   2a05f0:       xor    %edx,%edx
    0.00 :   2a05f2:       test   %r12,%r12
    0.00 :   2a05f5:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a05fb:       nopl   0x0(%rax,%rax,1)
    0.00 :   2a0600:       xor    %eax,%eax
    0.00 :   2a0602:       test   %r13,%r13
    0.00 :   2a0605:       jle    2a0624 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1e4>
    0.31 :   2a0607:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a0610:       movss  0x0(%rbp,%rax,4),%xmm0
    4.61 :   2a0616:       movss  %xmm0,(%rbx,%rax,4)
   94.80 :   2a061b:       add    $0x1,%rax
    0.00 :   2a061f:       cmp    %rax,%r13
    0.00 :   2a0622:       jne    2a0610 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1d0>
    0.00 :   2a0624:       add    $0x1,%rdx
    0.28 :   2a0628:       add    %rcx,%rbx
    0.00 :   2a062b:       cmp    %rdx,%r12
    0.00 :   2a062e:       jne    2a0600 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1c0>
    0.00 :   2a0630:       jmpq   2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a0635:       nopl   (%rax)
    0.00 :   2a0638:       movss  0x0(%rbp),%xmm0
    0.00 :   2a063d:       imul   %r13,%r12
    0.00 :   2a0641:       test   $0x3,%bl
    0.00 :   2a0644:       jne    2a06f0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x2b0>
    0.00 :   2a064a:       mov    %rbx,%rax
    0.00 :   2a064d:       mov    %r12,%rdx
    0.00 :   2a0650:       shr    $0x2,%rax
    0.00 :   2a0654:       neg    %rax
    0.00 :   2a0657:       and    $0x3,%eax
    0.00 :   2a065a:       cmp    %r12,%rax
    0.00 :   2a065d:       cmovg  %r12,%rax
    0.00 :   2a0661:       sub    %rax,%rdx
    0.00 :   2a0664:       lea    0x3(%rdx),%rcx
    0.00 :   2a0668:       cmovns %rdx,%rcx
    0.00 :   2a066c:       and    $0xfffffffffffffffc,%rcx
    0.00 :   2a0670:       add    %rax,%rcx
    0.00 :   2a0673:       test   %rax,%rax
    0.00 :   2a0676:       jle    2a068e <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x24e>
    0.00 :   2a0678:       xor    %edx,%edx
    0.00 :   2a067a:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a0680:       movss  %xmm0,(%rbx,%rdx,4)
    0.00 :   2a0685:       add    $0x1,%rdx
    0.00 :   2a0689:       cmp    %rax,%rdx
    0.00 :   2a068c:       jl     2a0680 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x240>
    0.00 :   2a068e:       movaps %xmm0,%xmm1
    0.00 :   2a0691:       shufps $0x0,%xmm1,%xmm1
    0.00 :   2a0695:       cmp    %rcx,%rax
    0.00 :   2a0698:       jge    2a06ad <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x26d>
    0.00 :   2a069a:       nopw   0x0(%rax,%rax,1)
         :            _mm_store_ps():
    0.00 :   2a06a0:       movaps %xmm1,(%rbx,%rax,4)
         :            _ZN11onnxruntimeL17GemmBroadcastBiasIfEEvllfPKT_PKNS_11TensorShapeEPS1_():
    0.00 :   2a06a4:       add    $0x4,%rax
    0.00 :   2a06a8:       cmp    %rcx,%rax
    0.00 :   2a06ab:       jl     2a06a0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x260>
    0.00 :   2a06ad:       cmp    %rcx,%r12
    0.00 :   2a06b0:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a06b6:       lea    (%rbx,%rcx,4),%rax
    0.00 :   2a06ba:       lea    (%rbx,%r12,4),%rdx
    0.00 :   2a06be:       xchg   %ax,%ax
    0.00 :   2a06c0:       movss  %xmm0,(%rax)
    0.00 :   2a06c4:       add    $0x4,%rax
    0.00 :   2a06c8:       cmp    %rdx,%rax
    0.00 :   2a06cb:       jne    2a06c0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x280>
    0.00 :   2a06cd:       jmpq   2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a06d2:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a06d8:       test   %r12,%r12
    0.00 :   2a06db:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a06e1:       mov    %r12,%rdx
    0.00 :   2a06e4:       mov    %r12,%rax
    0.00 :   2a06e7:       jmpq   2a0513 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0xd3>
    0.00 :   2a06ec:       nopl   0x0(%rax)
    0.00 :   2a06f0:       test   %r12,%r12
    0.00 :   2a06f3:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a06f9:       mov    %r12,%rcx
    0.00 :   2a06fc:       mov    %r12,%rax
    0.00 :   2a06ff:       jmpq   2a0678 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x238>
    0.00 :   2a0704:       mov    $0xa0,%edi
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a0709:       lea    0x20(%rsp),%rbp
    0.00 :   2a070e:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a0713:       lea    0x5a9b0f(%rip),%rdx        # 84a229 <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0x4a9>
    0.00 :   2a071a:       mov    %rbp,%rdi
    0.00 :   2a071d:       mov    %rax,%r12
    0.00 :   2a0720:       lea    -0x29(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a0724:       lea    0x10(%rbp),%rax
    0.00 :   2a0728:       mov    %rax,0x20(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a072d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a0732:       mov    %rsp,%r13
    0.00 :   2a0735:       mov    %r13,%rdi
    0.00 :   2a0738:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a073d:       lea    0x40(%rsp),%r14
    0.00 :   2a0742:       mov    %r13,%r8
    0.00 :   2a0745:       lea    0x5a9c94(%rip),%rcx        # 84a3e0 <onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)::__PRETTY_FUNCTION__>
    0.00 :   2a074c:       mov    $0x6f,%edx
    0.00 :   2a0751:       lea    0x5a9ad8(%rip),%rsi        # 84a230 <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0x4b0>
    0.00 :   2a0758:       mov    %r14,%rdi
    0.00 :   2a075b:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a0760:       mov    %rbp,%rcx
    0.00 :   2a0763:       lea    0x5a9b04(%rip),%rdx        # 84a26e <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0x4ee>
    0.00 :   2a076a:       mov    %r14,%rsi
    0.00 :   2a076d:       mov    %r12,%rdi
    0.00 :   2a0770:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a0775:       mov    %r14,%rdi
         :            if (!_M_is_local())
    0.00 :   2a0778:       add    $0x10,%rbp
    0.00 :   2a077c:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a0781:       mov    %r13,%rdi
    0.00 :   2a0784:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a0789:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a078e:       cmp    %rbp,%rdi
    0.00 :   2a0791:       je     7896f <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2a0797:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a079c:       jmpq   7896f <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]>
    0.00 :   2a07a1:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   2a07a6:       mov    %rax,%rbx
    0.00 :   2a07a9:       jmpq   78985 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]+0x16>
    0.00 :   2a07ae:       mov    %rax,%rbx
    0.00 :   2a07b1:       jmpq   7898d <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]+0x1e>
    0.00 :   2a07b6:       mov    %rax,%rbx
    0.00 :   2a07b9:       jmpq   78995 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]+0x26>
    0.00 :   2a07be:       mov    %rax,%rbx
    0.00 :   2a07c1:       jmpq   789a8 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]+0x39>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (342 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004bba20 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)>:
         :            _ZZN11onnxruntime12_GLOBAL__N_126CreateScalarBroadcastFuncsIfEENS_25ProcessBroadcastSpanFuncsEvENUlRNS_15BroadcastHelperEE1_4_FUNES4_():
    0.00 :   4bba20:       mov    0x8(%rdi),%rcx
    0.00 :   4bba24:       mov    (%rdi),%rax
    0.00 :   4bba27:       cmpq   $0x0,0x50(%rdi)
    0.00 :   4bba2c:       mov    0x40(%rdi),%r10
    0.00 :   4bba30:       mov    0x18(%rcx),%r9
    0.00 :   4bba34:       mov    0x48(%rdi),%rcx
    0.00 :   4bba38:       setne  %sil
    0.00 :   4bba3c:       mov    0x88(%rax),%rdx
    0.00 :   4bba43:       mov    0x28(%rax),%r8
    0.00 :   4bba47:       mov    0x30(%rax),%r11
    0.00 :   4bba4b:       add    0x20(%rdi),%rdx
    0.00 :   4bba4f:       mov    0xe0(%rax),%rax
    0.00 :   4bba56:       add    0x30(%rdi),%rax
    0.00 :   4bba5a:       test   %rcx,%rcx
    0.00 :   4bba5d:       jle    4bba8e <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x6e>
    0.00 :   4bba5f:       lea    (%r11,%rax,4),%r11
    0.00 :   4bba63:       lea    (%r9,%r10,4),%rdi
    0.00 :   4bba67:       xor    %eax,%eax
    0.00 :   4bba69:       add    %r8,%rdx
    0.00 :   4bba6c:       nopl   0x0(%rax)
   19.33 :   4bba70:       pxor   %xmm0,%xmm0
    4.19 :   4bba74:       cmp    (%rdx,%rax,1),%sil
    0.00 :   4bba78:       jne    4bba80 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x60>
   17.73 :   4bba7a:       movss  (%r11,%rax,4),%xmm0
   40.24 :   4bba80:       movss  %xmm0,(%rdi,%rax,4)
   14.68 :   4bba85:       add    $0x1,%rax
    3.83 :   4bba89:       cmp    %rax,%rcx
    0.00 :   4bba8c:       jne    4bba70 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x50>
    0.00 :   4bba8e:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (327 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004bb300 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)>:
         :            _ZZN11onnxruntime12_GLOBAL__N_119MergeBroadcastFuncsIfEENSt9enable_ifIXsrSt13is_arithmeticIT_E5valueENS_25ProcessBroadcastSpanFuncsEE4typeEvENUlRNS_15BroadcastHelperEE1_4_FUNESA_():
    0.00 :   4bb300:       mov    (%rdi),%rcx
    0.00 :   4bb303:       mov    0x48(%rdi),%r8
    0.00 :   4bb307:       mov    0x88(%rcx),%rax
    0.00 :   4bb30e:       add    0x20(%rdi),%rax
    0.00 :   4bb312:       lea    0x0(,%rax,4),%rdx
    0.00 :   4bb31a:       mov    0x28(%rcx),%r10
    0.00 :   4bb31e:       mov    0x30(%rcx),%r11
    0.00 :   4bb322:       mov    0xe0(%rcx),%rax
    0.00 :   4bb329:       add    0x30(%rdi),%rax
    0.00 :   4bb32d:       lea    0x0(,%rax,4),%rcx
    0.00 :   4bb335:       mov    0x8(%rdi),%rax
    0.00 :   4bb339:       mov    0x18(%rax),%r9
    0.00 :   4bb33d:       mov    0x40(%rdi),%rax
    0.00 :   4bb341:       lea    0x0(,%rax,4),%rsi
    0.00 :   4bb349:       test   %r8,%r8
    0.00 :   4bb34c:       jle    4bb389 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x89>
    0.00 :   4bb34e:       xor    %eax,%eax
    0.00 :   4bb350:       add    %rcx,%r11
    0.00 :   4bb353:       lea    (%r10,%rdx,1),%rdi
    0.00 :   4bb357:       add    %r9,%rsi
    0.00 :   4bb35a:       nopw   0x0(%rax,%rax,1)
    9.65 :   4bb360:       mov    (%rdi,%rax,4),%edx
         :            operator()():
    9.85 :   4bb363:       pxor   %xmm1,%xmm1
         :            _ZZN11onnxruntime12_GLOBAL__N_119MergeBroadcastFuncsIfEENSt9enable_ifIXsrSt13is_arithmeticIT_E5valueENS_25ProcessBroadcastSpanFuncsEE4typeEvENUlRNS_15BroadcastHelperEE1_4_FUNESA_():
    8.18 :   4bb367:       mov    (%r11,%rax,4),%ecx
         :            operator()():
    6.73 :   4bb36b:       mov    %edx,-0x4(%rsp)
    8.17 :   4bb36f:       movss  -0x4(%rsp),%xmm0
    7.87 :   4bb375:       ucomiss %xmm1,%xmm0
   10.74 :   4bb378:       jp     4bb37d <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x7d>
    7.20 :   4bb37a:       cmove  %ecx,%edx
         :            _ZZN11onnxruntime12_GLOBAL__N_119MergeBroadcastFuncsIfEENSt9enable_ifIXsrSt13is_arithmeticIT_E5valueENS_25ProcessBroadcastSpanFuncsEE4typeEvENUlRNS_15BroadcastHelperEE1_4_FUNESA_():
   14.16 :   4bb37d:       mov    %edx,(%rsi,%rax,4)
    8.60 :   4bb380:       add    $0x1,%rax
    8.85 :   4bb384:       cmp    %rax,%r8
    0.00 :   4bb387:       jne    4bb360 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x60>
    0.00 :   4bb389:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (998 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000575d20 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   575d20:       push   %r15
    0.00 :   575d22:       push   %r14
    0.00 :   575d24:       push   %r13
    0.00 :   575d26:       mov    %rsi,%r13
    0.00 :   575d29:       mov    %rdx,%rsi
    0.00 :   575d2c:       push   %r12
    0.00 :   575d2e:       mov    %rdi,%r12
    0.00 :   575d31:       push   %rbp
    0.00 :   575d32:       push   %rbx
    0.00 :   575d33:       mov    %rdx,%rbx
    0.00 :   575d36:       sub    $0x148,%rsp
    0.00 :   575d3d:       mov    %fs:0x28,%rax
    0.00 :   575d46:       mov    %rax,0x138(%rsp)
    0.00 :   575d4e:       xor    %eax,%eax
    0.00 :   575d50:       lea    0x80(%rsp),%rbp
    0.00 :   575d58:       mov    %rbp,%rdi
    0.00 :   575d5b:       callq  577710 <onnxruntime::contrib::bias_gelu_helper::CheckInputs(onnxruntime::OpKernelContext const*)>
    0.00 :   575d60:       cmpq   $0x0,0x80(%rsp)
    0.00 :   575d69:       je     575dc8 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa8>
    0.00 :   575d6b:       mov    $0x20,%r8d
    0.00 :   575d71:       lea    0x314028(%rip),%rcx        # 889da0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::__FUNCTION__>
    0.00 :   575d78:       mov    %rbp,%rsi
    0.00 :   575d7b:       xor    %edi,%edi
    0.00 :   575d7d:       lea    0x313fc4(%rip),%rdx        # 889d48 <typeinfo name for onnxruntime::contrib::Attention<float>+0x28>
    0.00 :   575d84:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   575d89:       mov    0x80(%rsp),%rax
    0.00 :   575d91:       mov    %rax,(%r12)
    0.00 :   575d95:       mov    0x138(%rsp),%rcx
    0.00 :   575d9d:       xor    %fs:0x28,%rcx
    0.00 :   575da6:       mov    %r12,%rax
    0.00 :   575da9:       jne    576836 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xb16>
    0.00 :   575daf:       add    $0x148,%rsp
    0.00 :   575db6:       pop    %rbx
    0.00 :   575db7:       pop    %rbp
    0.00 :   575db8:       pop    %r12
    0.00 :   575dba:       pop    %r13
    0.00 :   575dbc:       pop    %r14
    0.00 :   575dbe:       pop    %r15
    0.00 :   575dc0:       retq
    0.00 :   575dc1:       nopl   0x0(%rax)
    0.00 :   575dc8:       xor    %esi,%esi
    0.00 :   575dca:       mov    %rbx,%rdi
    0.00 :   575dcd:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   575dd2:       mov    %rax,%r14
    0.00 :   575dd5:       mov    0x30(%rax),%rax
    0.00 :   575dd9:       cmpl   $0x1,0x8(%rax)
    0.00 :   575ddd:       jne    57690f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xbef>
    0.00 :   575de3:       mov    0x50(%r14),%rax
    0.00 :   575de7:       add    $0x18,%r14
    0.00 :   575deb:       add    -0x18(%r14),%rax
    0.00 :   575def:       mov    %r14,%rdi
    0.00 :   575df2:       mov    %rax,0x10(%rsp)
    0.00 :   575df7:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   575dfc:       mov    %r14,%rdx
    0.00 :   575dff:       xor    %esi,%esi
    0.00 :   575e01:       mov    %rbx,%rdi
    0.00 :   575e04:       mov    %rax,0x18(%rsp)
    0.00 :   575e09:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
    0.00 :   575e0e:       mov    %rax,%r14
    0.00 :   575e11:       mov    0x30(%rax),%rax
    0.00 :   575e15:       cmpl   $0x1,0x8(%rax)
    0.00 :   575e19:       jne    57683b <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xb1b>
    0.00 :   575e1f:       mov    0x50(%r14),%rax
    0.00 :   575e23:       mov    $0x1,%esi
    0.00 :   575e28:       add    (%r14),%rax
    0.00 :   575e2b:       mov    %rbx,%rdi
    0.00 :   575e2e:       mov    %rax,0x20(%rsp)
    0.00 :   575e33:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   575e38:       mov    %rax,%r14
    0.00 :   575e3b:       test   %rax,%rax
    0.00 :   575e3e:       je     575f88 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x268>
    0.00 :   575e44:       mov    0x30(%rax),%rax
    0.00 :   575e48:       cmpl   $0x1,0x8(%rax)
    0.00 :   575e4c:       jne    5769ac <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xc8c>
    0.00 :   575e52:       mov    0x50(%r14),%rax
    0.00 :   575e56:       lea    0x18(%r14),%rdi
    0.00 :   575e5a:       add    (%r14),%rax
    0.00 :   575e5d:       mov    %rax,0x28(%rsp)
    0.00 :   575e62:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   575e67:       lea    0x50(%rsp),%rdx
    0.00 :   575e6c:       mov    %rbx,%rsi
    0.00 :   575e6f:       mov    %rbp,%rdi
    0.00 :   575e72:       mov    %rax,0x30(%rsp)
    0.00 :   575e77:       movq   $0x0,0x50(%rsp)
    0.00 :   575e80:       movq   $0x0,0x58(%rsp)
    0.00 :   575e89:       callq  5c7230 <onnxruntime::OpKernelContext::GetTempSpaceAllocator(std::shared_ptr<onnxruntime::IAllocator>*) const>
    0.00 :   575e8e:       cmpq   $0x0,0x80(%rsp)
    0.00 :   575e97:       je     575f30 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x210>
    0.00 :   575e9d:       mov    $0x4e,%r8d
    0.00 :   575ea3:       lea    0x313ef6(%rip),%rcx        # 889da0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::__FUNCTION__>
    0.00 :   575eaa:       mov    %rbp,%rsi
    0.00 :   575ead:       xor    %edi,%edi
    0.00 :   575eaf:       lea    0x313e92(%rip),%rdx        # 889d48 <typeinfo name for onnxruntime::contrib::Attention<float>+0x28>
    0.00 :   575eb6:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   575ebb:       mov    0x80(%rsp),%rax
    0.00 :   575ec3:       mov    %rax,(%r12)
         :            // Does not throw if __r._M_get_use_count() == 0, caller must check.
         :            explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);
         :
         :            ~__shared_count() noexcept
         :            {
         :            if (_M_pi != nullptr)
    0.00 :   575ec7:       mov    0x58(%rsp),%rbx
    0.00 :   575ecc:       test   %rbx,%rbx
    0.00 :   575ecf:       je     575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   575ed5:       mov    0x6b202c(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   575edc:       test   %r15,%r15
    0.00 :   575edf:       je     5760b8 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x398>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   575ee5:       mov    $0xffffffff,%eax
    0.00 :   575eea:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   575eef:       cmp    $0x1,%eax
    0.00 :   575ef2:       jne    575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
         :            _M_dispose();
    0.00 :   575ef8:       mov    (%rbx),%rax
    0.00 :   575efb:       mov    %rbx,%rdi
    0.00 :   575efe:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   575f01:       test   %r15,%r15
    0.00 :   575f04:       je     576538 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x818>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   575f0a:       mov    $0xffffffff,%eax
    0.00 :   575f0f:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   575f14:       cmp    $0x1,%eax
    0.00 :   575f17:       jne    575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
         :            _M_destroy();
    0.00 :   575f1d:       mov    (%rbx),%rax
    0.00 :   575f20:       mov    %rbx,%rdi
    0.00 :   575f23:       callq  *0x18(%rax)
    0.00 :   575f26:       jmpq   575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
    0.00 :   575f2b:       nopl   0x0(%rax,%rax,1)
         :            _M_pi->_M_release();
         :            }
         :
         :            __shared_count(const __shared_count& __r) noexcept
         :            : _M_pi(__r._M_pi)
    0.00 :   575f30:       mov    0x58(%rsp),%r14
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   575f35:       mov    0x50(%rsp),%r15
         :            if (_M_pi != 0)
    0.00 :   575f3a:       test   %r14,%r14
    0.00 :   575f3d:       je     5760d0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x3b0>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   575f43:       cmpq   $0x0,0x6b1fbd(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   575f4b:       lea    0x8(%r14),%rax
    0.00 :   575f4f:       je     5763e0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x6c0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   575f55:       lock addl $0x1,(%rax)
    0.00 :   575f59:       lock addl $0x1,(%rax)
    0.00 :   575f5d:       mov    0x50(%rsp),%rdi
    0.00 :   575f62:       mov    %r14,0x8(%rsp)
    0.00 :   575f67:       mov    (%rdi),%rax
    0.00 :   575f6a:       mov    0x18(%rsp),%rsi
    0.00 :   575f6f:       mov    0x10(%rax),%rcx
    0.00 :   575f73:       test   %rsi,%rsi
    0.00 :   575f76:       jns    576190 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x470>
    0.00 :   575f7c:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   575f81:       nopl   0x0(%rax)
    0.00 :   575f88:       mov    0x18(%rsp),%r13
    0.00 :   575f8d:       lea    0x18(%rsp),%rax
    0.00 :   575f92:       mov    0x18(%rbx),%rbx
    0.00 :   575f96:       lea    0x10(%rsp),%rdx
    0.00 :   575f9b:       mov    %rax,0x80(%rsp)
    0.00 :   575fa3:       lea    0x20(%rsp),%rcx
    0.00 :   575fa8:       mov    %r13,%rsi
    0.00 :   575fab:       lea    0x1ffe(%r13),%rax
    0.00 :   575fb2:       mov    %rdx,0x88(%rsp)
    0.00 :   575fba:       add    $0xfff,%rsi
    0.00 :   575fc1:       mov    %rcx,0x90(%rsp)
    0.00 :   575fc9:       movq   $0x0,0x60(%rsp)
    0.00 :   575fd2:       cmovns %rsi,%rax
    0.00 :   575fd6:       sar    $0xc,%rax
    0.00 :   575fda:       cltq
    0.00 :   575fdc:       mov    %rax,0x50(%rsp)
    0.00 :   575fe1:       test   %rbx,%rbx
    0.00 :   575fe4:       je     576550 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x830>
    0.00 :   575fea:       test   %rax,%rax
    0.00 :   575fed:       jle    5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   575ff3:       cmp    $0x1,%rax
    0.00 :   575ff7:       je     5760e1 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x3c1>
    0.00 :   575ffd:       mov    %rbx,%rdi
    0.00 :   576000:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            min(const _Tp& __a, const _Tp& __b)
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :            //return __b < __a ? __b : __a;
         :            if (__b < __a)
    0.00 :   576005:       mov    0x50(%rsp),%rdx
    0.00 :   57600a:       cltq
    0.00 :   57600c:       cmp    %rdx,%rax
    0.00 :   57600f:       cmovg  %rdx,%rax
    0.00 :   576013:       mov    %rax,0x60(%rsp)
    0.00 :   576018:       cmp    $0x1,%rax
    0.00 :   57601c:       jle    576400 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x6e0>
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
         :            { ::new (__functor._M_access()) _Functor(std::move(__f)); }
         :
         :            static void
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   576022:       mov    $0x18,%edi
         :            };
         :
         :            _Function_base() : _M_manager(nullptr) { }
    0.00 :   576027:       movq   $0x0,0xe0(%rsp)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   576033:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   576038:       lea    0x60(%rsp),%rdx
    0.00 :   57603d:       mov    %rbp,0x10(%rax)
    0.00 :   576041:       mov    %rbx,%rdi
    0.00 :   576044:       lea    0xd0(%rsp),%r13
    0.00 :   57604c:       mov    %rdx,(%rax)
    0.00 :   57604f:       lea    0x50(%rsp),%rdx
    0.00 :   576054:       mov    0x60(%rsp),%rsi
    0.00 :   576059:       mov    %rdx,0x8(%rax)
    0.00 :   57605d:       mov    %r13,%rdx
    0.00 :   576060:       mov    %rax,0xd0(%rsp)
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   576068:       lea    -0xa0f(%rip),%rax        # 575660 <std::_Function_handler<void (long), onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   57606f:       mov    %rax,0xe8(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   576077:       lea    -0xb3e(%rip),%rax        # 575540 <std::_Function_base::_Base_manager<onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_manager(std::_Any_data&, onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1} const&, std::_Manager_operation)>
    0.00 :   57607e:       mov    %rax,0xe0(%rsp)
    0.00 :   576086:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
         :            if (_M_manager)
    0.00 :   57608b:       mov    0xe0(%rsp),%rax
    0.00 :   576093:       test   %rax,%rax
    0.00 :   576096:       je     5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   576098:       mov    $0x3,%edx
    0.00 :   57609d:       mov    %r13,%rsi
    0.00 :   5760a0:       mov    %r13,%rdi
    0.00 :   5760a3:       callq  *%rax
    0.00 :   5760a5:       movq   $0x0,(%r12)
         :            constexpr _Head_base()
    0.00 :   5760ad:       jmpq   575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
    0.00 :   5760b2:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5760b8:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5760bb:       lea    -0x1(%rax),%edx
    0.00 :   5760be:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   5760c1:       jmpq   575eef <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1cf>
    0.00 :   5760c6:       nopw   %cs:0x0(%rax,%rax,1)
         :            : _M_pi(__r._M_pi)
    0.00 :   5760d0:       movq   $0x0,0x8(%rsp)
         :            if (_M_pi != 0)
    0.00 :   5760d9:       mov    %r15,%rdi
    0.00 :   5760dc:       jmpq   575f67 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x247>
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   5760e1:       mov    0x10(%rsp),%rbp
    0.00 :   5760e6:       mov    0x20(%rsp),%rbx
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   5760eb:       cmp    $0xfff,%r13
    0.00 :   5760f2:       jle    57681a <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xafa>
    0.00 :   5760f8:       mov    $0x1000,%edx
         :            return __b;
         :            return __a;
    0.00 :   5760fd:       mov    $0x1000,%r13d
    0.00 :   576103:       movss  0x314049(%rip),%xmm3        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   57610b:       movss  0x2c7871(%rip),%xmm2        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576113:       xor    %eax,%eax
    0.00 :   576115:       nopl   (%rax)
    0.00 :   576118:       movss  0x0(%rbp,%rax,4),%xmm1
    0.00 :   57611e:       movaps %xmm1,%xmm0
    0.00 :   576121:       mulss  %xmm3,%xmm0
    0.00 :   576125:       mulss  %xmm1,%xmm0
    0.00 :   576129:       addss  %xmm2,%xmm0
    0.00 :   57612d:       mulss  %xmm1,%xmm0
    0.00 :   576131:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   576136:       add    $0x1,%rax
    0.00 :   57613a:       cmp    %r13,%rax
    0.00 :   57613d:       jl     576118 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x3f8>
    0.00 :   57613f:       mov    %rbx,%rsi
    0.00 :   576142:       mov    %rbx,%rdi
    0.00 :   576145:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   57614a:       movss  0x2c783a(%rip),%xmm3        # 83d98c <typeinfo name for onnxruntime::FastGeluFusion+0x2c>
    0.00 :   576152:       movss  0x2b0c4a(%rip),%xmm2        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   57615a:       xor    %eax,%eax
    0.00 :   57615c:       nopl   0x0(%rax)
    0.00 :   576160:       movss  0x0(%rbp,%rax,4),%xmm0
    0.00 :   576166:       movss  (%rbx,%rax,4),%xmm1
    0.00 :   57616b:       mulss  %xmm3,%xmm0
    0.00 :   57616f:       addss  %xmm2,%xmm1
    0.00 :   576173:       mulss  %xmm1,%xmm0
    0.00 :   576177:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   57617c:       add    $0x1,%rax
    0.00 :   576180:       cmp    %r13,%rax
    0.00 :   576183:       jne    576160 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x440>
    0.00 :   576185:       jmpq   5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   57618a:       nopw   0x0(%rax,%rax,1)
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576190:       mov    %rsi,%rdx
    0.00 :   576193:       shr    $0x20,%rdx
    0.00 :   576197:       jne    5763b0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x690>
    0.00 :   57619d:       shl    $0x2,%rsi
    0.00 :   5761a1:       callq  *%rcx
    0.00 :   5761a3:       mov    %rax,%rsi
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
         :            { }
         :
         :            __shared_ptr(__shared_ptr&& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5761a6:       mov    %r15,0x60(%rsp)
         :            _M_pi = __tmp;
    0.00 :   5761ab:       mov    %r14,0x68(%rsp)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5761b0:       mov    %rax,0x70(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   5761b5:       test   %r14,%r14
    0.00 :   5761b8:       je     5761e3 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x4c3>
         :            if (__gthread_active_p())
    0.00 :   5761ba:       mov    0x6b1d47(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5761c1:       test   %r15,%r15
    0.00 :   5761c4:       je     576688 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x968>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5761ca:       mov    $0xffffffff,%eax
    0.00 :   5761cf:       lock xadd %eax,0x8(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5761d5:       cmp    $0x1,%eax
    0.00 :   5761d8:       je     5767b0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa90>
    0.00 :   5761de:       mov    0x70(%rsp),%rsi
    0.00 :   5761e3:       mov    0x18(%rsp),%rax
    0.00 :   5761e8:       mov    0x30(%rsp),%r9
    0.00 :   5761ed:       lea    0x38(%rsp),%rcx
    0.00 :   5761f2:       lea    0x10(%rsp),%rdi
    0.00 :   5761f7:       mov    0x18(%rbx),%rbx
    0.00 :   5761fb:       mov    %rcx,0xa0(%rsp)
    0.00 :   576203:       lea    0x28(%rsp),%rcx
    0.00 :   576208:       cqto
    0.00 :   57620a:       mov    %rsi,0x38(%rsp)
    0.00 :   57620f:       idiv   %r9
    0.00 :   576212:       mov    %r13,0x88(%rsp)
    0.00 :   57621a:       mov    %rdi,0x90(%rsp)
    0.00 :   576222:       mov    %rcx,0xa8(%rsp)
    0.00 :   57622a:       movq   $0x0,0x48(%rsp)
    0.00 :   576233:       lea    0x30(%rsp),%rdx
    0.00 :   576238:       mov    %rdx,0x80(%rsp)
    0.00 :   576240:       lea    0x20(%rsp),%rdx
    0.00 :   576245:       mov    %rdx,0x98(%rsp)
    0.00 :   57624d:       cltq
    0.00 :   57624f:       mov    %rax,0x40(%rsp)
    0.00 :   576254:       test   %rbx,%rbx
    0.00 :   576257:       je     576728 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa08>
    0.00 :   57625d:       test   %rax,%rax
    0.00 :   576260:       jle    57631d <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5fd>
    0.00 :   576266:       cmp    $0x1,%rax
    0.00 :   57626a:       je     5767fb <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xadb>
    0.00 :   576270:       mov    %rbx,%rdi
    0.00 :   576273:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            if (__b < __a)
    0.00 :   576278:       mov    0x40(%rsp),%rdx
    0.00 :   57627d:       cltq
    0.00 :   57627f:       cmp    %rdx,%rax
    0.00 :   576282:       cmovg  %rdx,%rax
    0.00 :   576286:       mov    %rax,0x48(%rsp)
    0.00 :   57628b:       cmp    $0x1,%rax
    0.00 :   57628f:       jle    5766ae <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x98e>
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   576295:       mov    $0x18,%edi
         :            _Function_base() : _M_manager(nullptr) { }
    0.00 :   57629a:       movq   $0x0,0xe0(%rsp)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   5762a6:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5762ab:       lea    0x48(%rsp),%rdx
    0.00 :   5762b0:       mov    %rbp,0x10(%rax)
    0.00 :   5762b4:       mov    %rbx,%rdi
    0.00 :   5762b7:       lea    0xd0(%rsp),%r13
    0.00 :   5762bf:       mov    %rdx,(%rax)
    0.00 :   5762c2:       lea    0x40(%rsp),%rdx
    0.00 :   5762c7:       mov    0x48(%rsp),%rsi
    0.00 :   5762cc:       mov    %rdx,0x8(%rax)
    0.00 :   5762d0:       mov    %r13,%rdx
    0.00 :   5762d3:       mov    %rax,0xd0(%rsp)
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   5762db:       lea    -0x8f2(%rip),%rax        # 5759f0 <std::_Function_handler<void (long), onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   5762e2:       mov    %rax,0xe8(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   5762ea:       lea    -0xd21(%rip),%rax        # 5755d0 <std::_Function_base::_Base_manager<onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}>::_M_manager(std::_Any_data&, onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1} const&, std::_Manager_operation)>
    0.00 :   5762f1:       mov    %rax,0xe0(%rsp)
    0.00 :   5762f9:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
         :            if (_M_manager)
    0.00 :   5762fe:       mov    0xe0(%rsp),%rax
    0.00 :   576306:       test   %rax,%rax
    0.00 :   576309:       je     576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   57630b:       mov    $0x3,%edx
    0.00 :   576310:       mov    %r13,%rsi
    0.00 :   576313:       mov    %r13,%rdi
    0.00 :   576316:       callq  *%rax
    0.00 :   576318:       mov    0x70(%rsp),%rsi
    0.00 :   57631d:       movq   $0x0,(%r12)
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   576325:       test   %rsi,%rsi
    0.00 :   576328:       je     57633a <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x61a>
    0.00 :   57632a:       mov    0x60(%rsp),%rdi
    0.00 :   57632f:       test   %rdi,%rdi
    0.00 :   576332:       je     57633a <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x61a>
    0.00 :   576334:       mov    (%rdi),%rax
    0.00 :   576337:       callq  *0x18(%rax)
         :            get_deleter()(__ptr);
         :            __ptr = pointer();
    0.00 :   57633a:       movq   $0x0,0x70(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   576343:       mov    0x68(%rsp),%rbx
    0.00 :   576348:       test   %rbx,%rbx
    0.00 :   57634b:       je     575ec7 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1a7>
         :            if (__gthread_active_p())
    0.00 :   576351:       mov    0x6b1bb0(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   576358:       test   %r15,%r15
    0.00 :   57635b:       je     5766a0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x980>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   576361:       mov    $0xffffffff,%eax
    0.00 :   576366:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   57636b:       cmp    $0x1,%eax
    0.00 :   57636e:       jne    575ec7 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1a7>
         :            _M_dispose();
    0.00 :   576374:       mov    (%rbx),%rax
    0.00 :   576377:       mov    %rbx,%rdi
    0.00 :   57637a:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   57637d:       test   %r15,%r15
    0.00 :   576380:       je     5767e0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xac0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   576386:       mov    $0xffffffff,%eax
    0.00 :   57638b:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   576390:       cmp    $0x1,%eax
    0.00 :   576393:       jne    575ec7 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1a7>
         :            _M_destroy();
    0.00 :   576399:       mov    (%rbx),%rax
    0.00 :   57639c:       mov    %rbx,%rdi
    0.00 :   57639f:       callq  *0x18(%rax)
    0.00 :   5763a2:       jmpq   575ec7 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1a7>
    0.00 :   5763a7:       nopw   0x0(%rax,%rax,1)
    0.00 :   5763b0:       mov    %rdx,%rax
    0.00 :   5763b3:       shr    $0x1e,%rax
    0.00 :   5763b7:       jne    576a49 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd29>
    0.00 :   5763bd:       mov    %esi,%eax
    0.00 :   5763bf:       shl    $0x22,%rdx
    0.00 :   5763c3:       lea    0x0(,%rax,4),%rsi
    0.00 :   5763cb:       add    %rdx,%rsi
    0.00 :   5763ce:       jae    5761a1 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x481>
    0.00 :   5763d4:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   5763d9:       nopl   0x0(%rax)
         :            { *__mem += __val; }
    0.00 :   5763e0:       addl   $0x1,0x8(%r14)
    0.00 :   5763e5:       mov    0x50(%rsp),%rdi
    0.00 :   5763ea:       addl   $0x1,0x8(%r14)
    0.00 :   5763ef:       mov    %r14,0x8(%rsp)
    0.00 :   5763f4:       jmpq   575f67 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x247>
    0.00 :   5763f9:       nopl   0x0(%rax)
    0.00 :   576400:       test   %rdx,%rdx
    0.00 :   576403:       jle    5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   576409:       movss  0x313d43(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   576411:       movss  0x2c756b(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   576419:       xor    %r14d,%r14d
    0.00 :   57641c:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576420:       mov    0x88(%rsp),%rax
    0.00 :   576428:       mov    %r14,%rbx
    0.00 :   57642b:       mov    0x80(%rsp),%rdx
    0.00 :   576433:       shl    $0xe,%rbx
    0.00 :   576437:       mov    (%rax),%r13
    0.00 :   57643a:       mov    0x90(%rsp),%rax
    0.00 :   576442:       mov    (%rdx),%rbp
    0.00 :   576445:       add    %rbx,%r13
    0.00 :   576448:       add    (%rax),%rbx
    0.00 :   57644b:       mov    %r14,%rax
    0.00 :   57644e:       shl    $0xc,%rax
    0.00 :   576452:       sub    %rax,%rbp
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576455:       cmp    $0xfff,%rbp
    0.00 :   57645c:       jle    576508 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x7e8>
    0.00 :   576462:       mov    $0x1000,%edx
         :            return __a;
    0.00 :   576467:       mov    $0x1000,%ebp
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   57646c:       xor    %eax,%eax
    0.00 :   57646e:       xchg   %ax,%ax
    0.00 :   576470:       movss  0x0(%r13,%rax,4),%xmm1
    0.00 :   576477:       movaps %xmm1,%xmm0
    0.00 :   57647a:       mulss  %xmm5,%xmm0
    0.00 :   57647e:       mulss  %xmm1,%xmm0
    0.00 :   576482:       addss  %xmm4,%xmm0
    0.00 :   576486:       mulss  %xmm1,%xmm0
    0.00 :   57648a:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   57648f:       add    $0x1,%rax
    0.00 :   576493:       cmp    %rbp,%rax
    0.00 :   576496:       jl     576470 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x750>
    0.00 :   576498:       mov    %rbx,%rsi
    0.00 :   57649b:       mov    %rbx,%rdi
    0.00 :   57649e:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   5764a3:       movss  0x2b08f9(%rip),%xmm2        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   5764ab:       xor    %eax,%eax
    0.00 :   5764ad:       movss  0x2c74d7(%rip),%xmm3        # 83d98c <typeinfo name for onnxruntime::FastGeluFusion+0x2c>
    0.00 :   5764b5:       movss  0x2c74c7(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   5764bd:       movss  0x313c8f(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   5764c5:       nopl   (%rax)
    0.00 :   5764c8:       movss  0x0(%r13,%rax,4),%xmm0
    0.00 :   5764cf:       movss  (%rbx,%rax,4),%xmm1
    0.00 :   5764d4:       mulss  %xmm3,%xmm0
    0.00 :   5764d8:       addss  %xmm2,%xmm1
    0.00 :   5764dc:       mulss  %xmm1,%xmm0
    0.00 :   5764e0:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   5764e5:       add    $0x1,%rax
    0.00 :   5764e9:       cmp    %rbp,%rax
    0.00 :   5764ec:       jne    5764c8 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x7a8>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   5764ee:       add    $0x1,%r14
    0.00 :   5764f2:       cmp    %r14,0x50(%rsp)
    0.00 :   5764f7:       jg     576420 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x700>
    0.00 :   5764fd:       jmpq   5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   576502:       nopw   0x0(%rax,%rax,1)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576508:       mov    %rbp,%rdx
    0.00 :   57650b:       test   %rbp,%rbp
    0.00 :   57650e:       jg     57646c <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x74c>
    0.00 :   576514:       mov    %rbx,%rsi
    0.00 :   576517:       mov    %rbx,%rdi
    0.00 :   57651a:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   57651f:       movss  0x313c2d(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   576527:       movss  0x2c7455(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   57652f:       jmp    5764ee <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x7ce>
    0.00 :   576531:       nopl   0x0(%rax)
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
         :            _Atomic_word __result = *__mem;
    0.00 :   576538:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   57653b:       lea    -0x1(%rax),%edx
    0.00 :   57653e:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   576541:       jmpq   575f14 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1f4>
    0.00 :   576546:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   576550:       xor    %r15d,%r15d
    0.00 :   576553:       test   %rax,%rax
    0.00 :   576556:       jle    5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   57655c:       movss  0x313bf0(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.07 :   576564:       movss  0x2c7418(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   57656c:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576570:       mov    %r15,%rax
    0.00 :   576573:       mov    %r15,%rbx
    0.00 :   576576:       mov    (%rdx),%r14
    0.00 :   576579:       shl    $0xc,%rax
    0.00 :   57657d:       shl    $0xe,%rbx
    0.00 :   576581:       sub    %rax,%r13
    0.00 :   576584:       add    %rbx,%r14
    0.00 :   576587:       add    (%rcx),%rbx
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
         :            if (__b < __a)
    0.00 :   57658a:       cmp    $0xfff,%r13
    0.00 :   576591:       jle    576658 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x938>
    0.00 :   576597:       mov    $0x1000,%edx
         :            return __a;
    0.00 :   57659c:       mov    $0x1000,%r13d
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   5765a2:       xor    %eax,%eax
    0.00 :   5765a4:       nopl   0x0(%rax)
    9.04 :   5765a8:       movss  (%r14,%rax,4),%xmm1
   15.07 :   5765ae:       movaps %xmm1,%xmm0
   10.81 :   5765b1:       mulss  %xmm5,%xmm0
   10.54 :   5765b5:       mulss  %xmm1,%xmm0
   10.61 :   5765b9:       addss  %xmm4,%xmm0
   11.28 :   5765bd:       mulss  %xmm1,%xmm0
   11.02 :   5765c1:       movss  %xmm0,(%rbx,%rax,4)
   11.91 :   5765c6:       add    $0x1,%rax
    9.49 :   5765ca:       cmp    %r13,%rax
    0.00 :   5765cd:       jl     5765a8 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x888>
    0.00 :   5765cf:       mov    %rbx,%rsi
    0.00 :   5765d2:       mov    %rbx,%rdi
    0.00 :   5765d5:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   5765da:       movss  0x2b07c2(%rip),%xmm2        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   5765e2:       xor    %eax,%eax
    0.00 :   5765e4:       movss  0x2c73a0(%rip),%xmm3        # 83d98c <typeinfo name for onnxruntime::FastGeluFusion+0x2c>
    0.00 :   5765ec:       movss  0x2c7390(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   5765f4:       movss  0x313b58(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   5765fc:       nopl   0x0(%rax)
    0.00 :   576600:       movss  (%r14,%rax,4),%xmm0
    0.00 :   576606:       movss  (%rbx,%rax,4),%xmm1
    0.16 :   57660b:       mulss  %xmm3,%xmm0
    0.00 :   57660f:       addss  %xmm2,%xmm1
    0.00 :   576613:       mulss  %xmm1,%xmm0
    0.00 :   576617:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   57661c:       add    $0x1,%rax
    0.00 :   576620:       cmp    %r13,%rax
    0.00 :   576623:       jne    576600 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x8e0>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576625:       add    $0x1,%r15
    0.00 :   576629:       cmp    %r15,0x50(%rsp)
    0.00 :   57662e:       jle    5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   576634:       mov    0x80(%rsp),%rax
    0.00 :   57663c:       mov    0x88(%rsp),%rdx
    0.00 :   576644:       mov    0x90(%rsp),%rcx
    0.00 :   57664c:       mov    (%rax),%r13
    0.00 :   57664f:       jmpq   576570 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x850>
    0.00 :   576654:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576658:       mov    %r13,%rdx
    0.00 :   57665b:       test   %r13,%r13
    0.00 :   57665e:       jg     5765a2 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x882>
    0.00 :   576664:       mov    %rbx,%rsi
    0.00 :   576667:       mov    %rbx,%rdi
    0.00 :   57666a:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   57666f:       movss  0x313add(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   576677:       movss  0x2c7305(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   57667f:       jmp    576625 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x905>
    0.00 :   576681:       nopl   0x0(%rax)
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
         :            _Atomic_word __result = *__mem;
    0.00 :   576688:       mov    0x8(%r14),%eax
         :            *__mem += __val;
    0.00 :   57668c:       lea    -0x1(%rax),%edx
    0.00 :   57668f:       mov    %edx,0x8(%r14)
         :            return __result;
    0.00 :   576693:       jmpq   5761d5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x4b5>
    0.00 :   576698:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5766a0:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5766a3:       lea    -0x1(%rax),%edx
    0.00 :   5766a6:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   5766a9:       jmpq   57636b <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x64b>
    0.00 :   5766ae:       xor    %ebx,%ebx
    0.00 :   5766b0:       test   %rdx,%rdx
    0.00 :   5766b3:       jle    576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
    0.00 :   5766b9:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE0_clEl():
    0.00 :   5766c0:       mov    0x80(%rsp),%rax
    0.00 :   5766c8:       mov    %rbx,%r8
    0.00 :   5766cb:       mov    0x88(%rsp),%rdi
    0.00 :   5766d3:       mov    (%rax),%r9
    0.00 :   5766d6:       mov    0xa0(%rsp),%rax
    0.00 :   5766de:       imul   %r9,%r8
    0.00 :   5766e2:       mov    (%rax),%rcx
    0.00 :   5766e5:       mov    0x90(%rsp),%rax
    0.00 :   5766ed:       mov    (%rax),%rsi
    0.00 :   5766f0:       mov    0x98(%rsp),%rax
    0.00 :   5766f8:       shl    $0x2,%r8
    0.00 :   5766fc:       add    %r8,%rcx
    0.00 :   5766ff:       add    %r8,%rsi
    0.00 :   576702:       add    (%rax),%r8
    0.00 :   576705:       mov    0xa8(%rsp),%rax
    0.00 :   57670d:       mov    (%rax),%rdx
    0.00 :   576710:       callq  575920 <onnxruntime::contrib::BiasGelu<float, true>::AddBiasGelu(float const*, float const*, float*, float*, long) const>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576715:       add    $0x1,%rbx
    0.00 :   576719:       cmp    %rbx,0x40(%rsp)
    0.00 :   57671e:       jg     5766c0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x9a0>
    0.00 :   576720:       jmpq   576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
    0.00 :   576725:       nopl   (%rax)
    0.00 :   576728:       test   %rax,%rax
    0.00 :   57672b:       jle    57631d <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5fd>
    0.00 :   576731:       mov    %rcx,%rax
    0.00 :   576734:       jmp    576776 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa56>
    0.00 :   576736:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   576740:       mov    0x80(%rsp),%rax
    0.00 :   576748:       mov    0x90(%rsp),%rdi
    0.00 :   576750:       mov    0x98(%rsp),%rdx
    0.00 :   576758:       mov    0x88(%rsp),%r13
    0.00 :   576760:       mov    (%rax),%r9
    0.00 :   576763:       mov    0xa0(%rsp),%rax
    0.00 :   57676b:       mov    (%rax),%rsi
    0.00 :   57676e:       mov    0xa8(%rsp),%rax
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE0_clEl():
    0.00 :   576776:       mov    %rbx,%r8
    0.00 :   576779:       imul   %r9,%r8
    0.00 :   57677d:       shl    $0x2,%r8
    0.00 :   576781:       lea    (%rsi,%r8,1),%rcx
    0.00 :   576785:       mov    (%rdi),%rsi
    0.00 :   576788:       mov    %r13,%rdi
    0.00 :   57678b:       add    %r8,%rsi
    0.00 :   57678e:       add    (%rdx),%r8
    0.00 :   576791:       mov    (%rax),%rdx
    0.00 :   576794:       callq  575920 <onnxruntime::contrib::BiasGelu<float, true>::AddBiasGelu(float const*, float const*, float*, float*, long) const>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576799:       add    $0x1,%rbx
    0.00 :   57679d:       cmp    %rbx,0x40(%rsp)
    0.00 :   5767a2:       jg     576740 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa20>
    0.00 :   5767a4:       jmpq   576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
    0.00 :   5767a9:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5767b0:       mov    (%r14),%rax
    0.00 :   5767b3:       mov    %r14,%rdi
    0.00 :   5767b6:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5767b9:       test   %r15,%r15
    0.00 :   5767bc:       je     5767ee <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xace>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5767be:       mov    $0xffffffff,%eax
    0.00 :   5767c3:       lock xadd %eax,0xc(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5767c9:       cmp    $0x1,%eax
    0.00 :   5767cc:       jne    5761de <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x4be>
         :            _M_destroy();
    0.00 :   5767d2:       mov    (%r14),%rax
    0.00 :   5767d5:       mov    %r14,%rdi
    0.00 :   5767d8:       callq  *0x18(%rax)
    0.00 :   5767db:       jmpq   5761de <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x4be>
         :            _Atomic_word __result = *__mem;
    0.00 :   5767e0:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5767e3:       lea    -0x1(%rax),%edx
    0.00 :   5767e6:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5767e9:       jmpq   576390 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x670>
         :            _Atomic_word __result = *__mem;
    0.00 :   5767ee:       mov    0xc(%r14),%eax
         :            *__mem += __val;
    0.00 :   5767f2:       lea    -0x1(%rax),%edx
    0.00 :   5767f5:       mov    %edx,0xc(%r14)
         :            return __result;
    0.00 :   5767f9:       jmp    5767c9 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xaa9>
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE0_clEl():
    0.00 :   5767fb:       mov    %rsi,%rcx
    0.00 :   5767fe:       mov    0x20(%rsp),%r8
    0.00 :   576803:       mov    0x28(%rsp),%rdx
    0.00 :   576808:       mov    %r13,%rdi
    0.00 :   57680b:       mov    0x10(%rsp),%rsi
    0.00 :   576810:       callq  575920 <onnxruntime::contrib::BiasGelu<float, true>::AddBiasGelu(float const*, float const*, float*, float*, long) const>
    0.00 :   576815:       jmpq   576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   57681a:       mov    %r13,%rdx
    0.00 :   57681d:       test   %r13,%r13
    0.00 :   576820:       jg     576103 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x3e3>
    0.00 :   576826:       mov    %rbx,%rsi
    0.00 :   576829:       mov    %rbx,%rdi
    0.00 :   57682c:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   576831:       jmpq   5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576836:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   57683b:       mov    $0xa0,%edi
    0.00 :   576840:       lea    0xb0(%rsp),%rbx
    0.00 :   576848:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   57684d:       mov    %rbx,%rdi
    0.00 :   576850:       lea    0x50(%rsp),%rcx
    0.00 :   576855:       mov    %rbp,%rsi
    0.00 :   576858:       mov    %rax,%r12
    0.00 :   57685b:       lea    0x2aefa9(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   576862:       lea    0x60(%rsp),%rdx
    0.00 :   576867:       mov    %rax,0x50(%rsp)
    0.00 :   57686c:       lea    0x2aef95(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   576873:       lea    0x30(%r14),%r8
    0.00 :   576877:       mov    %rax,0x60(%rsp)
    0.00 :   57687c:       lea    0x2aef6e(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   576883:       mov    %rax,0x80(%rsp)
    0.00 :   57688b:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   576890:       mov    %rbp,%rdi
    0.00 :   576893:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   576898:       lea    0xd0(%rsp),%r13
    0.00 :   5768a0:       mov    %rbp,%r8
    0.00 :   5768a3:       lea    0x313556(%rip),%rcx        # 889e00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   5768aa:       mov    $0x83,%edx
    0.00 :   5768af:       lea    0x2aef5a(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   5768b6:       mov    %r13,%rdi
    0.00 :   5768b9:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5768be:       mov    %rbx,%rcx
    0.00 :   5768c1:       lea    0x2aef88(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   5768c8:       mov    %r13,%rsi
    0.00 :   5768cb:       mov    %r12,%rdi
    0.00 :   5768ce:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5768d3:       mov    %r13,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5768d6:       add    $0x10,%rbx
    0.00 :   5768da:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5768df:       mov    %rbp,%rdi
    0.00 :   5768e2:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5768e7:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5768ef:       cmp    %rbx,%rdi
    0.00 :   5768f2:       je     5768f9 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xbd9>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5768f4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5768f9:       lea    -0x47d1e0(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   576900:       lea    0x69ad29(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   576907:       mov    %r12,%rdi
    0.00 :   57690a:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   57690f:       mov    $0xa0,%edi
    0.00 :   576914:       lea    0xb0(%rsp),%rbx
    0.00 :   57691c:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   576921:       mov    %rbx,%rdi
    0.00 :   576924:       lea    0x50(%rsp),%rcx
    0.00 :   576929:       mov    %rbp,%rsi
    0.00 :   57692c:       mov    %rax,%r12
    0.00 :   57692f:       lea    0x2aeed5(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   576936:       lea    0x60(%rsp),%rdx
    0.00 :   57693b:       mov    %rax,0x50(%rsp)
    0.00 :   576940:       lea    0x2aeec1(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   576947:       lea    0x30(%r14),%r8
    0.00 :   57694b:       mov    %rax,0x60(%rsp)
    0.00 :   576950:       lea    0x2aee9a(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   576957:       mov    %rax,0x80(%rsp)
    0.00 :   57695f:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   576964:       mov    %rbp,%rdi
    0.00 :   576967:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   57696c:       lea    0xd0(%rsp),%r13
    0.00 :   576974:       mov    %rbp,%r8
    0.00 :   576977:       lea    0x313442(%rip),%rcx        # 889dc0 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   57697e:       mov    $0x97,%edx
    0.00 :   576983:       lea    0x2aee86(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   57698a:       mov    %r13,%rdi
    0.00 :   57698d:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   576992:       mov    %rbx,%rcx
    0.00 :   576995:       lea    0x2aeeb4(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   57699c:       mov    %r13,%rsi
    0.00 :   57699f:       mov    %r12,%rdi
    0.00 :   5769a2:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5769a7:       jmpq   5768d3 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xbb3>
    0.00 :   5769ac:       mov    $0xa0,%edi
    0.00 :   5769b1:       lea    0xb0(%rsp),%rbx
    0.00 :   5769b9:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5769be:       mov    %rbx,%rdi
    0.00 :   5769c1:       lea    0x50(%rsp),%rcx
    0.00 :   5769c6:       mov    %rbp,%rsi
    0.00 :   5769c9:       mov    %rax,%r12
    0.00 :   5769cc:       lea    0x2aee38(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   5769d3:       lea    0x60(%rsp),%rdx
    0.00 :   5769d8:       mov    %rax,0x50(%rsp)
    0.00 :   5769dd:       lea    0x2aee24(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   5769e4:       lea    0x30(%r14),%r8
    0.00 :   5769e8:       mov    %rax,0x60(%rsp)
    0.00 :   5769ed:       lea    0x2aedfd(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   5769f4:       mov    %rax,0x80(%rsp)
    0.00 :   5769fc:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   576a01:       mov    %rbp,%rdi
    0.00 :   576a04:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   576a09:       lea    0xd0(%rsp),%r13
    0.00 :   576a11:       mov    %rbp,%r8
    0.00 :   576a14:       lea    0x3133a5(%rip),%rcx        # 889dc0 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   576a1b:       mov    $0x97,%edx
    0.00 :   576a20:       lea    0x2aede9(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   576a27:       mov    %r13,%rdi
    0.00 :   576a2a:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   576a2f:       mov    %rbx,%rcx
    0.00 :   576a32:       lea    0x2aee17(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   576a39:       mov    %r13,%rsi
    0.00 :   576a3c:       mov    %r12,%rdi
    0.00 :   576a3f:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   576a44:       jmpq   5768d3 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xbb3>
    0.00 :   576a49:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   576a4e:       mov    %rax,%rbx
    0.00 :   576a51:       jmp    576a58 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd38>
    0.00 :   576a53:       mov    %rax,%rbx
    0.00 :   576a56:       jmp    576a86 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd66>
         :            if (_M_manager)
    0.00 :   576a58:       mov    0xe0(%rsp),%rax
    0.00 :   576a60:       test   %rax,%rax
    0.00 :   576a63:       jne    576aa2 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd82>
    0.00 :   576a65:       lea    0x60(%rsp),%rdi
    0.00 :   576a6a:       callq  21f320 <std::unique_ptr<void, onnxruntime::BufferDeleter>::~unique_ptr()>
         :            if (_M_pi != nullptr)
    0.00 :   576a6f:       mov    0x58(%rsp),%rdi
    0.00 :   576a74:       test   %rdi,%rdi
    0.00 :   576a77:       je     576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            _M_pi->_M_release();
    0.00 :   576a79:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   576a7e:       mov    %rbx,%rdi
    0.00 :   576a81:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   576a86:       mov    0xe0(%rsp),%rax
    0.00 :   576a8e:       test   %rax,%rax
    0.00 :   576a91:       je     576a65 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd45>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   576a93:       mov    $0x3,%edx
    0.00 :   576a98:       mov    %r13,%rsi
    0.00 :   576a9b:       mov    %r13,%rdi
    0.00 :   576a9e:       callq  *%rax
    0.00 :   576aa0:       jmp    576a65 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd45>
    0.00 :   576aa2:       lea    0xd0(%rsp),%rdi
    0.00 :   576aaa:       mov    $0x3,%edx
    0.00 :   576aaf:       mov    %rdi,%rsi
    0.00 :   576ab2:       callq  *%rax
    0.00 :   576ab4:       jmp    576a65 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd45>
    0.00 :   576ab6:       mov    %rax,%r13
    0.00 :   576ab9:       jmp    576acb <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xdab>
    0.00 :   576abb:       mov    %rax,%r13
    0.00 :   576abe:       jmp    576ad3 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xdb3>
    0.00 :   576ac0:       mov    %r13,%rdi
    0.00 :   576ac3:       mov    %r14,%r13
    0.00 :   576ac6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   576acb:       mov    %rbp,%rdi
    0.00 :   576ace:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   576ad3:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   576adb:       add    $0x10,%rbx
    0.00 :   576adf:       cmp    %rbx,%rdi
    0.00 :   576ae2:       je     576ae9 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xdc9>
    0.00 :   576ae4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   576ae9:       mov    %r12,%rdi
    0.00 :   576aec:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   576af1:       mov    %r13,%rdi
    0.00 :   576af4:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   576af9:       mov    %rax,%rbx
    0.00 :   576afc:       jmp    576b03 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xde3>
    0.00 :   576afe:       mov    %rax,%rbx
    0.00 :   576b01:       jmp    576b1e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xdfe>
         :            if (__ptr != nullptr)
    0.00 :   576b03:       mov    0x80(%rsp),%rdi
    0.00 :   576b0b:       test   %rdi,%rdi
    0.00 :   576b0e:       je     576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
         :            get_deleter()(__ptr);
    0.00 :   576b14:       callq  ab8f4 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.80]>
    0.00 :   576b19:       jmpq   576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
         :            if (_M_pi != nullptr)
    0.00 :   576b1e:       cmpq   $0x0,0x8(%rsp)
    0.00 :   576b24:       je     576b30 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe10>
         :            _M_pi->_M_release();
    0.00 :   576b26:       mov    0x8(%rsp),%rdi
    0.00 :   576b2b:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            if (_M_pi != nullptr)
    0.00 :   576b30:       test   %r14,%r14
    0.00 :   576b33:       je     576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
         :            _M_pi->_M_release();
    0.00 :   576b39:       mov    %r14,%rdi
    0.00 :   576b3c:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   576b41:       jmpq   576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
    0.00 :   576b46:       mov    %rax,%r14
    0.00 :   576b49:       jmpq   576ac0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xda0>
    0.00 :   576b4e:       jmp    576b46 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe26>
    0.00 :   576b50:       jmpq   576ab6 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd96>
    0.00 :   576b55:       jmpq   576abb <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd9b>
    0.00 :   576b5a:       mov    %rax,%rbx
    0.00 :   576b5d:       jmpq   576a65 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd45>
    0.00 :   576b62:       mov    %rax,%rbx
    0.00 :   576b65:       jmp    576b74 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe54>
    0.00 :   576b67:       mov    %rax,%rbx
    0.00 :   576b6a:       jmp    576b97 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe77>
    0.00 :   576b6c:       mov    %rax,%rbx
    0.00 :   576b6f:       jmpq   576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
         :            if (_M_manager)
    0.00 :   576b74:       mov    0xe0(%rsp),%rax
    0.00 :   576b7c:       test   %rax,%rax
    0.00 :   576b7f:       je     576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   576b85:       mov    $0x3,%edx
    0.00 :   576b8a:       mov    %r13,%rsi
    0.00 :   576b8d:       mov    %r13,%rdi
    0.00 :   576b90:       callq  *%rax
    0.00 :   576b92:       jmpq   576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            if (__ptr != nullptr)
    0.00 :   576b97:       mov    0x80(%rsp),%rdi
    0.00 :   576b9f:       test   %rdi,%rdi
    0.00 :   576ba2:       je     576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            get_deleter()(__ptr);
    0.00 :   576ba8:       callq  ab8f4 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.80]>
    0.00 :   576bad:       jmpq   576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
    0.00 :   576bb2:       mov    %rax,%rbx
    0.00 :   576bb5:       jmp    576bb9 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe99>
    0.00 :   576bb7:       jmp    576b46 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe26>
         :            if (_M_manager)
    0.00 :   576bb9:       mov    0xe0(%rsp),%rax
    0.00 :   576bc1:       test   %rax,%rax
    0.00 :   576bc4:       je     576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   576bca:       lea    0xd0(%rsp),%rdi
    0.00 :   576bd2:       mov    $0x3,%edx
    0.00 :   576bd7:       mov    %rdi,%rsi
    0.00 :   576bda:       callq  *%rax
    0.00 :   576bdc:       jmpq   576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
    0.00 :   576be1:       jmpq   576ab6 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd96>
    0.00 :   576be6:       jmpq   576abb <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd9b>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (467 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000028f040 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)>:
         :            _ZN5Eigen8internal26call_dense_assignment_loopINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_IKS4_Li0ES6_EESD_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_():
    0.00 :   28f040:       mov    (%rdi),%r8
    0.00 :   28f043:       mov    (%rsi),%r9
    0.00 :   28f046:       mov    0x18(%rsi),%r10
    0.00 :   28f04a:       mov    0x8(%rdi),%rsi
    0.00 :   28f04e:       test   $0x3,%r8b
    0.00 :   28f052:       jne    28f0f0 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0xb0>
    0.00 :   28f058:       mov    %r8,%rax
    0.00 :   28f05b:       mov    %rsi,%rcx
    0.00 :   28f05e:       shr    $0x2,%rax
    0.00 :   28f062:       neg    %rax
    0.00 :   28f065:       and    $0x3,%eax
    0.00 :   28f068:       cmp    %rsi,%rax
    0.00 :   28f06b:       cmovg  %rsi,%rax
    0.00 :   28f06f:       sub    %rax,%rcx
    0.00 :   28f072:       lea    0x3(%rcx),%rdx
    0.00 :   28f076:       cmovns %rcx,%rdx
    0.00 :   28f07a:       and    $0xfffffffffffffffc,%rdx
    0.00 :   28f07e:       add    %rax,%rdx
    0.00 :   28f081:       test   %rax,%rax
    0.00 :   28f084:       jle    28f0ab <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x6b>
    0.00 :   28f086:       xor    %ecx,%ecx
    0.00 :   28f088:       nopl   0x0(%rax,%rax,1)
    0.00 :   28f090:       movss  (%r10,%rcx,4),%xmm0
    0.00 :   28f096:       addss  (%r9,%rcx,4),%xmm0
    0.00 :   28f09c:       movss  %xmm0,(%r8,%rcx,4)
    0.00 :   28f0a2:       add    $0x1,%rcx
    0.00 :   28f0a6:       cmp    %rax,%rcx
    0.00 :   28f0a9:       jl     28f090 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x50>
    0.00 :   28f0ab:       cmp    %rax,%rdx
    0.00 :   28f0ae:       jle    28f0cb <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x8b>
         :            _mm_add_ps():
         :            /* Perform the respective operation on the four SPFP values in A and B.  */
         :
         :            extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_add_ps (__m128 __A, __m128 __B)
         :            {
         :            return (__m128) ((__v4sf)__A + (__v4sf)__B);
    7.02 :   28f0b0:       movups (%r10,%rax,4),%xmm0
   35.70 :   28f0b5:       movups (%r9,%rax,4),%xmm1
   33.23 :   28f0ba:       addps  %xmm1,%xmm0
         :            _mm_store_ps():
         :
         :            /* Store four SPFP values.  The address must be 16-byte aligned.  */
         :            extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_store_ps (float *__P, __m128 __A)
         :            {
         :            *(__m128 *)__P = __A;
   13.82 :   28f0bd:       movaps %xmm0,(%r8,%rax,4)
         :            _ZN5Eigen8internal26call_dense_assignment_loopINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_IKS4_Li0ES6_EESD_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_():
   10.23 :   28f0c2:       add    $0x4,%rax
    0.00 :   28f0c6:       cmp    %rdx,%rax
    0.00 :   28f0c9:       jl     28f0b0 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x70>
    0.00 :   28f0cb:       cmp    %rdx,%rsi
    0.00 :   28f0ce:       jle    28f108 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0xc8>
    0.00 :   28f0d0:       movss  (%r10,%rdx,4),%xmm0
    0.00 :   28f0d6:       addss  (%r9,%rdx,4),%xmm0
    0.00 :   28f0dc:       movss  %xmm0,(%r8,%rdx,4)
    0.00 :   28f0e2:       add    $0x1,%rdx
    0.00 :   28f0e6:       cmp    %rdx,%rsi
    0.00 :   28f0e9:       jne    28f0d0 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x90>
    0.00 :   28f0eb:       retq
    0.00 :   28f0ec:       nopl   0x0(%rax)
    0.00 :   28f0f0:       test   %rsi,%rsi
    0.00 :   28f0f3:       jle    28f100 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0xc0>
    0.00 :   28f0f5:       mov    %rsi,%rdx
    0.00 :   28f0f8:       mov    %rsi,%rax
    0.00 :   28f0fb:       jmp    28f086 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x46>
    0.00 :   28f0fd:       nopl   (%rax)
    0.00 :   28f100:       retq
    0.00 :   28f101:       nopl   0x0(%rax)
    0.00 :   28f108:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (204 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004e7e90 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.59 :   4e7e90:       push   %r15
    0.00 :   4e7e92:       push   %r14
    0.00 :   4e7e94:       mov    %rdx,%r14
    0.00 :   4e7e97:       push   %r13
    0.00 :   4e7e99:       push   %r12
    0.00 :   4e7e9b:       push   %rbp
    0.00 :   4e7e9c:       push   %rbx
    0.00 :   4e7e9d:       sub    $0x2d8,%rsp
    0.00 :   4e7ea4:       mov    %rdi,0x8(%rsp)
    0.00 :   4e7ea9:       mov    %rdx,%rdi
    0.00 :   4e7eac:       mov    %rsi,(%rsp)
    0.00 :   4e7eb0:       xor    %esi,%esi
    0.00 :   4e7eb2:       mov    %fs:0x28,%rax
    0.00 :   4e7ebb:       mov    %rax,0x2c8(%rsp)
    0.00 :   4e7ec3:       xor    %eax,%eax
    0.00 :   4e7ec5:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   4e7eca:       mov    $0x1,%esi
    0.00 :   4e7ecf:       mov    %r14,%rdi
    0.00 :   4e7ed2:       mov    %rax,%rbp
    0.00 :   4e7ed5:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   4e7eda:       mov    $0x2,%esi
    0.00 :   4e7edf:       mov    %r14,%rdi
    0.00 :   4e7ee2:       mov    %rax,%r15
    0.00 :   4e7ee5:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   4e7eea:       mov    %rax,%r13
    0.00 :   4e7eed:       mov    %rax,0x20(%rsp)
    0.00 :   4e7ef2:       mov    0x30(%rbp),%rax
    0.00 :   4e7ef6:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e7efa:       jne    4e9493 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1603>
    0.00 :   4e7f00:       mov    0x50(%rbp),%rax
    0.00 :   4e7f04:       add    0x0(%rbp),%rax
    0.00 :   4e7f08:       mov    %rax,0x28(%rsp)
    0.00 :   4e7f0d:       mov    0x30(%r15),%rax
    0.41 :   4e7f11:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e7f15:       jne    4e93ab <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x151b>
    0.00 :   4e7f1b:       mov    0x50(%r15),%rax
    0.00 :   4e7f1f:       add    (%r15),%rax
    0.00 :   4e7f22:       mov    %rax,0x30(%rsp)
    0.00 :   4e7f27:       test   %r13,%r13
    0.00 :   4e7f2a:       je     4e7f45 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb5>
    0.00 :   4e7f2c:       mov    0x30(%r13),%rax
    0.00 :   4e7f30:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e7f34:       jne    4e916f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x12df>
    0.00 :   4e7f3a:       mov    0x50(%r13),%rax
    0.00 :   4e7f3e:       add    0x0(%r13),%rax
    0.00 :   4e7f42:       mov    %rax,%r13
    0.00 :   4e7f45:       mov    (%rsp),%rax
    0.00 :   4e7f49:       mov    %r13,0x38(%rsp)
    0.00 :   4e7f4e:       lea    0x18(%rbp),%rbx
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e7f52:       mov    0x20(%rbp),%r13
    0.00 :   4e7f56:       sub    0x18(%rbp),%r13
    0.00 :   4e7f5a:       sar    $0x3,%r13
    0.00 :   4e7f5e:       mov    0x10(%rax),%r12
    0.00 :   4e7f62:       mov    %r13,%rax
    0.00 :   4e7f65:       neg    %rax
    0.00 :   4e7f68:       cmp    %rax,%r12
    0.00 :   4e7f6b:       jl     4e8f76 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x10e6>
    0.00 :   4e7f71:       cmp    %r13,%r12
    0.00 :   4e7f74:       jge    4e8f76 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x10e6>
    0.00 :   4e7f7a:       add    %r12,%r13
    0.00 :   4e7f7d:       test   %r12,%r12
    0.00 :   4e7f80:       mov    %rbx,%rdi
    0.00 :   4e7f83:       cmovs  %r13,%r12
    0.00 :   4e7f87:       mov    %r12,%rsi
    0.00 :   4e7f8a:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   4e7f8f:       mov    %r12,%rsi
    0.00 :   4e7f92:       mov    %rbx,%rdi
    0.00 :   4e7f95:       mov    %rax,0x10(%rsp)
    0.00 :   4e7f9a:       callq  5f2a20 <onnxruntime::TensorShape::SizeFromDimension(unsigned long) const>
    0.00 :   4e7f9f:       xor    %esi,%esi
    0.00 :   4e7fa1:       mov    %rbx,%rdx
    0.00 :   4e7fa4:       mov    %r14,%rdi
    0.00 :   4e7fa7:       mov    %rax,0x40(%rsp)
    0.00 :   4e7fac:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
    0.00 :   4e7fb1:       mov    %rax,%r13
    0.00 :   4e7fb4:       mov    0x30(%rax),%rax
    0.00 :   4e7fb8:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e7fbc:       jne    4e9220 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1390>
    0.00 :   4e7fc2:       mov    0x50(%r13),%rax
    0.00 :   4e7fc6:       mov    0x20(%rbp),%rsi
    0.00 :   4e7fca:       add    0x0(%r13),%rax
    0.00 :   4e7fce:       sub    0x18(%rbp),%rsi
    0.00 :   4e7fd2:       lea    0x80(%rsp),%r13
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e7fda:       movq   $0x0,0x80(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e7fe6:       sar    $0x3,%rsi
    0.00 :   4e7fea:       mov    %r13,%rdi
    0.00 :   4e7fed:       mov    %rax,0x48(%rsp)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e7ff2:       movq   $0x0,0x88(%rsp)
    0.00 :   4e7ffe:       movq   $0x0,0x90(%rsp)
    0.00 :   4e800a:       callq  188ff0 <std::vector<long, std::allocator<long> >::reserve(unsigned long)>
    0.00 :   4e800f:       mov    0x18(%rbp),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e8013:       mov    0x20(%rbp),%rax
    0.00 :   4e8017:       xor    %ebx,%ebx
    0.00 :   4e8019:       lea    0xe0(%rsp),%r15
    0.00 :   4e8021:       sub    %rdx,%rax
    0.00 :   4e8024:       sar    $0x3,%rax
    0.00 :   4e8028:       test   %eax,%eax
    0.00 :   4e802a:       jg     4e8053 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1c3>
    0.00 :   4e802c:       jmp    4e8070 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1e0>
    0.00 :   4e802e:       xchg   %ax,%ax
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   4e8030:       lea    (%rdx,%rbx,8),%rsi
    0.00 :   4e8034:       mov    %r13,%rdi
    0.00 :   4e8037:       callq  4e54f0 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)>
    0.00 :   4e803c:       mov    0x18(%rbp),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e8040:       mov    0x20(%rbp),%rax
    0.00 :   4e8044:       add    $0x1,%rbx
    0.00 :   4e8048:       sub    %rdx,%rax
    0.00 :   4e804b:       sar    $0x3,%rax
    0.00 :   4e804f:       cmp    %ebx,%eax
    0.00 :   4e8051:       jle    4e8070 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1e0>
    0.00 :   4e8053:       cmp    %rbx,%r12
    0.00 :   4e8056:       jg     4e8030 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1a0>
    0.00 :   4e8058:       mov    %r15,%rsi
    0.00 :   4e805b:       mov    %r13,%rdi
    0.00 :   4e805e:       movl   $0x1,0xe0(%rsp)
    0.00 :   4e8069:       callq  4e5610 <void std::vector<long, std::allocator<long> >::emplace_back<int>(int&&)>
    0.00 :   4e806e:       jmp    4e803c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1ac>
    0.00 :   4e8070:       lea    0xe0(%rsp),%rbx
    0.00 :   4e8078:       lea    0x70(%rsp),%rdx
    0.00 :   4e807d:       mov    %r14,%rsi
    0.00 :   4e8080:       movq   $0x0,0x70(%rsp)
    0.00 :   4e8089:       movq   $0x0,0x78(%rsp)
    0.00 :   4e8092:       mov    %rbx,%rdi
    0.00 :   4e8095:       callq  5c7230 <onnxruntime::OpKernelContext::GetTempSpaceAllocator(std::shared_ptr<onnxruntime::IAllocator>*) const>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   4e809a:       mov    0xe0(%rsp),%rbp
    0.00 :   4e80a2:       test   %rbp,%rbp
    0.00 :   4e80a5:       je     4e8180 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x2f0>
    0.00 :   4e80ab:       mov    $0x4a,%r8d
    0.00 :   4e80b1:       lea    0x395a08(%rip),%rcx        # 87dac0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::__FUNCTION__>
    0.00 :   4e80b8:       mov    %rbx,%rsi
    0.00 :   4e80bb:       xor    %edi,%edi
    0.00 :   4e80bd:       lea    0x395644(%rip),%rdx        # 87d708 <typeinfo name for onnxruntime::contrib::Inverse::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}+0x48>
    0.00 :   4e80c4:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   4e80c9:       mov    0xe0(%rsp),%rax
    0.00 :   4e80d1:       mov    0x8(%rsp),%rcx
    0.00 :   4e80d6:       mov    %rax,(%rcx)
         :            // Does not throw if __r._M_get_use_count() == 0, caller must check.
         :            explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);
         :
         :            ~__shared_count() noexcept
         :            {
         :            if (_M_pi != nullptr)
    0.00 :   4e80d9:       mov    0x78(%rsp),%rbx
    0.00 :   4e80de:       test   %rbx,%rbx
    0.00 :   4e80e1:       je     4e8100 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x270>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   4e80e3:       mov    0x73fe1e(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e80ea:       test   %r12,%r12
    0.00 :   4e80ed:       je     4e8140 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x2b0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e80ef:       mov    $0xffffffff,%eax
    0.00 :   4e80f4:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e80f9:       cmp    $0x1,%eax
    0.00 :   4e80fc:       je     4e814e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x2be>
    0.00 :   4e80fe:       xchg   %ax,%ax
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e8100:       mov    0x80(%rsp),%rdi
         :            if (__p)
    0.00 :   4e8108:       test   %rdi,%rdi
    0.00 :   4e810b:       je     4e8112 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x282>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   4e810d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e8112:       mov    0x2c8(%rsp),%rcx
    0.00 :   4e811a:       xor    %fs:0x28,%rcx
    0.00 :   4e8123:       mov    0x8(%rsp),%rax
    0.00 :   4e8128:       jne    4e9544 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16b4>
    0.00 :   4e812e:       add    $0x2d8,%rsp
    0.00 :   4e8135:       pop    %rbx
    0.00 :   4e8136:       pop    %rbp
    0.00 :   4e8137:       pop    %r12
    0.00 :   4e8139:       pop    %r13
    0.00 :   4e813b:       pop    %r14
    0.00 :   4e813d:       pop    %r15
    0.00 :   4e813f:       retq
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8140:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e8143:       lea    -0x1(%rax),%edx
    0.00 :   4e8146:       mov    %edx,0x8(%rbx)
    0.00 :   4e8149:       cmp    $0x1,%eax
    0.00 :   4e814c:       jne    4e8100 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x270>
         :            _M_dispose();
    0.00 :   4e814e:       mov    (%rbx),%rax
    0.00 :   4e8151:       mov    %rbx,%rdi
    0.00 :   4e8154:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8157:       test   %r12,%r12
    0.00 :   4e815a:       je     4e885a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9ca>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8160:       mov    $0xffffffff,%eax
    0.00 :   4e8165:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e816a:       cmp    $0x1,%eax
    0.00 :   4e816d:       jne    4e8100 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x270>
         :            _M_destroy();
    0.00 :   4e816f:       mov    (%rbx),%rax
    0.00 :   4e8172:       mov    %rbx,%rdi
    0.00 :   4e8175:       callq  *0x18(%rax)
    0.00 :   4e8178:       jmp    4e8100 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x270>
    0.00 :   4e817a:       nopw   0x0(%rax,%rax,1)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   4e8180:       mov    0x88(%rsp),%rax
    0.00 :   4e8188:       mov    0x80(%rsp),%rsi
    0.00 :   4e8190:       movq   $0x0,0x50(%rsp)
         :            #if __cplusplus > 201402L
         :            using weak_type = __weak_ptr<_Tp, _Lp>;
         :            #endif
         :
         :            constexpr __shared_ptr() noexcept
         :            : _M_ptr(0), _M_refcount()
    0.00 :   4e8199:       movq   $0x0,0xa0(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   4e81a5:       movq   $0x0,0xa8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e81b1:       mov    %rax,%r12
         :            : _M_head_impl() { }
    0.00 :   4e81b4:       movq   $0x0,0xb0(%rsp)
    0.00 :   4e81c0:       sub    %rsi,%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e81c3:       movq   $0x0,0xe8(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e81cf:       mov    %r12,%rdx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e81d2:       movq   $0x0,0xf0(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e81de:       sar    $0x3,%rdx
    0.00 :   4e81e2:       je     4e8850 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9c0>
         :            if (__n > this->max_size())
    0.00 :   4e81e8:       movabs $0x1fffffffffffffff,%rax
    0.00 :   4e81f2:       cmp    %rax,%rdx
    0.00 :   4e81f5:       ja     4e954e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16be>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4e81fb:       mov    %r12,%rdi
    0.00 :   4e81fe:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4e8203:       mov    %rax,%rcx
    0.00 :   4e8206:       mov    0x88(%rsp),%rax
    0.00 :   4e820e:       mov    0x80(%rsp),%rsi
    0.00 :   4e8216:       mov    %rax,%r13
    0.00 :   4e8219:       sub    %rsi,%r13
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4e821c:       add    %rcx,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4e821f:       mov    %rcx,0xe0(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   4e8227:       mov    %rcx,0xe8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4e822f:       mov    %r12,0xf0(%rsp)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   4e8237:       cmp    %rax,%rsi
    0.00 :   4e823a:       je     4e824a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x3ba>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   4e823c:       mov    %rcx,%rdi
    0.00 :   4e823f:       mov    %r13,%rdx
    0.00 :   4e8242:       callq  53aa0 <memmove@plt>
    0.00 :   4e8247:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   4e824a:       add    %r13,%rcx
    0.00 :   4e824d:       mov    %rbx,%rdx
    0.00 :   4e8250:       mov    $0x1,%esi
    0.00 :   4e8255:       mov    %r14,%rdi
    0.00 :   4e8258:       mov    %rcx,0xe8(%rsp)
    0.00 :   4e8260:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e8265:       mov    0xe0(%rsp),%rdi
    0.00 :   4e826d:       mov    %rax,%r13
         :            if (__p)
    0.00 :   4e8270:       test   %rdi,%rdi
    0.00 :   4e8273:       je     4e827a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x3ea>
         :            ::operator delete(__p);
    0.00 :   4e8275:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e827a:       test   %r13,%r13
    0.00 :   4e827d:       je     4e87b0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x920>
    0.00 :   4e8283:       mov    0x30(%r13),%rax
    0.00 :   4e8287:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e828b:       jne    4e92d1 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1441>
    0.00 :   4e8291:       mov    0x50(%r13),%rax
    0.00 :   4e8295:       add    0x0(%r13),%rax
    0.00 :   4e8299:       mov    %rax,0x50(%rsp)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   4e829e:       mov    0x88(%rsp),%rax
    0.00 :   4e82a6:       mov    0x80(%rsp),%rsi
    0.00 :   4e82ae:       movq   $0x0,0x58(%rsp)
         :            : _M_ptr(0), _M_refcount()
    0.00 :   4e82b7:       movq   $0x0,0xc0(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   4e82c3:       movq   $0x0,0xc8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e82cf:       mov    %rax,%r12
    0.00 :   4e82d2:       movq   $0x0,0xd0(%rsp)
    0.00 :   4e82de:       sub    %rsi,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e82e1:       mov    %r12,%rdx
    0.00 :   4e82e4:       mov    %r12,%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e82e7:       movq   $0x0,0xe0(%rsp)
    0.00 :   4e82f3:       movq   $0x0,0xe8(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e82ff:       sar    $0x3,%rdx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e8303:       movq   $0x0,0xf0(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e830f:       je     4e8345 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x4b5>
         :            if (__n > this->max_size())
    0.00 :   4e8311:       movabs $0x1fffffffffffffff,%rax
    0.00 :   4e831b:       cmp    %rax,%rdx
    0.00 :   4e831e:       ja     4e9549 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16b9>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4e8324:       mov    %r12,%rdi
    0.00 :   4e8327:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4e832c:       mov    %rax,%rbp
    0.00 :   4e832f:       mov    0x88(%rsp),%rax
    0.00 :   4e8337:       mov    0x80(%rsp),%rsi
    0.00 :   4e833f:       mov    %rax,%r13
    0.00 :   4e8342:       sub    %rsi,%r13
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4e8345:       add    %rbp,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4e8348:       mov    %rbp,0xe0(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   4e8350:       mov    %rbp,0xe8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4e8358:       mov    %r12,0xf0(%rsp)
         :            if (_Num)
    0.00 :   4e8360:       cmp    %rax,%rsi
    0.00 :   4e8363:       je     4e8370 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x4e0>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   4e8365:       mov    %r13,%rdx
    0.00 :   4e8368:       mov    %rbp,%rdi
    0.00 :   4e836b:       callq  53aa0 <memmove@plt>
         :            return __result + _Num;
    0.00 :   4e8370:       add    %r13,%rbp
    0.00 :   4e8373:       mov    %rbx,%rdx
    0.00 :   4e8376:       mov    $0x2,%esi
    0.00 :   4e837b:       mov    %r14,%rdi
    0.00 :   4e837e:       mov    %rbp,0xe8(%rsp)
    0.00 :   4e8386:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e838b:       mov    0xe0(%rsp),%rdi
    0.00 :   4e8393:       mov    %rax,%rbp
         :            if (__p)
    0.00 :   4e8396:       test   %rdi,%rdi
    0.00 :   4e8399:       je     4e83a0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x510>
         :            ::operator delete(__p);
    0.00 :   4e839b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e83a0:       test   %rbp,%rbp
    0.00 :   4e83a3:       je     4e8797 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x907>
    0.00 :   4e83a9:       mov    0x30(%rbp),%rax
    0.00 :   4e83ad:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e83b1:       jne    4e9091 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1201>
    0.00 :   4e83b7:       mov    0x50(%rbp),%rax
    0.00 :   4e83bb:       add    0x0(%rbp),%rax
    0.00 :   4e83bf:       mov    %rax,0x58(%rsp)
    0.00 :   4e83c4:       mov    (%rsp),%rax
    0.00 :   4e83c8:       mov    0x18(%r14),%r12
    0.00 :   4e83cc:       lea    0x40(%rsp),%rcx
    0.00 :   4e83d1:       lea    0x28(%rsp),%rdx
    0.00 :   4e83d6:       lea    0x48(%rsp),%rsi
    0.00 :   4e83db:       mov    %rcx,0xe0(%rsp)
    0.00 :   4e83e3:       mov    %rax,0xe8(%rsp)
    0.00 :   4e83eb:       lea    0x20(%rsp),%rax
    0.00 :   4e83f0:       mov    %rax,0xf0(%rsp)
    0.00 :   4e83f8:       lea    0x30(%rsp),%rax
    0.00 :   4e83fd:       mov    %rax,0x108(%rsp)
    0.00 :   4e8405:       lea    0x38(%rsp),%rax
    0.00 :   4e840a:       mov    %rax,0x110(%rsp)
    0.00 :   4e8412:       lea    0x50(%rsp),%rax
    0.00 :   4e8417:       mov    %rax,0x118(%rsp)
    0.00 :   4e841f:       lea    0x58(%rsp),%rax
    0.00 :   4e8424:       mov    %rax,0x120(%rsp)
    0.00 :   4e842c:       movslq 0x10(%rsp),%rax
    0.00 :   4e8431:       mov    %rdx,0xf8(%rsp)
    0.00 :   4e8439:       mov    %rsi,0x100(%rsp)
    0.00 :   4e8441:       mov    %rax,0x60(%rsp)
    0.00 :   4e8446:       movq   $0x0,0x68(%rsp)
    0.00 :   4e844f:       test   %r12,%r12
    0.00 :   4e8452:       je     4e8900 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xa70>
    0.00 :   4e8458:       test   %rax,%rax
    0.00 :   4e845b:       jle    4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
    0.00 :   4e8461:       cmp    $0x1,%rax
    0.00 :   4e8465:       je     4e8cfa <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe6a>
    0.00 :   4e846b:       mov    %r12,%rdi
    0.00 :   4e846e:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            if (__b < __a)
    0.00 :   4e8473:       mov    0x60(%rsp),%rdx
    0.00 :   4e8478:       cltq
    0.00 :   4e847a:       cmp    %rdx,%rax
    0.00 :   4e847d:       cmovg  %rdx,%rax
    0.00 :   4e8481:       mov    %rax,0x68(%rsp)
    0.00 :   4e8486:       cmp    $0x1,%rax
    0.00 :   4e848a:       jle    4e863b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x7ab>
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
         :            { ::new (__functor._M_access()) _Functor(std::move(__f)); }
         :
         :            static void
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   4e8490:       mov    $0x18,%edi
         :            };
         :
         :            _Function_base() : _M_manager(nullptr) { }
    0.00 :   4e8495:       movq   $0x0,0x160(%rsp)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   4e84a1:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4e84a6:       lea    0x68(%rsp),%rdx
    0.00 :   4e84ab:       mov    %rbx,0x10(%rax)
    0.00 :   4e84af:       mov    %r12,%rdi
    0.00 :   4e84b2:       lea    0x150(%rsp),%rbp
    0.00 :   4e84ba:       mov    %rdx,(%rax)
    0.00 :   4e84bd:       lea    0x60(%rsp),%rdx
    0.00 :   4e84c2:       mov    0x68(%rsp),%rsi
    0.00 :   4e84c7:       mov    %rdx,0x8(%rax)
    0.00 :   4e84cb:       mov    %rbp,%rdx
    0.00 :   4e84ce:       mov    %rax,0x150(%rsp)
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   4e84d6:       lea    -0x4bfd(%rip),%rax        # 4e38e0 <std::_Function_handler<void (long), onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   4e84dd:       mov    %rax,0x168(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   4e84e5:       lea    -0x504c(%rip),%rax        # 4e34a0 <std::_Function_base::_Base_manager<onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_manager(std::_Any_data&, onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1} const&, std::_Manager_operation)>
    0.00 :   4e84ec:       mov    %rax,0x160(%rsp)
    0.00 :   4e84f4:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
         :            if (_M_manager)
    0.00 :   4e84f9:       mov    0x160(%rsp),%rax
    0.00 :   4e8501:       test   %rax,%rax
    0.00 :   4e8504:       je     4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   4e8506:       mov    $0x3,%edx
    0.00 :   4e850b:       mov    %rbp,%rsi
    0.00 :   4e850e:       mov    %rbp,%rdi
    0.00 :   4e8511:       callq  *%rax
    0.00 :   4e8513:       mov    0x8(%rsp),%rax
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   4e8518:       mov    0xd0(%rsp),%rsi
    0.00 :   4e8520:       movq   $0x0,(%rax)
    0.00 :   4e8527:       test   %rsi,%rsi
    0.00 :   4e852a:       je     4e853f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x6af>
    0.00 :   4e852c:       mov    0xc0(%rsp),%rdi
    0.00 :   4e8534:       test   %rdi,%rdi
    0.00 :   4e8537:       je     4e853f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x6af>
    0.00 :   4e8539:       mov    (%rdi),%rax
    0.00 :   4e853c:       callq  *0x18(%rax)
         :            if (_M_pi != nullptr)
    0.00 :   4e853f:       mov    0xc8(%rsp),%rbx
         :            get_deleter()(__ptr);
         :            __ptr = pointer();
    0.00 :   4e8547:       movq   $0x0,0xd0(%rsp)
    0.00 :   4e8553:       test   %rbx,%rbx
    0.00 :   4e8556:       je     4e85a8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x718>
         :            if (__gthread_active_p())
    0.00 :   4e8558:       mov    0x73f9a9(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e855f:       test   %r12,%r12
    0.00 :   4e8562:       je     4e8876 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9e6>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8568:       mov    $0xffffffff,%eax
    0.00 :   4e856d:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8572:       cmp    $0x1,%eax
    0.00 :   4e8575:       jne    4e85a8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x718>
         :            _M_dispose();
    0.00 :   4e8577:       mov    (%rbx),%rax
    0.00 :   4e857a:       mov    %rbx,%rdi
    0.00 :   4e857d:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8580:       test   %r12,%r12
    0.00 :   4e8583:       je     4e8c1e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd8e>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8589:       mov    $0xffffffff,%eax
    0.00 :   4e858e:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8593:       cmp    $0x1,%eax
    0.00 :   4e8596:       jne    4e85a8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x718>
         :            _M_destroy();
    0.00 :   4e8598:       mov    (%rbx),%rax
    0.00 :   4e859b:       mov    %rbx,%rdi
    0.00 :   4e859e:       callq  *0x18(%rax)
    0.00 :   4e85a1:       nopl   0x0(%rax)
         :            if (__ptr != nullptr)
    0.00 :   4e85a8:       mov    0xb0(%rsp),%rsi
    0.00 :   4e85b0:       test   %rsi,%rsi
    0.00 :   4e85b3:       je     4e85c8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x738>
    0.00 :   4e85b5:       mov    0xa0(%rsp),%rdi
    0.00 :   4e85bd:       test   %rdi,%rdi
    0.00 :   4e85c0:       je     4e85c8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x738>
    0.00 :   4e85c2:       mov    (%rdi),%rax
    0.00 :   4e85c5:       callq  *0x18(%rax)
         :            if (_M_pi != nullptr)
    0.00 :   4e85c8:       mov    0xa8(%rsp),%rbx
         :            __ptr = pointer();
    0.00 :   4e85d0:       movq   $0x0,0xb0(%rsp)
    0.00 :   4e85dc:       test   %rbx,%rbx
    0.00 :   4e85df:       je     4e80d9 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x249>
         :            if (__gthread_active_p())
    0.00 :   4e85e5:       mov    0x73f91c(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e85ec:       test   %r12,%r12
    0.00 :   4e85ef:       je     4e8868 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9d8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e85f5:       mov    $0xffffffff,%eax
    0.00 :   4e85fa:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e85ff:       cmp    $0x1,%eax
    0.00 :   4e8602:       jne    4e80d9 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x249>
         :            _M_dispose();
    0.00 :   4e8608:       mov    (%rbx),%rax
    0.00 :   4e860b:       mov    %rbx,%rdi
    0.00 :   4e860e:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8611:       test   %r12,%r12
    0.00 :   4e8614:       je     4e8c10 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd80>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e861a:       mov    $0xffffffff,%eax
    0.00 :   4e861f:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8624:       cmp    $0x1,%eax
    0.00 :   4e8627:       jne    4e80d9 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x249>
         :            _M_destroy();
    0.00 :   4e862d:       mov    (%rbx),%rax
    0.00 :   4e8630:       mov    %rbx,%rdi
    0.00 :   4e8633:       callq  *0x18(%rax)
    0.00 :   4e8636:       jmpq   4e80d9 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x249>
    0.00 :   4e863b:       test   %rdx,%rdx
    0.00 :   4e863e:       jle    4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
    0.00 :   4e8644:       mov    0xe0(%rsp),%r9
    0.00 :   4e864c:       movss  0x33e750(%rip),%xmm3        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   4e8654:       xor    %r12d,%r12d
    0.00 :   4e8657:       pxor   %xmm2,%xmm2
    0.00 :   4e865b:       nopl   0x0(%rax,%rax,1)
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8660:       mov    (%r9),%r8
    0.00 :   4e8663:       mov    %r12,%rbx
    0.00 :   4e8666:       mov    0xf8(%rsp),%rax
    0.00 :   4e866e:       pxor   %xmm6,%xmm6
    0.00 :   4e8672:       imul   %r8,%rbx
    0.00 :   4e8676:       mov    (%rax),%rbp
    0.00 :   4e8679:       mov    0x100(%rsp),%rax
    0.00 :   4e8681:       cvtsi2ss %r8,%xmm6
    0.00 :   4e8686:       shl    $0x2,%rbx
    0.00 :   4e868a:       add    %rbx,%rbp
    0.00 :   4e868d:       add    (%rax),%rbx
    0.00 :   4e8690:       mov    0xe8(%rsp),%rax
    0.00 :   4e8698:       movss  0x18(%rax),%xmm0
    0.00 :   4e869d:       test   %r8,%r8
    0.00 :   4e86a0:       jle    4e8884 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9f4>
    0.00 :   4e86a6:       lea    0x0(%rbp,%r8,4),%rdx
    0.00 :   4e86ab:       pxor   %xmm4,%xmm4
    0.00 :   4e86af:       pxor   %xmm5,%xmm5
    0.00 :   4e86b3:       mov    %rbp,%rax
    0.00 :   4e86b6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   4e86c0:       movss  (%rax),%xmm1
    0.00 :   4e86c4:       add    $0x4,%rax
    0.00 :   4e86c8:       addss  %xmm1,%xmm5
    0.00 :   4e86cc:       mulss  %xmm1,%xmm1
    0.00 :   4e86d0:       addss  %xmm1,%xmm4
    0.00 :   4e86d4:       cmp    %rax,%rdx
    0.00 :   4e86d7:       jne    4e86c0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x830>
    0.00 :   4e86d9:       divss  %xmm6,%xmm5
    0.00 :   4e86dd:       divss  %xmm6,%xmm4
    0.00 :   4e86e1:       movaps %xmm5,%xmm1
    0.00 :   4e86e4:       mulss  %xmm5,%xmm1
    0.00 :   4e86e8:       subss  %xmm1,%xmm4
    0.00 :   4e86ec:       addss  %xmm4,%xmm0
    0.00 :   4e86f0:       ucomiss %xmm0,%xmm2
    0.00 :   4e86f3:       sqrtss %xmm0,%xmm1
    0.00 :   4e86f7:       ja     4e88aa <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xa1a>
    0.00 :   4e86fd:       mov    0xf0(%rsp),%rax
    0.00 :   4e8705:       mov    0x110(%rsp),%rdi
    0.00 :   4e870d:       mov    (%rax),%rsi
    0.00 :   4e8710:       mov    0x108(%rsp),%rax
    0.00 :   4e8718:       mov    (%rax),%rcx
    0.00 :   4e871b:       xor    %eax,%eax
    0.00 :   4e871d:       nopl   (%rax)
    0.00 :   4e8720:       movss  0x0(%rbp,%rax,4),%xmm0
    0.00 :   4e8726:       subss  %xmm5,%xmm0
    0.00 :   4e872a:       divss  %xmm1,%xmm0
    0.00 :   4e872e:       mulss  (%rcx,%rax,4),%xmm0
    0.00 :   4e8733:       test   %rsi,%rsi
    0.00 :   4e8736:       je     4e8740 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x8b0>
    0.00 :   4e8738:       mov    (%rdi),%rdx
    0.00 :   4e873b:       addss  (%rdx,%rax,4),%xmm0
    0.00 :   4e8740:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   4e8745:       add    $0x1,%rax
    0.00 :   4e8749:       cmp    %rax,%r8
    0.00 :   4e874c:       jg     4e8720 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x890>
    0.00 :   4e874e:       mov    0x118(%rsp),%rax
    0.00 :   4e8756:       lea    0x0(,%r12,4),%rdx
    0.00 :   4e875e:       mov    (%rax),%rax
    0.00 :   4e8761:       test   %rax,%rax
    0.00 :   4e8764:       je     4e876c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x8dc>
    0.00 :   4e8766:       movss  %xmm5,(%rax,%r12,4)
    0.00 :   4e876c:       movaps %xmm3,%xmm0
    0.00 :   4e876f:       mov    0x120(%rsp),%rax
    0.00 :   4e8777:       add    $0x1,%r12
    0.00 :   4e877b:       divss  %xmm1,%xmm0
    0.00 :   4e877f:       mov    (%rax),%rax
    0.00 :   4e8782:       movss  %xmm0,(%rax,%rdx,1)
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8787:       cmp    %r12,0x60(%rsp)
    0.00 :   4e878c:       jg     4e8660 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x7d0>
    0.00 :   4e8792:       jmpq   4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    0.00 :   4e8797:       mov    0x70(%rsp),%rdi
    0.00 :   4e879c:       cmpq   $0x0,0x10(%rsp)
    0.00 :   4e87a2:       mov    (%rdi),%rax
    0.00 :   4e87a5:       mov    0x10(%rax),%rdx
    0.00 :   4e87a9:       jns    4e87d0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x940>
    0.00 :   4e87ab:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e87b0:       mov    0x70(%rsp),%rdi
    0.00 :   4e87b5:       cmpq   $0x0,0x10(%rsp)
    0.00 :   4e87bb:       mov    (%rdi),%rax
    0.00 :   4e87be:       mov    0x10(%rax),%rdx
    0.40 :   4e87c2:       jns    4e8810 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x980>
    0.00 :   4e87c4:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e87c9:       nopl   0x0(%rax)
    0.00 :   4e87d0:       mov    0x10(%rsp),%rcx
    0.00 :   4e87d5:       mov    %rcx,%rax
    0.00 :   4e87d8:       shr    $0x20,%rax
    0.00 :   4e87dc:       je     4e8b3a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xcaa>
    0.00 :   4e87e2:       mov    %rax,%rcx
    0.00 :   4e87e5:       shr    $0x1e,%rcx
    0.00 :   4e87e9:       jne    4e916a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x12da>
    0.00 :   4e87ef:       mov    0x10(%rsp),%esi
    0.00 :   4e87f3:       shl    $0x22,%rax
    0.00 :   4e87f7:       shl    $0x2,%rsi
    0.00 :   4e87fb:       add    %rsi,%rax
    0.00 :   4e87fe:       mov    %rax,%rsi
    0.00 :   4e8801:       jae    4e8b42 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xcb2>
    0.00 :   4e8807:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e880c:       nopl   0x0(%rax)
    0.00 :   4e8810:       mov    0x10(%rsp),%rcx
    0.00 :   4e8815:       mov    %rcx,%rax
    0.00 :   4e8818:       shr    $0x20,%rax
    0.00 :   4e881c:       je     4e8a63 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xbd3>
    0.00 :   4e8822:       mov    %rax,%rcx
    0.00 :   4e8825:       shr    $0x1e,%rcx
    0.00 :   4e8829:       jne    4e9165 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x12d5>
    0.00 :   4e882f:       mov    0x10(%rsp),%esi
    0.00 :   4e8833:       shl    $0x22,%rax
    0.00 :   4e8837:       shl    $0x2,%rsi
    0.00 :   4e883b:       add    %rsi,%rax
    0.00 :   4e883e:       mov    %rax,%rsi
    0.00 :   4e8841:       jae    4e8a6b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xbdb>
    0.00 :   4e8847:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e884c:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e8850:       mov    %r12,%r13
    0.00 :   4e8853:       xor    %ecx,%ecx
    0.00 :   4e8855:       jmpq   4e821c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x38c>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e885a:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e885d:       lea    -0x1(%rax),%edx
    0.00 :   4e8860:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   4e8863:       jmpq   4e816a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x2da>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8868:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e886b:       lea    -0x1(%rax),%edx
    0.00 :   4e886e:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   4e8871:       jmpq   4e85ff <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x76f>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8876:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e8879:       lea    -0x1(%rax),%edx
    0.00 :   4e887c:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   4e887f:       jmpq   4e8572 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x6e2>
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8884:       movaps %xmm2,%xmm5
    0.00 :   4e8887:       divss  %xmm6,%xmm5
    0.00 :   4e888b:       movaps %xmm5,%xmm1
    0.00 :   4e888e:       movaps %xmm5,%xmm4
    0.00 :   4e8891:       mulss  %xmm5,%xmm1
    0.00 :   4e8895:       subss  %xmm1,%xmm4
    0.00 :   4e8899:       addss  %xmm4,%xmm0
    0.00 :   4e889d:       ucomiss %xmm0,%xmm2
    0.00 :   4e88a0:       sqrtss %xmm0,%xmm1
    0.00 :   4e88a4:       jbe    4e874e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x8be>
    0.00 :   4e88aa:       movss  %xmm3,0x1c(%rsp)
    0.00 :   4e88b0:       movss  %xmm2,0x18(%rsp)
    0.00 :   4e88b6:       movss  %xmm1,0x10(%rsp)
    0.00 :   4e88bc:       movss  %xmm5,(%rsp)
    0.00 :   4e88c1:       callq  53cd0 <sqrtf@plt>
    0.00 :   4e88c6:       movss  (%rsp),%xmm5
    0.00 :   4e88cb:       mov    0xe0(%rsp),%r9
    0.00 :   4e88d3:       movss  0x10(%rsp),%xmm1
    0.00 :   4e88d9:       movss  0x18(%rsp),%xmm2
    0.00 :   4e88df:       mov    (%r9),%r8
    0.00 :   4e88e2:       movss  0x1c(%rsp),%xmm3
    0.00 :   4e88e8:       test   %r8,%r8
    0.00 :   4e88eb:       jg     4e86fd <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x86d>
    0.00 :   4e88f1:       jmpq   4e874e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x8be>
    0.00 :   4e88f6:       nopw   %cs:0x0(%rax,%rax,1)
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8900:       test   %rax,%rax
    0.00 :   4e8903:       jle    4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
    0.00 :   4e8909:       movss  0x33e493(%rip),%xmm3        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   4e8911:       mov    %rdx,%rax
    0.00 :   4e8914:       pxor   %xmm2,%xmm2
    0.00 :   4e8918:       nopl   0x0(%rax,%rax,1)
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8920:       mov    (%rcx),%r8
    0.00 :   4e8923:       mov    (%rax),%rbp
    0.00 :   4e8926:       pxor   %xmm6,%xmm6
    0.00 :   4e892a:       mov    (%rsp),%rax
    0.00 :   4e892e:       mov    %r8,%rbx
    0.00 :   4e8931:       cvtsi2ss %r8,%xmm6
    0.00 :   4e8936:       imul   %r12,%rbx
    0.00 :   4e893a:       movss  0x18(%rax),%xmm0
    0.00 :   4e893f:       shl    $0x2,%rbx
    0.00 :   4e8943:       add    %rbx,%rbp
    0.00 :   4e8946:       add    (%rsi),%rbx
    0.00 :   4e8949:       test   %r8,%r8
    0.00 :   4e894c:       jle    4e8c2c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd9c>
    0.00 :   4e8952:       lea    0x0(%rbp,%r8,4),%rdx
    0.00 :   4e8957:       pxor   %xmm4,%xmm4
    0.00 :   4e895b:       pxor   %xmm5,%xmm5
    0.00 :   4e895f:       mov    %rbp,%rax
    0.00 :   4e8962:       nopw   0x0(%rax,%rax,1)
    0.00 :   4e8968:       movss  (%rax),%xmm1
    0.00 :   4e896c:       add    $0x4,%rax
    0.00 :   4e8970:       addss  %xmm1,%xmm5
    8.30 :   4e8974:       mulss  %xmm1,%xmm1
    0.00 :   4e8978:       addss  %xmm1,%xmm4
   36.33 :   4e897c:       cmp    %rax,%rdx
    0.00 :   4e897f:       jne    4e8968 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xad8>
    0.00 :   4e8981:       divss  %xmm6,%xmm5
    0.00 :   4e8985:       divss  %xmm6,%xmm4
    0.00 :   4e8989:       movaps %xmm5,%xmm1
    0.00 :   4e898c:       mulss  %xmm5,%xmm1
    0.00 :   4e8990:       subss  %xmm1,%xmm4
    0.00 :   4e8994:       addss  %xmm4,%xmm0
    0.00 :   4e8998:       ucomiss %xmm0,%xmm2
    0.00 :   4e899b:       sqrtss %xmm0,%xmm1
    0.00 :   4e899f:       ja     4e8c52 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xdc2>
    0.00 :   4e89a5:       mov    0xf0(%rsp),%rax
    0.00 :   4e89ad:       mov    0x110(%rsp),%rdi
    0.00 :   4e89b5:       mov    (%rax),%rsi
    0.00 :   4e89b8:       mov    0x108(%rsp),%rax
    0.00 :   4e89c0:       mov    (%rax),%rcx
    0.00 :   4e89c3:       xor    %eax,%eax
    0.00 :   4e89c5:       nopl   (%rax)
    0.85 :   4e89c8:       movss  0x0(%rbp,%rax,4),%xmm0
    0.00 :   4e89ce:       subss  %xmm5,%xmm0
    8.45 :   4e89d2:       divss  %xmm1,%xmm0
    0.40 :   4e89d6:       mulss  (%rcx,%rax,4),%xmm0
    5.43 :   4e89db:       test   %rsi,%rsi
    0.00 :   4e89de:       je     4e89e8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb58>
    0.00 :   4e89e0:       mov    (%rdi),%rdx
    9.41 :   4e89e3:       addss  (%rdx,%rax,4),%xmm0
   14.47 :   4e89e8:       movss  %xmm0,(%rbx,%rax,4)
   11.62 :   4e89ed:       add    $0x1,%rax
    0.00 :   4e89f1:       cmp    %r8,%rax
    0.00 :   4e89f4:       jl     4e89c8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb38>
    0.00 :   4e89f6:       mov    0x118(%rsp),%rax
    0.00 :   4e89fe:       lea    0x0(,%r12,4),%rdx
    0.00 :   4e8a06:       mov    (%rax),%rax
    1.11 :   4e8a09:       test   %rax,%rax
    0.00 :   4e8a0c:       je     4e8a14 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb84>
    0.64 :   4e8a0e:       movss  %xmm5,(%rax,%r12,4)
    0.58 :   4e8a14:       movaps %xmm3,%xmm0
    0.00 :   4e8a17:       mov    0x120(%rsp),%rax
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8a1f:       add    $0x1,%r12
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8a23:       divss  %xmm1,%xmm0
    0.00 :   4e8a27:       mov    (%rax),%rax
    0.00 :   4e8a2a:       movss  %xmm0,(%rax,%rdx,1)
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.58 :   4e8a2f:       cmp    %r12,0x60(%rsp)
    0.00 :   4e8a34:       jle    4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
    0.00 :   4e8a3a:       mov    0xe8(%rsp),%rax
    0.00 :   4e8a42:       mov    0xe0(%rsp),%rcx
    0.00 :   4e8a4a:       mov    0x100(%rsp),%rsi
    0.41 :   4e8a52:       mov    %rax,(%rsp)
    0.00 :   4e8a56:       mov    0xf8(%rsp),%rax
    0.00 :   4e8a5e:       jmpq   4e8920 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xa90>
    0.00 :   4e8a63:       lea    0x0(,%rcx,4),%rsi
    0.00 :   4e8a6b:       callq  *%rdx
         :            : _M_pi(__r._M_pi)
    0.00 :   4e8a6d:       mov    0x78(%rsp),%r13
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   4e8a72:       mov    0x70(%rsp),%r12
         :            if (_M_pi != 0)
    0.00 :   4e8a77:       test   %r13,%r13
    0.00 :   4e8a7a:       je     4e8a96 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc06>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   4e8a7c:       cmpq   $0x0,0x73f484(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   4e8a84:       lea    0x8(%r13),%rdx
    0.00 :   4e8a88:       je     4e8cad <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe1d>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8a8e:       lock addl $0x1,(%rdx)
    0.00 :   4e8a92:       lock addl $0x1,(%rdx)
         :            #endif
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   4e8a96:       mov    0xb0(%rsp),%rsi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   4e8a9e:       mov    %rax,0xb0(%rsp)
         :            void
         :            reset(pointer __p = pointer()) noexcept
         :            {
         :            using std::swap;
         :            swap(_M_t._M_ptr(), __p);
         :            if (__p != pointer())
    0.00 :   4e8aa6:       test   %rsi,%rsi
    0.00 :   4e8aa9:       je     4e8abe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc2e>
    0.00 :   4e8aab:       mov    0xa0(%rsp),%rdi
    0.00 :   4e8ab3:       test   %rdi,%rdi
    0.00 :   4e8ab6:       je     4e8abe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc2e>
    0.00 :   4e8ab8:       mov    (%rdi),%rax
    0.00 :   4e8abb:       callq  *0x18(%rax)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   4e8abe:       mov    0xa8(%rsp),%r15
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   4e8ac6:       mov    %r12,0xa0(%rsp)
         :            __r._M_pi = _M_pi;
    0.00 :   4e8ace:       mov    %r13,0xa8(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   4e8ad6:       test   %r15,%r15
    0.00 :   4e8ad9:       je     4e8aff <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc6f>
         :            if (__gthread_active_p())
    0.00 :   4e8adb:       mov    0x73f426(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e8ae2:       test   %r12,%r12
    0.00 :   4e8ae5:       je     4e8cbc <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe2c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8aeb:       mov    $0xffffffff,%eax
    0.00 :   4e8af0:       lock xadd %eax,0x8(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8af6:       cmp    $0x1,%eax
    0.00 :   4e8af9:       je     4e8e6d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xfdd>
         :            if (_M_pi != nullptr)
    0.00 :   4e8aff:       test   %r13,%r13
    0.00 :   4e8b02:       je     4e8b28 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc98>
         :            if (__gthread_active_p())
    0.00 :   4e8b04:       mov    0x73f3fd(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e8b0b:       test   %r12,%r12
    0.00 :   4e8b0e:       je     4e8ccc <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe3c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8b14:       mov    $0xffffffff,%eax
    0.00 :   4e8b19:       lock xadd %eax,0x8(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8b1f:       cmp    $0x1,%eax
    0.00 :   4e8b22:       je     4e8e37 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xfa7>
    0.00 :   4e8b28:       mov    0xb0(%rsp),%rax
    0.00 :   4e8b30:       mov    %rax,0x50(%rsp)
    0.00 :   4e8b35:       jmpq   4e829e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x40e>
    0.00 :   4e8b3a:       lea    0x0(,%rcx,4),%rsi
    0.00 :   4e8b42:       callq  *%rdx
         :            : _M_pi(__r._M_pi)
    0.00 :   4e8b44:       mov    0x78(%rsp),%rbp
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   4e8b49:       mov    0x70(%rsp),%r12
         :            if (_M_pi != 0)
    0.00 :   4e8b4e:       test   %rbp,%rbp
    0.00 :   4e8b51:       je     4e8b6d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xcdd>
         :            if (__gthread_active_p())
    0.00 :   4e8b53:       cmpq   $0x0,0x73f3ad(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   4e8b5b:       lea    0x8(%rbp),%rdx
    0.00 :   4e8b5f:       je     4e8ca0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe10>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8b65:       lock addl $0x1,(%rdx)
    0.00 :   4e8b69:       lock addl $0x1,(%rdx)
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   4e8b6d:       mov    0xd0(%rsp),%rsi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   4e8b75:       mov    %rax,0xd0(%rsp)
    0.00 :   4e8b7d:       test   %rsi,%rsi
    0.00 :   4e8b80:       je     4e8b95 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd05>
    0.00 :   4e8b82:       mov    0xc0(%rsp),%rdi
    0.00 :   4e8b8a:       test   %rdi,%rdi
    0.00 :   4e8b8d:       je     4e8b95 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd05>
    0.00 :   4e8b8f:       mov    (%rdi),%rax
    0.00 :   4e8b92:       callq  *0x18(%rax)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   4e8b95:       mov    0xc8(%rsp),%r13
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   4e8b9d:       mov    %r12,0xc0(%rsp)
         :            __r._M_pi = _M_pi;
    0.00 :   4e8ba5:       mov    %rbp,0xc8(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   4e8bad:       test   %r13,%r13
    0.00 :   4e8bb0:       je     4e8bd6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd46>
         :            if (__gthread_active_p())
    0.00 :   4e8bb2:       mov    0x73f34f(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e8bb9:       test   %r12,%r12
    0.00 :   4e8bbc:       je     4e8cdc <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe4c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8bc2:       mov    $0xffffffff,%eax
    0.00 :   4e8bc7:       lock xadd %eax,0x8(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8bcd:       cmp    $0x1,%eax
    0.00 :   4e8bd0:       je     4e8e9d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x100d>
         :            if (_M_pi != nullptr)
    0.00 :   4e8bd6:       test   %rbp,%rbp
    0.00 :   4e8bd9:       je     4e8bfe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd6e>
         :            if (__gthread_active_p())
    0.00 :   4e8bdb:       mov    0x73f326(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e8be2:       test   %r12,%r12
    0.00 :   4e8be5:       je     4e8cec <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe5c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8beb:       mov    $0xffffffff,%eax
    0.00 :   4e8bf0:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8bf5:       cmp    $0x1,%eax
    0.00 :   4e8bf8:       je     4e8e02 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf72>
    0.00 :   4e8bfe:       mov    0xd0(%rsp),%rax
    0.00 :   4e8c06:       mov    %rax,0x58(%rsp)
    0.00 :   4e8c0b:       jmpq   4e83c4 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x534>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8c10:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e8c13:       lea    -0x1(%rax),%edx
    0.00 :   4e8c16:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   4e8c19:       jmpq   4e8624 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x794>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8c1e:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e8c21:       lea    -0x1(%rax),%edx
    0.00 :   4e8c24:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   4e8c27:       jmpq   4e8593 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x703>
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8c2c:       movaps %xmm2,%xmm5
    0.00 :   4e8c2f:       divss  %xmm6,%xmm5
    0.00 :   4e8c33:       movaps %xmm5,%xmm1
    0.00 :   4e8c36:       movaps %xmm5,%xmm4
    0.00 :   4e8c39:       mulss  %xmm5,%xmm1
    0.00 :   4e8c3d:       subss  %xmm1,%xmm4
    0.00 :   4e8c41:       addss  %xmm4,%xmm0
    0.00 :   4e8c45:       ucomiss %xmm0,%xmm2
    0.00 :   4e8c48:       sqrtss %xmm0,%xmm1
    0.00 :   4e8c4c:       jbe    4e89f6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb66>
    0.00 :   4e8c52:       movss  %xmm3,0x1c(%rsp)
    0.00 :   4e8c58:       movss  %xmm2,0x18(%rsp)
    0.00 :   4e8c5e:       movss  %xmm1,0x10(%rsp)
    0.00 :   4e8c64:       movss  %xmm5,(%rsp)
    0.00 :   4e8c69:       callq  53cd0 <sqrtf@plt>
    0.00 :   4e8c6e:       movss  (%rsp),%xmm5
    0.00 :   4e8c73:       mov    0xe0(%rsp),%rax
    0.00 :   4e8c7b:       movss  0x10(%rsp),%xmm1
    0.00 :   4e8c81:       movss  0x18(%rsp),%xmm2
    0.00 :   4e8c87:       mov    (%rax),%r8
    0.00 :   4e8c8a:       movss  0x1c(%rsp),%xmm3
    0.00 :   4e8c90:       test   %r8,%r8
    0.00 :   4e8c93:       jg     4e89a5 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb15>
    0.00 :   4e8c99:       jmpq   4e89f6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb66>
    0.00 :   4e8c9e:       xchg   %ax,%ax
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
         :            { *__mem += __val; }
    0.00 :   4e8ca0:       addl   $0x1,0x8(%rbp)
    0.00 :   4e8ca4:       addl   $0x1,0x8(%rbp)
    0.00 :   4e8ca8:       jmpq   4e8b6d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xcdd>
    0.00 :   4e8cad:       addl   $0x1,0x8(%r13)
    0.00 :   4e8cb2:       addl   $0x1,0x8(%r13)
    0.00 :   4e8cb7:       jmpq   4e8a96 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc06>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8cbc:       mov    0x8(%r15),%eax
         :            *__mem += __val;
    0.00 :   4e8cc0:       lea    -0x1(%rax),%edx
    0.00 :   4e8cc3:       mov    %edx,0x8(%r15)
         :            return __result;
    0.00 :   4e8cc7:       jmpq   4e8af6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc66>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8ccc:       mov    0x8(%r13),%eax
         :            *__mem += __val;
    0.00 :   4e8cd0:       lea    -0x1(%rax),%edx
    0.00 :   4e8cd3:       mov    %edx,0x8(%r13)
         :            return __result;
    0.00 :   4e8cd7:       jmpq   4e8b1f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc8f>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8cdc:       mov    0x8(%r13),%eax
         :            *__mem += __val;
    0.00 :   4e8ce0:       lea    -0x1(%rax),%edx
    0.00 :   4e8ce3:       mov    %edx,0x8(%r13)
         :            return __result;
    0.00 :   4e8ce7:       jmpq   4e8bcd <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd3d>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8cec:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   4e8cef:       lea    -0x1(%rax),%edx
    0.00 :   4e8cf2:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   4e8cf5:       jmpq   4e8bf5 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd65>
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8cfa:       mov    0x40(%rsp),%rdx
    0.00 :   4e8cff:       mov    0x28(%rsp),%rbx
    0.00 :   4e8d04:       mov    0x48(%rsp),%rbp
    0.00 :   4e8d09:       test   %rdx,%rdx
    0.00 :   4e8d0c:       jle    4e8f07 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1077>
    0.00 :   4e8d12:       lea    (%rbx,%rdx,4),%rcx
    0.00 :   4e8d16:       pxor   %xmm2,%xmm2
    0.00 :   4e8d1a:       pxor   %xmm1,%xmm1
    0.00 :   4e8d1e:       mov    %rbx,%rax
    0.00 :   4e8d21:       pxor   %xmm3,%xmm3
    0.00 :   4e8d25:       nopl   (%rax)
    0.00 :   4e8d28:       movss  (%rax),%xmm0
    0.00 :   4e8d2c:       add    $0x4,%rax
    0.00 :   4e8d30:       addss  %xmm0,%xmm3
    0.00 :   4e8d34:       mulss  %xmm0,%xmm0
    0.00 :   4e8d38:       addss  %xmm0,%xmm1
    0.00 :   4e8d3c:       cmp    %rax,%rcx
    0.00 :   4e8d3f:       jne    4e8d28 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe98>
    0.00 :   4e8d41:       pxor   %xmm0,%xmm0
    0.00 :   4e8d45:       mov    (%rsp),%rax
    0.00 :   4e8d49:       cvtsi2ss %rdx,%xmm0
    0.00 :   4e8d4e:       divss  %xmm0,%xmm3
    0.00 :   4e8d52:       divss  %xmm0,%xmm1
    0.00 :   4e8d56:       movaps %xmm1,%xmm0
    0.00 :   4e8d59:       movaps %xmm3,%xmm1
    0.00 :   4e8d5c:       mulss  %xmm3,%xmm1
    0.00 :   4e8d60:       subss  %xmm1,%xmm0
    0.00 :   4e8d64:       addss  0x18(%rax),%xmm0
    0.00 :   4e8d69:       ucomiss %xmm0,%xmm2
    0.00 :   4e8d6c:       sqrtss %xmm0,%xmm1
    0.00 :   4e8d70:       ja     4e8f42 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x10b2>
    0.00 :   4e8d76:       mov    0xf0(%rsp),%rax
    0.00 :   4e8d7e:       mov    0x110(%rsp),%r8
    0.00 :   4e8d86:       shl    $0x2,%rdx
    0.00 :   4e8d8a:       mov    (%rax),%rdi
    0.00 :   4e8d8d:       mov    0x108(%rsp),%rax
    0.00 :   4e8d95:       mov    (%rax),%rsi
    0.00 :   4e8d98:       xor    %eax,%eax
    0.00 :   4e8d9a:       nopw   0x0(%rax,%rax,1)
    0.00 :   4e8da0:       movss  (%rbx,%rax,1),%xmm0
    0.00 :   4e8da5:       subss  %xmm3,%xmm0
    0.00 :   4e8da9:       divss  %xmm1,%xmm0
    0.00 :   4e8dad:       mulss  (%rsi,%rax,1),%xmm0
    0.00 :   4e8db2:       test   %rdi,%rdi
    0.00 :   4e8db5:       je     4e8dbf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf2f>
    0.00 :   4e8db7:       mov    (%r8),%rcx
    0.00 :   4e8dba:       addss  (%rcx,%rax,1),%xmm0
    0.00 :   4e8dbf:       movss  %xmm0,0x0(%rbp,%rax,1)
    0.00 :   4e8dc5:       add    $0x4,%rax
    0.00 :   4e8dc9:       cmp    %rax,%rdx
    0.00 :   4e8dcc:       jne    4e8da0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf10>
    0.00 :   4e8dce:       mov    0x118(%rsp),%rax
    0.00 :   4e8dd6:       mov    (%rax),%rax
    0.00 :   4e8dd9:       test   %rax,%rax
    0.00 :   4e8ddc:       je     4e8de2 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf52>
    0.00 :   4e8dde:       movss  %xmm3,(%rax)
    0.00 :   4e8de2:       movss  0x33dfba(%rip),%xmm0        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   4e8dea:       mov    0x120(%rsp),%rax
    0.00 :   4e8df2:       divss  %xmm1,%xmm0
    0.00 :   4e8df6:       mov    (%rax),%rax
    0.00 :   4e8df9:       movss  %xmm0,(%rax)
    0.00 :   4e8dfd:       jmpq   4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
         :            _M_dispose();
    0.00 :   4e8e02:       mov    0x0(%rbp),%rax
    0.00 :   4e8e06:       mov    %rbp,%rdi
    0.00 :   4e8e09:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8e0c:       test   %r12,%r12
    0.00 :   4e8e0f:       je     4e8edf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x104f>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8e15:       mov    $0xffffffff,%eax
    0.00 :   4e8e1a:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8e1f:       cmp    $0x1,%eax
    0.00 :   4e8e22:       jne    4e8bfe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd6e>
         :            _M_destroy();
    0.00 :   4e8e28:       mov    0x0(%rbp),%rax
    0.00 :   4e8e2c:       mov    %rbp,%rdi
    0.00 :   4e8e2f:       callq  *0x18(%rax)
    0.00 :   4e8e32:       jmpq   4e8bfe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd6e>
         :            _M_dispose();
    0.00 :   4e8e37:       mov    0x0(%r13),%rax
    0.00 :   4e8e3b:       mov    %r13,%rdi
    0.00 :   4e8e3e:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8e41:       test   %r12,%r12
    0.00 :   4e8e44:       je     4e8ecf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x103f>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8e4a:       mov    $0xffffffff,%eax
    0.00 :   4e8e4f:       lock xadd %eax,0xc(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8e55:       cmp    $0x1,%eax
    0.00 :   4e8e58:       jne    4e8b28 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc98>
         :            _M_destroy();
    0.00 :   4e8e5e:       mov    0x0(%r13),%rax
    0.00 :   4e8e62:       mov    %r13,%rdi
    0.00 :   4e8e65:       callq  *0x18(%rax)
    0.00 :   4e8e68:       jmpq   4e8b28 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc98>
         :            _M_dispose();
    0.00 :   4e8e6d:       mov    (%r15),%rax
    0.00 :   4e8e70:       mov    %r15,%rdi
    0.00 :   4e8e73:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8e76:       test   %r12,%r12
    0.00 :   4e8e79:       je     4e8eed <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x105d>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8e7b:       mov    $0xffffffff,%eax
    0.00 :   4e8e80:       lock xadd %eax,0xc(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8e86:       cmp    $0x1,%eax
    0.00 :   4e8e89:       jne    4e8aff <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc6f>
         :            _M_destroy();
    0.00 :   4e8e8f:       mov    (%r15),%rax
    0.00 :   4e8e92:       mov    %r15,%rdi
    0.00 :   4e8e95:       callq  *0x18(%rax)
    0.00 :   4e8e98:       jmpq   4e8aff <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc6f>
         :            _M_dispose();
    0.00 :   4e8e9d:       mov    0x0(%r13),%rax
    0.00 :   4e8ea1:       mov    %r13,%rdi
    0.00 :   4e8ea4:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8ea7:       test   %r12,%r12
    0.00 :   4e8eaa:       je     4e8efa <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x106a>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8eac:       mov    $0xffffffff,%eax
    0.00 :   4e8eb1:       lock xadd %eax,0xc(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8eb7:       cmp    $0x1,%eax
    0.00 :   4e8eba:       jne    4e8bd6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd46>
         :            _M_destroy();
    0.00 :   4e8ec0:       mov    0x0(%r13),%rax
    0.00 :   4e8ec4:       mov    %r13,%rdi
    0.00 :   4e8ec7:       callq  *0x18(%rax)
    0.00 :   4e8eca:       jmpq   4e8bd6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd46>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8ecf:       mov    0xc(%r13),%eax
         :            *__mem += __val;
    0.00 :   4e8ed3:       lea    -0x1(%rax),%edx
    0.00 :   4e8ed6:       mov    %edx,0xc(%r13)
         :            return __result;
    0.00 :   4e8eda:       jmpq   4e8e55 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xfc5>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8edf:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   4e8ee2:       lea    -0x1(%rax),%edx
    0.00 :   4e8ee5:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   4e8ee8:       jmpq   4e8e1f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf8f>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8eed:       mov    0xc(%r15),%eax
         :            *__mem += __val;
    0.00 :   4e8ef1:       lea    -0x1(%rax),%edx
    0.00 :   4e8ef4:       mov    %edx,0xc(%r15)
         :            return __result;
    0.00 :   4e8ef8:       jmp    4e8e86 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xff6>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8efa:       mov    0xc(%r13),%eax
         :            *__mem += __val;
    0.00 :   4e8efe:       lea    -0x1(%rax),%edx
    0.00 :   4e8f01:       mov    %edx,0xc(%r13)
         :            return __result;
    0.00 :   4e8f05:       jmp    4e8eb7 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1027>
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8f07:       pxor   %xmm0,%xmm0
    0.00 :   4e8f0b:       pxor   %xmm2,%xmm2
    0.00 :   4e8f0f:       mov    (%rsp),%rax
    0.00 :   4e8f13:       cvtsi2ss %rdx,%xmm0
    0.00 :   4e8f18:       movaps %xmm2,%xmm3
    0.00 :   4e8f1b:       divss  %xmm0,%xmm3
    0.00 :   4e8f1f:       movaps %xmm3,%xmm0
    0.00 :   4e8f22:       movaps %xmm3,%xmm7
    0.00 :   4e8f25:       mulss  %xmm3,%xmm0
    0.00 :   4e8f29:       subss  %xmm0,%xmm7
    0.00 :   4e8f2d:       movaps %xmm7,%xmm0
    0.00 :   4e8f30:       addss  0x18(%rax),%xmm0
    0.00 :   4e8f35:       ucomiss %xmm0,%xmm2
    0.00 :   4e8f38:       sqrtss %xmm0,%xmm1
    0.00 :   4e8f3c:       jbe    4e8dce <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf3e>
    0.00 :   4e8f42:       movss  %xmm1,0x10(%rsp)
    0.00 :   4e8f48:       movss  %xmm3,(%rsp)
    0.00 :   4e8f4d:       callq  53cd0 <sqrtf@plt>
    0.00 :   4e8f52:       movss  (%rsp),%xmm3
    0.00 :   4e8f57:       mov    0xe0(%rsp),%rax
    0.00 :   4e8f5f:       movss  0x10(%rsp),%xmm1
    0.00 :   4e8f65:       mov    (%rax),%rdx
    0.00 :   4e8f68:       test   %rdx,%rdx
    0.00 :   4e8f6b:       jg     4e8d76 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xee6>
    0.00 :   4e8f71:       jmpq   4e8dce <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf3e>
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8f76:       lea    0x150(%rsp),%rbp
    0.00 :   4e8f7e:       mov    $0xa0,%edi
    0.00 :   4e8f83:       lea    0xe0(%rsp),%rbx
    0.00 :   4e8f8b:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e8f90:       mov    $0x10,%esi
    0.00 :   4e8f95:       mov    %rbp,%rdi
    0.00 :   4e8f98:       mov    %rax,%r14
    0.00 :   4e8f9b:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   4e8fa0:       lea    0x351a59(%rip),%rsi        # 83aa00 <typeinfo name for onnxruntime::BiasGeluFusion+0x20>
    0.00 :   4e8fa7:       mov    %rbp,%rdi
    0.00 :   4e8faa:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            *  These functions use the stream's current locale (specifically, the
         :            *  @c num_get facet) to perform numeric formatting.
         :            */
         :            __ostream_type&
         :            operator<<(long __n)
         :            { return _M_insert(__n); }
    0.00 :   4e8faf:       mov    %r12,%rsi
    0.00 :   4e8fb2:       mov    %rbp,%rdi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   4e8fb5:       lea    0x130(%rsp),%r12
    0.00 :   4e8fbd:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   4e8fc2:       lea    0x351a3d(%rip),%rsi        # 83aa06 <typeinfo name for onnxruntime::BiasGeluFusion+0x26>
    0.00 :   4e8fc9:       mov    %rbp,%rdi
    0.00 :   4e8fcc:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   4e8fd1:       mov    %r13,%rsi
    0.00 :   4e8fd4:       mov    %rbp,%rdi
    0.00 :   4e8fd7:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   4e8fdc:       lea    0x3bd4f6(%rip),%rsi        # 8a64d9 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0xbd>
    0.00 :   4e8fe3:       mov    %rbp,%rdi
    0.00 :   4e8fe6:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   4e8feb:       lea    -0x1(%r13),%rsi
    0.00 :   4e8fef:       mov    %rbp,%rdi
    0.00 :   4e8ff2:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   4e8ff7:       lea    0x3dee2b(%rip),%rsi        # 8c7e29 <typeinfo name for re2::NumCapturesWalker+0x79>
    0.00 :   4e8ffe:       mov    %rbp,%rdi
    0.00 :   4e9001:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   4e9006:       lea    0x8(%rbp),%rsi
    0.00 :   4e900a:       mov    %r12,%rdi
    0.00 :   4e900d:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   4e9012:       mov    %rbp,%rdi
    0.00 :   4e9015:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   4e901a:       mov    %rbx,%rdi
    0.00 :   4e901d:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e9022:       mov    %rbx,%r8
    0.00 :   4e9025:       mov    $0x16,%edx
    0.00 :   4e902a:       mov    %rbp,%rdi
    0.00 :   4e902d:       lea    0x394a0c(%rip),%rcx        # 87da40 <onnxruntime::HandleNegativeAxis(long, long)::__PRETTY_FUNCTION__>
    0.00 :   4e9034:       lea    0x351a85(%rip),%rsi        # 83aac0 <typeinfo name for onnxruntime::BiasGeluFusion+0xe0>
    0.00 :   4e903b:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e9040:       mov    %r12,%rcx
    0.00 :   4e9043:       lea    0x351aae(%rip),%rdx        # 83aaf8 <typeinfo name for onnxruntime::BiasGeluFusion+0x118>
    0.00 :   4e904a:       mov    %rbp,%rsi
    0.00 :   4e904d:       mov    %r14,%rdi
    0.00 :   4e9050:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e9055:       mov    %rbp,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   4e9058:       add    $0x10,%r12
    0.00 :   4e905c:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e9061:       mov    %rbx,%rdi
    0.00 :   4e9064:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e9069:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e9071:       cmp    %r12,%rdi
    0.00 :   4e9074:       je     4e907b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x11eb>
    0.00 :   4e9076:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e907b:       lea    -0x3ef962(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4e9082:       lea    0x7285a7(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4e9089:       mov    %r14,%rdi
    0.00 :   4e908c:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4e9091:       mov    $0xa0,%edi
    0.00 :   4e9096:       lea    0x130(%rsp),%r12
    0.00 :   4e909e:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e90a3:       mov    %r12,%rdi
    0.00 :   4e90a6:       lea    0x60(%rsp),%rcx
    0.00 :   4e90ab:       mov    %rbx,%rsi
    0.00 :   4e90ae:       mov    %rax,%r13
    0.00 :   4e90b1:       lea    0x33c753(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e90b8:       lea    0x68(%rsp),%rdx
    0.00 :   4e90bd:       mov    %rax,0x60(%rsp)
    0.00 :   4e90c2:       lea    0x33c73f(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e90c9:       lea    0x30(%rbp),%r8
    0.00 :   4e90cd:       mov    %rax,0x68(%rsp)
    0.00 :   4e90d2:       lea    0x33c718(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e90d9:       mov    %rax,0xe0(%rsp)
    0.00 :   4e90e1:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e90e6:       mov    %rbx,%rdi
    0.00 :   4e90e9:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e90ee:       lea    0x150(%rsp),%rbp
    0.00 :   4e90f6:       mov    %rbx,%r8
    0.00 :   4e90f9:       lea    0x394900(%rip),%rcx        # 87da00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   4e9100:       mov    $0x83,%edx
    0.00 :   4e9105:       lea    0x33c704(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e910c:       mov    %rbp,%rdi
    0.00 :   4e910f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e9114:       mov    %r12,%rcx
    0.00 :   4e9117:       lea    0x33c732(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e911e:       mov    %rbp,%rsi
    0.00 :   4e9121:       mov    %r13,%rdi
    0.00 :   4e9124:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e9129:       mov    %rbp,%rdi
    0.00 :   4e912c:       add    $0x10,%r12
    0.00 :   4e9130:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e9135:       mov    %rbx,%rdi
    0.00 :   4e9138:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e913d:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e9145:       cmp    %r12,%rdi
    0.00 :   4e9148:       je     4e914f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x12bf>
    0.00 :   4e914a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e914f:       lea    -0x3efa36(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4e9156:       lea    0x7284d3(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4e915d:       mov    %r13,%rdi
    0.00 :   4e9160:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4e9165:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e916a:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e916f:       mov    $0xa0,%edi
    0.00 :   4e9174:       lea    0xe0(%rsp),%rbx
    0.00 :   4e917c:       lea    0x130(%rsp),%r12
    0.00 :   4e9184:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e9189:       mov    %r12,%rdi
    0.00 :   4e918c:       lea    0x30(%r13),%r8
    0.00 :   4e9190:       mov    %rbx,%rsi
    0.00 :   4e9193:       mov    %rax,%r14
    0.00 :   4e9196:       lea    0x33c66e(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e919d:       lea    0xa0(%rsp),%rcx
    0.00 :   4e91a5:       mov    %rax,0xa0(%rsp)
    0.00 :   4e91ad:       lea    0x33c654(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e91b4:       lea    0xc0(%rsp),%rdx
    0.00 :   4e91bc:       mov    %rax,0xc0(%rsp)
    0.00 :   4e91c4:       lea    0x33c626(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e91cb:       mov    %rax,0xe0(%rsp)
    0.00 :   4e91d3:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e91d8:       mov    %rbx,%rdi
    0.00 :   4e91db:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e91e0:       lea    0x150(%rsp),%rbp
    0.00 :   4e91e8:       mov    %rbx,%r8
    0.00 :   4e91eb:       lea    0x39488e(%rip),%rcx        # 87da80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   4e91f2:       mov    $0x97,%edx
    0.00 :   4e91f7:       lea    0x33c612(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e91fe:       mov    %rbp,%rdi
    0.00 :   4e9201:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e9206:       mov    %r12,%rcx
    0.00 :   4e9209:       lea    0x33c640(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e9210:       mov    %rbp,%rsi
    0.00 :   4e9213:       mov    %r14,%rdi
    0.00 :   4e9216:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e921b:       jmpq   4e9055 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x11c5>
    0.00 :   4e9220:       mov    $0xa0,%edi
    0.00 :   4e9225:       lea    0xe0(%rsp),%rbx
    0.00 :   4e922d:       lea    0x130(%rsp),%r12
    0.00 :   4e9235:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e923a:       mov    %r12,%rdi
    0.00 :   4e923d:       lea    0x30(%r13),%r8
    0.00 :   4e9241:       mov    %rbx,%rsi
    0.00 :   4e9244:       mov    %rax,%r14
    0.00 :   4e9247:       lea    0x33c5bd(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e924e:       lea    0xa0(%rsp),%rcx
    0.00 :   4e9256:       mov    %rax,0xa0(%rsp)
    0.00 :   4e925e:       lea    0x33c5a3(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e9265:       lea    0xc0(%rsp),%rdx
    0.00 :   4e926d:       mov    %rax,0xc0(%rsp)
    0.00 :   4e9275:       lea    0x33c575(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e927c:       mov    %rax,0xe0(%rsp)
    0.00 :   4e9284:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e9289:       mov    %rbx,%rdi
    0.00 :   4e928c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e9291:       lea    0x150(%rsp),%rbp
    0.00 :   4e9299:       mov    %rbx,%r8
    0.00 :   4e929c:       lea    0x39475d(%rip),%rcx        # 87da00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   4e92a3:       mov    $0x83,%edx
    0.00 :   4e92a8:       lea    0x33c561(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e92af:       mov    %rbp,%rdi
    0.00 :   4e92b2:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e92b7:       mov    %r12,%rcx
    0.00 :   4e92ba:       lea    0x33c58f(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e92c1:       mov    %rbp,%rsi
    0.00 :   4e92c4:       mov    %r14,%rdi
    0.00 :   4e92c7:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e92cc:       jmpq   4e9055 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x11c5>
    0.00 :   4e92d1:       mov    $0xa0,%edi
    0.00 :   4e92d6:       lea    0x130(%rsp),%r12
    0.00 :   4e92de:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e92e3:       mov    %r12,%rdi
    0.00 :   4e92e6:       lea    0x68(%rsp),%rcx
    0.00 :   4e92eb:       mov    %rbx,%rsi
    0.00 :   4e92ee:       mov    %rax,%r14
    0.00 :   4e92f1:       lea    0x33c513(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e92f8:       lea    0xc0(%rsp),%rdx
    0.00 :   4e9300:       mov    %rax,0x68(%rsp)
    0.00 :   4e9305:       lea    0x33c4fc(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e930c:       lea    0x30(%r13),%r8
    0.00 :   4e9310:       mov    %rax,0xc0(%rsp)
    0.00 :   4e9318:       lea    0x33c4d2(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e931f:       mov    %rax,0xe0(%rsp)
    0.00 :   4e9327:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e932c:       mov    %rbx,%rdi
    0.00 :   4e932f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e9334:       lea    0x150(%rsp),%rbp
    0.00 :   4e933c:       mov    %rbx,%r8
    0.00 :   4e933f:       lea    0x3946ba(%rip),%rcx        # 87da00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   4e9346:       mov    $0x83,%edx
    0.00 :   4e934b:       lea    0x33c4be(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e9352:       mov    %rbp,%rdi
    0.00 :   4e9355:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e935a:       mov    %r12,%rcx
    0.00 :   4e935d:       lea    0x33c4ec(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e9364:       mov    %rbp,%rsi
    0.00 :   4e9367:       mov    %r14,%rdi
    0.00 :   4e936a:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e936f:       mov    %rbp,%rdi
    0.00 :   4e9372:       add    $0x10,%r12
    0.00 :   4e9376:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e937b:       mov    %rbx,%rdi
    0.00 :   4e937e:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e9383:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e938b:       cmp    %r12,%rdi
    0.00 :   4e938e:       je     4e9395 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1505>
    0.00 :   4e9390:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e9395:       lea    -0x3efc7c(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4e939c:       lea    0x72828d(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4e93a3:       mov    %r14,%rdi
    0.00 :   4e93a6:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4e93ab:       mov    $0xa0,%edi
    0.00 :   4e93b0:       lea    0xe0(%rsp),%rbx
    0.00 :   4e93b8:       lea    0x130(%rsp),%r12
    0.00 :   4e93c0:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e93c5:       mov    %r12,%rdi
    0.00 :   4e93c8:       lea    0x30(%r15),%r8
    0.00 :   4e93cc:       mov    %rbx,%rsi
    0.00 :   4e93cf:       mov    %rax,%r13
    0.00 :   4e93d2:       lea    0x33c432(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e93d9:       lea    0xa0(%rsp),%rcx
    0.00 :   4e93e1:       mov    %rax,0xa0(%rsp)
    0.00 :   4e93e9:       lea    0x33c418(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e93f0:       lea    0xc0(%rsp),%rdx
    0.00 :   4e93f8:       mov    %rax,0xc0(%rsp)
    0.00 :   4e9400:       lea    0x33c3ea(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e9407:       mov    %rax,0xe0(%rsp)
    0.00 :   4e940f:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e9414:       mov    %rbx,%rdi
    0.00 :   4e9417:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e941c:       lea    0x150(%rsp),%rbp
    0.00 :   4e9424:       mov    %rbx,%r8
    0.00 :   4e9427:       lea    0x394652(%rip),%rcx        # 87da80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   4e942e:       mov    $0x97,%edx
    0.00 :   4e9433:       lea    0x33c3d6(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e943a:       mov    %rbp,%rdi
    0.00 :   4e943d:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e9442:       mov    %r12,%rcx
    0.00 :   4e9445:       lea    0x33c404(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e944c:       mov    %rbp,%rsi
    0.00 :   4e944f:       mov    %r13,%rdi
    0.00 :   4e9452:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e9457:       mov    %rbp,%rdi
    0.00 :   4e945a:       add    $0x10,%r12
    0.00 :   4e945e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e9463:       mov    %rbx,%rdi
    0.00 :   4e9466:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e946b:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e9473:       cmp    %r12,%rdi
    0.00 :   4e9476:       je     4e947d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x15ed>
    0.00 :   4e9478:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e947d:       lea    -0x3efd64(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4e9484:       lea    0x7281a5(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4e948b:       mov    %r13,%rdi
    0.00 :   4e948e:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4e9493:       mov    $0xa0,%edi
    0.00 :   4e9498:       lea    0xe0(%rsp),%rbx
    0.00 :   4e94a0:       lea    0x130(%rsp),%r12
    0.00 :   4e94a8:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e94ad:       mov    %r12,%rdi
    0.00 :   4e94b0:       lea    0x30(%rbp),%r8
    0.00 :   4e94b4:       mov    %rbx,%rsi
    0.00 :   4e94b7:       mov    %rax,%r13
    0.00 :   4e94ba:       lea    0x33c34a(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e94c1:       lea    0xa0(%rsp),%rcx
    0.00 :   4e94c9:       mov    %rax,0xa0(%rsp)
    0.00 :   4e94d1:       lea    0x33c330(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e94d8:       lea    0xc0(%rsp),%rdx
    0.00 :   4e94e0:       mov    %rax,0xc0(%rsp)
    0.00 :   4e94e8:       lea    0x33c302(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e94ef:       mov    %rax,0xe0(%rsp)
    0.00 :   4e94f7:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e94fc:       mov    %rbx,%rdi
    0.00 :   4e94ff:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e9504:       lea    0x150(%rsp),%rbp
    0.00 :   4e950c:       mov    %rbx,%r8
    0.00 :   4e950f:       lea    0x39456a(%rip),%rcx        # 87da80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   4e9516:       mov    $0x97,%edx
    0.00 :   4e951b:       lea    0x33c2ee(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e9522:       mov    %rbp,%rdi
    0.00 :   4e9525:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e952a:       mov    %r12,%rcx
    0.00 :   4e952d:       lea    0x33c31c(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e9534:       mov    %rbp,%rsi
    0.00 :   4e9537:       mov    %r13,%rdi
    0.00 :   4e953a:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e953f:       jmpq   4e9457 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x15c7>
    0.00 :   4e9544:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   4e9549:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   4e954e:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   4e9553:       mov    %rax,%rbx
    0.00 :   4e9556:       jmp    4e956f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16df>
    0.00 :   4e9558:       mov    %rax,%rbx
    0.00 :   4e955b:       jmp    4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e955d:       mov    0xe0(%rsp),%rdi
         :            if (__p)
    0.00 :   4e9565:       test   %rdi,%rdi
    0.00 :   4e9568:       je     4e956f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16df>
         :            ::operator delete(__p);
    0.00 :   4e956a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e956f:       lea    0xa0(%rsp),%rdi
    0.00 :   4e9577:       callq  21f320 <std::unique_ptr<void, onnxruntime::BufferDeleter>::~unique_ptr()>
         :            if (_M_pi != nullptr)
    0.00 :   4e957c:       mov    0x78(%rsp),%rdi
    0.00 :   4e9581:       test   %rdi,%rdi
    0.00 :   4e9584:       je     4e958b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16fb>
         :            _M_pi->_M_release();
    0.00 :   4e9586:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e958b:       mov    0x80(%rsp),%rdi
         :            if (__p)
    0.00 :   4e9593:       test   %rdi,%rdi
    0.00 :   4e9596:       je     4e959d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x170d>
    0.00 :   4e9598:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   4e959d:       mov    %rbx,%rdi
    0.00 :   4e95a0:       callq  53c30 <_Unwind_Resume@plt>
         :            if (_M_manager)
    0.00 :   4e95a5:       mov    0x160(%rsp),%rax
    0.00 :   4e95ad:       test   %rax,%rax
    0.00 :   4e95b0:       je     4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   4e95b2:       mov    $0x3,%edx
    0.00 :   4e95b7:       mov    %rbp,%rsi
    0.00 :   4e95ba:       mov    %rbp,%rdi
    0.00 :   4e95bd:       callq  *%rax
    0.00 :   4e95bf:       lea    0xc0(%rsp),%rdi
    0.00 :   4e95c7:       callq  21f320 <std::unique_ptr<void, onnxruntime::BufferDeleter>::~unique_ptr()>
    0.00 :   4e95cc:       jmp    4e956f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16df>
    0.00 :   4e95ce:       mov    %rax,%rbx
    0.00 :   4e95d1:       jmp    4e958b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16fb>
    0.00 :   4e95d3:       mov    %rax,%rbx
    0.00 :   4e95d6:       jmp    4e95e2 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1752>
    0.00 :   4e95d8:       mov    %rax,%rbx
    0.00 :   4e95db:       jmp    4e955d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16cd>
    0.00 :   4e95dd:       mov    %rax,%rbx
    0.00 :   4e95e0:       jmp    4e95f6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1766>
         :            if (__ptr != nullptr)
    0.00 :   4e95e2:       mov    0xe0(%rsp),%rdi
    0.00 :   4e95ea:       test   %rdi,%rdi
    0.00 :   4e95ed:       je     4e957c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16ec>
         :            get_deleter()(__ptr);
    0.00 :   4e95ef:       callq  9cdc4 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.91]>
    0.00 :   4e95f4:       jmp    4e957c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16ec>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e95f6:       mov    0xe0(%rsp),%rdi
         :            if (__p)
    0.00 :   4e95fe:       test   %rdi,%rdi
    0.00 :   4e9601:       je     4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
         :            ::operator delete(__p);
    0.00 :   4e9603:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   4e9608:       jmp    4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
    0.00 :   4e960a:       mov    %rax,%r14
    0.00 :   4e960d:       jmp    4e9614 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1784>
    0.00 :   4e960f:       mov    %rax,%r14
    0.00 :   4e9612:       jmp    4e961c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x178c>
    0.00 :   4e9614:       mov    %rbp,%rdi
    0.00 :   4e9617:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e961c:       mov    %rbx,%rdi
    0.00 :   4e961f:       mov    %r14,%rbx
    0.00 :   4e9622:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e9627:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e962f:       add    $0x10,%r12
    0.00 :   4e9633:       cmp    %r12,%rdi
    0.00 :   4e9636:       je     4e963d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17ad>
         :            ::operator delete(__p);
    0.00 :   4e9638:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e963d:       mov    %r13,%rdi
    0.00 :   4e9640:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4e9645:       jmpq   4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
    0.00 :   4e964a:       mov    %rax,%rbx
    0.00 :   4e964d:       jmpq   4e95a5 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1715>
    0.00 :   4e9652:       mov    %rax,%rbx
         :            if (_M_manager)
    0.00 :   4e9655:       mov    0x160(%rsp),%rax
    0.00 :   4e965d:       test   %rax,%rax
    0.00 :   4e9660:       je     4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   4e9666:       lea    0x150(%rsp),%rdi
    0.00 :   4e966e:       mov    $0x3,%edx
    0.00 :   4e9673:       mov    %rdi,%rsi
    0.00 :   4e9676:       callq  *%rax
    0.00 :   4e9678:       jmpq   4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
    0.00 :   4e967d:       mov    %rax,%rbx
    0.00 :   4e9680:       jmp    4e9627 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1797>
    0.00 :   4e9682:       mov    %rax,%rbp
    0.00 :   4e9685:       jmp    4e96a4 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1814>
    0.00 :   4e9687:       mov    %rax,%r13
    0.00 :   4e968a:       jmp    4e9691 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1801>
    0.00 :   4e968c:       mov    %rax,%rbp
    0.00 :   4e968f:       jmp    4e969c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x180c>
    0.00 :   4e9691:       mov    %rbp,%rdi
    0.00 :   4e9694:       mov    %r13,%rbp
    0.00 :   4e9697:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e969c:       mov    %rbx,%rdi
    0.00 :   4e969f:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e96a4:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e96ac:       add    $0x10,%r12
    0.00 :   4e96b0:       cmp    %r12,%rdi
    0.00 :   4e96b3:       je     4e96ba <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x182a>
    0.00 :   4e96b5:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e96ba:       mov    %r14,%rdi
    0.00 :   4e96bd:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4e96c2:       mov    %rbp,%rdi
    0.00 :   4e96c5:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4e96ca:       mov    %rax,%r14
    0.00 :   4e96cd:       jmp    4e9708 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1878>
    0.00 :   4e96cf:       mov    %rax,%r13
    0.00 :   4e96d2:       mov    %rbp,%rdi
    0.00 :   4e96d5:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e96da:       mov    %rbx,%rdi
    0.00 :   4e96dd:       mov    %r13,%rbx
    0.00 :   4e96e0:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e96e5:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e96ed:       add    $0x10,%r12
    0.00 :   4e96f1:       cmp    %r12,%rdi
    0.00 :   4e96f4:       je     4e96fb <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x186b>
    0.00 :   4e96f6:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e96fb:       mov    %r14,%rdi
    0.00 :   4e96fe:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4e9703:       jmpq   4e956f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16df>
    0.00 :   4e9708:       mov    %rbp,%rdi
    0.00 :   4e970b:       mov    %r14,%rbp
    0.00 :   4e970e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e9713:       mov    %rbx,%rdi
    0.00 :   4e9716:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e971b:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e9723:       add    $0x10,%r12
    0.00 :   4e9727:       cmp    %r12,%rdi
    0.00 :   4e972a:       je     4e9731 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x18a1>
    0.00 :   4e972c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e9731:       mov    %r13,%rdi
    0.00 :   4e9734:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4e9739:       mov    %rbp,%rdi
    0.00 :   4e973c:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4e9741:       mov    %rax,%rbx
    0.00 :   4e9744:       jmpq   4e957c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16ec>
    0.00 :   4e9749:       jmpq   4e9687 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17f7>
    0.00 :   4e974e:       jmpq   4e968c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17fc>
    0.00 :   4e9753:       jmpq   4e9682 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17f2>
    0.00 :   4e9758:       jmpq   4e9687 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17f7>
    0.00 :   4e975d:       jmpq   4e96ca <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x183a>
    0.00 :   4e9762:       mov    %rax,%rbp
    0.00 :   4e9765:       jmp    4e9713 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1883>
    0.00 :   4e9767:       mov    %rax,%rbp
    0.00 :   4e976a:       jmp    4e971b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x188b>
    0.00 :   4e976c:       jmp    4e9762 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x18d2>
    0.00 :   4e976e:       jmp    4e9767 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x18d7>
    0.00 :   4e9770:       jmpq   4e968c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17fc>
    0.00 :   4e9775:       jmpq   4e9682 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17f2>
    0.00 :   4e977a:       mov    %rax,%r13
    0.00 :   4e977d:       jmpq   4e96da <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x184a>
    0.00 :   4e9782:       mov    %rax,%rbx
    0.00 :   4e9785:       jmpq   4e96e5 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1855>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (83 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000493a90 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]>:
         :            _ZN11onnxruntimeL26TransposeSingleAxisInwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.31():
    0.00 :   493a90:       push   %r15
    0.00 :   493a92:       lea    0x18(%rdi),%rax
    0.00 :   493a96:       mov    %rsi,%r15
    0.00 :   493a99:       push   %r14
    0.00 :   493a9b:       mov    %r8,%r14
    0.00 :   493a9e:       push   %r13
    0.00 :   493aa0:       mov    %rcx,%r13
    0.00 :   493aa3:       push   %r12
    0.00 :   493aa5:       mov    %rdx,%r12
    0.00 :   493aa8:       push   %rbp
    0.00 :   493aa9:       mov    %rdi,%rbp
    0.00 :   493aac:       push   %rbx
    0.00 :   493aad:       sub    $0x58,%rsp
    0.00 :   493ab1:       mov    0x30(%rdi),%rdi
    0.00 :   493ab5:       test   %r8,%r8
    0.00 :   493ab8:       cmove  %rax,%r14
    0.00 :   493abc:       mov    (%rdi),%rax
    0.00 :   493abf:       callq  *0x18(%rax)
    0.00 :   493ac2:       mov    %r12,%rsi
    0.00 :   493ac5:       mov    %r14,%rdi
    0.00 :   493ac8:       mov    %rax,%rbx
    0.00 :   493acb:       mov    0x50(%rbp),%rax
    0.00 :   493acf:       add    0x0(%rbp),%rax
    0.00 :   493ad3:       mov    %rax,0x38(%rsp)
    0.00 :   493ad8:       mov    0x50(%r15),%rbp
    0.00 :   493adc:       add    (%r15),%rbp
    0.00 :   493adf:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   493ae4:       lea    0x1(%r13),%rsi
    0.00 :   493ae8:       mov    %r14,%rdi
    0.00 :   493aeb:       mov    %rax,%r15
    0.00 :   493aee:       mov    %rax,0x40(%rsp)
    0.00 :   493af3:       mov    (%r14),%rax
    0.00 :   493af6:       mov    (%rax,%r12,8),%r12
    0.00 :   493afa:       callq  5f2a20 <onnxruntime::TensorShape::SizeFromDimension(unsigned long) const>
    0.00 :   493aff:       mov    %r14,%rdi
    0.00 :   493b02:       mov    %rax,%r13
    0.00 :   493b05:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   493b0a:       imul   %r13,%rbx
    0.00 :   493b0e:       cqto
    0.00 :   493b10:       idiv   %r15
    0.00 :   493b13:       cqto
    0.00 :   493b15:       idiv   %r13
    0.00 :   493b18:       cqto
    0.00 :   493b1a:       mov    %rax,%r14
    0.00 :   493b1d:       idiv   %r12
    0.00 :   493b20:       mov    %rax,0x30(%rsp)
    0.00 :   493b25:       cmp    $0x2,%rbx
    0.00 :   493b29:       je     493d98 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x308>
    0.00 :   493b2f:       jbe    493bda <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x14a>
    0.00 :   493b35:       cmp    $0x4,%rbx
    0.00 :   493b39:       je     493d01 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x271>
    0.00 :   493b3f:       cmp    $0x8,%rbx
    0.00 :   493b43:       jne    493c29 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x199>
    0.00 :   493b49:       mov    0x40(%rsp),%r13
    0.00 :   493b4e:       test   %r13,%r13
    0.00 :   493b51:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493b53:       mov    0x30(%rsp),%r15
    0.00 :   493b58:       shl    $0x3,%r12
    0.00 :   493b5c:       shl    $0x3,%r14
    0.00 :   493b60:       xor    %r11d,%r11d
    0.00 :   493b63:       mov    0x38(%rsp),%r9
    0.00 :   493b68:       mov    %r12,%r10
    0.00 :   493b6b:       mov    %r15,%rbx
    0.00 :   493b6e:       lea    0x0(,%r15,8),%rdi
    0.00 :   493b76:       neg    %rbx
    0.00 :   493b79:       add    %rdi,%r9
    0.00 :   493b7c:       shl    $0x3,%rbx
    0.00 :   493b80:       lea    (%rbx,%r9,1),%r8
    0.00 :   493b84:       test   %r15,%r15
    0.00 :   493b87:       jle    493bbf <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x12f>
    0.00 :   493b89:       nopl   0x0(%rax)
    0.00 :   493b90:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   493b95:       cmp    %rbp,%rsi
    0.00 :   493b98:       je     493bb6 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x126>
    0.00 :   493b9a:       mov    %r8,%rdx
    0.00 :   493b9d:       mov    %rbp,%rax
    0.00 :   493ba0:       mov    (%rdx),%rcx
    0.00 :   493ba3:       add    $0x8,%rax
    0.00 :   493ba7:       add    %rdi,%rdx
    0.00 :   493baa:       mov    %rcx,-0x8(%rax)
    0.00 :   493bae:       cmp    %rax,%rsi
    0.00 :   493bb1:       jne    493ba0 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x110>
    0.00 :   493bb3:       add    %r10,%rbp
    0.00 :   493bb6:       add    $0x8,%r8
    0.00 :   493bba:       cmp    %r9,%r8
    0.00 :   493bbd:       jne    493b90 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x100>
    0.00 :   493bbf:       add    $0x1,%r11
    0.00 :   493bc3:       add    %r14,%r9
    0.00 :   493bc6:       cmp    %r11,%r13
    0.00 :   493bc9:       jne    493b80 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0xf0>
    0.00 :   493bcb:       add    $0x58,%rsp
    0.00 :   493bcf:       pop    %rbx
    0.00 :   493bd0:       pop    %rbp
    0.00 :   493bd1:       pop    %r12
    0.00 :   493bd3:       pop    %r13
    0.00 :   493bd5:       pop    %r14
    0.00 :   493bd7:       pop    %r15
    0.00 :   493bd9:       retq
    0.00 :   493bda:       cmp    $0x1,%rbx
    0.00 :   493bde:       jne    493c29 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x199>
    0.00 :   493be0:       mov    0x40(%rsp),%r15
    0.00 :   493be5:       xor    %ebx,%ebx
    0.00 :   493be7:       test   %r15,%r15
    0.00 :   493bea:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493bec:       mov    0x38(%rsp),%r13
    0.00 :   493bf1:       nopl   0x0(%rax)
    0.00 :   493bf8:       mov    0x30(%rsp),%rcx
    0.00 :   493bfd:       mov    %rbp,%rsi
    0.00 :   493c00:       mov    %r13,%rdi
    0.00 :   493c03:       mov    %r12,%rdx
    0.00 :   493c06:       add    $0x1,%rbx
    0.00 :   493c0a:       add    %r14,%r13
    0.00 :   493c0d:       add    %r14,%rbp
    0.00 :   493c10:       callq  6b0250 <MlasTranspose(unsigned char const*, unsigned char*, unsigned long, unsigned long)>
    0.00 :   493c15:       cmp    %rbx,%r15
    0.00 :   493c18:       jne    493bf8 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x168>
    0.00 :   493c1a:       add    $0x58,%rsp
    0.00 :   493c1e:       pop    %rbx
    0.00 :   493c1f:       pop    %rbp
    0.00 :   493c20:       pop    %r12
    0.00 :   493c22:       pop    %r13
    0.00 :   493c24:       pop    %r14
    0.00 :   493c26:       pop    %r15
    0.00 :   493c28:       retq
    0.00 :   493c29:       cmpq   $0x0,0x40(%rsp)
    0.00 :   493c2f:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493c31:       mov    %r12,%rdi
    0.00 :   493c34:       mov    0x30(%rsp),%rax
    0.00 :   493c39:       imul   %rbx,%r14
    0.00 :   493c3d:       movq   $0x0,0x28(%rsp)
    0.00 :   493c46:       imul   %rbx,%rdi
    0.00 :   493c4a:       mov    %rbp,0x10(%rsp)
    0.00 :   493c4f:       mov    %rax,%r13
    0.00 :   493c52:       mov    %eax,0x1c(%rsp)
    0.00 :   493c56:       imul   %rbx,%r13
    0.00 :   493c5a:       mov    %r14,0x48(%rsp)
    0.00 :   493c5f:       mov    %rdi,0x20(%rsp)
    0.00 :   493c64:       nopl   0x0(%rax)
    0.00 :   493c68:       cmpq   $0x0,0x30(%rsp)
    0.00 :   493c6e:       jle    493cd2 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x242>
    0.00 :   493c70:       mov    0x38(%rsp),%rax
    0.00 :   493c75:       xor    %r14d,%r14d
    0.00 :   493c78:       mov    %rax,0x8(%rsp)
    0.00 :   493c7d:       nopl   (%rax)
    0.00 :   493c80:       test   %r12,%r12
    0.00 :   493c83:       jle    493cc2 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x232>
    0.00 :   493c85:       mov    0x8(%rsp),%rbp
    0.00 :   493c8a:       mov    0x10(%rsp),%r8
    0.00 :   493c8f:       xor    %r15d,%r15d
    0.00 :   493c92:       nopw   0x0(%rax,%rax,1)
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   493c98:       mov    %rbp,%rsi
    0.00 :   493c9b:       mov    %r8,%rdi
    0.00 :   493c9e:       mov    %rbx,%rdx
         :            _ZN11onnxruntimeL26TransposeSingleAxisInwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.31():
    0.00 :   493ca1:       add    $0x1,%r15
         :            memcpy():
    0.00 :   493ca5:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntimeL26TransposeSingleAxisInwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.31():
    0.00 :   493caa:       add    %r13,%rbp
         :            memcpy():
    0.00 :   493cad:       mov    %rax,%r8
         :            _ZN11onnxruntimeL26TransposeSingleAxisInwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.31():
    0.00 :   493cb0:       add    %rbx,%r8
    0.00 :   493cb3:       cmp    %r15,%r12
    0.00 :   493cb6:       jne    493c98 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x208>
    0.00 :   493cb8:       mov    0x20(%rsp),%rdi
    0.00 :   493cbd:       add    %rdi,0x10(%rsp)
    0.00 :   493cc2:       add    %rbx,0x8(%rsp)
    0.00 :   493cc7:       add    $0x1,%r14d
    0.00 :   493ccb:       cmp    0x1c(%rsp),%r14d
    0.00 :   493cd0:       jne    493c80 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x1f0>
    0.00 :   493cd2:       mov    0x48(%rsp),%rdi
    0.00 :   493cd7:       addq   $0x1,0x28(%rsp)
    0.00 :   493cdd:       add    %rdi,0x38(%rsp)
    0.00 :   493ce2:       mov    0x28(%rsp),%rax
    0.00 :   493ce7:       cmp    %rax,0x40(%rsp)
    0.00 :   493cec:       jne    493c68 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x1d8>
    0.00 :   493cf2:       add    $0x58,%rsp
    0.00 :   493cf6:       pop    %rbx
    0.00 :   493cf7:       pop    %rbp
    0.00 :   493cf8:       pop    %r12
    0.00 :   493cfa:       pop    %r13
    0.00 :   493cfc:       pop    %r14
    0.00 :   493cfe:       pop    %r15
    0.00 :   493d00:       retq
    0.00 :   493d01:       mov    0x40(%rsp),%r13
    0.00 :   493d06:       test   %r13,%r13
    0.00 :   493d09:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493d0f:       mov    0x30(%rsp),%r15
    0.00 :   493d14:       shl    $0x2,%r12
    0.00 :   493d18:       shl    $0x2,%r14
    0.00 :   493d1c:       xor    %r11d,%r11d
    0.00 :   493d1f:       mov    0x38(%rsp),%r9
    0.00 :   493d24:       mov    %r12,%r10
    0.00 :   493d27:       mov    %r15,%rbx
    0.00 :   493d2a:       lea    0x0(,%r15,4),%rdi
    0.00 :   493d32:       neg    %rbx
    0.00 :   493d35:       add    %rdi,%r9
    0.00 :   493d38:       shl    $0x2,%rbx
    0.00 :   493d3c:       nopl   0x0(%rax)
    0.00 :   493d40:       lea    (%rbx,%r9,1),%r8
    0.00 :   493d44:       test   %r15,%r15
    0.00 :   493d47:       jle    493d7d <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2ed>
    0.00 :   493d49:       nopl   0x0(%rax)
    0.00 :   493d50:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   493d55:       cmp    %rbp,%rsi
    0.00 :   493d58:       je     493d74 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2e4>
    0.00 :   493d5a:       mov    %r8,%rdx
    0.00 :   493d5d:       mov    %rbp,%rax
    7.40 :   493d60:       mov    (%rdx),%ecx
   71.68 :   493d62:       add    $0x4,%rax
    3.66 :   493d66:       add    %rdi,%rdx
    8.48 :   493d69:       mov    %ecx,-0x4(%rax)
    8.79 :   493d6c:       cmp    %rax,%rsi
    0.00 :   493d6f:       jne    493d60 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2d0>
    0.00 :   493d71:       add    %r10,%rbp
    0.00 :   493d74:       add    $0x4,%r8
    0.00 :   493d78:       cmp    %r9,%r8
    0.00 :   493d7b:       jne    493d50 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2c0>
    0.00 :   493d7d:       add    $0x1,%r11
    0.00 :   493d81:       add    %r14,%r9
    0.00 :   493d84:       cmp    %r11,%r13
    0.00 :   493d87:       jne    493d40 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2b0>
    0.00 :   493d89:       add    $0x58,%rsp
    0.00 :   493d8d:       pop    %rbx
    0.00 :   493d8e:       pop    %rbp
    0.00 :   493d8f:       pop    %r12
    0.00 :   493d91:       pop    %r13
    0.00 :   493d93:       pop    %r14
    0.00 :   493d95:       pop    %r15
    0.00 :   493d97:       retq
    0.00 :   493d98:       mov    0x40(%rsp),%r13
    0.00 :   493d9d:       test   %r13,%r13
    0.00 :   493da0:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493da6:       mov    0x30(%rsp),%r15
    0.00 :   493dab:       mov    0x38(%rsp),%r9
    0.00 :   493db0:       add    %r12,%r12
    0.00 :   493db3:       add    %r14,%r14
    0.00 :   493db6:       xor    %r11d,%r11d
    0.00 :   493db9:       mov    %r12,%r10
    0.00 :   493dbc:       mov    %r15,%rbx
    0.00 :   493dbf:       lea    (%r15,%r15,1),%rdi
    0.00 :   493dc3:       neg    %rbx
    0.00 :   493dc6:       add    %rdi,%r9
    0.00 :   493dc9:       add    %rbx,%rbx
    0.00 :   493dcc:       nopl   0x0(%rax)
    0.00 :   493dd0:       lea    (%rbx,%r9,1),%r8
    0.00 :   493dd4:       test   %r15,%r15
    0.00 :   493dd7:       jle    493e0f <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x37f>
    0.00 :   493dd9:       nopl   0x0(%rax)
    0.00 :   493de0:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   493de5:       cmp    %rbp,%rsi
    0.00 :   493de8:       je     493e06 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x376>
    0.00 :   493dea:       mov    %r8,%rdx
    0.00 :   493ded:       mov    %rbp,%rax
    0.00 :   493df0:       movzwl (%rdx),%ecx
    0.00 :   493df3:       add    $0x2,%rax
    0.00 :   493df7:       add    %rdi,%rdx
    0.00 :   493dfa:       mov    %cx,-0x2(%rax)
    0.00 :   493dfe:       cmp    %rax,%rsi
    0.00 :   493e01:       jne    493df0 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x360>
    0.00 :   493e03:       add    %r10,%rbp
    0.00 :   493e06:       add    $0x2,%r8
    0.00 :   493e0a:       cmp    %r9,%r8
    0.00 :   493e0d:       jne    493de0 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x350>
    0.00 :   493e0f:       add    $0x1,%r11
    0.00 :   493e13:       add    %r14,%r9
    0.00 :   493e16:       cmp    %r11,%r13
    0.00 :   493e19:       jne    493dd0 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x340>
    0.00 :   493e1b:       add    $0x58,%rsp
    0.00 :   493e1f:       pop    %rbx
    0.00 :   493e20:       pop    %rbp
    0.00 :   493e21:       pop    %r12
    0.00 :   493e23:       pop    %r13
    0.00 :   493e25:       pop    %r14
    0.00 :   493e27:       pop    %r15
    0.00 :   493e29:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (88 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a7780 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)>:
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a7780:       push   %r13
    0.00 :   6a7782:       push   %r12
    0.00 :   6a7784:       push   %rbp
    0.00 :   6a7785:       push   %rbx
    0.00 :   6a7786:       cmp    $0xf,%rcx
    0.00 :   6a778a:       jbe    6a781e <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x9e>
    0.00 :   6a7790:       mov    %r8,%r13
    0.00 :   6a7793:       mov    %rcx,%r12
    0.00 :   6a7796:       mov    %rsi,%rbp
    0.00 :   6a7799:       mov    %rdi,%rbx
    0.00 :   6a779c:       lea    0x0(,%rdx,4),%r11
    0.00 :   6a77a4:       shl    $0x6,%r13
    0.00 :   6a77a8:       nopl   0x0(%rax,%rax,1)
    0.00 :   6a77b0:       mov    %r8,%r10
    0.00 :   6a77b3:       mov    %rbp,%r9
    0.00 :   6a77b6:       mov    %rbx,%rax
    0.00 :   6a77b9:       nopl   0x0(%rax)
         :            _Z12_mm_loadu_psPKf():
         :
         :            /* Load four SPFP values from P.  The address need not be 16-byte aligned.  */
         :            extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_loadu_ps (float const *__P)
         :            {
         :            return *(__m128_u *)__P;
    0.00 :   6a77c0:       movups 0x10(%r9),%xmm2
   73.74 :   6a77c5:       movups 0x20(%r9),%xmm1
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    7.66 :   6a77ca:       add    $0x40,%rax
         :            _Z12_mm_loadu_psPKf():
    2.49 :   6a77ce:       movups 0x30(%r9),%xmm0
         :            _Z12_mm_store_psPfDv4_f():
         :
         :            /* Store four SPFP values.  The address must be 16-byte aligned.  */
         :            extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_store_ps (float *__P, __m128 __A)
         :            {
         :            *(__m128 *)__P = __A;
    2.71 :   6a77d3:       movups (%r9),%xmm3
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    3.06 :   6a77d7:       add    %r11,%r9
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a77da:       movaps %xmm2,-0x30(%rax)
    1.37 :   6a77de:       movaps %xmm3,-0x40(%rax)
    3.26 :   6a77e2:       movaps %xmm1,-0x20(%rax)
    4.40 :   6a77e6:       movaps %xmm0,-0x10(%rax)
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    1.31 :   6a77ea:       sub    $0x1,%r10
    0.00 :   6a77ee:       jne    6a77c0 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x40>
    0.00 :   6a77f0:       sub    $0x10,%r12
    0.00 :   6a77f4:       add    %r13,%rbx
    0.00 :   6a77f7:       add    $0x40,%rbp
    0.00 :   6a77fb:       cmp    $0xf,%r12
    0.00 :   6a77ff:       ja     6a77b0 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x30>
    0.00 :   6a7801:       lea    -0x10(%rcx),%rax
    0.00 :   6a7805:       and    $0xf,%ecx
    0.00 :   6a7808:       shr    $0x4,%rax
    0.00 :   6a780c:       add    $0x1,%rax
    0.00 :   6a7810:       imul   %rax,%r13
    0.00 :   6a7814:       shl    $0x6,%rax
    0.00 :   6a7818:       add    %rax,%rsi
    0.00 :   6a781b:       add    %r13,%rdi
    0.00 :   6a781e:       test   %rcx,%rcx
    0.00 :   6a7821:       je     6a78c8 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x148>
    0.00 :   6a7827:       mov    %rcx,%rbx
    0.00 :   6a782a:       mov    %rcx,%r11
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a782d:       pxor   %xmm0,%xmm0
    0.00 :   6a7831:       mov    %rcx,%r10
    0.00 :   6a7834:       and    $0x8,%ebx
    0.00 :   6a7837:       and    $0x4,%r11d
    0.00 :   6a783b:       and    $0x2,%r10d
    0.00 :   6a783f:       and    $0x1,%ecx
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a7842:       lea    0x0(,%rdx,4),%r9
    0.00 :   6a784a:       jmp    6a78a8 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x128>
    0.00 :   6a784c:       nopl   0x0(%rax)
         :            _Z12_mm_loadu_psPKf():
         :            return *(__m128_u *)__P;
    0.00 :   6a7850:       movups 0x10(%rsi),%xmm1
         :            _Z12_mm_store_psPfDv4_f():
         :            *(__m128 *)__P = __A;
    0.00 :   6a7854:       movups (%rsi),%xmm4
    0.00 :   6a7857:       lea    0x20(%rdi),%rax
    0.00 :   6a785b:       lea    0x20(%rsi),%rdx
    0.00 :   6a785f:       movaps %xmm4,(%rdi)
    0.00 :   6a7862:       movaps %xmm1,0x10(%rdi)
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a7866:       test   %r11,%r11
    0.00 :   6a7869:       je     6a787a <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0xfa>
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a786b:       movups (%rdx),%xmm5
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a786e:       add    $0x10,%rax
    0.00 :   6a7872:       add    $0x10,%rdx
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a7876:       movaps %xmm5,-0x10(%rax)
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a787a:       test   %r10,%r10
    0.00 :   6a787d:       je     6a788e <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x10e>
    0.00 :   6a787f:       mov    (%rdx),%rbp
    0.00 :   6a7882:       add    $0x8,%rax
    0.00 :   6a7886:       add    $0x8,%rdx
    0.00 :   6a788a:       mov    %rbp,-0x8(%rax)
    0.00 :   6a788e:       test   %rcx,%rcx
    0.00 :   6a7891:       je     6a789b <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x11b>
    0.00 :   6a7893:       movss  (%rdx),%xmm1
    0.00 :   6a7897:       movss  %xmm1,(%rax)
    0.00 :   6a789b:       add    $0x40,%rdi
    0.00 :   6a789f:       add    %r9,%rsi
    0.00 :   6a78a2:       sub    $0x1,%r8
    0.00 :   6a78a6:       je     6a78c8 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x148>
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a78a8:       movaps %xmm0,(%rdi)
    0.00 :   6a78ab:       movaps %xmm0,0x10(%rdi)
    0.00 :   6a78af:       movaps %xmm0,0x20(%rdi)
    0.00 :   6a78b3:       movaps %xmm0,0x30(%rdi)
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a78b7:       test   %rbx,%rbx
    0.00 :   6a78ba:       jne    6a7850 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0xd0>
    0.00 :   6a78bc:       mov    %rsi,%rdx
    0.00 :   6a78bf:       mov    %rdi,%rax
    0.00 :   6a78c2:       jmp    6a7866 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0xe6>
    0.00 :   6a78c4:       nopl   0x0(%rax)
    0.00 :   6a78c8:       pop    %rbx
    0.00 :   6a78c9:       pop    %rbp
    0.00 :   6a78ca:       pop    %r12
    0.00 :   6a78cc:       pop    %r13
    0.00 :   6a78ce:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (55 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006cb3c8 <MlasComputeSumExpF32KernelFma3>:
         :            MlasComputeSumExpF32KernelFma3():
    0.00 :   6cb3c8:       lea    0x1dc5b1(%rip),%rax        # 8a7980 <MlasExpConstants>
    0.00 :   6cb3cf:       vbroadcastss (%rcx),%ymm9
    0.00 :   6cb3d4:       vxorps %xmm10,%xmm10,%xmm10
    0.00 :   6cb3d9:       sub    $0x18,%rdx
    0.00 :   6cb3dd:       jb     6cb548 <MlasComputeSumExpF32KernelFma3+0x180>
    0.00 :   6cb3e3:       vbroadcastss 0x8(%rax),%ymm11
    1.97 :   6cb3e9:       vbroadcastss 0x14(%rax),%ymm2
    1.76 :   6cb3ef:       vaddps (%rdi),%ymm9,%ymm0
    7.58 :   6cb3f3:       vaddps 0x20(%rdi),%ymm9,%ymm3
    0.00 :   6cb3f8:       vaddps 0x40(%rdi),%ymm9,%ymm6
    1.85 :   6cb3fd:       vbroadcastss 0x10(%rax),%ymm15
    3.77 :   6cb403:       vmaxps %ymm0,%ymm11,%ymm0
    1.85 :   6cb407:       vmovaps %ymm2,%ymm5
    0.00 :   6cb40b:       vmaxps %ymm3,%ymm11,%ymm3
    1.56 :   6cb40f:       vmovaps %ymm2,%ymm8
    2.02 :   6cb413:       vmaxps %ymm6,%ymm11,%ymm6
    3.73 :   6cb417:       vbroadcastss 0x18(%rax),%ymm13
    0.00 :   6cb41d:       vfmadd213ps %ymm15,%ymm0,%ymm2
    2.04 :   6cb422:       vfmadd213ps %ymm15,%ymm3,%ymm5
    3.78 :   6cb427:       vfmadd213ps %ymm15,%ymm6,%ymm8
    0.00 :   6cb42c:       vbroadcastss 0x1c(%rax),%ymm14
    0.00 :   6cb432:       vsubps %ymm15,%ymm2,%ymm1
    5.64 :   6cb437:       vsubps %ymm15,%ymm5,%ymm4
    2.07 :   6cb43c:       vsubps %ymm15,%ymm8,%ymm7
    1.84 :   6cb441:       vfmadd231ps %ymm13,%ymm1,%ymm0
    3.12 :   6cb446:       vfmadd231ps %ymm13,%ymm4,%ymm3
    0.00 :   6cb44b:       vfmadd231ps %ymm13,%ymm7,%ymm6
    5.35 :   6cb450:       vfmadd231ps %ymm14,%ymm1,%ymm0
    3.77 :   6cb455:       vfmadd231ps %ymm14,%ymm4,%ymm3
    0.00 :   6cb45a:       vfmadd231ps %ymm14,%ymm7,%ymm6
    1.47 :   6cb45f:       vbroadcastss 0x20(%rax),%ymm1
    0.00 :   6cb465:       vbroadcastss 0x24(%rax),%ymm13
    0.00 :   6cb46b:       vmovaps %ymm1,%ymm4
    0.00 :   6cb46f:       vmovaps %ymm1,%ymm7
    0.00 :   6cb473:       vfmadd213ps %ymm13,%ymm0,%ymm1
    1.40 :   6cb478:       vfmadd213ps %ymm13,%ymm3,%ymm4
    1.77 :   6cb47d:       vfmadd213ps %ymm13,%ymm6,%ymm7
    0.00 :   6cb482:       vbroadcastss 0x28(%rax),%ymm14
    0.00 :   6cb488:       vpslld $0x17,%ymm2,%ymm2
    0.00 :   6cb48d:       vpslld $0x17,%ymm5,%ymm5
    0.00 :   6cb492:       vpslld $0x17,%ymm8,%ymm8
    0.00 :   6cb498:       vbroadcastss 0x3c(%rax),%ymm15
    0.00 :   6cb49e:       vfmadd213ps %ymm14,%ymm0,%ymm1
    3.58 :   6cb4a3:       vfmadd213ps %ymm14,%ymm3,%ymm4
    0.00 :   6cb4a8:       vfmadd213ps %ymm14,%ymm6,%ymm7
    0.00 :   6cb4ad:       vbroadcastss 0x2c(%rax),%ymm13
    0.00 :   6cb4b3:       vpaddd %ymm15,%ymm2,%ymm2
    3.69 :   6cb4b8:       vpaddd %ymm15,%ymm5,%ymm5
    0.00 :   6cb4bd:       vpaddd %ymm15,%ymm8,%ymm8
    0.00 :   6cb4c2:       vbroadcastss 0x30(%rax),%ymm14
    0.00 :   6cb4c8:       vfmadd213ps %ymm13,%ymm0,%ymm1
    0.00 :   6cb4cd:       vfmadd213ps %ymm13,%ymm3,%ymm4
    3.71 :   6cb4d2:       vfmadd213ps %ymm13,%ymm6,%ymm7
    0.00 :   6cb4d7:       vbroadcastss 0x34(%rax),%ymm15
    0.00 :   6cb4dd:       vfmadd213ps %ymm14,%ymm0,%ymm1
    0.00 :   6cb4e2:       vfmadd213ps %ymm14,%ymm3,%ymm4
    0.00 :   6cb4e7:       vfmadd213ps %ymm14,%ymm6,%ymm7
    0.00 :   6cb4ec:       vfmadd213ps %ymm15,%ymm0,%ymm1
    0.00 :   6cb4f1:       vfmadd213ps %ymm15,%ymm3,%ymm4
    3.67 :   6cb4f6:       vfmadd213ps %ymm15,%ymm6,%ymm7
    0.00 :   6cb4fb:       vfmadd213ps %ymm15,%ymm0,%ymm1
    0.00 :   6cb500:       vfmadd213ps %ymm15,%ymm3,%ymm4
    0.00 :   6cb505:       vfmadd213ps %ymm15,%ymm6,%ymm7
    3.97 :   6cb50a:       vmulps %ymm2,%ymm1,%ymm1
    0.00 :   6cb50e:       vmulps %ymm5,%ymm4,%ymm4
    0.00 :   6cb512:       vaddps %ymm1,%ymm10,%ymm10
    3.49 :   6cb516:       vmulps %ymm8,%ymm7,%ymm7
    0.00 :   6cb51b:       vaddps %ymm4,%ymm10,%ymm10
    8.93 :   6cb51f:       add    $0x60,%rdi
    0.00 :   6cb523:       vaddps %ymm7,%ymm10,%ymm10
    6.99 :   6cb527:       test   %rsi,%rsi
    0.00 :   6cb52a:       je     6cb53e <MlasComputeSumExpF32KernelFma3+0x176>
    0.00 :   6cb52c:       vmovups %ymm1,(%rsi)
    0.00 :   6cb530:       vmovups %ymm4,0x20(%rsi)
    0.00 :   6cb535:       vmovups %ymm7,0x40(%rsi)
    0.00 :   6cb53a:       add    $0x60,%rsi
    0.00 :   6cb53e:       sub    $0x18,%rdx
    0.00 :   6cb542:       jae    6cb3e3 <MlasComputeSumExpF32KernelFma3+0x1b>
    0.00 :   6cb548:       add    $0x18,%rdx
    0.00 :   6cb54c:       je     6cb63c <MlasComputeSumExpF32KernelFma3+0x274>
    0.00 :   6cb552:       vbroadcastss 0x8(%rax),%ymm11
    0.00 :   6cb558:       cmp    $0x8,%rdx
    0.00 :   6cb55c:       jb     6cb564 <MlasComputeSumExpF32KernelFma3+0x19c>
    0.00 :   6cb55e:       vmovups (%rdi),%ymm0
    0.00 :   6cb562:       jmp    6cb57d <MlasComputeSumExpF32KernelFma3+0x1b5>
    0.00 :   6cb564:       lea    0x1dbe75(%rip),%r10        # 8a73e0 <MlasMaskMoveTableAvx+0x20>
    0.00 :   6cb56b:       neg    %rdx
    0.00 :   6cb56e:       vmovups (%r10,%rdx,4),%ymm3
    0.00 :   6cb574:       vmaskmovps (%rdi),%ymm3,%ymm0
    0.00 :   6cb579:       vandps %ymm3,%ymm9,%ymm9
    1.94 :   6cb57d:       vbroadcastss 0x14(%rax),%ymm2
    0.00 :   6cb583:       vaddps %ymm0,%ymm9,%ymm0
    0.00 :   6cb587:       vbroadcastss 0x10(%rax),%ymm15
    0.00 :   6cb58d:       vmaxps %ymm0,%ymm11,%ymm0
    0.00 :   6cb591:       vbroadcastss 0x18(%rax),%ymm13
    0.00 :   6cb597:       vfmadd213ps %ymm15,%ymm0,%ymm2
    0.00 :   6cb59c:       vbroadcastss 0x1c(%rax),%ymm14
    0.00 :   6cb5a2:       vsubps %ymm15,%ymm2,%ymm1
    0.00 :   6cb5a7:       vfmadd231ps %ymm13,%ymm1,%ymm0
    1.69 :   6cb5ac:       vfmadd231ps %ymm14,%ymm1,%ymm0
    0.00 :   6cb5b1:       vbroadcastss 0x20(%rax),%ymm1
    0.00 :   6cb5b7:       vbroadcastss 0x24(%rax),%ymm13
    0.00 :   6cb5bd:       vfmadd213ps %ymm13,%ymm0,%ymm1
    0.00 :   6cb5c2:       vbroadcastss 0x28(%rax),%ymm14
    0.00 :   6cb5c8:       vpslld $0x17,%ymm2,%ymm2
    0.00 :   6cb5cd:       vbroadcastss 0x3c(%rax),%ymm15
    0.00 :   6cb5d3:       vfmadd213ps %ymm14,%ymm0,%ymm1
    0.00 :   6cb5d8:       vbroadcastss 0x2c(%rax),%ymm13
    0.00 :   6cb5de:       vpaddd %ymm15,%ymm2,%ymm2
    0.00 :   6cb5e3:       vbroadcastss 0x30(%rax),%ymm14
    0.00 :   6cb5e9:       vfmadd213ps %ymm13,%ymm0,%ymm1
    0.00 :   6cb5ee:       vbroadcastss 0x34(%rax),%ymm15
    0.00 :   6cb5f4:       vfmadd213ps %ymm14,%ymm0,%ymm1
    0.00 :   6cb5f9:       vfmadd213ps %ymm15,%ymm0,%ymm1
    0.00 :   6cb5fe:       vfmadd213ps %ymm15,%ymm0,%ymm1
    0.00 :   6cb603:       vmulps %ymm2,%ymm1,%ymm1
    0.00 :   6cb607:       jb     6cb62a <MlasComputeSumExpF32KernelFma3+0x262>
    0.00 :   6cb609:       vaddps %ymm1,%ymm10,%ymm10
    0.00 :   6cb60d:       test   %rsi,%rsi
    0.00 :   6cb610:       je     6cb61a <MlasComputeSumExpF32KernelFma3+0x252>
    0.00 :   6cb612:       vmovups %ymm1,(%rsi)
    0.00 :   6cb616:       add    $0x20,%rsi
    0.00 :   6cb61a:       add    $0x20,%rdi
    0.00 :   6cb61e:       sub    $0x8,%rdx
    0.00 :   6cb622:       jne    6cb558 <MlasComputeSumExpF32KernelFma3+0x190>
    0.00 :   6cb628:       jmp    6cb63c <MlasComputeSumExpF32KernelFma3+0x274>
    0.00 :   6cb62a:       vandps %ymm3,%ymm1,%ymm1
    0.00 :   6cb62e:       vaddps %ymm1,%ymm10,%ymm10
    0.00 :   6cb632:       test   %rsi,%rsi
    0.00 :   6cb635:       je     6cb63c <MlasComputeSumExpF32KernelFma3+0x274>
    0.00 :   6cb637:       vmaskmovps %ymm1,%ymm3,(%rsi)
    0.00 :   6cb63c:       vhaddps %ymm10,%ymm10,%ymm10
    0.00 :   6cb641:       vhaddps %ymm10,%ymm10,%ymm10
    0.00 :   6cb646:       vextractf128 $0x1,%ymm10,%xmm0
    0.00 :   6cb64c:       vaddss %xmm10,%xmm0,%xmm0
    0.00 :   6cb651:       vzeroupper
    0.00 :   6cb654:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (36 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006c1004 <MlasReduceMaximumF32KernelAvx>:
         :            MlasReduceMaximumF32KernelAvx():
    0.00 :   6c1004:       vbroadcastss 0x1e6953(%rip),%ymm0        # 8a7960 <MlasMinimumF32Value>
    0.00 :   6c100d:       test   %rsi,%rsi
    0.00 :   6c1010:       je     6c109f <MlasReduceMaximumF32KernelAvx+0x9b>
    0.00 :   6c1016:       cmp    $0x8,%rsi
    0.00 :   6c101a:       jb     6c1093 <MlasReduceMaximumF32KernelAvx+0x8f>
    0.00 :   6c101c:       cmp    $0x20,%rsi
    0.00 :   6c1020:       jb     6c105e <MlasReduceMaximumF32KernelAvx+0x5a>
    0.00 :   6c1022:       vmovaps %ymm0,%ymm1
    0.00 :   6c1026:       vmovaps %ymm0,%ymm2
    0.00 :   6c102a:       vmovaps %ymm0,%ymm3
    0.00 :   6c102e:       vmaxps (%rdi),%ymm0,%ymm0
   16.88 :   6c1032:       vmaxps 0x20(%rdi),%ymm1,%ymm1
    0.00 :   6c1037:       sub    $0x20,%rsi
    0.00 :   6c103b:       vmaxps 0x40(%rdi),%ymm2,%ymm2
   19.36 :   6c1040:       vmaxps 0x60(%rdi),%ymm3,%ymm3
   11.08 :   6c1045:       add    $0x80,%rdi
    0.00 :   6c104c:       cmp    $0x20,%rsi
    0.00 :   6c1050:       jae    6c102e <MlasReduceMaximumF32KernelAvx+0x2a>
    0.00 :   6c1052:       vmaxps %ymm1,%ymm0,%ymm0
    0.00 :   6c1056:       vmaxps %ymm3,%ymm2,%ymm2
    2.85 :   6c105a:       vmaxps %ymm2,%ymm0,%ymm0
    5.60 :   6c105e:       cmp    $0x8,%rsi
    0.00 :   6c1062:       jb     6c1072 <MlasReduceMaximumF32KernelAvx+0x6e>
    0.00 :   6c1064:       vmaxps (%rdi),%ymm0,%ymm0
    0.00 :   6c1068:       sub    $0x8,%rsi
    0.00 :   6c106c:       add    $0x20,%rdi
    0.00 :   6c1070:       jmp    6c105e <MlasReduceMaximumF32KernelAvx+0x5a>
    0.00 :   6c1072:       vextractf128 $0x1,%ymm0,%xmm1
    1.92 :   6c1078:       vmaxps %xmm1,%xmm0,%xmm0
    8.91 :   6c107c:       vshufps $0xee,%xmm0,%xmm0,%xmm1
    2.51 :   6c1081:       vmaxps %xmm1,%xmm0,%xmm0
   14.23 :   6c1085:       vshufps $0x55,%xmm0,%xmm0,%xmm1
    0.00 :   6c108a:       vmaxss %xmm1,%xmm0,%xmm0
   10.94 :   6c108e:       test   %rsi,%rsi
    0.00 :   6c1091:       je     6c109f <MlasReduceMaximumF32KernelAvx+0x9b>
    0.00 :   6c1093:       vmaxss (%rdi),%xmm0,%xmm0
    0.00 :   6c1097:       add    $0x4,%rdi
    0.00 :   6c109b:       dec    %esi
    0.00 :   6c109d:       jne    6c1093 <MlasReduceMaximumF32KernelAvx+0x8f>
    0.00 :   6c109f:       vzeroupper
    5.73 :   6c10a2:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (27 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004936e0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]>:
         :            _ZN11onnxruntimeL27TransposeSingleAxisOutwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.30():
    0.00 :   4936e0:       push   %r15
    0.00 :   4936e2:       lea    0x18(%rdi),%rax
    0.00 :   4936e6:       mov    %rsi,%r15
    0.00 :   4936e9:       push   %r14
    0.00 :   4936eb:       mov    %rdx,%r14
    0.00 :   4936ee:       push   %r13
    0.00 :   4936f0:       mov    %r8,%r13
    0.00 :   4936f3:       push   %r12
    0.00 :   4936f5:       mov    %rdi,%r12
    0.00 :   4936f8:       push   %rbp
    0.00 :   4936f9:       push   %rbx
    0.00 :   4936fa:       sub    $0x58,%rsp
    0.00 :   4936fe:       mov    0x30(%rdi),%rdi
    0.00 :   493702:       test   %r8,%r8
    0.00 :   493705:       cmove  %rax,%r13
    0.00 :   493709:       mov    %rcx,0x8(%rsp)
    0.00 :   49370e:       mov    (%rdi),%rax
    0.00 :   493711:       callq  *0x18(%rax)
    0.00 :   493714:       mov    0x8(%rsp),%rcx
    0.00 :   493719:       mov    %r13,%rdi
    0.00 :   49371c:       mov    0x50(%r12),%rbp
    0.00 :   493721:       mov    %rax,%rbx
    0.00 :   493724:       mov    0x50(%r15),%rax
    0.00 :   493728:       add    (%r15),%rax
    0.00 :   49372b:       mov    %rcx,%rsi
    0.00 :   49372e:       add    (%r12),%rbp
    0.00 :   493732:       mov    %rax,0x38(%rsp)
    0.00 :   493737:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   49373c:       lea    0x1(%r14),%rsi
    0.00 :   493740:       mov    %r13,%rdi
    0.00 :   493743:       mov    %rax,0x40(%rsp)
    0.00 :   493748:       mov    0x0(%r13),%rax
    0.00 :   49374c:       mov    (%rax,%r14,8),%r12
    0.00 :   493750:       callq  5f2a20 <onnxruntime::TensorShape::SizeFromDimension(unsigned long) const>
    0.00 :   493755:       mov    %r13,%rdi
    0.00 :   493758:       mov    %rax,%r15
    0.00 :   49375b:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   493760:       imul   %r15,%rbx
    0.00 :   493764:       cqto
    0.00 :   493766:       idivq  0x40(%rsp)
    0.00 :   49376b:       cqto
    0.00 :   49376d:       idiv   %r15
    0.00 :   493770:       cqto
    0.00 :   493772:       mov    %rax,%r14
    0.00 :   493775:       idiv   %r12
    0.00 :   493778:       mov    %rax,0x30(%rsp)
    0.00 :   49377d:       cmp    $0x2,%rbx
    0.00 :   493781:       je     4939f8 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x318>
    0.00 :   493787:       jbe    49383a <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x15a>
    0.00 :   49378d:       cmp    $0x4,%rbx
    0.00 :   493791:       je     493961 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x281>
    0.00 :   493797:       cmp    $0x8,%rbx
    0.00 :   49379b:       jne    493889 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x1a9>
    0.00 :   4937a1:       mov    0x40(%rsp),%r13
    0.00 :   4937a6:       test   %r13,%r13
    0.00 :   4937a9:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   4937af:       mov    0x30(%rsp),%r15
    0.00 :   4937b4:       shl    $0x3,%r12
    0.00 :   4937b8:       shl    $0x3,%r14
    0.00 :   4937bc:       xor    %r11d,%r11d
    0.00 :   4937bf:       mov    0x38(%rsp),%r9
    0.00 :   4937c4:       mov    %r12,%r10
    0.00 :   4937c7:       mov    %r15,%rbx
    0.00 :   4937ca:       lea    0x0(,%r15,8),%rdi
    0.00 :   4937d2:       neg    %rbx
    0.00 :   4937d5:       add    %rdi,%r9
    0.00 :   4937d8:       shl    $0x3,%rbx
    0.00 :   4937dc:       nopl   0x0(%rax)
    0.00 :   4937e0:       lea    (%r9,%rbx,1),%r8
    0.00 :   4937e4:       test   %r15,%r15
    0.00 :   4937e7:       jle    49381f <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x13f>
    0.00 :   4937e9:       nopl   0x0(%rax)
    0.00 :   4937f0:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   4937f5:       cmp    %rbp,%rsi
    0.00 :   4937f8:       je     493816 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x136>
    0.00 :   4937fa:       mov    %r8,%rdx
    0.00 :   4937fd:       mov    %rbp,%rax
    0.00 :   493800:       add    $0x8,%rax
    0.00 :   493804:       mov    -0x8(%rax),%rcx
    0.00 :   493808:       mov    %rcx,(%rdx)
    0.00 :   49380b:       add    %rdi,%rdx
    0.00 :   49380e:       cmp    %rax,%rsi
    0.00 :   493811:       jne    493800 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x120>
    0.00 :   493813:       add    %r10,%rbp
    0.00 :   493816:       add    $0x8,%r8
    0.00 :   49381a:       cmp    %r9,%r8
    0.00 :   49381d:       jne    4937f0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x110>
    0.00 :   49381f:       add    $0x1,%r11
    0.00 :   493823:       add    %r14,%r9
    0.00 :   493826:       cmp    %r11,%r13
    0.00 :   493829:       jne    4937e0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x100>
    0.00 :   49382b:       add    $0x58,%rsp
    0.00 :   49382f:       pop    %rbx
    0.00 :   493830:       pop    %rbp
    0.00 :   493831:       pop    %r12
    0.00 :   493833:       pop    %r13
    0.00 :   493835:       pop    %r14
    0.00 :   493837:       pop    %r15
    0.00 :   493839:       retq
    0.00 :   49383a:       cmp    $0x1,%rbx
    0.00 :   49383e:       jne    493889 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x1a9>
    0.00 :   493840:       mov    0x40(%rsp),%r15
    0.00 :   493845:       xor    %ebx,%ebx
    0.00 :   493847:       test   %r15,%r15
    0.00 :   49384a:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   49384c:       mov    0x38(%rsp),%r13
    0.00 :   493851:       nopl   0x0(%rax)
    0.00 :   493858:       mov    0x30(%rsp),%rdx
    0.00 :   49385d:       mov    %r13,%rsi
    0.00 :   493860:       mov    %rbp,%rdi
    0.00 :   493863:       mov    %r12,%rcx
    0.00 :   493866:       add    $0x1,%rbx
    0.00 :   49386a:       add    %r14,%rbp
    0.00 :   49386d:       add    %r14,%r13
    0.00 :   493870:       callq  6b0250 <MlasTranspose(unsigned char const*, unsigned char*, unsigned long, unsigned long)>
    0.00 :   493875:       cmp    %rbx,%r15
    0.00 :   493878:       jne    493858 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x178>
    0.00 :   49387a:       add    $0x58,%rsp
    0.00 :   49387e:       pop    %rbx
    0.00 :   49387f:       pop    %rbp
    0.00 :   493880:       pop    %r12
    0.00 :   493882:       pop    %r13
    0.00 :   493884:       pop    %r14
    0.00 :   493886:       pop    %r15
    0.00 :   493888:       retq
    0.00 :   493889:       cmpq   $0x0,0x40(%rsp)
    0.00 :   49388f:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   493891:       mov    %r12,%rdi
    0.00 :   493894:       mov    0x30(%rsp),%rax
    0.00 :   493899:       imul   %rbx,%r14
    0.00 :   49389d:       movq   $0x0,0x28(%rsp)
    0.00 :   4938a6:       imul   %rbx,%rdi
    0.00 :   4938aa:       mov    %rbp,0x10(%rsp)
    0.00 :   4938af:       mov    %rax,%r13
    0.00 :   4938b2:       mov    %eax,0x1c(%rsp)
    0.00 :   4938b6:       imul   %rbx,%r13
    0.00 :   4938ba:       mov    %r14,0x48(%rsp)
    0.00 :   4938bf:       mov    %rdi,0x20(%rsp)
    0.00 :   4938c4:       nopl   0x0(%rax)
    0.00 :   4938c8:       cmpq   $0x0,0x30(%rsp)
    0.00 :   4938ce:       jle    493932 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x252>
    0.00 :   4938d0:       mov    0x38(%rsp),%rax
    0.00 :   4938d5:       xor    %r14d,%r14d
    0.00 :   4938d8:       mov    %rax,0x8(%rsp)
    0.00 :   4938dd:       nopl   (%rax)
    0.00 :   4938e0:       test   %r12,%r12
    0.00 :   4938e3:       jle    493922 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x242>
    0.00 :   4938e5:       mov    0x10(%rsp),%rbp
    0.00 :   4938ea:       mov    0x8(%rsp),%r8
    0.00 :   4938ef:       xor    %r15d,%r15d
    0.00 :   4938f2:       nopw   0x0(%rax,%rax,1)
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
   18.17 :   4938f8:       mov    %rbp,%rsi
    3.60 :   4938fb:       mov    %r8,%rdi
    7.12 :   4938fe:       mov    %rbx,%rdx
         :            _ZN11onnxruntimeL27TransposeSingleAxisOutwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.30():
   20.32 :   493901:       add    $0x1,%r15
         :            memcpy():
   12.54 :   493905:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntimeL27TransposeSingleAxisOutwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.30():
   33.11 :   49390a:       add    %rbx,%rbp
         :            memcpy():
    0.00 :   49390d:       mov    %rax,%r8
         :            _ZN11onnxruntimeL27TransposeSingleAxisOutwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.30():
    0.00 :   493910:       add    %r13,%r8
    0.00 :   493913:       cmp    %r15,%r12
    0.00 :   493916:       jne    4938f8 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x218>
    0.00 :   493918:       mov    0x20(%rsp),%rdi
    5.14 :   49391d:       add    %rdi,0x10(%rsp)
    0.00 :   493922:       add    %rbx,0x8(%rsp)
    0.00 :   493927:       add    $0x1,%r14d
    0.00 :   49392b:       cmp    0x1c(%rsp),%r14d
    0.00 :   493930:       jne    4938e0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x200>
    0.00 :   493932:       mov    0x48(%rsp),%rdi
    0.00 :   493937:       addq   $0x1,0x28(%rsp)
    0.00 :   49393d:       add    %rdi,0x38(%rsp)
    0.00 :   493942:       mov    0x28(%rsp),%rax
    0.00 :   493947:       cmp    %rax,0x40(%rsp)
    0.00 :   49394c:       jne    4938c8 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x1e8>
    0.00 :   493952:       add    $0x58,%rsp
    0.00 :   493956:       pop    %rbx
    0.00 :   493957:       pop    %rbp
    0.00 :   493958:       pop    %r12
    0.00 :   49395a:       pop    %r13
    0.00 :   49395c:       pop    %r14
    0.00 :   49395e:       pop    %r15
    0.00 :   493960:       retq
    0.00 :   493961:       mov    0x40(%rsp),%r13
    0.00 :   493966:       test   %r13,%r13
    0.00 :   493969:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   49396f:       mov    0x30(%rsp),%r15
    0.00 :   493974:       shl    $0x2,%r12
    0.00 :   493978:       shl    $0x2,%r14
    0.00 :   49397c:       xor    %r11d,%r11d
    0.00 :   49397f:       mov    0x38(%rsp),%r9
    0.00 :   493984:       mov    %r12,%r10
    0.00 :   493987:       mov    %r15,%rbx
    0.00 :   49398a:       lea    0x0(,%r15,4),%rdi
    0.00 :   493992:       neg    %rbx
    0.00 :   493995:       add    %rdi,%r9
    0.00 :   493998:       shl    $0x2,%rbx
    0.00 :   49399c:       nopl   0x0(%rax)
    0.00 :   4939a0:       lea    (%rbx,%r9,1),%r8
    0.00 :   4939a4:       test   %r15,%r15
    0.00 :   4939a7:       jle    4939dd <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2fd>
    0.00 :   4939a9:       nopl   0x0(%rax)
    0.00 :   4939b0:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   4939b5:       cmp    %rbp,%rsi
    0.00 :   4939b8:       je     4939d4 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2f4>
    0.00 :   4939ba:       mov    %r8,%rdx
    0.00 :   4939bd:       mov    %rbp,%rax
    0.00 :   4939c0:       add    $0x4,%rax
    0.00 :   4939c4:       mov    -0x4(%rax),%ecx
    0.00 :   4939c7:       mov    %ecx,(%rdx)
    0.00 :   4939c9:       add    %rdi,%rdx
    0.00 :   4939cc:       cmp    %rax,%rsi
    0.00 :   4939cf:       jne    4939c0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2e0>
    0.00 :   4939d1:       add    %r10,%rbp
    0.00 :   4939d4:       add    $0x4,%r8
    0.00 :   4939d8:       cmp    %r9,%r8
    0.00 :   4939db:       jne    4939b0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2d0>
    0.00 :   4939dd:       add    $0x1,%r11
    0.00 :   4939e1:       add    %r14,%r9
    0.00 :   4939e4:       cmp    %r11,%r13
    0.00 :   4939e7:       jne    4939a0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2c0>
    0.00 :   4939e9:       add    $0x58,%rsp
    0.00 :   4939ed:       pop    %rbx
    0.00 :   4939ee:       pop    %rbp
    0.00 :   4939ef:       pop    %r12
    0.00 :   4939f1:       pop    %r13
    0.00 :   4939f3:       pop    %r14
    0.00 :   4939f5:       pop    %r15
    0.00 :   4939f7:       retq
    0.00 :   4939f8:       mov    0x40(%rsp),%r13
    0.00 :   4939fd:       test   %r13,%r13
    0.00 :   493a00:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   493a06:       mov    0x30(%rsp),%r15
    0.00 :   493a0b:       mov    0x38(%rsp),%r9
    0.00 :   493a10:       add    %r12,%r12
    0.00 :   493a13:       add    %r14,%r14
    0.00 :   493a16:       xor    %r11d,%r11d
    0.00 :   493a19:       mov    %r12,%r10
    0.00 :   493a1c:       mov    %r15,%rbx
    0.00 :   493a1f:       lea    (%r15,%r15,1),%rdi
    0.00 :   493a23:       neg    %rbx
    0.00 :   493a26:       add    %rdi,%r9
    0.00 :   493a29:       add    %rbx,%rbx
    0.00 :   493a2c:       nopl   0x0(%rax)
    0.00 :   493a30:       lea    (%rbx,%r9,1),%r8
    0.00 :   493a34:       test   %r15,%r15
    0.00 :   493a37:       jle    493a6f <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x38f>
    0.00 :   493a39:       nopl   0x0(%rax)
    0.00 :   493a40:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   493a45:       cmp    %rbp,%rsi
    0.00 :   493a48:       je     493a66 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x386>
    0.00 :   493a4a:       mov    %r8,%rdx
    0.00 :   493a4d:       mov    %rbp,%rax
    0.00 :   493a50:       add    $0x2,%rax
    0.00 :   493a54:       movzwl -0x2(%rax),%ecx
    0.00 :   493a58:       mov    %cx,(%rdx)
    0.00 :   493a5b:       add    %rdi,%rdx
    0.00 :   493a5e:       cmp    %rax,%rsi
    0.00 :   493a61:       jne    493a50 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x370>
    0.00 :   493a63:       add    %r10,%rbp
    0.00 :   493a66:       add    $0x2,%r8
    0.00 :   493a6a:       cmp    %r9,%r8
    0.00 :   493a6d:       jne    493a40 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x360>
    0.00 :   493a6f:       add    $0x1,%r11
    0.00 :   493a73:       add    %r14,%r9
    0.00 :   493a76:       cmp    %r11,%r13
    0.00 :   493a79:       jne    493a30 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x350>
    0.00 :   493a7b:       add    $0x58,%rsp
    0.00 :   493a7f:       pop    %rbx
    0.00 :   493a80:       pop    %rbp
    0.00 :   493a81:       pop    %r12
    0.00 :   493a83:       pop    %r13
    0.00 :   493a85:       pop    %r14
    0.00 :   493a87:       pop    %r15
    0.00 :   493a89:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (19 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004bb850 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)>:
         :            _ZZN11onnxruntime12_GLOBAL__N_126CreateScalarBroadcastFuncsIfEENS_25ProcessBroadcastSpanFuncsEvENUlRNS_15BroadcastHelperEE0_4_FUNES4_():
    0.00 :   4bb850:       mov    (%rdi),%rax
    0.00 :   4bb853:       mov    0x8(%rdi),%rcx
    0.00 :   4bb857:       cmpq   $0x0,0x50(%rdi)
    0.00 :   4bb85c:       mov    0x40(%rdi),%r10
    0.00 :   4bb860:       mov    0x88(%rax),%rdx
    0.00 :   4bb867:       setne  %sil
    0.00 :   4bb86b:       mov    0x28(%rax),%r8
    0.00 :   4bb86f:       add    0x20(%rdi),%rdx
    0.00 :   4bb873:       mov    0x18(%rcx),%r9
    0.00 :   4bb877:       mov    0x48(%rdi),%rcx
    0.00 :   4bb87b:       mov    0xe0(%rax),%rdi
    0.00 :   4bb882:       mov    0x30(%rax),%rax
    0.00 :   4bb886:       movss  (%rax,%rdi,4),%xmm1
    0.00 :   4bb88b:       test   %rcx,%rcx
    0.00 :   4bb88e:       jle    4bb8bb <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)+0x6b>
    0.00 :   4bb890:       lea    (%r9,%r10,4),%rdi
    0.00 :   4bb894:       xor    %eax,%eax
    0.00 :   4bb896:       add    %r8,%rdx
    0.00 :   4bb899:       nopl   0x0(%rax)
    0.00 :   4bb8a0:       movaps %xmm1,%xmm0
   14.34 :   4bb8a3:       cmp    (%rdx,%rax,1),%sil
    0.00 :   4bb8a7:       je     4bb8ad <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)+0x5d>
   15.84 :   4bb8a9:       pxor   %xmm0,%xmm0
   32.19 :   4bb8ad:       movss  %xmm0,(%rdi,%rax,4)
   37.62 :   4bb8b2:       add    $0x1,%rax
    0.00 :   4bb8b6:       cmp    %rax,%rcx
    0.00 :   4bb8b9:       jne    4bb8a0 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)+0x50>
    0.00 :   4bb8bb:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (44 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000516470 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   516470:       push   %r15
    0.00 :   516472:       mov    %rdx,%r15
    0.00 :   516475:       push   %r14
    0.00 :   516477:       push   %r13
    0.00 :   516479:       mov    %rdi,%r13
    0.00 :   51647c:       mov    %rdx,%rdi
    0.00 :   51647f:       push   %r12
    0.00 :   516481:       push   %rbp
    0.00 :   516482:       push   %rbx
    0.00 :   516483:       sub    $0x258,%rsp
    0.00 :   51648a:       mov    %rsi,0x8(%rsp)
    0.00 :   51648f:       xor    %esi,%esi
    0.00 :   516491:       mov    %fs:0x28,%rax
    0.00 :   51649a:       mov    %rax,0x248(%rsp)
    0.00 :   5164a2:       xor    %eax,%eax
    0.00 :   5164a4:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164a9:       mov    $0x1,%esi
    0.00 :   5164ae:       mov    %r15,%rdi
    0.00 :   5164b1:       mov    %rax,%r12
    0.00 :   5164b4:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164b9:       mov    $0x2,%esi
    0.00 :   5164be:       mov    %r15,%rdi
    0.00 :   5164c1:       mov    %rax,%r14
    0.00 :   5164c4:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164c9:       mov    $0x3,%esi
    0.00 :   5164ce:       mov    %r15,%rdi
    0.00 :   5164d1:       mov    %rax,0x10(%rsp)
    0.00 :   5164d6:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164db:       mov    $0x4,%esi
    0.00 :   5164e0:       mov    %r15,%rdi
    0.00 :   5164e3:       mov    %rax,%rbx
    0.00 :   5164e6:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164eb:       xor    %esi,%esi
    0.00 :   5164ed:       lea    0x18(%r12),%rdx
    0.00 :   5164f2:       mov    %r15,%rdi
    0.00 :   5164f5:       mov    %rax,(%rsp)
    0.00 :   5164f9:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5164fe:       mov    0x20(%r12),%rbp
    0.00 :   516503:       mov    %rax,%rsi
    0.00 :   516506:       mov    0x18(%r12),%rax
    0.00 :   51650b:       sub    %rax,%rbp
    0.00 :   51650e:       cmp    $0x18,%rbp
    0.00 :   516512:       jne    516580 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x110>
         :            *  and if corresponding elements compare equal.
         :            */
         :            template<typename _Tp, typename _Alloc>
         :            inline bool
         :            operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
         :            { return (__x.size() == __y.size()
    0.00 :   516514:       mov    0x18(%r14),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   516518:       mov    0x20(%r14),%rdx
    0.00 :   51651c:       sub    %rcx,%rdx
         :            && std::equal(__x.begin(), __x.end(), __y.begin())); }
    0.00 :   51651f:       cmp    $0x18,%rdx
    0.00 :   516523:       je     516878 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x408>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516529:       lea    0xd0(%rsp),%rbx
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516531:       lea    0x36c5c4(%rip),%rdx        # 882afc <typeinfo name for onnxruntime::contrib::SampleOp<float>+0xdc>
    0.00 :   516538:       lea    -0x2c(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51653c:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516540:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516543:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   51654b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   516550:       mov    %rbx,%rcx
    0.00 :   516553:       mov    $0x2,%edx
    0.00 :   516558:       mov    %r13,%rdi
    0.00 :   51655b:       mov    $0x2,%esi
    0.00 :   516560:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   516565:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   51656d:       add    $0x10,%rbx
    0.00 :   516571:       cmp    %rbx,%rdi
    0.00 :   516574:       jne    516825 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3b5>
    0.00 :   51657a:       jmpq   51682a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3ba>
    0.00 :   51657f:       nop
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   516580:       lea    0xd0(%rsp),%rbx
    0.00 :   516588:       lea    0x70(%rbx),%rdi
    0.00 :   51658c:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   516591:       mov    0x711590(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516598:       xor    %esi,%esi
    0.00 :   51659a:       movq   $0x0,0x218(%rsp)
    0.00 :   5165a6:       mov    %si,0x220(%rsp)
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5165ae:       xor    %esi,%esi
    0.00 :   5165b0:       movq   $0x0,0x228(%rsp)
    0.00 :   5165bc:       lea    0x10(%r15),%rax
    0.00 :   5165c0:       mov    %rax,0x140(%rsp)
    0.00 :   5165c8:       mov    0x7117d1(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5165cf:       movq   $0x0,0x230(%rsp)
    0.00 :   5165db:       movq   $0x0,0x238(%rsp)
    0.00 :   5165e7:       mov    0x8(%rax),%r14
    0.00 :   5165eb:       movq   $0x0,0x240(%rsp)
    0.00 :   5165f7:       mov    0x10(%rax),%rax
    0.00 :   5165fb:       mov    -0x18(%r14),%rdi
    0.00 :   5165ff:       mov    %r14,0xd0(%rsp)
    0.00 :   516607:       mov    %rax,0x10(%rsp)
    0.00 :   51660c:       add    %rbx,%rdi
    0.00 :   51660f:       mov    %rax,(%rdi)
    0.00 :   516612:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   516617:       mov    0x711742(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   51661e:       lea    0x40(%rbx),%rdi
    0.00 :   516622:       movq   $0x0,0xe0(%rsp)
    0.00 :   51662e:       movq   $0x0,0xe8(%rsp)
    0.00 :   51663a:       lea    0x18(%r12),%rax
    0.00 :   51663f:       movq   $0x0,0xf0(%rsp)
    0.00 :   51664b:       mov    %rax,0xd0(%rsp)
    0.00 :   516653:       lea    0x40(%r12),%rax
    0.00 :   516658:       mov    %rax,0x140(%rsp)
    0.00 :   516660:       mov    0x7115f9(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516667:       movq   $0x0,0xf8(%rsp)
    0.00 :   516673:       mov    %rax,(%rsp)
    0.00 :   516677:       add    $0x10,%rax
    0.00 :   51667b:       mov    %rax,0xd8(%rsp)
    0.00 :   516683:       movq   $0x0,0x100(%rsp)
    0.00 :   51668f:       movq   $0x0,0x108(%rsp)
    0.00 :   51669b:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5166a0:       mov    0x711931(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5166a7:       lea    0x8(%rbx),%rsi
    0.00 :   5166ab:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5166af:       movl   $0x10,0x118(%rsp)
    0.00 :   5166ba:       mov    %rax,0x8(%rsp)
    0.00 :   5166bf:       add    $0x10,%rax
    0.00 :   5166c3:       mov    %rax,0xd8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5166cb:       lea    0x60(%rbx),%rax
    0.00 :   5166cf:       mov    %rax,0x120(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5166d7:       movq   $0x0,0x128(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5166e3:       movb   $0x0,0x130(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5166eb:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5166f0:       mov    $0x2c,%edx
    0.00 :   5166f5:       lea    0x36c3a4(%rip),%rsi        # 882aa0 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x80>
    0.00 :   5166fc:       mov    %rbx,%rdi
    0.00 :   5166ff:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   516704:       mov    %rbp,%rsi
         :            { return _M_insert(__n); }
    0.00 :   516707:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51670a:       lea    0xb0(%rsp),%rbp
    0.00 :   516712:       sar    $0x3,%rsi
    0.00 :   516716:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   51671b:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   51671f:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51672b:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   516733:       mov    0x100(%rsp),%rax
    0.00 :   51673b:       movb   $0x0,0xc0(%rsp)
    0.00 :   516743:       test   %rax,%rax
    0.00 :   516746:       je     516b60 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x6f0>
         :            if (this->pptr() > this->egptr())
    0.00 :   51674c:       mov    0xf0(%rsp),%r8
    0.00 :   516754:       mov    0xf8(%rsp),%rcx
    0.00 :   51675c:       cmp    %r8,%rax
    0.00 :   51675f:       jbe    516860 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3f0>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516765:       sub    %rcx,%rax
    0.00 :   516768:       xor    %edx,%edx
    0.00 :   51676a:       xor    %esi,%esi
    0.00 :   51676c:       mov    %rbp,%rdi
    0.00 :   51676f:       mov    %rax,%r8
    0.00 :   516772:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   516777:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   51677c:       mov    0x120(%rsp),%rdi
    0.00 :   516784:       mov    %rax,0xd0(%rsp)
    0.00 :   51678c:       lea    0x40(%r12),%rax
    0.00 :   516791:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   516799:       mov    0x8(%rsp),%rax
    0.00 :   51679e:       add    $0x10,%rax
    0.00 :   5167a2:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   5167aa:       lea    0x60(%rbx),%rax
    0.00 :   5167ae:       cmp    %rax,%rdi
    0.00 :   5167b1:       je     5167b8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x348>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5167b3:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5167b8:       mov    (%rsp),%rax
    0.00 :   5167bc:       lea    0x40(%rbx),%rdi
    0.00 :   5167c0:       add    $0x10,%rax
    0.00 :   5167c4:       mov    %rax,0xd8(%rsp)
    0.00 :   5167cc:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5167d1:       mov    -0x18(%r14),%rax
    0.00 :   5167d5:       mov    0x10(%rsp),%rcx
    0.00 :   5167da:       mov    %r14,0xd0(%rsp)
         :            ~basic_ios() { }
    0.00 :   5167e2:       lea    0x70(%rbx),%rdi
    0.00 :   5167e6:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   5167ee:       lea    0x10(%r15),%rax
    0.00 :   5167f2:       mov    %rax,0x140(%rsp)
    0.00 :   5167fa:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5167ff:       mov    %rbp,%rcx
    0.00 :   516802:       mov    $0x2,%edx
    0.00 :   516807:       mov    %r13,%rdi
    0.00 :   51680a:       mov    $0x2,%esi
    0.00 :   51680f:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   516814:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   51681c:       add    $0x10,%rbp
    0.00 :   516820:       cmp    %rbp,%rdi
    0.00 :   516823:       je     51682a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3ba>
    0.00 :   516825:       callq  53300 <operator delete(void*)@plt>
    0.00 :   51682a:       mov    0x248(%rsp),%rcx
    0.00 :   516832:       xor    %fs:0x28,%rcx
    0.00 :   51683b:       mov    %r13,%rax
    0.00 :   51683e:       jne    517882 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1412>
    0.00 :   516844:       add    $0x258,%rsp
    0.00 :   51684b:       pop    %rbx
    0.00 :   51684c:       pop    %rbp
    0.00 :   51684d:       pop    %r12
    0.00 :   51684f:       pop    %r13
    0.00 :   516851:       pop    %r14
    0.00 :   516853:       pop    %r15
    0.00 :   516855:       retq
    0.00 :   516856:       nopw   %cs:0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516860:       sub    %rcx,%r8
    0.00 :   516863:       xor    %edx,%edx
    0.00 :   516865:       xor    %esi,%esi
    0.00 :   516867:       mov    %rbp,%rdi
    0.00 :   51686a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   51686f:       jmpq   516777 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x307>
    0.00 :   516874:       nopl   0x0(%rax)
         :            template<typename _Tp>
         :            static bool
         :            equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
         :            {
         :            if (const size_t __len = (__last1 - __first1))
         :            return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
    0.00 :   516878:       mov    (%rax),%rdx
    0.00 :   51687b:       mov    0x8(%rax),%rdi
    0.00 :   51687f:       xor    (%rcx),%rdx
    0.00 :   516882:       xor    0x8(%rcx),%rdi
    0.00 :   516886:       or     %rdx,%rdi
    0.00 :   516889:       jne    516529 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xb9>
    0.00 :   51688f:       mov    0x10(%rax),%rdx
    0.00 :   516893:       cmp    0x10(%rcx),%rdx
    0.00 :   516897:       jne    516529 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xb9>
    0.00 :   51689d:       mov    0x10(%rsp),%rcx
    0.00 :   5168a2:       mov    0x18(%rcx),%rdi
    0.00 :   5168a6:       mov    0x20(%rcx),%rcx
    0.00 :   5168aa:       mov    %rcx,%rbp
    0.00 :   5168ad:       mov    %rcx,0x18(%rsp)
    0.00 :   5168b2:       sub    %rdi,%rbp
    0.00 :   5168b5:       cmp    $0x8,%rbp
    0.00 :   5168b9:       je     516b71 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x701>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5168bf:       lea    0xd0(%rsp),%rbx
    0.00 :   5168c7:       lea    0x70(%rbx),%rdi
    0.00 :   5168cb:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5168d0:       mov    0x711251(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5168d7:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   5168d9:       xor    %esi,%esi
    0.00 :   5168db:       mov    %cx,0x220(%rsp)
    0.00 :   5168e3:       movq   $0x0,0x218(%rsp)
    0.00 :   5168ef:       lea    0x10(%r15),%rax
    0.00 :   5168f3:       mov    %rax,0x140(%rsp)
    0.00 :   5168fb:       mov    0x71149e(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   516902:       movq   $0x0,0x228(%rsp)
    0.00 :   51690e:       movq   $0x0,0x230(%rsp)
    0.00 :   51691a:       mov    0x8(%rax),%r14
    0.00 :   51691e:       movq   $0x0,0x238(%rsp)
    0.00 :   51692a:       mov    0x10(%rax),%rax
    0.00 :   51692e:       mov    -0x18(%r14),%rdi
    0.00 :   516932:       mov    %r14,0xd0(%rsp)
    0.00 :   51693a:       movq   $0x0,0x240(%rsp)
    0.00 :   516946:       add    %rbx,%rdi
    0.00 :   516949:       mov    %rax,0x10(%rsp)
    0.00 :   51694e:       mov    %rax,(%rdi)
    0.00 :   516951:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   516956:       mov    0x711403(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   51695d:       lea    0x40(%rbx),%rdi
    0.00 :   516961:       movq   $0x0,0xe0(%rsp)
    0.00 :   51696d:       movq   $0x0,0xe8(%rsp)
    0.00 :   516979:       lea    0x18(%r12),%rax
    0.00 :   51697e:       movq   $0x0,0xf0(%rsp)
    0.00 :   51698a:       mov    %rax,0xd0(%rsp)
    0.00 :   516992:       lea    0x40(%r12),%rax
    0.00 :   516997:       mov    %rax,0x140(%rsp)
    0.00 :   51699f:       mov    0x7112ba(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5169a6:       movq   $0x0,0xf8(%rsp)
    0.00 :   5169b2:       mov    %rax,(%rsp)
    0.00 :   5169b6:       add    $0x10,%rax
    0.00 :   5169ba:       mov    %rax,0xd8(%rsp)
    0.00 :   5169c2:       movq   $0x0,0x100(%rsp)
    0.00 :   5169ce:       movq   $0x0,0x108(%rsp)
    0.00 :   5169da:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5169df:       mov    0x7115f2(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5169e6:       lea    0x8(%rbx),%rsi
    0.00 :   5169ea:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5169ee:       movl   $0x10,0x118(%rsp)
    0.00 :   5169f9:       mov    %rax,0x8(%rsp)
    0.00 :   5169fe:       add    $0x10,%rax
    0.00 :   516a02:       mov    %rax,0xd8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   516a0a:       lea    0x60(%rbx),%rax
    0.00 :   516a0e:       mov    %rax,0x120(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   516a16:       movq   $0x0,0x128(%rsp)
    0.00 :   516a22:       movb   $0x0,0x130(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   516a2a:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   516a2f:       mov    $0x2b,%edx
    0.00 :   516a34:       lea    0x36c0c5(%rip),%rsi        # 882b00 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0xe0>
    0.00 :   516a3b:       mov    %rbx,%rdi
    0.00 :   516a3e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   516a43:       mov    %rbp,%rsi
         :            { return _M_insert(__n); }
    0.00 :   516a46:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516a49:       lea    0xb0(%rsp),%rbp
    0.00 :   516a51:       sar    $0x3,%rsi
    0.00 :   516a55:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   516a5a:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   516a5e:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516a6a:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   516a72:       mov    0x100(%rsp),%rax
    0.00 :   516a7a:       movb   $0x0,0xc0(%rsp)
    0.00 :   516a82:       test   %rax,%rax
    0.00 :   516a85:       je     5171b0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xd40>
         :            if (this->pptr() > this->egptr())
    0.00 :   516a8b:       mov    0xf0(%rsp),%r8
    0.00 :   516a93:       mov    0xf8(%rsp),%rcx
    0.00 :   516a9b:       cmp    %r8,%rax
    0.00 :   516a9e:       jbe    516e80 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xa10>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516aa4:       sub    %rcx,%rax
    0.00 :   516aa7:       xor    %edx,%edx
    0.00 :   516aa9:       xor    %esi,%esi
    0.00 :   516aab:       mov    %rbp,%rdi
    0.00 :   516aae:       mov    %rax,%r8
    0.00 :   516ab1:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   516ab6:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   516abb:       mov    0x120(%rsp),%rdi
    0.00 :   516ac3:       mov    %rax,0xd0(%rsp)
    0.00 :   516acb:       lea    0x40(%r12),%rax
    0.00 :   516ad0:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   516ad8:       mov    0x8(%rsp),%rax
    0.00 :   516add:       add    $0x10,%rax
    0.00 :   516ae1:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   516ae9:       lea    0x60(%rbx),%rax
    0.00 :   516aed:       cmp    %rax,%rdi
    0.00 :   516af0:       je     516af7 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x687>
    0.00 :   516af2:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   516af7:       mov    (%rsp),%rax
    0.00 :   516afb:       lea    0x40(%rbx),%rdi
    0.00 :   516aff:       add    $0x10,%rax
    0.00 :   516b03:       mov    %rax,0xd8(%rsp)
    0.00 :   516b0b:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   516b10:       mov    -0x18(%r14),%rax
    0.00 :   516b14:       mov    0x10(%rsp),%rcx
    0.00 :   516b19:       mov    %r14,0xd0(%rsp)
         :            ~basic_ios() { }
    0.00 :   516b21:       lea    0x70(%rbx),%rdi
    0.00 :   516b25:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   516b2d:       lea    0x10(%r15),%rax
    0.00 :   516b31:       mov    %rax,0x140(%rsp)
    0.00 :   516b39:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   516b3e:       mov    %rbp,%rcx
    0.00 :   516b41:       mov    $0x2,%edx
    0.00 :   516b46:       mov    %r13,%rdi
    0.00 :   516b49:       mov    $0x2,%esi
    0.00 :   516b4e:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   516b53:       jmpq   516814 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3a4>
    0.00 :   516b58:       nopl   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   516b60:       lea    0x50(%rbx),%rsi
    0.00 :   516b64:       mov    %rbp,%rdi
    0.00 :   516b67:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   516b6c:       jmpq   516777 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x307>
    0.00 :   516b71:       mov    %rdx,%rcx
    0.00 :   516b74:       cmp    %rdx,(%rdi)
    0.00 :   516b77:       je     516bc0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x750>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516b79:       lea    0xd0(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516b81:       lea    0x36bfd8(%rip),%rdx        # 882b60 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x140>
    0.00 :   516b88:       lea    -0x30(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516b8c:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516b90:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516b93:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516b9b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   516ba0:       mov    %rbx,%rcx
    0.00 :   516ba3:       mov    $0x2,%edx
    0.00 :   516ba8:       mov    %r13,%rdi
    0.00 :   516bab:       mov    $0x2,%esi
    0.00 :   516bb0:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   516bb5:       jmpq   516565 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xf5>
    0.00 :   516bba:       nopw   0x0(%rax,%rax,1)
    0.00 :   516bc0:       test   %rbx,%rbx
    0.00 :   516bc3:       je     516e98 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xa28>
    0.00 :   516bc9:       mov    0x18(%rbx),%rdi
    0.00 :   516bcd:       mov    0x20(%rbx),%rbp
    0.00 :   516bd1:       sub    %rdi,%rbp
    0.00 :   516bd4:       cmp    $0x8,%rbp
    0.00 :   516bd8:       je     517160 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xcf0>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   516bde:       lea    0xd0(%rsp),%rbx
    0.00 :   516be6:       lea    0x70(%rbx),%rdi
    0.00 :   516bea:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   516bef:       mov    0x710f32(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516bf6:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   516bf8:       xor    %esi,%esi
    0.00 :   516bfa:       mov    %dx,0x220(%rsp)
    0.00 :   516c02:       movq   $0x0,0x218(%rsp)
    0.00 :   516c0e:       lea    0x10(%r15),%rax
    0.00 :   516c12:       mov    %rax,0x140(%rsp)
    0.00 :   516c1a:       mov    0x71117f(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   516c21:       movq   $0x0,0x228(%rsp)
    0.00 :   516c2d:       movq   $0x0,0x230(%rsp)
    0.00 :   516c39:       mov    0x8(%rax),%r14
    0.00 :   516c3d:       movq   $0x0,0x238(%rsp)
    0.00 :   516c49:       mov    0x10(%rax),%rax
    0.00 :   516c4d:       mov    -0x18(%r14),%rdi
    0.00 :   516c51:       mov    %r14,0xd0(%rsp)
    0.00 :   516c59:       movq   $0x0,0x240(%rsp)
    0.00 :   516c65:       add    %rbx,%rdi
    0.00 :   516c68:       mov    %rax,0x10(%rsp)
    0.00 :   516c6d:       mov    %rax,(%rdi)
    0.00 :   516c70:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   516c75:       mov    0x7110e4(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   516c7c:       lea    0x40(%rbx),%rdi
    0.00 :   516c80:       movq   $0x0,0xe0(%rsp)
    0.00 :   516c8c:       movq   $0x0,0xe8(%rsp)
    0.00 :   516c98:       lea    0x18(%r12),%rax
    0.00 :   516c9d:       movq   $0x0,0xf0(%rsp)
    0.00 :   516ca9:       mov    %rax,0xd0(%rsp)
    0.00 :   516cb1:       lea    0x40(%r12),%rax
    0.00 :   516cb6:       mov    %rax,0x140(%rsp)
    0.00 :   516cbe:       mov    0x710f9b(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516cc5:       movq   $0x0,0xf8(%rsp)
    0.00 :   516cd1:       mov    %rax,(%rsp)
    0.00 :   516cd5:       add    $0x10,%rax
    0.00 :   516cd9:       mov    %rax,0xd8(%rsp)
    0.00 :   516ce1:       movq   $0x0,0x100(%rsp)
    0.00 :   516ced:       movq   $0x0,0x108(%rsp)
    0.00 :   516cf9:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   516cfe:       mov    0x7112d3(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   516d05:       lea    0x8(%rbx),%rsi
    0.00 :   516d09:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   516d0d:       movl   $0x10,0x118(%rsp)
    0.00 :   516d18:       mov    %rax,0x8(%rsp)
    0.00 :   516d1d:       add    $0x10,%rax
    0.00 :   516d21:       mov    %rax,0xd8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   516d29:       lea    0x60(%rbx),%rax
    0.00 :   516d2d:       mov    %rax,0x120(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   516d35:       movq   $0x0,0x128(%rsp)
    0.00 :   516d41:       movb   $0x0,0x130(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   516d49:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   516d4e:       mov    $0x2a,%edx
    0.00 :   516d53:       lea    0x36be0e(%rip),%rsi        # 882b68 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x148>
    0.00 :   516d5a:       mov    %rbx,%rdi
    0.00 :   516d5d:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   516d62:       mov    %rbp,%rsi
         :            { return _M_insert(__n); }
    0.00 :   516d65:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516d68:       lea    0xb0(%rsp),%rbp
    0.00 :   516d70:       sar    $0x3,%rsi
    0.00 :   516d74:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   516d79:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   516d7d:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516d89:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   516d91:       mov    0x100(%rsp),%rax
    0.00 :   516d99:       movb   $0x0,0xc0(%rsp)
    0.00 :   516da1:       test   %rax,%rax
    0.00 :   516da4:       je     517460 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xff0>
         :            if (this->pptr() > this->egptr())
    0.00 :   516daa:       mov    0xf0(%rsp),%r8
    0.00 :   516db2:       mov    0xf8(%rsp),%rcx
    0.00 :   516dba:       cmp    %r8,%rax
    0.00 :   516dbd:       jbe    517438 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfc8>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516dc3:       sub    %rcx,%rax
    0.00 :   516dc6:       xor    %edx,%edx
    0.00 :   516dc8:       xor    %esi,%esi
    0.00 :   516dca:       mov    %rbp,%rdi
    0.00 :   516dcd:       mov    %rax,%r8
    0.00 :   516dd0:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   516dd5:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   516dda:       mov    0x120(%rsp),%rdi
    0.00 :   516de2:       mov    %rax,0xd0(%rsp)
    0.00 :   516dea:       lea    0x40(%r12),%rax
    0.00 :   516def:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   516df7:       mov    0x8(%rsp),%rax
    0.00 :   516dfc:       add    $0x10,%rax
    0.00 :   516e00:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   516e08:       lea    0x60(%rbx),%rax
    0.00 :   516e0c:       cmp    %rax,%rdi
    0.00 :   516e0f:       je     516e16 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x9a6>
    0.00 :   516e11:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   516e16:       mov    (%rsp),%rax
    0.00 :   516e1a:       lea    0x40(%rbx),%rdi
    0.00 :   516e1e:       add    $0x10,%rax
    0.00 :   516e22:       mov    %rax,0xd8(%rsp)
    0.00 :   516e2a:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   516e2f:       mov    -0x18(%r14),%rax
    0.00 :   516e33:       mov    0x10(%rsp),%rcx
    0.00 :   516e38:       mov    %r14,0xd0(%rsp)
         :            ~basic_ios() { }
    0.00 :   516e40:       lea    0x70(%rbx),%rdi
    0.00 :   516e44:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   516e4c:       lea    0x10(%r15),%rax
    0.00 :   516e50:       mov    %rax,0x140(%rsp)
    0.00 :   516e58:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   516e5d:       mov    %rbp,%rcx
    0.00 :   516e60:       mov    $0x2,%edx
    0.00 :   516e65:       mov    %r13,%rdi
    0.00 :   516e68:       mov    $0x2,%esi
    0.00 :   516e6d:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   516e72:       jmpq   516814 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3a4>
    0.00 :   516e77:       nopw   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516e80:       sub    %rcx,%r8
    0.00 :   516e83:       xor    %edx,%edx
    0.00 :   516e85:       xor    %esi,%esi
    0.00 :   516e87:       mov    %rbp,%rdi
    0.00 :   516e8a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   516e8f:       jmpq   516ab6 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x646>
    0.00 :   516e94:       nopl   0x0(%rax)
    0.00 :   516e98:       mov    (%rsp),%rdi
    0.00 :   516e9c:       test   %rdi,%rdi
    0.00 :   516e9f:       je     517210 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xda0>
    0.00 :   516ea5:       mov    0x18(%rdi),%rdx
    0.00 :   516ea9:       mov    0x20(%rdi),%rdi
    0.00 :   516ead:       mov    %rdi,%rbp
    0.00 :   516eb0:       mov    %rdi,0x18(%rsp)
    0.00 :   516eb5:       sub    %rdx,%rbp
    0.00 :   516eb8:       cmp    $0x8,%rbp
    0.00 :   516ebc:       je     5171c8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xd58>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   516ec2:       lea    0xd0(%rsp),%rbx
    0.00 :   516eca:       lea    0x70(%rbx),%rdi
    0.00 :   516ece:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   516ed3:       mov    0x710c4e(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            { this->init(0); }
    0.00 :   516eda:       xor    %esi,%esi
    0.00 :   516edc:       movq   $0x0,0x218(%rsp)
    0.00 :   516ee8:       movq   $0x0,0x228(%rsp)
    0.00 :   516ef4:       movq   $0x0,0x230(%rsp)
    0.00 :   516f00:       lea    0x10(%r15),%rax
    0.00 :   516f04:       mov    %rax,0x140(%rsp)
    0.00 :   516f0c:       xor    %eax,%eax
    0.00 :   516f0e:       mov    %ax,0x220(%rsp)
    0.00 :   516f16:       mov    0x710e83(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   516f1d:       movq   $0x0,0x238(%rsp)
    0.00 :   516f29:       movq   $0x0,0x240(%rsp)
    0.00 :   516f35:       mov    0x8(%rax),%r14
    0.00 :   516f39:       mov    0x10(%rax),%rax
    0.00 :   516f3d:       mov    -0x18(%r14),%rdi
    0.00 :   516f41:       mov    %r14,0xd0(%rsp)
    0.00 :   516f49:       mov    %rax,0x10(%rsp)
    0.00 :   516f4e:       add    %rbx,%rdi
    0.00 :   516f51:       mov    %rax,(%rdi)
    0.00 :   516f54:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   516f59:       mov    0x710e00(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   516f60:       lea    0x40(%rbx),%rdi
    0.00 :   516f64:       movq   $0x0,0xe0(%rsp)
    0.00 :   516f70:       movq   $0x0,0xe8(%rsp)
    0.00 :   516f7c:       lea    0x18(%r12),%rax
    0.00 :   516f81:       movq   $0x0,0xf0(%rsp)
    0.00 :   516f8d:       mov    %rax,0xd0(%rsp)
    0.00 :   516f95:       lea    0x40(%r12),%rax
    0.00 :   516f9a:       mov    %rax,0x140(%rsp)
    0.00 :   516fa2:       mov    0x710cb7(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516fa9:       movq   $0x0,0xf8(%rsp)
    0.00 :   516fb5:       mov    %rax,(%rsp)
    0.00 :   516fb9:       add    $0x10,%rax
    0.00 :   516fbd:       mov    %rax,0xd8(%rsp)
    0.00 :   516fc5:       movq   $0x0,0x100(%rsp)
    0.00 :   516fd1:       movq   $0x0,0x108(%rsp)
    0.00 :   516fdd:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   516fe2:       mov    0x710fef(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   516fe9:       lea    0x8(%rbx),%rsi
    0.00 :   516fed:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   516ff1:       movl   $0x10,0x118(%rsp)
    0.00 :   516ffc:       mov    %rax,0x8(%rsp)
    0.00 :   517001:       add    $0x10,%rax
    0.00 :   517005:       mov    %rax,0xd8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   51700d:       lea    0x60(%rbx),%rax
    0.00 :   517011:       mov    %rax,0x120(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   517019:       movq   $0x0,0x128(%rsp)
    0.00 :   517025:       movb   $0x0,0x130(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   51702d:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   517032:       mov    $0x2a,%edx
    0.00 :   517037:       lea    0x36bb8a(%rip),%rsi        # 882bc8 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x1a8>
    0.00 :   51703e:       mov    %rbx,%rdi
    0.00 :   517041:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   517046:       mov    %rbp,%rsi
         :            { return _M_insert(__n); }
    0.00 :   517049:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51704c:       lea    0xb0(%rsp),%rbp
    0.00 :   517054:       sar    $0x3,%rsi
    0.00 :   517058:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   51705d:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   517061:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51706d:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   517075:       mov    0x100(%rsp),%rax
    0.00 :   51707d:       movb   $0x0,0xc0(%rsp)
    0.00 :   517085:       test   %rax,%rax
    0.00 :   517088:       je     517600 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1190>
         :            if (this->pptr() > this->egptr())
    0.00 :   51708e:       mov    0xf0(%rsp),%r8
    0.00 :   517096:       mov    0xf8(%rsp),%rcx
    0.00 :   51709e:       cmp    %r8,%rax
    0.00 :   5170a1:       jbe    51744c <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfdc>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5170a7:       sub    %rcx,%rax
    0.00 :   5170aa:       xor    %edx,%edx
    0.00 :   5170ac:       xor    %esi,%esi
    0.00 :   5170ae:       mov    %rbp,%rdi
    0.00 :   5170b1:       mov    %rax,%r8
    0.00 :   5170b4:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   5170b9:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5170be:       mov    0x120(%rsp),%rdi
    0.00 :   5170c6:       mov    %rax,0xd0(%rsp)
    0.00 :   5170ce:       lea    0x40(%r12),%rax
    0.00 :   5170d3:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5170db:       mov    0x8(%rsp),%rax
    0.00 :   5170e0:       add    $0x10,%rax
    0.00 :   5170e4:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   5170ec:       lea    0x60(%rbx),%rax
    0.00 :   5170f0:       cmp    %rax,%rdi
    0.00 :   5170f3:       je     5170fa <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xc8a>
    0.00 :   5170f5:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5170fa:       mov    (%rsp),%rax
    0.00 :   5170fe:       lea    0x40(%rbx),%rdi
    0.00 :   517102:       add    $0x10,%rax
    0.00 :   517106:       mov    %rax,0xd8(%rsp)
    0.00 :   51710e:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   517113:       mov    -0x18(%r14),%rax
    0.00 :   517117:       mov    0x10(%rsp),%rcx
    0.00 :   51711c:       mov    %r14,0xd0(%rsp)
         :            ~basic_ios() { }
    0.00 :   517124:       lea    0x70(%rbx),%rdi
    0.00 :   517128:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   517130:       lea    0x10(%r15),%rax
    0.00 :   517134:       mov    %rax,0x140(%rsp)
    0.00 :   51713c:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   517141:       mov    %rbp,%rcx
    0.00 :   517144:       mov    $0x2,%edx
    0.00 :   517149:       mov    %r13,%rdi
    0.00 :   51714c:       mov    $0x2,%esi
    0.00 :   517151:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517156:       jmpq   516814 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3a4>
    0.00 :   51715b:       nopl   0x0(%rax,%rax,1)
    0.00 :   517160:       cmp    (%rdi),%rdx
    0.00 :   517163:       je     516e98 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xa28>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   517169:       lea    0xd0(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   517171:       lea    0x36ba4f(%rip),%rdx        # 882bc7 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x1a7>
    0.00 :   517178:       lea    -0x2f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51717c:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   517180:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   517183:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   51718b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   517190:       mov    %rbx,%rcx
    0.00 :   517193:       mov    $0x2,%edx
    0.00 :   517198:       mov    %r13,%rdi
    0.00 :   51719b:       mov    $0x2,%esi
    0.00 :   5171a0:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5171a5:       jmpq   516565 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xf5>
    0.00 :   5171aa:       nopw   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   5171b0:       lea    0x50(%rbx),%rsi
    0.00 :   5171b4:       mov    %rbp,%rdi
    0.00 :   5171b7:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5171bc:       jmpq   516ab6 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x646>
    0.00 :   5171c1:       nopl   0x0(%rax)
    0.00 :   5171c8:       cmp    (%rdx),%rcx
    0.00 :   5171cb:       je     517210 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xda0>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5171cd:       lea    0xd0(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5171d5:       lea    0x36ba4b(%rip),%rdx        # 882c27 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x207>
    0.00 :   5171dc:       lea    -0x2f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5171e0:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5171e4:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5171e7:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5171ef:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5171f4:       mov    %rbx,%rcx
    0.00 :   5171f7:       mov    $0x2,%edx
    0.00 :   5171fc:       mov    %r13,%rdi
    0.00 :   5171ff:       mov    $0x2,%esi
    0.00 :   517204:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517209:       jmpq   516565 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xf5>
    0.00 :   51720e:       xchg   %ax,%ax
    0.00 :   517210:       mov    (%rax),%rdx
    0.00 :   517213:       imul   0x8(%rax),%rdx
    0.00 :   517218:       mov    %rcx,0x28(%rsp)
    0.00 :   51721d:       mov    0x30(%r12),%rax
    0.00 :   517222:       cmpl   $0x1,0x8(%rax)
    0.00 :   517226:       jne    5179ca <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x155a>
    0.00 :   51722c:       mov    0x30(%r14),%rdi
    0.00 :   517230:       mov    0x50(%r12),%rax
    0.00 :   517235:       add    (%r12),%rax
    0.00 :   517239:       cmpl   $0x1,0x8(%rdi)
    0.00 :   51723d:       mov    %rax,0x30(%rsp)
    0.00 :   517242:       jne    5178f4 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1484>
    0.00 :   517248:       mov    0x10(%rsp),%r11
    0.00 :   51724d:       mov    0x50(%r14),%rdi
    0.00 :   517251:       add    (%r14),%rdi
    0.00 :   517254:       mov    0x30(%r11),%r8
    0.00 :   517258:       mov    %rdi,0x38(%rsp)
    0.00 :   51725d:       cmpl   $0x1,0x8(%r8)
    0.00 :   517262:       jne    517be7 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1777>
    0.00 :   517268:       mov    0x10(%rsp),%r10
    0.00 :   51726d:       mov    0x50(%r10),%r8
    0.00 :   517271:       add    (%r10),%r8
    0.00 :   517274:       mov    %r8,0x40(%rsp)
    0.00 :   517279:       test   %rbx,%rbx
    0.00 :   51727c:       je     517297 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xe27>
    0.00 :   51727e:       mov    0x30(%rbx),%r8
    0.00 :   517282:       cmpl   $0x1,0x8(%r8)
    0.00 :   517287:       jne    517aa1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1631>
    0.00 :   51728d:       mov    0x50(%rbx),%r8
    0.00 :   517291:       add    (%rbx),%r8
    0.00 :   517294:       mov    %r8,%rbx
    0.00 :   517297:       mov    %rbx,0x48(%rsp)
    0.00 :   51729c:       mov    (%rsp),%rbx
    0.00 :   5172a0:       test   %rbx,%rbx
    0.00 :   5172a3:       je     5172c3 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xe53>
    0.00 :   5172a5:       mov    0x30(%rbx),%r8
    0.00 :   5172a9:       cmpl   $0x1,0x8(%r8)
    0.00 :   5172ae:       jne    517c8b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x181b>
    0.00 :   5172b4:       mov    (%rsp),%rbx
    0.00 :   5172b8:       mov    0x50(%rbx),%r8
    0.00 :   5172bc:       add    (%rbx),%r8
    0.00 :   5172bf:       mov    %r8,(%rsp)
    0.00 :   5172c3:       mov    0x30(%rsi),%r8
    0.00 :   5172c7:       mov    (%rsp),%rbx
    0.00 :   5172cb:       cmpl   $0x1,0x8(%r8)
    0.00 :   5172d0:       mov    %rbx,0x50(%rsp)
    0.00 :   5172d5:       jne    517b40 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x16d0>
    0.00 :   5172db:       mov    0x50(%rsi),%rbx
    0.00 :   5172df:       add    (%rsi),%rbx
    0.00 :   5172e2:       lea    0x28(%rsp),%rsi
    0.00 :   5172e7:       movslq %edx,%rdx
    0.00 :   5172ea:       mov    %rsi,0x70(%rsp)
    0.00 :   5172ef:       mov    0x8(%rsp),%rsi
    0.00 :   5172f4:       mov    0x18(%r15),%rbp
    0.00 :   5172f8:       mov    %rbx,0x58(%rsp)
    0.00 :   5172fd:       mov    %rsi,0x78(%rsp)
    0.00 :   517302:       lea    0x30(%rsp),%rsi
    0.00 :   517307:       mov    %rsi,0x80(%rsp)
    0.00 :   51730f:       lea    0x38(%rsp),%rsi
    0.00 :   517314:       mov    %rsi,0x88(%rsp)
    0.00 :   51731c:       lea    0x58(%rsp),%rsi
    0.00 :   517321:       mov    %rsi,0x90(%rsp)
    0.00 :   517329:       lea    0x50(%rsp),%rsi
    0.00 :   51732e:       mov    %rsi,0x98(%rsp)
    0.00 :   517336:       lea    0x48(%rsp),%rsi
    0.00 :   51733b:       mov    %rsi,0xa0(%rsp)
    0.00 :   517343:       lea    0x40(%rsp),%rsi
    0.00 :   517348:       mov    %rsi,0xa8(%rsp)
    0.00 :   517350:       mov    %rdx,0x60(%rsp)
    0.00 :   517355:       movq   $0x0,0x68(%rsp)
    0.00 :   51735e:       test   %rbp,%rbp
    0.00 :   517361:       je     517611 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x11a1>
    0.00 :   517367:       test   %rdx,%rdx
    0.00 :   51736a:       jle    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
    0.00 :   517370:       cmp    $0x1,%rdx
    0.00 :   517374:       je     5177b8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1348>
    0.00 :   51737a:       mov    %rbp,%rdi
    0.00 :   51737d:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            if (__b < __a)
    0.00 :   517382:       mov    0x60(%rsp),%rdx
    0.00 :   517387:       cltq
    0.00 :   517389:       cmp    %rdx,%rax
    0.00 :   51738c:       cmovg  %rdx,%rax
    0.00 :   517390:       mov    %rax,0x68(%rsp)
    0.00 :   517395:       cmp    $0x1,%rax
    0.00 :   517399:       jle    517471 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1001>
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
         :            { ::new (__functor._M_access()) _Functor(std::move(__f)); }
         :
         :            static void
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   51739f:       mov    $0x18,%edi
         :            };
         :
         :            _Function_base() : _M_manager(nullptr) { }
    0.00 :   5173a4:       movq   $0x0,0xe0(%rsp)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   5173b0:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5173b5:       lea    0x68(%rsp),%rdx
    0.00 :   5173ba:       mov    %rax,0xd0(%rsp)
    0.00 :   5173c2:       mov    0x68(%rsp),%rsi
    0.00 :   5173c7:       mov    %rbp,%rdi
    0.00 :   5173ca:       mov    %rdx,(%rax)
    0.00 :   5173cd:       lea    0x60(%rsp),%rdx
    0.00 :   5173d2:       lea    0xd0(%rsp),%rbx
    0.00 :   5173da:       mov    %rdx,0x8(%rax)
    0.00 :   5173de:       lea    0x70(%rsp),%rdx
    0.00 :   5173e3:       mov    %rdx,0x10(%rax)
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   5173e7:       lea    -0x1c3e(%rip),%rax        # 5157b0 <std::_Function_handler<void (long), onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   5173ee:       mov    %rbx,%rdx
    0.00 :   5173f1:       mov    %rax,0xe8(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   5173f9:       lea    -0x1ed0(%rip),%rax        # 515530 <std::_Function_base::_Base_manager<onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_manager(std::_Any_data&, onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1} const&, std::_Manager_operation)>
    0.00 :   517400:       mov    %rax,0xe0(%rsp)
    0.00 :   517408:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
         :            if (_M_manager)
    0.00 :   51740d:       mov    0xe0(%rsp),%rax
    0.00 :   517415:       test   %rax,%rax
    0.00 :   517418:       je     517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   51741a:       mov    $0x3,%edx
    0.00 :   51741f:       mov    %rbx,%rsi
    0.00 :   517422:       mov    %rbx,%rdi
    0.00 :   517425:       callq  *%rax
    0.00 :   517427:       movq   $0x0,0x0(%r13)
         :            };
         :
         :            template<std::size_t _Idx, typename _Head>
         :            struct _Head_base<_Idx, _Head, false>
         :            {
         :            constexpr _Head_base()
    0.00 :   51742f:       jmpq   51682a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3ba>
    0.00 :   517434:       nopl   0x0(%rax)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   517438:       sub    %rcx,%r8
    0.00 :   51743b:       xor    %edx,%edx
    0.00 :   51743d:       xor    %esi,%esi
    0.00 :   51743f:       mov    %rbp,%rdi
    0.00 :   517442:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   517447:       jmpq   516dd5 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x965>
    0.00 :   51744c:       sub    %rcx,%r8
    0.00 :   51744f:       xor    %edx,%edx
    0.00 :   517451:       xor    %esi,%esi
    0.00 :   517453:       mov    %rbp,%rdi
    0.00 :   517456:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   51745b:       jmpq   5170b9 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xc49>
         :            this->_M_assign(__str);
    0.00 :   517460:       lea    0x50(%rbx),%rsi
    0.00 :   517464:       mov    %rbp,%rdi
    0.00 :   517467:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   51746c:       jmpq   516dd5 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x965>
    0.00 :   517471:       test   %rdx,%rdx
    0.00 :   517474:       jle    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
    0.00 :   517476:       mov    0x70(%rsp),%r8
    0.00 :   51747b:       xor    %ebp,%ebp
    0.00 :   51747d:       pxor   %xmm1,%xmm1
    0.00 :   517481:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   517488:       mov    (%r8),%rcx
    0.00 :   51748b:       mov    %rbp,%rsi
    0.00 :   51748e:       pxor   %xmm4,%xmm4
    0.00 :   517492:       mov    0x78(%rsp),%r9
    0.00 :   517497:       mov    0x80(%rsp),%rax
    0.00 :   51749f:       mov    0x88(%rsp),%rdx
    0.00 :   5174a7:       imul   %rcx,%rsi
    0.00 :   5174ab:       mov    (%rax),%rdi
    0.00 :   5174ae:       cvtsi2ss %rcx,%xmm4
    0.00 :   5174b3:       lea    0x0(,%rsi,4),%rax
    0.00 :   5174bb:       mov    (%rdx),%rsi
    0.00 :   5174be:       mov    0x90(%rsp),%rdx
    0.00 :   5174c6:       mov    (%rdx),%rbx
    0.00 :   5174c9:       add    %rax,%rbx
    0.00 :   5174cc:       test   %rcx,%rcx
    0.00 :   5174cf:       jle    51759e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x112e>
    0.00 :   5174d5:       add    %rax,%rdi
    0.00 :   5174d8:       pxor   %xmm2,%xmm2
    0.00 :   5174dc:       pxor   %xmm3,%xmm3
    0.00 :   5174e0:       add    %rax,%rsi
    0.00 :   5174e3:       mov    0x98(%rsp),%rdx
    0.00 :   5174eb:       xor    %eax,%eax
    0.00 :   5174ed:       mov    (%rdx),%rdx
    0.00 :   5174f0:       movss  (%rdi,%rax,4),%xmm0
    0.00 :   5174f5:       addss  (%rsi,%rax,4),%xmm0
    0.00 :   5174fa:       test   %rdx,%rdx
    0.00 :   5174fd:       je     517504 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1094>
    0.00 :   5174ff:       addss  (%rdx,%rax,4),%xmm0
    0.00 :   517504:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   517509:       addss  %xmm0,%xmm3
    0.00 :   51750d:       mulss  %xmm0,%xmm0
    0.00 :   517511:       add    $0x1,%rax
    0.00 :   517515:       addss  %xmm0,%xmm2
    0.00 :   517519:       cmp    %rax,%rcx
    0.00 :   51751c:       jne    5174f0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1080>
    0.00 :   51751e:       divss  %xmm4,%xmm3
    0.00 :   517522:       divss  %xmm4,%xmm2
    0.00 :   517526:       movaps %xmm3,%xmm0
    0.00 :   517529:       mulss  %xmm3,%xmm0
    0.00 :   51752d:       subss  %xmm0,%xmm2
    0.00 :   517531:       addss  0x10(%r9),%xmm2
    0.00 :   517537:       ucomiss %xmm2,%xmm1
    0.00 :   51753a:       sqrtss %xmm2,%xmm4
    0.00 :   51753e:       ja     5175c2 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1152>
    0.00 :   517544:       mov    0xa0(%rsp),%rax
    0.00 :   51754c:       mov    (%rax),%rdx
    0.00 :   51754f:       mov    0xa8(%rsp),%rax
    0.00 :   517557:       mov    (%rax),%rsi
    0.00 :   51755a:       xor    %eax,%eax
    0.00 :   51755c:       nopl   0x0(%rax)
    0.00 :   517560:       movss  (%rbx,%rax,4),%xmm0
    0.00 :   517565:       subss  %xmm3,%xmm0
    0.00 :   517569:       divss  %xmm4,%xmm0
    0.00 :   51756d:       mulss  (%rsi,%rax,4),%xmm0
    0.00 :   517572:       test   %rdx,%rdx
    0.00 :   517575:       je     51757c <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x110c>
    0.00 :   517577:       addss  (%rdx,%rax,4),%xmm0
    0.00 :   51757c:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   517581:       add    $0x1,%rax
    0.00 :   517585:       cmp    %rax,%rcx
    0.00 :   517588:       jg     517560 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x10f0>
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   51758a:       add    $0x1,%rbp
    0.00 :   51758e:       cmp    %rbp,0x60(%rsp)
    0.00 :   517593:       jg     517488 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1018>
    0.00 :   517599:       jmpq   517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   51759e:       movaps %xmm1,%xmm3
    0.00 :   5175a1:       divss  %xmm4,%xmm3
    0.00 :   5175a5:       movaps %xmm3,%xmm0
    0.00 :   5175a8:       movaps %xmm3,%xmm2
    0.00 :   5175ab:       mulss  %xmm3,%xmm0
    0.00 :   5175af:       subss  %xmm0,%xmm2
    0.00 :   5175b3:       addss  0x10(%r9),%xmm2
    0.00 :   5175b9:       ucomiss %xmm2,%xmm1
    0.00 :   5175bc:       jbe    51758a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x111a>
    0.00 :   5175be:       sqrtss %xmm2,%xmm4
    0.00 :   5175c2:       movaps %xmm2,%xmm0
    0.00 :   5175c5:       movss  %xmm1,0x10(%rsp)
    0.00 :   5175cb:       movss  %xmm4,0x8(%rsp)
    0.00 :   5175d1:       movss  %xmm3,(%rsp)
    0.00 :   5175d6:       callq  53cd0 <sqrtf@plt>
    0.00 :   5175db:       mov    0x70(%rsp),%r8
    0.00 :   5175e0:       movss  (%rsp),%xmm3
    0.00 :   5175e5:       movss  0x8(%rsp),%xmm4
    0.00 :   5175eb:       movss  0x10(%rsp),%xmm1
    0.00 :   5175f1:       mov    (%r8),%rcx
    0.00 :   5175f4:       test   %rcx,%rcx
    0.00 :   5175f7:       jg     517544 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x10d4>
    0.00 :   5175fd:       jmp    51758a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x111a>
    0.00 :   5175ff:       nop
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   517600:       lea    0x50(%rbx),%rsi
    0.00 :   517604:       mov    %rbp,%rdi
    0.00 :   517607:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   51760c:       jmpq   5170b9 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xc49>
    0.00 :   517611:       xor    %ebp,%ebp
    0.00 :   517613:       pxor   %xmm1,%xmm1
    0.00 :   517617:       test   %rdx,%rdx
    0.00 :   51761a:       jle    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   517620:       mov    %rcx,%rsi
    0.00 :   517623:       pxor   %xmm4,%xmm4
    0.00 :   517627:       imul   %rbp,%rsi
    0.00 :   51762b:       cvtsi2ss %rcx,%xmm4
    0.00 :   517630:       shl    $0x2,%rsi
    0.00 :   517634:       add    %rsi,%rbx
    0.00 :   517637:       test   %rcx,%rcx
    0.00 :   51763a:       jle    517749 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x12d9>
    0.00 :   517640:       mov    0x98(%rsp),%rdx
    0.00 :   517648:       lea    (%rax,%rsi,1),%r8
    0.00 :   51764c:       pxor   %xmm2,%xmm2
    0.00 :   517650:       add    %rdi,%rsi
    0.00 :   517653:       pxor   %xmm3,%xmm3
    0.00 :   517657:       xor    %eax,%eax
    0.00 :   517659:       mov    (%rdx),%rdx
    0.00 :   51765c:       nopl   0x0(%rax)
    0.00 :   517660:       movss  (%r8,%rax,4),%xmm0
    0.00 :   517666:       addss  (%rsi,%rax,4),%xmm0
    1.50 :   51766b:       test   %rdx,%rdx
    0.00 :   51766e:       je     517675 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1205>
    0.00 :   517670:       addss  (%rdx,%rax,4),%xmm0
   23.19 :   517675:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   51767a:       addss  %xmm0,%xmm3
    2.10 :   51767e:       mulss  %xmm0,%xmm0
    0.00 :   517682:       add    $0x1,%rax
   10.05 :   517686:       addss  %xmm0,%xmm2
   61.37 :   51768a:       cmp    %rax,%rcx
    0.00 :   51768d:       jne    517660 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x11f0>
    0.00 :   51768f:       divss  %xmm4,%xmm3
    0.00 :   517693:       mov    0x8(%rsp),%rcx
    0.00 :   517698:       divss  %xmm4,%xmm2
    0.00 :   51769c:       movaps %xmm3,%xmm0
    0.00 :   51769f:       mulss  %xmm3,%xmm0
    0.00 :   5176a3:       subss  %xmm0,%xmm2
    0.00 :   5176a7:       addss  0x10(%rcx),%xmm2
    0.00 :   5176ac:       ucomiss %xmm2,%xmm1
    0.00 :   5176af:       sqrtss %xmm2,%xmm4
    0.00 :   5176b3:       ja     517771 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1301>
    0.00 :   5176b9:       mov    0xa0(%rsp),%rdx
    0.00 :   5176c1:       mov    (%rdx),%rcx
    0.00 :   5176c4:       mov    0xa8(%rsp),%rdx
    0.00 :   5176cc:       mov    (%rdx),%rsi
    0.00 :   5176cf:       xor    %edx,%edx
    0.00 :   5176d1:       nopl   0x0(%rax)
    0.00 :   5176d8:       movss  (%rbx,%rdx,4),%xmm0
    0.00 :   5176dd:       subss  %xmm3,%xmm0
    0.00 :   5176e1:       divss  %xmm4,%xmm0
    0.00 :   5176e5:       mulss  (%rsi,%rdx,4),%xmm0
    0.00 :   5176ea:       test   %rcx,%rcx
    0.00 :   5176ed:       je     5176f4 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1284>
    0.00 :   5176ef:       addss  (%rcx,%rdx,4),%xmm0
    1.79 :   5176f4:       movss  %xmm0,(%rbx,%rdx,4)
    0.00 :   5176f9:       add    $0x1,%rdx
    0.00 :   5176fd:       cmp    %rax,%rdx
    0.00 :   517700:       jl     5176d8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1268>
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   517702:       add    $0x1,%rbp
    0.00 :   517706:       cmp    %rbp,0x60(%rsp)
    0.00 :   51770b:       jle    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
    0.00 :   517711:       mov    0x70(%rsp),%rdx
    0.00 :   517716:       mov    0x80(%rsp),%rax
    0.00 :   51771e:       mov    (%rdx),%rcx
    0.00 :   517721:       mov    0x88(%rsp),%rdx
    0.00 :   517729:       mov    (%rax),%rax
    0.00 :   51772c:       mov    (%rdx),%rdi
    0.00 :   51772f:       mov    0x90(%rsp),%rdx
    0.00 :   517737:       mov    (%rdx),%rbx
    0.00 :   51773a:       mov    0x78(%rsp),%rdx
    0.00 :   51773f:       mov    %rdx,0x8(%rsp)
    0.00 :   517744:       jmpq   517620 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x11b0>
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   517749:       movaps %xmm1,%xmm3
    0.00 :   51774c:       mov    0x8(%rsp),%rax
    0.00 :   517751:       divss  %xmm4,%xmm3
    0.00 :   517755:       movaps %xmm3,%xmm0
    0.00 :   517758:       movaps %xmm3,%xmm2
    0.00 :   51775b:       mulss  %xmm3,%xmm0
    0.00 :   51775f:       subss  %xmm0,%xmm2
    0.00 :   517763:       addss  0x10(%rax),%xmm2
    0.00 :   517768:       ucomiss %xmm2,%xmm1
    0.00 :   51776b:       jbe    517702 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1292>
    0.00 :   51776d:       sqrtss %xmm2,%xmm4
    0.00 :   517771:       movaps %xmm2,%xmm0
    0.00 :   517774:       movss  %xmm1,0x10(%rsp)
    0.00 :   51777a:       movss  %xmm4,0x8(%rsp)
    0.00 :   517780:       movss  %xmm3,(%rsp)
    0.00 :   517785:       callq  53cd0 <sqrtf@plt>
    0.00 :   51778a:       mov    0x70(%rsp),%rax
    0.00 :   51778f:       movss  (%rsp),%xmm3
    0.00 :   517794:       movss  0x8(%rsp),%xmm4
    0.00 :   51779a:       movss  0x10(%rsp),%xmm1
    0.00 :   5177a0:       mov    (%rax),%rax
    0.00 :   5177a3:       test   %rax,%rax
    0.00 :   5177a6:       jg     5176b9 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1249>
    0.00 :   5177ac:       jmpq   517702 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1292>
    0.00 :   5177b1:       nopl   0x0(%rax)
    0.00 :   5177b8:       test   %rcx,%rcx
    0.00 :   5177bb:       jle    517887 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1417>
    0.00 :   5177c1:       pxor   %xmm1,%xmm1
    0.00 :   5177c5:       pxor   %xmm2,%xmm2
    0.00 :   5177c9:       pxor   %xmm3,%xmm3
    0.00 :   5177cd:       xor    %edx,%edx
    0.00 :   5177cf:       mov    (%rsp),%rsi
    0.00 :   5177d3:       movss  (%rax,%rdx,4),%xmm0
    0.00 :   5177d8:       addss  (%rdi,%rdx,4),%xmm0
    0.00 :   5177dd:       test   %rsi,%rsi
    0.00 :   5177e0:       je     5177e7 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1377>
    0.00 :   5177e2:       addss  (%rsi,%rdx,4),%xmm0
    0.00 :   5177e7:       movss  %xmm0,(%rbx,%rdx,4)
    0.00 :   5177ec:       addss  %xmm0,%xmm3
    0.00 :   5177f0:       mulss  %xmm0,%xmm0
    0.00 :   5177f4:       add    $0x1,%rdx
    0.00 :   5177f8:       addss  %xmm0,%xmm2
    0.00 :   5177fc:       cmp    %rdx,%rcx
    0.00 :   5177ff:       jne    5177cf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x135f>
    0.00 :   517801:       pxor   %xmm0,%xmm0
    0.00 :   517805:       mov    0x8(%rsp),%rax
    0.00 :   51780a:       cvtsi2ss %rcx,%xmm0
    0.00 :   51780f:       divss  %xmm0,%xmm3
    0.00 :   517813:       divss  %xmm0,%xmm2
    0.00 :   517817:       movaps %xmm2,%xmm0
    0.00 :   51781a:       movaps %xmm3,%xmm2
    0.00 :   51781d:       mulss  %xmm3,%xmm2
    0.00 :   517821:       subss  %xmm2,%xmm0
    0.00 :   517825:       addss  0x10(%rax),%xmm0
    0.00 :   51782a:       ucomiss %xmm0,%xmm1
    0.00 :   51782d:       sqrtss %xmm0,%xmm2
    0.00 :   517831:       ja     5178c3 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1453>
    0.00 :   517837:       mov    0xa0(%rsp),%rax
    0.00 :   51783f:       shl    $0x2,%rcx
    0.00 :   517843:       mov    (%rax),%rdx
    0.00 :   517846:       mov    0xa8(%rsp),%rax
    0.00 :   51784e:       mov    (%rax),%rsi
    0.00 :   517851:       xor    %eax,%eax
    0.00 :   517853:       movss  (%rbx,%rax,1),%xmm0
    0.00 :   517858:       subss  %xmm3,%xmm0
    0.00 :   51785c:       divss  %xmm2,%xmm0
    0.00 :   517860:       mulss  (%rsi,%rax,1),%xmm0
    0.00 :   517865:       test   %rdx,%rdx
    0.00 :   517868:       je     51786f <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x13ff>
    0.00 :   51786a:       addss  (%rdx,%rax,1),%xmm0
    0.00 :   51786f:       movss  %xmm0,(%rbx,%rax,1)
    0.00 :   517874:       add    $0x4,%rax
    0.00 :   517878:       cmp    %rax,%rcx
    0.00 :   51787b:       jne    517853 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x13e3>
    0.00 :   51787d:       jmpq   517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   517882:       callq  53460 <__stack_chk_fail@plt>
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   517887:       pxor   %xmm0,%xmm0
    0.00 :   51788b:       pxor   %xmm1,%xmm1
    0.00 :   51788f:       mov    0x8(%rsp),%rax
    0.00 :   517894:       cvtsi2ss %rcx,%xmm0
    0.00 :   517899:       movaps %xmm1,%xmm3
    0.00 :   51789c:       divss  %xmm0,%xmm3
    0.00 :   5178a0:       movaps %xmm3,%xmm0
    0.00 :   5178a3:       movaps %xmm3,%xmm5
    0.00 :   5178a6:       mulss  %xmm3,%xmm0
    0.00 :   5178aa:       subss  %xmm0,%xmm5
    0.00 :   5178ae:       movaps %xmm5,%xmm0
    0.00 :   5178b1:       addss  0x10(%rax),%xmm0
    0.00 :   5178b6:       ucomiss %xmm0,%xmm1
    0.00 :   5178b9:       sqrtss %xmm0,%xmm2
    0.00 :   5178bd:       jbe    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
    0.00 :   5178c3:       movss  %xmm3,0x8(%rsp)
    0.00 :   5178c9:       movss  %xmm2,(%rsp)
    0.00 :   5178ce:       callq  53cd0 <sqrtf@plt>
    0.00 :   5178d3:       mov    0x70(%rsp),%rax
    0.00 :   5178d8:       movss  (%rsp),%xmm2
    0.00 :   5178dd:       movss  0x8(%rsp),%xmm3
    0.00 :   5178e3:       mov    (%rax),%rcx
    0.00 :   5178e6:       test   %rcx,%rcx
    0.00 :   5178e9:       jg     517837 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x13c7>
    0.00 :   5178ef:       jmpq   517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   5178f4:       mov    $0xa0,%edi
    0.00 :   5178f9:       lea    0x70(%rsp),%r13
    0.00 :   5178fe:       lea    0xb0(%rsp),%rbp
    0.00 :   517906:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   51790b:       mov    %rbp,%rdi
    0.00 :   51790e:       lea    0x60(%rsp),%rcx
    0.00 :   517913:       mov    %r13,%rsi
    0.00 :   517916:       mov    %rax,%r12
    0.00 :   517919:       lea    0x30deeb(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517920:       lea    0x68(%rsp),%rdx
    0.00 :   517925:       mov    %rax,0x60(%rsp)
    0.00 :   51792a:       lea    0x30ded7(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517931:       lea    0x30(%r14),%r8
    0.00 :   517935:       mov    %rax,0x68(%rsp)
    0.00 :   51793a:       lea    0x30deb0(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517941:       mov    %rax,0x70(%rsp)
    0.00 :   517946:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   51794b:       mov    %r13,%rdi
    0.00 :   51794e:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517953:       lea    0xd0(%rsp),%rbx
    0.00 :   51795b:       mov    %r13,%r8
    0.00 :   51795e:       lea    0x36b41b(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517965:       mov    $0x97,%edx
    0.00 :   51796a:       lea    0x30de9f(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517971:       mov    %rbx,%rdi
    0.00 :   517974:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517979:       mov    %rbp,%rcx
    0.00 :   51797c:       lea    0x30decd(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517983:       mov    %rbx,%rsi
    0.00 :   517986:       mov    %r12,%rdi
    0.00 :   517989:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   51798e:       mov    %rbx,%rdi
         :            if (!_M_is_local())
    0.00 :   517991:       add    $0x10,%rbp
    0.00 :   517995:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   51799a:       mov    %r13,%rdi
    0.00 :   51799d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5179a2:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5179aa:       cmp    %rbp,%rdi
    0.00 :   5179ad:       je     5179b4 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1544>
    0.00 :   5179af:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5179b4:       lea    -0x41e29b(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   5179bb:       lea    0x6f9c6e(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   5179c2:       mov    %r12,%rdi
    0.00 :   5179c5:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   5179ca:       mov    $0xa0,%edi
    0.00 :   5179cf:       lea    0x70(%rsp),%r13
    0.00 :   5179d4:       lea    0xb0(%rsp),%rbp
    0.00 :   5179dc:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5179e1:       mov    %rbp,%rdi
    0.00 :   5179e4:       lea    0x60(%rsp),%rcx
    0.00 :   5179e9:       mov    %r13,%rsi
    0.00 :   5179ec:       mov    %rax,%r15
    0.00 :   5179ef:       lea    0x30de15(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   5179f6:       lea    0x68(%rsp),%rdx
    0.00 :   5179fb:       mov    %rax,0x60(%rsp)
    0.00 :   517a00:       lea    0x30de01(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517a07:       lea    0x30(%r12),%r8
    0.00 :   517a0c:       mov    %rax,0x68(%rsp)
    0.00 :   517a11:       lea    0x30ddd9(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517a18:       mov    %rax,0x70(%rsp)
    0.00 :   517a1d:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517a22:       mov    %r13,%rdi
    0.00 :   517a25:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517a2a:       lea    0xd0(%rsp),%rbx
    0.00 :   517a32:       mov    %r13,%r8
    0.00 :   517a35:       lea    0x36b344(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517a3c:       mov    $0x97,%edx
    0.00 :   517a41:       lea    0x30ddc8(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517a48:       mov    %rbx,%rdi
    0.00 :   517a4b:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517a50:       mov    %rbp,%rcx
    0.00 :   517a53:       lea    0x30ddf6(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517a5a:       mov    %rbx,%rsi
    0.00 :   517a5d:       mov    %r15,%rdi
    0.00 :   517a60:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517a65:       mov    %rbx,%rdi
    0.00 :   517a68:       add    $0x10,%rbp
    0.00 :   517a6c:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517a71:       mov    %r13,%rdi
    0.00 :   517a74:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517a79:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517a81:       cmp    %rbp,%rdi
    0.00 :   517a84:       je     517a8b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x161b>
    0.00 :   517a86:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517a8b:       lea    -0x41e372(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   517a92:       lea    0x6f9b97(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   517a99:       mov    %r15,%rdi
    0.00 :   517a9c:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   517aa1:       mov    $0xa0,%edi
    0.00 :   517aa6:       lea    0x70(%rsp),%r13
    0.00 :   517aab:       lea    0xb0(%rsp),%rbp
    0.00 :   517ab3:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   517ab8:       mov    %rbp,%rdi
    0.00 :   517abb:       lea    0x60(%rsp),%rcx
    0.00 :   517ac0:       mov    %r13,%rsi
    0.00 :   517ac3:       mov    %rax,%r12
    0.00 :   517ac6:       lea    0x30dd3e(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517acd:       lea    0x68(%rsp),%rdx
    0.00 :   517ad2:       mov    %rax,0x60(%rsp)
    0.00 :   517ad7:       lea    0x30dd2a(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517ade:       lea    0x30(%rbx),%r8
    0.00 :   517ae2:       mov    %rax,0x68(%rsp)
    0.00 :   517ae7:       lea    0x30dd03(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517aee:       mov    %rax,0x70(%rsp)
    0.00 :   517af3:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517af8:       mov    %r13,%rdi
    0.00 :   517afb:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517b00:       lea    0xd0(%rsp),%rbx
    0.00 :   517b08:       mov    %r13,%r8
    0.00 :   517b0b:       lea    0x36b26e(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517b12:       mov    $0x97,%edx
    0.00 :   517b17:       lea    0x30dcf2(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517b1e:       mov    %rbx,%rdi
    0.00 :   517b21:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517b26:       mov    %rbp,%rcx
    0.00 :   517b29:       lea    0x30dd20(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517b30:       mov    %rbx,%rsi
    0.00 :   517b33:       mov    %r12,%rdi
    0.00 :   517b36:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517b3b:       jmpq   51798e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x151e>
    0.00 :   517b40:       mov    $0xa0,%edi
    0.00 :   517b45:       mov    %rsi,(%rsp)
    0.00 :   517b49:       lea    0x70(%rsp),%r13
    0.00 :   517b4e:       lea    0xb0(%rsp),%rbp
    0.00 :   517b56:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   517b5b:       mov    (%rsp),%rsi
    0.00 :   517b5f:       mov    %rbp,%rdi
    0.00 :   517b62:       lea    0x60(%rsp),%rcx
    0.00 :   517b67:       mov    %rax,%r12
    0.00 :   517b6a:       lea    0x30dc9a(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517b71:       lea    0x68(%rsp),%rdx
    0.00 :   517b76:       mov    %rax,0x60(%rsp)
    0.00 :   517b7b:       lea    0x30dc86(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517b82:       lea    0x30(%rsi),%r8
    0.00 :   517b86:       mov    %r13,%rsi
    0.00 :   517b89:       mov    %rax,0x68(%rsp)
    0.00 :   517b8e:       lea    0x30dc5c(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517b95:       mov    %rax,0x70(%rsp)
    0.00 :   517b9a:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517b9f:       mov    %r13,%rdi
    0.00 :   517ba2:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517ba7:       lea    0xd0(%rsp),%rbx
    0.00 :   517baf:       mov    %r13,%r8
    0.00 :   517bb2:       lea    0x36b187(%rip),%rcx        # 882d40 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   517bb9:       mov    $0x83,%edx
    0.00 :   517bbe:       lea    0x30dc4b(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517bc5:       mov    %rbx,%rdi
    0.00 :   517bc8:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517bcd:       mov    %rbp,%rcx
    0.00 :   517bd0:       lea    0x30dc79(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517bd7:       mov    %rbx,%rsi
    0.00 :   517bda:       mov    %r12,%rdi
    0.00 :   517bdd:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517be2:       jmpq   51798e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x151e>
    0.00 :   517be7:       mov    $0xa0,%edi
    0.00 :   517bec:       lea    0x70(%rsp),%r13
    0.00 :   517bf1:       lea    0xb0(%rsp),%rbp
    0.00 :   517bf9:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   517bfe:       mov    %rbp,%rdi
    0.00 :   517c01:       lea    0x60(%rsp),%rcx
    0.00 :   517c06:       mov    %r13,%rsi
    0.00 :   517c09:       mov    %rax,%r12
    0.00 :   517c0c:       lea    0x30dbf8(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517c13:       lea    0x68(%rsp),%rdx
    0.00 :   517c18:       mov    %rax,0x60(%rsp)
    0.00 :   517c1d:       lea    0x30dbe4(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517c24:       mov    %rax,0x68(%rsp)
    0.00 :   517c29:       lea    0x30dbc1(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517c30:       mov    %rax,0x70(%rsp)
    0.00 :   517c35:       mov    0x10(%rsp),%rax
    0.00 :   517c3a:       lea    0x30(%rax),%r8
    0.00 :   517c3e:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517c43:       mov    %r13,%rdi
    0.00 :   517c46:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517c4b:       lea    0xd0(%rsp),%rbx
    0.00 :   517c53:       mov    %r13,%r8
    0.00 :   517c56:       lea    0x36b123(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517c5d:       mov    $0x97,%edx
    0.00 :   517c62:       lea    0x30dba7(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517c69:       mov    %rbx,%rdi
    0.00 :   517c6c:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517c71:       mov    %rbp,%rcx
    0.00 :   517c74:       lea    0x30dbd5(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517c7b:       mov    %rbx,%rsi
    0.00 :   517c7e:       mov    %r12,%rdi
    0.00 :   517c81:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517c86:       jmpq   51798e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x151e>
    0.00 :   517c8b:       mov    $0xa0,%edi
    0.00 :   517c90:       lea    0x70(%rsp),%r13
    0.00 :   517c95:       lea    0xb0(%rsp),%rbp
    0.00 :   517c9d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   517ca2:       mov    %rbp,%rdi
    0.00 :   517ca5:       lea    0x60(%rsp),%rcx
    0.00 :   517caa:       mov    %r13,%rsi
    0.00 :   517cad:       mov    %rax,%r14
    0.00 :   517cb0:       lea    0x30db54(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517cb7:       lea    0x68(%rsp),%rdx
    0.00 :   517cbc:       mov    %rax,0x60(%rsp)
    0.00 :   517cc1:       lea    0x30db40(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517cc8:       mov    %rax,0x68(%rsp)
    0.00 :   517ccd:       lea    0x30db1d(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517cd4:       mov    %rax,0x70(%rsp)
    0.00 :   517cd9:       mov    (%rsp),%rax
    0.00 :   517cdd:       lea    0x30(%rax),%r8
    0.00 :   517ce1:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517ce6:       mov    %r13,%rdi
    0.00 :   517ce9:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517cee:       lea    0xd0(%rsp),%rbx
    0.00 :   517cf6:       mov    %r13,%r8
    0.00 :   517cf9:       lea    0x36b080(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517d00:       mov    $0x97,%edx
    0.00 :   517d05:       lea    0x30db04(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517d0c:       mov    %rbx,%rdi
    0.00 :   517d0f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517d14:       mov    %rbp,%rcx
    0.00 :   517d17:       lea    0x30db32(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517d1e:       mov    %rbx,%rsi
    0.00 :   517d21:       mov    %r14,%rdi
    0.00 :   517d24:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517d29:       mov    %rbx,%rdi
    0.00 :   517d2c:       add    $0x10,%rbp
    0.00 :   517d30:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517d35:       mov    %r13,%rdi
    0.00 :   517d38:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517d3d:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517d45:       cmp    %rbp,%rdi
    0.00 :   517d48:       je     517d4f <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x18df>
    0.00 :   517d4a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517d4f:       lea    -0x41e636(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   517d56:       lea    0x6f98d3(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   517d5d:       mov    %r14,%rdi
    0.00 :   517d60:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   517d65:       mov    %rax,%r12
    0.00 :   517d68:       jmp    517d6f <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x18ff>
    0.00 :   517d6a:       mov    %rax,%rbx
    0.00 :   517d6d:       jmp    517d7a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x190a>
    0.00 :   517d6f:       mov    %rbx,%rdi
    0.00 :   517d72:       mov    %r12,%rbx
    0.00 :   517d75:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517d7a:       mov    %r13,%rdi
    0.00 :   517d7d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517d82:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517d8a:       add    $0x10,%rbp
    0.00 :   517d8e:       cmp    %rbp,%rdi
    0.00 :   517d91:       je     517d98 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1928>
    0.00 :   517d93:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517d98:       mov    %r14,%rdi
    0.00 :   517d9b:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   517da0:       mov    %rbx,%rdi
    0.00 :   517da3:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517da8:       mov    %rax,%rbx
    0.00 :   517dab:       jmp    517d82 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1912>
    0.00 :   517dad:       jmp    517dd1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1961>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   517daf:       lea    0x8(%rbx),%rdi
    0.00 :   517db3:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   517db8:       mov    -0x18(%r14),%rax
    0.00 :   517dbc:       mov    0x10(%rsp),%rcx
    0.00 :   517dc1:       mov    %r14,0xd0(%rsp)
    0.00 :   517dc9:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   517dd1:       lea    0x10(%r15),%rax
    0.00 :   517dd5:       lea    0x70(%rbx),%rdi
    0.00 :   517dd9:       mov    %rax,0x140(%rsp)
    0.00 :   517de1:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   517de6:       callq  52a50 <std::terminate()@plt>
    0.00 :   517deb:       mov    %rax,%r14
    0.00 :   517dee:       jmp    517df5 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1985>
    0.00 :   517df0:       mov    %rax,%rbx
    0.00 :   517df3:       jmp    517e00 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1990>
    0.00 :   517df5:       mov    %rbx,%rdi
    0.00 :   517df8:       mov    %r14,%rbx
    0.00 :   517dfb:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517e00:       mov    %r13,%rdi
    0.00 :   517e03:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517e08:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517e10:       add    $0x10,%rbp
    0.00 :   517e14:       cmp    %rbp,%rdi
    0.00 :   517e17:       je     517e1e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19ae>
    0.00 :   517e19:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517e1e:       mov    %r12,%rdi
    0.00 :   517e21:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   517e26:       mov    %rbx,%rdi
    0.00 :   517e29:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517e2e:       jmp    517df0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1980>
    0.00 :   517e30:       mov    %rax,%rbx
    0.00 :   517e33:       jmp    517e08 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1998>
    0.00 :   517e35:       jmp    517e3c <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19cc>
    0.00 :   517e37:       jmpq   517daf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x193f>
    0.00 :   517e3c:       jmpq   517daf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x193f>
    0.00 :   517e41:       mov    %rax,%rbx
    0.00 :   517e44:       jmp    517e48 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19d8>
    0.00 :   517e46:       jmp    517dd1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1961>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517e48:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517e50:       add    $0x10,%rbp
    0.00 :   517e54:       cmp    %rbp,%rdi
    0.00 :   517e57:       je     517e5e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19ee>
    0.00 :   517e59:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   517e5e:       mov    %rbx,%rdi
    0.00 :   517e61:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517e66:       mov    %rax,%rbp
    0.00 :   517e69:       jmp    517e8a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a1a>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517e6b:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517e73:       add    $0x10,%rbp
    0.00 :   517e77:       cmp    %rbp,%rdi
    0.00 :   517e7a:       je     517de6 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1976>
         :            ::operator delete(__p);
    0.00 :   517e80:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   517e85:       jmpq   517de6 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1976>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517e8a:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517e92:       add    $0x10,%rbx
    0.00 :   517e96:       cmp    %rbx,%rdi
    0.00 :   517e99:       je     517ea0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a30>
         :            ::operator delete(__p);
    0.00 :   517e9b:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   517ea0:       mov    %rbp,%rdi
    0.00 :   517ea3:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517ea8:       jmp    517eac <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a3c>
    0.00 :   517eaa:       jmp    517e41 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19d1>
    0.00 :   517eac:       jmpq   517dd1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1961>
    0.00 :   517eb1:       jmp    517eb5 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a45>
    0.00 :   517eb3:       jmp    517e41 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19d1>
         :            _M_is_local() const
    0.00 :   517eb5:       jmp    517e6b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19fb>
    0.00 :   517eb7:       jmp    517ebb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a4b>
    0.00 :   517eb9:       jmp    517e66 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19f6>
    0.00 :   517ebb:       jmpq   517daf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x193f>
    0.00 :   517ec0:       jmpq   517daf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x193f>
    0.00 :   517ec5:       jmpq   517deb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x197b>
    0.00 :   517eca:       jmpq   517df0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1980>
    0.00 :   517ecf:       jmpq   517e30 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19c0>
    0.00 :   517ed4:       jmp    517edb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a6b>
    0.00 :   517ed6:       jmpq   517e41 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19d1>
    0.00 :   517edb:       jmpq   517dd1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1961>
    0.00 :   517ee0:       jmp    517e66 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19f6>
    0.00 :   517ee2:       jmp    517e66 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19f6>
    0.00 :   517ee4:       jmp    517ee8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a78>
    0.00 :   517ee6:       jmp    517e6b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19fb>
    0.00 :   517ee8:       jmp    517e6b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19fb>
    0.00 :   517eea:       mov    %rax,%rbp
    0.00 :   517eed:       jmp    517ef4 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a84>
    0.00 :   517eef:       mov    %rax,%rbx
    0.00 :   517ef2:       jmp    517f10 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1aa0>
         :            if (_M_manager)
    0.00 :   517ef4:       mov    0xe0(%rsp),%rax
    0.00 :   517efc:       test   %rax,%rax
    0.00 :   517eff:       je     517ea0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a30>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   517f01:       mov    $0x3,%edx
    0.00 :   517f06:       mov    %rbx,%rsi
    0.00 :   517f09:       mov    %rbx,%rdi
    0.00 :   517f0c:       callq  *%rax
    0.00 :   517f0e:       jmp    517ea0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a30>
         :            if (_M_manager)
    0.00 :   517f10:       mov    0xe0(%rsp),%rax
    0.00 :   517f18:       test   %rax,%rax
    0.00 :   517f1b:       je     517e5e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19ee>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   517f21:       lea    0xd0(%rsp),%rdi
    0.00 :   517f29:       mov    $0x3,%edx
    0.00 :   517f2e:       mov    %rdi,%rsi
    0.00 :   517f31:       callq  *%rax
    0.00 :   517f33:       jmpq   517e5e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19ee>
    0.00 :   517f38:       mov    %rax,%r14
    0.00 :   517f3b:       jmp    517f42 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1ad2>
    0.00 :   517f3d:       mov    %rax,%rbx
    0.00 :   517f40:       jmp    517f4d <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1add>
    0.00 :   517f42:       mov    %rbx,%rdi
    0.00 :   517f45:       mov    %r14,%rbx
    0.00 :   517f48:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517f4d:       mov    %r13,%rdi
    0.00 :   517f50:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517f55:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517f5d:       add    $0x10,%rbp
    0.00 :   517f61:       cmp    %rbp,%rdi
    0.00 :   517f64:       je     517f6b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1afb>
         :            ::operator delete(__p);
    0.00 :   517f66:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517f6b:       mov    %r15,%rdi
    0.00 :   517f6e:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   517f73:       mov    %rbx,%rdi
    0.00 :   517f76:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517f7b:       mov    %rax,%rbx
    0.00 :   517f7e:       jmp    517f55 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1ae5>
    0.00 :   517f80:       jmpq   517e30 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19c0>
    0.00 :   517f85:       jmpq   517deb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x197b>
    0.00 :   517f8a:       jmpq   517deb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x197b>
    0.00 :   517f8f:       jmpq   517df0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1980>
    0.00 :   517f94:       jmpq   517e30 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19c0>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (9 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c7200 <onnxruntime::OpKernel::Node() const>:
         :            _ZNK11onnxruntime8OpKernel4NodeEv():
    0.00 :   5c7200:       mov    0x8(%rdi),%rdi
  100.00 :   5c7204:       jmpq   5c8150 <onnxruntime::OpKernelInfo::node() const>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (11 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000614020 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)>:
         :            _ZN11onnxruntime18SequentialExecutor7ExecuteERKNS_12SessionStateERKSt6vectorIiSaIiEERKS4_I8OrtValueSaIS9_EES8_RSB_RKSt13unordered_mapImSt8functionIFNS_6common6StatusERKNS_11TensorShapeERK13OrtMemoryInfoRS9_RbEESt4hashImESt8equal_toImESaISt4pairIKmSS_EEERKNS_7logging6LoggerE():
    0.00 :   614020:       push   %r15
    0.00 :   614022:       push   %r14
    0.00 :   614024:       push   %r13
    0.00 :   614026:       push   %r12
    0.00 :   614028:       push   %rbp
    0.00 :   614029:       mov    %rcx,%rbp
    0.00 :   61402c:       push   %rbx
    0.00 :   61402d:       mov    %r9,%rbx
    0.00 :   614030:       sub    $0x7c8,%rsp
    0.00 :   614037:       mov    0x800(%rsp),%rax
    0.00 :   61403f:       mov    %rdi,0x70(%rsp)
    0.00 :   614044:       mov    %rsi,0x30(%rsp)
    0.00 :   614049:       mov    0x218(%rdx),%rdi
    0.00 :   614050:       mov    %rax,0x88(%rsp)
    0.00 :   614058:       mov    0x810(%rsp),%rax
    0.00 :   614060:       mov    %rdx,0x28(%rsp)
    0.00 :   614065:       mov    0x808(%rsp),%r9
    0.00 :   61406d:       mov    %r8,0x90(%rsp)
    0.00 :   614075:       mov    %rax,0x40(%rsp)
    0.00 :   61407a:       mov    %fs:0x28,%rax
    0.00 :   614083:       mov    %rax,0x7b8(%rsp)
    0.00 :   61408b:       xor    %eax,%eax
    0.00 :   61408d:       movzbl 0x10(%rdi),%eax
    0.00 :   614091:       movq   $0x0,0xe0(%rsp)
    0.00 :   61409d:       movq   $0x0,0xe8(%rsp)
    0.00 :   6140a9:       mov    %al,0xdf(%rsp)
    0.00 :   6140b0:       movq   $0x0,0xf0(%rsp)
    0.00 :   6140bc:       test   %al,%al
    0.00 :   6140be:       jne    615e20 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e00>
    0.00 :   6140c4:       lea    0x420(%rsp),%rax
    0.00 :   6140cc:       sub    $0x8,%rsp
    0.00 :   6140d0:       mov    %rbp,%rsi
    0.00 :   6140d3:       mov    %rbx,%rcx
    0.00 :   6140d6:       mov    %rax,0x20(%rsp)
    0.00 :   6140db:       mov    0x30(%rsp),%r14
    0.00 :   6140e0:       mov    %rax,%rdi
    0.00 :   6140e3:       push   %r14
    0.00 :   6140e5:       mov    0x98(%rsp),%r8
    0.00 :   6140ed:       mov    0xa0(%rsp),%rdx
    0.00 :   6140f5:       callq  5b09e0 <onnxruntime::ExecutionFrame::ExecutionFrame(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::SessionState const&)>
    0.00 :   6140fa:       pop    %rsi
    0.00 :   6140fb:       mov    %rbx,%rsi
    0.00 :   6140fe:       pop    %rdi
    0.00 :   6140ff:       mov    %r14,%rdi
    0.00 :   614102:       callq  5e4cf0 <onnxruntime::SessionState::GetToBeExecutedNodes(std::vector<int, std::allocator<int> > const&) const>
    0.00 :   614107:       mov    0x30(%rsp),%rcx
    0.00 :   61410c:       mov    0x40(%rsp),%rbx
    0.00 :   614111:       test   %rax,%rax
    0.00 :   614114:       mov    %rax,0x80(%rsp)
    0.00 :   61411c:       setne  %al
    0.00 :   61411f:       and    0x10(%rcx),%al
    0.00 :   614122:       cmpl   $0x1,0x28(%rbx)
    0.00 :   614126:       mov    %al,0x4f(%rsp)
    0.00 :   61412a:       jg     614341 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x321>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614130:       lea    0x2a0(%rsp),%rbp
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614138:       lea    0x2843cc(%rip),%rdx        # 89850b <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xab>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61413f:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614143:       lea    -0x43(%rdx),%rsi
    0.00 :   614147:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61414a:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614152:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   614157:       lea    0x284579(%rip),%rdx        # 8986d7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61415e:       lea    0x38(%rbp),%rax
    0.00 :   614162:       movl   $0x9d,0x2c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61416d:       lea    0x28(%rbp),%rdi
    0.00 :   614171:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614175:       mov    %rax,0x2c8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61417d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   614182:       lea    0x614b1f(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614189:       mov    0x2a0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614191:       lea    0x5c0(%rsp),%r13
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   614199:       movq   $0x0,0x2e8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6141a5:       mov    0x2a8(%rsp),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6141ad:       lea    0x20(%r13),%rdi
    0.00 :   6141b1:       movq   $0x0,0x2f0(%rsp)
    0.00 :   6141bd:       mov    (%rax),%rax
    0.00 :   6141c0:       movq   $0x0,0x2f8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6141cc:       add    %rsi,%rdx
    0.00 :   6141cf:       mov    %rbx,0x5c0(%rsp)
    0.00 :   6141d7:       mov    %rax,0x5d0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6141df:       lea    0x30(%r13),%rax
    0.00 :   6141e3:       movl   $0x1,0x5c8(%rsp)
    0.00 :   6141ee:       movl   $0x0,0x5d8(%rsp)
    0.00 :   6141f9:       mov    %rax,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614201:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   614206:       mov    0x2c0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61420d:       mov    0x2c8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614215:       lea    0x48(%r13),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614219:       mov    0x2d0(%rsp),%rdx
    0.00 :   614221:       mov    %eax,0x600(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614228:       lea    0x58(%r13),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61422c:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61422f:       mov    %rax,0x608(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614237:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   61423c:       mov    0x2f0(%rsp),%r15
    0.00 :   614244:       mov    0x2e8(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   61424c:       movq   $0x0,0x628(%rsp)
    0.00 :   614258:       movq   $0x0,0x630(%rsp)
    0.00 :   614264:       movq   $0x0,0x638(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614270:       mov    %r15,%r12
    0.00 :   614273:       sub    %rbx,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   614276:       mov    %r12,%rax
    0.00 :   614279:       sar    $0x5,%rax
    0.00 :   61427d:       je     615e4a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e2a>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   614283:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   61428d:       cmp    %rdx,%rax
    0.00 :   614290:       ja     616fa9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f89>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   614296:       mov    %r12,%rdi
    0.00 :   614299:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   61429e:       mov    0x2f0(%rsp),%r15
    0.00 :   6142a6:       mov    0x2e8(%rsp),%rbx
    0.00 :   6142ae:       mov    %rax,%r14
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6142b1:       add    %r14,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   6142b4:       mov    %r14,0x628(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6142bc:       mov    %r12,0x638(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   6142c4:       mov    %r14,%r12
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   6142c7:       mov    %r14,0x630(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   6142cf:       cmp    %r15,%rbx
    0.00 :   6142d2:       je     614300 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2e0>
    0.00 :   6142d4:       nopl   0x0(%rax)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6142d8:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6142dd:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6142e0:       mov    %rax,(%r12)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6142e4:       mov    (%rbx),%rsi
    0.00 :   6142e7:       mov    0x8(%rbx),%rdx
    0.00 :   6142eb:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6142ee:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6142f3:       add    $0x20,%rbx
    0.00 :   6142f7:       add    $0x20,%r12
    0.00 :   6142fb:       cmp    %rbx,%r15
    0.00 :   6142fe:       jne    6142d8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b8>
    0.00 :   614300:       lea    0x80(%r13),%rdi
    0.00 :   614307:       mov    $0x10,%esi
         :            this->_M_impl._M_finish =
    0.00 :   61430c:       mov    %r12,0x630(%rsp)
    0.00 :   614314:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   614319:       lea    0x80(%r13),%rdi
    0.00 :   614320:       mov    $0xf,%edx
    0.00 :   614325:       lea    0x283dd9(%rip),%rsi        # 898105 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x245>
    0.00 :   61432c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   614331:       mov    %r13,%rdi
    0.00 :   614334:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   614339:       mov    %rbp,%rdi
    0.00 :   61433c:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   614341:       mov    0x28(%rsp),%rbx
    0.00 :   614346:       mov    %rbx,%rdi
    0.00 :   614349:       callq  5d95c0 <onnxruntime::SessionState::GetExecutionPlan() const>
    0.00 :   61434e:       mov    %rax,%r14
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   614351:       mov    0x90(%rbx),%rax
    0.00 :   614358:       mov    0x58(%r14),%rcx
    0.00 :   61435c:       mov    %rax,0x58(%rsp)
    0.00 :   614361:       mov    0x50(%r14),%rax
    0.00 :   614365:       mov    %rcx,0x60(%rsp)
    0.00 :   61436a:       mov    %rax,0x8(%rsp)
    0.00 :   61436f:       cmp    %rcx,%rax
    0.00 :   614372:       je     615ee0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ec0>
    0.00 :   614378:       mov    0x30(%rsp),%rax
    0.00 :   61437d:       mov    0x8(%rax),%rax
    0.00 :   614381:       cmpb   $0x0,(%rax)
    0.00 :   614384:       jne    6148b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x890>
    0.00 :   61438a:       lea    0x2a0(%rsp),%rax
    0.00 :   614392:       movq   $0x0,0xa0(%rsp)
    0.00 :   61439e:       mov    %rax,0x78(%rsp)
         :            if (!_M_is_local())
    0.00 :   6143a3:       lea    0x2b0(%rsp),%rax
    0.00 :   6143ab:       movq   $0x0,0x98(%rsp)
    0.00 :   6143b7:       mov    %rax,0x68(%rsp)
    0.00 :   6143bc:       mov    0x8(%rsp),%rax
    0.00 :   6143c1:       cmpb   $0x0,0x4f(%rsp)
    0.00 :   6143c6:       mov    (%rax),%r12
    0.00 :   6143c9:       mov    %r12,0xf8(%rsp)
    0.00 :   6143d1:       je     614449 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x429>
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            count(const key_type& __k) const
         :            -> size_type
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   6143d3:       mov    0x80(%rsp),%rcx
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   6143db:       mov    %r12,%rax
    0.00 :   6143de:       xor    %edx,%edx
    0.00 :   6143e0:       mov    0x8(%rcx),%rdi
    0.00 :   6143e4:       div    %rdi
         :            __node_base* __n = _M_buckets[__bkt];
    0.00 :   6143e7:       mov    (%rcx),%rax
    0.00 :   6143ea:       mov    (%rax,%rdx,8),%rax
    0.00 :   6143ee:       mov    %rdx,%r9
         :            return __n ? static_cast<__node_type*>(__n->_M_nxt) : nullptr;
    0.00 :   6143f1:       test   %rax,%rax
    0.00 :   6143f4:       je     614888 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x868>
    0.00 :   6143fa:       mov    (%rax),%rcx
         :            __node_type* __p = _M_bucket_begin(__n);
         :            if (!__p)
    0.00 :   6143fd:       test   %rcx,%rcx
    0.00 :   614400:       je     614888 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x868>
    0.00 :   614406:       mov    0x8(%rcx),%rsi
         :            return 0;
         :
         :            std::size_t __result = 0;
    0.00 :   61440a:       xor    %r8d,%r8d
    0.00 :   61440d:       jmp    61442e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x40e>
    0.00 :   61440f:       nop
         :            for (;; __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            ++__result;
         :            else if (__result)
    0.00 :   614410:       test   %r8,%r8
    0.00 :   614413:       jne    614449 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x429>
         :            // All equivalent values are next to each other, if we
         :            // found a non-equivalent value after an equivalent one it
         :            // means that we won't find any new equivalent value.
         :            break;
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   614415:       mov    (%rcx),%rcx
    0.00 :   614418:       test   %rcx,%rcx
    0.00 :   61441b:       je     614440 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x420>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   61441d:       mov    0x8(%rcx),%rsi
         :            { return __num % __den; }
    0.00 :   614421:       xor    %edx,%edx
    0.00 :   614423:       mov    %rsi,%rax
    0.00 :   614426:       div    %rdi
    0.00 :   614429:       cmp    %rdx,%r9
    0.00 :   61442c:       jne    614440 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x420>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   61442e:       cmp    %rsi,%r12
    0.00 :   614431:       jne    614410 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x3f0>
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   614433:       mov    (%rcx),%rcx
         :            ++__result;
    0.00 :   614436:       add    $0x1,%r8
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   61443a:       test   %rcx,%rcx
    0.00 :   61443d:       jne    61441d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x3fd>
    0.00 :   61443f:       nop
    0.00 :   614440:       test   %r8,%r8
    0.00 :   614443:       je     614888 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x868>
    0.00 :   614449:       mov    0x58(%rsp),%rdi
    0.00 :   61444e:       mov    %r12,%rsi
    0.00 :   614451:       callq  676a20 <onnxruntime::GraphViewer::GetNode(unsigned long) const>
    0.00 :   614456:       mov    %rax,0x38(%rsp)
    0.00 :   61445b:       mov    0x28(%rsp),%rax
    0.00 :   614460:       mov    0x70(%rax),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614464:       mov    0x78(%rax),%rax
    0.00 :   614468:       mov    %rax,0x10(%rsp)
    0.00 :   61446d:       sub    %rdx,%rax
    0.00 :   614470:       sar    $0x3,%rax
    0.00 :   614474:       cmp    %rax,%r12
    0.00 :   614477:       jae    614f30 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xf10>
    0.00 :   61447d:       mov    (%rdx,%r12,8),%rax
    0.00 :   614481:       mov    %rax,0x10(%rsp)
    0.00 :   614486:       test   %rax,%rax
    0.00 :   614489:       je     614f30 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xf10>
    0.00 :   61448f:       mov    0x28(%rsp),%rbp
    0.00 :   614494:       mov    0x10(%rsp),%r13
    0.00 :   614499:       lea    0x140(%rsp),%r15
    0.00 :   6144a1:       mov    0x30(%rsp),%rax
    0.00 :   6144a6:       mov    0x40(%rsp),%r8
    0.00 :   6144ab:       mov    %r15,%rdi
    0.00 :   6144ae:       mov    0x340(%rbp),%rcx
   21.04 :   6144b5:       mov    0x18(%rsp),%rsi
    0.00 :   6144ba:       mov    %r13,%rdx
    0.00 :   6144bd:       mov    0x8(%rax),%rbx
    0.00 :   6144c1:       callq  5c76c0 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)>
    0.00 :   6144c6:       lea    0x61009b(%rip),%rax        # c24568 <vtable for onnxruntime::OpKernelContextInternal>
    0.00 :   6144cd:       mov    %r13,%rdi
    0.00 :   6144d0:       mov    %rbp,0x178(%rsp)
    0.00 :   6144d8:       mov    %rbx,0x180(%rsp)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   6144e0:       movq   $0x0,0x188(%rsp)
    0.00 :   6144ec:       add    $0x10,%rax
    0.00 :   6144f0:       mov    %rax,0x140(%rsp)
    0.00 :   6144f8:       movq   $0x0,0x190(%rsp)
    0.00 :   614504:       movq   $0x0,0x198(%rsp)
    0.00 :   614510:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614515:       mov    0xf8(%rax),%rbx
    0.00 :   61451c:       sub    0xf0(%rax),%rbx
    0.00 :   614523:       mov    %rax,0x50(%rsp)
         :            template<typename _Tp, typename _Alloc>
         :            void
         :            vector<_Tp, _Alloc>::
         :            reserve(size_type __n)
         :            {
         :            if (__n > this->max_size())
    0.00 :   614528:       movabs $0x1fffffffffffffff,%rax
    0.00 :   614532:       sar    $0x3,%rbx
    0.00 :   614536:       movslq %ebx,%rdx
    0.00 :   614539:       mov    %ebx,%r13d
    0.00 :   61453c:       cmp    %rax,%rdx
    0.00 :   61453f:       ja     616f8b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f6b>
         :            __throw_length_error(__N("vector::reserve"));
         :            if (this->capacity() < __n)
    0.00 :   614545:       mov    0x188(%rsp),%rbp
         :            *  hold before needing to allocate more memory.
         :            */
         :            size_type
         :            capacity() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start); }
    0.00 :   61454d:       mov    0x198(%rsp),%rax
    0.00 :   614555:       sub    %rbp,%rax
    0.00 :   614558:       sar    $0x3,%rax
    0.00 :   61455c:       cmp    %rax,%rdx
    0.00 :   61455f:       ja     615350 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1330>
    0.00 :   614565:       test   %ebx,%ebx
    0.00 :   614567:       jle    6145e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x5c0>
         :            __x);
         :            ++this->_M_impl._M_finish;
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         :            }
         :            else
         :            _M_realloc_insert(end(), __x);
    0.00 :   614569:       lea    0x118(%rsp),%rax
    0.00 :   614571:       xor    %ebp,%ebp
    0.00 :   614573:       mov    %rax,0x20(%rsp)
    0.00 :   614578:       jmp    614597 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x577>
    0.00 :   61457a:       nopw   0x0(%rax,%rax,1)
         :            #endif // __cpp_sized_deallocation
         :            #endif // __cpp_aligned_new
         :
         :            // Default placement versions of operator new.
         :            inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :            { return __p; }
    0.00 :   614580:       mov    %rax,(%rsi)
    0.00 :   614583:       add    $0x1,%ebp
         :            ++this->_M_impl._M_finish;
    0.00 :   614586:       add    $0x8,%rsi
    0.00 :   61458a:       mov    %rsi,0x190(%rsp)
    0.00 :   614592:       cmp    %ebp,%r13d
    0.00 :   614595:       je     6145e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x5c0>
    0.00 :   614597:       mov    %ebp,%esi
    0.00 :   614599:       mov    %r15,%rdi
    0.00 :   61459c:       callq  5c75e0 <onnxruntime::OpKernelContext::GetImplicitInputMLValue(int) const>
    0.00 :   6145a1:       mov    %rax,%rbx
    0.00 :   6145a4:       mov    %rax,0x118(%rsp)
    0.00 :   6145ac:       test   %rax,%rax
    0.00 :   6145af:       je     616b75 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b55>
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   6145b5:       mov    0x190(%rsp),%rsi
    0.00 :   6145bd:       cmp    0x198(%rsp),%rsi
    0.00 :   6145c5:       jne    614580 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x560>
         :            _M_realloc_insert(end(), __x);
    0.00 :   6145c7:       mov    0x20(%rsp),%rdx
    0.00 :   6145cc:       lea    0x48(%r15),%rdi
    0.00 :   6145d0:       callq  60f1d0 <void std::vector<OrtValue const*, std::allocator<OrtValue const*> >::_M_realloc_insert<OrtValue const* const&>(__gnu_cxx::__normal_iterator<OrtValue const**, std::vector<OrtValue const*, std::allocator<OrtValue const*> > >, OrtValue const* const&)>
    0.00 :   6145d5:       add    $0x1,%ebp
    0.00 :   6145d8:       cmp    %ebp,%r13d
    0.00 :   6145db:       jne    614597 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x577>
    0.00 :   6145dd:       nopl   (%rax)
    0.00 :   6145e0:       movzbl 0xdf(%rsp),%eax
    0.00 :   6145e8:       mov    %al,0x50(%rsp)
    0.00 :   6145ec:       test   %al,%al
    0.00 :   6145ee:       je     614609 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x5e9>
    0.00 :   6145f0:       mov    0x28(%rsp),%rax
    0.00 :   6145f5:       mov    0x218(%rax),%rdi
    0.00 :   6145fc:       callq  695530 <onnxruntime::profiling::Profiler::StartTime() const>
    0.00 :   614601:       mov    %rax,0xe8(%rsp)
    0.00 :   614609:       mov    0x10(%rsp),%rdi
    0.00 :   61460e:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
    0.00 :   614613:       mov    0x168(%rax),%eax
         :
         :            const_reference
         :            operator[](size_type __n) const
         :            {
         :            return *const_iterator(this->_M_impl._M_start._M_p
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
   12.50 :   614619:       mov    %r12,%rsi
         :            { return !!(*_M_p & _M_mask); }
    0.00 :   61461c:       mov    0x68(%r14),%rdx
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   614620:       mov    %r12d,%ecx
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   614623:       shr    $0x6,%rsi
    0.00 :   614627:       mov    %eax,0x20(%rsp)
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   61462b:       mov    $0x1,%eax
    0.00 :   614630:       shl    %cl,%rax
    0.00 :   614633:       test   %rax,(%rdx,%rsi,8)
    0.00 :   614637:       jne    615060 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1040>
    0.00 :   61463d:       lea    0xdf(%rsp),%rax
         :            operator()():
    0.00 :   614645:       cmpb   $0x0,0x50(%rsp)
         :            _ZN11onnxruntime18SequentialExecutor7ExecuteERKNS_12SessionStateERKSt6vectorIiSaIiEERKS4_I8OrtValueSaIS9_EES8_RSB_RKSt13unordered_mapImSt8functionIFNS_6common6StatusERKNS_11TensorShapeERK13OrtMemoryInfoRS9_RbEESt4hashImESt8equal_toImESaISt4pairIKmSS_EEERKNS_7logging6LoggerE():
    0.00 :   61464a:       mov    %rax,0x120(%rsp)
    0.00 :   614652:       mov    0x38(%rsp),%rax
    0.00 :   614657:       mov    %rax,0x128(%rsp)
    0.00 :   61465f:       lea    0xf8(%rsp),%rax
    0.00 :   614667:       mov    %rax,0x130(%rsp)
         :            operator()():
    0.00 :   61466f:       jne    614cc0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xca0>
         :            _ZN11onnxruntime18SequentialExecutor7ExecuteERKNS_12SessionStateERKSt6vectorIiSaIiEERKS4_I8OrtValueSaIS9_EES8_RSB_RKSt13unordered_mapImSt8functionIFNS_6common6StatusERKNS_11TensorShapeERK13OrtMemoryInfoRS9_RbEESt4hashImESt8equal_toImESaISt4pairIKmSS_EEERKNS_7logging6LoggerE():
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614675:       lea    0x1a0(%rsp),%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   61467d:       movb   $0x0,0x1b0(%rsp)
    0.00 :   614685:       mov    %rax,0x50(%rsp)
    0.00 :   61468a:       lea    0x1b0(%rsp),%rax
    0.00 :   614692:       mov    %rax,0x1a0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   61469a:       movq   $0x0,0x1a8(%rsp)
    0.00 :   6146a6:       mov    0x10(%rsp),%rsi
    0.00 :   6146ab:       lea    0x108(%rsp),%rdi
    0.00 :   6146b3:       mov    %r15,%rdx
    0.00 :   6146b6:       movq   $0x0,0x100(%rsp)
    0.00 :   6146c2:       mov    (%rsi),%rax
    0.00 :   6146c5:       callq  *0x10(%rax)
    0.00 :   6146c8:       mov    0x108(%rsp),%rax
         :            #endif
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    9.24 :   6146d0:       mov    0x100(%rsp),%rbx
         :            /// Release ownership of any stored pointer.
         :            pointer
         :            release() noexcept
         :            {
         :            pointer __p = get();
         :            _M_t._M_ptr() = pointer();
    0.00 :   6146d8:       movq   $0x0,0x108(%rsp)
         :            __a = _GLIBCXX_MOVE(__b);
    2.73 :   6146e4:       mov    %rax,0x100(%rsp)
         :            void
         :            reset(pointer __p = pointer()) noexcept
         :            {
         :            using std::swap;
         :            swap(_M_t._M_ptr(), __p);
         :            if (__p != pointer())
    0.00 :   6146ec:       test   %rbx,%rbx
    0.00 :   6146ef:       je     614748 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x728>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   6146f1:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   6146f5:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   6146f9:       cmp    %rax,%rdi
    0.00 :   6146fc:       je     614703 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x6e3>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   6146fe:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   614703:       mov    %rbx,%rdi
    0.00 :   614706:       mov    $0x28,%esi
    0.00 :   61470b:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            if (__ptr != nullptr)
    0.00 :   614710:       mov    0x108(%rsp),%rbx
    0.00 :   614718:       test   %rbx,%rbx
    0.00 :   61471b:       je     616f9c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f7c>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614721:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   614725:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   614729:       cmp    %rax,%rdi
    0.00 :   61472c:       je     614733 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x713>
    0.00 :   61472e:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   614733:       mov    $0x28,%esi
    0.00 :   614738:       mov    %rbx,%rdi
    0.00 :   61473b:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   614740:       mov    0x100(%rsp),%rax
    0.00 :   614748:       test   %rax,%rax
    0.00 :   61474b:       jne    61694d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x292d>
    0.00 :   614751:       movzbl 0xdf(%rsp),%ebp
    0.00 :   614759:       test   %bpl,%bpl
    0.00 :   61475c:       jne    615518 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x14f8>
    0.00 :   614762:       mov    0xf8(%rsp),%rcx
         :            { return !!(*_M_p & _M_mask); }
    0.00 :   61476a:       mov    0x68(%r14),%rdx
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    3.30 :   61476e:       mov    $0x1,%eax
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   614773:       mov    %rcx,%rsi
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   614776:       shl    %cl,%rax
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   614779:       shr    $0x6,%rsi
    0.00 :   61477d:       test   %rax,(%rdx,%rsi,8)
    0.00 :   614781:       jne    615be8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1bc8>
   22.23 :   614787:       mov    0x8(%rsp),%rax
    0.00 :   61478c:       mov    0x8(%rax),%r12d
    0.00 :   614790:       cmp    0xc(%rax),%r12d
    0.00 :   614794:       jg     61481c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x7fc>
    0.00 :   61479a:       movslq %r12d,%rbp
    0.00 :   61479d:       lea    0x118(%rsp),%rbx
    0.00 :   6147a5:       shl    $0x2,%rbp
    0.00 :   6147a9:       jmp    6147c3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x7a3>
    0.00 :   6147ab:       nopl   0x0(%rax,%rax,1)
    0.00 :   6147b0:       mov    0x8(%rsp),%rax
    0.00 :   6147b5:       add    $0x1,%r12d
    0.00 :   6147b9:       add    $0x4,%rbp
    0.00 :   6147bd:       cmp    %r12d,0xc(%rax)
    0.00 :   6147c1:       jl     61481c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x7fc>
    0.00 :   6147c3:       mov    0x90(%r14),%rax
    0.00 :   6147ca:       mov    0x18(%rsp),%rsi
    0.00 :   6147cf:       mov    %rbx,%rdi
    0.00 :   6147d2:       mov    (%rax,%rbp,1),%edx
    0.00 :   6147d5:       callq  5a8a70 <onnxruntime::IExecutionFrame::ReleaseMLValue(int)>
    0.00 :   6147da:       cmpq   $0x0,0x118(%rsp)
    0.00 :   6147e3:       je     6147b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x790>
    0.00 :   6147e5:       mov    $0x1f4,%r8d
    0.00 :   6147eb:       lea    0x283dee(%rip),%rcx        # 8985e0 <onnxruntime::ReleaseNodeMLValues(onnxruntime::ExecutionFrame&, onnxruntime::SequentialExecutionPlan const&, onnxruntime::SequentialExecutionPlan::NodeExecutionPlan const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   6147f2:       mov    %rbx,%rsi
    0.00 :   6147f5:       xor    %edi,%edi
    0.00 :   6147f7:       lea    0x283cca(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   6147fe:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   614803:       mov    0x118(%rsp),%rax
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   61480b:       mov    %rax,0x120(%rsp)
    0.00 :   614813:       test   %rax,%rax
    0.00 :   614816:       jne    616b2d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b0d>
         :            if (__ptr != nullptr)
    0.00 :   61481c:       mov    0x100(%rsp),%rbx
    0.00 :   614824:       test   %rbx,%rbx
    0.00 :   614827:       je     614848 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x828>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614829:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   61482d:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   614831:       cmp    %rax,%rdi
    0.00 :   614834:       je     61483b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x81b>
    0.00 :   614836:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   61483b:       mov    $0x28,%esi
    0.00 :   614840:       mov    %rbx,%rdi
    0.00 :   614843:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   614848:       mov    0x50(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   61484d:       mov    0x1a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614855:       add    $0x10,%rax
    0.00 :   614859:       cmp    %rax,%rdi
    0.00 :   61485c:       je     614863 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x843>
    0.00 :   61485e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   614863:       lea    0x60fcfe(%rip),%rax        # c24568 <vtable for onnxruntime::OpKernelContextInternal>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   61486a:       mov    0x188(%rsp),%rdi
    0.00 :   614872:       add    $0x10,%rax
    4.35 :   614876:       mov    %rax,0x140(%rsp)
         :            if (__p)
    0.00 :   61487e:       test   %rdi,%rdi
    0.00 :   614881:       je     614888 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x868>
    0.00 :   614883:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_current; }
         :
         :            __normal_iterator&
         :            operator++() _GLIBCXX_NOEXCEPT
         :            {
         :            ++_M_current;
    0.00 :   614888:       addq   $0x10,0x8(%rsp)
    0.00 :   61488e:       mov    0x8(%rsp),%rax
    0.00 :   614893:       cmp    %rax,0x60(%rsp)
    0.00 :   614898:       je     615ee0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ec0>
    0.00 :   61489e:       mov    0x30(%rsp),%rax
    0.00 :   6148a3:       mov    0x8(%rax),%rax
    0.00 :   6148a7:       cmpb   $0x0,(%rax)
   24.60 :   6148aa:       je     6143bc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x39c>
    0.00 :   6148b0:       mov    0x40(%rsp),%rax
    0.00 :   6148b5:       lea    0x5c0(%rsp),%r13
    0.00 :   6148bd:       cmpl   $0x2,0x28(%rax)
    0.00 :   6148c1:       jg     614c35 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc15>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6148c7:       lea    0x2a0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6148cf:       lea    0x283c35(%rip),%rdx        # 89850b <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xab>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6148d6:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6148da:       lea    -0x43(%rdx),%rsi
    0.00 :   6148de:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6148e1:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6148e9:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   6148ee:       lea    0x283de2(%rip),%rdx        # 8986d7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6148f5:       lea    0x38(%rbp),%rax
    0.00 :   6148f9:       movl   $0xc1,0x2c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614904:       lea    0x28(%rbp),%rdi
    0.00 :   614908:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61490c:       mov    %rax,0x2c8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614914:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   614919:       lea    0x614388(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614920:       mov    0x2a0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614928:       lea    0x5c0(%rsp),%r13
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   614930:       movq   $0x0,0x2e8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61493c:       mov    0x2a8(%rsp),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614944:       lea    0x20(%r13),%rdi
    0.00 :   614948:       mov    0x40(%rsp),%rcx
    0.00 :   61494d:       movq   $0x0,0x2f0(%rsp)
    0.00 :   614959:       movq   $0x0,0x2f8(%rsp)
    0.00 :   614965:       mov    (%rax),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614968:       add    %rsi,%rdx
    0.00 :   61496b:       mov    %rcx,0x5c0(%rsp)
    0.00 :   614973:       mov    %rax,0x5d0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61497b:       lea    0x30(%r13),%rax
    0.00 :   61497f:       movl   $0x2,0x5c8(%rsp)
    0.00 :   61498a:       movl   $0x0,0x5d8(%rsp)
    0.00 :   614995:       mov    %rax,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61499d:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6149a2:       mov    0x2c0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6149a9:       mov    0x2c8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6149b1:       lea    0x48(%r13),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6149b5:       mov    0x2d0(%rsp),%rdx
    0.00 :   6149bd:       mov    %eax,0x600(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6149c4:       lea    0x58(%r13),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6149c8:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6149cb:       mov    %rax,0x608(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6149d3:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   6149d8:       mov    0x2f0(%rsp),%r15
    0.00 :   6149e0:       mov    0x2e8(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   6149e8:       movq   $0x0,0x628(%rsp)
    0.00 :   6149f4:       movq   $0x0,0x630(%rsp)
    0.00 :   614a00:       movq   $0x0,0x638(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614a0c:       mov    %r15,%r12
    0.00 :   614a0f:       sub    %rbx,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   614a12:       mov    %r12,%rdx
    0.00 :   614a15:       sar    $0x5,%rdx
    0.00 :   614a19:       je     616e3e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2e1e>
         :            if (__n > this->max_size())
    0.00 :   614a1f:       movabs $0x7ffffffffffffff,%rax
    0.00 :   614a29:       cmp    %rax,%rdx
    0.00 :   614a2c:       ja     616fd5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2fb5>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   614a32:       mov    %r12,%rdi
    0.00 :   614a35:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   614a3a:       mov    0x2f0(%rsp),%r15
    0.00 :   614a42:       mov    0x2e8(%rsp),%rbx
    0.00 :   614a4a:       mov    %rax,%r14
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   614a4d:       add    %r14,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   614a50:       mov    %r14,0x628(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   614a58:       mov    %r12,0x638(%rsp)
         :            _ForwardIterator __cur = __result;
    0.00 :   614a60:       mov    %r14,%r12
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   614a63:       mov    %r14,0x630(%rsp)
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   614a6b:       cmp    %rbx,%r15
    0.00 :   614a6e:       je     614a98 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xa78>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614a70:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614a75:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614a78:       mov    %rax,(%r12)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614a7c:       mov    (%rbx),%rsi
    0.00 :   614a7f:       mov    0x8(%rbx),%rdx
    0.00 :   614a83:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614a86:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   614a8b:       add    $0x20,%rbx
    0.00 :   614a8f:       add    $0x20,%r12
    0.00 :   614a93:       cmp    %rbx,%r15
    0.00 :   614a96:       jne    614a70 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xa50>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   614a98:       lea    0xf0(%r13),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   614a9f:       mov    %r12,0x630(%rsp)
    0.00 :   614aa7:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   614aac:       mov    0x613075(%rip),%rbx        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   614ab3:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   614ab5:       xor    %esi,%esi
    0.00 :   614ab7:       mov    %cx,0x790(%rsp)
    0.00 :   614abf:       movq   $0x0,0x788(%rsp)
    0.00 :   614acb:       lea    0x10(%rbx),%rax
    0.00 :   614acf:       mov    %rax,0x6b0(%rsp)
    0.00 :   614ad7:       mov    0x6132c2(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   614ade:       movq   $0x0,0x798(%rsp)
    0.00 :   614aea:       mov    0x8(%rax),%r12
    0.00 :   614aee:       mov    0x10(%rax),%r15
    0.00 :   614af2:       movq   $0x0,0x7a0(%rsp)
    0.00 :   614afe:       movq   $0x0,0x7a8(%rsp)
    0.00 :   614b0a:       mov    -0x18(%r12),%rdx
    0.00 :   614b0f:       mov    %r12,0x640(%rsp)
    0.00 :   614b17:       movq   $0x0,0x7b0(%rsp)
    0.00 :   614b23:       lea    0x80(%r13,%rdx,1),%rdi
    0.00 :   614b2b:       mov    %r15,(%rdi)
    0.00 :   614b2e:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   614b33:       mov    0x613226(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   614b3a:       lea    0xc0(%r13),%rdi
    0.00 :   614b41:       movq   $0x0,0x650(%rsp)
    0.00 :   614b4d:       movq   $0x0,0x658(%rsp)
    0.00 :   614b59:       movq   $0x0,0x660(%rsp)
    0.00 :   614b65:       lea    0x18(%rax),%rdx
    0.00 :   614b69:       add    $0x40,%rax
    0.00 :   614b6d:       mov    %rax,0x6b0(%rsp)
    0.00 :   614b75:       mov    0x6130e4(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   614b7c:       mov    %rdx,0x640(%rsp)
    0.00 :   614b84:       movq   $0x0,0x668(%rsp)
    0.00 :   614b90:       add    $0x10,%rax
    0.00 :   614b94:       mov    %rax,0x648(%rsp)
    0.00 :   614b9c:       movq   $0x0,0x670(%rsp)
    0.00 :   614ba8:       movq   $0x0,0x678(%rsp)
    0.00 :   614bb4:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   614bb9:       mov    0x613418(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   614bc0:       lea    0x88(%r13),%rsi
    0.00 :   614bc7:       lea    0xf0(%r13),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   614bce:       movl   $0x10,0x688(%rsp)
    0.00 :   614bd9:       add    $0x10,%rax
    0.00 :   614bdd:       movb   $0x0,0x6a0(%rsp)
    0.00 :   614be5:       mov    %rax,0x648(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614bed:       lea    0xe0(%r13),%rax
    0.00 :   614bf4:       mov    %rax,0x690(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   614bfc:       movq   $0x0,0x698(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   614c08:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   614c0d:       lea    0x80(%r13),%rdi
    0.00 :   614c14:       mov    $0x30,%edx
    0.00 :   614c19:       lea    0x2833c8(%rip),%rsi        # 897fe8 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x128>
    0.00 :   614c20:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   614c25:       mov    %r13,%rdi
    0.00 :   614c28:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   614c2d:       mov    %rbp,%rdi
    0.00 :   614c30:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614c35:       lea    0x2833dc(%rip),%rdx        # 898018 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x158>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614c3c:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614c40:       mov    %r13,%rdi
    0.00 :   614c43:       lea    -0x30(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614c47:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614c4f:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   614c54:       mov    0x70(%rsp),%rdi
    0.00 :   614c59:       mov    %r13,%rcx
    0.00 :   614c5c:       mov    $0x1,%edx
    0.00 :   614c61:       mov    $0x2,%esi
    0.00 :   614c66:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614c6b:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614c73:       lea    0x10(%r13),%rax
    0.00 :   614c77:       cmp    %rax,%rdi
    0.00 :   614c7a:       je     614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
         :            ::operator delete(__p);
    0.00 :   614c7c:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   614c81:       nopl   0x0(%rax)
    0.00 :   614c88:       mov    0x18(%rsp),%rdi
    0.00 :   614c8d:       callq  5b0400 <onnxruntime::ExecutionFrame::~ExecutionFrame()>
    0.00 :   614c92:       mov    0x70(%rsp),%rax
    0.00 :   614c97:       mov    0x7b8(%rsp),%rcx
    0.00 :   614c9f:       xor    %fs:0x28,%rcx
    0.00 :   614ca8:       jne    616f97 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f77>
    0.00 :   614cae:       add    $0x7c8,%rsp
    0.00 :   614cb5:       pop    %rbx
    0.00 :   614cb6:       pop    %rbp
    0.00 :   614cb7:       pop    %r12
    0.00 :   614cb9:       pop    %r13
    0.00 :   614cbb:       pop    %r14
    0.00 :   614cbd:       pop    %r15
    0.00 :   614cbf:       retq
         :            *  Returns true if the %string is empty.  Equivalent to
         :            *  <code>*this == ""</code>.
         :            */
         :            bool
         :            empty() const _GLIBCXX_NOEXCEPT
         :            { return this->size() == 0; }
    0.00 :   614cc0:       mov    0x38(%rsp),%rbx
    0.00 :   614cc5:       mov    0x10(%rbx),%rdx
         :            operator()():
    0.00 :   614cc9:       test   %rdx,%rdx
    0.00 :   614ccc:       je     615410 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x13f0>
         :            _ZN11onnxruntime18SequentialExecutor7ExecuteERKNS_12SessionStateERKSt6vectorIiSaIiEERKS4_I8OrtValueSaIS9_EES8_RSB_RKSt13unordered_mapImSt8functionIFNS_6common6StatusERKNS_11TensorShapeERK13OrtMemoryInfoRS9_RbEESt4hashImESt8equal_toImESaISt4pairIKmSS_EEERKNS_7logging6LoggerE():
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614cd2:       lea    0x1a0(%rsp),%rdi
    0.00 :   614cda:       lea    0x10(%rdi),%rax
    0.00 :   614cde:       mov    %rdi,0x50(%rsp)
    0.00 :   614ce3:       mov    %rax,0x1a0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614ceb:       mov    0x38(%rsp),%rax
    0.00 :   614cf0:       mov    0x8(%rax),%rsi
    0.00 :   614cf4:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614cf7:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   614cfc:       mov    0x28(%rsp),%rax
    0.00 :   614d01:       mov    0x10(%rsp),%rdi
    0.00 :   614d06:       mov    0x218(%rax),%rbp
    0.00 :   614d0d:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614d12:       lea    0x5c0(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d1a:       lea    0x283417(%rip),%rdx        # 898138 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x278>
    0.00 :   614d21:       mov    %rax,%rbx
    0.00 :   614d24:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614d28:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d2c:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614d2f:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d37:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614d3c:       lea    0x30(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d40:       lea    0x20(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614d44:       mov    %rax,0x5e0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614d4c:       mov    (%rbx),%rsi
    0.00 :   614d4f:       mov    0x8(%rbx),%rdx
    0.00 :   614d53:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d56:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614d5b:       mov    0x1a0(%rsp),%rsi
    0.00 :   614d63:       mov    0x1a8(%rsp),%rdx
    0.00 :   614d6b:       mov    %r13,0x120(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614d73:       mov    0x68(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d78:       mov    0x78(%rsp),%rdi
    0.00 :   614d7d:       movq   $0x1,0x128(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614d89:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614d8c:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d94:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            if (this->max_size() - (this->size() - __n1) < __n2)
    0.00 :   614d99:       movabs $0x7fffffffffffffff,%rax
    0.00 :   614da3:       sub    0x2a8(%rsp),%rax
    0.00 :   614dab:       cmp    $0xc,%rax
    0.00 :   614daf:       jbe    616fbd <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f9d>
         :            append(const _CharT* __s)
         :            {
         :            __glibcxx_requires_string(__s);
         :            const size_type __n = traits_type::length(__s);
         :            _M_check_length(size_type(0), __n, "basic_string::append");
         :            return _M_append(__s, __n);
    0.00 :   614db5:       mov    0x78(%rsp),%rbx
    0.00 :   614dba:       mov    $0xd,%edx
    0.00 :   614dbf:       lea    0x283373(%rip),%rsi        # 898139 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x279>
    0.00 :   614dc6:       mov    %rbx,%rdi
    0.00 :   614dc9:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
    0.00 :   614dce:       xor    %r9d,%r9d
    0.00 :   614dd1:       mov    %rbx,%rdx
    0.00 :   614dd4:       mov    $0x1,%esi
    0.00 :   614dd9:       mov    %rbp,%rdi
    0.00 :   614ddc:       lea    0xe8(%rsp),%rcx
    0.00 :   614de4:       lea    0x120(%rsp),%r8
    0.00 :   614dec:       callq  6966b0 <onnxruntime::profiling::Profiler::EndTimeAndRecordEvent(onnxruntime::profiling::EventCategory, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614df1:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614df9:       cmp    0x68(%rsp),%rdi
    0.00 :   614dfe:       je     614e05 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xde5>
         :            ::operator delete(__p);
    0.00 :   614e00:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614e05:       mov    0x5e0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614e0d:       lea    0x30(%r13),%rax
    0.00 :   614e11:       cmp    %rax,%rdi
    0.00 :   614e14:       je     614e1b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xdfb>
    0.00 :   614e16:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614e1b:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614e23:       lea    0x10(%r13),%rax
    0.00 :   614e27:       cmp    %rax,%rdi
    0.00 :   614e2a:       je     614e31 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe11>
    0.00 :   614e2c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   614e31:       mov    0x28(%rsp),%rax
    0.00 :   614e36:       mov    0x218(%rax),%rdi
    0.00 :   614e3d:       callq  695530 <onnxruntime::profiling::Profiler::StartTime() const>
    0.00 :   614e42:       mov    0x150(%rsp),%rdi
    0.00 :   614e4a:       mov    %rax,0xf0(%rsp)
    0.00 :   614e52:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614e57:       mov    0xb0(%rax),%rdx
    0.00 :   614e5e:       sub    0xa8(%rax),%rdx
    0.00 :   614e65:       movq   $0x0,0xa0(%rsp)
    0.00 :   614e71:       movq   $0x0,0x98(%rsp)
    0.00 :   614e7d:       mov    %rdx,%rax
    0.00 :   614e80:       sar    $0x3,%rax
    0.00 :   614e84:       mov    %eax,%r12d
    0.00 :   614e87:       test   %eax,%eax
    0.00 :   614e89:       jle    6146a6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x686>
    0.00 :   614e8f:       lea    0x110(%rsp),%rax
    0.00 :   614e97:       xor    %ebx,%ebx
    0.00 :   614e99:       mov    %rax,0xa8(%rsp)
    0.00 :   614ea1:       jmp    614ebc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe9c>
    0.00 :   614ea3:       nopl   0x0(%rax,%rax,1)
    0.00 :   614ea8:       add    %rax,0xa0(%rsp)
    0.00 :   614eb0:       add    $0x1,%ebx
    0.00 :   614eb3:       cmp    %ebx,%r12d
    0.00 :   614eb6:       je     6146a6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x686>
    0.00 :   614ebc:       mov    %ebx,%esi
    0.00 :   614ebe:       mov    %r15,%rdi
    0.00 :   614ec1:       callq  5c7570 <onnxruntime::OpKernelContext::GetInputMLValue(int) const>
    0.00 :   614ec6:       mov    %rax,%rbp
    0.00 :   614ec9:       test   %rax,%rax
    0.00 :   614ecc:       je     614eb0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe90>
    0.00 :   614ece:       mov    0x10(%rax),%rdi
    0.00 :   614ed2:       test   %rdi,%rdi
    0.00 :   614ed5:       je     614eb0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe90>
    0.00 :   614ed7:       mov    (%rdi),%rax
    0.00 :   614eda:       callq  *0x30(%rax)
    0.00 :   614edd:       test   %al,%al
    0.00 :   614edf:       je     614eb0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe90>
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   614ee1:       mov    0x10(%rsp),%rax
    0.00 :   614ee6:       mov    %ebx,%esi
    0.00 :   614ee8:       mov    0xa8(%rsp),%rdx
    0.00 :   614ef0:       movq   $0x0,0x110(%rsp)
    0.00 :   614efc:       mov    0x8(%rax),%rdi
    0.00 :   614f00:       callq  5c8790 <onnxruntime::OpKernelInfo::TryGetConstantInput(int, onnxruntime::Tensor const**) const>
    0.00 :   614f05:       mov    %eax,%r13d
    0.00 :   614f08:       test   %al,%al
    0.00 :   614f0a:       je     615e70 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e50>
    0.00 :   614f10:       mov    0x110(%rsp),%rdi
    0.00 :   614f18:       callq  5ede70 <onnxruntime::Tensor::SizeInBytes() const>
    0.00 :   614f1d:       test   %r13b,%r13b
    0.00 :   614f20:       jne    614ea8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe88>
    0.00 :   614f22:       add    %rax,0x98(%rsp)
    0.00 :   614f2a:       jmp    614eb0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe90>
    0.00 :   614f2c:       nopl   0x0(%rax)
    0.00 :   614f30:       lea    0x5c0(%rsp),%r13
    0.00 :   614f38:       mov    $0x10,%esi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   614f3d:       lea    0x2a0(%rsp),%rbp
    0.00 :   614f45:       mov    %r13,%rdi
    0.00 :   614f48:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   614f4d:       mov    $0x25,%edx
    0.00 :   614f52:       lea    0x2830c7(%rip),%rsi        # 898020 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x160>
    0.00 :   614f59:       mov    %r13,%rdi
    0.00 :   614f5c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   614f61:       mov    0x38(%rsp),%rax
    0.00 :   614f66:       mov    %r13,%rdi
    0.00 :   614f69:       mov    0x10(%rax),%rdx
    0.00 :   614f6d:       mov    0x8(%rax),%rsi
    0.00 :   614f71:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   614f76:       mov    %rbp,%rdi
    0.00 :   614f79:       lea    0x8(%r13),%rsi
    0.00 :   614f7d:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
         :            { }
    0.00 :   614f82:       mov    0x612dd7(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614f89:       mov    0x610(%rsp),%rdi
    0.00 :   614f91:       lea    0x18(%rax),%rdx
    0.00 :   614f95:       add    $0x40,%rax
    0.00 :   614f99:       mov    %rax,0x630(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   614fa1:       mov    0x613030(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { }
    0.00 :   614fa8:       mov    %rdx,0x5c0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   614fb0:       add    $0x10,%rax
    0.00 :   614fb4:       mov    %rax,0x5c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   614fbc:       lea    0x60(%r13),%rax
    0.00 :   614fc0:       cmp    %rax,%rdi
    0.00 :   614fc3:       je     614fca <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xfaa>
    0.00 :   614fc5:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   614fca:       mov    0x612c8f(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   614fd1:       lea    0x40(%r13),%rdi
    0.00 :   614fd5:       add    $0x10,%rax
    0.00 :   614fd9:       mov    %rax,0x5c8(%rsp)
    0.00 :   614fe1:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   614fe6:       mov    0x612db3(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            ~basic_ios() { }
    0.00 :   614fed:       lea    0x70(%r13),%rdi
    0.00 :   614ff1:       mov    0x8(%rax),%rdx
    0.00 :   614ff5:       mov    0x10(%rax),%rax
    0.00 :   614ff9:       mov    %rdx,0x5c0(%rsp)
    0.00 :   615001:       mov    -0x18(%rdx),%rdx
    0.00 :   615005:       mov    %rax,0x5c0(%rsp,%rdx,1)
    0.00 :   61500d:       mov    0x612b14(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   615014:       add    $0x10,%rax
    0.00 :   615018:       mov    %rax,0x630(%rsp)
    0.00 :   615020:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   615025:       mov    0x70(%rsp),%rdi
    0.00 :   61502a:       mov    %rbp,%rcx
    0.00 :   61502d:       mov    $0x1,%edx
    0.00 :   615032:       mov    $0x2,%esi
    0.00 :   615037:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   61503c:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615044:       add    $0x10,%rbp
    0.00 :   615048:       cmp    %rbp,%rdi
    0.00 :   61504b:       je     614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
    0.00 :   615051:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   615056:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
    0.00 :   61505b:       nopl   0x0(%rax,%rax,1)
    0.00 :   615060:       xor    %ebx,%ebx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615062:       lea    0x5c0(%rsp),%r13
    0.00 :   61506a:       jmp    615074 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1054>
    0.00 :   61506c:       nopl   0x0(%rax)
    0.00 :   615070:       add    $0x1,%rbx
    0.00 :   615074:       mov    0x150(%rsp),%rdi
    0.00 :   61507c:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   615081:       mov    0xb0(%rax),%rdx
    0.00 :   615088:       sub    0xa8(%rax),%rdx
    0.00 :   61508f:       sar    $0x3,%rdx
    0.00 :   615093:       cmp    %ebx,%edx
    0.00 :   615095:       jle    6151a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1180>
    0.00 :   61509b:       mov    %ebx,%esi
    0.00 :   61509d:       mov    %r15,%rdi
    0.00 :   6150a0:       callq  5c7410 <onnxruntime::OpKernelContext::InputFence(int) const>
    0.00 :   6150a5:       mov    %rax,%rbp
    0.00 :   6150a8:       test   %rax,%rax
    0.00 :   6150ab:       je     615070 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1050>
    0.00 :   6150ad:       mov    0x10(%rsp),%rdi
    0.00 :   6150b2:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   6150b7:       lea    0x10(%r13),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6150bb:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6150be:       mov    %rdx,0x5c0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6150c6:       mov    0x198(%rax),%rsi
    0.00 :   6150cd:       mov    0x1a0(%rax),%rdx
    0.00 :   6150d4:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6150d7:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6150dc:       mov    0x10(%rsp),%rdi
    0.00 :   6150e1:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :            _Compare, _Alloc>::const_iterator
         :            _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         :            find(const _Key& __k) const
         :            {
         :            const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
    0.00 :   6150e6:       mov    0x118(%rax),%rdx
         :            { return &this->_M_impl._M_header; }
    0.00 :   6150ed:       lea    0x110(%rax),%rsi
         :            while (__x != 0)
    0.00 :   6150f4:       test   %rdx,%rdx
    0.00 :   6150f7:       je     615126 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1106>
         :            { return &this->_M_impl._M_header; }
    0.00 :   6150f9:       mov    %rsi,%rcx
    0.00 :   6150fc:       jmp    61510c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x10ec>
    0.00 :   6150fe:       xchg   %ax,%ax
         :            __y = __x, __x = _S_left(__x);
    0.00 :   615100:       mov    %rdx,%rcx
    0.00 :   615103:       mov    0x10(%rdx),%rdx
         :            while (__x != 0)
    0.00 :   615107:       test   %rdx,%rdx
    0.00 :   61510a:       je     61511b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x10fb>
         :            if (!_M_impl._M_key_compare(_S_key(__x), __k))
    0.00 :   61510c:       cmp    %rbx,0x20(%rdx)
    0.00 :   615110:       jae    615100 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x10e0>
         :            __x = _S_right(__x);
    0.00 :   615112:       mov    0x18(%rdx),%rdx
         :            while (__x != 0)
    0.00 :   615116:       test   %rdx,%rdx
    0.00 :   615119:       jne    61510c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x10ec>
         :            return (__j == end()
         :            || _M_impl._M_key_compare(__k,
         :            _S_key(__j._M_node))) ? end() : __j;
    0.00 :   61511b:       cmp    %rcx,%rsi
    0.00 :   61511e:       je     615126 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1106>
         :            || _M_impl._M_key_compare(__k,
    0.00 :   615120:       cmp    %rbx,0x20(%rcx)
    0.00 :   615124:       jbe    615170 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1150>
    0.00 :   615126:       mov    0x16c(%rax),%eax
    0.00 :   61512c:       cmp    $0xfffffffe,%eax
    0.00 :   61512f:       je     615178 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1158>
    0.00 :   615131:       nopl   0x0(%rax)
    0.00 :   615138:       mov    0x0(%rbp),%rax
    0.00 :   61513c:       mov    0x20(%rsp),%edx
    0.00 :   615140:       mov    %r13,%rsi
    0.00 :   615143:       mov    %rbp,%rdi
    0.00 :   615146:       callq  *0x10(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615149:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615151:       lea    0x10(%r13),%rax
    0.00 :   615155:       cmp    %rax,%rdi
    0.00 :   615158:       je     615070 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1050>
         :            ::operator delete(__p);
    0.00 :   61515e:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   615163:       jmpq   615070 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1050>
    0.00 :   615168:       nopl   0x0(%rax,%rax,1)
    0.00 :   615170:       mov    0x28(%rcx),%eax
    0.00 :   615173:       cmp    $0xfffffffe,%eax
    0.00 :   615176:       jne    615138 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1118>
         :            traits_type::length(__s));
    0.00 :   615178:       mov    0x5c8(%rsp),%rdx
    0.00 :   615180:       mov    $0x14,%r8d
    0.00 :   615186:       xor    %esi,%esi
    0.00 :   615188:       mov    %r13,%rdi
    0.00 :   61518b:       lea    0x2145fd(%rip),%rcx        # 82978f <std::piecewise_construct+0x29ef>
    0.00 :   615192:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   615197:       jmp    615138 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1118>
    0.00 :   615199:       nopl   0x0(%rax)
    0.00 :   6151a0:       xor    %ebx,%ebx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6151a2:       lea    0x5c0(%rsp),%r13
    0.00 :   6151aa:       jmp    6151b4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1194>
    0.00 :   6151ac:       nopl   0x0(%rax)
    0.00 :   6151b0:       add    $0x1,%rbx
    0.00 :   6151b4:       mov    0x150(%rsp),%rdi
    0.00 :   6151bc:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   6151c1:       mov    0xf8(%rax),%rdx
    0.00 :   6151c8:       sub    0xf0(%rax),%rdx
    0.00 :   6151cf:       sar    $0x3,%rdx
    0.00 :   6151d3:       cmp    %ebx,%edx
    0.00 :   6151d5:       jle    6152e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x12c0>
    0.00 :   6151db:       mov    %ebx,%esi
    0.00 :   6151dd:       mov    %r15,%rdi
    0.00 :   6151e0:       callq  5c7480 <onnxruntime::OpKernelContext::ImplicitInputFence(int) const>
    0.00 :   6151e5:       mov    %rax,%rbp
    0.00 :   6151e8:       test   %rax,%rax
    0.00 :   6151eb:       je     6151b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1190>
    0.00 :   6151ed:       mov    0x10(%rsp),%rdi
    0.00 :   6151f2:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   6151f7:       lea    0x10(%r13),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6151fb:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6151fe:       mov    %rdx,0x5c0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615206:       mov    0x198(%rax),%rsi
    0.00 :   61520d:       mov    0x1a0(%rax),%rdx
    0.00 :   615214:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615217:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   61521c:       mov    0x10(%rsp),%rdi
    0.00 :   615221:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
    0.00 :   615226:       mov    0x118(%rax),%rdx
         :            { return &this->_M_impl._M_header; }
    0.00 :   61522d:       lea    0x110(%rax),%rsi
         :            while (__x != 0)
    0.00 :   615234:       test   %rdx,%rdx
    0.00 :   615237:       je     615266 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1246>
         :            { return &this->_M_impl._M_header; }
    0.00 :   615239:       mov    %rsi,%rcx
    0.00 :   61523c:       jmp    61524c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x122c>
    0.00 :   61523e:       xchg   %ax,%ax
         :            __y = __x, __x = _S_left(__x);
    0.00 :   615240:       mov    %rdx,%rcx
    0.00 :   615243:       mov    0x10(%rdx),%rdx
         :            while (__x != 0)
    0.00 :   615247:       test   %rdx,%rdx
    0.00 :   61524a:       je     61525b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x123b>
         :            if (!_M_impl._M_key_compare(_S_key(__x), __k))
    0.00 :   61524c:       cmp    %rbx,0x20(%rdx)
    0.00 :   615250:       jae    615240 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1220>
         :            __x = _S_right(__x);
    0.00 :   615252:       mov    0x18(%rdx),%rdx
         :            while (__x != 0)
    0.00 :   615256:       test   %rdx,%rdx
    0.00 :   615259:       jne    61524c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x122c>
         :            _S_key(__j._M_node))) ? end() : __j;
    0.00 :   61525b:       cmp    %rcx,%rsi
    0.00 :   61525e:       je     615266 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1246>
         :            || _M_impl._M_key_compare(__k,
    0.00 :   615260:       cmp    %rbx,0x20(%rcx)
    0.00 :   615264:       jbe    6152b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1290>
    0.00 :   615266:       mov    0x16c(%rax),%eax
    0.00 :   61526c:       cmp    $0xfffffffe,%eax
    0.00 :   61526f:       je     6152b8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1298>
    0.00 :   615271:       nopl   0x0(%rax)
    0.00 :   615278:       mov    0x0(%rbp),%rax
    0.00 :   61527c:       mov    0x20(%rsp),%edx
    0.00 :   615280:       mov    %r13,%rsi
    0.00 :   615283:       mov    %rbp,%rdi
    0.00 :   615286:       callq  *0x10(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615289:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615291:       lea    0x10(%r13),%rax
    0.00 :   615295:       cmp    %rax,%rdi
    0.00 :   615298:       je     6151b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1190>
         :            ::operator delete(__p);
    0.00 :   61529e:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   6152a3:       jmpq   6151b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1190>
    0.00 :   6152a8:       nopl   0x0(%rax,%rax,1)
    0.00 :   6152b0:       mov    0x28(%rcx),%eax
    0.00 :   6152b3:       cmp    $0xfffffffe,%eax
    0.00 :   6152b6:       jne    615278 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1258>
         :            traits_type::length(__s));
    0.00 :   6152b8:       mov    0x5c8(%rsp),%rdx
    0.00 :   6152c0:       mov    $0x14,%r8d
    0.00 :   6152c6:       xor    %esi,%esi
    0.00 :   6152c8:       mov    %r13,%rdi
    0.00 :   6152cb:       lea    0x2144bd(%rip),%rcx        # 82978f <std::piecewise_construct+0x29ef>
    0.00 :   6152d2:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   6152d7:       jmp    615278 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1258>
    0.00 :   6152d9:       nopl   0x0(%rax)
    0.00 :   6152e0:       xor    %ebx,%ebx
    0.00 :   6152e2:       jmp    61531f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x12ff>
    0.00 :   6152e4:       nopl   0x0(%rax)
    0.00 :   6152e8:       mov    %ebx,%esi
    0.00 :   6152ea:       mov    %r15,%rdi
    0.00 :   6152ed:       callq  5c74f0 <onnxruntime::OpKernelContext::OutputFence(int) const>
    0.00 :   6152f2:       mov    %rax,%rbp
    0.00 :   6152f5:       test   %rax,%rax
    0.00 :   6152f8:       je     61531c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x12fc>
    0.00 :   6152fa:       mov    (%rax),%rax
    0.00 :   6152fd:       mov    0x10(%rsp),%rdi
    0.00 :   615302:       mov    0x18(%rax),%r13
    0.00 :   615306:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   61530b:       lea    0x198(%rax),%rsi
    0.00 :   615312:       mov    0x20(%rsp),%edx
    0.00 :   615316:       mov    %rbp,%rdi
    0.00 :   615319:       callq  *%r13
    0.00 :   61531c:       add    $0x1,%ebx
    0.00 :   61531f:       mov    0x150(%rsp),%rdi
    0.00 :   615327:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   61532c:       mov    0xe0(%rax),%rdx
    0.00 :   615333:       sub    0xd8(%rax),%rdx
    0.00 :   61533a:       sar    $0x3,%rdx
    0.00 :   61533e:       cmp    %edx,%ebx
    0.00 :   615340:       jl     6152e8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x12c8>
    0.00 :   615342:       jmpq   61463d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x61d>
    0.00 :   615347:       nopw   0x0(%rax,%rax,1)
         :            {
         :            const size_type __old_size = size();
    0.00 :   615350:       mov    0x190(%rsp),%rax
    0.00 :   615358:       lea    0x0(,%rdx,8),%rdi
    0.00 :   615360:       mov    %rdi,0xa8(%rsp)
    0.00 :   615368:       mov    %rax,0xb0(%rsp)
    0.00 :   615370:       sub    %rbp,%rax
    0.00 :   615373:       mov    %rax,0x20(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   615378:       test   %rdx,%rdx
    0.00 :   61537b:       je     615e40 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e20>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   615381:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   615386:       mov    0x188(%rsp),%r8
    0.00 :   61538e:       mov    %rax,%rcx
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   615391:       cmp    0xb0(%rsp),%rbp
    0.00 :   615399:       je     6153be <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x139e>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   61539b:       mov    0x20(%rsp),%rdx
    0.00 :   6153a0:       mov    %rcx,%rdi
    0.00 :   6153a3:       mov    %rbp,%rsi
    0.00 :   6153a6:       mov    %r8,0xb0(%rsp)
    0.00 :   6153ae:       callq  53aa0 <memmove@plt>
    0.00 :   6153b3:       mov    0xb0(%rsp),%r8
    0.00 :   6153bb:       mov    %rax,%rcx
         :            if (__p)
    0.00 :   6153be:       test   %r8,%r8
    0.00 :   6153c1:       je     6153db <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x13bb>
         :            ::operator delete(__p);
    0.00 :   6153c3:       mov    %r8,%rdi
    0.00 :   6153c6:       mov    %rcx,0xb0(%rsp)
    0.00 :   6153ce:       callq  53300 <operator delete(void*)@plt>
    0.00 :   6153d3:       mov    0xb0(%rsp),%rcx
         :            _M_get_Tp_allocator());
         :            _M_deallocate(this->_M_impl._M_start,
         :            this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start);
         :            this->_M_impl._M_start = __tmp;
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   6153db:       mov    0x20(%rsp),%rax
         :            this->_M_impl._M_start = __tmp;
    0.00 :   6153e0:       mov    %rcx,0x188(%rsp)
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   6153e8:       add    %rcx,%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6153eb:       add    0xa8(%rsp),%rcx
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   6153f3:       mov    %rax,0x190(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6153fb:       mov    %rcx,0x198(%rsp)
    0.00 :   615403:       jmpq   614565 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x545>
    0.00 :   615408:       nopl   0x0(%rax,%rax,1)
    0.00 :   615410:       lea    0x5c0(%rsp),%r13
    0.00 :   615418:       mov    $0x10,%esi
    0.00 :   61541d:       mov    %r13,%rdi
    0.00 :   615420:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   615425:       mov    0x30(%rbx),%rdx
    0.00 :   615429:       mov    0x28(%rbx),%rsi
    0.00 :   61542d:       mov    %r13,%rdi
    0.00 :   615430:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   615435:       mov    $0x1,%edx
    0.00 :   61543a:       lea    0x226d00(%rip),%rsi        # 83c141 <typeinfo name for onnxruntime::ConvAddFusion+0x841>
    0.00 :   615441:       mov    %r13,%rdi
    0.00 :   615444:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   615449:       mov    %r12,%rsi
    0.00 :   61544c:       mov    %r13,%rdi
    0.00 :   61544f:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            { return _M_stringbuf.str(); }
    0.00 :   615454:       lea    0x1a0(%rsp),%rax
    0.00 :   61545c:       lea    0x8(%r13),%rsi
    0.00 :   615460:       mov    %rax,%rdi
    0.00 :   615463:       mov    %rax,0x50(%rsp)
    0.00 :   615468:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
         :            { }
    0.00 :   61546d:       mov    0x6128ec(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615474:       mov    0x610(%rsp),%rdi
    0.00 :   61547c:       lea    0x18(%rax),%rdx
    0.00 :   615480:       add    $0x40,%rax
    0.00 :   615484:       mov    %rax,0x630(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   61548c:       mov    0x612b45(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { }
    0.00 :   615493:       mov    %rdx,0x5c0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   61549b:       add    $0x10,%rax
    0.00 :   61549f:       mov    %rax,0x5c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   6154a7:       lea    0x60(%r13),%rax
    0.00 :   6154ab:       cmp    %rax,%rdi
    0.00 :   6154ae:       je     6154b5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1495>
    0.00 :   6154b0:       callq  53300 <operator delete(void*)@plt>
    0.00 :   6154b5:       mov    0x6127a4(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   6154bc:       lea    0x40(%r13),%rdi
    0.00 :   6154c0:       add    $0x10,%rax
    0.00 :   6154c4:       mov    %rax,0x5c8(%rsp)
    0.00 :   6154cc:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   6154d1:       mov    0x6128c8(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   6154d8:       lea    0x70(%r13),%rdi
    0.00 :   6154dc:       mov    0x8(%rax),%rdx
    0.00 :   6154e0:       mov    0x10(%rax),%rax
    0.00 :   6154e4:       mov    %rdx,0x5c0(%rsp)
    0.00 :   6154ec:       mov    -0x18(%rdx),%rdx
    0.00 :   6154f0:       mov    %rax,0x5c0(%rsp,%rdx,1)
    0.00 :   6154f8:       mov    0x612629(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   6154ff:       add    $0x10,%rax
    0.00 :   615503:       mov    %rax,0x630(%rsp)
    0.00 :   61550b:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   615510:       jmpq   614cfc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xcdc>
    0.00 :   615515:       nopl   (%rax)
    0.00 :   615518:       xor    %r12d,%r12d
    0.00 :   61551b:       xor    %ebx,%ebx
    0.00 :   61551d:       jmp    61555b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x153b>
    0.00 :   61551f:       nop
    0.00 :   615520:       mov    %ebx,%esi
    0.00 :   615522:       mov    %r15,%rdi
    0.00 :   615525:       callq  5c7650 <onnxruntime::OpKernelContext::GetOutputMLValue(int)>
    0.00 :   61552a:       mov    %rax,%r13
    0.00 :   61552d:       test   %rax,%rax
    0.00 :   615530:       je     615558 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1538>
    0.00 :   615532:       mov    0x10(%rax),%rdi
    0.00 :   615536:       test   %rdi,%rdi
    0.00 :   615539:       je     615558 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1538>
    0.00 :   61553b:       mov    (%rdi),%rax
    0.00 :   61553e:       callq  *0x30(%rax)
    0.00 :   615541:       test   %al,%al
    0.00 :   615543:       je     615558 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1538>
    0.00 :   615545:       mov    %r13,%rdi
    0.00 :   615548:       callq  1158d0 <onnxruntime::Tensor const& OrtValue::Get<onnxruntime::Tensor>() const>
    0.00 :   61554d:       mov    %rax,%rdi
    0.00 :   615550:       callq  5ede70 <onnxruntime::Tensor::SizeInBytes() const>
    0.00 :   615555:       add    %rax,%r12
    0.00 :   615558:       add    $0x1,%ebx
    0.00 :   61555b:       mov    0x150(%rsp),%rdi
    0.00 :   615563:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   615568:       mov    0xe0(%rax),%rdx
    0.00 :   61556f:       sub    0xd8(%rax),%rdx
    0.00 :   615576:       sar    $0x3,%rdx
    0.00 :   61557a:       cmp    %edx,%ebx
    0.00 :   61557c:       jl     615520 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1500>
    0.00 :   61557e:       mov    0x28(%rsp),%rax
    0.00 :   615583:       mov    0x10(%rsp),%rdi
    0.00 :   615588:       mov    0x218(%rax),%rax
    0.00 :   61558f:       mov    %rax,0xc8(%rsp)
    0.00 :   615597:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61559c:       lea    0x5c0(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155a4:       lea    0x282b8d(%rip),%rdx        # 898138 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x278>
    0.00 :   6155ab:       mov    %rax,%rbx
    0.00 :   6155ae:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6155b2:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155b6:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6155b9:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155c1:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6155c6:       lea    0x30(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155ca:       lea    0x20(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6155ce:       mov    %rax,0x5e0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6155d6:       mov    (%rbx),%rsi
    0.00 :   6155d9:       mov    0x8(%rbx),%rdx
    0.00 :   6155dd:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155e0:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6155e5:       mov    0x10(%rsp),%rdi
    0.00 :   6155ea:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
    0.00 :   6155ef:       lea    0x281c3b(%rip),%rdx        # 897231 <onnxruntime::utils::FindMemoryInfoForValue(onnxruntime::SessionState const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::__PRETTY_FUNCTION__+0x351>
    0.00 :   6155f6:       mov    %rax,%rbx
    0.00 :   6155f9:       lea    0x40(%r13),%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6155fd:       lea    0x50(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615601:       lea    -0x8(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615605:       mov    %rax,0x600(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61560d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615612:       lea    0x70(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615616:       lea    0x60(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61561a:       mov    %rax,0x620(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615622:       mov    0x48(%rbx),%rsi
    0.00 :   615626:       mov    0x50(%rbx),%rdx
    0.00 :   61562a:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61562d:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   615632:       mov    0x10(%rsp),%rdi
    0.00 :   615637:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :
         :            inline string
         :            to_string(unsigned long __val)
         :            { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
         :            4 * sizeof(unsigned long),
         :            "%lu", __val); }
    0.00 :   61563c:       mov    0x612605(%rip),%rbx        # c27c48 <vsnprintf@GLIBC_2.2.5>
    0.00 :   615643:       mov    (%rax),%r8
    0.00 :   615646:       xor    %eax,%eax
    0.00 :   615648:       lea    0x1e0(%rsp),%rdi
    0.00 :   615650:       lea    0x210450(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   615657:       mov    $0x20,%edx
    0.00 :   61565c:       mov    %rdi,0xb8(%rsp)
    0.00 :   615664:       mov    %rbx,%rsi
    0.00 :   615667:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61566c:       lea    0x282f07(%rip),%rdx        # 89857a <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x11a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615673:       lea    0x90(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61567a:       lea    0x80(%r13),%rdi
    0.00 :   615681:       lea    -0xb(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615685:       mov    %rax,0x640(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61568d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615692:       lea    0xb0(%r13),%rax
         :            if (__str._M_is_local())
    0.00 :   615699:       mov    0xb8(%rsp),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6156a1:       mov    %rax,0x660(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   6156a9:       mov    0x1e0(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   6156b1:       lea    0x10(%rdi),%rdx
    0.00 :   6156b5:       cmp    %rdx,%rax
    0.00 :   6156b8:       je     615e52 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e32>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6156be:       mov    %rax,0x660(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   6156c6:       mov    0x1f0(%rsp),%rax
    0.00 :   6156ce:       mov    %rax,0x670(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6156d6:       mov    0x1e8(%rsp),%rax
    0.00 :   6156de:       mov    0xf8(%rsp),%r8
         :            "%lu", __val); }
    0.00 :   6156e6:       mov    $0x20,%edx
    0.00 :   6156eb:       mov    %rbx,%rsi
    0.00 :   6156ee:       lea    0x2103b2(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   6156f5:       movb   $0x0,0x1f0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6156fd:       mov    %rax,0x668(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615705:       mov    0xb8(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   61570d:       movq   $0x0,0x1e8(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615719:       add    $0x10,%rax
    0.00 :   61571d:       mov    %r8,0xc0(%rsp)
    0.00 :   615725:       mov    %rax,0x1e0(%rsp)
         :            "%lu", __val); }
    0.00 :   61572d:       lea    0x200(%rsp),%rax
    0.00 :   615735:       mov    %rax,0xb0(%rsp)
    0.00 :   61573d:       mov    %rax,%rdi
    0.00 :   615740:       xor    %eax,%eax
    0.00 :   615742:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615747:       lea    0x282e3c(%rip),%rdx        # 89858a <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x12a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61574e:       lea    0xd0(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615755:       lea    0xc0(%r13),%rdi
    0.00 :   61575c:       lea    -0xf(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615760:       mov    %rax,0x680(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615768:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61576d:       lea    0xf0(%r13),%rax
         :            if (__str._M_is_local())
    0.00 :   615774:       mov    0xb0(%rsp),%rcx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61577c:       mov    %rax,0x6a0(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615784:       mov    0x200(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   61578c:       lea    0x10(%rcx),%rdx
    0.00 :   615790:       cmp    %rdx,%rax
    0.00 :   615793:       je     615e9e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e7e>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615799:       mov    %rax,0x6a0(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   6157a1:       mov    0x210(%rsp),%rax
    0.00 :   6157a9:       mov    %rax,0x6b0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6157b1:       mov    0x208(%rsp),%rax
         :            "%lu", __val); }
    0.00 :   6157b9:       mov    0x98(%rsp),%r8
    0.00 :   6157c1:       mov    $0x20,%edx
    0.00 :   6157c6:       mov    %rbx,%rsi
    0.00 :   6157c9:       lea    0x2102d7(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   6157d0:       movb   $0x0,0x210(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6157d8:       mov    %rax,0x6a8(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6157e0:       mov    0xb0(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   6157e8:       movq   $0x0,0x208(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6157f4:       add    $0x10,%rax
    0.00 :   6157f8:       mov    %rax,0x200(%rsp)
         :            "%lu", __val); }
    0.00 :   615800:       lea    0x220(%rsp),%rax
    0.00 :   615808:       mov    %rax,0xa8(%rsp)
    0.00 :   615810:       mov    %rax,%rdi
    0.00 :   615813:       xor    %eax,%eax
    0.00 :   615815:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61581a:       lea    0x282d79(%rip),%rdx        # 89859a <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x13a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615821:       lea    0x110(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615828:       lea    0x100(%r13),%rdi
    0.00 :   61582f:       lea    -0xf(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615833:       mov    %rax,0x6c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61583b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615840:       lea    0x130(%r13),%rax
         :            if (__str._M_is_local())
    0.00 :   615847:       mov    0xa8(%rsp),%rcx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61584f:       mov    %rax,0x6e0(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615857:       mov    0x220(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   61585f:       lea    0x10(%rcx),%rdx
    0.00 :   615863:       cmp    %rdx,%rax
    0.00 :   615866:       je     615e88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e68>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   61586c:       mov    %rax,0x6e0(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   615874:       mov    0x230(%rsp),%rax
    0.00 :   61587c:       mov    %rax,0x6f0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   615884:       mov    0x228(%rsp),%rax
         :            "%lu", __val); }
    0.00 :   61588c:       mov    0xa0(%rsp),%r8
    0.00 :   615894:       mov    $0x20,%edx
    0.00 :   615899:       mov    %rbx,%rsi
    0.00 :   61589c:       lea    0x210204(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   6158a3:       movb   $0x0,0x230(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6158ab:       mov    %rax,0x6e8(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6158b3:       mov    0xa8(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   6158bb:       movq   $0x0,0x228(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6158c7:       add    $0x10,%rax
    0.00 :   6158cb:       mov    %rax,0x220(%rsp)
         :            "%lu", __val); }
    0.00 :   6158d3:       lea    0x240(%rsp),%rax
    0.00 :   6158db:       mov    %rax,0x38(%rsp)
    0.00 :   6158e0:       mov    %rax,%rdi
    0.00 :   6158e3:       xor    %eax,%eax
    0.00 :   6158e5:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6158ea:       lea    0x282cb8(%rip),%rdx        # 8985a9 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x149>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6158f1:       lea    0x150(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6158f8:       lea    0x140(%r13),%rdi
    0.00 :   6158ff:       lea    -0xe(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615903:       mov    %rax,0x700(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61590b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615910:       lea    0x170(%r13),%rax
         :            if (__str._M_is_local())
    0.00 :   615917:       mov    0x38(%rsp),%rcx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61591c:       mov    %rax,0x720(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615924:       mov    0x240(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   61592c:       lea    0x10(%rcx),%rdx
    0.00 :   615930:       cmp    %rdx,%rax
    0.00 :   615933:       je     615eca <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1eaa>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615939:       mov    %rax,0x720(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   615941:       mov    0x250(%rsp),%rax
    0.00 :   615949:       mov    %rax,0x730(%rsp)
         :            "%lu", __val); }
    0.00 :   615951:       mov    0x78(%rsp),%rdi
    0.00 :   615956:       mov    %r12,%r8
    0.00 :   615959:       mov    $0x20,%edx
    0.00 :   61595e:       mov    %rbx,%rsi
         :            { _M_string_length = __length; }
    0.00 :   615961:       mov    0x248(%rsp),%rax
         :            "%lu", __val); }
    0.00 :   615969:       lea    0x210137(%rip),%rcx        # 825aa7 <_fini+0x80f>
         :            { _M_string_length = __length; }
    0.00 :   615970:       movq   $0x0,0x248(%rsp)
    0.00 :   61597c:       movb   $0x0,0x250(%rsp)
    0.00 :   615984:       mov    %rax,0x728(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   61598c:       mov    0x38(%rsp),%rax
    0.00 :   615991:       add    $0x10,%rax
    0.00 :   615995:       mov    %rax,0x240(%rsp)
         :            "%lu", __val); }
    0.00 :   61599d:       xor    %eax,%eax
    0.00 :   61599f:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6159a4:       lea    0x282c0a(%rip),%rdx        # 8985b5 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x155>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6159ab:       lea    0x190(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6159b2:       lea    0x180(%r13),%rdi
    0.00 :   6159b9:       lea    -0xb(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6159bd:       mov    %rax,0x740(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6159c5:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6159ca:       lea    0x1b0(%r13),%rax
    0.00 :   6159d1:       mov    %rax,0x760(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   6159d9:       mov    0x2a0(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   6159e1:       cmp    0x68(%rsp),%rax
    0.00 :   6159e6:       je     615eb4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e94>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6159ec:       mov    %rax,0x760(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   6159f4:       mov    0x2b0(%rsp),%rax
    0.00 :   6159fc:       mov    %rax,0x770(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   615a04:       mov    0x2a8(%rsp),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615a0c:       mov    0x1a0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615a14:       lea    0x1c0(%rsp),%rbx
         :            { _M_string_length = __length; }
    0.00 :   615a1c:       movq   $0x0,0x2a8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615a28:       mov    0x1a8(%rsp),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615a30:       mov    %rbx,%rdi
    0.00 :   615a33:       movb   $0x0,0x2b0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   615a3b:       mov    %rax,0x768(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615a43:       mov    0x68(%rsp),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615a48:       add    %rsi,%rdx
    0.00 :   615a4b:       mov    %r13,0x120(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615a53:       mov    %rax,0x2a0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615a5b:       lea    0x10(%rbx),%rax
    0.00 :   615a5f:       movq   $0x7,0x128(%rsp)
    0.00 :   615a6b:       mov    %rax,0x1c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615a73:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            if (this->max_size() - (this->size() - __n1) < __n2)
    0.00 :   615a78:       movabs $0x7fffffffffffffff,%rax
    0.00 :   615a82:       sub    0x1c8(%rsp),%rax
    0.00 :   615a8a:       cmp    $0xb,%rax
    0.00 :   615a8e:       jbe    616fda <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2fba>
         :            return _M_append(__s, __n);
    0.00 :   615a94:       mov    $0xc,%edx
    0.00 :   615a99:       lea    0x2826c8(%rip),%rsi        # 898168 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x2a8>
    0.00 :   615aa0:       mov    %rbx,%rdi
    0.00 :   615aa3:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
    0.00 :   615aa8:       mov    0xc8(%rsp),%rdi
    0.00 :   615ab0:       xor    %r9d,%r9d
    0.00 :   615ab3:       mov    %rbx,%rdx
    0.00 :   615ab6:       lea    0xf0(%rsp),%rcx
    0.00 :   615abe:       lea    0x120(%rsp),%r8
    0.00 :   615ac6:       mov    $0x1,%esi
    0.00 :   615acb:       callq  6966b0 <onnxruntime::profiling::Profiler::EndTimeAndRecordEvent(onnxruntime::profiling::EventCategory, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615ad0:       mov    0x1c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615ad8:       add    $0x10,%rbx
    0.00 :   615adc:       cmp    %rbx,%rdi
    0.00 :   615adf:       je     615ae6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ac6>
    0.00 :   615ae1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615ae6:       lea    0x1c0(%r13),%rbx
    0.00 :   615aed:       nopl   (%rax)
    0.00 :   615af0:       sub    $0x40,%rbx
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615af4:       mov    0x20(%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   615af8:       lea    0x30(%rbx),%rax
    0.00 :   615afc:       cmp    %rax,%rdi
    0.00 :   615aff:       je     615b06 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ae6>
    0.00 :   615b01:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b06:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   615b09:       lea    0x10(%rbx),%rax
    0.00 :   615b0d:       cmp    %rax,%rdi
    0.00 :   615b10:       je     615b17 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1af7>
    0.00 :   615b12:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b17:       cmp    %r13,%rbx
    0.00 :   615b1a:       jne    615af0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ad0>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b1c:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b24:       cmp    0x68(%rsp),%rdi
    0.00 :   615b29:       je     615b30 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b10>
    0.00 :   615b2b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b30:       mov    0x38(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b35:       mov    0x240(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b3d:       add    $0x10,%rax
    0.00 :   615b41:       cmp    %rax,%rdi
    0.00 :   615b44:       je     615b4b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b2b>
    0.00 :   615b46:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b4b:       mov    0xa8(%rsp),%r13
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b53:       mov    0x220(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b5b:       add    $0x10,%r13
    0.00 :   615b5f:       cmp    %r13,%rdi
    0.00 :   615b62:       je     615b69 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b49>
    0.00 :   615b64:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b69:       mov    0xb0(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b71:       mov    0x200(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b79:       add    $0x10,%rax
    0.00 :   615b7d:       cmp    %rax,%rdi
    0.00 :   615b80:       je     615b87 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b67>
    0.00 :   615b82:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b87:       mov    0xb8(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b8f:       mov    0x1e0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b97:       add    $0x10,%rax
    0.00 :   615b9b:       cmp    %rax,%rdi
    0.00 :   615b9e:       je     615ba5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b85>
    0.00 :   615ba0:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615ba5:       mov    0x28(%rsp),%rax
    0.00 :   615baa:       mov    0x218(%rax),%rdi
    0.00 :   615bb1:       callq  695530 <onnxruntime::profiling::Profiler::StartTime() const>
    0.00 :   615bb6:       mov    0xc0(%rsp),%rcx
         :            { return !!(*_M_p & _M_mask); }
    0.00 :   615bbe:       mov    0x68(%r14),%rdx
    0.00 :   615bc2:       mov    %rax,0xe8(%rsp)
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   615bca:       mov    $0x1,%eax
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   615bcf:       mov    %rcx,%rsi
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   615bd2:       shl    %cl,%rax
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   615bd5:       shr    $0x6,%rsi
    0.00 :   615bd9:       test   %rax,(%rdx,%rsi,8)
    0.00 :   615bdd:       je     615cdb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1cbb>
    0.00 :   615be3:       nopl   0x0(%rax,%rax,1)
    0.00 :   615be8:       xor    %ebx,%ebx
    0.00 :   615bea:       jmp    615c0f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1bef>
    0.00 :   615bec:       nopl   0x0(%rax)
    0.00 :   615bf0:       mov    %ebx,%esi
    0.00 :   615bf2:       mov    %r15,%rdi
    0.00 :   615bf5:       callq  5c7410 <onnxruntime::OpKernelContext::InputFence(int) const>
    0.00 :   615bfa:       test   %rax,%rax
    0.00 :   615bfd:       je     615c0c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1bec>
    0.00 :   615bff:       mov    (%rax),%rdx
    0.00 :   615c02:       mov    0x20(%rsp),%esi
    0.00 :   615c06:       mov    %rax,%rdi
    0.00 :   615c09:       callq  *0x20(%rdx)
    0.00 :   615c0c:       add    $0x1,%ebx
    0.00 :   615c0f:       mov    0x150(%rsp),%rdi
    0.00 :   615c17:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   615c1c:       mov    0xb0(%rax),%rdx
    0.00 :   615c23:       sub    0xa8(%rax),%rdx
    0.00 :   615c2a:       sar    $0x3,%rdx
    0.00 :   615c2e:       cmp    %edx,%ebx
    0.00 :   615c30:       jl     615bf0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1bd0>
    0.00 :   615c32:       xor    %ebx,%ebx
    0.00 :   615c34:       jmp    615c5f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c3f>
    0.00 :   615c36:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   615c40:       mov    %ebx,%esi
    0.00 :   615c42:       mov    %r15,%rdi
    0.00 :   615c45:       callq  5c7480 <onnxruntime::OpKernelContext::ImplicitInputFence(int) const>
    0.00 :   615c4a:       test   %rax,%rax
    0.00 :   615c4d:       je     615c5c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c3c>
    0.00 :   615c4f:       mov    (%rax),%rdx
    0.00 :   615c52:       mov    0x20(%rsp),%esi
    0.00 :   615c56:       mov    %rax,%rdi
    0.00 :   615c59:       callq  *0x20(%rdx)
    0.00 :   615c5c:       add    $0x1,%ebx
    0.00 :   615c5f:       mov    0x150(%rsp),%rdi
    0.00 :   615c67:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   615c6c:       mov    0xf8(%rax),%rdx
    0.00 :   615c73:       sub    0xf0(%rax),%rdx
    0.00 :   615c7a:       sar    $0x3,%rdx
    0.00 :   615c7e:       cmp    %edx,%ebx
    0.00 :   615c80:       jl     615c40 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c20>
    0.00 :   615c82:       xor    %ebx,%ebx
    0.00 :   615c84:       jmp    615caf <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c8f>
    0.00 :   615c86:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   615c90:       mov    %ebx,%esi
    0.00 :   615c92:       mov    %r15,%rdi
    0.00 :   615c95:       callq  5c74f0 <onnxruntime::OpKernelContext::OutputFence(int) const>
    0.00 :   615c9a:       test   %rax,%rax
    0.00 :   615c9d:       je     615cac <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c8c>
    0.00 :   615c9f:       mov    (%rax),%rdx
    0.00 :   615ca2:       mov    0x20(%rsp),%esi
    0.00 :   615ca6:       mov    %rax,%rdi
    0.00 :   615ca9:       callq  *0x28(%rdx)
    0.00 :   615cac:       add    $0x1,%ebx
    0.00 :   615caf:       mov    0x150(%rsp),%rdi
    0.00 :   615cb7:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   615cbc:       mov    0xe0(%rax),%rdx
    0.00 :   615cc3:       sub    0xd8(%rax),%rdx
    0.00 :   615cca:       sar    $0x3,%rdx
    0.00 :   615cce:       cmp    %edx,%ebx
    0.00 :   615cd0:       jl     615c90 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c70>
    0.00 :   615cd2:       test   %bpl,%bpl
    0.00 :   615cd5:       je     614787 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x767>
    0.00 :   615cdb:       mov    0x28(%rsp),%rax
    0.00 :   615ce0:       mov    0x10(%rsp),%rdi
    0.00 :   615ce5:       mov    0x218(%rax),%rbx
    0.00 :   615cec:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615cf1:       lea    0x5c0(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615cf9:       lea    0x282438(%rip),%rdx        # 898138 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x278>
    0.00 :   615d00:       mov    %rax,%rbp
    0.00 :   615d03:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615d07:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d0b:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615d0e:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d16:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615d1b:       lea    0x30(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d1f:       lea    0x20(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615d23:       mov    %rax,0x5e0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615d2b:       mov    0x0(%rbp),%rsi
    0.00 :   615d2f:       mov    0x8(%rbp),%rdx
    0.00 :   615d33:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d36:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615d3b:       mov    0x1a0(%rsp),%rsi
    0.00 :   615d43:       mov    0x1a8(%rsp),%rdx
    0.00 :   615d4b:       mov    %r13,0x120(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615d53:       mov    0x68(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d58:       mov    0x78(%rsp),%rdi
    0.00 :   615d5d:       movq   $0x1,0x128(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615d69:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615d6c:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d74:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            if (this->max_size() - (this->size() - __n1) < __n2)
    0.00 :   615d79:       movabs $0x7fffffffffffffff,%rax
    0.00 :   615d83:       sub    0x2a8(%rsp),%rax
    0.00 :   615d8b:       cmp    $0xb,%rax
    0.00 :   615d8f:       jbe    616fc9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2fa9>
         :            return _M_append(__s, __n);
    0.00 :   615d95:       mov    0x78(%rsp),%r15
    0.00 :   615d9a:       mov    $0xc,%edx
    0.00 :   615d9f:       lea    0x2823cf(%rip),%rsi        # 898175 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x2b5>
    0.00 :   615da6:       mov    %r15,%rdi
    0.00 :   615da9:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
    0.00 :   615dae:       xor    %r9d,%r9d
    0.00 :   615db1:       mov    %r15,%rdx
    0.00 :   615db4:       mov    $0x1,%esi
    0.00 :   615db9:       mov    %rbx,%rdi
    0.00 :   615dbc:       lea    0xe8(%rsp),%rcx
    0.00 :   615dc4:       lea    0x120(%rsp),%r8
    0.00 :   615dcc:       callq  6966b0 <onnxruntime::profiling::Profiler::EndTimeAndRecordEvent(onnxruntime::profiling::EventCategory, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615dd1:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615dd9:       cmp    0x68(%rsp),%rdi
    0.00 :   615dde:       je     615de5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1dc5>
    0.00 :   615de0:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615de5:       mov    0x5e0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615ded:       lea    0x30(%r13),%rax
    0.00 :   615df1:       cmp    %rax,%rdi
    0.00 :   615df4:       je     615dfb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ddb>
    0.00 :   615df6:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615dfb:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615e03:       lea    0x10(%r13),%rax
    0.00 :   615e07:       cmp    %rax,%rdi
    0.00 :   615e0a:       je     614787 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x767>
    0.00 :   615e10:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   615e15:       jmpq   614787 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x767>
    0.00 :   615e1a:       nopw   0x0(%rax,%rax,1)
    0.00 :   615e20:       mov    %r9,0x8(%rsp)
    0.00 :   615e25:       callq  695530 <onnxruntime::profiling::Profiler::StartTime() const>
    0.00 :   615e2a:       mov    0x8(%rsp),%r9
    0.00 :   615e2f:       mov    %rax,0xe0(%rsp)
    0.00 :   615e37:       jmpq   6140c4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xa4>
    0.00 :   615e3c:       nopl   0x0(%rax)
         :            if (this->capacity() < __n)
    0.00 :   615e40:       mov    %rbp,%r8
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   615e43:       xor    %ecx,%ecx
    0.00 :   615e45:       jmpq   615391 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1371>
    0.00 :   615e4a:       xor    %r14d,%r14d
    0.00 :   615e4d:       jmpq   6142b1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x291>
         :            static char_type*
         :            copy(char_type* __s1, const char_type* __s2, size_t __n)
         :            {
         :            if (__n == 0)
         :            return __s1;
         :            return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    0.00 :   615e52:       movdqa 0x1f0(%rsp),%xmm0
    0.00 :   615e5b:       movaps %xmm0,0x670(%rsp)
    0.00 :   615e63:       jmpq   6156d6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x16b6>
    0.00 :   615e68:       nopl   0x0(%rax,%rax,1)
    0.00 :   615e70:       mov    %rbp,%rdi
    0.00 :   615e73:       callq  1158d0 <onnxruntime::Tensor const& OrtValue::Get<onnxruntime::Tensor>() const>
    0.00 :   615e78:       mov    %rax,%rdi
    0.00 :   615e7b:       mov    %rax,0x110(%rsp)
    0.00 :   615e83:       jmpq   614f18 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xef8>
    0.00 :   615e88:       movdqa 0x230(%rsp),%xmm2
    0.00 :   615e91:       movaps %xmm2,0x6f0(%rsp)
    0.00 :   615e99:       jmpq   615884 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1864>
    0.00 :   615e9e:       movdqa 0x210(%rsp),%xmm1
    0.00 :   615ea7:       movaps %xmm1,0x6b0(%rsp)
    0.00 :   615eaf:       jmpq   6157b1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1791>
    0.00 :   615eb4:       movdqa 0x2b0(%rsp),%xmm4
    0.00 :   615ebd:       movaps %xmm4,0x770(%rsp)
    0.00 :   615ec5:       jmpq   615a04 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x19e4>
    0.00 :   615eca:       movdqa 0x250(%rsp),%xmm3
    0.00 :   615ed3:       movaps %xmm3,0x730(%rsp)
    0.00 :   615edb:       jmpq   615951 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1931>
    0.00 :   615ee0:       lea    0x140(%rsp),%r15
    0.00 :   615ee8:       mov    0x88(%rsp),%rdx
    0.00 :   615ef0:       mov    0x18(%rsp),%rsi
    0.00 :   615ef5:       mov    %r15,%rdi
    0.00 :   615ef8:       callq  5a9db0 <onnxruntime::IExecutionFrame::GetOutputs(std::vector<OrtValue, std::allocator<OrtValue> >&)>
    0.00 :   615efd:       cmpq   $0x0,0x140(%rsp)
    0.00 :   615f06:       je     615f3b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f1b>
    0.00 :   615f08:       mov    $0x1c0,%r8d
    0.00 :   615f0e:       lea    0x2827bb(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   615f15:       mov    %r15,%rsi
    0.00 :   615f18:       xor    %edi,%edi
    0.00 :   615f1a:       lea    0x2825a7(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   615f21:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   615f26:       mov    0x140(%rsp),%rax
    0.00 :   615f2e:       mov    0x70(%rsp),%rcx
    0.00 :   615f33:       mov    %rax,(%rcx)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   615f36:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
    0.00 :   615f3b:       cmpq   $0x0,0x4b0(%rsp)
    0.00 :   615f44:       je     615fa7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f87>
    0.00 :   615f46:       mov    0x90(%rsp),%rax
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   615f4e:       movq   $0x0,0x148(%rsp)
    0.00 :   615f5a:       movq   $0x0,0x150(%rsp)
    0.00 :   615f66:       mov    (%rax),%rbx
    0.00 :   615f69:       mov    0x8(%rax),%rbp
    0.00 :   615f6d:       cmp    %rbp,%rbx
    0.00 :   615f70:       je     616e46 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2e26>
    0.00 :   615f76:       mov    0x10(%rbx),%rdi
         :            std::forward<_Args>(__args)...);
         :            ++this->_M_impl._M_finish;
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         :            }
         :            else
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    0.00 :   615f7a:       lea    0x120(%rsp),%r12
    0.00 :   615f82:       test   %rdi,%rdi
    0.00 :   615f85:       je     615fa7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f87>
    0.00 :   615f87:       mov    (%rdi),%rax
    0.00 :   615f8a:       callq  *0x30(%rax)
    0.00 :   615f8d:       test   %al,%al
    0.00 :   615f8f:       jne    616d6d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2d4d>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   615f95:       mov    0x140(%rsp),%rdi
         :            if (__p)
    0.00 :   615f9d:       test   %rdi,%rdi
    0.00 :   615fa0:       je     615fa7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f87>
         :            ::operator delete(__p);
    0.00 :   615fa2:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615fa7:       cmpb   $0x0,0xdf(%rsp)
    0.00 :   615faf:       jne    616dc5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2da5>
         :            { return const_iterator(_M_begin()); }
    0.00 :   615fb5:       mov    0x530(%rsp),%r13
    0.00 :   615fbd:       lea    0x240(%rsp),%rax
    0.00 :   615fc5:       mov    %rax,0x38(%rsp)
    0.00 :   615fca:       test   %r13,%r13
    0.00 :   615fcd:       je     616448 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2428>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615fd3:       lea    0x2a0(%rsp),%rax
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615fdb:       lea    0x5c0(%rsp),%r12
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615fe3:       mov    %rax,0x8(%rsp)
    0.00 :   615fe8:       lea    0x2b0(%rsp),%rax
    0.00 :   615ff0:       mov    %rax,0x10(%rsp)
    0.00 :   615ff5:       nopl   (%rax)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615ff8:       mov    0x38(%rsp),%rdi
    0.00 :   615ffd:       lea    0x10(%rdi),%rax
    0.00 :   616001:       mov    %rax,0x240(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616009:       mov    0x8(%r13),%rsi
    0.00 :   61600d:       mov    0x10(%r13),%rdx
    0.00 :   616011:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616014:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   616019:       mov    0x40(%rsp),%rbx
         :            _ImplicitlyConvertiblePair<_U1, _U2>(),
         :            bool>::type=false>
         :            explicit constexpr pair(const pair<_U1, _U2>& __p)
         :            : first(__p.first), second(__p.second) { }
         :
         :            constexpr pair(const pair&) = default;
    0.00 :   61601e:       mov    0x28(%r13),%rax
    0.00 :   616022:       cmpl   $0x1,0x28(%rbx)
    0.00 :   616026:       mov    %rax,0x260(%rsp)
    0.00 :   61602e:       jg     616420 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2400>
    0.00 :   616034:       mov    0x8(%rsp),%r14
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616039:       mov    0x10(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61603e:       lea    0x2824c6(%rip),%rdx        # 89850b <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xab>
    0.00 :   616045:       lea    -0x43(%rdx),%rsi
    0.00 :   616049:       mov    %r14,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61604c:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616054:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   616059:       lea    0x282677(%rip),%rdx        # 8986d7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616060:       lea    0x38(%r14),%rax
    0.00 :   616064:       movl   $0x1e1,0x2c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61606f:       lea    0x28(%r14),%rdi
    0.00 :   616073:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616077:       mov    %rax,0x2c8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61607f:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   616084:       lea    0x612c1d(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61608b:       mov    0x2a0(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616093:       lea    0x20(%r12),%rdi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   616098:       movq   $0x0,0x2e8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6160a4:       mov    0x2a8(%rsp),%rdx
    0.00 :   6160ac:       mov    %rbx,0x5c0(%rsp)
    0.00 :   6160b4:       movq   $0x0,0x2f0(%rsp)
    0.00 :   6160c0:       mov    (%rax),%rax
    0.00 :   6160c3:       movq   $0x0,0x2f8(%rsp)
    0.00 :   6160cf:       add    %rsi,%rdx
    0.00 :   6160d2:       mov    %rax,0x5d0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6160da:       lea    0x30(%r12),%rax
    0.00 :   6160df:       movl   $0x1,0x5c8(%rsp)
    0.00 :   6160ea:       movl   $0x0,0x5d8(%rsp)
    0.00 :   6160f5:       mov    %rax,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6160fd:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   616102:       mov    0x2c0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616109:       mov    0x2c8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616111:       lea    0x48(%r12),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616116:       mov    0x2d0(%rsp),%rdx
    0.00 :   61611e:       mov    %eax,0x600(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616125:       lea    0x58(%r12),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61612a:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61612d:       mov    %rax,0x608(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616135:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   61613a:       mov    0x2f0(%rsp),%r14
    0.00 :   616142:       mov    0x2e8(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   61614a:       movq   $0x0,0x628(%rsp)
    0.00 :   616156:       movq   $0x0,0x630(%rsp)
    0.00 :   616162:       movq   $0x0,0x638(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   61616e:       mov    %r14,%rbp
    0.00 :   616171:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   616174:       mov    %rbp,%rax
    0.00 :   616177:       sar    $0x5,%rax
    0.00 :   61617b:       je     616b65 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b45>
         :            if (__n > this->max_size())
    0.00 :   616181:       movabs $0x7ffffffffffffff,%rcx
    0.00 :   61618b:       cmp    %rcx,%rax
    0.00 :   61618e:       ja     616f86 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f66>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   616194:       mov    %rbp,%rdi
    0.00 :   616197:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   61619c:       mov    0x2f0(%rsp),%r14
    0.00 :   6161a4:       mov    0x2e8(%rsp),%rbx
    0.00 :   6161ac:       mov    %rax,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6161af:       add    %r15,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   6161b2:       mov    %r15,0x628(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6161ba:       mov    %rbp,0x638(%rsp)
    0.00 :   6161c2:       mov    %r15,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   6161c5:       mov    %r15,0x630(%rsp)
    0.00 :   6161cd:       cmp    %r14,%rbx
    0.00 :   6161d0:       je     6161ff <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x21df>
    0.00 :   6161d2:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6161d8:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6161dc:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6161df:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6161e3:       mov    (%rbx),%rsi
    0.00 :   6161e6:       mov    0x8(%rbx),%rdx
    0.00 :   6161ea:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6161ed:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6161f2:       add    $0x20,%rbx
    0.00 :   6161f6:       add    $0x20,%rbp
    0.00 :   6161fa:       cmp    %rbx,%r14
    0.00 :   6161fd:       jne    6161d8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x21b8>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   6161ff:       lea    0xf0(%r12),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   616207:       mov    %rbp,0x630(%rsp)
    0.00 :   61620f:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   616214:       mov    0x61190d(%rip),%rbx        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   61621b:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   61621d:       xor    %esi,%esi
    0.00 :   61621f:       mov    %dx,0x790(%rsp)
    0.00 :   616227:       movq   $0x0,0x788(%rsp)
    0.00 :   616233:       lea    0x10(%rbx),%rax
    0.00 :   616237:       mov    %rax,0x6b0(%rsp)
    0.00 :   61623f:       mov    0x611b5a(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   616246:       movq   $0x0,0x798(%rsp)
    0.00 :   616252:       mov    0x8(%rax),%rbp
    0.00 :   616256:       mov    0x10(%rax),%r14
    0.00 :   61625a:       movq   $0x0,0x7a0(%rsp)
    0.00 :   616266:       movq   $0x0,0x7a8(%rsp)
    0.00 :   616272:       mov    -0x18(%rbp),%rdx
    0.00 :   616276:       mov    %rbp,0x640(%rsp)
    0.00 :   61627e:       movq   $0x0,0x7b0(%rsp)
    0.00 :   61628a:       lea    0x80(%r12,%rdx,1),%rdi
    0.00 :   616292:       mov    %r14,(%rdi)
    0.00 :   616295:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   61629a:       mov    0x611abf(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   6162a1:       lea    0xc0(%r12),%rdi
    0.00 :   6162a9:       movq   $0x0,0x650(%rsp)
    0.00 :   6162b5:       movq   $0x0,0x658(%rsp)
    0.00 :   6162c1:       movq   $0x0,0x660(%rsp)
    0.00 :   6162cd:       lea    0x18(%rax),%rdx
    0.00 :   6162d1:       add    $0x40,%rax
    0.00 :   6162d5:       mov    %rax,0x6b0(%rsp)
    0.00 :   6162dd:       mov    0x61197c(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   6162e4:       mov    %rdx,0x640(%rsp)
    0.00 :   6162ec:       movq   $0x0,0x668(%rsp)
    0.00 :   6162f8:       add    $0x10,%rax
    0.00 :   6162fc:       mov    %rax,0x648(%rsp)
    0.00 :   616304:       movq   $0x0,0x670(%rsp)
    0.00 :   616310:       movq   $0x0,0x678(%rsp)
    0.00 :   61631c:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   616321:       mov    0x611cb0(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   616328:       lea    0x88(%r12),%rsi
    0.00 :   616330:       lea    0xf0(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   616338:       movl   $0x10,0x688(%rsp)
    0.00 :   616343:       add    $0x10,%rax
         :            { __c1 = __c2; }
    0.00 :   616347:       movb   $0x0,0x6a0(%rsp)
    0.00 :   61634f:       mov    %rax,0x648(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616357:       lea    0xe0(%r12),%rax
    0.00 :   61635f:       mov    %rax,0x690(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   616367:       movq   $0x0,0x698(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   616373:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   616378:       lea    0x80(%r12),%rdi
    0.00 :   616380:       mov    $0x2d,%edx
    0.00 :   616385:       lea    0x282184(%rip),%rsi        # 898510 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xb0>
    0.00 :   61638c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   616391:       mov    0x260(%rsp),%rsi
    0.00 :   616399:       lea    0x80(%r12),%rdi
    0.00 :   6163a1:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   6163a6:       mov    $0xb,%edx
    0.00 :   6163ab:       lea    0x27e735(%rip),%rsi        # 894ae7 <std::piecewise_construct+0x183>
    0.00 :   6163b2:       mov    %rax,%rdi
         :            { return _M_insert(__n); }
    0.00 :   6163b5:       mov    %rax,%rbx
         :            __ostream_insert(__out, __s,
    0.00 :   6163b8:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   6163bd:       mov    0x248(%rsp),%rdx
    0.00 :   6163c5:       mov    0x240(%rsp),%rsi
    0.00 :   6163cd:       mov    %rbx,%rdi
    0.00 :   6163d0:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   6163d5:       mov    %rax,%rbp
         :            *  for more on this subject.
         :            */
         :            template<typename _CharT, typename _Traits>
         :            inline basic_ostream<_CharT, _Traits>&
         :            endl(basic_ostream<_CharT, _Traits>& __os)
         :            { return flush(__os.put(__os.widen('\n'))); }
    0.00 :   6163d8:       mov    (%rax),%rax
         :            { return __check_facet(_M_ctype).widen(__c); }
    0.00 :   6163db:       mov    -0x18(%rax),%rax
    0.00 :   6163df:       mov    0xf0(%rbp,%rax,1),%rbx
         :            if (!__f)
    0.00 :   6163e7:       test   %rbx,%rbx
    0.00 :   6163ea:       je     616fb8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f98>
         :            *  @return  The converted character.
         :            */
         :            char_type
         :            widen(char __c) const
         :            {
         :            if (_M_widen_ok)
    0.00 :   6163f0:       cmpb   $0x0,0x38(%rbx)
    0.00 :   6163f4:       je     6168f1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x28d1>
         :            return _M_widen[static_cast<unsigned char>(__c)];
    0.00 :   6163fa:       movsbl 0x43(%rbx),%esi
    0.00 :   6163fe:       mov    %rbp,%rdi
    0.00 :   616401:       callq  528b0 <std::ostream::put(char)@plt>
         :            *  This manipulator simply calls the stream's @c flush() member function.
         :            */
         :            template<typename _CharT, typename _Traits>
         :            inline basic_ostream<_CharT, _Traits>&
         :            flush(basic_ostream<_CharT, _Traits>& __os)
         :            { return __os.flush(); }
    0.00 :   616406:       mov    %rax,%rdi
    0.00 :   616409:       callq  52f60 <std::ostream::flush()@plt>
    0.00 :   61640e:       mov    %r12,%rdi
    0.00 :   616411:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   616416:       mov    0x8(%rsp),%rdi
    0.00 :   61641b:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
         :            if (!_M_is_local())
    0.00 :   616420:       mov    0x38(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616425:       mov    0x240(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   61642d:       add    $0x10,%rax
    0.00 :   616431:       cmp    %rax,%rdi
    0.00 :   616434:       je     61643b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x241b>
         :            ::operator delete(__p);
    0.00 :   616436:       callq  53300 <operator delete(void*)@plt>
         :            { _M_cur = _M_cur->_M_next(); }
    0.00 :   61643b:       mov    0x0(%r13),%r13
    0.00 :   61643f:       test   %r13,%r13
    0.00 :   616442:       jne    615ff8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1fd8>
    0.00 :   616448:       mov    0x568(%rsp),%r13
    0.00 :   616450:       lea    0x240(%rsp),%rax
    0.00 :   616458:       mov    %rax,0x38(%rsp)
    0.00 :   61645d:       test   %r13,%r13
    0.00 :   616460:       je     6168e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x28c0>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616466:       lea    0x2a0(%rsp),%rax
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61646e:       lea    0x5c0(%rsp),%r12
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616476:       mov    %rax,0x8(%rsp)
    0.00 :   61647b:       lea    0x2b0(%rsp),%rax
    0.00 :   616483:       mov    %rax,0x10(%rsp)
    0.00 :   616488:       nopl   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616490:       mov    0x38(%rsp),%rdi
    0.00 :   616495:       lea    0x10(%rdi),%rax
    0.00 :   616499:       mov    %rax,0x240(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6164a1:       mov    0x8(%r13),%rsi
    0.00 :   6164a5:       mov    0x10(%r13),%rdx
    0.00 :   6164a9:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6164ac:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6164b1:       mov    0x40(%rsp),%rbx
    0.00 :   6164b6:       mov    0x28(%r13),%rax
    0.00 :   6164ba:       cmpl   $0x1,0x28(%rbx)
    0.00 :   6164be:       mov    %rax,0x260(%rsp)
    0.00 :   6164c6:       jg     6168b8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2898>
    0.00 :   6164cc:       mov    0x8(%rsp),%r14
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6164d1:       mov    0x10(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6164d6:       lea    0x28202e(%rip),%rdx        # 89850b <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xab>
    0.00 :   6164dd:       lea    -0x43(%rdx),%rsi
    0.00 :   6164e1:       mov    %r14,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6164e4:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6164ec:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   6164f1:       lea    0x2821df(%rip),%rdx        # 8986d7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6164f8:       lea    0x38(%r14),%rax
    0.00 :   6164fc:       movl   $0x1e6,0x2c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616507:       lea    0x28(%r14),%rdi
    0.00 :   61650b:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61650f:       mov    %rax,0x2c8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616517:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   61651c:       lea    0x612785(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616523:       mov    0x2a0(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61652b:       lea    0x20(%r12),%rdi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   616530:       movq   $0x0,0x2e8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61653c:       mov    0x2a8(%rsp),%rdx
    0.00 :   616544:       mov    %rbx,0x5c0(%rsp)
    0.00 :   61654c:       movq   $0x0,0x2f0(%rsp)
    0.00 :   616558:       mov    (%rax),%rax
    0.00 :   61655b:       movq   $0x0,0x2f8(%rsp)
    0.00 :   616567:       add    %rsi,%rdx
    0.00 :   61656a:       mov    %rax,0x5d0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616572:       lea    0x30(%r12),%rax
    0.00 :   616577:       movl   $0x1,0x5c8(%rsp)
    0.00 :   616582:       movl   $0x0,0x5d8(%rsp)
    0.00 :   61658d:       mov    %rax,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616595:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   61659a:       mov    0x2c0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6165a1:       mov    0x2c8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6165a9:       lea    0x48(%r12),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6165ae:       mov    0x2d0(%rsp),%rdx
    0.00 :   6165b6:       mov    %eax,0x600(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6165bd:       lea    0x58(%r12),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6165c2:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6165c5:       mov    %rax,0x608(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6165cd:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   6165d2:       mov    0x2f0(%rsp),%r14
    0.00 :   6165da:       mov    0x2e8(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   6165e2:       movq   $0x0,0x628(%rsp)
    0.00 :   6165ee:       movq   $0x0,0x630(%rsp)
    0.00 :   6165fa:       movq   $0x0,0x638(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   616606:       mov    %r14,%rbp
    0.00 :   616609:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   61660c:       mov    %rbp,%rax
    0.00 :   61660f:       sar    $0x5,%rax
    0.00 :   616613:       je     616b6d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b4d>
         :            if (__n > this->max_size())
    0.00 :   616619:       movabs $0x7ffffffffffffff,%rcx
    0.00 :   616623:       cmp    %rcx,%rax
    0.00 :   616626:       ja     616fae <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f8e>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   61662c:       mov    %rbp,%rdi
    0.00 :   61662f:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   616634:       mov    0x2f0(%rsp),%r14
    0.00 :   61663c:       mov    0x2e8(%rsp),%rbx
    0.00 :   616644:       mov    %rax,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   616647:       add    %r15,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   61664a:       mov    %r15,0x628(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   616652:       mov    %rbp,0x638(%rsp)
    0.00 :   61665a:       mov    %r15,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   61665d:       mov    %r15,0x630(%rsp)
    0.00 :   616665:       cmp    %r14,%rbx
    0.00 :   616668:       je     616697 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2677>
    0.00 :   61666a:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616670:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616674:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616677:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61667b:       mov    (%rbx),%rsi
    0.00 :   61667e:       mov    0x8(%rbx),%rdx
    0.00 :   616682:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616685:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   61668a:       add    $0x20,%rbx
    0.00 :   61668e:       add    $0x20,%rbp
    0.00 :   616692:       cmp    %rbx,%r14
    0.00 :   616695:       jne    616670 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2650>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   616697:       lea    0xf0(%r12),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   61669f:       mov    %rbp,0x630(%rsp)
    0.00 :   6166a7:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   6166ac:       mov    0x611475(%rip),%rbx        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            { this->init(0); }
    0.00 :   6166b3:       xor    %esi,%esi
    0.00 :   6166b5:       movq   $0x0,0x788(%rsp)
    0.00 :   6166c1:       movq   $0x0,0x798(%rsp)
    0.00 :   6166cd:       movq   $0x0,0x7a0(%rsp)
    0.00 :   6166d9:       lea    0x10(%rbx),%rax
    0.00 :   6166dd:       mov    %rax,0x6b0(%rsp)
    0.00 :   6166e5:       xor    %eax,%eax
    0.00 :   6166e7:       mov    %ax,0x790(%rsp)
    0.00 :   6166ef:       mov    0x6116aa(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   6166f6:       movq   $0x0,0x7a8(%rsp)
    0.00 :   616702:       mov    0x8(%rax),%rbp
    0.00 :   616706:       mov    0x10(%rax),%r14
    0.00 :   61670a:       movq   $0x0,0x7b0(%rsp)
    0.00 :   616716:       mov    -0x18(%rbp),%rdx
    0.00 :   61671a:       mov    %rbp,0x640(%rsp)
    0.00 :   616722:       lea    0x80(%r12,%rdx,1),%rdi
    0.00 :   61672a:       mov    %r14,(%rdi)
    0.00 :   61672d:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   616732:       mov    0x611627(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   616739:       lea    0xc0(%r12),%rdi
    0.00 :   616741:       movq   $0x0,0x650(%rsp)
    0.00 :   61674d:       movq   $0x0,0x658(%rsp)
    0.00 :   616759:       movq   $0x0,0x660(%rsp)
    0.00 :   616765:       lea    0x18(%rax),%rdx
    0.00 :   616769:       add    $0x40,%rax
    0.00 :   61676d:       mov    %rax,0x6b0(%rsp)
    0.00 :   616775:       mov    0x6114e4(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   61677c:       mov    %rdx,0x640(%rsp)
    0.00 :   616784:       movq   $0x0,0x668(%rsp)
    0.00 :   616790:       add    $0x10,%rax
    0.00 :   616794:       mov    %rax,0x648(%rsp)
    0.00 :   61679c:       movq   $0x0,0x670(%rsp)
    0.00 :   6167a8:       movq   $0x0,0x678(%rsp)
    0.00 :   6167b4:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   6167b9:       mov    0x611818(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   6167c0:       lea    0x88(%r12),%rsi
    0.00 :   6167c8:       lea    0xf0(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   6167d0:       movl   $0x10,0x688(%rsp)
    0.00 :   6167db:       add    $0x10,%rax
    0.00 :   6167df:       movb   $0x0,0x6a0(%rsp)
    0.00 :   6167e7:       mov    %rax,0x648(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6167ef:       lea    0xe0(%r12),%rax
    0.00 :   6167f7:       mov    %rax,0x690(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6167ff:       movq   $0x0,0x698(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   61680b:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   616810:       lea    0x80(%r12),%rdi
    0.00 :   616818:       mov    $0x2e,%edx
    0.00 :   61681d:       lea    0x281d1c(%rip),%rsi        # 898540 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xe0>
    0.00 :   616824:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   616829:       mov    0x260(%rsp),%rsi
    0.00 :   616831:       lea    0x80(%r12),%rdi
    0.00 :   616839:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   61683e:       mov    $0xb,%edx
    0.00 :   616843:       lea    0x27e29d(%rip),%rsi        # 894ae7 <std::piecewise_construct+0x183>
    0.00 :   61684a:       mov    %rax,%rdi
         :            { return _M_insert(__n); }
    0.00 :   61684d:       mov    %rax,%rbx
         :            __ostream_insert(__out, __s,
    0.00 :   616850:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   616855:       mov    0x248(%rsp),%rdx
    0.00 :   61685d:       mov    0x240(%rsp),%rsi
    0.00 :   616865:       mov    %rbx,%rdi
    0.00 :   616868:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   61686d:       mov    %rax,%rbp
         :            { return flush(__os.put(__os.widen('\n'))); }
    0.00 :   616870:       mov    (%rax),%rax
         :            { return __check_facet(_M_ctype).widen(__c); }
    0.00 :   616873:       mov    -0x18(%rax),%rax
    0.00 :   616877:       mov    0xf0(%rbp,%rax,1),%rbx
         :            if (!__f)
    0.00 :   61687f:       test   %rbx,%rbx
    0.00 :   616882:       je     616fb3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f93>
         :            if (_M_widen_ok)
    0.00 :   616888:       cmpb   $0x0,0x38(%rbx)
    0.00 :   61688c:       je     61691f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x28ff>
         :            return _M_widen[static_cast<unsigned char>(__c)];
    0.00 :   616892:       movsbl 0x43(%rbx),%esi
    0.00 :   616896:       mov    %rbp,%rdi
    0.00 :   616899:       callq  528b0 <std::ostream::put(char)@plt>
         :            { return __os.flush(); }
    0.00 :   61689e:       mov    %rax,%rdi
    0.00 :   6168a1:       callq  52f60 <std::ostream::flush()@plt>
    0.00 :   6168a6:       mov    %r12,%rdi
    0.00 :   6168a9:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   6168ae:       mov    0x8(%rsp),%rdi
    0.00 :   6168b3:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
         :            if (!_M_is_local())
    0.00 :   6168b8:       mov    0x38(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   6168bd:       mov    0x240(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   6168c5:       add    $0x10,%rax
    0.00 :   6168c9:       cmp    %rax,%rdi
    0.00 :   6168cc:       je     6168d3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x28b3>
         :            ::operator delete(__p);
    0.00 :   6168ce:       callq  53300 <operator delete(void*)@plt>
    0.00 :   6168d3:       mov    0x0(%r13),%r13
    0.00 :   6168d7:       test   %r13,%r13
    0.00 :   6168da:       jne    616490 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2470>
    0.00 :   6168e0:       mov    0x70(%rsp),%rax
    0.00 :   6168e5:       movq   $0x0,(%rax)
         :            constexpr _Head_base()
    0.00 :   6168ec:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
         :            this->_M_widen_init();
    0.00 :   6168f1:       mov    %rbx,%rdi
    0.00 :   6168f4:       callq  534b0 <std::ctype<char>::_M_widen_init() const@plt>
         :            return this->do_widen(__c);
    0.00 :   6168f9:       mov    (%rbx),%rax
    0.00 :   6168fc:       mov    $0xa,%esi
    0.00 :   616901:       mov    0x30(%rax),%rax
    0.00 :   616905:       cmp    0x611414(%rip),%rax        # c27d20 <.got+0x260>
    0.00 :   61690c:       je     6163fe <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x23de>
    0.00 :   616912:       mov    %rbx,%rdi
    0.00 :   616915:       callq  *%rax
    0.00 :   616917:       movsbl %al,%esi
    0.00 :   61691a:       jmpq   6163fe <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x23de>
         :            this->_M_widen_init();
    0.00 :   61691f:       mov    %rbx,%rdi
    0.00 :   616922:       callq  534b0 <std::ctype<char>::_M_widen_init() const@plt>
         :            return this->do_widen(__c);
    0.00 :   616927:       mov    (%rbx),%rax
    0.00 :   61692a:       mov    $0xa,%esi
    0.00 :   61692f:       mov    0x30(%rax),%rax
    0.00 :   616933:       cmp    0x6113e6(%rip),%rax        # c27d20 <.got+0x260>
    0.00 :   61693a:       je     616896 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2876>
    0.00 :   616940:       mov    %rbx,%rdi
    0.00 :   616943:       callq  *%rax
    0.00 :   616945:       movsbl %al,%esi
    0.00 :   616948:       jmpq   616896 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2876>
    0.00 :   61694d:       lea    0x2a0(%rsp),%rbp
    0.00 :   616955:       mov    $0x10,%esi
    0.00 :   61695a:       mov    %rbp,%rdi
    0.00 :   61695d:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   616962:       mov    $0x2c,%edx
    0.00 :   616967:       lea    0x28176a(%rip),%rsi        # 8980d8 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x218>
    0.00 :   61696e:       mov    %rbp,%rdi
    0.00 :   616971:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   616976:       mov    0x38(%rsp),%r14
    0.00 :   61697b:       mov    %rbp,%rdi
    0.00 :   61697e:       mov    0x30(%r14),%rdx
    0.00 :   616982:       mov    0x28(%r14),%rsi
    0.00 :   616986:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   61698b:       mov    $0xd,%edx
    0.00 :   616990:       lea    0x2817b0(%rip),%rsi        # 898147 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x287>
    0.00 :   616997:       mov    %rax,%rdi
    0.00 :   61699a:       mov    %rax,%rbx
    0.00 :   61699d:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   6169a2:       mov    0x10(%r14),%rdx
    0.00 :   6169a6:       mov    0x8(%r14),%rsi
    0.00 :   6169aa:       mov    %rbx,%rdi
    0.00 :   6169ad:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   6169b2:       mov    $0x12,%edx
    0.00 :   6169b7:       lea    0x281797(%rip),%rsi        # 898155 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x295>
    0.00 :   6169be:       mov    %rax,%rdi
    0.00 :   6169c1:       mov    %rax,%r12
    0.00 :   6169c4:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   6169c9:       lea    0x100(%rsp),%rbx
    0.00 :   6169d1:       mov    %rbx,%rdi
    0.00 :   6169d4:       callq  697000 <onnxruntime::common::Status::ErrorMessage[abi:cxx11]() const>
    0.00 :   6169d9:       mov    %r12,%rdi
    0.00 :   6169dc:       mov    0x8(%rax),%rdx
    0.00 :   6169e0:       mov    (%rax),%rsi
    0.00 :   6169e3:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_stringbuf.str(); }
    0.00 :   6169e8:       lea    0x220(%rsp),%rax
    0.00 :   6169f0:       lea    0x8(%rbp),%rsi
    0.00 :   6169f4:       mov    %rax,%rdi
    0.00 :   6169f7:       mov    %rax,0xa8(%rsp)
    0.00 :   6169ff:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   616a04:       mov    0x40(%rsp),%r14
    0.00 :   616a09:       cmpl   $0x3,0x28(%r14)
    0.00 :   616a0e:       jg     616a8c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2a6c>
    0.00 :   616a10:       lea    0x240(%rsp),%r15
    0.00 :   616a18:       lea    0x281cb1(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   616a1f:       mov    $0x153,%edx
    0.00 :   616a24:       lea    0x281a9d(%rip),%rsi        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   616a2b:       mov    %r15,%rdi
    0.00 :   616a2e:       mov    %r15,0x38(%rsp)
    0.00 :   616a33:       callq  167570 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*)>
    0.00 :   616a38:       lea    0x612269(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
    0.00 :   616a3f:       mov    %r15,%r9
    0.00 :   616a42:       xor    %r8d,%r8d
    0.00 :   616a45:       mov    %r14,%rsi
    0.00 :   616a48:       lea    0x5c0(%rsp),%r13
    0.00 :   616a50:       mov    $0x3,%edx
    0.00 :   616a55:       mov    (%rax),%rcx
    0.00 :   616a58:       mov    %r13,%rdi
    0.00 :   616a5b:       callq  168f90 <onnxruntime::logging::Capture::Capture(onnxruntime::logging::Logger const&, onnxruntime::logging::Severity, char const*, onnxruntime::logging::DataType, onnxruntime::CodeLocation const&)>
    0.00 :   616a60:       mov    0x228(%rsp),%rdx
    0.00 :   616a68:       mov    0x220(%rsp),%rsi
    0.00 :   616a70:       lea    0x80(%r13),%rdi
    0.00 :   616a77:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   616a7c:       mov    %r13,%rdi
    0.00 :   616a7f:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   616a84:       mov    %r15,%rdi
    0.00 :   616a87:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   616a8c:       mov    %rbx,%rdi
    0.00 :   616a8f:       callq  696f50 <onnxruntime::common::Status::Code() const>
    0.00 :   616a94:       mov    %rbx,%rdi
    0.00 :   616a97:       mov    %eax,%r12d
    0.00 :   616a9a:       callq  696f40 <onnxruntime::common::Status::Category() const>
    0.00 :   616a9f:       mov    0xa8(%rsp),%rbx
    0.00 :   616aa7:       mov    0x70(%rsp),%rdi
    0.00 :   616aac:       mov    %r12d,%edx
    0.00 :   616aaf:       mov    %eax,%esi
    0.00 :   616ab1:       mov    %rbx,%rcx
    0.00 :   616ab4:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616ab9:       mov    0x220(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   616ac1:       add    $0x10,%rbx
    0.00 :   616ac5:       cmp    %rbx,%rdi
    0.00 :   616ac8:       je     616acf <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2aaf>
    0.00 :   616aca:       callq  53300 <operator delete(void*)@plt>
    0.00 :   616acf:       mov    %rbp,%rdi
    0.00 :   616ad2:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
         :            if (__ptr != nullptr)
    0.00 :   616ad7:       mov    0x100(%rsp),%rdi
    0.00 :   616adf:       test   %rdi,%rdi
    0.00 :   616ae2:       je     616ae9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ac9>
         :            get_deleter()(__ptr);
    0.00 :   616ae4:       callq  613ed0 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.115]>
    0.00 :   616ae9:       mov    0x50(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616aee:       mov    0x1a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   616af6:       add    $0x10,%rax
    0.00 :   616afa:       cmp    %rax,%rdi
    0.00 :   616afd:       je     616b04 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ae4>
    0.00 :   616aff:       callq  53300 <operator delete(void*)@plt>
    0.00 :   616b04:       lea    0x60da5d(%rip),%rax        # c24568 <vtable for onnxruntime::OpKernelContextInternal>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   616b0b:       mov    0x188(%rsp),%rdi
    0.00 :   616b13:       add    $0x10,%rax
    0.00 :   616b17:       mov    %rax,0x140(%rsp)
         :            if (__p)
    0.00 :   616b1f:       test   %rdi,%rdi
    0.00 :   616b22:       jne    614c7c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc5c>
    0.00 :   616b28:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
    0.00 :   616b2d:       lea    0x120(%rsp),%rsi
    0.00 :   616b35:       mov    $0x1aa,%r8d
    0.00 :   616b3b:       lea    0x281b8e(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   616b42:       xor    %edi,%edi
    0.00 :   616b44:       lea    0x28197d(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   616b4b:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   616b50:       mov    0x120(%rsp),%rax
    0.00 :   616b58:       mov    0x70(%rsp),%rcx
    0.00 :   616b5d:       mov    %rax,(%rcx)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   616b60:       jmpq   616ad7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ab7>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   616b65:       xor    %r15d,%r15d
    0.00 :   616b68:       jmpq   6161af <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x218f>
    0.00 :   616b6d:       xor    %r15d,%r15d
    0.00 :   616b70:       jmpq   616647 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2627>
    0.00 :   616b75:       mov    $0xa0,%edi
    0.00 :   616b7a:       movslq %ebp,%rbp
    0.00 :   616b7d:       lea    0x5c0(%rsp),%r13
    0.00 :   616b85:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   616b8a:       mov    %rax,0x10(%rsp)
    0.00 :   616b8f:       mov    0x50(%rsp),%rax
    0.00 :   616b94:       mov    0xf0(%rax),%rax
    0.00 :   616b9b:       mov    (%rax,%rbp,8),%rdi
    0.00 :   616b9f:       callq  63d050 <onnxruntime::NodeArg::Name[abi:cxx11]() const>
    0.00 :   616ba4:       mov    $0x10,%esi
    0.00 :   616ba9:       mov    %r13,%rdi
    0.00 :   616bac:       mov    %rax,%rbp
    0.00 :   616baf:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   616bb4:       lea    0x28148d(%rip),%rsi        # 898048 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x188>
    0.00 :   616bbb:       mov    %r13,%rdi
    0.00 :   616bbe:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   616bc3:       mov    0x8(%rbp),%rdx
    0.00 :   616bc7:       mov    0x0(%rbp),%rsi
    0.00 :   616bcb:       mov    %r13,%rdi
    0.00 :   616bce:       lea    0x2a0(%rsp),%rbp
    0.00 :   616bd6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   616bdb:       lea    0x281533(%rip),%rsi        # 898115 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x255>
    0.00 :   616be2:       mov    %r13,%rdi
    0.00 :   616be5:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   616bea:       lea    0x8(%r13),%rsi
    0.00 :   616bee:       mov    %rbp,%rdi
    0.00 :   616bf1:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   616bf6:       mov    %r13,%rdi
    0.00 :   616bf9:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   616bfe:       lea    0x120(%rsp),%rax
    0.00 :   616c06:       mov    %rax,%rdi
    0.00 :   616c09:       mov    %rax,0x8(%rsp)
    0.00 :   616c0e:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c13:       lea    0x2814b7(%rip),%rdx        # 8980d1 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x211>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616c1a:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c1e:       mov    %r13,%rdi
    0.00 :   616c21:       lea    -0x49(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616c25:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c2d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   616c32:       lea    0x281a95(%rip),%rdx        # 8986ce <onnxruntime::OpKernelContextInternal::OpKernelContextInternal(onnxruntime::SessionState const&, onnxruntime::IExecutionFrame&, onnxruntime::OpKernel const&, onnxruntime::logging::Logger const&, bool const&)::__PRETTY_FUNCTION__+0xce>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616c39:       lea    0x38(%r13),%rax
    0.00 :   616c3d:       movl   $0x23,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c48:       lea    0x28(%r13),%rdi
    0.00 :   616c4c:       lea    -0xce(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616c53:       mov    %rax,0x5e8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c5b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   616c60:       mov    0x128(%rsp),%r14
    0.00 :   616c68:       mov    0x120(%rsp),%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   616c70:       movq   $0x0,0x608(%rsp)
    0.00 :   616c7c:       movq   $0x0,0x610(%rsp)
    0.00 :   616c88:       movq   $0x0,0x618(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   616c94:       mov    %r14,%r15
    0.00 :   616c97:       sub    %r12,%r15
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   616c9a:       mov    %r15,%rdx
    0.00 :   616c9d:       sar    $0x5,%rdx
    0.00 :   616ca1:       je     616cd1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2cb1>
         :            if (__n > this->max_size())
    0.00 :   616ca3:       movabs $0x7ffffffffffffff,%rax
    0.00 :   616cad:       cmp    %rax,%rdx
    0.00 :   616cb0:       ja     616f81 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f61>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   616cb6:       mov    %r15,%rdi
    0.00 :   616cb9:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   616cbe:       mov    0x128(%rsp),%r14
    0.00 :   616cc6:       mov    0x120(%rsp),%r12
    0.00 :   616cce:       mov    %rax,%rbx
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   616cd1:       lea    (%rbx,%r15,1),%rax
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   616cd5:       mov    %rbx,0x608(%rsp)
         :            _ForwardIterator __cur = __result;
    0.00 :   616cdd:       mov    %rbx,%r15
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   616ce0:       mov    %rbx,0x610(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   616ce8:       mov    %rax,0x618(%rsp)
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   616cf0:       cmp    %r14,%r12
    0.00 :   616cf3:       je     616d1d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2cfd>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616cf5:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616cf9:       mov    %r15,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616cfc:       mov    %rax,(%r15)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616cff:       mov    (%r12),%rsi
    0.00 :   616d03:       mov    0x8(%r12),%rdx
    0.00 :   616d08:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616d0b:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   616d10:       add    $0x20,%r12
    0.00 :   616d14:       add    $0x20,%r15
    0.00 :   616d18:       cmp    %r12,%r14
    0.00 :   616d1b:       jne    616cf5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2cd5>
    0.00 :   616d1d:       mov    0x10(%rsp),%rdi
    0.00 :   616d22:       mov    %rbp,%rcx
    0.00 :   616d25:       lea    0x2813f4(%rip),%rdx        # 898120 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x260>
    0.00 :   616d2c:       mov    %r13,%rsi
         :            this->_M_impl._M_finish =
    0.00 :   616d2f:       mov    %r15,0x610(%rsp)
    0.00 :   616d37:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   616d3c:       mov    %r13,%rdi
         :            if (!_M_is_local())
    0.00 :   616d3f:       add    $0x10,%rbp
    0.00 :   616d43:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   616d48:       mov    0x8(%rsp),%rdi
    0.00 :   616d4d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616d52:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   616d5a:       cmp    %rbp,%rdi
    0.00 :   616d5d:       je     bb6a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x44c>
         :            ::operator delete(__p);
    0.00 :   616d63:       callq  53300 <operator delete(void*)@plt>
    0.00 :   616d68:       jmpq   bb6a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x44c>
    0.00 :   616d6d:       mov    %rbx,%rdi
    0.00 :   616d70:       callq  1158d0 <onnxruntime::Tensor const& OrtValue::Get<onnxruntime::Tensor>() const>
    0.00 :   616d75:       add    $0x18,%rax
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   616d79:       mov    0x148(%rsp),%rsi
    0.00 :   616d81:       mov    %rax,0x120(%rsp)
    0.00 :   616d89:       cmp    0x150(%rsp),%rsi
    0.00 :   616d91:       je     616ef8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ed8>
    0.00 :   616d97:       mov    %rax,(%rsi)
         :            ++this->_M_impl._M_finish;
    0.00 :   616d9a:       add    $0x8,%rsi
    0.00 :   616d9e:       mov    %rsi,0x148(%rsp)
    0.00 :   616da6:       add    $0x28,%rbx
    0.00 :   616daa:       cmp    %rbx,%rbp
    0.00 :   616dad:       je     616e46 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2e26>
    0.00 :   616db3:       mov    0x10(%rbx),%rdi
    0.00 :   616db7:       test   %rdi,%rdi
    0.00 :   616dba:       jne    615f87 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f67>
    0.00 :   616dc0:       jmpq   615f95 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f75>
    0.00 :   616dc5:       mov    0x28(%rsp),%rax
    0.00 :   616dca:       lea    0x5c0(%rsp),%r13
    0.00 :   616dd2:       lea    0x2817dd(%rip),%rsi        # 8985b6 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x156>
    0.00 :   616dd9:       movq   $0x0,0x148(%rsp)
    0.00 :   616de5:       mov    %r13,%rdi
    0.00 :   616de8:       mov    0x218(%rax),%rbx
    0.00 :   616def:       lea    0x2a0(%rsp),%rax
    0.00 :   616df7:       mov    %rax,0x140(%rsp)
    0.00 :   616dff:       callq  613fe0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.119]>
    0.00 :   616e04:       lea    0xe0(%rsp),%rcx
    0.00 :   616e0c:       xor    %r9d,%r9d
    0.00 :   616e0f:       mov    %r15,%r8
    0.00 :   616e12:       xor    %esi,%esi
    0.00 :   616e14:       mov    %r13,%rdx
    0.00 :   616e17:       mov    %rbx,%rdi
    0.00 :   616e1a:       callq  6966b0 <onnxruntime::profiling::Profiler::EndTimeAndRecordEvent(onnxruntime::profiling::EventCategory, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616e1f:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   616e27:       lea    0x10(%r13),%rax
    0.00 :   616e2b:       cmp    %rax,%rdi
    0.00 :   616e2e:       je     615fb5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f95>
    0.00 :   616e34:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   616e39:       jmpq   615fb5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f95>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   616e3e:       xor    %r14d,%r14d
    0.00 :   616e41:       jmpq   614a4d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xa2d>
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   616e46:       mov    $0x30,%edi
    0.00 :   616e4b:       callq  53340 <operator new(unsigned long)@plt>
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   616e50:       movq   $0x0,(%rax)
    0.00 :   616e57:       mov    %rax,%rbx
    0.00 :   616e5a:       mov    0x18(%rsp),%rsi
    0.00 :   616e5f:       movq   $0x0,0x8(%rax)
    0.00 :   616e67:       mov    %rbx,%rdx
    0.00 :   616e6a:       movq   $0x0,0x10(%rax)
    0.00 :   616e72:       movq   $0x0,0x18(%rax)
    0.00 :   616e7a:       movq   $0x0,0x20(%rax)
    0.00 :   616e82:       movq   $0x0,0x28(%rax)
    0.00 :   616e8a:       lea    0x120(%rsp),%rax
    0.00 :   616e92:       mov    %rax,%rdi
    0.00 :   616e95:       mov    %rax,0x8(%rsp)
    0.00 :   616e9a:       callq  5a8d00 <onnxruntime::ExecutionFrame::GeneratePatterns(onnxruntime::MemoryPatternGroup*) const>
    0.00 :   616e9f:       cmpq   $0x0,0x120(%rsp)
    0.00 :   616ea8:       je     616f08 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ee8>
    0.00 :   616eaa:       mov    0x8(%rsp),%rsi
    0.00 :   616eaf:       mov    $0x1d7,%r8d
    0.00 :   616eb5:       lea    0x281814(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   616ebc:       xor    %edi,%edi
    0.00 :   616ebe:       lea    0x281603(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   616ec5:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   616eca:       mov    0x120(%rsp),%rax
    0.00 :   616ed2:       mov    0x70(%rsp),%rcx
         :            get_deleter()(__ptr);
    0.00 :   616ed7:       mov    %rbx,%rdi
    0.00 :   616eda:       mov    %rax,(%rcx)
    0.00 :   616edd:       callq  613f10 <std::default_delete<onnxruntime::MemoryPatternGroup>::operator()(onnxruntime::MemoryPatternGroup*) const [clone .isra.176]>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   616ee2:       mov    0x140(%rsp),%rdi
         :            if (__p)
    0.00 :   616eea:       test   %rdi,%rdi
    0.00 :   616eed:       jne    614c7c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc5c>
    0.00 :   616ef3:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    0.00 :   616ef8:       mov    %r12,%rdx
    0.00 :   616efb:       mov    %r15,%rdi
    0.00 :   616efe:       callq  5a9020 <void std::vector<std::reference_wrapper<onnxruntime::TensorShape const>, std::allocator<std::reference_wrapper<onnxruntime::TensorShape const> > >::_M_realloc_insert<std::reference_wrapper<onnxruntime::TensorShape const> >(__gnu_cxx::__normal_iterator<std::reference_wrapper<onnxruntime::TensorShape const>*, std::vector<std::reference_wrapper<onnxruntime::TensorShape const>, std::allocator<std::reference_wrapper<onnxruntime::TensorShape const> > > >, std::reference_wrapper<onnxruntime::TensorShape const>&&)>
    0.00 :   616f03:       jmpq   616da6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2d86>
    0.00 :   616f08:       mov    %rbx,0x120(%rsp)
    0.00 :   616f10:       mov    0x8(%rsp),%rcx
    0.00 :   616f15:       lea    0x118(%rsp),%rbx
    0.00 :   616f1d:       mov    %r15,%rdx
    0.00 :   616f20:       mov    0x28(%rsp),%rsi
    0.00 :   616f25:       mov    %rbx,%rdi
    0.00 :   616f28:       callq  5de950 <onnxruntime::SessionState::UpdateMemoryPatternGroupCache(std::vector<std::reference_wrapper<onnxruntime::TensorShape const>, std::allocator<std::reference_wrapper<onnxruntime::TensorShape const> > > const&, std::unique_ptr<onnxruntime::MemoryPatternGroup, std::default_delete<onnxruntime::MemoryPatternGroup> >) const>
         :            if (__ptr != nullptr)
    0.00 :   616f2d:       mov    0x120(%rsp),%rdi
    0.00 :   616f35:       test   %rdi,%rdi
    0.00 :   616f38:       je     616f3f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f1f>
         :            get_deleter()(__ptr);
    0.00 :   616f3a:       callq  613f10 <std::default_delete<onnxruntime::MemoryPatternGroup>::operator()(onnxruntime::MemoryPatternGroup*) const [clone .isra.176]>
    0.00 :   616f3f:       cmpq   $0x0,0x118(%rsp)
    0.00 :   616f48:       je     615f95 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f75>
    0.00 :   616f4e:       mov    $0x1d8,%r8d
    0.00 :   616f54:       lea    0x281775(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   616f5b:       mov    %rbx,%rsi
    0.00 :   616f5e:       xor    %edi,%edi
    0.00 :   616f60:       lea    0x281561(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   616f67:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   616f6c:       mov    0x118(%rsp),%rax
    0.00 :   616f74:       mov    0x70(%rsp),%rcx
    0.00 :   616f79:       mov    %rax,(%rcx)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   616f7c:       jmpq   616ee2 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ec2>
         :            std::__throw_bad_alloc();
    0.00 :   616f81:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   616f86:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            __throw_length_error(__N("vector::reserve"));
    0.00 :   616f8b:       lea    0x2100b6(%rip),%rdi        # 827048 <std::piecewise_construct+0x2a8>
    0.00 :   616f92:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   616f97:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   616f9c:       mov    0x100(%rsp),%rax
    0.00 :   616fa4:       jmpq   614748 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x728>
    0.00 :   616fa9:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   616fae:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            __throw_bad_cast();
    0.00 :   616fb3:       callq  535d0 <std::__throw_bad_cast()@plt>
    0.00 :   616fb8:       callq  535d0 <std::__throw_bad_cast()@plt>
         :            __throw_length_error(__N(__s));
    0.00 :   616fbd:       lea    0x20e3f0(%rip),%rdi        # 8253b4 <_fini+0x11c>
    0.00 :   616fc4:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   616fc9:       lea    0x20e3e4(%rip),%rdi        # 8253b4 <_fini+0x11c>
    0.00 :   616fd0:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   616fd5:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   616fda:       lea    0x20e3d3(%rip),%rdi        # 8253b4 <_fini+0x11c>
    0.00 :   616fe1:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   616fe6:       mov    %rax,%rbx
    0.00 :   616fe9:       jmpq   bb26d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x19>
    0.00 :   616fee:       jmpq   bb379 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x125>
    0.00 :   616ff3:       mov    %rax,%rbp
    0.00 :   616ff6:       jmpq   bb38f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x13b>
    0.00 :   616ffb:       mov    %rax,%rbx
    0.00 :   616ffe:       jmpq   bb4a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x24c>
    0.00 :   617003:       mov    %rax,%rbx
    0.00 :   617006:       jmpq   bb500 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2ac>
    0.00 :   61700b:       mov    %rax,%rbx
    0.00 :   61700e:       jmpq   bb551 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2fd>
    0.00 :   617013:       mov    %rax,%rbx
    0.00 :   617016:       jmpq   bb3e4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x190>
    0.00 :   61701b:       mov    %rax,%rbx
    0.00 :   61701e:       jmpq   bb474 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x220>
    0.00 :   617023:       mov    %rax,%rbx
    0.00 :   617026:       jmpq   bb525 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2d1>
    0.00 :   61702b:       mov    %rax,%rbx
    0.00 :   61702e:       jmpq   bb549 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2f5>
    0.00 :   617033:       mov    %rax,%rbx
    0.00 :   617036:       jmpq   bb3cd <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x179>
    0.00 :   61703b:       mov    %rax,%rbx
    0.00 :   61703e:       jmpq   bb4aa <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x256>
    0.00 :   617043:       mov    %rax,%rbx
    0.00 :   617046:       jmpq   bb516 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2c2>
    0.00 :   61704b:       mov    %rax,%rbx
    0.00 :   61704e:       jmpq   bb55b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x307>
    0.00 :   617053:       mov    %rax,%rbx
    0.00 :   617056:       jmpq   bb41e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x1ca>
    0.00 :   61705b:       mov    %rax,%rbp
    0.00 :   61705e:       jmpq   bb586 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x332>
    0.00 :   617063:       mov    %rax,%rbx
    0.00 :   617066:       jmpq   bb3ff <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x1ab>
    0.00 :   61706b:       jmpq   bb5a1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x34d>
    0.00 :   617070:       mov    %rax,%rbx
    0.00 :   617073:       jmpq   bb5b3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x35f>
    0.00 :   617078:       mov    %rax,%rbx
    0.00 :   61707b:       jmpq   bb628 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x3d4>
    0.00 :   617080:       mov    %rax,%rbx
    0.00 :   617083:       jmpq   bb64c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x3f8>
    0.00 :   617088:       mov    %rax,%rbx
    0.00 :   61708b:       jmpq   bb681 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x42d>
    0.00 :   617090:       mov    %rax,%rbx
    0.00 :   617093:       jmpq   bb5fa <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x3a6>
    0.00 :   617098:       mov    %rax,%rbx
    0.00 :   61709b:       jmpq   bb2bb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x67>
    0.00 :   6170a0:       mov    %rax,%rbx
    0.00 :   6170a3:       jmpq   bb48a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x236>
    0.00 :   6170a8:       mov    %rax,%rbx
    0.00 :   6170ab:       jmpq   bb6b8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x464>
    0.00 :   6170b0:       mov    %rax,%rbx
    0.00 :   6170b3:       jmpq   bb6fb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x4a7>
    0.00 :   6170b8:       jmpq   bb708 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x4b4>
    0.00 :   6170bd:       jmpq   bb710 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x4bc>
    0.00 :   6170c2:       mov    %rax,%rbx
    0.00 :   6170c5:       jmpq   bb342 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0xee>
    0.00 :   6170ca:       mov    %rax,%rbx
    0.00 :   6170cd:       jmpq   bb7c2 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x56e>
    0.00 :   6170d2:       mov    %rax,%rbx
    0.00 :   6170d5:       jmpq   bb610 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x3bc>
    0.00 :   6170da:       mov    %rax,%rbx
    0.00 :   6170dd:       jmpq   bb7dc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x588>
    0.00 :   6170e2:       mov    %rax,%rbx
    0.00 :   6170e5:       jmpq   bb7c2 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x56e>
    0.00 :   6170ea:       mov    %rax,%rbx
    0.00 :   6170ed:       jmpq   bb327 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0xd3>
    0.00 :   6170f2:       mov    %rax,%rbx
    0.00 :   6170f5:       jmpq   bb81f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x5cb>
    0.00 :   6170fa:       mov    %rax,%rbx
    0.00 :   6170fd:       jmpq   bb6d3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x47f>
    0.00 :   617102:       mov    %rax,%rbx
    0.00 :   617105:       jmpq   bb367 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x113>
    0.00 :   61710a:       mov    %rax,%rbx
    0.00 :   61710d:       jmpq   bb5bc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x368>
    0.00 :   617112:       mov    %rax,%rbp
    0.00 :   617115:       jmpq   bb83e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x5ea>
    0.00 :   61711a:       mov    %rax,%rbp
    0.00 :   61711d:       jmpq   bb254 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]>
    0.00 :   617122:       mov    %rax,%rbx
    0.00 :   617125:       jmpq   bb85c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x608>
    0.00 :   61712a:       mov    %rax,%rbx
    0.00 :   61712d:       jmpq   bb876 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x622>
    0.00 :   617132:       mov    %rax,%rbx
    0.00 :   617135:       jmpq   bb2f7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0xa3>
    0.00 :   61713a:       mov    %rax,%rbx
    0.00 :   61713d:       jmpq   bb890 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x63c>
    0.00 :   617142:       mov    %rax,%rbx
    0.00 :   617145:       jmpq   bb6e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x48c>
    0.00 :   61714a:       mov    %rax,%rbx
    0.00 :   61714d:       jmpq   bb2d9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x85>
    0.00 :   617152:       mov    %rax,%rbx
    0.00 :   617155:       jmpq   bb8b4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x660>
    0.00 :   61715a:       mov    %rax,%rbx
    0.00 :   61715d:       jmpq   bb285 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x31>
    0.00 :   617162:       mov    %rax,%rbx
    0.00 :   617165:       jmpq   bb2a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x4c>
    0.00 :   61716a:       mov    %rax,%rbx
    0.00 :   61716d:       jmpq   bb8f3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x69f>
    0.00 :   617172:       mov    %rax,%rbx
    0.00 :   617175:       jmpq   bb8d8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x684>
    0.00 :   61717a:       mov    %rax,%rbx
    0.00 :   61717d:       jmpq   bb579 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x325>
    0.00 :   617182:       mov    %rax,%rbx
    0.00 :   617185:       jmpq   bb90d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x6b9>
    0.00 :   61718a:       mov    %rax,%r13
    0.00 :   61718d:       jmpq   bb91a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x6c6>
    0.00 :   617192:       mov    %rax,%r13
    0.00 :   617195:       jmpq   bb93b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x6e7>
    0.00 :   61719a:       jmpq   bb966 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x712>
    0.00 :   61719f:       mov    %rax,%rbp
    0.00 :   6171a2:       jmpq   bb98a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x736>
    0.00 :   6171a7:       mov    %rax,%rbx
    0.00 :   6171aa:       jmpq   bb3a4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x150>
    0.00 :   6171af:       mov    %rax,%rbp
    0.00 :   6171b2:       jmpq   bb978 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x724>
    0.00 :   6171b7:       mov    %rax,%r13
    0.00 :   6171ba:       jmpq   bb9ca <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x776>
    0.00 :   6171bf:       mov    %rax,%rbx
    0.00 :   6171c2:       jmpq   bb3ff <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x1ab>
    0.00 :   6171c7:       mov    %rax,%rbx
    0.00 :   6171ca:       jmpq   bb3f5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x1a1>
    0.00 :   6171cf:       mov    %rax,%rbx
    0.00 :   6171d2:       jmpq   bb9f5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x7a1>
    0.00 :   6171d7:       mov    %rax,%r14
    0.00 :   6171da:       jmpq   bba26 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x7d2>
    0.00 :   6171df:       mov    %rax,%rbx
    0.00 :   6171e2:       jmpq   bba19 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x7c5>
    0.00 :   6171e7:       mov    %rax,%r14
    0.00 :   6171ea:       jmpq   bba47 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x7f3>
    0.00 :   6171ef:       mov    %rax,%rbx
    0.00 :   6171f2:       jmpq   bb5bc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x368>
    0.00 :   6171f7:       mov    %rax,%rbx
    0.00 :   6171fa:       jmpq   bb7c2 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x56e>
    0.00 :   6171ff:       mov    %rax,%rbx
    0.00 :   617202:       jmpq   bb662 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x40e>
    0.00 :   617207:       mov    %rax,%rbx
    0.00 :   61720a:       jmpq   bba70 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x81c>
    0.00 :   61720f:       mov    %rax,%rbx
    0.00 :   617212:       jmpq   bb4e9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x295>
    0.00 :   617217:       jmpq   bba8a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x836>
    0.00 :   61721c:       mov    %rax,%rbx
    0.00 :   61721f:       jmpq   bb315 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0xc1>
    0.00 :   617224:       mov    %rax,%rbx
    0.00 :   617227:       jmpq   bbabb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x867>
    0.00 :   61722c:       mov    %rax,%rbx
    0.00 :   61722f:       jmpq   bba9c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x848>
    0.00 :   617234:       jmpq   bbaa9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x855>
    0.00 :   617239:       mov    %rax,%r13
    0.00 :   61723c:       jmpq   bb9a9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x755>
    0.00 :   617241:       mov    %rax,%rbx
    0.00 :   617244:       jmpq   bbb08 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x8b4>
    0.00 :   617249:       mov    %rax,%rbx
    0.00 :   61724c:       jmpq   bb85c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x608>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (11 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c76c0 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)>:
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c76c0:       push   %r14
    0.00 :   5c76c2:       push   %r13
    0.00 :   5c76c4:       push   %r12
    0.00 :   5c76c6:       push   %rbp
    0.00 :   5c76c7:       push   %rbx
    0.00 :   5c76c8:       mov    %rdi,%rbx
    0.00 :   5c76cb:       sub    $0x1c0,%rsp
    0.00 :   5c76d2:       mov    %fs:0x28,%rax
    0.00 :   5c76db:       mov    %rax,0x1b8(%rsp)
    0.00 :   5c76e3:       xor    %eax,%eax
    0.00 :   5c76e5:       lea    0x65c324(%rip),%rax        # c23a10 <vtable for onnxruntime::OpKernelContext>
    0.00 :   5c76ec:       mov    %rsi,0x8(%rdi)
    0.00 :   5c76f0:       mov    %rdx,0x10(%rdi)
    0.00 :   5c76f4:       add    $0x10,%rax
    0.00 :   5c76f8:       mov    %rcx,0x18(%rdi)
    0.00 :   5c76fc:       mov    %rax,(%rdi)
    0.00 :   5c76ff:       mov    $0xffffffffffffffff,%rax
    0.00 :   5c7706:       mov    %r8,0x20(%rdi)
    0.00 :   5c770a:       mov    %rax,0x28(%rdi)
    0.00 :   5c770e:       mov    %eax,0x30(%rdi)
    0.00 :   5c7711:       test   %rsi,%rsi
    0.00 :   5c7714:       je     5c77b7 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)+0xf7>
    0.00 :   5c771a:       test   %rdx,%rdx
    0.00 :   5c771d:       je     5c78fb <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)+0x23b>
    0.00 :   5c7723:       mov    %rsi,%rbp
    0.00 :   5c7726:       mov    %rdx,%rdi
    0.00 :   5c7729:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   5c772e:       mov    0x8(%rbp),%rdx
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7732:       mov    (%rax),%rax
   90.13 :   5c7735:       sub    0x18(%rdx),%rax
    0.00 :   5c7739:       cmp    0x48(%rdx),%rax
    0.00 :   5c773d:       jae    5c7859 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)+0x199>
    0.00 :   5c7743:       mov    0x20(%rdx),%rdx
    0.00 :   5c7747:       mov    0x10(%rbx),%rdi
    0.00 :   5c774b:       mov    (%rdx,%rax,4),%r12d
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    9.87 :   5c774f:       mov    %r12d,0x28(%rbx)
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7753:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   5c7758:       mov    0x10(%rbx),%rdi
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5c775c:       mov    0xb0(%rax),%rbp
    0.00 :   5c7763:       sub    0xa8(%rax),%rbp
    0.00 :   5c776a:       sar    $0x3,%rbp
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c776e:       add    %r12d,%ebp
    0.00 :   5c7771:       mov    %ebp,0x2c(%rbx)
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7774:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   5c7779:       mov    0xf8(%rax),%rdx
    0.00 :   5c7780:       sub    0xf0(%rax),%rdx
    0.00 :   5c7787:       sar    $0x3,%rdx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c778b:       add    %edx,%ebp
    0.00 :   5c778d:       mov    %ebp,0x30(%rbx)
    0.00 :   5c7790:       mov    0x1b8(%rsp),%rax
    0.00 :   5c7798:       xor    %fs:0x28,%rax
    0.00 :   5c77a1:       jne    5c7854 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)+0x194>
    0.00 :   5c77a7:       add    $0x1c0,%rsp
    0.00 :   5c77ae:       pop    %rbx
    0.00 :   5c77af:       pop    %rbp
    0.00 :   5c77b0:       pop    %r12
    0.00 :   5c77b2:       pop    %r13
    0.00 :   5c77b4:       pop    %r14
    0.00 :   5c77b6:       retq
    0.00 :   5c77b7:       mov    $0xa0,%edi
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5c77bc:       lea    0x20(%rsp),%rbx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c77c1:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c77c6:       lea    0x2cb0ad(%rip),%rdx        # 89287a <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0x7a>
    0.00 :   5c77cd:       mov    %rbx,%rdi
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c77d0:       mov    %rax,%r13
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c77d3:       lea    -0x18(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5c77d7:       lea    0x10(%rbx),%rax
    0.00 :   5c77db:       mov    %rax,0x20(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c77e0:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c77e5:       mov    %rsp,%r12
    0.00 :   5c77e8:       mov    %r12,%rdi
    0.00 :   5c77eb:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5c77f0:       lea    0x40(%rsp),%rbp
    0.00 :   5c77f5:       mov    %r12,%r8
    0.00 :   5c77f8:       lea    0x2cb301(%rip),%rcx        # 892b00 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)::__PRETTY_FUNCTION__>
    0.00 :   5c77ff:       mov    $0x1f,%edx
    0.00 :   5c7804:       lea    0x2cb0a5(%rip),%rsi        # 8928b0 <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0xb0>
    0.00 :   5c780b:       mov    %rbp,%rdi
    0.00 :   5c780e:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5c7813:       mov    %rbx,%rcx
    0.00 :   5c7816:       lea    0x2cb05e(%rip),%rdx        # 89287b <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0x7b>
    0.00 :   5c781d:       mov    %rbp,%rsi
    0.00 :   5c7820:       mov    %r13,%rdi
    0.00 :   5c7823:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5c7828:       mov    %rbp,%rdi
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            if (!_M_is_local())
    0.00 :   5c782b:       add    $0x10,%rbx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c782f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5c7834:       mov    %r12,%rdi
    0.00 :   5c7837:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5c783c:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5c7841:       cmp    %rbx,%rdi
    0.00 :   5c7844:       je     b4964 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5c784a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5c784f:       jmpq   b4964 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]>
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7854:       callq  53460 <__stack_chk_fail@plt>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7859:       lea    0x40(%rsp),%rbp
    0.00 :   5c785e:       mov    $0xa0,%edi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   5c7863:       lea    0x20(%rsp),%rbx
    0.00 :   5c7868:       mov    %rsp,%r12
    0.00 :   5c786b:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5c7870:       mov    $0x10,%esi
    0.00 :   5c7875:       mov    %rbp,%rdi
    0.00 :   5c7878:       mov    %rax,%r13
    0.00 :   5c787b:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   5c7880:       lea    0x8(%rbp),%rsi
    0.00 :   5c7884:       mov    %rbx,%rdi
    0.00 :   5c7887:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   5c788c:       mov    %rbp,%rdi
    0.00 :   5c788f:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   5c7894:       mov    %r12,%rdi
    0.00 :   5c7897:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5c789c:       mov    %r12,%r8
    0.00 :   5c789f:       mov    $0x23,%edx
    0.00 :   5c78a4:       mov    %rbp,%rdi
    0.00 :   5c78a7:       lea    0x2cb1f2(%rip),%rcx        # 892aa0 <onnxruntime::NodeIndexInfo::GetNodeOffset(unsigned long) const::__PRETTY_FUNCTION__>
    0.00 :   5c78ae:       lea    0x2c8103(%rip),%rsi        # 88f9b8 <std::piecewise_construct+0xdb>
    0.00 :   5c78b5:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5c78ba:       mov    %rbx,%rcx
    0.00 :   5c78bd:       lea    0x2cb02c(%rip),%rdx        # 8928f0 <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0xf0>
    0.00 :   5c78c4:       mov    %rbp,%rsi
    0.00 :   5c78c7:       mov    %r13,%rdi
    0.00 :   5c78ca:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5c78cf:       mov    %rbp,%rdi
    0.00 :   5c78d2:       add    $0x10,%rbx
    0.00 :   5c78d6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5c78db:       mov    %r12,%rdi
    0.00 :   5c78de:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5c78e3:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5c78e8:       cmp    %rbx,%rdi
    0.00 :   5c78eb:       je     b49fc <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x98>
    0.00 :   5c78f1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5c78f6:       jmpq   b49fc <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x98>
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c78fb:       mov    $0xa0,%edi
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5c7900:       lea    0x20(%rsp),%rbx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7905:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c790a:       lea    0x2caf8c(%rip),%rdx        # 89289d <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0x9d>
    0.00 :   5c7911:       mov    %rbx,%rdi
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7914:       mov    %rax,%r13
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7917:       lea    -0x11(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5c791b:       lea    0x10(%rbx),%rax
    0.00 :   5c791f:       mov    %rax,0x20(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c7924:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7929:       mov    %rsp,%r12
    0.00 :   5c792c:       mov    %r12,%rdi
    0.00 :   5c792f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5c7934:       lea    0x40(%rsp),%rbp
    0.00 :   5c7939:       mov    %r12,%r8
    0.00 :   5c793c:       lea    0x2cb1bd(%rip),%rcx        # 892b00 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)::__PRETTY_FUNCTION__>
    0.00 :   5c7943:       mov    $0x20,%edx
    0.00 :   5c7948:       lea    0x2caf61(%rip),%rsi        # 8928b0 <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0xb0>
    0.00 :   5c794f:       mov    %rbp,%rdi
    0.00 :   5c7952:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5c7957:       mov    %rbx,%rcx
    0.00 :   5c795a:       lea    0x2caf3d(%rip),%rdx        # 89289e <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0x9e>
    0.00 :   5c7961:       mov    %rbp,%rsi
    0.00 :   5c7964:       mov    %r13,%rdi
    0.00 :   5c7967:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5c796c:       mov    %rbp,%rdi
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            if (!_M_is_local())
    0.00 :   5c796f:       add    $0x10,%rbx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7973:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5c7978:       mov    %r12,%rdi
    0.00 :   5c797b:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5c7980:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5c7985:       cmp    %rbx,%rdi
    0.00 :   5c7988:       je     b497a <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x16>
    0.00 :   5c798e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5c7993:       jmpq   b497a <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x16>
    0.00 :   5c7998:       mov    %rax,%r14
    0.00 :   5c799b:       jmpq   b4990 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x2c>
    0.00 :   5c79a0:       mov    %rax,%rbp
    0.00 :   5c79a3:       jmpq   b499b <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x37>
    0.00 :   5c79a8:       mov    %rax,%rbp
    0.00 :   5c79ab:       jmpq   b49a3 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x3f>
    0.00 :   5c79b0:       mov    %rax,%rbp
    0.00 :   5c79b3:       jmpq   b49b6 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x52>
    0.00 :   5c79b8:       mov    %rax,%r14
    0.00 :   5c79bb:       jmpq   b49c6 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x62>
    0.00 :   5c79c0:       mov    %rax,%rbp
    0.00 :   5c79c3:       jmpq   b49d1 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x6d>
    0.00 :   5c79c8:       mov    %rax,%rbp
    0.00 :   5c79cb:       jmpq   b49d9 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x75>
    0.00 :   5c79d0:       mov    %rax,%rbp
    0.00 :   5c79d3:       jmpq   b49ec <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x88>
    0.00 :   5c79d8:       mov    %rax,%r14
    0.00 :   5c79db:       jmpq   b4a12 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0xae>
    0.00 :   5c79e0:       mov    %rax,%rbp
    0.00 :   5c79e3:       jmpq   b4a1d <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0xb9>
    0.00 :   5c79e8:       mov    %rax,%rbp
    0.00 :   5c79eb:       jmpq   b4a25 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0xc1>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (9 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a8810 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)>:
         :            _Z24MlasSgemmPackedOperation15CBLAS_TRANSPOSEmmmmfPKfmPKvmfPfm():
    0.00 :   6a8810:       push   %r15
    0.00 :   6a8812:       push   %r14
    0.00 :   6a8814:       push   %r13
    0.00 :   6a8816:       push   %r12
    0.00 :   6a8818:       push   %rbp
    0.00 :   6a8819:       push   %rbx
    0.00 :   6a881a:       sub    $0x30b8,%rsp
    0.00 :   6a8821:       mov    0x30f8(%rsp),%rax
    0.00 :   6a8829:       mov    %edi,0x64(%rsp)
    0.00 :   6a882d:       mov    %rsi,0x50(%rsp)
    0.00 :   6a8832:       mov    0x3110(%rsp),%r15
    0.00 :   6a883a:       mov    %rax,0x70(%rsp)
    0.00 :   6a883f:       mov    0x3108(%rsp),%rax
    0.00 :   6a8847:       mov    %rdx,0x90(%rsp)
    0.00 :   6a884f:       mov    %rcx,0x80(%rsp)
    0.00 :   6a8857:       mov    %r8,0x40(%rsp)
    0.00 :   6a885c:       mov    %r9,0x68(%rsp)
    0.00 :   6a8861:       mov    %rax,0x88(%rsp)
    0.00 :   6a8869:       movss  %xmm0,0x1c(%rsp)
    0.00 :   6a886f:       movss  %xmm1,0x9c(%rsp)
    0.00 :   6a8878:       mov    %fs:0x28,%rax
    0.00 :   6a8881:       mov    %rax,0x30a8(%rsp)
    0.00 :   6a8889:       xor    %eax,%eax
    0.00 :   6a888b:       test   %rcx,%rcx
    0.00 :   6a888e:       je     6a8ad8 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x2c8>
    0.00 :   6a8894:       movss  0x17e508(%rip),%xmm0        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   6a889c:       mov    $0x1,%ecx
    0.00 :   6a88a1:       movq   $0x0,0x78(%rsp)
    0.00 :   6a88aa:       ucomiss %xmm0,%xmm1
    0.00 :   6a88ad:       pxor   %xmm0,%xmm0
    0.00 :   6a88b1:       setp   %dl
    0.00 :   6a88b4:       cmovne %ecx,%edx
    0.00 :   6a88b7:       ucomiss %xmm0,%xmm1
    0.00 :   6a88ba:       setp   %al
    0.00 :   6a88bd:       cmovne %ecx,%eax
    0.00 :   6a88c0:       and    %eax,%edx
    0.00 :   6a88c2:       ucomiss %xmm0,%xmm1
    0.00 :   6a88c5:       mov    $0x0,%eax
    0.00 :   6a88ca:       mov    %dl,0x9a(%rsp)
    0.00 :   6a88d1:       setnp  %dl
    0.00 :   6a88d4:       cmove  %edx,%eax
    0.00 :   6a88d7:       mov    %al,0x9b(%rsp)
    0.00 :   6a88de:       lea    0xa0(%rsp),%rax
    0.00 :   6a88e6:       mov    %rax,0x30(%rsp)
    0.00 :   6a88eb:       mov    0x78(%rsp),%rcx
    0.00 :   6a88f0:       mov    0x90(%rsp),%rax
    0.00 :   6a88f8:       mov    0x80(%rsp),%rdi
    0.00 :   6a8900:       add    %rcx,%rax
    0.00 :   6a8903:       sub    %rcx,%rdi
    0.00 :   6a8906:       mov    %rax,0x48(%rsp)
    0.00 :   6a890b:       mov    $0x80,%eax
    0.00 :   6a8910:       cmp    $0x80,%rdi
    0.00 :   6a8917:       cmovbe %rdi,%rax
    0.00 :   6a891b:       cmpb   $0x0,0x9a(%rsp)
    0.00 :   6a8923:       mov    %rax,0x10(%rsp)
    0.00 :   6a8928:       jne    6a8b99 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x389>
    0.00 :   6a892e:       cmpq   $0x0,0x40(%rsp)
    0.00 :   6a8934:       je     6a8abb <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x2ab>
    0.00 :   6a893a:       mov    0x88(%rsp),%rax
    0.00 :   6a8942:       mov    0x78(%rsp),%rdi
    0.00 :   6a8947:       movq   $0x0,0x38(%rsp)
    0.00 :   6a8950:       lea    (%rax,%rdi,4),%rax
    0.00 :   6a8954:       mov    %rax,0x58(%rsp)
    0.00 :   6a8959:       movzbl 0x9b(%rsp),%eax
    0.00 :   6a8961:       mov    %al,0x63(%rsp)
    0.00 :   6a8965:       nopl   (%rax)
    0.00 :   6a8968:       mov    0x38(%rsp),%rsi
    0.00 :   6a896d:       mov    0x40(%rsp),%rbp
    0.00 :   6a8972:       mov    $0x100,%eax
    0.00 :   6a8977:       mov    0x48(%rsp),%rdx
    0.00 :   6a897c:       mov    0x70(%rsp),%rcx
    0.00 :   6a8981:       sub    %rsi,%rbp
    0.00 :   6a8984:       cmp    $0x100,%rbp
    0.00 :   6a898b:       cmova  %rax,%rbp
    0.00 :   6a898f:       mov    0x3100(%rsp),%rax
    4.72 :   6a8997:       imul   %rbp,%rdx
    0.00 :   6a899b:       imul   %rsi,%rax
    0.00 :   6a899f:       add    %rdx,%rax
    0.00 :   6a89a2:       cmpl   $0x6f,0x64(%rsp)
    0.00 :   6a89a7:       lea    (%rcx,%rax,4),%rax
    0.00 :   6a89ab:       mov    %rax,0x8(%rsp)
   10.36 :   6a89b0:       je     6a8b01 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x2f1>
    0.00 :   6a89b6:       mov    0x38(%rsp),%rax
    0.00 :   6a89bb:       mov    0x68(%rsp),%rcx
    0.00 :   6a89c0:       imul   0x30f0(%rsp),%rax
    0.00 :   6a89c9:       mov    0x58(%rsp),%r14
    0.00 :   6a89ce:       lea    (%rcx,%rax,4),%rax
    0.00 :   6a89d2:       mov    %rax,0x28(%rsp)
    0.00 :   6a89d7:       mov    0x50(%rsp),%rax
    0.00 :   6a89dc:       mov    %rax,0x20(%rsp)
    0.00 :   6a89e1:       mov    0x20(%rsp),%r13
    0.00 :   6a89e6:       test   %r13,%r13
    0.00 :   6a89e9:       je     6a8aa1 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x291>
    0.00 :   6a89ef:       nop
    0.00 :   6a89f0:       cmp    $0xc,%r13
    0.00 :   6a89f4:       mov    $0xc,%ebx
    0.00 :   6a89f9:       mov    %rbp,%r8
    0.00 :   6a89fc:       mov    0x28(%rsp),%r12
    0.00 :   6a8a01:       cmovbe %r13,%rbx
    0.00 :   6a8a05:       mov    0x30f0(%rsp),%rdx
    0.00 :   6a8a0d:       mov    0x30(%rsp),%rdi
    0.00 :   6a8a12:       mov    %r12,%rsi
    0.00 :   6a8a15:       mov    %rbx,%rcx
    0.00 :   6a8a18:       sub    %rbx,%r13
    0.00 :   6a8a1b:       callq  6a7610 <MlasSgemmTransposeA(float*, float const*, unsigned long, unsigned long, unsigned long)>
    0.00 :   6a8a20:       lea    (%r12,%rbx,4),%rax
    0.00 :   6a8a24:       mov    %r13,0x20(%rsp)
    0.00 :   6a8a29:       mov    0x30(%rsp),%r12
    0.00 :   6a8a2e:       mov    %rax,0x28(%rsp)
    0.00 :   6a8a33:       lea    0x582506(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8a3a:       movzbl 0x63(%rsp),%r13d
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8a40:       mov    %rax,(%rsp)
    0.00 :   6a8a44:       nopl   0x0(%rax)
    0.00 :   6a8a48:       sub    $0x8,%rsp
    0.00 :   6a8a4c:       mov    %r14,%rdx
    0.00 :   6a8a4f:       mov    %r12,%rdi
    0.00 :   6a8a52:       mov    %rbx,%r8
    0.00 :   6a8a55:       push   %r13
    0.00 :   6a8a57:       mov    %rbp,%rcx
    0.00 :   6a8a5a:       push   %r15
    0.00 :   6a8a5c:       push   %rbp
    0.00 :   6a8a5d:       mov    0x20(%rsp),%rax
    0.00 :   6a8a62:       movss  0x3c(%rsp),%xmm0
    0.00 :   6a8a68:       mov    0x30(%rsp),%r9
    0.00 :   6a8a6d:       mov    0x28(%rsp),%rsi
    0.00 :   6a8a72:       callq  *(%rax)
    0.00 :   6a8a74:       mov    %r15,%rdx
    0.00 :   6a8a77:       add    $0x20,%rsp
    0.00 :   6a8a7b:       imul   %rax,%rdx
    0.00 :   6a8a7f:       lea    (%r14,%rdx,4),%r14
    0.00 :   6a8a83:       mov    %rax,%rdx
    0.00 :   6a8a86:       imul   %rbp,%rdx
    0.00 :   6a8a8a:       lea    (%r12,%rdx,4),%r12
    0.00 :   6a8a8e:       sub    %rax,%rbx
    0.00 :   6a8a91:       jne    6a8a48 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x238>
         :            _Z24MlasSgemmPackedOperation15CBLAS_TRANSPOSEmmmmfPKfmPKvmfPfm():
    0.00 :   6a8a93:       mov    0x20(%rsp),%r13
    0.00 :   6a8a98:       test   %r13,%r13
    0.00 :   6a8a9b:       jne    6a89f0 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x1e0>
    9.23 :   6a8aa1:       add    %rbp,0x38(%rsp)
    0.00 :   6a8aa6:       mov    0x38(%rsp),%rax
    0.00 :   6a8aab:       movb   $0x0,0x63(%rsp)
    0.00 :   6a8ab0:       cmp    %rax,0x40(%rsp)
    0.00 :   6a8ab5:       ja     6a8968 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x158>
    0.00 :   6a8abb:       mov    0x10(%rsp),%rdi
    0.00 :   6a8ac0:       add    %rdi,0x78(%rsp)
    0.00 :   6a8ac5:       mov    0x78(%rsp),%rax
    0.00 :   6a8aca:       cmp    %rax,0x80(%rsp)
    0.00 :   6a8ad2:       ja     6a88eb <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0xdb>
    0.00 :   6a8ad8:       mov    0x30a8(%rsp),%rax
    0.00 :   6a8ae0:       xor    %fs:0x28,%rax
    0.00 :   6a8ae9:       jne    6a8bc5 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x3b5>
    0.00 :   6a8aef:       add    $0x30b8,%rsp
    0.00 :   6a8af6:       pop    %rbx
    0.00 :   6a8af7:       pop    %rbp
    0.00 :   6a8af8:       pop    %r12
    0.00 :   6a8afa:       pop    %r13
    0.00 :   6a8afc:       pop    %r14
    0.00 :   6a8afe:       pop    %r15
    0.00 :   6a8b00:       retq
    0.00 :   6a8b01:       mov    0x68(%rsp),%rax
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8b06:       mov    0x50(%rsp),%rbx
         :            _Z24MlasSgemmPackedOperation15CBLAS_TRANSPOSEmmmmfPKfmPKvmfPfm():
    0.00 :   6a8b0b:       movzbl 0x63(%rsp),%r12d
    0.00 :   6a8b11:       lea    (%rax,%rsi,4),%r13
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8b15:       test   %rbx,%rbx
    0.00 :   6a8b18:       je     6a8aa1 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x291>
    0.00 :   6a8b1a:       lea    0x58241f(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8b21:       mov    0x58(%rsp),%r14
    0.00 :   6a8b26:       mov    %rbp,(%rsp)
    0.00 :   6a8b2a:       mov    %r15,%rbp
    0.00 :   6a8b2d:       mov    %r13,%r15
    0.00 :   6a8b30:       mov    %r12d,%r13d
    0.00 :   6a8b33:       mov    0x30f0(%rsp),%r12
    0.00 :   6a8b3b:       mov    %rax,0x20(%rsp)
    0.00 :   6a8b40:       sub    $0x8,%rsp
    4.83 :   6a8b44:       mov    %r14,%rdx
    0.00 :   6a8b47:       mov    %r15,%rdi
    0.00 :   6a8b4a:       mov    %rbx,%r8
   18.21 :   6a8b4d:       push   %r13
    0.00 :   6a8b4f:       push   %rbp
    0.00 :   6a8b50:       push   %r12
    0.00 :   6a8b52:       mov    0x40(%rsp),%rax
   17.05 :   6a8b57:       movss  0x3c(%rsp),%xmm0
    0.00 :   6a8b5d:       mov    0x30(%rsp),%r9
    0.00 :   6a8b62:       mov    0x20(%rsp),%rcx
   17.40 :   6a8b67:       mov    0x28(%rsp),%rsi
    0.00 :   6a8b6c:       callq  *(%rax)
    0.00 :   6a8b6e:       mov    %rbp,%rdx
    0.00 :   6a8b71:       add    $0x20,%rsp
    0.00 :   6a8b75:       imul   %rax,%rdx
    0.00 :   6a8b79:       lea    (%r14,%rdx,4),%r14
   18.20 :   6a8b7d:       mov    %r12,%rdx
    0.00 :   6a8b80:       imul   %rax,%rdx
    0.00 :   6a8b84:       lea    (%r15,%rdx,4),%r15
    0.00 :   6a8b88:       sub    %rax,%rbx
    0.00 :   6a8b8b:       jne    6a8b40 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x330>
    0.00 :   6a8b8d:       mov    %rbp,%r15
    0.00 :   6a8b90:       mov    (%rsp),%rbp
    0.00 :   6a8b94:       jmpq   6a8aa1 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x291>
         :            _Z24MlasSgemmPackedOperation15CBLAS_TRANSPOSEmmmmfPKfmPKvmfPfm():
    0.00 :   6a8b99:       mov    0x88(%rsp),%rax
    0.00 :   6a8ba1:       mov    0x10(%rsp),%rdx
    0.00 :   6a8ba6:       movss  0x9c(%rsp),%xmm0
    0.00 :   6a8baf:       mov    0x50(%rsp),%rsi
    0.00 :   6a8bb4:       lea    (%rax,%rcx,4),%rdi
    0.00 :   6a8bb8:       mov    %r15,%rcx
    0.00 :   6a8bbb:       callq  6a7580 <MlasSgemmMultiplyBeta(float*, unsigned long, unsigned long, unsigned long, float)>
    0.00 :   6a8bc0:       jmpq   6a892e <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x11e>
    0.00 :   6a8bc5:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (4 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .plt:
         :
         :           0000000000053150 <memcpy@plt>:
  100.00 :   53150:       jmpq   *0xbd531a(%rip)        # c28470 <memcpy@GLIBC_2.14>
    0.00 :   53156:       pushq  $0x8b
    0.00 :   5315b:       jmpq   52890 <.plt>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (8 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000094450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>:
    0.00 :   94450:       push   %r15
    0.00 :   94452:       push   %r14
    0.00 :   94454:       push   %r13
    0.00 :   94456:       push   %r12
    0.00 :   94458:       push   %rbp
    0.00 :   94459:       push   %rbx
    0.00 :   9445a:       lea    0x17(%rsi),%rbx
    0.00 :   9445e:       sub    $0x88,%rsp
    0.00 :   94465:       cmp    $0x1f,%rbx
    0.00 :   94469:       jbe    945d0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40e0>
    0.00 :   9446f:       and    $0xfffffffffffffff0,%rbx
    0.00 :   94473:       cmp    $0xffffffffffffffbf,%rbx
    0.00 :   94477:       seta   %al
    0.00 :   9447a:       cmp    %rsi,%rbx
    0.00 :   9447d:       jb     94b78 <_IO_str_seekoff@@GLIBC_2.2.5+0x4688>
    0.00 :   94483:       test   %al,%al
    0.00 :   94485:       jne    94b78 <_IO_str_seekoff@@GLIBC_2.2.5+0x4688>
    0.00 :   9448b:       test   %rdi,%rdi
    0.00 :   9448e:       mov    %rsi,0x8(%rsp)
    0.00 :   94493:       mov    %rdi,%r14
    0.00 :   94496:       je     94b58 <_IO_str_seekoff@@GLIBC_2.2.5+0x4668>
    0.00 :   9449c:       mov    %ebx,%r15d
    0.00 :   9449f:       shr    $0x4,%r15d
    0.00 :   944a3:       cmp    0x359496(%rip),%rbx        # 3ed940 <__malloc_initialize_hook@GLIBC_2.2.5+0x50>
   17.01 :   944aa:       ja     945e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40f0>
    0.00 :   944b0:       lea    -0x2(%r15),%eax
    0.00 :   944b4:       lea    (%rdi,%rax,8),%rsi
    0.00 :   944b8:       mov    %rax,%rdx
    0.00 :   944bb:       mov    0x10(%rsi),%rcx
    0.00 :   944bf:       test   %rcx,%rcx
    0.00 :   944c2:       je     94860 <_IO_str_seekoff@@GLIBC_2.2.5+0x4370>
    0.00 :   944c8:       lea    0x35c509(%rip),%r8        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   944cf:       lea    0x10(%rdi,%rax,8),%rdi
    0.00 :   944d4:       mov    0x10(%rcx),%r9
    0.00 :   944d8:       mov    (%r8),%r10d
    0.00 :   944db:       test   %r10d,%r10d
    0.00 :   944de:       jne    9483f <_IO_str_seekoff@@GLIBC_2.2.5+0x434f>
    0.00 :   944e4:       mov    %r9,0x10(%rsi)
    0.00 :   944e8:       mov    0x8(%rcx),%eax
    0.00 :   944eb:       shr    $0x4,%eax
    0.00 :   944ee:       sub    $0x2,%eax
    0.00 :   944f1:       cmp    %edx,%eax
    0.00 :   944f3:       jne    94df0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4900>
    0.00 :   944f9:       mov    0x356878(%rip),%rbp        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   94500:       mov    %fs:0x0(%rbp),%rax
    0.00 :   94505:       test   %rax,%rax
    0.00 :   94508:       je     945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   9450e:       sub    $0x11,%rbx
    0.00 :   94512:       shr    $0x4,%rbx
    0.00 :   94516:       cmp    %rbx,0x356db3(%rip)        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   9451d:       jbe    945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   94523:       movsbq (%rax,%rbx,1),%rax
    0.00 :   94528:       cmp    %rax,0x356db1(%rip)        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   9452f:       jbe    945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   94531:       mov    0x10(%rsi),%rdx
    0.00 :   94535:       test   %rdx,%rdx
    0.00 :   94538:       je     945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   9453a:       lea    0x0(,%rbx,8),%r10
    0.00 :   94542:       mov    (%r8),%eax
    0.00 :   94545:       mov    0x10(%rdx),%r9
    0.00 :   94549:       test   %eax,%eax
    0.00 :   9454b:       jne    94937 <_IO_str_seekoff@@GLIBC_2.2.5+0x4447>
    0.00 :   94551:       mov    %r9,0x10(%rsi)
    0.00 :   94555:       cmp    $0x3f,%rbx
    0.00 :   94559:       ja     94b9a <_IO_str_seekoff@@GLIBC_2.2.5+0x46aa>
    0.00 :   9455f:       mov    %fs:0x0(%rbp),%r9
    0.00 :   94564:       add    $0x10,%rdx
    0.00 :   94568:       lea    (%r9,%r10,1),%rax
    0.00 :   9456c:       mov    %r9,0x8(%rdx)
    0.00 :   94570:       mov    0x40(%rax),%r11
    0.00 :   94574:       mov    %r11,(%rdx)
    0.00 :   94577:       mov    %rdx,0x40(%rax)
    0.00 :   9457b:       movzbl (%r9,%rbx,1),%eax
    0.00 :   94580:       add    $0x1,%eax
    0.00 :   94583:       mov    %al,(%r9,%rbx,1)
    0.00 :   94587:       movsbq %al,%rax
    0.00 :   9458b:       cmp    0x356d4e(%rip),%rax        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   94592:       jae    945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   94594:       mov    0x10(%rsi),%rdx
    0.00 :   94598:       test   %rdx,%rdx
    0.00 :   9459b:       jne    94542 <_IO_str_seekoff@@GLIBC_2.2.5+0x4052>
    0.00 :   9459d:       nopl   (%rax)
    0.00 :   945a0:       mov    0x359386(%rip),%esi        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   945a6:       add    $0x10,%rcx
    0.00 :   945aa:       test   %esi,%esi
    0.00 :   945ac:       jne    94a34 <_IO_str_seekoff@@GLIBC_2.2.5+0x4544>
    0.00 :   945b2:       add    $0x88,%rsp
    0.00 :   945b9:       mov    %rcx,%rax
    0.00 :   945bc:       pop    %rbx
    0.00 :   945bd:       pop    %rbp
    0.00 :   945be:       pop    %r12
    0.00 :   945c0:       pop    %r13
    0.00 :   945c2:       pop    %r14
    0.00 :   945c4:       pop    %r15
   27.25 :   945c6:       retq
    0.00 :   945c7:       nopw   0x0(%rax,%rax,1)
    0.00 :   945d0:       xor    %eax,%eax
    0.00 :   945d2:       mov    $0x20,%ebx
    0.00 :   945d7:       jmpq   9447a <_IO_str_seekoff@@GLIBC_2.2.5+0x3f8a>
    0.00 :   945dc:       nopl   0x0(%rax)
    0.00 :   945e0:       cmp    $0x3ff,%rbx
    0.00 :   945e7:       jbe    94860 <_IO_str_seekoff@@GLIBC_2.2.5+0x4370>
    0.00 :   945ed:       mov    %rbx,%rax
    0.00 :   945f0:       mov    %rbx,%rdi
    0.00 :   945f3:       mov    %rbx,%rcx
    0.00 :   945f6:       shr    $0x12,%rax
    0.00 :   945fa:       mov    %rbx,%rsi
    0.00 :   945fd:       mov    %rbx,%r11
    0.00 :   94600:       shr    $0xc,%rsi
    0.00 :   94604:       shr    $0x6,%rdi
    0.00 :   94608:       shr    $0x9,%rcx
    0.00 :   9460c:       shr    $0xf,%r11
    0.00 :   94610:       mov    $0x2,%edx
    0.00 :   94615:       cmp    $0x2,%rax
    0.00 :   94619:       cmova  %rdx,%rax
    0.00 :   9461d:       lea    0x30(%rdi),%r10d
    0.00 :   94621:       lea    0x6e(%rsi),%r9d
    0.00 :   94625:       lea    0x7c(%rax),%ebp
    0.00 :   94628:       mov    %rsi,0x58(%rsp)
    0.00 :   9462d:       lea    0x77(%r11),%r8d
    0.00 :   94631:       mov    %rsi,%rax
    0.00 :   94634:       mov    %ecx,%esi
    0.00 :   94636:       mov    %rdi,0x40(%rsp)
    0.00 :   9463b:       add    $0x5b,%esi
    0.00 :   9463e:       cmp    $0x30,%rdi
    0.00 :   94642:       mov    %rcx,0x50(%rsp)
    0.00 :   94647:       mov    %r10d,0x4c(%rsp)
    0.00 :   9464c:       mov    %r11,0x60(%rsp)
    0.00 :   94651:       mov    %ebp,0x68(%rsp)
    0.00 :   94655:       mov    %r8d,0x6c(%rsp)
    0.00 :   9465a:       mov    %r9d,0x70(%rsp)
    0.00 :   9465f:       mov    %esi,0x74(%rsp)
    0.00 :   94663:       mov    %r10d,0x14(%rsp)
    0.00 :   94668:       jbe    94688 <_IO_str_seekoff@@GLIBC_2.2.5+0x4198>
    0.00 :   9466a:       cmp    $0x14,%rcx
    0.00 :   9466e:       mov    %esi,0x14(%rsp)
    0.00 :   94672:       jbe    94688 <_IO_str_seekoff@@GLIBC_2.2.5+0x4198>
    0.00 :   94674:       cmp    $0xa,%rax
    0.00 :   94678:       mov    %r9d,0x14(%rsp)
    0.00 :   9467d:       ja     94d20 <_IO_str_seekoff@@GLIBC_2.2.5+0x4830>
    0.00 :   94683:       nopl   0x0(%rax,%rax,1)
    0.00 :   94688:       mov    0x8(%r14),%eax
    0.00 :   9468c:       test   %eax,%eax
    0.00 :   9468e:       jne    94960 <_IO_str_seekoff@@GLIBC_2.2.5+0x4470>
    0.00 :   94694:       mov    0x3566dd(%rip),%rbp        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   9469b:       lea    -0x11(%rbx),%rax
    0.00 :   9469f:       shr    $0x4,%rax
    0.00 :   946a3:       mov    %fs:0x0(%rbp),%r10
    0.00 :   946a8:       mov    %rax,%r12
    0.00 :   946ab:       test   %r10,%r10
    0.00 :   946ae:       je     94cb8 <_IO_str_seekoff@@GLIBC_2.2.5+0x47c8>
    0.00 :   946b4:       cmp    %rax,0x356c15(%rip)        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   946bb:       mov    $0x0,%eax
    0.00 :   946c0:       cmova  %rbx,%rax
    0.00 :   946c4:       mov    %rax,0x20(%rsp)
    0.00 :   946c9:       lea    0x60(%r14),%r13
    0.00 :   946cd:       xor    %r11d,%r11d
    0.00 :   946d0:       mov    %r15d,0x48(%rsp)
    0.00 :   946d5:       mov    %rbp,0x38(%rsp)
    0.00 :   946da:       mov    0x356bff(%rip),%rax        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   946e1:       lea    0x20(%rbx),%rcx
    0.00 :   946e5:       lea    (%r10,%r12,8),%rdi
    0.00 :   946e9:       mov    0x356bf8(%rip),%r15        # 3eb2e8 <__fpu_control@@GLIBC_2.2.5+0x144>
    0.00 :   946f0:       xor    %esi,%esi
    0.00 :   946f2:       xor    %r9d,%r9d
    0.00 :   946f5:       mov    %rcx,0x30(%rsp)
    0.00 :   946fa:       mov    %rdi,0x28(%rsp)
    0.00 :   946ff:       mov    %rax,0x18(%rsp)
    0.00 :   94704:       mov    0x78(%r14),%rax
    0.00 :   94708:       cmp    %rax,%r13
    0.00 :   9470b:       je     94e78 <_IO_str_seekoff@@GLIBC_2.2.5+0x4988>
    0.00 :   94711:       mov    0x8(%rax),%rdx
   16.64 :   94715:       cmp    $0x10,%rdx
    0.00 :   94719:       jbe    94b18 <_IO_str_seekoff@@GLIBC_2.2.5+0x4628>
    0.00 :   9471f:       cmp    0x888(%r14),%rdx
    0.00 :   94726:       ja     94b18 <_IO_str_seekoff@@GLIBC_2.2.5+0x4628>
    0.00 :   9472c:       and    $0xfffffffffffffff8,%rdx
    0.00 :   94730:       cmp    $0x3ff,%rbx
    0.00 :   94737:       mov    0x18(%rax),%rdi
    0.00 :   9473b:       ja     94746 <_IO_str_seekoff@@GLIBC_2.2.5+0x4256>
    0.00 :   9473d:       cmp    %r13,%rdi
    0.00 :   94740:       je     94c08 <_IO_str_seekoff@@GLIBC_2.2.5+0x4718>
    0.00 :   94746:       cmp    %rdx,%rbx
    0.00 :   94749:       mov    %rdi,0x78(%r14)
    0.00 :   9474d:       mov    %r13,0x10(%rdi)
    0.00 :   94751:       je     949f0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4500>
    0.00 :   94757:       cmp    $0x3ff,%rdx
    0.00 :   9475e:       jbe    94910 <_IO_str_seekoff@@GLIBC_2.2.5+0x4420>
    0.00 :   94764:       mov    %rdx,%rcx
    0.00 :   94767:       shr    $0x6,%rcx
    0.00 :   9476b:       cmp    $0x30,%rcx
    0.00 :   9476f:       ja     94b28 <_IO_str_seekoff@@GLIBC_2.2.5+0x4638>
    0.00 :   94775:       add    $0x30,%ecx
    0.00 :   94778:       lea    -0x2(%rcx,%rcx,1),%edi
    0.00 :   9477c:       movslq %edi,%rdi
    0.00 :   9477f:       lea    0x70(%r14,%rdi,8),%r8
    0.00 :   94784:       mov    (%r8),%rbp
    0.00 :   94787:       lea    -0x10(%r8),%rdi
    0.00 :   9478b:       cmp    %rbp,%rdi
    0.00 :   9478e:       mov    %rbp,0x78(%rsp)
    0.00 :   94793:       je     94cd0 <_IO_str_seekoff@@GLIBC_2.2.5+0x47e0>
    0.00 :   94799:       mov    0x8(%r8),%r8
    0.00 :   9479d:       mov    0x8(%r8),%rbp
    0.00 :   947a1:       test   $0x4,%bpl
    0.00 :   947a5:       jne    94d38 <_IO_str_seekoff@@GLIBC_2.2.5+0x4848>
    0.00 :   947ab:       or     $0x1,%rdx
    0.00 :   947af:       cmp    %rdx,%rbp
    0.00 :   947b2:       jbe    94d80 <_IO_str_seekoff@@GLIBC_2.2.5+0x4890>
    0.00 :   947b8:       mov    0x78(%rsp),%rbp
    0.00 :   947bd:       mov    0x28(%rbp),%rdx
    0.00 :   947c1:       mov    %rbp,0x20(%rax)
    0.00 :   947c5:       mov    %rdx,0x28(%rax)
    0.00 :   947c9:       mov    %rax,0x20(%rdx)
    0.00 :   947cd:       mov    %rax,0x28(%rbp)
    0.00 :   947d1:       nopl   0x0(%rax)
    0.00 :   947d8:       mov    %ecx,%edx
    0.00 :   947da:       mov    $0x1,%ebp
    0.00 :   947df:       add    $0x1,%r11
    0.00 :   947e3:       sar    $0x5,%edx
    0.00 :   947e6:       shl    %cl,%ebp
    0.00 :   947e8:       movslq %edx,%rdx
    0.00 :   947eb:       or     %ebp,0x860(%r14,%rdx,4)
    0.00 :   947f3:       test   %r9d,%r9d
    0.00 :   947f6:       mov    %r8,0x18(%rax)
    0.00 :   947fa:       mov    %rdi,0x10(%rax)
    0.00 :   947fe:       mov    %rax,0x18(%rdi)
    0.00 :   94802:       mov    %rax,0x10(%r8)
    0.00 :   94806:       je     94a50 <_IO_str_seekoff@@GLIBC_2.2.5+0x4560>
    0.00 :   9480c:       test   %r15,%r15
    0.00 :   9480f:       je     9481a <_IO_str_seekoff@@GLIBC_2.2.5+0x432a>
    0.00 :   94811:       cmp    %r11,%r15
    0.00 :   94814:       jb     94e81 <_IO_str_seekoff@@GLIBC_2.2.5+0x4991>
    0.00 :   9481a:       add    $0x1,%esi
    0.00 :   9481d:       cmp    $0x270f,%esi
    0.00 :   94823:       jg     94e81 <_IO_str_seekoff@@GLIBC_2.2.5+0x4991>
    0.00 :   94829:       mov    0x78(%r14),%rax
    0.00 :   9482d:       jmpq   94708 <_IO_str_seekoff@@GLIBC_2.2.5+0x4218>
    0.00 :   94832:       nopw   0x0(%rax,%rax,1)
    0.00 :   94838:       mov    0x10(%rax),%r9
    0.00 :   9483c:       mov    %rax,%rcx
    0.00 :   9483f:       mov    %rcx,%rax
    0.00 :   94842:       cmpl   $0x0,%fs:0x18
    0.00 :   9484b:       je     9484e <_IO_str_seekoff@@GLIBC_2.2.5+0x435e>
    0.00 :   9484d:       lock cmpxchg %r9,(%rdi)
    0.00 :   94852:       cmp    %rcx,%rax
    0.00 :   94855:       je     944e8 <_IO_str_seekoff@@GLIBC_2.2.5+0x3ff8>
    0.00 :   9485b:       test   %rax,%rax
    0.00 :   9485e:       jne    94838 <_IO_str_seekoff@@GLIBC_2.2.5+0x4348>
    0.00 :   94860:       lea    0x7fffffff(%r15),%eax
    0.00 :   94867:       add    %eax,%eax
    0.00 :   94869:       lea    0x70(%r14,%rax,8),%rsi
    0.00 :   9486e:       mov    0x8(%rsi),%rcx
    0.00 :   94872:       lea    -0x10(%rsi),%rdx
    0.00 :   94876:       cmp    %rcx,%rdx
    0.00 :   94879:       je     94970 <_IO_str_seekoff@@GLIBC_2.2.5+0x4480>
    0.00 :   9487f:       mov    0x18(%rcx),%rax
   13.46 :   94883:       cmp    %rcx,0x10(%rax)
    0.00 :   94887:       jne    94e68 <_IO_str_seekoff@@GLIBC_2.2.5+0x4978>
    0.00 :   9488d:       lea    0x3573ac(%rip),%r9        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   94894:       orq    $0x1,0x8(%rcx,%rbx,1)
    0.00 :   9489a:       mov    %rax,0x8(%rsi)
    0.00 :   9489e:       mov    %rdx,0x10(%rax)
    0.00 :   948a2:       cmp    %r9,%r14
    0.00 :   948a5:       je     948ac <_IO_str_seekoff@@GLIBC_2.2.5+0x43bc>
    0.00 :   948a7:       orq    $0x4,0x8(%rcx)
    0.00 :   948ac:       mov    0x3564c5(%rip),%rdi        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   948b3:       mov    %fs:(%rdi),%r8
    0.00 :   948b7:       test   %r8,%r8
    0.00 :   948ba:       je     945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   948c0:       lea    -0x11(%rbx),%rdi
    0.00 :   948c4:       shr    $0x4,%rdi
    0.00 :   948c8:       cmp    %rdi,0x356a01(%rip)        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   948cf:       jbe    945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   948d5:       movzbl (%r8,%rdi,1),%r10d
    0.00 :   948da:       mov    0x3569ff(%rip),%rbp        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   948e1:       lea    (%r8,%rdi,8),%r12
    0.00 :   948e5:       movsbq %r10b,%r11
    0.00 :   948e9:       cmp    %rbp,%r11
    0.00 :   948ec:       jb     94901 <_IO_str_seekoff@@GLIBC_2.2.5+0x4411>
    0.00 :   948ee:       jmpq   945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   948f3:       nopl   0x0(%rax,%rax,1)
    0.00 :   948f8:       test   %rax,%rax
    0.00 :   948fb:       jne    94e00 <_IO_str_seekoff@@GLIBC_2.2.5+0x4910>
    0.00 :   94901:       cmp    %rax,%rdx
    0.00 :   94904:       jne    948f8 <_IO_str_seekoff@@GLIBC_2.2.5+0x4408>
    0.00 :   94906:       jmpq   945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   9490b:       nopl   0x0(%rax,%rax,1)
    0.00 :   94910:       mov    %edx,%ecx
    0.00 :   94912:       shr    $0x4,%ecx
    0.00 :   94915:       lea    -0x2(%rcx,%rcx,1),%edx
    0.00 :   94919:       movslq %edx,%rdx
    0.00 :   9491c:       lea    0x70(%r14,%rdx,8),%rdx
    0.00 :   94921:       lea    -0x10(%rdx),%r8
    0.00 :   94925:       mov    (%rdx),%rdi
    0.00 :   94928:       jmpq   947d8 <_IO_str_seekoff@@GLIBC_2.2.5+0x42e8>
    0.00 :   9492d:       nopl   (%rax)
    0.00 :   94930:       mov    0x10(%rax),%r9
    0.00 :   94934:       mov    %rax,%rdx
    0.00 :   94937:       mov    %rdx,%rax
    0.00 :   9493a:       cmpl   $0x0,%fs:0x18
    0.00 :   94943:       je     94946 <_IO_str_seekoff@@GLIBC_2.2.5+0x4456>
    0.00 :   94945:       lock cmpxchg %r9,(%rdi)
    0.00 :   9494a:       cmp    %rdx,%rax
    0.00 :   9494d:       je     94555 <_IO_str_seekoff@@GLIBC_2.2.5+0x4065>
    0.00 :   94953:       test   %rax,%rax
    0.00 :   94956:       jne    94930 <_IO_str_seekoff@@GLIBC_2.2.5+0x4440>
    0.00 :   94958:       jmpq   945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   9495d:       nopl   (%rax)
    0.00 :   94960:       mov    %r14,%rdi
    0.00 :   94963:       callq  909e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0>
    0.00 :   94968:       jmpq   94694 <_IO_str_seekoff@@GLIBC_2.2.5+0x41a4>
    0.00 :   9496d:       nopl   (%rax)
    0.00 :   94970:       mov    %rbx,%rax
    0.00 :   94973:       mov    %rbx,%rdi
    0.00 :   94976:       mov    %rbx,%rcx
    0.00 :   94979:       shr    $0x12,%rax
    0.00 :   9497d:       mov    %rbx,%rsi
    0.00 :   94980:       mov    %rbx,%r11
    0.00 :   94983:       shr    $0x6,%rdi
    0.00 :   94987:       shr    $0x9,%rcx
    0.00 :   9498b:       shr    $0xc,%rsi
    0.00 :   9498f:       shr    $0xf,%r11
    0.00 :   94993:       mov    $0x2,%edx
    0.00 :   94998:       cmp    $0x2,%rax
    0.00 :   9499c:       cmova  %rdx,%rax
    0.00 :   949a0:       mov    %rdi,0x40(%rsp)
    0.00 :   949a5:       mov    %rcx,0x50(%rsp)
    0.00 :   949aa:       add    $0x7c,%eax
    0.00 :   949ad:       mov    %rsi,0x58(%rsp)
    0.00 :   949b2:       mov    %r11,0x60(%rsp)
    0.00 :   949b7:       mov    %eax,0x68(%rsp)
    0.00 :   949bb:       mov    %r11d,%eax
    0.00 :   949be:       mov    %r15d,0x14(%rsp)
    0.00 :   949c3:       add    $0x77,%eax
    0.00 :   949c6:       mov    %eax,0x6c(%rsp)
    0.00 :   949ca:       mov    %esi,%eax
    0.00 :   949cc:       add    $0x6e,%eax
    0.00 :   949cf:       mov    %eax,0x70(%rsp)
    0.00 :   949d3:       mov    %ecx,%eax
    0.00 :   949d5:       add    $0x5b,%eax
    0.00 :   949d8:       mov    %eax,0x74(%rsp)
    0.00 :   949dc:       mov    %edi,%eax
    0.00 :   949de:       add    $0x30,%eax
    0.00 :   949e1:       mov    %eax,0x4c(%rsp)
    0.00 :   949e5:       jmpq   94694 <_IO_str_seekoff@@GLIBC_2.2.5+0x41a4>
    0.00 :   949ea:       nopw   0x0(%rax,%rax,1)
    0.00 :   949f0:       lea    0x357249(%rip),%rcx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   949f7:       orq    $0x1,0x8(%rax,%rbx,1)
    0.00 :   949fd:       cmp    %rcx,%r14
    0.00 :   94a00:       je     94a07 <_IO_str_seekoff@@GLIBC_2.2.5+0x4517>
    0.00 :   94a02:       orq    $0x4,0x8(%rax)
    0.00 :   94a07:       cmpq   $0x0,0x20(%rsp)
    0.00 :   94a0d:       lea    0x10(%rax),%rcx
    0.00 :   94a11:       je     94a26 <_IO_str_seekoff@@GLIBC_2.2.5+0x4536>
    0.00 :   94a13:       movsbq (%r10,%r12,1),%r8
    0.00 :   94a18:       cmp    0x18(%rsp),%r8
    0.00 :   94a1d:       mov    %r8,%rdx
    0.00 :   94a20:       jb     94b90 <_IO_str_seekoff@@GLIBC_2.2.5+0x46a0>
    0.00 :   94a26:       mov    0x358f00(%rip),%esi        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   94a2c:       test   %esi,%esi
    0.00 :   94a2e:       je     945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94a34:       mov    0x8(%rsp),%rdx
    0.00 :   94a39:       mov    %rcx,%rdi
    0.00 :   94a3c:       xor    $0xff,%sil
    0.00 :   94a40:       callq  211f0 <*ABS*+0x9ec40@plt>
    0.00 :   94a45:       mov    %rax,%rcx
    0.00 :   94a48:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94a4d:       nopl   (%rax)
    0.00 :   94a50:       add    $0x1,%esi
    0.00 :   94a53:       cmp    $0x270f,%esi
    0.00 :   94a59:       jle    94829 <_IO_str_seekoff@@GLIBC_2.2.5+0x4339>
    0.00 :   94a5f:       cmp    $0x3ff,%rbx
    0.00 :   94a66:       jbe    94a8e <_IO_str_seekoff@@GLIBC_2.2.5+0x459e>
    0.00 :   94a68:       mov    0x14(%rsp),%eax
    0.00 :   94a6c:       add    $0x7fffffff,%eax
    0.00 :   94a71:       add    %eax,%eax
    0.00 :   94a73:       lea    0x70(%r14,%rax,8),%rax
    0.00 :   94a78:       mov    (%rax),%rdx
    0.00 :   94a7b:       lea    -0x10(%rax),%rcx
    0.00 :   94a7f:       cmp    %rcx,%rdx
    0.00 :   94a82:       je     94a8e <_IO_str_seekoff@@GLIBC_2.2.5+0x459e>
    0.00 :   94a84:       cmp    %rbx,0x8(%rdx)
    0.00 :   94a88:       jae    95276 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d86>
    0.00 :   94a8e:       mov    0x14(%rsp),%eax
    0.00 :   94a92:       lea    0x1(%rax),%ecx
    0.00 :   94a95:       add    %eax,%eax
    0.00 :   94a97:       lea    0x60(%r14,%rax,8),%rsi
    0.00 :   94a9c:       mov    %ecx,%edi
    0.00 :   94a9e:       shr    $0x5,%edi
    0.00 :   94aa1:       mov    %edi,%eax
    0.00 :   94aa3:       mov    0x860(%r14,%rax,4),%edx
    0.00 :   94aab:       mov    $0x1,%eax
    0.00 :   94ab0:       shl    %cl,%eax
    0.00 :   94ab2:       cmp    %edx,%eax
    0.00 :   94ab4:       ja     94f1b <_IO_str_seekoff@@GLIBC_2.2.5+0x4a2b>
    0.00 :   94aba:       test   %eax,%eax
    0.00 :   94abc:       je     94f1b <_IO_str_seekoff@@GLIBC_2.2.5+0x4a2b>
    0.00 :   94ac2:       test   %edx,%eax
    0.00 :   94ac4:       jne    94ffc <_IO_str_seekoff@@GLIBC_2.2.5+0x4b0c>
    0.00 :   94aca:       add    $0x10,%rsi
    0.00 :   94ace:       add    %eax,%eax
    0.00 :   94ad0:       jne    94ac2 <_IO_str_seekoff@@GLIBC_2.2.5+0x45d2>
    0.00 :   94ad2:       mov    0x356317(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94ad9:       lea    0x11f119(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94ae0:       lea    0x120311(%rip),%rdi        # 1b4df8 <_libc_intl_domainname@@GLIBC_2.2.5+0x1164>
    0.00 :   94ae7:       mov    $0xfae,%r9d
    0.00 :   94aed:       mov    (%rax),%rdx
    0.00 :   94af0:       lea    0x11f359(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94af7:       cmpb   $0x0,(%rdx)
    0.00 :   94afa:       cmovne %rax,%rcx
    0.00 :   94afe:       sub    $0x8,%rsp
    0.00 :   94b02:       push   %rdi
    0.00 :   94b03:       push   %rax
    0.00 :   94b04:       lea    0x124565(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   94b0b:       push   %rax
    0.00 :   94b0c:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   94b11:       nopl   0x0(%rax)
    0.00 :   94b18:       lea    0x12026f(%rip),%rdi        # 1b4d8e <_libc_intl_domainname@@GLIBC_2.2.5+0x10fa>
    0.00 :   94b1f:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   94b24:       nopl   0x0(%rax)
    0.00 :   94b28:       mov    %rdx,%rcx
    0.00 :   94b2b:       shr    $0x9,%rcx
    0.00 :   94b2f:       cmp    $0x14,%rcx
    0.00 :   94b33:       jbe    94ce0 <_IO_str_seekoff@@GLIBC_2.2.5+0x47f0>
    0.00 :   94b39:       mov    %rdx,%rcx
    0.00 :   94b3c:       shr    $0xc,%rcx
    0.00 :   94b40:       cmp    $0xa,%rcx
    0.00 :   94b44:       ja     94e50 <_IO_str_seekoff@@GLIBC_2.2.5+0x4960>
    0.00 :   94b4a:       add    $0x6e,%ecx
    0.00 :   94b4d:       jmpq   94778 <_IO_str_seekoff@@GLIBC_2.2.5+0x4288>
    0.00 :   94b52:       nopw   0x0(%rax,%rax,1)
    0.00 :   94b58:       xor    %esi,%esi
    0.00 :   94b5a:       mov    %rbx,%rdi
    0.00 :   94b5d:       callq  93b20 <_IO_str_seekoff@@GLIBC_2.2.5+0x3630>
    0.00 :   94b62:       test   %rax,%rax
    0.00 :   94b65:       mov    %rax,%rcx
    0.00 :   94b68:       jne    94a26 <_IO_str_seekoff@@GLIBC_2.2.5+0x4536>
    0.00 :   94b6e:       xor    %ecx,%ecx
    0.00 :   94b70:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94b75:       nopl   (%rax)
    0.00 :   94b78:       mov    0x3562e9(%rip),%rax        # 3eae68 <h_errlist@@GLIBC_2.2.5+0xdc8>
    0.00 :   94b7f:       xor    %ecx,%ecx
    0.00 :   94b81:       movl   $0xc,%fs:(%rax)
    0.00 :   94b88:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94b8d:       nopl   (%rax)
    0.00 :   94b90:       cmp    $0x3f,%r12
    0.00 :   94b94:       jbe    94cf0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4800>
    0.00 :   94b9a:       mov    0x35624f(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94ba1:       lea    0x11f051(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94ba8:       lea    0x120186(%rip),%rdi        # 1b4d35 <_libc_intl_domainname@@GLIBC_2.2.5+0x10a1>
    0.00 :   94baf:       mov    $0xb75,%r9d
    0.00 :   94bb5:       mov    (%rax),%rdx
    0.00 :   94bb8:       lea    0x11f291(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94bbf:       cmpb   $0x0,(%rdx)
    0.00 :   94bc2:       cmovne %rax,%rcx
    0.00 :   94bc6:       sub    $0x8,%rsp
    0.00 :   94bca:       push   %rdi
    0.00 :   94bcb:       push   %rax
    0.00 :   94bcc:       lea    0x12448d(%rip),%rax        # 1b9060 <_libc_intl_domainname@@GLIBC_2.2.5+0x53cc>
    0.00 :   94bd3:       push   %rax
    0.00 :   94bd4:       lea    0x12009d(%rip),%r8        # 1b4c78 <_libc_intl_domainname@@GLIBC_2.2.5+0xfe4>
    0.00 :   94bdb:       lea    0x123aee(%rip),%rsi        # 1b86d0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4a3c>
    0.00 :   94be2:       xor    %edi,%edi
    0.00 :   94be4:       xor    %eax,%eax
    0.00 :   94be6:       callq  7deb0 <psiginfo@@GLIBC_2.10+0x1780>
    0.00 :   94beb:       mov    0x3561be(%rip),%rax        # 3eadb0 <stderr@@GLIBC_2.2.5-0x1a90>
    0.00 :   94bf2:       add    $0x20,%rsp
    0.00 :   94bf6:       mov    (%rax),%rdi
    0.00 :   94bf9:       callq  7e8c0 <_IO_fflush@@GLIBC_2.2.5>
    0.00 :   94bfe:       callq  407e0 <abort@@GLIBC_2.2.5>
    0.00 :   94c03:       nopl   0x0(%rax,%rax,1)
    0.00 :   94c08:       mov    0x68(%r14),%rcx
    0.00 :   94c0c:       cmp    %rax,%rcx
    0.00 :   94c0f:       jne    94746 <_IO_str_seekoff@@GLIBC_2.2.5+0x4256>
    0.00 :   94c15:       cmp    %rdx,0x30(%rsp)
    0.00 :   94c1a:       jae    94746 <_IO_str_seekoff@@GLIBC_2.2.5+0x4256>
    0.00 :   94c20:       mov    %rdx,%rsi
    0.00 :   94c23:       add    %rbx,%rax
    0.00 :   94c26:       sub    %rbx,%rsi
    0.00 :   94c29:       mov    %rax,0x70(%r14)
    0.00 :   94c2d:       mov    %rax,0x78(%r14)
    0.00 :   94c31:       cmp    $0x3ff,%rsi
    0.00 :   94c38:       mov    %rax,0x68(%r14)
    0.00 :   94c3c:       mov    %r13,0x10(%rax)
    0.00 :   94c40:       mov    %r13,0x18(%rax)
    0.00 :   94c44:       jbe    94c56 <_IO_str_seekoff@@GLIBC_2.2.5+0x4766>
    0.00 :   94c46:       movq   $0x0,0x20(%rax)
    0.00 :   94c4e:       movq   $0x0,0x28(%rax)
    0.00 :   94c56:       lea    0x356fe3(%rip),%rdi        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   94c5d:       xor    %r8d,%r8d
    0.00 :   94c60:       cmp    %rdi,%r14
    0.00 :   94c63:       mov    %rbx,%rdi
    0.00 :   94c66:       setne  %r8b
    0.00 :   94c6a:       or     $0x1,%rdi
    0.00 :   94c6e:       add    $0x10,%rcx
    0.00 :   94c72:       shl    $0x2,%r8
    0.00 :   94c76:       or     %r8,%rdi
    0.00 :   94c79:       mov    %rdi,-0x8(%rcx)
    0.00 :   94c7d:       mov    %rsi,%rdi
    0.00 :   94c80:       or     $0x1,%rdi
    0.00 :   94c84:       mov    %rdi,0x8(%rax)
    0.00 :   94c88:       mov    0x358c9e(%rip),%eax        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   94c8e:       mov    %rsi,-0x10(%rcx,%rdx,1)
    0.00 :   94c93:       test   %eax,%eax
    0.00 :   94c95:       je     945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94c9b:       mov    0x8(%rsp),%rdx
    0.00 :   94ca0:       xor    $0xff,%al
    0.00 :   94ca2:       mov    %rcx,%rdi
    0.00 :   94ca5:       mov    %eax,%esi
    0.00 :   94ca7:       callq  211f0 <*ABS*+0x9ec40@plt>
    0.00 :   94cac:       mov    %rax,%rcx
    0.00 :   94caf:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94cb4:       nopl   0x0(%rax)
    0.00 :   94cb8:       movq   $0x0,0x20(%rsp)
    0.00 :   94cc1:       jmpq   946c9 <_IO_str_seekoff@@GLIBC_2.2.5+0x41d9>
    0.00 :   94cc6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   94cd0:       mov    %rax,0x28(%rax)
    0.00 :   94cd4:       mov    %rax,0x20(%rax)
    0.00 :   94cd8:       mov    %rdi,%r8
    0.00 :   94cdb:       jmpq   947d8 <_IO_str_seekoff@@GLIBC_2.2.5+0x42e8>
    0.00 :   94ce0:       add    $0x5b,%ecx
    0.00 :   94ce3:       jmpq   94778 <_IO_str_seekoff@@GLIBC_2.2.5+0x4288>
    0.00 :   94ce8:       nopl   0x0(%rax,%rax,1)
    0.00 :   94cf0:       mov    0x28(%rsp),%r9
    0.00 :   94cf5:       add    $0x1,%edx
    0.00 :   94cf8:       mov    %r10,0x18(%rax)
    0.00 :   94cfc:       mov    0x40(%r9),%r8
    0.00 :   94d00:       mov    %r8,0x10(%rax)
    0.00 :   94d04:       mov    %rcx,0x40(%r9)
    0.00 :   94d08:       mov    %rdi,%rax
    0.00 :   94d0b:       mov    %dl,(%r10,%r12,1)
    0.00 :   94d0f:       mov    $0x1,%r9d
    0.00 :   94d15:       jmpq   94708 <_IO_str_seekoff@@GLIBC_2.2.5+0x4218>
    0.00 :   94d1a:       nopw   0x0(%rax,%rax,1)
    0.00 :   94d20:       cmp    $0x4,%r11
    0.00 :   94d24:       cmova  %ebp,%r8d
    0.00 :   94d28:       mov    %r8d,0x14(%rsp)
    0.00 :   94d2d:       jmpq   94688 <_IO_str_seekoff@@GLIBC_2.2.5+0x4198>
    0.00 :   94d32:       nopw   0x0(%rax,%rax,1)
    0.00 :   94d38:       mov    0x3560b1(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94d3f:       lea    0x11eeb3(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94d46:       lea    0x12005d(%rip),%rdi        # 1b4daa <_libc_intl_domainname@@GLIBC_2.2.5+0x1116>
    0.00 :   94d4d:       mov    $0xf00,%r9d
    0.00 :   94d53:       mov    (%rax),%rdx
    0.00 :   94d56:       lea    0x11f0f3(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94d5d:       cmpb   $0x0,(%rdx)
    0.00 :   94d60:       cmovne %rax,%rcx
    0.00 :   94d64:       sub    $0x8,%rsp
    0.00 :   94d68:       push   %rdi
    0.00 :   94d69:       push   %rax
    0.00 :   94d6a:       lea    0x1242ff(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   94d71:       push   %rax
    0.00 :   94d72:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   94d77:       nopw   0x0(%rax,%rax,1)
    0.00 :   94d80:       mov    0x78(%rsp),%rdi
    0.00 :   94d85:       mov    0x8(%rdi),%rdi
    0.00 :   94d89:       test   $0x4,%dil
    0.00 :   94d8d:       jne    94edc <_IO_str_seekoff@@GLIBC_2.2.5+0x49ec>
    0.00 :   94d93:       mov    0x78(%rsp),%rbp
    0.00 :   94d98:       cmp    %rdi,%rdx
    0.00 :   94d9b:       jae    95020 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b30>
    0.00 :   94da1:       mov    0x20(%rbp),%rbp
    0.00 :   94da5:       mov    0x8(%rbp),%rdi
    0.00 :   94da9:       test   $0x4,%dil
    0.00 :   94dad:       je     94d98 <_IO_str_seekoff@@GLIBC_2.2.5+0x48a8>
    0.00 :   94daf:       mov    0x35603a(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94db6:       lea    0x11ee3c(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94dbd:       lea    0x120001(%rip),%rdi        # 1b4dc5 <_libc_intl_domainname@@GLIBC_2.2.5+0x1131>
    0.00 :   94dc4:       mov    $0xf11,%r9d
    0.00 :   94dca:       mov    (%rax),%rdx
    0.00 :   94dcd:       lea    0x11f07c(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94dd4:       cmpb   $0x0,(%rdx)
    0.00 :   94dd7:       cmovne %rax,%rcx
    0.00 :   94ddb:       sub    $0x8,%rsp
    0.00 :   94ddf:       push   %rdi
    0.00 :   94de0:       push   %rax
    0.00 :   94de1:       lea    0x124288(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   94de8:       push   %rax
    0.00 :   94de9:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   94dee:       xchg   %ax,%ax
    0.00 :   94df0:       lea    0x123d71(%rip),%rdi        # 1b8b68 <_libc_intl_domainname@@GLIBC_2.2.5+0x4ed4>
    0.00 :   94df7:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   94dfc:       nopl   0x0(%rax)
    0.00 :   94e00:       mov    0x18(%rax),%r11
    0.00 :   94e04:       orq    $0x1,0x8(%rax,%rbx,1)
    0.00 :   94e0a:       cmp    %r9,%r14
    0.00 :   94e0d:       je     94e14 <_IO_str_seekoff@@GLIBC_2.2.5+0x4924>
    0.00 :   94e0f:       orq    $0x4,0x8(%rax)
    0.00 :   94e14:       add    $0x1,%r10d
    0.00 :   94e18:       cmp    $0x3f,%rdi
    0.00 :   94e1c:       mov    %r11,0x8(%rsi)
    0.00 :   94e20:       mov    %rdx,0x10(%r11)
    0.00 :   94e24:       ja     94b9a <_IO_str_seekoff@@GLIBC_2.2.5+0x46aa>
    0.00 :   94e2a:       mov    0x40(%r12),%r13
    0.00 :   94e2f:       add    $0x10,%rax
    0.00 :   94e33:       mov    %r8,0x8(%rax)
    0.00 :   94e37:       mov    %r13,(%rax)
    0.00 :   94e3a:       mov    %rax,0x40(%r12)
    0.00 :   94e3f:       mov    %r11,%rax
    0.00 :   94e42:       mov    %r10b,(%r8,%rdi,1)
    0.00 :   94e46:       jmpq   948e5 <_IO_str_seekoff@@GLIBC_2.2.5+0x43f5>
    0.00 :   94e4b:       nopl   0x0(%rax,%rax,1)
    0.00 :   94e50:       mov    %rdx,%rcx
    0.00 :   94e53:       shr    $0xf,%rcx
    0.00 :   94e57:       cmp    $0x4,%rcx
    0.00 :   94e5b:       ja     94ec0 <_IO_str_seekoff@@GLIBC_2.2.5+0x49d0>
    0.00 :   94e5d:       add    $0x77,%ecx
    0.00 :   94e60:       jmpq   94778 <_IO_str_seekoff@@GLIBC_2.2.5+0x4288>
    0.00 :   94e65:       nopl   (%rax)
    0.00 :   94e68:       lea    0x123d21(%rip),%rdi        # 1b8b90 <_libc_intl_domainname@@GLIBC_2.2.5+0x4efc>
    0.00 :   94e6f:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   94e74:       nopl   0x0(%rax)
   14.11 :   94e78:       test   %r9d,%r9d
    0.00 :   94e7b:       je     94a5f <_IO_str_seekoff@@GLIBC_2.2.5+0x456f>
    0.00 :   94e81:       cmp    $0x3f,%r12
    0.00 :   94e85:       mov    0x38(%rsp),%rbp
    0.00 :   94e8a:       ja     9506a <_IO_str_seekoff@@GLIBC_2.2.5+0x4b7a>
    0.00 :   94e90:       mov    %fs:0x0(%rbp),%rax
    0.00 :   94e95:       lea    (%rax,%r12,8),%rdx
    0.00 :   94e99:       mov    0x40(%rdx),%rcx
    0.00 :   94e9d:       test   %rcx,%rcx
    0.00 :   94ea0:       je     95124 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c34>
    0.00 :   94ea6:       mov    (%rcx),%rsi
    0.00 :   94ea9:       mov    %rsi,0x40(%rdx)
    0.00 :   94ead:       subb   $0x1,(%rax,%r12,1)
    0.00 :   94eb2:       movq   $0x0,0x8(%rcx)
    0.00 :   94eba:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94ebf:       nop
    0.00 :   94ec0:       mov    %rdx,%rcx
    0.00 :   94ec3:       mov    $0x2,%edi
    0.00 :   94ec8:       shr    $0x12,%rcx
    0.00 :   94ecc:       cmp    $0x2,%rcx
    0.00 :   94ed0:       cmova  %rdi,%rcx
    0.00 :   94ed4:       add    $0x7c,%ecx
    0.00 :   94ed7:       jmpq   94778 <_IO_str_seekoff@@GLIBC_2.2.5+0x4288>
    0.00 :   94edc:       mov    0x355f0d(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94ee3:       lea    0x11ed0f(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94eea:       lea    0x11fed4(%rip),%rdi        # 1b4dc5 <_libc_intl_domainname@@GLIBC_2.2.5+0x1131>
    0.00 :   94ef1:       mov    $0xf0d,%r9d
    0.00 :   94ef7:       mov    (%rax),%rdx
    0.00 :   94efa:       lea    0x11ef4f(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94f01:       cmpb   $0x0,(%rdx)
    0.00 :   94f04:       cmovne %rax,%rcx
    0.00 :   94f08:       sub    $0x8,%rsp
    0.00 :   94f0c:       push   %rdi
    0.00 :   94f0d:       push   %rax
    0.00 :   94f0e:       lea    0x12415b(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   94f15:       push   %rax
    0.00 :   94f16:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   94f1b:       lea    0x1(%rdi),%eax
    0.00 :   94f1e:       cmp    $0x4,%eax
    0.00 :   94f21:       je     94f63 <_IO_str_seekoff@@GLIBC_2.2.5+0x4a73>
    0.00 :   94f23:       mov    %eax,%edx
    0.00 :   94f25:       mov    0x860(%r14,%rdx,4),%edx
    0.00 :   94f2d:       test   %edx,%edx
    0.00 :   94f2f:       jne    95051 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b61>
    0.00 :   94f35:       lea    0x2(%rdi),%eax
    0.00 :   94f38:       cmp    $0x4,%eax
    0.00 :   94f3b:       je     94f63 <_IO_str_seekoff@@GLIBC_2.2.5+0x4a73>
    0.00 :   94f3d:       mov    %eax,%edx
    0.00 :   94f3f:       mov    0x860(%r14,%rdx,4),%edx
    0.00 :   94f47:       test   %edx,%edx
    0.00 :   94f49:       jne    95051 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b61>
    0.00 :   94f4f:       cmp    $0x1,%edi
    0.00 :   94f52:       je     94f63 <_IO_str_seekoff@@GLIBC_2.2.5+0x4a73>
    0.00 :   94f54:       mov    0x86c(%r14),%edx
    0.00 :   94f5b:       test   %edx,%edx
    0.00 :   94f5d:       jne    9511a <_IO_str_seekoff@@GLIBC_2.2.5+0x4c2a>
    0.00 :   94f63:       mov    0x60(%r14),%rcx
    0.00 :   94f67:       lea    0x20(%rbx),%rax
    0.00 :   94f6b:       mov    0x8(%rcx),%rdx
    0.00 :   94f6f:       and    $0xfffffffffffffff8,%rdx
    0.00 :   94f73:       cmp    %rdx,%rax
    0.00 :   94f76:       jbe    95239 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d49>
    0.00 :   94f7c:       mov    %r11,0x18(%rsp)
    0.00 :   94f81:       mov    0x8(%r14),%eax
    0.00 :   94f85:       test   %eax,%eax
    0.00 :   94f87:       je     95175 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c85>
    0.00 :   94f8d:       mov    %r14,%rdi
    0.00 :   94f90:       callq  909e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0>
    0.00 :   94f95:       mov    0x48(%rsp),%eax
    0.00 :   94f99:       cmp    $0x3ff,%rbx
    0.00 :   94fa0:       mov    0x18(%rsp),%r11
    0.00 :   94fa5:       mov    %eax,0x14(%rsp)
    0.00 :   94fa9:       jbe    94fee <_IO_str_seekoff@@GLIBC_2.2.5+0x4afe>
    0.00 :   94fab:       cmpq   $0x30,0x40(%rsp)
    0.00 :   94fb1:       mov    0x4c(%rsp),%eax
    0.00 :   94fb5:       mov    %eax,0x14(%rsp)
    0.00 :   94fb9:       jbe    94fee <_IO_str_seekoff@@GLIBC_2.2.5+0x4afe>
    0.00 :   94fbb:       cmpq   $0x14,0x50(%rsp)
    0.00 :   94fc1:       mov    0x74(%rsp),%eax
    0.00 :   94fc5:       mov    %eax,0x14(%rsp)
    0.00 :   94fc9:       jbe    94fee <_IO_str_seekoff@@GLIBC_2.2.5+0x4afe>
    0.00 :   94fcb:       cmpq   $0xa,0x58(%rsp)
    0.00 :   94fd1:       mov    0x70(%rsp),%eax
    0.00 :   94fd5:       mov    %eax,0x14(%rsp)
    0.00 :   94fd9:       jbe    94fee <_IO_str_seekoff@@GLIBC_2.2.5+0x4afe>
    0.00 :   94fdb:       cmpq   $0x5,0x60(%rsp)
    0.00 :   94fe1:       mov    0x68(%rsp),%eax
    0.00 :   94fe5:       cmovb  0x6c(%rsp),%eax
    0.00 :   94fea:       mov    %eax,0x14(%rsp)
    0.00 :   94fee:       mov    0x38(%rsp),%rax
    0.00 :   94ff3:       mov    %fs:(%rax),%r10
    0.00 :   94ff7:       jmpq   946da <_IO_str_seekoff@@GLIBC_2.2.5+0x41ea>
    0.00 :   94ffc:       mov    0x18(%rsi),%rcx
    0.00 :   95000:       cmp    %rcx,%rsi
    0.00 :   95003:       jne    95082 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b92>
    0.00 :   95005:       mov    %eax,%ecx
    0.00 :   95007:       add    $0x10,%rsi
    0.00 :   9500b:       add    %eax,%eax
    0.00 :   9500d:       not    %ecx
    0.00 :   9500f:       and    %ecx,%edx
    0.00 :   95011:       mov    %edi,%ecx
    0.00 :   95013:       mov    %edx,0x860(%r14,%rcx,4)
    0.00 :   9501b:       jmpq   94ab2 <_IO_str_seekoff@@GLIBC_2.2.5+0x45c2>
    0.00 :   95020:       mov    %rbp,0x78(%rsp)
    0.00 :   95025:       mov    %rbp,%rdi
    0.00 :   95028:       je     9504b <_IO_str_seekoff@@GLIBC_2.2.5+0x4b5b>
    0.00 :   9502a:       mov    0x28(%rbp),%rdx
    0.00 :   9502e:       mov    %rbp,0x20(%rax)
    0.00 :   95032:       mov    %rdx,0x28(%rax)
    0.00 :   95036:       mov    %rax,0x28(%rbp)
    0.00 :   9503a:       mov    0x28(%rax),%rdx
    0.00 :   9503e:       mov    %rax,0x20(%rdx)
    0.00 :   95042:       mov    0x18(%rdi),%r8
    0.00 :   95046:       jmpq   947d8 <_IO_str_seekoff@@GLIBC_2.2.5+0x42e8>
    0.00 :   9504b:       mov    0x10(%rbp),%rdi
    0.00 :   9504f:       jmp    95042 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b52>
    0.00 :   95051:       mov    %eax,%edi
    0.00 :   95053:       mov    %edi,%eax
    0.00 :   95055:       shl    $0x6,%eax
    0.00 :   95058:       sub    $0x2,%eax
    0.00 :   9505b:       lea    0x60(%r14,%rax,8),%rsi
    0.00 :   95060:       mov    $0x1,%eax
    0.00 :   95065:       jmpq   94ac2 <_IO_str_seekoff@@GLIBC_2.2.5+0x45d2>
    0.00 :   9506a:       lea    0x123fdf(%rip),%rdx        # 1b9050 <_libc_intl_domainname@@GLIBC_2.2.5+0x53bc>
    0.00 :   95071:       lea    0x11fcbd(%rip),%rdi        # 1b4d35 <_libc_intl_domainname@@GLIBC_2.2.5+0x10a1>
    0.00 :   95078:       mov    $0xb86,%esi
    0.00 :   9507d:       callq  21379 <free@plt+0xb1>
    0.00 :   95082:       mov    0x8(%rcx),%r8
   11.53 :   95086:       mov    %r8,%rax
    0.00 :   95089:       and    $0xfffffffffffffff8,%rax
    0.00 :   9508d:       cmp    %rax,%rbx
    0.00 :   95090:       ja     9513c <_IO_str_seekoff@@GLIBC_2.2.5+0x4c4c>
    0.00 :   95096:       lea    (%rcx,%rax,1),%rsi
    0.00 :   9509a:       mov    %rax,%rdi
    0.00 :   9509d:       sub    %rbx,%rdi
    0.00 :   950a0:       cmp    %rax,(%rsi)
    0.00 :   950a3:       jne    95392 <_IO_str_seekoff@@GLIBC_2.2.5+0x4ea2>
    0.00 :   950a9:       mov    0x10(%rcx),%rax
    0.00 :   950ad:       mov    0x18(%rcx),%rdx
    0.00 :   950b1:       cmp    %rcx,0x18(%rax)
    0.00 :   950b5:       jne    9522d <_IO_str_seekoff@@GLIBC_2.2.5+0x4d3d>
    0.00 :   950bb:       cmp    %rcx,0x10(%rdx)
    0.00 :   950bf:       jne    9522d <_IO_str_seekoff@@GLIBC_2.2.5+0x4d3d>
    0.00 :   950c5:       cmp    $0x3ff,%r8
    0.00 :   950cc:       mov    %rdx,0x18(%rax)
    0.00 :   950d0:       mov    %rax,0x10(%rdx)
    0.00 :   950d4:       jbe    950e3 <_IO_str_seekoff@@GLIBC_2.2.5+0x4bf3>
    0.00 :   950d6:       mov    0x20(%rcx),%rdx
    0.00 :   950da:       test   %rdx,%rdx
    0.00 :   950dd:       jne    9539e <_IO_str_seekoff@@GLIBC_2.2.5+0x4eae>
    0.00 :   950e3:       cmp    $0x1f,%rdi
    0.00 :   950e7:       ja     951af <_IO_str_seekoff@@GLIBC_2.2.5+0x4cbf>
    0.00 :   950ed:       lea    0x356b4c(%rip),%rax        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   950f4:       orq    $0x1,0x8(%rsi)
    0.00 :   950f9:       cmp    %rax,%r14
    0.00 :   950fc:       je     95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   950fe:       orq    $0x4,0x8(%rcx)
    0.00 :   95103:       mov    0x358823(%rip),%eax        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   95109:       add    $0x10,%rcx
    0.00 :   9510d:       test   %eax,%eax
    0.00 :   9510f:       je     945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   95115:       jmpq   94c9b <_IO_str_seekoff@@GLIBC_2.2.5+0x47ab>
    0.00 :   9511a:       mov    $0x3,%edi
    0.00 :   9511f:       jmpq   95053 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b63>
    0.00 :   95124:       lea    0x123f25(%rip),%rdx        # 1b9050 <_libc_intl_domainname@@GLIBC_2.2.5+0x53bc>
    0.00 :   9512b:       lea    0x11fcaa(%rip),%rdi        # 1b4ddc <_libc_intl_domainname@@GLIBC_2.2.5+0x1148>
    0.00 :   95132:       mov    $0xb87,%esi
    0.00 :   95137:       callq  21379 <free@plt+0xb1>
    0.00 :   9513c:       mov    0x355cad(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   95143:       mov    (%rax),%rdx
    0.00 :   95146:       cmpb   $0x0,(%rdx)
    0.00 :   95149:       je     9519f <_IO_str_seekoff@@GLIBC_2.2.5+0x4caf>
    0.00 :   9514b:       lea    0x11ecfe(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   95152:       mov    %rax,%rcx
    0.00 :   95155:       lea    0x123a8c(%rip),%rdi        # 1b8be8 <_libc_intl_domainname@@GLIBC_2.2.5+0x4f54>
    0.00 :   9515c:       sub    $0x8,%rsp
    0.00 :   95160:       mov    $0xfc1,%r9d
    0.00 :   95166:       push   %rdi
    0.00 :   95167:       push   %rax
    0.00 :   95168:       lea    0x123f01(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   9516f:       push   %rax
    0.00 :   95170:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   95175:       mov    %r14,%rsi
    0.00 :   95178:       mov    %rbx,%rdi
    0.00 :   9517b:       callq  93b20 <_IO_str_seekoff@@GLIBC_2.2.5+0x3630>
    0.00 :   95180:       test   %rax,%rax
    0.00 :   95183:       mov    %rax,%rcx
    0.00 :   95186:       je     94b6e <_IO_str_seekoff@@GLIBC_2.2.5+0x467e>
    0.00 :   9518c:       mov    0x35879a(%rip),%eax        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   95192:       test   %eax,%eax
    0.00 :   95194:       je     945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   9519a:       jmpq   94c9b <_IO_str_seekoff@@GLIBC_2.2.5+0x47ab>
    0.00 :   9519f:       lea    0x11ea53(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   951a6:       lea    0x11eca3(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   951ad:       jmp    95155 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c65>
    0.00 :   951af:       mov    0x70(%r14),%rdx
    0.00 :   951b3:       lea    (%rcx,%rbx,1),%rax
    0.00 :   951b7:       cmp    %r13,0x18(%rdx)
    0.00 :   951bb:       jne    953c6 <_IO_str_seekoff@@GLIBC_2.2.5+0x4ed6>
    0.00 :   951c1:       cmp    $0x3ff,%rbx
    0.00 :   951c8:       mov    %r13,0x18(%rax)
    0.00 :   951cc:       mov    %rdx,0x10(%rax)
    0.00 :   951d0:       mov    %rax,0x70(%r14)
    0.00 :   951d4:       mov    %rax,0x18(%rdx)
    0.00 :   951d8:       ja     951de <_IO_str_seekoff@@GLIBC_2.2.5+0x4cee>
    0.00 :   951da:       mov    %rax,0x68(%r14)
    0.00 :   951de:       cmp    $0x3ff,%rdi
    0.00 :   951e5:       jbe    951f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d07>
    0.00 :   951e7:       movq   $0x0,0x20(%rax)
    0.00 :   951ef:       movq   $0x0,0x28(%rax)
    0.00 :   951f7:       lea    0x356a42(%rip),%rdx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   951fe:       xor    %r8d,%r8d
    0.00 :   95201:       cmp    %rdx,%r14
    0.00 :   95204:       setne  %r8b
    0.00 :   95208:       or     $0x1,%rbx
    0.00 :   9520c:       shl    $0x2,%r8
    0.00 :   95210:       mov    %rbx,%rdx
    0.00 :   95213:       or     %r8,%rdx
    0.00 :   95216:       mov    %rdx,0x8(%rcx)
    0.00 :   9521a:       mov    %rdi,%rdx
    0.00 :   9521d:       or     $0x1,%rdx
    0.00 :   95221:       mov    %rdx,0x8(%rax)
    0.00 :   95225:       mov    %rdi,(%rsi)
    0.00 :   95228:       jmpq   95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   9522d:       lea    0x11fa06(%rip),%rdi        # 1b4c3a <_libc_intl_domainname@@GLIBC_2.2.5+0xfa6>
    0.00 :   95234:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   95239:       mov    %rdx,%rax
    0.00 :   9523c:       lea    0x3569fd(%rip),%rdx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   95243:       xor    %esi,%esi
    0.00 :   95245:       sub    %rbx,%rax
    0.00 :   95248:       lea    (%rcx,%rbx,1),%rdi
    0.00 :   9524c:       cmp    %rdx,%r14
    0.00 :   9524f:       setne  %sil
    0.00 :   95253:       or     $0x1,%rbx
    0.00 :   95257:       or     $0x1,%rax
    0.00 :   9525b:       shl    $0x2,%rsi
    0.00 :   9525f:       mov    %rbx,%rdx
    0.00 :   95262:       mov    %rdi,0x60(%r14)
    0.00 :   95266:       or     %rsi,%rdx
    0.00 :   95269:       mov    %rdx,0x8(%rcx)
    0.00 :   9526d:       mov    %rax,0x8(%rdi)
    0.00 :   95271:       jmpq   95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   95276:       mov    0x28(%rdx),%rcx
    0.00 :   9527a:       jmp    95280 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d90>
    0.00 :   9527c:       mov    0x28(%rcx),%rcx
    0.00 :   95280:       mov    0x8(%rcx),%rdx
    0.00 :   95284:       mov    %rdx,%rsi
    0.00 :   95287:       and    $0xfffffffffffffff8,%rsi
    0.00 :   9528b:       cmp    %rsi,%rbx
    0.00 :   9528e:       ja     9527c <_IO_str_seekoff@@GLIBC_2.2.5+0x4d8c>
    0.00 :   95290:       cmp    %rcx,0x8(%rax)
    0.00 :   95294:       je     952a2 <_IO_str_seekoff@@GLIBC_2.2.5+0x4db2>
    0.00 :   95296:       mov    0x10(%rcx),%rax
    0.00 :   9529a:       cmp    0x8(%rax),%rdx
    0.00 :   9529e:       cmove  %rax,%rcx
    0.00 :   952a2:       mov    0x8(%rcx),%r8
    0.00 :   952a6:       mov    %rsi,%rdi
    0.00 :   952a9:       sub    %rbx,%rdi
    0.00 :   952ac:       mov    %r8,%rax
    0.00 :   952af:       and    $0xfffffffffffffff8,%rax
    0.00 :   952b3:       cmp    (%rcx,%rax,1),%rax
    0.00 :   952b7:       jne    95392 <_IO_str_seekoff@@GLIBC_2.2.5+0x4ea2>
    0.00 :   952bd:       mov    0x10(%rcx),%rax
    0.00 :   952c1:       mov    0x18(%rcx),%rdx
    0.00 :   952c5:       cmp    %rcx,0x18(%rax)
    0.00 :   952c9:       jne    9522d <_IO_str_seekoff@@GLIBC_2.2.5+0x4d3d>
    0.00 :   952cf:       cmp    %rcx,0x10(%rdx)
    0.00 :   952d3:       jne    9522d <_IO_str_seekoff@@GLIBC_2.2.5+0x4d3d>
    0.00 :   952d9:       cmp    $0x3ff,%r8
    0.00 :   952e0:       mov    %rdx,0x18(%rax)
    0.00 :   952e4:       mov    %rax,0x10(%rdx)
    0.00 :   952e8:       jbe    952f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e07>
    0.00 :   952ea:       mov    0x20(%rcx),%rdx
    0.00 :   952ee:       test   %rdx,%rdx
    0.00 :   952f1:       jne    953d2 <_IO_str_seekoff@@GLIBC_2.2.5+0x4ee2>
    0.00 :   952f7:       cmp    $0x1f,%rdi
    0.00 :   952fb:       ja     95318 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e28>
    0.00 :   952fd:       lea    0x35693c(%rip),%rax        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   95304:       orq    $0x1,0x8(%rcx,%rsi,1)
    0.00 :   9530a:       cmp    %rax,%r14
    0.00 :   9530d:       jne    950fe <_IO_str_seekoff@@GLIBC_2.2.5+0x4c0e>
    0.00 :   95313:       jmpq   95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   95318:       mov    0x70(%r14),%rdx
    0.00 :   9531c:       cmp    %r13,0x18(%rdx)
    0.00 :   95320:       jne    95386 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e96>
    0.00 :   95322:       lea    (%rcx,%rbx,1),%rax
    0.00 :   95326:       cmp    $0x3ff,%rdi
    0.00 :   9532d:       mov    %r13,0x18(%rax)
    0.00 :   95331:       mov    %rdx,0x10(%rax)
    0.00 :   95335:       mov    %rax,0x70(%r14)
    0.00 :   95339:       mov    %rax,0x18(%rdx)
    0.00 :   9533d:       jbe    9534f <_IO_str_seekoff@@GLIBC_2.2.5+0x4e5f>
    0.00 :   9533f:       movq   $0x0,0x20(%rax)
    0.00 :   95347:       movq   $0x0,0x28(%rax)
    0.00 :   9534f:       lea    0x3568ea(%rip),%rdx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   95356:       xor    %r8d,%r8d
    0.00 :   95359:       cmp    %rdx,%r14
    0.00 :   9535c:       setne  %r8b
    0.00 :   95360:       or     $0x1,%rbx
    0.00 :   95364:       shl    $0x2,%r8
    0.00 :   95368:       mov    %rbx,%rdx
    0.00 :   9536b:       or     %r8,%rdx
    0.00 :   9536e:       mov    %rdx,0x8(%rcx)
    0.00 :   95372:       mov    %rdi,%rdx
    0.00 :   95375:       or     $0x1,%rdx
    0.00 :   95379:       mov    %rdx,0x8(%rax)
    0.00 :   9537d:       mov    %rdi,(%rcx,%rsi,1)
    0.00 :   95381:       jmpq   95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   95386:       lea    0x123833(%rip),%rdi        # 1b8bc0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4f2c>
    0.00 :   9538d:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   95392:       lea    0x11f884(%rip),%rdi        # 1b4c1d <_libc_intl_domainname@@GLIBC_2.2.5+0xf89>
    0.00 :   95399:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9539e:       cmp    %rcx,0x28(%rdx)
    0.00 :   953a2:       jne    9541c <_IO_str_seekoff@@GLIBC_2.2.5+0x4f2c>
    0.00 :   953a4:       mov    0x28(%rcx),%r8
    0.00 :   953a8:       cmp    %rcx,0x20(%r8)
    0.00 :   953ac:       jne    9541c <_IO_str_seekoff@@GLIBC_2.2.5+0x4f2c>
    0.00 :   953ae:       cmpq   $0x0,0x20(%rax)
    0.00 :   953b3:       je     953fa <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0a>
    0.00 :   953b5:       mov    %r8,0x28(%rdx)
    0.00 :   953b9:       mov    0x28(%rcx),%rax
    0.00 :   953bd:       mov    %rdx,0x20(%rax)
    0.00 :   953c1:       jmpq   950e3 <_IO_str_seekoff@@GLIBC_2.2.5+0x4bf3>
    0.00 :   953c6:       lea    0x12384b(%rip),%rdi        # 1b8c18 <_libc_intl_domainname@@GLIBC_2.2.5+0x4f84>
    0.00 :   953cd:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   953d2:       cmp    %rcx,0x28(%rdx)
    0.00 :   953d6:       jne    9541c <_IO_str_seekoff@@GLIBC_2.2.5+0x4f2c>
    0.00 :   953d8:       mov    0x28(%rcx),%r8
    0.00 :   953dc:       cmp    %rcx,0x20(%r8)
    0.00 :   953e0:       jne    9541c <_IO_str_seekoff@@GLIBC_2.2.5+0x4f2c>
    0.00 :   953e2:       cmpq   $0x0,0x20(%rax)
    0.00 :   953e7:       je     95428 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f38>
    0.00 :   953e9:       mov    %r8,0x28(%rdx)
    0.00 :   953ed:       mov    0x28(%rcx),%rax
    0.00 :   953f1:       mov    %rdx,0x20(%rax)
    0.00 :   953f5:       jmpq   952f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e07>
    0.00 :   953fa:       cmp    %rcx,%rdx
    0.00 :   953fd:       je     9544a <_IO_str_seekoff@@GLIBC_2.2.5+0x4f5a>
    0.00 :   953ff:       mov    %rdx,0x20(%rax)
    0.00 :   95403:       mov    0x20(%rcx),%rdx
    0.00 :   95407:       mov    %r8,0x28(%rax)
    0.00 :   9540b:       mov    %rax,0x28(%rdx)
    0.00 :   9540f:       mov    0x28(%rcx),%rdx
    0.00 :   95413:       mov    %rax,0x20(%rdx)
    0.00 :   95417:       jmpq   950e3 <_IO_str_seekoff@@GLIBC_2.2.5+0x4bf3>
    0.00 :   9541c:       lea    0x122f75(%rip),%rdi        # 1b8398 <_libc_intl_domainname@@GLIBC_2.2.5+0x4704>
    0.00 :   95423:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   95428:       cmp    %rcx,%rdx
    0.00 :   9542b:       je     95457 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f67>
    0.00 :   9542d:       mov    %rdx,0x20(%rax)
    0.00 :   95431:       mov    0x20(%rcx),%rdx
    0.00 :   95435:       mov    %r8,0x28(%rax)
    0.00 :   95439:       mov    %rax,0x28(%rdx)
    0.00 :   9543d:       mov    0x28(%rcx),%rdx
    0.00 :   95441:       mov    %rax,0x20(%rdx)
    0.00 :   95445:       jmpq   952f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e07>
    0.00 :   9544a:       mov    %rax,0x28(%rax)
    0.00 :   9544e:       mov    %rax,0x20(%rax)
    0.00 :   95452:       jmpq   950e3 <_IO_str_seekoff@@GLIBC_2.2.5+0x4bf3>
    0.00 :   95457:       mov    %rax,0x28(%rax)
    0.00 :   9545b:       mov    %rax,0x20(%rax)
    0.00 :   9545f:       jmpq   952f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e07>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006b4770 <MlasComputeSoftmaxThreaded(void*, int)>:
         :            _Z26MlasComputeSoftmaxThreadedPvi():
   33.43 :   6b4770:       push   %r15
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b4772:       xor    %edx,%edx
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b4774:       push   %r14
    0.00 :   6b4776:       push   %r13
    0.00 :   6b4778:       push   %r12
    0.00 :   6b477a:       push   %rbp
    0.00 :   6b477b:       movslq %esi,%rbp
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b477e:       mov    %esi,%esi
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b4780:       push   %rbx
    0.00 :   6b4781:       sub    $0x48,%rsp
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b4785:       movslq (%rdi),%rcx
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b4788:       mov    %fs:0x28,%rax
    0.00 :   6b4791:       mov    %rax,0x38(%rsp)
    0.00 :   6b4796:       xor    %eax,%eax
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b4798:       mov    0x18(%rdi),%rax
    0.00 :   6b479c:       div    %rcx
    0.00 :   6b479f:       mov    %rax,%r12
    0.00 :   6b47a2:       cmp    %rsi,%rdx
    0.00 :   6b47a5:       jbe    6b48d0 <MlasComputeSoftmaxThreaded(void*, int)+0x160>
    0.00 :   6b47ab:       add    $0x1,%r12
    0.00 :   6b47af:       imul   %r12,%rbp
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b47b3:       mov    0x20(%rdi),%r13
    0.00 :   6b47b7:       movzbl 0x4(%rdi),%eax
    0.00 :   6b47bb:       mov    0x8(%rdi),%rbx
    0.00 :   6b47bf:       lea    0x0(,%r13,4),%r15
    0.00 :   6b47c7:       mov    %al,0xf(%rsp)
    0.00 :   6b47cb:       imul   %r15,%rbp
    0.00 :   6b47cf:       add    %rbp,%rbx
    0.00 :   6b47d2:       add    0x10(%rdi),%rbp
    0.00 :   6b47d6:       test   %r12,%r12
    0.00 :   6b47d9:       je     6b48a7 <MlasComputeSoftmaxThreaded(void*, int)+0x137>
    0.00 :   6b47df:       lea    0x2c(%rsp),%rax
    0.00 :   6b47e4:       lea    0x576755(%rip),%r14        # c2af40 <MlasPlatform>
    0.00 :   6b47eb:       mov    %rax,0x10(%rsp)
    0.00 :   6b47f0:       lea    0x30(%rsp),%rax
    0.00 :   6b47f5:       mov    %rax,0x18(%rsp)
    0.00 :   6b47fa:       jmp    6b483f <MlasComputeSoftmaxThreaded(void*, int)+0xcf>
    0.00 :   6b47fc:       nopl   0x0(%rax)
    0.00 :   6b4800:       mov    %rbx,%rdi
    0.00 :   6b4803:       xor    %esi,%esi
    0.00 :   6b4805:       callq  *%rax
    0.00 :   6b4807:       movss  0x2c(%rsp),%xmm1
    0.00 :   6b480d:       movss  %xmm1,0x30(%rsp)
         :            using ::log;
         :
         :            #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
         :            inline _GLIBCXX_CONSTEXPR float
         :            log(float __x)
         :            { return __builtin_logf(__x); }
    0.00 :   6b4813:       callq  53d90 <logf@plt>
    0.00 :   6b4818:       mov    %rbp,%rsi
    0.00 :   6b481b:       mov    %rbx,%rdi
    0.00 :   6b481e:       mov    0x18(%rsp),%rcx
    0.00 :   6b4823:       movss  %xmm0,0x34(%rsp)
    0.00 :   6b4829:       mov    %r13,%rdx
    0.00 :   6b482c:       add    %r15,%rbx
    0.00 :   6b482f:       add    %r15,%rbp
    0.00 :   6b4832:       callq  *0xd8(%r14)
    0.00 :   6b4839:       sub    $0x1,%r12
    0.00 :   6b483d:       je     6b48a7 <MlasComputeSoftmaxThreaded(void*, int)+0x137>
    0.00 :   6b483f:       mov    %r13,%rsi
    0.00 :   6b4842:       mov    %rbx,%rdi
    0.00 :   6b4845:       callq  *0xe0(%r14)
    0.00 :   6b484c:       cmpb   $0x0,0xf(%rsp)
    0.00 :   6b4851:       mov    %r13,%rdx
    0.00 :   6b4854:       xorps  0x1955f5(%rip),%xmm0        # 849e50 <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0xd0>
    0.00 :   6b485b:       mov    0xc8(%r14),%rax
   31.23 :   6b4862:       mov    0x10(%rsp),%rcx
    0.00 :   6b4867:       movss  %xmm0,0x2c(%rsp)
    0.00 :   6b486d:       jne    6b4800 <MlasComputeSoftmaxThreaded(void*, int)+0x90>
    0.00 :   6b486f:       mov    %rbp,%rsi
    0.00 :   6b4872:       mov    %rbx,%rdi
    0.00 :   6b4875:       add    %r15,%rbx
    0.00 :   6b4878:       callq  *%rax
    0.00 :   6b487a:       movss  0x172522(%rip),%xmm2        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   6b4882:       mov    %rbp,%rdi
    0.00 :   6b4885:       mov    %r13,%rsi
    0.00 :   6b4888:       mov    0x18(%rsp),%rdx
    0.00 :   6b488d:       add    %r15,%rbp
    0.00 :   6b4890:       divss  %xmm0,%xmm2
    0.00 :   6b4894:       movss  %xmm2,0x30(%rsp)
   35.35 :   6b489a:       callq  *0xd0(%r14)
    0.00 :   6b48a1:       sub    $0x1,%r12
    0.00 :   6b48a5:       jne    6b483f <MlasComputeSoftmaxThreaded(void*, int)+0xcf>
    0.00 :   6b48a7:       mov    0x38(%rsp),%rax
    0.00 :   6b48ac:       xor    %fs:0x28,%rax
    0.00 :   6b48b5:       jne    6b48dc <MlasComputeSoftmaxThreaded(void*, int)+0x16c>
    0.00 :   6b48b7:       add    $0x48,%rsp
    0.00 :   6b48bb:       pop    %rbx
    0.00 :   6b48bc:       pop    %rbp
    0.00 :   6b48bd:       pop    %r12
    0.00 :   6b48bf:       pop    %r13
    0.00 :   6b48c1:       pop    %r14
    0.00 :   6b48c3:       pop    %r15
    0.00 :   6b48c5:       retq
    0.00 :   6b48c6:       nopw   %cs:0x0(%rax,%rax,1)
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b48d0:       imul   %rax,%rbp
    0.00 :   6b48d4:       add    %rdx,%rbp
    0.00 :   6b48d7:       jmpq   6b47b3 <MlasComputeSoftmaxThreaded(void*, int)+0x43>
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b48dc:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005f2670 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const>:
         :            _ZNK11onnxruntime11TensorShape10SizeHelperEmm():
    0.00 :   5f2670:       cmp    %rdx,%rsi
    0.00 :   5f2673:       jae    5f2721 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb1>
    0.00 :   5f2679:       mov    (%rdi),%r9
    0.00 :   5f267c:       movslq %esi,%rax
   31.57 :   5f267f:       mov    (%r9,%rax,8),%rdi
   38.75 :   5f2683:       test   %rdi,%rdi
    0.00 :   5f2686:       js     5f2710 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xa0>
    0.00 :   5f268c:       mov    $0x1,%eax
    0.00 :   5f2691:       jmp    5f26e3 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x73>
    0.00 :   5f2693:       nopl   0x0(%rax,%rax,1)
    0.00 :   5f2698:       test   %r8,%r8
    0.00 :   5f269b:       je     5f2707 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x97>
    0.00 :   5f269d:       mov    %r8,%rcx
    0.00 :   5f26a0:       mov    %eax,%r10d
    0.00 :   5f26a3:       imul   %rax,%rcx
    0.00 :   5f26a7:       test   %rcx,%rcx
    0.00 :   5f26aa:       je     5f2707 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x97>
    0.00 :   5f26ac:       mov    %rcx,%r11
    0.00 :   5f26af:       shr    $0x20,%r11
    0.00 :   5f26b3:       jne    5f2727 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb7>
    0.00 :   5f26b5:       mov    %eax,%eax
    0.00 :   5f26b7:       mov    %edi,%edi
    0.00 :   5f26b9:       shl    $0x20,%rcx
    0.00 :   5f26bd:       imul   %rdi,%rax
    0.00 :   5f26c1:       add    %rax,%rcx
    0.00 :   5f26c4:       jb     5f2727 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb7>
    0.00 :   5f26c6:       mov    %rcx,%rax
    0.00 :   5f26c9:       test   %rcx,%rcx
    0.00 :   5f26cc:       js     5f2727 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb7>
    0.00 :   5f26ce:       add    $0x1,%rsi
    0.00 :   5f26d2:       cmp    %rsi,%rdx
    0.00 :   5f26d5:       je     5f2720 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb0>
    0.00 :   5f26d7:       movslq %esi,%rcx
    0.00 :   5f26da:       mov    (%r9,%rcx,8),%rdi
    0.00 :   5f26de:       test   %rdi,%rdi
    0.00 :   5f26e1:       js     5f2710 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xa0>
    0.00 :   5f26e3:       mov    %rdi,%r8
    0.00 :   5f26e6:       mov    %rax,%rcx
    0.00 :   5f26e9:       mov    %rax,%r10
    0.00 :   5f26ec:       shr    $0x20,%r8
   29.68 :   5f26f0:       shr    $0x20,%rcx
    0.00 :   5f26f4:       je     5f2698 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x28>
    0.00 :   5f26f6:       test   %r8,%r8
    0.00 :   5f26f9:       jne    5f2727 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb7>
    0.00 :   5f26fb:       imul   %rdi,%rcx
    0.00 :   5f26ff:       mov    %eax,%r10d
    0.00 :   5f2702:       test   %rcx,%rcx
    0.00 :   5f2705:       jne    5f26ac <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x3c>
    0.00 :   5f2707:       mov    %edi,%ecx
    0.00 :   5f2709:       imul   %r10,%rcx
    0.00 :   5f270d:       jmp    5f26c6 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x56>
    0.00 :   5f270f:       nop
    0.00 :   5f2710:       mov    $0xffffffffffffffff,%rax
    0.00 :   5f2717:       retq
    0.00 :   5f2718:       nopl   0x0(%rax,%rax,1)
    0.00 :   5f2720:       retq
    0.00 :   5f2721:       mov    $0x1,%eax
    0.00 :   5f2726:       retq
    0.00 :   5f2727:       sub    $0x8,%rsp
    0.00 :   5f272b:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005b1f40 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const>:
         :            _ZNK11onnxruntime18IExecutionProvider12GetAllocatorEi10OrtMemType():
   37.82 :   5b1f40:       shl    $0x2,%edx
    0.00 :   5b1f43:       add    $0x2,%ecx
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            find(const key_type& __k) const
         :            -> const_iterator
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   5b1f46:       mov    0x30(%rsi),%r8
    0.00 :   5b1f4a:       or     %edx,%ecx
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   5b1f4c:       xor    %edx,%edx
         :
         :            /// Explicit specialization for short.
         :            _Cxx_hashtable_define_trivial_hash(short)
         :
         :            /// Explicit specialization for int.
         :            _Cxx_hashtable_define_trivial_hash(int)
    0.00 :   5b1f4e:       movslq %ecx,%rax
    0.00 :   5b1f51:       div    %r8
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __n, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__n];
    0.00 :   5b1f54:       mov    0x28(%rsi),%rax
    0.00 :   5b1f58:       mov    (%rax,%rdx,8),%r9
    0.00 :   5b1f5c:       mov    %rdx,%r11
         :            if (!__prev_p)
    0.00 :   5b1f5f:       test   %r9,%r9
    0.00 :   5b1f62:       je     5b1fc8 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x88>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   5b1f64:       mov    (%r9),%rsi
    0.00 :   5b1f67:       mov    0x8(%rsi),%r10d
   32.25 :   5b1f6b:       jmp    5b1f8f <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x4f>
    0.00 :   5b1f6d:       nopl   (%rax)
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   5b1f70:       mov    (%rsi),%rax
    0.00 :   5b1f73:       test   %rax,%rax
    0.00 :   5b1f76:       je     5b1fc8 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x88>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   5b1f78:       mov    0x8(%rax),%r10d
         :            { return __num % __den; }
    0.00 :   5b1f7c:       mov    %rsi,%r9
    0.00 :   5b1f7f:       xor    %edx,%edx
    0.00 :   5b1f81:       mov    %rax,%rsi
    0.00 :   5b1f84:       movslq %r10d,%rax
    0.00 :   5b1f87:       div    %r8
    0.00 :   5b1f8a:       cmp    %rdx,%r11
    0.00 :   5b1f8d:       jne    5b1fc8 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x88>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   5b1f8f:       cmp    %ecx,%r10d
    0.00 :   5b1f92:       jne    5b1f70 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x30>
         :            return static_cast<__node_type*>(__before_n->_M_nxt);
    0.00 :   5b1f94:       mov    (%r9),%rax
         :            return __p ? const_iterator(__p) : end();
    0.00 :   5b1f97:       test   %rax,%rax
    0.00 :   5b1f9a:       je     5b1fc8 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x88>
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5b1f9c:       mov    0x10(%rax),%rdx
         :            : _M_pi(__r._M_pi)
    0.00 :   5b1fa0:       mov    0x18(%rax),%rax
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5b1fa4:       mov    %rdx,(%rdi)
         :            : _M_pi(__r._M_pi)
    0.00 :   5b1fa7:       mov    %rax,0x8(%rdi)
         :            if (_M_pi != 0)
    0.00 :   5b1fab:       test   %rax,%rax
    0.00 :   5b1fae:       je     5b1fbf <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x7f>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5b1fb0:       cmpq   $0x0,0x675f50(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5b1fb8:       je     5b1fe0 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0xa0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5b1fba:       lock addl $0x1,0x8(%rax)
   29.93 :   5b1fbf:       mov    %rdi,%rax
    0.00 :   5b1fc2:       retq
    0.00 :   5b1fc3:       nopl   0x0(%rax,%rax,1)
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5b1fc8:       movq   $0x0,(%rdi)
    0.00 :   5b1fcf:       mov    %rdi,%rax
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5b1fd2:       movq   $0x0,0x8(%rdi)
    0.00 :   5b1fda:       retq
    0.00 :   5b1fdb:       nopl   0x0(%rax,%rax,1)
         :            { *__mem += __val; }
    0.00 :   5b1fe0:       addl   $0x1,0x8(%rax)
    0.00 :   5b1fe4:       mov    %rdi,%rax
    0.00 :   5b1fe7:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (4 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005aed90 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)>:
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aed90:       push   %r15
    0.00 :   5aed92:       mov    %rsi,%r15
    0.00 :   5aed95:       push   %r14
    0.00 :   5aed97:       mov    %rdx,%r14
    0.00 :   5aed9a:       push   %r13
    0.00 :   5aed9c:       mov    %rdi,%r13
    0.00 :   5aed9f:       push   %r12
    0.00 :   5aeda1:       push   %rbp
    0.00 :   5aeda2:       mov    %ecx,%ebp
    0.00 :   5aeda4:       push   %rbx
    0.00 :   5aeda5:       sub    $0x208,%rsp
    0.00 :   5aedac:       mov    0x48(%rsi),%rdi
    0.00 :   5aedb0:       mov    %r8,(%rsp)
    0.00 :   5aedb4:       mov    %r9,0x10(%rsp)
    0.00 :   5aedb9:       mov    %fs:0x28,%rax
    0.00 :   5aedc2:       mov    %rax,0x1f8(%rsp)
    0.00 :   5aedca:       xor    %eax,%eax
    0.00 :   5aedcc:       callq  5d95c0 <onnxruntime::SessionState::GetExecutionPlan() const>
    0.00 :   5aedd1:       test   %ebp,%ebp
    0.00 :   5aedd3:       js     5af9af <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc1f>
    0.00 :   5aedd9:       mov    0x8(%rax),%rcx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5aeddd:       mov    0x10(%rax),%rdx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aede1:       movslq %ebp,%r9
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5aede4:       movabs $0xaaaaaaaaaaaaaaab,%rax
    0.00 :   5aedee:       sub    %rcx,%rdx
    0.00 :   5aedf1:       sar    $0x5,%rdx
    0.00 :   5aedf5:       imul   %rax,%rdx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aedf9:       cmp    %rdx,%r9
    0.00 :   5aedfc:       jae    5af9af <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc1f>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5aee02:       lea    (%r9,%r9,2),%rbx
    0.00 :   5aee06:       shl    $0x5,%rbx
    0.00 :   5aee0a:       add    %rcx,%rbx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aee0d:       mov    0x8(%rbx),%r12
   74.88 :   5aee11:       test   %r12,%r12
    0.00 :   5aee14:       je     5aef10 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x180>
    0.00 :   5aee1a:       lea    0x10(%rbx),%rax
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            find(const key_type& __k)
         :            -> iterator
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   5aee1e:       mov    0x58(%r15),%rsi
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   5aee22:       xor    %edx,%edx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aee24:       mov    %rax,0x8(%rsp)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5aee29:       mov    %r9,%rax
    0.00 :   5aee2c:       div    %rsi
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __n, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__n];
    0.00 :   5aee2f:       mov    0x50(%r15),%rax
    0.00 :   5aee33:       mov    (%rax,%rdx,8),%r8
    0.00 :   5aee37:       mov    %rdx,%r9
         :            if (!__prev_p)
    0.00 :   5aee3a:       test   %r8,%r8
    0.00 :   5aee3d:       je     5aeff0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x260>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   5aee43:       mov    (%r8),%rcx
    0.00 :   5aee46:       mov    0x8(%rcx),%edi
    0.00 :   5aee49:       jmp    5aee76 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xe6>
    0.00 :   5aee4b:       nopl   0x0(%rax,%rax,1)
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   5aee50:       mov    (%rcx),%rax
    0.00 :   5aee53:       test   %rax,%rax
    0.00 :   5aee56:       je     5aeff0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x260>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   5aee5c:       mov    0x8(%rax),%edi
         :            { return __num % __den; }
    0.00 :   5aee5f:       mov    %rcx,%r8
    0.00 :   5aee62:       xor    %edx,%edx
    0.00 :   5aee64:       mov    %rax,%rcx
         :
         :            /// Explicit specialization for short.
         :            _Cxx_hashtable_define_trivial_hash(short)
         :
         :            /// Explicit specialization for int.
         :            _Cxx_hashtable_define_trivial_hash(int)
    0.00 :   5aee67:       movslq %edi,%rax
    0.00 :   5aee6a:       div    %rsi
    0.00 :   5aee6d:       cmp    %rdx,%r9
    0.00 :   5aee70:       jne    5aeff0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x260>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   5aee76:       cmp    %ebp,%edi
    0.00 :   5aee78:       jne    5aee50 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc0>
         :            return static_cast<__node_type*>(__before_n->_M_nxt);
    0.00 :   5aee7a:       mov    (%r8),%rax
         :            return __p ? iterator(__p) : end();
    0.00 :   5aee7d:       test   %rax,%rax
    0.00 :   5aee80:       je     5aeff0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x260>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aee86:       cmpq   $0x0,(%rsp)
    0.00 :   5aee8b:       je     5afa51 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xcc1>
    0.00 :   5aee91:       movb   $0x0,0x30(%rsp)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            template<typename _Res, typename... _ArgTypes>
         :            _Res
         :            function<_Res(_ArgTypes...)>::
         :            operator()(_ArgTypes... __args) const
         :            {
         :            if (_M_empty())
    0.00 :   5aee96:       cmpq   $0x0,0x20(%rax)
    0.00 :   5aee9b:       je     5afa4c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xcbc>
         :            __throw_bad_function_call();
         :            return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    0.00 :   5aeea1:       lea    0x40(%rsp),%rsi
    0.00 :   5aeea6:       lea    0x30(%rsp),%r9
    0.00 :   5aeeab:       mov    %r14,%r8
    0.00 :   5aeeae:       mov    (%rsp),%rdx
    0.00 :   5aeeb2:       mov    %rsi,%rdi
    0.00 :   5aeeb5:       mov    0x8(%rsp),%rcx
    0.00 :   5aeeba:       lea    0x10(%rax),%rsi
    0.00 :   5aeebe:       callq  *0x28(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aeec1:       cmpb   $0x0,0x30(%rsp)
    0.00 :   5aeec6:       mov    0x40(%rsp),%rax
    0.00 :   5aeecb:       jne    5aeed6 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x146>
    0.00 :   5aeecd:       test   %rax,%rax
    0.00 :   5aeed0:       je     5af120 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x390>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5aeed6:       mov    %rax,0x0(%r13)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aeeda:       mov    0x1f8(%rsp),%rsi
    0.00 :   5aeee2:       xor    %fs:0x28,%rsi
    0.00 :   5aeeeb:       mov    %r13,%rax
    0.00 :   5aeeee:       jne    5afa47 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xcb7>
    0.00 :   5aeef4:       add    $0x208,%rsp
    0.00 :   5aeefb:       pop    %rbx
    0.00 :   5aeefc:       pop    %rbp
    0.00 :   5aeefd:       pop    %r12
    0.00 :   5aeeff:       pop    %r13
    0.00 :   5aef01:       pop    %r14
    0.00 :   5aef03:       pop    %r15
    0.00 :   5aef05:       retq
    0.00 :   5aef06:       nopw   %cs:0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :
         :            // DR 1261.
         :            inline string
         :            to_string(int __val)
         :            { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
         :            "%d", __val); }
    0.00 :   5aef10:       lea    0x60(%rsp),%r12
    0.00 :   5aef15:       mov    %ebp,%r8d
    0.00 :   5aef18:       mov    $0x10,%edx
    0.00 :   5aef1d:       xor    %eax,%eax
    0.00 :   5aef1f:       mov    0x678d22(%rip),%rsi        # c27c48 <vsnprintf@GLIBC_2.2.5>
    0.00 :   5aef26:       lea    0x318600(%rip),%rcx        # 8c752d <typeinfo name for google::protobuf::MessageLite+0xcd>
    0.00 :   5aef2d:       mov    %r12,%rdi
    0.00 :   5aef30:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5aef35:       mov    $0x42,%r8d
    0.00 :   5aef3b:       xor    %edx,%edx
    0.00 :   5aef3d:       xor    %esi,%esi
    0.00 :   5aef3f:       lea    0x28f1f2(%rip),%rcx        # 83e138 <onnxruntime::Initializer::ReadExternalRawData(onnx::TensorProto const&, onnxruntime::Path const&, std::vector<char, std::allocator<char> >&)::__FUNCTION__+0x18>
    0.00 :   5aef46:       mov    %r12,%rdi
    0.00 :   5aef49:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5aef4e:       lea    0x80(%rsp),%rbx
    0.00 :   5aef56:       lea    0x10(%rbx),%rdx
    0.00 :   5aef5a:       mov    %rdx,0x80(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aef62:       mov    (%rax),%rcx
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   5aef65:       lea    0x10(%rax),%rdx
         :            if (__str._M_is_local())
    0.00 :   5aef69:       cmp    %rdx,%rcx
    0.00 :   5aef6c:       je     5af330 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x5a0>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   5aef72:       mov    %rcx,0x80(%rsp)
         :            _M_capacity(__str._M_allocated_capacity);
    0.00 :   5aef7a:       mov    0x10(%rax),%rcx
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   5aef7e:       mov    %rcx,0x90(%rsp)
         :            _M_length(__str.length());
    0.00 :   5aef86:       mov    0x8(%rax),%rcx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aef8a:       mov    $0x2,%esi
    0.00 :   5aef8f:       mov    %r13,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { _M_string_length = __length; }
    0.00 :   5aef92:       mov    %rcx,0x88(%rsp)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aef9a:       mov    %rbx,%rcx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { _M_dataplus._M_p = __p; }
    0.00 :   5aef9d:       mov    %rdx,(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aefa0:       mov    $0x2,%edx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { _M_string_length = __length; }
    0.00 :   5aefa5:       movq   $0x0,0x8(%rax)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5aefad:       movb   $0x0,0x10(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aefb1:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aefb6:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5aefbe:       add    $0x10,%rbx
    0.00 :   5aefc2:       cmp    %rbx,%rdi
    0.00 :   5aefc5:       je     5aefcc <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x23c>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5aefc7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aefcc:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5aefd1:       add    $0x10,%r12
    0.00 :   5aefd5:       cmp    %r12,%rdi
    0.00 :   5aefd8:       je     5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5aefde:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   5aefe3:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5aefe8:       nopl   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aeff0:       mov    (%r12),%rax
   18.27 :   5aeff4:       mov    %r12,%rdi
    0.00 :   5aeff7:       callq  *0x30(%rax)
    0.00 :   5aeffa:       test   %al,%al
    0.00 :   5aeffc:       je     5af132 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x3a2>
    0.00 :   5af002:       cmpq   $0x0,(%rsp)
    0.00 :   5af007:       je     5afaeb <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xd5b>
    0.00 :   5af00d:       mov    (%r12),%rax
    0.00 :   5af011:       mov    %r12,%rdi
    0.00 :   5af014:       callq  *0x70(%rax)
    0.00 :   5af017:       mov    (%rbx),%r12d
    0.00 :   5af01a:       mov    %rax,%r11
    0.00 :   5af01d:       cmp    $0x1,%r12d
    0.00 :   5af021:       je     5af618 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x888>
    0.00 :   5af027:       jle    5af210 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x480>
    0.00 :   5af02d:       cmp    $0x4,%r12d
    0.00 :   5af031:       je     5af5b8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x828>
    0.00 :   5af037:       cmp    $0x5,%r12d
    0.00 :   5af03b:       jne    5af219 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x489>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af041:       mov    0x28(%rbx),%esi
    0.00 :   5af044:       mov    %r15,%rdi
    0.00 :   5af047:       callq  5a91d0 <onnxruntime::IExecutionFrame::GetMLValue(int) const>
         :
         :            __shared_count&
         :            operator=(const __shared_count& __r) noexcept
         :            {
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
         :            if (__tmp != _M_pi)
    0.00 :   5af04c:       mov    0x8(%r14),%rbp
         :            _M_get() const noexcept
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
         :            };
         :
         :            template<typename _Tp, _Lock_policy _Lp>
         :            class __shared_ptr
    0.00 :   5af050:       mov    (%rax),%rdx
    0.00 :   5af053:       mov    %rdx,(%r14)
    0.00 :   5af056:       mov    0x8(%rax),%r12
         :            if (__tmp != _M_pi)
    0.00 :   5af05a:       cmp    %rbp,%r12
    0.00 :   5af05d:       je     5af0a9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x319>
         :            if (__tmp != 0)
    0.00 :   5af05f:       test   %r12,%r12
    0.00 :   5af062:       je     5af07d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x2ed>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5af064:       cmpq   $0x0,0x678e9c(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af06c:       je     5af7e7 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa57>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af072:       lock addl $0x1,0x8(%r12)
    0.00 :   5af079:       mov    0x8(%r14),%rbp
         :            if (_M_pi != 0)
    0.00 :   5af07d:       test   %rbp,%rbp
    0.00 :   5af080:       je     5af0a5 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x315>
         :            if (__gthread_active_p())
    0.00 :   5af082:       mov    0x678e7f(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af089:       test   %rbx,%rbx
    0.00 :   5af08c:       je     5af7fd <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa6d>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af092:       mov    $0xffffffff,%edx
    0.00 :   5af097:       lock xadd %edx,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af09c:       cmp    $0x1,%edx
    0.00 :   5af09f:       je     5af88f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xaff>
         :            _M_pi = __tmp;
    0.00 :   5af0a5:       mov    %r12,0x8(%r14)
    0.00 :   5af0a9:       mov    0x10(%rax),%rdx
         :            class __shared_ptr
    0.00 :   5af0ad:       mov    0x20(%rax),%r12
         :            if (__tmp != _M_pi)
    0.00 :   5af0b1:       mov    0x20(%r14),%rbp
    0.00 :   5af0b5:       mov    %rdx,0x10(%r14)
         :            class __shared_ptr
    0.00 :   5af0b9:       mov    0x18(%rax),%rdx
    0.00 :   5af0bd:       mov    %rdx,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5af0c1:       cmp    %rbp,%r12
    0.00 :   5af0c4:       je     5af1fe <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46e>
         :            if (__tmp != 0)
    0.00 :   5af0ca:       test   %r12,%r12
    0.00 :   5af0cd:       je     5af0e8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x358>
         :            if (__gthread_active_p())
    0.00 :   5af0cf:       cmpq   $0x0,0x678e31(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af0d7:       je     5af7f2 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa62>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af0dd:       lock addl $0x1,0x8(%r12)
    0.00 :   5af0e4:       mov    0x20(%r14),%rbp
         :            if (_M_pi != 0)
    0.00 :   5af0e8:       test   %rbp,%rbp
    0.00 :   5af0eb:       je     5af110 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x380>
         :            if (__gthread_active_p())
    0.00 :   5af0ed:       mov    0x678e14(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af0f4:       test   %rbx,%rbx
    0.00 :   5af0f7:       je     5af80b <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa7b>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af0fd:       mov    $0xffffffff,%eax
    0.00 :   5af102:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af107:       cmp    $0x1,%eax
    0.00 :   5af10a:       je     5af8d4 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb44>
         :            _M_pi = __tmp;
    0.00 :   5af110:       mov    %r12,0x20(%r14)
    0.00 :   5af114:       jmpq   5af1fe <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46e>
    0.00 :   5af119:       nopl   0x0(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af120:       mov    (%r12),%rax
    0.00 :   5af124:       mov    %r12,%rdi
    0.00 :   5af127:       callq  *0x30(%rax)
    0.00 :   5af12a:       test   %al,%al
    0.00 :   5af12c:       jne    5af00d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x27d>
    0.00 :   5af132:       mov    (%r12),%rax
    0.00 :   5af136:       mov    %r12,%rdi
    0.00 :   5af139:       callq  *0x40(%rax)
    0.00 :   5af13c:       test   %al,%al
    0.00 :   5af13e:       jne    5af3e0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x650>
    0.00 :   5af144:       mov    (%r12),%rax
    0.00 :   5af148:       mov    %r12,%rdi
    0.00 :   5af14b:       callq  *0x38(%rax)
    0.00 :   5af14e:       test   %al,%al
    0.00 :   5af150:       je     5af348 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x5b8>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af156:       callq  59c110 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::TensorSeq>()>
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   5af15b:       mov    $0x20,%edi
    0.00 :   5af160:       mov    %rax,%rbp
    0.00 :   5af163:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5af168:       mov    %rbp,%rdi
    0.00 :   5af16b:       mov    %rax,%rbx
    0.00 :   5af16e:       movq   $0x0,(%rax)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5af175:       movq   $0x0,0x8(%rax)
    0.00 :   5af17d:       movq   $0x0,0x10(%rax)
    0.00 :   5af185:       movq   $0x0,0x18(%rax)
    0.00 :   5af18d:       mov    0x0(%rbp),%rax
    0.00 :   5af191:       callq  *0x20(%rax)
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5af194:       mov    $0x20,%edi
    0.00 :   5af199:       mov    %rax,%r12
    0.00 :   5af19c:       callq  53340 <operator new(unsigned long)@plt>
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af1a1:       lea    0x662608(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5af1a8:       mov    %r12,0x10(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af1ac:       movabs $0x100000001,%rsi
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5af1b6:       mov    0x8(%r14),%r12
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af1ba:       mov    %rsi,0x8(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af1be:       add    $0x10,%rdx
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5af1c2:       mov    %rbx,0x18(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af1c6:       mov    %rdx,(%rax)
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   5af1c9:       mov    %rbx,(%r14)
         :            __r._M_pi = _M_pi;
    0.00 :   5af1cc:       mov    %rax,0x8(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5af1d0:       test   %r12,%r12
    0.00 :   5af1d3:       je     5af1fa <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46a>
         :            if (__gthread_active_p())
    0.00 :   5af1d5:       mov    0x678d2c(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af1dc:       test   %rbx,%rbx
    0.00 :   5af1df:       je     5af720 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x990>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af1e5:       mov    $0xffffffff,%eax
    0.00 :   5af1ea:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af1f1:       cmp    $0x1,%eax
    0.00 :   5af1f4:       je     5af746 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x9b6>
    0.00 :   5af1fa:       mov    %rbp,0x10(%r14)
    6.86 :   5af1fe:       movq   $0x0,0x0(%r13)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   5af206:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5af20b:       nopl   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af210:       test   %r12d,%r12d
    0.00 :   5af213:       je     5af5b8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x828>
    0.00 :   5af219:       lea    0x80(%rsp),%rbx
    0.00 :   5af221:       mov    $0x10,%esi
    0.00 :   5af226:       mov    %rbx,%rdi
    0.00 :   5af229:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5af22e:       mov    $0x19,%edx
    0.00 :   5af233:       lea    0x2e0d43(%rip),%rsi        # 88ff7d <std::piecewise_construct+0x6a0>
    0.00 :   5af23a:       mov    %rbx,%rdi
    0.00 :   5af23d:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af242:       mov    %r12d,%esi
    0.00 :   5af245:       mov    %rbx,%rdi
    0.00 :   5af248:       callq  53be0 <std::ostream::operator<<(int)@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   5af24d:       lea    0x60(%rsp),%r12
    0.00 :   5af252:       lea    0x8(%rbx),%rsi
    0.00 :   5af256:       mov    %r12,%rdi
    0.00 :   5af259:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af25e:       mov    %r12,%rcx
    0.00 :   5af261:       mov    $0x1,%edx
    0.00 :   5af266:       mov    $0x2,%esi
    0.00 :   5af26b:       mov    %r13,%rdi
    0.00 :   5af26e:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5af273:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5af278:       add    $0x10,%r12
    0.00 :   5af27c:       cmp    %r12,%rdi
    0.00 :   5af27f:       je     5af286 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x4f6>
         :            ::operator delete(__p);
    0.00 :   5af281:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5af286:       mov    0x678ad3(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5af28d:       mov    0xd0(%rsp),%rdi
    0.00 :   5af295:       lea    0x18(%rax),%rdx
    0.00 :   5af299:       add    $0x40,%rax
    0.00 :   5af29d:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5af2a5:       mov    0x678d2c(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { }
    0.00 :   5af2ac:       mov    %rdx,0x80(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5af2b4:       add    $0x10,%rax
    0.00 :   5af2b8:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   5af2c0:       lea    0x60(%rbx),%rax
    0.00 :   5af2c4:       cmp    %rax,%rdi
    0.00 :   5af2c7:       je     5af2ce <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x53e>
    0.00 :   5af2c9:       callq  53300 <operator delete(void*)@plt>
         :
         :            public:
         :            /// Destructor deallocates no buffer space.
         :            virtual
         :            ~basic_streambuf()
         :            { }
    0.00 :   5af2ce:       mov    0x67898b(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5af2d5:       lea    0x40(%rbx),%rdi
    0.00 :   5af2d9:       add    $0x10,%rax
    0.00 :   5af2dd:       mov    %rax,0x88(%rsp)
    0.00 :   5af2e5:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5af2ea:       mov    0x678aaf(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *
         :            *  The destructor does nothing.  More specifically, it does not
         :            *  destroy the streambuf held by rdbuf().
         :            */
         :            virtual
         :            ~basic_ios() { }
    0.00 :   5af2f1:       lea    0x70(%rbx),%rdi
    0.00 :   5af2f5:       mov    0x8(%rax),%rdx
    0.00 :   5af2f9:       mov    0x10(%rax),%rax
    0.00 :   5af2fd:       mov    %rdx,0x80(%rsp)
    0.00 :   5af305:       mov    -0x18(%rdx),%rdx
    0.00 :   5af309:       mov    %rax,0x80(%rsp,%rdx,1)
    0.00 :   5af311:       mov    0x678810(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5af318:       add    $0x10,%rax
    0.00 :   5af31c:       mov    %rax,0xf0(%rsp)
    0.00 :   5af324:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5af329:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5af32e:       xchg   %ax,%ax
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
         :            static char_type*
         :            copy(char_type* __s1, const char_type* __s2, size_t __n)
         :            {
         :            if (__n == 0)
         :            return __s1;
         :            return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    0.00 :   5af330:       movdqu 0x10(%rax),%xmm0
    0.00 :   5af335:       movaps %xmm0,0x90(%rsp)
    0.00 :   5af33d:       jmpq   5aef86 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x1f6>
    0.00 :   5af342:       nopw   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af348:       mov    (%r12),%rax
    0.00 :   5af34c:       mov    %r12,%rdi
    0.00 :   5af34f:       callq  *0x70(%rax)
    0.00 :   5af352:       mov    %r12,%rdi
    0.00 :   5af355:       mov    %rax,%rbx
    0.00 :   5af358:       mov    (%r12),%rax
    0.00 :   5af35c:       callq  *0x20(%rax)
    0.00 :   5af35f:       mov    %rax,%rbp
    0.00 :   5af362:       callq  *%rbx
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5af364:       mov    $0x20,%edi
    0.00 :   5af369:       mov    %rax,%rbx
    0.00 :   5af36c:       callq  53340 <operator new(unsigned long)@plt>
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af371:       lea    0x662438(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5af378:       mov    %rbp,0x10(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af37c:       movabs $0x100000001,%rsi
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5af386:       mov    0x8(%r14),%rbp
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af38a:       mov    %rsi,0x8(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af38e:       add    $0x10,%rdx
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5af392:       mov    %rbx,0x18(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af396:       mov    %rdx,(%rax)
    0.00 :   5af399:       mov    %rbx,(%r14)
         :            __r._M_pi = _M_pi;
    0.00 :   5af39c:       mov    %rax,0x8(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5af3a0:       test   %rbp,%rbp
    0.00 :   5af3a3:       je     5af3c8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x638>
         :            if (__gthread_active_p())
    0.00 :   5af3a5:       mov    0x678b5c(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af3ac:       test   %rbx,%rbx
    0.00 :   5af3af:       je     5af710 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x980>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af3b5:       mov    $0xffffffff,%eax
    0.00 :   5af3ba:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af3bf:       cmp    $0x1,%eax
    0.00 :   5af3c2:       je     5af77d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x9ed>
    0.00 :   5af3c8:       mov    %r12,0x10(%r14)
    0.00 :   5af3cc:       movq   $0x0,0x0(%r13)
         :            constexpr _Head_base()
    0.00 :   5af3d4:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5af3d9:       nopl   0x0(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af3e0:       mov    0x48(%r15),%rax
    0.00 :   5af3e4:       mov    0x8(%rsp),%rdx
    0.00 :   5af3e9:       lea    0x30(%rsp),%rdi
    0.00 :   5af3ee:       mov    %r15,%rsi
    0.00 :   5af3f1:       mov    %rax,0x28(%rsp)
    0.00 :   5af3f6:       movzbl 0x2c(%rbx),%eax
    0.00 :   5af3fa:       mov    %al,0x20(%rsp)
    0.00 :   5af3fe:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af403:       mov    (%r12),%rax
    0.00 :   5af407:       mov    %r12,%rdi
    0.00 :   5af40a:       callq  *0x58(%rax)
    0.00 :   5af40d:       mov    (%rax),%rdx
    0.00 :   5af410:       mov    %rax,%rdi
    0.00 :   5af413:       callq  *0x70(%rdx)
    0.00 :   5af416:       mov    %rax,%rbp
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5af419:       mov    0x30(%rsp),%rax
    0.00 :   5af41e:       mov    %rax,0x40(%rsp)
         :            : _M_pi(__r._M_pi)
    0.00 :   5af423:       mov    0x38(%rsp),%rax
    0.00 :   5af428:       mov    %rax,0x48(%rsp)
         :            if (_M_pi != 0)
    0.00 :   5af42d:       test   %rax,%rax
    0.00 :   5af430:       je     5af445 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x6b5>
         :            if (__gthread_active_p())
    0.00 :   5af432:       cmpq   $0x0,0x678ace(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af43a:       je     5af700 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x970>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af440:       lock addl $0x1,0x8(%rax)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   5af445:       mov    $0xc8,%edi
    0.00 :   5af44a:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5af44f:       mov    %rax,%rbx
    0.00 :   5af452:       mov    0x10(%rsp),%rcx
    0.00 :   5af457:       lea    0x40(%rsp),%rax
    0.00 :   5af45c:       mov    %rbp,%rsi
    0.00 :   5af45f:       mov    (%rsp),%rdx
    0.00 :   5af463:       mov    %rax,%r8
    0.00 :   5af466:       mov    %rbx,%rdi
    0.00 :   5af469:       mov    %rax,0x18(%rsp)
    0.00 :   5af46e:       callq  5ed410 <onnxruntime::SparseTensor::SparseTensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, unsigned long, std::shared_ptr<onnxruntime::IAllocator>)>
         :            if (_M_pi != nullptr)
    0.00 :   5af473:       mov    0x48(%rsp),%rdi
    0.00 :   5af478:       test   %rdi,%rdi
    0.00 :   5af47b:       je     5af482 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x6f2>
         :            _M_pi->_M_release();
    0.00 :   5af47d:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   5af482:       callq  59c020 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::SparseTensor>()>
    0.00 :   5af487:       mov    (%rax),%rdx
    0.00 :   5af48a:       mov    %rax,%rdi
    0.00 :   5af48d:       callq  *0x20(%rdx)
    0.00 :   5af490:       mov    %rax,%rbp
    0.00 :   5af493:       callq  59c020 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::SparseTensor>()>
    0.00 :   5af498:       mov    $0x20,%edi
    0.00 :   5af49d:       mov    %rax,%r12
    0.00 :   5af4a0:       callq  53340 <operator new(unsigned long)@plt>
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af4a5:       lea    0x662304(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5af4ac:       mov    %rbp,0x10(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af4b0:       movabs $0x100000001,%rsi
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5af4ba:       mov    0x8(%r14),%rbp
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af4be:       mov    %rsi,0x8(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af4c2:       add    $0x10,%rdx
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5af4c6:       mov    %rbx,0x18(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af4ca:       mov    %rdx,(%rax)
    0.00 :   5af4cd:       mov    %rbx,(%r14)
         :            __r._M_pi = _M_pi;
    0.00 :   5af4d0:       mov    %rax,0x8(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5af4d4:       test   %rbp,%rbp
    0.00 :   5af4d7:       je     5af4fc <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x76c>
         :            if (__gthread_active_p())
    0.00 :   5af4d9:       mov    0x678a28(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af4e0:       test   %rbx,%rbx
    0.00 :   5af4e3:       je     5af738 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x9a8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af4e9:       mov    $0xffffffff,%eax
    0.00 :   5af4ee:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af4f3:       cmp    $0x1,%eax
    0.00 :   5af4f6:       je     5af7b2 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa22>
    0.00 :   5af4fc:       cmpb   $0x0,0x20(%rsp)
    0.00 :   5af501:       mov    %r12,0x10(%r14)
    0.00 :   5af505:       je     5af593 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x803>
    0.00 :   5af50b:       mov    0x18(%r14),%rbp
    0.00 :   5af50f:       test   %rbp,%rbp
    0.00 :   5af512:       jne    5afb8d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xdfd>
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    0.00 :   5af518:       mov    0x30(%rsp),%rsi
    0.00 :   5af51d:       mov    (%rsi),%rax
    0.00 :   5af520:       mov    0x20(%rax),%rax
    0.00 :   5af524:       cmp    0x6785d5(%rip),%rax        # c27b00 <.got+0x40>
    0.00 :   5af52b:       jne    5af819 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa89>
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5af531:       movq   $0x0,0x40(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5af53a:       xor    %edx,%edx
    0.00 :   5af53c:       movq   $0x0,0x48(%rsp)
         :            if (__tmp != _M_pi)
    0.00 :   5af545:       mov    0x20(%r14),%r12
         :            class __shared_ptr
    0.00 :   5af549:       mov    %rdx,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5af54d:       test   %r12,%r12
    0.00 :   5af550:       je     5af593 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x803>
    0.00 :   5af552:       mov    0x6789af(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            if (__gthread_active_p())
    0.00 :   5af559:       test   %rbx,%rbx
    0.00 :   5af55c:       je     5af909 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb79>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af562:       mov    $0xffffffff,%eax
    0.00 :   5af567:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af56e:       cmp    $0x1,%eax
    0.00 :   5af571:       je     5af951 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xbc1>
         :            _M_pi = __tmp;
    0.00 :   5af577:       mov    %rbp,0x20(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5af57b:       test   %rbp,%rbp
    0.00 :   5af57e:       jne    5afb85 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xdf5>
    0.00 :   5af584:       mov    0x48(%rsp),%rdi
    0.00 :   5af589:       test   %rdi,%rdi
    0.00 :   5af58c:       je     5af593 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x803>
         :            _M_pi->_M_release();
    0.00 :   5af58e:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            if (_M_pi != nullptr)
    0.00 :   5af593:       mov    0x38(%rsp),%rdi
    0.00 :   5af598:       movq   $0x0,0x0(%r13)
    0.00 :   5af5a0:       test   %rdi,%rdi
    0.00 :   5af5a3:       je     5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
         :            _M_pi->_M_release();
    0.00 :   5af5a9:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   5af5ae:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5af5b3:       nopl   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af5b8:       movzbl 0x2c(%rbx),%eax
    0.00 :   5af5bc:       lea    0x40(%rsp),%r12
    0.00 :   5af5c1:       mov    %ebp,%ecx
    0.00 :   5af5c3:       mov    %r15,%rsi
    0.00 :   5af5c6:       mov    %r11,%r8
    0.00 :   5af5c9:       mov    %r14,%rdx
    0.00 :   5af5cc:       mov    %r12,%rdi
    0.00 :   5af5cf:       push   %rax
    0.00 :   5af5d0:       pushq  0x8(%rsp)
    0.00 :   5af5d4:       mov    0x18(%rsp),%r9
    0.00 :   5af5d9:       callq  5aed40 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>
    0.00 :   5af5de:       pop    %rcx
    0.00 :   5af5df:       pop    %rsi
    0.00 :   5af5e0:       cmpq   $0x0,0x40(%rsp)
    0.00 :   5af5e6:       je     5af1fe <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46e>
    0.00 :   5af5ec:       mov    $0x22c,%r8d
    0.00 :   5af5f2:       lea    0x2e0d27(%rip),%rcx        # 890320 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__FUNCTION__>
    0.00 :   5af5f9:       mov    %r12,%rsi
    0.00 :   5af5fc:       xor    %edi,%edi
    0.00 :   5af5fe:       lea    0x2e0433(%rip),%rdx        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5af605:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5af60a:       mov    0x40(%rsp),%rax
    0.00 :   5af60f:       jmpq   5aeed6 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x146>
    0.00 :   5af614:       nopl   0x0(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af618:       mov    0x28(%rbx),%ebp
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af61b:       mov    %r15,%rdi
    0.00 :   5af61e:       mov    %rax,0x18(%rsp)
    0.00 :   5af623:       mov    %ebp,%esi
    0.00 :   5af625:       callq  5a91d0 <onnxruntime::IExecutionFrame::GetMLValue(int) const>
    0.00 :   5af62a:       mov    0x18(%rsp),%r11
    0.00 :   5af62f:       cmpq   $0x0,(%rax)
    0.00 :   5af633:       je     5af6a0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x910>
    0.00 :   5af635:       lea    0x40(%rsp),%rsi
    0.00 :   5af63a:       cmpq   $0x0,0x10(%rax)
    0.00 :   5af63f:       mov    %rsi,0x18(%rsp)
    0.00 :   5af644:       je     5af6a0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x910>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af646:       movzbl 0x2c(%rbx),%eax
    0.00 :   5af64a:       mov    %r14,%rdx
    0.00 :   5af64d:       mov    %r11,%r8
    0.00 :   5af650:       mov    %ebp,%ecx
    0.00 :   5af652:       mov    %r15,%rsi
    0.00 :   5af655:       push   %rax
    0.00 :   5af656:       pushq  0x8(%rsp)
    0.00 :   5af65a:       mov    0x28(%rsp),%rbx
    0.00 :   5af65f:       mov    0x18(%rsp),%r9
    0.00 :   5af664:       mov    %rbx,%rdi
    0.00 :   5af667:       callq  5ac9c0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>
    0.00 :   5af66c:       pop    %rax
    0.00 :   5af66d:       pop    %rdx
    0.00 :   5af66e:       cmpq   $0x0,0x40(%rsp)
    0.00 :   5af674:       je     5af1fe <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46e>
    0.00 :   5af67a:       mov    $0x23a,%r8d
    0.00 :   5af680:       lea    0x2e0c99(%rip),%rcx        # 890320 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__FUNCTION__>
    0.00 :   5af687:       mov    %rbx,%rsi
    0.00 :   5af68a:       xor    %edi,%edi
    0.00 :   5af68c:       lea    0x2e03a5(%rip),%rdx        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5af693:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   5af698:       jmpq   5af60a <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x87a>
    0.00 :   5af69d:       nopl   (%rax)
    0.00 :   5af6a0:       lea    0x40(%rsp),%r12
    0.00 :   5af6a5:       mov    0x10(%rsp),%r9
    0.00 :   5af6aa:       mov    (%rsp),%r8
    0.00 :   5af6ae:       mov    %ebp,%ecx
    0.00 :   5af6b0:       mov    %rax,%rdx
    0.00 :   5af6b3:       mov    %r15,%rsi
    0.00 :   5af6b6:       mov    %r12,%rdi
    0.00 :   5af6b9:       mov    %r11,0x20(%rsp)
    0.00 :   5af6be:       mov    %r12,0x18(%rsp)
    0.00 :   5af6c3:       callq  5aed90 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)>
    0.00 :   5af6c8:       cmpq   $0x0,0x40(%rsp)
    0.00 :   5af6ce:       mov    0x20(%rsp),%r11
    0.00 :   5af6d3:       je     5af646 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x8b6>
    0.00 :   5af6d9:       mov    $0x237,%r8d
    0.00 :   5af6df:       lea    0x2e0c3a(%rip),%rcx        # 890320 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__FUNCTION__>
    0.00 :   5af6e6:       mov    %r12,%rsi
    0.00 :   5af6e9:       xor    %edi,%edi
    0.00 :   5af6eb:       lea    0x2e0346(%rip),%rdx        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5af6f2:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   5af6f7:       jmpq   5af60a <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x87a>
    0.00 :   5af6fc:       nopl   0x0(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { *__mem += __val; }
    0.00 :   5af700:       addl   $0x1,0x8(%rax)
    0.00 :   5af704:       jmpq   5af445 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x6b5>
    0.00 :   5af709:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5af710:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af713:       lea    -0x1(%rax),%edx
    0.00 :   5af716:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   5af719:       jmpq   5af3bf <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x62f>
    0.00 :   5af71e:       xchg   %ax,%ax
         :            _Atomic_word __result = *__mem;
    0.00 :   5af720:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5af725:       lea    -0x1(%rax),%edx
    0.00 :   5af728:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5af72d:       jmpq   5af1f1 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x461>
    0.00 :   5af732:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5af738:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af73b:       lea    -0x1(%rax),%edx
    0.00 :   5af73e:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   5af741:       jmpq   5af4f3 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x763>
         :            _M_dispose();
    0.00 :   5af746:       mov    (%r12),%rax
    0.00 :   5af74a:       mov    %r12,%rdi
    0.00 :   5af74d:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af750:       test   %rbx,%rbx
    0.00 :   5af753:       je     5af937 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xba7>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af759:       mov    $0xffffffff,%eax
    0.00 :   5af75e:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af765:       cmp    $0x1,%eax
    0.00 :   5af768:       jne    5af1fa <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46a>
         :            _M_destroy();
    0.00 :   5af76e:       mov    (%r12),%rax
    0.00 :   5af772:       mov    %r12,%rdi
    0.00 :   5af775:       callq  *0x18(%rax)
    0.00 :   5af778:       jmpq   5af1fa <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46a>
         :            _M_dispose();
    0.00 :   5af77d:       mov    0x0(%rbp),%rax
    0.00 :   5af781:       mov    %rbp,%rdi
    0.00 :   5af784:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af787:       test   %rbx,%rbx
    0.00 :   5af78a:       je     5af91b <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb8b>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af790:       mov    $0xffffffff,%eax
    0.00 :   5af795:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af79a:       cmp    $0x1,%eax
    0.00 :   5af79d:       jne    5af3c8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x638>
         :            _M_destroy();
    0.00 :   5af7a3:       mov    0x0(%rbp),%rax
    0.00 :   5af7a7:       mov    %rbp,%rdi
    0.00 :   5af7aa:       callq  *0x18(%rax)
    0.00 :   5af7ad:       jmpq   5af3c8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x638>
         :            _M_dispose();
    0.00 :   5af7b2:       mov    0x0(%rbp),%rax
    0.00 :   5af7b6:       mov    %rbp,%rdi
    0.00 :   5af7b9:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af7bc:       test   %rbx,%rbx
    0.00 :   5af7bf:       je     5af929 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb99>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af7c5:       mov    $0xffffffff,%eax
    0.00 :   5af7ca:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af7cf:       cmp    $0x1,%eax
    0.00 :   5af7d2:       jne    5af4fc <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x76c>
         :            _M_destroy();
    0.00 :   5af7d8:       mov    0x0(%rbp),%rax
    0.00 :   5af7dc:       mov    %rbp,%rdi
    0.00 :   5af7df:       callq  *0x18(%rax)
    0.00 :   5af7e2:       jmpq   5af4fc <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x76c>
         :            { *__mem += __val; }
    0.00 :   5af7e7:       addl   $0x1,0x8(%r12)
    0.00 :   5af7ed:       jmpq   5af07d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x2ed>
    0.00 :   5af7f2:       addl   $0x1,0x8(%r12)
    0.00 :   5af7f8:       jmpq   5af0e8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x358>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af7fd:       mov    0x8(%rbp),%edx
         :            *__mem += __val;
    0.00 :   5af800:       lea    -0x1(%rdx),%ecx
    0.00 :   5af803:       mov    %ecx,0x8(%rbp)
         :            return __result;
    0.00 :   5af806:       jmpq   5af09c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x30c>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af80b:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af80e:       lea    -0x1(%rax),%edx
    0.00 :   5af811:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   5af814:       jmpq   5af107 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x377>
    0.00 :   5af819:       mov    0x28(%rsp),%rdx
    0.00 :   5af81e:       mov    0x18(%rsp),%rdi
    0.00 :   5af823:       callq  *%rax
    0.00 :   5af825:       mov    0x48(%rsp),%rax
         :            __shared_count(const __shared_count& __r) noexcept
    0.00 :   5af82a:       mov    0x40(%rsp),%rdx
         :            if (_M_pi != 0)
    0.00 :   5af82f:       test   %rax,%rax
    0.00 :   5af832:       je     5af545 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7b5>
         :            if (__gthread_active_p())
    0.00 :   5af838:       mov    0x6786c9(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   5af83f:       lea    0x8(%rax),%rcx
    0.00 :   5af843:       test   %rbx,%rbx
    0.00 :   5af846:       je     5af883 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xaf3>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af848:       lock addl $0x1,(%rcx)
         :            if (__tmp != _M_pi)
    0.00 :   5af84c:       mov    0x20(%r14),%r12
         :            class __shared_ptr
    0.00 :   5af850:       mov    %rdx,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5af854:       cmp    %r12,%rax
    0.00 :   5af857:       je     5af876 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xae6>
         :            if (__gthread_active_p())
    0.00 :   5af859:       test   %rbx,%rbx
    0.00 :   5af85c:       je     5af889 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xaf9>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af85e:       lock addl $0x1,(%rcx)
    0.00 :   5af862:       mov    0x20(%r14),%r12
         :            if (_M_pi != 0)
    0.00 :   5af866:       test   %r12,%r12
    0.00 :   5af869:       jne    5af949 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xbb9>
         :            _M_pi = __tmp;
    0.00 :   5af86f:       mov    %rax,0x20(%r14)
    0.00 :   5af873:       mov    %rax,%r12
         :            _M_pi->_M_release();
    0.00 :   5af876:       mov    %r12,%rdi
    0.00 :   5af879:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   5af87e:       jmpq   5af584 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7f4>
         :            { *__mem += __val; }
    0.00 :   5af883:       addl   $0x1,0x8(%rax)
    0.00 :   5af887:       jmp    5af84c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xabc>
    0.00 :   5af889:       addl   $0x1,0x8(%rax)
    0.00 :   5af88d:       jmp    5af866 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xad6>
         :            _M_dispose();
    0.00 :   5af88f:       mov    0x0(%rbp),%rdx
    0.00 :   5af893:       mov    %rax,(%rsp)
    0.00 :   5af897:       mov    %rbp,%rdi
    0.00 :   5af89a:       callq  *0x10(%rdx)
         :            if (__gthread_active_p())
    0.00 :   5af89d:       test   %rbx,%rbx
    0.00 :   5af8a0:       mov    (%rsp),%rax
    0.00 :   5af8a4:       je     5af992 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc02>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af8aa:       mov    $0xffffffff,%edx
    0.00 :   5af8af:       lock xadd %edx,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af8b4:       cmp    $0x1,%edx
    0.00 :   5af8b7:       jne    5af0a5 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x315>
         :            _M_destroy();
    0.00 :   5af8bd:       mov    0x0(%rbp),%rdx
    0.00 :   5af8c1:       mov    %rax,(%rsp)
    0.00 :   5af8c5:       mov    %rbp,%rdi
    0.00 :   5af8c8:       callq  *0x18(%rdx)
    0.00 :   5af8cb:       mov    (%rsp),%rax
    0.00 :   5af8cf:       jmpq   5af0a5 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x315>
         :            _M_dispose();
    0.00 :   5af8d4:       mov    0x0(%rbp),%rax
    0.00 :   5af8d8:       mov    %rbp,%rdi
    0.00 :   5af8db:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af8de:       test   %rbx,%rbx
    0.00 :   5af8e1:       je     5af984 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xbf4>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af8e7:       mov    $0xffffffff,%eax
    0.00 :   5af8ec:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af8f1:       cmp    $0x1,%eax
    0.00 :   5af8f4:       jne    5af110 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x380>
         :            _M_destroy();
    0.00 :   5af8fa:       mov    0x0(%rbp),%rax
    0.00 :   5af8fe:       mov    %rbp,%rdi
    0.00 :   5af901:       callq  *0x18(%rax)
    0.00 :   5af904:       jmpq   5af110 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x380>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af909:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5af90e:       lea    -0x1(%rax),%edx
    0.00 :   5af911:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5af916:       jmpq   5af56e <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7de>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af91b:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af91e:       lea    -0x1(%rax),%edx
    0.00 :   5af921:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5af924:       jmpq   5af79a <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa0a>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af929:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af92c:       lea    -0x1(%rax),%edx
    0.00 :   5af92f:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5af932:       jmpq   5af7cf <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa3f>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af937:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5af93c:       lea    -0x1(%rax),%edx
    0.00 :   5af93f:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5af944:       jmpq   5af765 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x9d5>
         :            if (_M_pi != 0)
    0.00 :   5af949:       mov    %rax,%rbp
    0.00 :   5af94c:       jmpq   5af559 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7c9>
         :            _M_dispose();
    0.00 :   5af951:       mov    (%r12),%rax
    0.00 :   5af955:       mov    %r12,%rdi
    0.00 :   5af958:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af95b:       test   %rbx,%rbx
    0.00 :   5af95e:       je     5af9a0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc10>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af960:       mov    $0xffffffff,%eax
    0.00 :   5af965:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af96c:       cmp    $0x1,%eax
    0.00 :   5af96f:       jne    5af577 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7e7>
         :            _M_destroy();
    0.00 :   5af975:       mov    (%r12),%rax
    0.00 :   5af979:       mov    %r12,%rdi
    0.00 :   5af97c:       callq  *0x18(%rax)
    0.00 :   5af97f:       jmpq   5af577 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7e7>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af984:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af987:       lea    -0x1(%rax),%edx
    0.00 :   5af98a:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5af98d:       jmpq   5af8f1 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb61>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af992:       mov    0xc(%rbp),%edx
         :            *__mem += __val;
    0.00 :   5af995:       lea    -0x1(%rdx),%ecx
    0.00 :   5af998:       mov    %ecx,0xc(%rbp)
         :            return __result;
    0.00 :   5af99b:       jmpq   5af8b4 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb24>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af9a0:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5af9a5:       lea    -0x1(%rax),%edx
    0.00 :   5af9a8:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5af9ad:       jmp    5af96c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xbdc>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af9af:       mov    $0xa0,%edi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af9b4:       lea    0x60(%rsp),%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af9b9:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af9be:       mov    %r12,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af9c1:       mov    %rax,%rbp
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af9c4:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af9c9:       lea    0x40(%rsp),%rax
    0.00 :   5af9ce:       mov    %rax,%rdi
    0.00 :   5af9d1:       mov    %rax,0x18(%rsp)
    0.00 :   5af9d6:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5af9db:       mov    0x18(%rsp),%r14
    0.00 :   5af9e0:       lea    0x80(%rsp),%rbx
    0.00 :   5af9e8:       lea    0x2e0951(%rip),%rcx        # 890340 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5af9ef:       mov    $0x209,%edx
    0.00 :   5af9f4:       lea    0x2e003d(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5af9fb:       mov    %rbx,%rdi
    0.00 :   5af9fe:       mov    %r14,%r8
    0.00 :   5afa01:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5afa06:       mov    %r12,%rcx
    0.00 :   5afa09:       lea    0x2e0490(%rip),%rdx        # 88fea0 <std::piecewise_construct+0x5c3>
    0.00 :   5afa10:       mov    %rbx,%rsi
    0.00 :   5afa13:       mov    %rbp,%rdi
    0.00 :   5afa16:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5afa1b:       mov    %rbx,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afa1e:       add    $0x10,%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa22:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5afa27:       mov    %r14,%rdi
    0.00 :   5afa2a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5afa2f:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5afa34:       cmp    %r12,%rdi
    0.00 :   5afa37:       je     b20d0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x22a>
         :            ::operator delete(__p);
    0.00 :   5afa3d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5afa42:       jmpq   b20d0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x22a>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa47:       callq  53460 <__stack_chk_fail@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            __throw_bad_function_call();
    0.00 :   5afa4c:       callq  52bd0 <std::__throw_bad_function_call()@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa51:       mov    $0xa0,%edi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afa56:       lea    0x60(%rsp),%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa5b:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afa60:       lea    0x2e0491(%rip),%rsi        # 88fef8 <std::piecewise_construct+0x61b>
    0.00 :   5afa67:       mov    %r12,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa6a:       mov    %rax,%rbp
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afa6d:       callq  5a9190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.189]>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa72:       lea    0x40(%rsp),%r14
    0.00 :   5afa77:       mov    %r14,%rdi
    0.00 :   5afa7a:       mov    %r14,0x18(%rsp)
    0.00 :   5afa7f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5afa84:       lea    0x80(%rsp),%rbx
    0.00 :   5afa8c:       mov    %r14,%r8
    0.00 :   5afa8f:       lea    0x2e08aa(%rip),%rcx        # 890340 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5afa96:       mov    $0x217,%edx
    0.00 :   5afa9b:       lea    0x2dff96(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5afaa2:       mov    %rbx,%rdi
    0.00 :   5afaa5:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5afaaa:       mov    %r12,%rcx
    0.00 :   5afaad:       lea    0x295552(%rip),%rdx        # 845006 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x786>
    0.00 :   5afab4:       mov    %rbx,%rsi
    0.00 :   5afab7:       mov    %rbp,%rdi
    0.00 :   5afaba:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5afabf:       mov    %rbx,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afac2:       add    $0x10,%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afac6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5afacb:       mov    %r14,%rdi
    0.00 :   5aface:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5afad3:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5afad8:       cmp    %r12,%rdi
    0.00 :   5afadb:       je     b1f3f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x99>
    0.00 :   5afae1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5afae6:       jmpq   b1f3f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x99>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afaeb:       mov    $0xa0,%edi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afaf0:       lea    0x60(%rsp),%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afaf5:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afafa:       lea    0x2e044f(%rip),%rsi        # 88ff50 <std::piecewise_construct+0x673>
    0.00 :   5afb01:       mov    %r12,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afb04:       mov    %rax,%rbp
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afb07:       callq  5a9190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.189]>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afb0c:       lea    0x40(%rsp),%r14
    0.00 :   5afb11:       mov    %r14,%rdi
    0.00 :   5afb14:       mov    %r14,0x18(%rsp)
    0.00 :   5afb19:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5afb1e:       lea    0x80(%rsp),%rbx
    0.00 :   5afb26:       mov    %r14,%r8
    0.00 :   5afb29:       lea    0x2e0810(%rip),%rcx        # 890340 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5afb30:       mov    $0x220,%edx
    0.00 :   5afb35:       lea    0x2dfefc(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5afb3c:       mov    %rbx,%rdi
    0.00 :   5afb3f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5afb44:       mov    %r12,%rcx
    0.00 :   5afb47:       lea    0x2954b8(%rip),%rdx        # 845006 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x786>
    0.00 :   5afb4e:       mov    %rbx,%rsi
    0.00 :   5afb51:       mov    %rbp,%rdi
    0.00 :   5afb54:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5afb59:       mov    %rbx,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afb5c:       add    $0x10,%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afb60:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5afb65:       mov    %r14,%rdi
    0.00 :   5afb68:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5afb6d:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5afb72:       cmp    %r12,%rdi
    0.00 :   5afb75:       je     b2156 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x2b0>
    0.00 :   5afb7b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5afb80:       jmpq   b2156 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x2b0>
         :            if (_M_pi != nullptr)
    0.00 :   5afb85:       mov    %rbp,%r12
    0.00 :   5afb88:       jmpq   5af876 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xae6>
    0.00 :   5afb8d:       mov    $0xa0,%edi
    0.00 :   5afb92:       lea    0x60(%rsp),%r12
    0.00 :   5afb97:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5afb9c:       mov    %r12,%rdi
    0.00 :   5afb9f:       mov    %rax,%r13
    0.00 :   5afba2:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5afba7:       mov    0x18(%rsp),%r14
    0.00 :   5afbac:       mov    %r14,%rdi
    0.00 :   5afbaf:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5afbb4:       lea    0x80(%rsp),%rbx
    0.00 :   5afbbc:       mov    %r14,%r8
    0.00 :   5afbbf:       lea    0x2e067a(%rip),%rcx        # 890240 <onnxruntime::AllocateSparseTensor(OrtValue&, onnxruntime::DataTypeImpl const&, std::shared_ptr<onnxruntime::IAllocator>, onnxruntime::TensorShape const&, unsigned long, bool, onnxruntime::SessionState const&)::__PRETTY_FUNCTION__>
    0.00 :   5afbc6:       mov    $0x1fc,%edx
    0.00 :   5afbcb:       lea    0x2dfe66(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5afbd2:       mov    %rbx,%rdi
    0.00 :   5afbd5:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5afbda:       mov    %r12,%rcx
    0.00 :   5afbdd:       lea    0x2e03b3(%rip),%rdx        # 88ff97 <std::piecewise_construct+0x6ba>
    0.00 :   5afbe4:       mov    %rbx,%rsi
    0.00 :   5afbe7:       mov    %r13,%rdi
    0.00 :   5afbea:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5afbef:       mov    %rbx,%rdi
    0.00 :   5afbf2:       add    $0x10,%r12
    0.00 :   5afbf6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5afbfb:       mov    %r14,%rdi
    0.00 :   5afbfe:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5afc03:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5afc08:       cmp    %r12,%rdi
    0.00 :   5afc0b:       je     b1ec9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x23>
    0.00 :   5afc11:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5afc16:       jmpq   b1ec9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x23>
    0.00 :   5afc1b:       mov    %rax,%rbp
    0.00 :   5afc1e:       jmpq   b1ea6 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]>
    0.00 :   5afc23:       mov    %rax,%rbp
    0.00 :   5afc26:       jmpq   b1eb9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x13>
    0.00 :   5afc2b:       mov    %rax,%rbp
    0.00 :   5afc2e:       jmpq   b1ef9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x53>
    0.00 :   5afc33:       mov    %rax,%rbx
    0.00 :   5afc36:       jmpq   b1f28 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x82>
    0.00 :   5afc3b:       mov    %rax,%rbp
    0.00 :   5afc3e:       jmpq   b1ee2 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x3c>
    0.00 :   5afc43:       jmpq   b1f55 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xaf>
    0.00 :   5afc48:       mov    %rax,%r13
    0.00 :   5afc4b:       jmpq   b1f77 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xd1>
    0.00 :   5afc50:       mov    %rax,%rbx
    0.00 :   5afc53:       jmpq   b1f82 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xdc>
    0.00 :   5afc58:       mov    %rax,%rbx
    0.00 :   5afc5b:       jmpq   b1f8c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xe6>
    0.00 :   5afc60:       mov    %rax,%rbx
    0.00 :   5afc63:       jmpq   b1f9f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xf9>
    0.00 :   5afc68:       mov    %rax,%r12
    0.00 :   5afc6b:       jmpq   b1faf <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x109>
    0.00 :   5afc70:       jmpq   b1fdf <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x139>
    0.00 :   5afc75:       jmpq   b2010 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x16a>
    0.00 :   5afc7a:       mov    %rax,%rbp
    0.00 :   5afc7d:       jmpq   b2022 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x17c>
    0.00 :   5afc82:       mov    %rax,%rbp
    0.00 :   5afc85:       jmpq   b2063 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x1bd>
    0.00 :   5afc8a:       mov    %rax,%rbp
    0.00 :   5afc8d:       jmpq   b2070 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x1ca>
    0.00 :   5afc92:       mov    %rax,%rbp
    0.00 :   5afc95:       jmpq   b1ee2 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x3c>
    0.00 :   5afc9a:       mov    %rax,%rbx
    0.00 :   5afc9d:       jmpq   b2088 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x1e2>
    0.00 :   5afca2:       mov    %rax,%rbp
    0.00 :   5afca5:       jmpq   b209f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x1f9>
    0.00 :   5afcaa:       mov    %rax,%rbp
    0.00 :   5afcad:       jmpq   b20b5 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x20f>
    0.00 :   5afcb2:       mov    %rax,%r13
    0.00 :   5afcb5:       jmpq   b20e6 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x240>
    0.00 :   5afcba:       mov    %rax,%rbx
    0.00 :   5afcbd:       jmpq   b20f1 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x24b>
    0.00 :   5afcc2:       mov    %rax,%rbx
    0.00 :   5afcc5:       jmpq   b20fb <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x255>
    0.00 :   5afcca:       mov    %rax,%rbp
    0.00 :   5afccd:       jmpq   b1f01 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x5b>
    0.00 :   5afcd2:       mov    %rax,%rbp
    0.00 :   5afcd5:       jmpq   b1f0b <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x65>
    0.00 :   5afcda:       mov    %rax,%r13
    0.00 :   5afcdd:       jmpq   b211e <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x278>
    0.00 :   5afce2:       mov    %rax,%rbx
    0.00 :   5afce5:       jmpq   b2129 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x283>
    0.00 :   5afcea:       mov    %rax,%rbx
    0.00 :   5afced:       jmpq   b2133 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x28d>
    0.00 :   5afcf2:       mov    %rax,%rbx
    0.00 :   5afcf5:       jmpq   b2146 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x2a0>
    0.00 :   5afcfa:       mov    %rax,%rbx
    0.00 :   5afcfd:       jmpq   b216c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x2c6>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (4 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005f2730 <onnxruntime::TensorShape::Size() const>:
         :            _ZNK11onnxruntime11TensorShape4SizeEv():
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   28.54 :   5f2730:       mov    0x8(%rdi),%rdx
   71.46 :   5f2734:       sub    (%rdi),%rdx
    0.00 :   5f2737:       xor    %esi,%esi
    0.00 :   5f2739:       sar    $0x3,%rdx
    0.00 :   5f273d:       jmpq   5f2670 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000016a800 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
         :            _ZNKSt10_HashtableINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_mESaIS8_ENSt8__detail10_Select1stESt8equal_toIS5_ESt4hashIS5_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS7_m():
         :            template<typename _Key, typename _Value,
         :            typename _Alloc, typename _ExtractKey, typename _Equal,
         :            typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         :            typename _Traits>
         :            auto
         :            _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
    0.00 :   16a800:       push   %r15
    0.00 :   16a802:       push   %r14
    0.00 :   16a804:       push   %r13
    0.00 :   16a806:       push   %r12
    0.00 :   16a808:       push   %rbp
    0.00 :   16a809:       push   %rbx
    0.00 :   16a80a:       sub    $0x8,%rsp
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __n, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__n];
    0.00 :   16a80e:       mov    (%rdi),%rax
    0.00 :   16a811:       mov    (%rax,%rsi,8),%r12
         :            if (!__prev_p)
  100.00 :   16a815:       test   %r12,%r12
    0.00 :   16a818:       je     16a856 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const+0x56>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   16a81a:       mov    (%r12),%rbx
    0.00 :   16a81e:       mov    %rcx,%r14
    0.00 :   16a821:       mov    %rdx,%r15
    0.00 :   16a824:       mov    %rsi,%r13
    0.00 :   16a827:       mov    %rdi,%rbp
    0.00 :   16a82a:       mov    0x30(%rbx),%r8
         :            struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
         :            {
         :            static bool
         :            _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
         :            const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)
         :            { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
    0.00 :   16a82e:       cmp    %r14,%r8
    0.00 :   16a831:       je     16a870 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const+0x70>
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   16a833:       mov    (%rbx),%rax
    0.00 :   16a836:       test   %rax,%rax
    0.00 :   16a839:       je     16a853 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const+0x53>
         :            { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
    0.00 :   16a83b:       mov    0x30(%rax),%r8
         :            { return __num % __den; }
    0.00 :   16a83f:       mov    %rbx,%r12
    0.00 :   16a842:       xor    %edx,%edx
    0.00 :   16a844:       mov    %rax,%rbx
    0.00 :   16a847:       mov    %r8,%rax
    0.00 :   16a84a:       divq   0x8(%rbp)
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   16a84e:       cmp    %rdx,%r13
    0.00 :   16a851:       je     16a82e <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const+0x2e>
         :            return nullptr;
    0.00 :   16a853:       xor    %r12d,%r12d
         :            break;
         :            __prev_p = __p;
         :            }
         :            return nullptr;
         :            }
    0.00 :   16a856:       add    $0x8,%rsp
    0.00 :   16a85a:       mov    %r12,%rax
    0.00 :   16a85d:       pop    %rbx
    0.00 :   16a85e:       pop    %rbp
    0.00 :   16a85f:       pop    %r12
    0.00 :   16a861:       pop    %r13
    0.00 :   16a863:       pop    %r14
    0.00 :   16a865:       pop    %r15
    0.00 :   16a867:       retq
    0.00 :   16a868:       nopl   0x0(%rax,%rax,1)
         :            template<typename _CharT>
         :            inline
         :            typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
         :            operator==(const basic_string<_CharT>& __lhs,
         :            const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
         :            { return (__lhs.size() == __rhs.size()
    0.00 :   16a870:       mov    0x8(%r15),%rdx
         :            && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
    0.00 :   16a874:       cmp    0x10(%rbx),%rdx
    0.00 :   16a878:       jne    16a833 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const+0x33>
         :            if (__builtin_constant_p(__n)
         :            && __constant_char_array_p(__s1, __n)
         :            && __constant_char_array_p(__s2, __n))
         :            return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
         :            #endif
         :            if (__n == 0)
    0.00 :   16a87a:       test   %rdx,%rdx
    0.00 :   16a87d:       je     16a856 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const+0x56>
         :            return 0;
         :            return __builtin_memcmp(__s1, __s2, __n);
    0.00 :   16a87f:       mov    0x8(%rbx),%rsi
    0.00 :   16a883:       mov    (%r15),%rdi
    0.00 :   16a886:       callq  52c80 <memcmp@plt>
    0.00 :   16a88b:       test   %eax,%eax
    0.00 :   16a88d:       je     16a856 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const+0x56>
    0.00 :   16a88f:       jmp    16a833 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const+0x33>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (6 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000097a30 <__libc_free@@GLIBC_2.2.5>:
   18.24 :   97a30:       push   %r15
    0.00 :   97a32:       push   %r14
    0.00 :   97a34:       push   %r13
    0.00 :   97a36:       push   %r12
    0.00 :   97a38:       mov    %rdi,%r12
    0.00 :   97a3b:       push   %rbp
    0.00 :   97a3c:       push   %rbx
    0.00 :   97a3d:       sub    $0x38,%rsp
    0.00 :   97a41:       mov    %fs:0x28,%rax
    0.00 :   97a4a:       mov    %rax,0x28(%rsp)
    0.00 :   97a4f:       xor    %eax,%eax
    0.00 :   97a51:       mov    0x353498(%rip),%rax        # 3eaef0 <__free_hook@@GLIBC_2.2.5-0x29f8>
    0.00 :   97a58:       mov    (%rax),%rax
    0.00 :   97a5b:       test   %rax,%rax
    0.00 :   97a5e:       jne    97d10 <__libc_free@@GLIBC_2.2.5+0x2e0>
    0.00 :   97a64:       test   %rdi,%rdi
    0.00 :   97a67:       je     97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97a6d:       mov    -0x8(%rdi),%rsi
   24.72 :   97a71:       lea    -0x10(%rdi),%r13
    0.00 :   97a75:       test   $0x2,%sil
    0.00 :   97a79:       jne    97bb8 <__libc_free@@GLIBC_2.2.5+0x188>
    0.00 :   97a7f:       mov    0x3532f2(%rip),%rbp        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   97a86:       cmpq   $0x0,%fs:0x0(%rbp)
    0.00 :   97a8c:       je     97f80 <__libc_free@@GLIBC_2.2.5+0x550>
    0.00 :   97a92:       test   $0x4,%sil
    0.00 :   97a96:       lea    0x3541a3(%rip),%rbx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
   24.72 :   97a9d:       jne    97ce8 <__libc_free@@GLIBC_2.2.5+0x2b8>
    0.00 :   97aa3:       mov    %rsi,%r14
    0.00 :   97aa6:       and    $0xfffffffffffffff8,%r14
    0.00 :   97aaa:       mov    %r14,%rax
    0.00 :   97aad:       neg    %rax
    0.00 :   97ab0:       cmp    %r13,%rax
    0.00 :   97ab3:       jb     97f00 <__libc_free@@GLIBC_2.2.5+0x4d0>
    0.00 :   97ab9:       test   $0xf,%r13b
    0.00 :   97abd:       jne    97f00 <__libc_free@@GLIBC_2.2.5+0x4d0>
    0.00 :   97ac3:       cmp    $0x1f,%r14
    0.00 :   97ac7:       jbe    97f10 <__libc_free@@GLIBC_2.2.5+0x4e0>
    0.00 :   97acd:       and    $0x8,%esi
    0.00 :   97ad0:       jne    97f10 <__libc_free@@GLIBC_2.2.5+0x4e0>
    0.00 :   97ad6:       mov    %fs:0x0(%rbp),%rdx
    0.00 :   97adb:       test   %rdx,%rdx
    0.00 :   97ade:       je     97b11 <__libc_free@@GLIBC_2.2.5+0xe1>
    0.00 :   97ae0:       lea    -0x11(%r14),%rax
    0.00 :   97ae4:       shr    $0x4,%rax
    0.00 :   97ae8:       cmp    0x3537e1(%rip),%rax        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   97aef:       jae    97b11 <__libc_free@@GLIBC_2.2.5+0xe1>
    0.00 :   97af1:       cmp    0x8(%r12),%rdx
    0.00 :   97af6:       je     981db <__libc_free@@GLIBC_2.2.5+0x7ab>
    0.00 :   97afc:       movsbq (%rdx,%rax,1),%rsi
    0.00 :   97b01:       cmp    0x3537d8(%rip),%rsi        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   97b08:       mov    %rsi,%rcx
    0.00 :   97b0b:       jb     97f20 <__libc_free@@GLIBC_2.2.5+0x4f0>
    0.00 :   97b11:       cmp    0x355e28(%rip),%r14        # 3ed940 <__malloc_initialize_hook@GLIBC_2.2.5+0x50>
    0.00 :   97b18:       ja     97d20 <__libc_free@@GLIBC_2.2.5+0x2f0>
    0.00 :   97b1e:       lea    0x0(%r13,%r14,1),%rdx
    0.00 :   97b23:       mov    0x8(%rdx),%rax
   20.78 :   97b27:       cmp    $0x10,%rax
    0.00 :   97b2b:       jbe    97fc0 <__libc_free@@GLIBC_2.2.5+0x590>
    0.00 :   97b31:       and    $0xfffffffffffffff8,%rax
    0.00 :   97b35:       cmp    0x888(%rbx),%rax
    0.00 :   97b3c:       jae    97fc0 <__libc_free@@GLIBC_2.2.5+0x590>
    0.00 :   97b42:       mov    0x355de4(%rip),%eax        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   97b48:       test   %eax,%eax
    0.00 :   97b4a:       jne    9819d <__libc_free@@GLIBC_2.2.5+0x76d>
    0.00 :   97b50:       movl   $0x1,0x8(%rbx)
    0.00 :   97b57:       lea    0x358e7a(%rip),%rsi        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   97b5e:       shr    $0x4,%r14d
    0.00 :   97b62:       lea    -0x2(%r14),%ecx
    0.00 :   97b66:       mov    (%rsi),%esi
    0.00 :   97b68:       lea    (%rbx,%rcx,8),%rax
    0.00 :   97b6c:       mov    0x10(%rax),%rdx
    0.00 :   97b70:       test   %esi,%esi
    0.00 :   97b72:       jne    9808f <__libc_free@@GLIBC_2.2.5+0x65f>
    0.00 :   97b78:       cmp    %rdx,%r13
    0.00 :   97b7b:       je     980e8 <__libc_free@@GLIBC_2.2.5+0x6b8>
    0.00 :   97b81:       mov    %rdx,(%r12)
    0.00 :   97b85:       mov    %r13,0x10(%rax)
    0.00 :   97b89:       nopl   0x0(%rax)
    0.00 :   97b90:       mov    0x28(%rsp),%rax
    0.00 :   97b95:       xor    %fs:0x28,%rax
    0.00 :   97b9e:       jne    9852c <__libc_free@@GLIBC_2.2.5+0xafc>
   11.54 :   97ba4:       add    $0x38,%rsp
    0.00 :   97ba8:       pop    %rbx
    0.00 :   97ba9:       pop    %rbp
    0.00 :   97baa:       pop    %r12
    0.00 :   97bac:       pop    %r13
    0.00 :   97bae:       pop    %r14
    0.00 :   97bb0:       pop    %r15
    0.00 :   97bb2:       retq
    0.00 :   97bb3:       nopl   0x0(%rax,%rax,1)
    0.00 :   97bb8:       mov    0x3536f6(%rip),%edi        # 3eb2b4 <__fpu_control@@GLIBC_2.2.5+0x110>
    0.00 :   97bbe:       mov    0x355d73(%rip),%rax        # 3ed938 <__malloc_initialize_hook@GLIBC_2.2.5+0x48>
    0.00 :   97bc5:       test   %edi,%edi
    0.00 :   97bc7:       jne    97c90 <__libc_free@@GLIBC_2.2.5+0x260>
    0.00 :   97bcd:       cmp    0x3536bc(%rip),%rsi        # 3eb290 <__fpu_control@@GLIBC_2.2.5+0xec>
    0.00 :   97bd4:       jbe    97c90 <__libc_free@@GLIBC_2.2.5+0x260>
    0.00 :   97bda:       cmp    $0x2000000,%rsi
    0.00 :   97be1:       ja     97c90 <__libc_free@@GLIBC_2.2.5+0x260>
    0.00 :   97be7:       cmp    %rax,%r13
    0.00 :   97bea:       jae    97c80 <__libc_free@@GLIBC_2.2.5+0x250>
    0.00 :   97bf0:       and    $0xfffffffffffffff8,%rsi
    0.00 :   97bf4:       lea    (%rsi,%rsi,1),%rax
    0.00 :   97bf8:       mov    %rsi,0x353691(%rip)        # 3eb290 <__fpu_control@@GLIBC_2.2.5+0xec>
    0.00 :   97bff:       mov    %rax,0x35367a(%rip)        # 3eb280 <__fpu_control@@GLIBC_2.2.5+0xdc>
    0.00 :   97c06:       nop
    0.00 :   97c07:       mov    -0x8(%r12),%rsi
    0.00 :   97c0c:       test   $0x2,%sil
    0.00 :   97c10:       jne    987ee <__libc_free@@GLIBC_2.2.5+0xdbe>
    0.00 :   97c16:       mov    0x3531d3(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   97c1d:       lea    0x11bfd5(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   97c24:       lea    0x11d095(%rip),%rbx        # 1b4cc0 <_libc_intl_domainname@@GLIBC_2.2.5+0x102c>
    0.00 :   97c2b:       mov    $0xb0f,%r9d
    0.00 :   97c31:       mov    (%rax),%rdx
    0.00 :   97c34:       lea    0x11c215(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   97c3b:       cmpb   $0x0,(%rdx)
    0.00 :   97c3e:       cmovne %rax,%rcx
    0.00 :   97c42:       sub    $0x8,%rsp
    0.00 :   97c46:       push   %rbx
    0.00 :   97c47:       push   %rax
    0.00 :   97c48:       lea    0x1213c1(%rip),%rax        # 1b9010 <_libc_intl_domainname@@GLIBC_2.2.5+0x537c>
    0.00 :   97c4f:       push   %rax
    0.00 :   97c50:       lea    0x11d021(%rip),%r8        # 1b4c78 <_libc_intl_domainname@@GLIBC_2.2.5+0xfe4>
    0.00 :   97c57:       lea    0x120a72(%rip),%rsi        # 1b86d0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4a3c>
    0.00 :   97c5e:       xor    %edi,%edi
    0.00 :   97c60:       xor    %eax,%eax
    0.00 :   97c62:       callq  7deb0 <psiginfo@@GLIBC_2.10+0x1780>
    0.00 :   97c67:       mov    0x353142(%rip),%rax        # 3eadb0 <stderr@@GLIBC_2.2.5-0x1a90>
    0.00 :   97c6e:       add    $0x20,%rsp
    0.00 :   97c72:       mov    (%rax),%rdi
    0.00 :   97c75:       callq  7e8c0 <_IO_fflush@@GLIBC_2.2.5>
    0.00 :   97c7a:       callq  407e0 <abort@@GLIBC_2.2.5>
    0.00 :   97c7f:       nop
    0.00 :   97c80:       cmp    0x355ca9(%rip),%r13        # 3ed930 <__malloc_initialize_hook@GLIBC_2.2.5+0x40>
    0.00 :   97c87:       jae    97bf0 <__libc_free@@GLIBC_2.2.5+0x1c0>
    0.00 :   97c8d:       nopl   (%rax)
    0.00 :   97c90:       and    $0xfffffffffffffff8,%rsi
    0.00 :   97c94:       cmp    %rax,%r13
    0.00 :   97c97:       jae    97d00 <__libc_free@@GLIBC_2.2.5+0x2d0>
    0.00 :   97c99:       mov    -0x10(%r12),%rax
    0.00 :   97c9e:       mov    %r13,%rdi
    0.00 :   97ca1:       sub    %rax,%rdi
    0.00 :   97ca4:       add    %rax,%rsi
    0.00 :   97ca7:       mov    0x3531aa(%rip),%rax        # 3eae58 <_rtld_global_ro@GLIBC_PRIVATE>
    0.00 :   97cae:       mov    %rdi,%rdx
    0.00 :   97cb1:       or     %rsi,%rdx
    0.00 :   97cb4:       mov    0x18(%rax),%rax
    0.00 :   97cb8:       sub    $0x1,%rax
    0.00 :   97cbc:       test   %rdx,%rax
    0.00 :   97cbf:       jne    97fb0 <__libc_free@@GLIBC_2.2.5+0x580>
    0.00 :   97cc5:       lock decl 0x3535dc(%rip)        # 3eb2a8 <__fpu_control@@GLIBC_2.2.5+0x104>
    0.00 :   97ccc:       mov    %rsi,%rax
    0.00 :   97ccf:       neg    %rax
    0.00 :   97cd2:       lock add %rax,0x3535de(%rip)        # 3eb2b8 <__fpu_control@@GLIBC_2.2.5+0x114>
    0.00 :   97cda:       callq  11b8b0 <__munmap@@GLIBC_PRIVATE>
    0.00 :   97cdf:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97ce4:       nopl   0x0(%rax)
    0.00 :   97ce8:       mov    %r13,%rax
    0.00 :   97ceb:       and    $0xfffffffffc000000,%rax
    0.00 :   97cf1:       mov    (%rax),%rbx
    0.00 :   97cf4:       jmpq   97aa3 <__libc_free@@GLIBC_2.2.5+0x73>
    0.00 :   97cf9:       nopl   0x0(%rax)
    0.00 :   97d00:       cmp    0x355c29(%rip),%r13        # 3ed930 <__malloc_initialize_hook@GLIBC_2.2.5+0x40>
    0.00 :   97d07:       jae    97c99 <__libc_free@@GLIBC_2.2.5+0x269>
    0.00 :   97d09:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97d0e:       xchg   %ax,%ax
    0.00 :   97d10:       mov    0x68(%rsp),%rsi
    0.00 :   97d15:       callq  *%rax
    0.00 :   97d17:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97d1c:       nopl   0x0(%rax)
    0.00 :   97d20:       testb  $0x2,-0x8(%r12)
    0.00 :   97d26:       jne    97fa0 <__libc_free@@GLIBC_2.2.5+0x570>
    0.00 :   97d2c:       lea    0x358ca5(%rip),%rax        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   97d33:       mov    $0x1,%ebp
    0.00 :   97d38:       mov    (%rax),%eax
    0.00 :   97d3a:       test   %eax,%eax
    0.00 :   97d3c:       jne    9821c <__libc_free@@GLIBC_2.2.5+0x7ec>
    0.00 :   97d42:       mov    0x60(%rbx),%rax
    0.00 :   97d46:       lea    0x0(%r13,%r14,1),%r15
    0.00 :   97d4b:       cmp    %rax,%r13
    0.00 :   97d4e:       je     98210 <__libc_free@@GLIBC_2.2.5+0x7e0>
    0.00 :   97d54:       testb  $0x2,0x4(%rbx)
    0.00 :   97d58:       je     97f4a <__libc_free@@GLIBC_2.2.5+0x51a>
    0.00 :   97d5e:       mov    0x8(%r15),%rax
    0.00 :   97d62:       test   $0x1,%al
    0.00 :   97d64:       je     97f70 <__libc_free@@GLIBC_2.2.5+0x540>
    0.00 :   97d6a:       mov    %rax,%rcx
    0.00 :   97d6d:       and    $0xfffffffffffffff8,%rcx
    0.00 :   97d71:       cmp    $0x10,%rax
    0.00 :   97d75:       jbe    98191 <__libc_free@@GLIBC_2.2.5+0x761>
    0.00 :   97d7b:       cmp    0x888(%rbx),%rcx
    0.00 :   97d82:       jae    98191 <__libc_free@@GLIBC_2.2.5+0x761>
    0.00 :   97d88:       mov    0x355b9e(%rip),%esi        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   97d8e:       test   %esi,%esi
    0.00 :   97d90:       jne    9825f <__libc_free@@GLIBC_2.2.5+0x82f>
    0.00 :   97d96:       testb  $0x1,-0x8(%r12)
    0.00 :   97d9c:       jne    97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   97d9e:       mov    -0x10(%r12),%rax
    0.00 :   97da3:       sub    %rax,%r13
    0.00 :   97da6:       add    %rax,%r14
    0.00 :   97da9:       mov    0x8(%r13),%rsi
    0.00 :   97dad:       mov    %rsi,%rax
    0.00 :   97db0:       and    $0xfffffffffffffff8,%rax
    0.00 :   97db4:       cmp    0x0(%r13,%rax,1),%rax
    0.00 :   97db9:       jne    98278 <__libc_free@@GLIBC_2.2.5+0x848>
    0.00 :   97dbf:       mov    0x10(%r13),%rax
    0.00 :   97dc3:       mov    0x18(%r13),%rdx
    0.00 :   97dc7:       cmp    0x18(%rax),%r13
    0.00 :   97dcb:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   97dd1:       cmp    0x10(%rdx),%r13
    0.00 :   97dd5:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   97ddb:       cmp    $0x3ff,%rsi
    0.00 :   97de2:       mov    %rdx,0x18(%rax)
    0.00 :   97de6:       mov    %rax,0x10(%rdx)
    0.00 :   97dea:       jbe    97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   97dec:       mov    0x20(%r13),%rdx
    0.00 :   97df0:       test   %rdx,%rdx
    0.00 :   97df3:       jne    984b4 <__libc_free@@GLIBC_2.2.5+0xa84>
    0.00 :   97df9:       nopl   0x0(%rax)
    0.00 :   97e00:       cmp    0x60(%rbx),%r15
    0.00 :   97e04:       je     98105 <__libc_free@@GLIBC_2.2.5+0x6d5>
    0.00 :   97e0a:       testb  $0x1,0x8(%r15,%rcx,1)
    0.00 :   97e10:       mov    0x8(%r15),%rax
    0.00 :   97e14:       jne    980f8 <__libc_free@@GLIBC_2.2.5+0x6c8>
    0.00 :   97e1a:       mov    %rax,%rdx
    0.00 :   97e1d:       and    $0xfffffffffffffff8,%rdx
    0.00 :   97e21:       cmp    (%r15,%rdx,1),%rdx
    0.00 :   97e25:       jne    98278 <__libc_free@@GLIBC_2.2.5+0x848>
    0.00 :   97e2b:       mov    0x10(%r15),%rdx
    0.00 :   97e2f:       mov    0x18(%r15),%rsi
    0.00 :   97e33:       cmp    0x18(%rdx),%r15
    0.00 :   97e37:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   97e3d:       cmp    0x10(%rsi),%r15
    0.00 :   97e41:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   97e47:       cmp    $0x3ff,%rax
    0.00 :   97e4d:       mov    %rsi,0x18(%rdx)
    0.00 :   97e51:       mov    %rdx,0x10(%rsi)
    0.00 :   97e55:       jbe    97e64 <__libc_free@@GLIBC_2.2.5+0x434>
    0.00 :   97e57:       mov    0x20(%r15),%rax
    0.00 :   97e5b:       test   %rax,%rax
    0.00 :   97e5e:       jne    98531 <__libc_free@@GLIBC_2.2.5+0xb01>
    0.00 :   97e64:       add    %rcx,%r14
    0.00 :   97e67:       mov    0x70(%rbx),%rax
    0.00 :   97e6b:       lea    0x60(%rbx),%rdx
    0.00 :   97e6f:       cmp    0x18(%rax),%rdx
    0.00 :   97e73:       jne    98462 <__libc_free@@GLIBC_2.2.5+0xa32>
    0.00 :   97e79:       cmp    $0x3ff,%r14
    0.00 :   97e80:       mov    %rax,0x10(%r13)
    0.00 :   97e84:       mov    %rdx,0x18(%r13)
    0.00 :   97e88:       jbe    97e9a <__libc_free@@GLIBC_2.2.5+0x46a>
    0.00 :   97e8a:       movq   $0x0,0x20(%r13)
    0.00 :   97e92:       movq   $0x0,0x28(%r13)
    0.00 :   97e9a:       mov    %r13,0x70(%rbx)
    0.00 :   97e9e:       mov    %r13,0x18(%rax)
    0.00 :   97ea2:       mov    %r14,%rax
    0.00 :   97ea5:       or     $0x1,%rax
    0.00 :   97ea9:       mov    %rax,0x8(%r13)
    0.00 :   97ead:       mov    %r14,0x0(%r13,%r14,1)
    0.00 :   97eb2:       cmp    $0xffff,%r14
    0.00 :   97eb9:       ja     9811c <__libc_free@@GLIBC_2.2.5+0x6ec>
    0.00 :   97ebf:       test   %ebp,%ebp
    0.00 :   97ec1:       jne    97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97ec7:       cmpl   $0x0,0x358b0a(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   97ece:       je     97ed7 <__libc_free@@GLIBC_2.2.5+0x4a7>
    0.00 :   97ed0:       lock decl (%rbx)
    0.00 :   97ed3:       jne    97edb <__libc_free@@GLIBC_2.2.5+0x4ab>
    0.00 :   97ed5:       jmp    97ef1 <__libc_free@@GLIBC_2.2.5+0x4c1>
    0.00 :   97ed7:       decl   (%rbx)
    0.00 :   97ed9:       je     97ef1 <__libc_free@@GLIBC_2.2.5+0x4c1>
    0.00 :   97edb:       lea    (%rbx),%rdi
    0.00 :   97ede:       sub    $0x80,%rsp
    0.00 :   97ee5:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   97eea:       add    $0x80,%rsp
    0.00 :   97ef1:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97ef6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   97f00:       lea    0x11ce01(%rip),%rdi        # 1b4d08 <_libc_intl_domainname@@GLIBC_2.2.5+0x1074>
    0.00 :   97f07:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97f0c:       nopl   0x0(%rax)
    0.00 :   97f10:       lea    0x11ce09(%rip),%rdi        # 1b4d20 <_libc_intl_domainname@@GLIBC_2.2.5+0x108c>
    0.00 :   97f17:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97f1c:       nopl   0x0(%rax)
    0.00 :   97f20:       cmp    $0x3f,%rax
    0.00 :   97f24:       ja     98050 <__libc_free@@GLIBC_2.2.5+0x620>
    0.00 :   97f2a:       lea    (%rdx,%rax,8),%rsi
    0.00 :   97f2e:       add    $0x1,%ecx
    0.00 :   97f31:       mov    %rdx,0x8(%r12)
    0.00 :   97f36:       mov    0x40(%rsi),%rdi
    0.00 :   97f3a:       mov    %rdi,(%r12)
    0.00 :   97f3e:       mov    %r12,0x40(%rsi)
    0.00 :   97f42:       mov    %cl,(%rdx,%rax,1)
    0.00 :   97f45:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97f4a:       mov    0x8(%rax),%rdx
    0.00 :   97f4e:       and    $0xfffffffffffffff8,%rdx
    0.00 :   97f52:       add    %rdx,%rax
    0.00 :   97f55:       cmp    %rax,%r15
    0.00 :   97f58:       jb     97d5e <__libc_free@@GLIBC_2.2.5+0x32e>
    0.00 :   97f5e:       lea    0x1208b3(%rip),%rdi        # 1b8818 <_libc_intl_domainname@@GLIBC_2.2.5+0x4b84>
    0.00 :   97f65:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97f6a:       nopw   0x0(%rax,%rax,1)
    0.00 :   97f70:       lea    0x1208c1(%rip),%rdi        # 1b8838 <_libc_intl_domainname@@GLIBC_2.2.5+0x4ba4>
    0.00 :   97f77:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97f7c:       nopl   0x0(%rax)
    0.00 :   97f80:       mov    0x352df9(%rip),%rax        # 3ead80 <h_errlist@@GLIBC_2.2.5+0xce0>
    0.00 :   97f87:       cmpb   $0x0,%fs:(%rax)
    0.00 :   97f8b:       jne    97a92 <__libc_free@@GLIBC_2.2.5+0x62>
    0.00 :   97f91:       callq  96530 <_IO_str_seekoff@@GLIBC_2.2.5+0x6040>
    0.00 :   97f96:       mov    -0x8(%r12),%rsi
    0.00 :   97f9b:       jmpq   97a92 <__libc_free@@GLIBC_2.2.5+0x62>
    0.00 :   97fa0:       mov    %r13,%rdi
    0.00 :   97fa3:       callq  92170 <_IO_str_seekoff@@GLIBC_2.2.5+0x1c80>
    0.00 :   97fa8:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97fad:       nopl   (%rax)
    0.00 :   97fb0:       lea    0x120769(%rip),%rdi        # 1b8720 <_libc_intl_domainname@@GLIBC_2.2.5+0x4a8c>
    0.00 :   97fb7:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97fbc:       nopl   0x0(%rax)
    0.00 :   97fc0:       mov    $0x1,%esi
    0.00 :   97fc5:       xor    %eax,%eax
    0.00 :   97fc7:       cmpl   $0x0,0x358a0a(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   97fce:       je     97fd8 <__libc_free@@GLIBC_2.2.5+0x5a8>
    0.00 :   97fd0:       lock cmpxchg %esi,(%rbx)
    0.00 :   97fd4:       jne    97fdd <__libc_free@@GLIBC_2.2.5+0x5ad>
    0.00 :   97fd6:       jmp    97ff3 <__libc_free@@GLIBC_2.2.5+0x5c3>
    0.00 :   97fd8:       cmpxchg %esi,(%rbx)
    0.00 :   97fdb:       je     97ff3 <__libc_free@@GLIBC_2.2.5+0x5c3>
    0.00 :   97fdd:       lea    (%rbx),%rdi
    0.00 :   97fe0:       sub    $0x80,%rsp
    0.00 :   97fe7:       callq  130520 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   97fec:       add    $0x80,%rsp
    0.00 :   97ff3:       mov    0x8(%rdx),%rax
    0.00 :   97ff7:       mov    $0x1,%edx
    0.00 :   97ffc:       cmp    $0x10,%rax
    0.00 :   98000:       jbe    98012 <__libc_free@@GLIBC_2.2.5+0x5e2>
    0.00 :   98002:       xor    %edx,%edx
    0.00 :   98004:       and    $0xfffffffffffffff8,%rax
    0.00 :   98008:       cmp    0x888(%rbx),%rax
    0.00 :   9800f:       setae  %dl
    0.00 :   98012:       cmpl   $0x0,0x3589bf(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   98019:       je     98022 <__libc_free@@GLIBC_2.2.5+0x5f2>
    0.00 :   9801b:       lock decl (%rbx)
    0.00 :   9801e:       jne    98026 <__libc_free@@GLIBC_2.2.5+0x5f6>
    0.00 :   98020:       jmp    9803c <__libc_free@@GLIBC_2.2.5+0x60c>
    0.00 :   98022:       decl   (%rbx)
    0.00 :   98024:       je     9803c <__libc_free@@GLIBC_2.2.5+0x60c>
    0.00 :   98026:       lea    (%rbx),%rdi
    0.00 :   98029:       sub    $0x80,%rsp
    0.00 :   98030:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   98035:       add    $0x80,%rsp
    0.00 :   9803c:       test   %edx,%edx
    0.00 :   9803e:       je     97b42 <__libc_free@@GLIBC_2.2.5+0x112>
    0.00 :   98044:       lea    0x12075d(%rip),%rdi        # 1b87a8 <_libc_intl_domainname@@GLIBC_2.2.5+0x4b14>
    0.00 :   9804b:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   98050:       mov    0x352d99(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   98057:       lea    0x11bb9b(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   9805e:       lea    0x11ccd0(%rip),%rbx        # 1b4d35 <_libc_intl_domainname@@GLIBC_2.2.5+0x10a1>
    0.00 :   98065:       mov    $0xb75,%r9d
    0.00 :   9806b:       mov    (%rax),%rdx
    0.00 :   9806e:       lea    0x11bddb(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98075:       cmpb   $0x0,(%rdx)
    0.00 :   98078:       cmovne %rax,%rcx
    0.00 :   9807c:       sub    $0x8,%rsp
    0.00 :   98080:       push   %rbx
    0.00 :   98081:       push   %rax
    0.00 :   98082:       lea    0x120fd7(%rip),%rax        # 1b9060 <_libc_intl_domainname@@GLIBC_2.2.5+0x53cc>
    0.00 :   98089:       push   %rax
    0.00 :   9808a:       jmpq   97c50 <__libc_free@@GLIBC_2.2.5+0x220>
    0.00 :   9808f:       cmp    %rdx,%r13
    0.00 :   98092:       je     980e8 <__libc_free@@GLIBC_2.2.5+0x6b8>
    0.00 :   98094:       lea    0x10(%rbx,%rcx,8),%rsi
    0.00 :   98099:       mov    %rdx,(%r12)
    0.00 :   9809d:       mov    %rdx,%rax
    0.00 :   980a0:       cmpl   $0x0,%fs:0x18
    0.00 :   980a9:       je     980ac <__libc_free@@GLIBC_2.2.5+0x67c>
    0.00 :   980ab:       lock cmpxchg %r13,(%rsi)
    0.00 :   980b0:       cmp    %rdx,%rax
    0.00 :   980b3:       mov    %rax,%rcx
    0.00 :   980b6:       jne    980e3 <__libc_free@@GLIBC_2.2.5+0x6b3>
    0.00 :   980b8:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   980bd:       nopl   (%rax)
    0.00 :   980c0:       mov    %rcx,(%r12)
    0.00 :   980c4:       mov    %rcx,%rax
    0.00 :   980c7:       cmpl   $0x0,%fs:0x18
    0.00 :   980d0:       je     980d3 <__libc_free@@GLIBC_2.2.5+0x6a3>
    0.00 :   980d2:       lock cmpxchg %r13,(%rsi)
    0.00 :   980d7:       cmp    %rcx,%rax
    0.00 :   980da:       je     97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   980e0:       mov    %rax,%rcx
    0.00 :   980e3:       cmp    %rcx,%r13
    0.00 :   980e6:       jne    980c0 <__libc_free@@GLIBC_2.2.5+0x690>
    0.00 :   980e8:       lea    0x1206e1(%rip),%rdi        # 1b87d0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4b3c>
    0.00 :   980ef:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   980f4:       nopl   0x0(%rax)
    0.00 :   980f8:       and    $0xfffffffffffffffe,%rax
    0.00 :   980fc:       mov    %rax,0x8(%r15)
    0.00 :   98100:       jmpq   97e67 <__libc_free@@GLIBC_2.2.5+0x437>
    0.00 :   98105:       add    %rcx,%r14
    0.00 :   98108:       mov    %r14,%rax
    0.00 :   9810b:       or     $0x1,%rax
    0.00 :   9810f:       mov    %rax,0x8(%r13)
    0.00 :   98113:       mov    %r13,0x60(%rbx)
    0.00 :   98117:       jmpq   97eb2 <__libc_free@@GLIBC_2.2.5+0x482>
    0.00 :   9811c:       mov    0x8(%rbx),%eax
    0.00 :   9811f:       test   %eax,%eax
    0.00 :   98121:       je     9812b <__libc_free@@GLIBC_2.2.5+0x6fb>
    0.00 :   98123:       mov    %rbx,%rdi
    0.00 :   98126:       callq  909e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0>
    0.00 :   9812b:       lea    0x353b0e(%rip),%rax        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   98132:       cmp    %rax,%rbx
    0.00 :   98135:       je     98438 <__libc_free@@GLIBC_2.2.5+0xa08>
    0.00 :   9813b:       mov    0x60(%rbx),%r12
    0.00 :   9813f:       mov    %r12,%r14
    0.00 :   98142:       and    $0xfffffffffc000000,%r14
    0.00 :   98149:       cmp    (%r14),%rbx
    0.00 :   9814c:       je     98284 <__libc_free@@GLIBC_2.2.5+0x854>
    0.00 :   98152:       mov    0x352c97(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   98159:       lea    0x11ba99(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   98160:       lea    0x11cc04(%rip),%rbx        # 1b4d6b <_libc_intl_domainname@@GLIBC_2.2.5+0x10d7>
    0.00 :   98167:       mov    $0x1135,%r9d
    0.00 :   9816d:       mov    (%rax),%rdx
    0.00 :   98170:       lea    0x11bcd9(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98177:       cmpb   $0x0,(%rdx)
    0.00 :   9817a:       cmovne %rax,%rcx
    0.00 :   9817e:       sub    $0x8,%rsp
    0.00 :   98182:       push   %rbx
    0.00 :   98183:       push   %rax
    0.00 :   98184:       lea    0x120ea5(%rip),%rax        # 1b9030 <_libc_intl_domainname@@GLIBC_2.2.5+0x539c>
    0.00 :   9818b:       push   %rax
    0.00 :   9818c:       jmpq   97c50 <__libc_free@@GLIBC_2.2.5+0x220>
    0.00 :   98191:       lea    0x1206c8(%rip),%rdi        # 1b8860 <_libc_intl_domainname@@GLIBC_2.2.5+0x4bcc>
    0.00 :   98198:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9819d:       movabs $0x101010101010101,%rcx
    0.00 :   981a7:       movzbl %al,%eax
    0.00 :   981aa:       lea    -0x10(%r14),%rdx
    0.00 :   981ae:       imul   %rcx,%rax
    0.00 :   981b2:       lea    0x8(%r12),%rdi
    0.00 :   981b7:       mov    %edx,%ecx
    0.00 :   981b9:       and    $0xfffffffffffffff8,%rdi
    0.00 :   981bd:       mov    %rax,(%r12)
    0.00 :   981c1:       mov    %rax,-0x8(%r12,%rcx,1)
    0.00 :   981c6:       mov    %r12,%rcx
    0.00 :   981c9:       sub    %rdi,%rcx
    0.00 :   981cc:       add    %ecx,%edx
    0.00 :   981ce:       shr    $0x3,%edx
    0.00 :   981d1:       mov    %edx,%ecx
    0.00 :   981d3:       rep stos %rax,%es:(%rdi)
    0.00 :   981d6:       jmpq   97b50 <__libc_free@@GLIBC_2.2.5+0x120>
    0.00 :   981db:       nop
    0.00 :   981dc:       mov    %fs:0x0(%rbp),%rdx
    0.00 :   981e1:       mov    0x40(%rdx,%rax,8),%rcx
    0.00 :   981e6:       test   %rcx,%rcx
    0.00 :   981e9:       jne    981fc <__libc_free@@GLIBC_2.2.5+0x7cc>
    0.00 :   981eb:       jmpq   97afc <__libc_free@@GLIBC_2.2.5+0xcc>
    0.00 :   981f0:       mov    (%rcx),%rcx
    0.00 :   981f3:       test   %rcx,%rcx
    0.00 :   981f6:       je     97afc <__libc_free@@GLIBC_2.2.5+0xcc>
    0.00 :   981fc:       cmp    %rcx,%r12
    0.00 :   981ff:       jne    981f0 <__libc_free@@GLIBC_2.2.5+0x7c0>
    0.00 :   98201:       lea    0x120570(%rip),%rdi        # 1b8778 <_libc_intl_domainname@@GLIBC_2.2.5+0x4ae4>
    0.00 :   98208:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9820d:       nopl   (%rax)
    0.00 :   98210:       lea    0x1205e1(%rip),%rdi        # 1b87f8 <_libc_intl_domainname@@GLIBC_2.2.5+0x4b64>
    0.00 :   98217:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9821c:       mov    %ebp,%esi
    0.00 :   9821e:       xor    %eax,%eax
    0.00 :   98220:       cmpl   $0x0,0x3587b1(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   98227:       je     98231 <__libc_free@@GLIBC_2.2.5+0x801>
    0.00 :   98229:       lock cmpxchg %esi,(%rbx)
    0.00 :   9822d:       jne    98236 <__libc_free@@GLIBC_2.2.5+0x806>
    0.00 :   9822f:       jmp    9824c <__libc_free@@GLIBC_2.2.5+0x81c>
    0.00 :   98231:       cmpxchg %esi,(%rbx)
    0.00 :   98234:       je     9824c <__libc_free@@GLIBC_2.2.5+0x81c>
    0.00 :   98236:       lea    (%rbx),%rdi
    0.00 :   98239:       sub    $0x80,%rsp
    0.00 :   98240:       callq  130520 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   98245:       add    $0x80,%rsp
    0.00 :   9824c:       xor    %ebp,%ebp
    0.00 :   9824e:       jmpq   97d42 <__libc_free@@GLIBC_2.2.5+0x312>
    0.00 :   98253:       lea    0x11c9e0(%rip),%rdi        # 1b4c3a <_libc_intl_domainname@@GLIBC_2.2.5+0xfa6>
    0.00 :   9825a:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9825f:       lea    -0x10(%r14),%rdx
    0.00 :   98263:       mov    %r12,%rdi
    0.00 :   98266:       mov    %rcx,(%rsp)
    0.00 :   9826a:       callq  211f0 <*ABS*+0x9ec40@plt>
    0.00 :   9826f:       mov    (%rsp),%rcx
    0.00 :   98273:       jmpq   97d96 <__libc_free@@GLIBC_2.2.5+0x366>
    0.00 :   98278:       lea    0x11c99e(%rip),%rdi        # 1b4c1d <_libc_intl_domainname@@GLIBC_2.2.5+0xf89>
    0.00 :   9827f:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   98284:       mov    0x352bcd(%rip),%rax        # 3eae58 <_rtld_global_ro@GLIBC_PRIVATE>
    0.00 :   9828b:       lea    0x20(%r14),%rsi
    0.00 :   9828f:       mov    0x352ff2(%rip),%r15        # 3eb288 <__fpu_control@@GLIBC_2.2.5+0xe4>
    0.00 :   98296:       cmp    %r12,%rsi
    0.00 :   98299:       mov    0x18(%rax),%rdx
    0.00 :   9829d:       jne    986de <__libc_free@@GLIBC_2.2.5+0xcae>
    0.00 :   982a3:       mov    0x8(%r14),%r13
    0.00 :   982a7:       mov    0x10(%r13),%rdi
    0.00 :   982ab:       lea    -0x10(%rdi),%rax
    0.00 :   982af:       lea    0x0(%r13,%rax,1),%r9
    0.00 :   982b4:       and    $0xf,%r9d
    0.00 :   982b8:       sub    %r9,%rax
    0.00 :   982bb:       add    %r13,%rax
    0.00 :   982be:       cmpq   $0x1,0x8(%rax)
    0.00 :   982c3:       jne    9846e <__libc_free@@GLIBC_2.2.5+0xa3e>
    0.00 :   982c9:       lea    0x20(%r15,%rdx,1),%rcx
    0.00 :   982ce:       mov    %rcx,(%rsp)
    0.00 :   982d2:       lea    -0x1(%rdx),%rcx
    0.00 :   982d6:       mov    %rcx,0x8(%rsp)
    0.00 :   982db:       sub    (%rax),%rax
    0.00 :   982de:       mov    %rax,%r12
    0.00 :   982e1:       mov    0x8(%rax),%rax
    0.00 :   982e5:       mov    %rax,%r11
    0.00 :   982e8:       and    $0xfffffffffffffff8,%r11
    0.00 :   982ec:       add    %r11,%r9
    0.00 :   982ef:       lea    0xf(%r9),%r11
    0.00 :   982f3:       cmp    $0x3e,%r11
    0.00 :   982f7:       ja     984e8 <__libc_free@@GLIBC_2.2.5+0xab8>
    0.00 :   982fd:       add    $0x10,%r9
    0.00 :   98301:       test   $0x1,%al
    0.00 :   98303:       jne    98309 <__libc_free@@GLIBC_2.2.5+0x8d9>
    0.00 :   98305:       add    (%r12),%r9
    0.00 :   98309:       lea    -0x1(%r9),%rax
    0.00 :   9830d:       cmp    $0x3fffffe,%rax
    0.00 :   98313:       ja     98565 <__libc_free@@GLIBC_2.2.5+0xb35>
    0.00 :   98319:       mov    $0x4000000,%eax
    0.00 :   9831e:       sub    %rdi,%rax
    0.00 :   98321:       add    %r9,%rax
    0.00 :   98324:       cmp    (%rsp),%rax
    0.00 :   98328:       jb     986db <__libc_free@@GLIBC_2.2.5+0xcab>
    0.00 :   9832e:       mov    0x10(%r14),%rax
    0.00 :   98332:       sub    %rax,0x888(%rbx)
    0.00 :   98339:       nop
    0.00 :   9833a:       lea    0x4000000(%r14),%rax
    0.00 :   98341:       cmp    %rax,0x3555c8(%rip)        # 3ed910 <__malloc_initialize_hook@GLIBC_2.2.5+0x20>
    0.00 :   98348:       je     98673 <__libc_free@@GLIBC_2.2.5+0xc43>
    0.00 :   9834e:       mov    $0x4000000,%esi
    0.00 :   98353:       mov    %r14,%rdi
    0.00 :   98356:       mov    %r9,0x18(%rsp)
    0.00 :   9835b:       mov    %rdx,0x10(%rsp)
    0.00 :   98360:       callq  11b8b0 <__munmap@@GLIBC_PRIVATE>
    0.00 :   98365:       testb  $0x1,0x8(%r12)
    0.00 :   9836b:       mov    0x10(%rsp),%rdx
    0.00 :   98370:       mov    0x18(%rsp),%r9
    0.00 :   98375:       jne    983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   98377:       sub    (%r12),%r12
    0.00 :   9837b:       mov    0x8(%r12),%rdi
    0.00 :   98380:       mov    %rdi,%rax
    0.00 :   98383:       and    $0xfffffffffffffff8,%rax
    0.00 :   98387:       cmp    (%r12,%rax,1),%rax
    0.00 :   9838b:       jne    98278 <__libc_free@@GLIBC_2.2.5+0x848>
    0.00 :   98391:       mov    0x10(%r12),%rax
    0.00 :   98396:       mov    0x18(%r12),%rsi
    0.00 :   9839b:       cmp    0x18(%rax),%r12
    0.00 :   9839f:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   983a5:       cmp    0x10(%rsi),%r12
    0.00 :   983a9:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   983af:       cmp    $0x3ff,%rdi
    0.00 :   983b6:       mov    %rsi,0x18(%rax)
    0.00 :   983ba:       mov    %rax,0x10(%rsi)
    0.00 :   983be:       jbe    983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   983c0:       mov    0x20(%r12),%rsi
    0.00 :   983c5:       test   %rsi,%rsi
    0.00 :   983c8:       jne    98798 <__libc_free@@GLIBC_2.2.5+0xd68>
    0.00 :   983ce:       lea    (%r12,%r9,1),%rax
    0.00 :   983d2:       test   %rax,0x8(%rsp)
    0.00 :   983d7:       jne    98609 <__libc_free@@GLIBC_2.2.5+0xbd9>
    0.00 :   983dd:       mov    0x10(%r13),%rsi
    0.00 :   983e1:       add    %r13,%rsi
    0.00 :   983e4:       cmp    %rsi,%rax
    0.00 :   983e7:       je     985bc <__libc_free@@GLIBC_2.2.5+0xb8c>
    0.00 :   983ed:       mov    0x3529fc(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   983f4:       mov    (%rax),%rdx
    0.00 :   983f7:       cmpb   $0x0,(%rdx)
    0.00 :   983fa:       je     98778 <__libc_free@@GLIBC_2.2.5+0xd48>
    0.00 :   98400:       lea    0x11ba49(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98407:       mov    %rax,%rcx
    0.00 :   9840a:       lea    0x12056f(%rip),%rbx        # 1b8980 <_libc_intl_domainname@@GLIBC_2.2.5+0x4cec>
    0.00 :   98411:       sub    $0x8,%rsp
    0.00 :   98415:       mov    $0x277,%r9d
    0.00 :   9841b:       lea    0x11c85f(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   98422:       push   %rbx
    0.00 :   98423:       push   %rax
    0.00 :   98424:       lea    0x120bf5(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   9842b:       push   %rax
    0.00 :   9842c:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   98431:       nopl   0x0(%rax)
    0.00 :   98438:       mov    0x60(%rbx),%rax
    0.00 :   9843c:       mov    0x8(%rax),%rax
    0.00 :   98440:       and    $0xfffffffffffffff8,%rax
    0.00 :   98444:       cmp    0x352e35(%rip),%rax        # 3eb280 <__fpu_control@@GLIBC_2.2.5+0xdc>
    0.00 :   9844b:       jb     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98451:       mov    0x352e30(%rip),%rdi        # 3eb288 <__fpu_control@@GLIBC_2.2.5+0xe4>
    0.00 :   98458:       callq  913e0 <_IO_str_seekoff@@GLIBC_2.2.5+0xef0>
    0.00 :   9845d:       jmpq   97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98462:       lea    0x12041f(%rip),%rdi        # 1b8888 <_libc_intl_domainname@@GLIBC_2.2.5+0x4bf4>
    0.00 :   98469:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9846e:       mov    0x35297b(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   98475:       lea    0x11b77d(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   9847c:       lea    0x12042d(%rip),%rbx        # 1b88b0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4c1c>
    0.00 :   98483:       mov    $0x264,%r9d
    0.00 :   98489:       lea    0x11c7f1(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   98490:       mov    (%rax),%rdx
    0.00 :   98493:       lea    0x11b9b6(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9849a:       cmpb   $0x0,(%rdx)
    0.00 :   9849d:       cmovne %rax,%rcx
    0.00 :   984a1:       sub    $0x8,%rsp
    0.00 :   984a5:       push   %rbx
    0.00 :   984a6:       push   %rax
    0.00 :   984a7:       lea    0x120b72(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   984ae:       push   %rax
    0.00 :   984af:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   984b4:       cmp    0x28(%rdx),%r13
    0.00 :   984b8:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   984be:       mov    0x28(%r13),%rsi
    0.00 :   984c2:       cmp    0x20(%rsi),%r13
    0.00 :   984c6:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   984cc:       cmpq   $0x0,0x20(%rax)
    0.00 :   984d1:       je     9864d <__libc_free@@GLIBC_2.2.5+0xc1d>
    0.00 :   984d7:       mov    %rsi,0x28(%rdx)
    0.00 :   984db:       mov    0x28(%r13),%rax
    0.00 :   984df:       mov    %rdx,0x20(%rax)
    0.00 :   984e3:       jmpq   97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   984e8:       mov    0x352901(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   984ef:       mov    (%rax),%rdx
    0.00 :   984f2:       cmpb   $0x0,(%rdx)
    0.00 :   984f5:       je     985a9 <__libc_free@@GLIBC_2.2.5+0xb79>
    0.00 :   984fb:       lea    0x11b94e(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98502:       mov    %rax,%rcx
    0.00 :   98505:       lea    0x1203d4(%rip),%rbx        # 1b88e0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4c4c>
    0.00 :   9850c:       sub    $0x8,%rsp
    0.00 :   98510:       mov    $0x267,%r9d
    0.00 :   98516:       lea    0x11c764(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   9851d:       push   %rbx
    0.00 :   9851e:       push   %rax
    0.00 :   9851f:       lea    0x120afa(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   98526:       push   %rax
    0.00 :   98527:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   9852c:       callq  134b10 <__stack_chk_fail@@GLIBC_2.4>
    0.00 :   98531:       cmp    0x28(%rax),%r15
    0.00 :   98535:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   9853b:       mov    0x28(%r15),%rsi
    0.00 :   9853f:       cmp    0x20(%rsi),%r15
    0.00 :   98543:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   98549:       cmpq   $0x0,0x20(%rdx)
    0.00 :   9854e:       je     986a2 <__libc_free@@GLIBC_2.2.5+0xc72>
    0.00 :   98554:       mov    %rsi,0x28(%rax)
    0.00 :   98558:       mov    0x28(%r15),%rdx
    0.00 :   9855c:       mov    %rax,0x20(%rdx)
    0.00 :   98560:       jmpq   97e64 <__libc_free@@GLIBC_2.2.5+0x434>
    0.00 :   98565:       mov    0x352884(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   9856c:       mov    (%rax),%rdx
    0.00 :   9856f:       cmpb   $0x0,(%rdx)
    0.00 :   98572:       je     9868f <__libc_free@@GLIBC_2.2.5+0xc5f>
    0.00 :   98578:       lea    0x11b8d1(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9857f:       mov    %rax,%rcx
    0.00 :   98582:       lea    0x120387(%rip),%rbx        # 1b8910 <_libc_intl_domainname@@GLIBC_2.2.5+0x4c7c>
    0.00 :   98589:       sub    $0x8,%rsp
    0.00 :   9858d:       mov    $0x26a,%r9d
    0.00 :   98593:       lea    0x11c6e7(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   9859a:       push   %rbx
    0.00 :   9859b:       push   %rax
    0.00 :   9859c:       lea    0x120a7d(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   985a3:       push   %rax
    0.00 :   985a4:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   985a9:       lea    0x11b649(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   985b0:       lea    0x11b899(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   985b7:       jmpq   98505 <__libc_free@@GLIBC_2.2.5+0xad5>
    0.00 :   985bc:       lea    0x20(%r13),%rax
    0.00 :   985c0:       or     $0x1,%r9
    0.00 :   985c4:       mov    %r12,0x60(%rbx)
    0.00 :   985c8:       mov    %r9,0x8(%r12)
    0.00 :   985cd:       cmp    %rax,%r12
    0.00 :   985d0:       jne    98818 <__libc_free@@GLIBC_2.2.5+0xde8>
    0.00 :   985d6:       mov    0x8(%r13),%r11
    0.00 :   985da:       mov    %r13,%r14
    0.00 :   985dd:       mov    %r12,%rsi
    0.00 :   985e0:       mov    0x10(%r11),%rdi
    0.00 :   985e4:       lea    -0x10(%rdi),%rax
    0.00 :   985e8:       lea    (%r11,%rax,1),%r9
    0.00 :   985ec:       and    $0xf,%r9d
    0.00 :   985f0:       sub    %r9,%rax
    0.00 :   985f3:       add    %r11,%rax
    0.00 :   985f6:       cmpq   $0x1,0x8(%rax)
    0.00 :   985fb:       jne    9846e <__libc_free@@GLIBC_2.2.5+0xa3e>
    0.00 :   98601:       mov    %r11,%r13
    0.00 :   98604:       jmpq   982db <__libc_free@@GLIBC_2.2.5+0x8ab>
    0.00 :   98609:       mov    0x3527e0(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   98610:       mov    (%rax),%rdx
    0.00 :   98613:       cmpb   $0x0,(%rdx)
    0.00 :   98616:       je     986c8 <__libc_free@@GLIBC_2.2.5+0xc98>
    0.00 :   9861c:       lea    0x11b82d(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98623:       mov    %rax,%rcx
    0.00 :   98626:       lea    0x120313(%rip),%rbx        # 1b8940 <_libc_intl_domainname@@GLIBC_2.2.5+0x4cac>
    0.00 :   9862d:       sub    $0x8,%rsp
    0.00 :   98631:       mov    $0x276,%r9d
    0.00 :   98637:       lea    0x11c643(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   9863e:       push   %rbx
    0.00 :   9863f:       push   %rax
    0.00 :   98640:       lea    0x1209d9(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   98647:       push   %rax
    0.00 :   98648:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   9864d:       cmp    %rdx,%r13
    0.00 :   98650:       je     9878b <__libc_free@@GLIBC_2.2.5+0xd5b>
    0.00 :   98656:       mov    %rdx,0x20(%rax)
    0.00 :   9865a:       mov    0x20(%r13),%rdx
    0.00 :   9865e:       mov    %rsi,0x28(%rax)
    0.00 :   98662:       mov    %rax,0x28(%rdx)
    0.00 :   98666:       mov    0x28(%r13),%rdx
    0.00 :   9866a:       mov    %rax,0x20(%rdx)
    0.00 :   9866e:       jmpq   97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   98673:       movq   $0x0,0x355292(%rip)        # 3ed910 <__malloc_initialize_hook@GLIBC_2.2.5+0x20>
    0.00 :   9867e:       jmpq   9834e <__libc_free@@GLIBC_2.2.5+0x91e>
    0.00 :   98683:       lea    0x11fd0e(%rip),%rdi        # 1b8398 <_libc_intl_domainname@@GLIBC_2.2.5+0x4704>
    0.00 :   9868a:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9868f:       lea    0x11b563(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   98696:       lea    0x11b7b3(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9869d:       jmpq   98582 <__libc_free@@GLIBC_2.2.5+0xb52>
    0.00 :   986a2:       cmp    %rax,%r15
    0.00 :   986a5:       je     987fe <__libc_free@@GLIBC_2.2.5+0xdce>
    0.00 :   986ab:       mov    %rax,0x20(%rdx)
    0.00 :   986af:       mov    0x20(%r15),%rax
    0.00 :   986b3:       mov    %rsi,0x28(%rdx)
    0.00 :   986b7:       mov    %rdx,0x28(%rax)
    0.00 :   986bb:       mov    0x28(%r15),%rax
    0.00 :   986bf:       mov    %rdx,0x20(%rax)
    0.00 :   986c3:       jmpq   97e64 <__libc_free@@GLIBC_2.2.5+0x434>
    0.00 :   986c8:       lea    0x11b52a(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   986cf:       lea    0x11b77a(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   986d6:       jmpq   98626 <__libc_free@@GLIBC_2.2.5+0xbf6>
    0.00 :   986db:       mov    %rsi,%r12
    0.00 :   986de:       mov    0x8(%r12),%rax
    0.00 :   986e3:       and    $0xfffffffffffffff8,%rax
    0.00 :   986e7:       cmp    %rax,0x352b92(%rip)        # 3eb280 <__fpu_control@@GLIBC_2.2.5+0xdc>
    0.00 :   986ee:       mov    %rax,(%rsp)
    0.00 :   986f2:       ja     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   986f8:       sub    $0x21,%rax
    0.00 :   986fc:       mov    %rax,%r13
    0.00 :   986ff:       js     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98705:       cmp    %rax,%r15
    0.00 :   98708:       jae    97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   9870e:       sub    %r15,%r13
    0.00 :   98711:       neg    %rdx
    0.00 :   98714:       and    %rdx,%r13
    0.00 :   98717:       je     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   9871d:       mov    0x10(%r14),%r15
    0.00 :   98721:       sub    %r13,%r15
    0.00 :   98724:       cmp    $0x1f,%r15
    0.00 :   98728:       jle    97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   9872e:       cmpl   $0x0,0x352b2b(%rip)        # 3eb260 <__fpu_control@@GLIBC_2.2.5+0xbc>
    0.00 :   98735:       js     98849 <__libc_free@@GLIBC_2.2.5+0xe19>
    0.00 :   9873b:       setne  %al
    0.00 :   9873e:       test   %al,%al
    0.00 :   98740:       lea    (%r14,%r15,1),%rdi
    0.00 :   98744:       jne    98820 <__libc_free@@GLIBC_2.2.5+0xdf0>
    0.00 :   9874a:       mov    $0x4,%edx
    0.00 :   9874f:       mov    %r13,%rsi
    0.00 :   98752:       callq  11b9b0 <__madvise@@GLIBC_PRIVATE>
    0.00 :   98757:       mov    %r15,0x10(%r14)
    0.00 :   9875b:       nop
    0.00 :   9875c:       mov    (%rsp),%rax
    0.00 :   98760:       sub    %r13,0x888(%rbx)
    0.00 :   98767:       sub    %r13,%rax
    0.00 :   9876a:       or     $0x1,%rax
    0.00 :   9876e:       mov    %rax,0x8(%r12)
    0.00 :   98773:       jmpq   97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98778:       lea    0x11b47a(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   9877f:       lea    0x11b6ca(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98786:       jmpq   9840a <__libc_free@@GLIBC_2.2.5+0x9da>
    0.00 :   9878b:       mov    %rax,0x28(%rax)
    0.00 :   9878f:       mov    %rax,0x20(%rax)
    0.00 :   98793:       jmpq   97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   98798:       cmp    0x28(%rsi),%r12
    0.00 :   9879c:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   987a2:       mov    0x28(%r12),%rdi
    0.00 :   987a7:       cmp    0x20(%rdi),%r12
    0.00 :   987ab:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   987b1:       cmpq   $0x0,0x20(%rax)
    0.00 :   987b6:       je     987ca <__libc_free@@GLIBC_2.2.5+0xd9a>
    0.00 :   987b8:       mov    %rdi,0x28(%rsi)
    0.00 :   987bc:       mov    0x28(%r12),%rax
    0.00 :   987c1:       mov    %rsi,0x20(%rax)
    0.00 :   987c5:       jmpq   983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   987ca:       cmp    %rsi,%r12
    0.00 :   987cd:       je     9880b <__libc_free@@GLIBC_2.2.5+0xddb>
    0.00 :   987cf:       mov    %rsi,0x20(%rax)
    0.00 :   987d3:       mov    0x20(%r12),%rsi
    0.00 :   987d8:       mov    %rdi,0x28(%rax)
    0.00 :   987dc:       mov    %rax,0x28(%rsi)
    0.00 :   987e0:       mov    0x28(%r12),%rsi
    0.00 :   987e5:       mov    %rax,0x20(%rsi)
    0.00 :   987e9:       jmpq   983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   987ee:       and    $0xfffffffffffffff8,%rsi
    0.00 :   987f2:       mov    0x35513f(%rip),%rax        # 3ed938 <__malloc_initialize_hook@GLIBC_2.2.5+0x48>
    0.00 :   987f9:       jmpq   97c94 <__libc_free@@GLIBC_2.2.5+0x264>
    0.00 :   987fe:       mov    %rdx,0x28(%rdx)
    0.00 :   98802:       mov    %rdx,0x20(%rdx)
    0.00 :   98806:       jmpq   97e64 <__libc_free@@GLIBC_2.2.5+0x434>
    0.00 :   9880b:       mov    %rax,0x28(%rax)
    0.00 :   9880f:       mov    %rax,0x20(%rax)
    0.00 :   98813:       jmpq   983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   98818:       mov    %r13,%r14
    0.00 :   9881b:       jmpq   986de <__libc_free@@GLIBC_2.2.5+0xcae>
    0.00 :   98820:       xor    %r9d,%r9d
    0.00 :   98823:       or     $0xffffffff,%r8d
    0.00 :   98827:       xor    %edx,%edx
    0.00 :   98829:       mov    $0x32,%ecx
    0.00 :   9882e:       mov    %r13,%rsi
    0.00 :   98831:       callq  11b7d0 <__mmap@@GLIBC_PRIVATE>
    0.00 :   98836:       add    $0x1,%rax
    0.00 :   9883a:       je     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98840:       mov    %r15,0x18(%r14)
    0.00 :   98844:       jmpq   98757 <__libc_free@@GLIBC_2.2.5+0xd27>
    0.00 :   98849:       mov    0x3525c8(%rip),%rax        # 3eae18 <__libc_enable_secure@GLIBC_PRIVATE>
    0.00 :   98850:       mov    (%rax),%ecx
    0.00 :   98852:       test   %ecx,%ecx
    0.00 :   98854:       mov    %ecx,0x352a06(%rip)        # 3eb260 <__fpu_control@@GLIBC_2.2.5+0xbc>
    0.00 :   9885a:       mov    %ecx,0x10(%rsp)
    0.00 :   9885e:       jne    98877 <__libc_free@@GLIBC_2.2.5+0xe47>
    0.00 :   98860:       lea    0x120151(%rip),%rdi        # 1b89b8 <_libc_intl_domainname@@GLIBC_2.2.5+0x4d24>
    0.00 :   98867:       xor    %eax,%eax
    0.00 :   98869:       mov    $0x80000,%esi
    0.00 :   9886e:       callq  10fe40 <__open_nocancel@@GLIBC_PRIVATE>
    0.00 :   98873:       test   %eax,%eax
    0.00 :   98875:       jns    98886 <__libc_free@@GLIBC_2.2.5+0xe56>
    0.00 :   98877:       cmpl   $0x0,0x3529e2(%rip)        # 3eb260 <__fpu_control@@GLIBC_2.2.5+0xbc>
    0.00 :   9887e:       setne  %al
    0.00 :   98881:       jmpq   9873e <__libc_free@@GLIBC_2.2.5+0xd0e>
    0.00 :   98886:       lea    0x27(%rsp),%rsi
    0.00 :   9888b:       mov    $0x1,%edx
    0.00 :   98890:       mov    %eax,%edi
    0.00 :   98892:       mov    %eax,0x8(%rsp)
    0.00 :   98896:       callq  1101e0 <__read_nocancel@@GLIBC_PRIVATE>
    0.00 :   9889b:       test   %rax,%rax
    0.00 :   9889e:       mov    0x8(%rsp),%r8d
    0.00 :   988a3:       mov    0x10(%rsp),%ecx
    0.00 :   988a7:       jle    988b3 <__libc_free@@GLIBC_2.2.5+0xe83>
    0.00 :   988a9:       xor    %ecx,%ecx
    0.00 :   988ab:       cmpb   $0x32,0x27(%rsp)
    0.00 :   988b0:       sete   %cl
    0.00 :   988b3:       mov    %r8d,%edi
    0.00 :   988b6:       mov    %ecx,0x3529a4(%rip)        # 3eb260 <__fpu_control@@GLIBC_2.2.5+0xbc>
    0.00 :   988bc:       callq  110a10 <__close_nocancel@@GLIBC_PRIVATE>
    0.00 :   988c1:       jmp    98877 <__libc_free@@GLIBC_2.2.5+0xe47>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c80f0 <onnxruntime::OpKernelInfo::GetAllocator(int, OrtMemType) const>:
         :            _ZNK11onnxruntime12OpKernelInfo12GetAllocatorEi10OrtMemType():
   37.42 :   5c80f0:       push   %rbx
    0.00 :   5c80f1:       mov    %rdi,%rbx
    0.00 :   5c80f4:       sub    $0x10,%rsp
    0.00 :   5c80f8:       mov    0x18(%rsi),%rsi
    0.00 :   5c80fc:       mov    %fs:0x28,%rax
    0.00 :   5c8105:       mov    %rax,0x8(%rsp)
    0.00 :   5c810a:       xor    %eax,%eax
    0.00 :   5c810c:       mov    (%rsi),%rax
   62.58 :   5c810f:       callq  *0x10(%rax)
    0.00 :   5c8112:       mov    0x8(%rsp),%rdi
    0.00 :   5c8117:       xor    %fs:0x28,%rdi
    0.00 :   5c8120:       jne    5c812b <onnxruntime::OpKernelInfo::GetAllocator(int, OrtMemType) const+0x3b>
    0.00 :   5c8122:       add    $0x10,%rsp
    0.00 :   5c8126:       mov    %rbx,%rax
    0.00 :   5c8129:       pop    %rbx
    0.00 :   5c812a:       retq
    0.00 :   5c812b:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005904e0 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)>:
         :            _ZN11onnxruntime8BFCArena12FindChunkPtrEimm():
    0.00 :   5904e0:       push   %r15
    0.00 :   5904e2:       push   %r14
    0.00 :   5904e4:       push   %r13
    0.00 :   5904e6:       push   %r12
    0.00 :   5904e8:       push   %rbp
    0.00 :   5904e9:       push   %rbx
    0.00 :   5904ea:       sub    $0xd8,%rsp
    0.00 :   5904f1:       mov    %fs:0x28,%rax
    0.00 :   5904fa:       mov    %rax,0xc8(%rsp)
    0.00 :   590502:       xor    %eax,%eax
    0.00 :   590504:       cmp    $0x14,%esi
    0.00 :   590507:       jg     59069f <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x1bf>
    0.00 :   59050d:       mov    %rdx,%r13
    0.00 :   590510:       movslq %esi,%rdx
    0.00 :   590513:       mov    %rdi,%rbp
    0.00 :   590516:       mov    %rcx,%r15
    0.00 :   590519:       lea    0x0(,%rdx,8),%rax
    0.00 :   590521:       sub    %rdx,%rax
    0.00 :   590524:       lea    0x3c(%rdi,%rax,8),%r12
    0.00 :   590529:       mov    $0x14,%eax
    0.00 :   59052e:       sub    %esi,%eax
    0.00 :   590530:       add    %rdx,%rax
    0.00 :   590533:       lea    0x0(,%rax,8),%rdx
    0.00 :   59053b:       sub    %rax,%rdx
    0.00 :   59053e:       lea    0x74(%rdi,%rdx,8),%rax
    0.00 :   590543:       mov    %rax,0x8(%rsp)
         :            *  element in the %set.  Iteration is done in ascending order according
         :            *  to the keys.
         :            */
         :            iterator
         :            begin() const _GLIBCXX_NOEXCEPT
         :            { return _M_t.begin(); }
    0.00 :   590548:       mov    0x10(%r12),%rax
    0.00 :   59054d:       lea    -0x10(%r12),%r14
    0.00 :   590552:       mov    %rax,0x18(%rsp)
    0.00 :   590557:       cmp    %rax,%r12
    0.00 :   59055a:       jne    590580 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0xa0>
    0.00 :   59055c:       jmpq   590690 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x1b0>
    0.00 :   590561:       nopl   0x0(%rax)
         :            { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
         :
         :            _Self&
         :            operator++() _GLIBCXX_NOEXCEPT
         :            {
         :            _M_node = _Rb_tree_increment(_M_node);
    0.00 :   590568:       mov    0x18(%rsp),%rdi
    0.00 :   59056d:       callq  534d0 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
    0.00 :   590572:       mov    %rax,0x18(%rsp)
    0.00 :   590577:       cmp    %rax,%r12
    0.00 :   59057a:       je     590690 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x1b0>
    0.00 :   590580:       mov    0x20(%rax),%rbx
   36.52 :   590584:       mov    %rbp,%rdi
    0.00 :   590587:       mov    %rbx,%rsi
    0.00 :   59058a:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   59058f:       cmpq   $0xffffffffffffffff,0x10(%rax)
   63.48 :   590594:       jne    5906a3 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x1c3>
    0.00 :   59059a:       cmp    %r13,(%rax)
    0.00 :   59059d:       jb     590568 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x88>
    0.00 :   59059f:       lea    0x18(%rsp),%rdx
    0.00 :   5905a4:       lea    0x8(%r14),%rsi
    0.00 :   5905a8:       mov    %rbp,%rdi
    0.00 :   5905ab:       mov    %rax,0x8(%rsp)
    0.00 :   5905b0:       callq  58fb20 <onnxruntime::BFCArena::RemoveFreeChunkIterFromBin(std::set<unsigned long, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >*, std::_Rb_tree_const_iterator<unsigned long> const&)>
    0.00 :   5905b5:       mov    0x8(%rsp),%rax
    0.00 :   5905ba:       lea    0x0(%r13,%r13,1),%rcx
    0.00 :   5905bf:       mov    (%rax),%rdx
    0.00 :   5905c2:       cmp    %rcx,%rdx
    0.00 :   5905c5:       jae    590670 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x190>
    0.00 :   5905cb:       movslq 0x594(%rbp),%rcx
    0.00 :   5905d2:       sub    %r13,%rdx
    0.00 :   5905d5:       cmp    %rcx,%rdx
    0.00 :   5905d8:       jge    590670 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x190>
    0.00 :   5905de:       mov    %r15,0x8(%rax)
    0.00 :   5905e2:       mov    0x520(%rbp),%rdx
    0.00 :   5905e9:       lea    0x1(%rdx),%rcx
    0.00 :   5905ed:       mov    %rcx,0x520(%rbp)
    0.00 :   5905f4:       mov    %rdx,0x10(%rax)
    0.00 :   5905f8:       addq   $0x1,0x528(%rbp)
    0.00 :   590600:       mov    (%rax),%rdx
    0.00 :   590603:       add    0x530(%rbp),%rdx
    0.00 :   59060a:       cmp    %rdx,0x540(%rbp)
    0.00 :   590611:       mov    %rdx,0x530(%rbp)
    0.00 :   590618:       cmovge 0x540(%rbp),%rdx
    0.00 :   590620:       mov    %rdx,0x540(%rbp)
    0.00 :   590627:       mov    0x548(%rbp),%rdx
    0.00 :   59062e:       cmp    %rdx,(%rax)
    0.00 :   590631:       cmovge (%rax),%rdx
    0.00 :   590635:       mov    %rdx,0x548(%rbp)
    0.00 :   59063c:       mov    0x18(%rax),%rax
    0.00 :   590640:       mov    0xc8(%rsp),%rcx
    0.00 :   590648:       xor    %fs:0x28,%rcx
    0.00 :   590651:       jne    59072e <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x24e>
    0.00 :   590657:       add    $0xd8,%rsp
    0.00 :   59065e:       pop    %rbx
    0.00 :   59065f:       pop    %rbp
    0.00 :   590660:       pop    %r12
    0.00 :   590662:       pop    %r13
    0.00 :   590664:       pop    %r14
    0.00 :   590666:       pop    %r15
    0.00 :   590668:       retq
    0.00 :   590669:       nopl   0x0(%rax)
    0.00 :   590670:       mov    %rbx,%rsi
    0.00 :   590673:       mov    %rbp,%rdi
    0.00 :   590676:       mov    %r13,%rdx
    0.00 :   590679:       callq  590070 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)>
    0.00 :   59067e:       mov    %rbx,%rsi
    0.00 :   590681:       mov    %rbp,%rdi
    0.00 :   590684:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   590689:       jmpq   5905de <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0xfe>
    0.00 :   59068e:       xchg   %ax,%ax
    0.00 :   590690:       add    $0x38,%r12
    0.00 :   590694:       cmp    0x8(%rsp),%r12
    0.00 :   590699:       jne    590548 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x68>
    0.00 :   59069f:       xor    %eax,%eax
    0.00 :   5906a1:       jmp    590640 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x160>
    0.00 :   5906a3:       mov    $0xa0,%edi
    0.00 :   5906a8:       lea    0x40(%rsp),%rbx
    0.00 :   5906ad:       lea    0x20(%rsp),%r13
    0.00 :   5906b2:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5906b7:       mov    %rbx,%rdi
    0.00 :   5906ba:       mov    %rax,%r12
    0.00 :   5906bd:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5906c2:       mov    %r13,%rdi
    0.00 :   5906c5:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5906ca:       lea    0x60(%rsp),%r14
    0.00 :   5906cf:       mov    %r13,%r8
    0.00 :   5906d2:       lea    0x2fbb47(%rip),%rcx        # 88c220 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5906d9:       mov    $0x144,%edx
    0.00 :   5906de:       lea    0x2faf43(%rip),%rsi        # 88b628 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   5906e5:       mov    %r14,%rdi
    0.00 :   5906e8:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5906ed:       mov    %rbx,%rcx
    0.00 :   5906f0:       lea    0x2fb103(%rip),%rdx        # 88b7fa <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x25a>
    0.00 :   5906f7:       mov    %r14,%rsi
    0.00 :   5906fa:       mov    %r12,%rdi
    0.00 :   5906fd:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   590702:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   590705:       add    $0x10,%rbx
    0.00 :   590709:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   59070e:       mov    %r13,%rdi
    0.00 :   590711:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   590716:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   59071b:       cmp    %rbx,%rdi
    0.00 :   59071e:       je     ad028 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   590724:       callq  53300 <operator delete(void*)@plt>
    0.00 :   590729:       jmpq   ad028 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]>
    0.00 :   59072e:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   590733:       mov    %rax,%rbp
    0.00 :   590736:       jmpq   ad03e <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]+0x16>
    0.00 :   59073b:       mov    %rax,%rbp
    0.00 :   59073e:       jmpq   ad046 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]+0x1e>
    0.00 :   590743:       mov    %rax,%rbp
    0.00 :   590746:       jmpq   ad04e <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]+0x26>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
         :           _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag():
         :           }
         :
         :           template<typename _CharT, typename _Traits, typename _Alloc>
         :           template<typename _InIterator>
         :           void
         :           basic_string<_CharT, _Traits, _Alloc>::
  100.00 :   fd260:       push   %r12
    0.00 :   fd262:       mov    %rsi,%r12
    0.00 :   fd265:       push   %rbp
    0.00 :   fd266:       mov    %rdi,%rbp
    0.00 :   fd269:       push   %rbx
    0.00 :   fd26a:       sub    $0x10,%rsp
    0.00 :   fd26e:       mov    %fs:0x28,%rax
    0.00 :   fd277:       mov    %rax,0x8(%rsp)
    0.00 :   fd27c:       xor    %eax,%eax
         :           _M_construct(_InIterator __beg, _InIterator __end,
         :           std::forward_iterator_tag)
         :           {
         :           // NB: Not required, but considered best practice.
         :           if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
    0.00 :   fd27e:       test   %rdx,%rdx
    0.00 :   fd281:       je     fd28c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x2c>
    0.00 :   fd283:       test   %rsi,%rsi
    0.00 :   fd286:       je     fd321 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0xc1>
         :           random_access_iterator_tag)
         :           {
         :           // concept requirements
         :           __glibcxx_function_requires(_RandomAccessIteratorConcept<
         :           _RandomAccessIterator>)
         :           return __last - __first;
    0.00 :   fd28c:       sub    %r12,%rdx
    0.00 :   fd28f:       mov    %rdx,%rbx
         :           std::__throw_logic_error(__N("basic_string::"
         :           "_M_construct null not valid"));
         :
         :           size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    0.00 :   fd292:       mov    %rdx,(%rsp)
         :
         :           if (__dnew > size_type(_S_local_capacity))
    0.00 :   fd296:       cmp    $0xf,%rdx
    0.00 :   fd29a:       ja     fd2f0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x90>
         :           _M_capacity(__dnew);
         :           }
         :
         :           // Check for out_of_range and length_error exceptions.
         :           __try
         :           { this->_S_copy_chars(_M_data(), __beg, __end); }
    0.00 :   fd29c:       mov    0x0(%rbp),%rax
         :           // When __n = 1 way faster than the general multichar
         :           // traits_type::copy/move/assign.
         :           static void
         :           _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
         :           {
         :           if (__n == 1)
    0.00 :   fd2a0:       cmp    $0x1,%rdx
    0.00 :   fd2a4:       jne    fd2e0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x80>
         :           traits_type::assign(*__d, *__s);
    0.00 :   fd2a6:       movzbl (%r12),%edx
         :           typedef streamoff         off_type;
         :           typedef mbstate_t         state_type;
         :
         :           static _GLIBCXX17_CONSTEXPR void
         :           assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :           { __c1 = __c2; }
    0.00 :   fd2ab:       mov    %dl,(%rax)
    0.00 :   fd2ad:       mov    (%rsp),%rbx
    0.00 :   fd2b1:       mov    0x0(%rbp),%rax
         :           { _M_string_length = __length; }
    0.00 :   fd2b5:       mov    %rbx,0x8(%rbp)
    0.00 :   fd2b9:       movb   $0x0,(%rax,%rbx,1)
         :           _M_dispose();
         :           __throw_exception_again;
         :           }
         :
         :           _M_set_length(__dnew);
         :           }
    0.00 :   fd2bd:       mov    0x8(%rsp),%rax
    0.00 :   fd2c2:       xor    %fs:0x28,%rax
    0.00 :   fd2cb:       jne    fd32d <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0xcd>
    0.00 :   fd2cd:       add    $0x10,%rsp
    0.00 :   fd2d1:       pop    %rbx
    0.00 :   fd2d2:       pop    %rbp
    0.00 :   fd2d3:       pop    %r12
    0.00 :   fd2d5:       retq
    0.00 :   fd2d6:       nopw   %cs:0x0(%rax,%rax,1)
         :           }
         :
         :           static char_type*
         :           copy(char_type* __s1, const char_type* __s2, size_t __n)
         :           {
         :           if (__n == 0)
    0.00 :   fd2e0:       test   %rdx,%rdx
    0.00 :   fd2e3:       je     fd2b5 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x55>
    0.00 :   fd2e5:       jmp    fd309 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0xa9>
    0.00 :   fd2e7:       nopw   0x0(%rax,%rax,1)
         :           _M_data(_M_create(__dnew, size_type(0)));
    0.00 :   fd2f0:       xor    %edx,%edx
    0.00 :   fd2f2:       mov    %rsp,%rsi
    0.00 :   fd2f5:       mov    %rbp,%rdi
    0.00 :   fd2f8:       callq  53c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
         :           { _M_allocated_capacity = __capacity; }
    0.00 :   fd2fd:       mov    (%rsp),%rdx
         :           { _M_dataplus._M_p = __p; }
    0.00 :   fd301:       mov    %rax,0x0(%rbp)
         :           { _M_allocated_capacity = __capacity; }
    0.00 :   fd305:       mov    %rdx,0x10(%rbp)
         :           return __s1;
         :           return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    0.00 :   fd309:       mov    %rbx,%rdx
    0.00 :   fd30c:       mov    %r12,%rsi
    0.00 :   fd30f:       mov    %rax,%rdi
    0.00 :   fd312:       callq  53150 <memcpy@plt>
    0.00 :   fd317:       mov    (%rsp),%rbx
    0.00 :   fd31b:       mov    0x0(%rbp),%rax
    0.00 :   fd31f:       jmp    fd2b5 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x55>
         :           std::__throw_logic_error(__N("basic_string::"
    0.00 :   fd321:       lea    0x728168(%rip),%rdi        # 825490 <_fini+0x1f8>
    0.00 :   fd328:       callq  52fb0 <std::__throw_logic_error(char const*)@plt>
         :           }
    0.00 :   fd32d:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of kvm.ko for cache-misses (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000015c40 <pvclock_gtod_notify>:
         :           pvclock_gtod_notify():
    0.00 :   15c40:       callq  15c45 <pvclock_gtod_notify+0x5>
   58.51 :   15c45:       push   %rbp
    0.00 :   15c46:       addl   $0x1,0x0(%rip)        # 15c4d <pvclock_gtod_notify+0xd>
   41.49 :   15c4d:       mov    0x98(%rdx),%rax
    0.00 :   15c54:       add    0x28(%rdx),%rax
    0.00 :   15c58:       mov    %rsp,%rbp
    0.00 :   15c5b:       mov    (%rdx),%rcx
    0.00 :   15c5e:       mov    %rax,0x0(%rip)        # 15c65 <pvclock_gtod_notify+0x25>
    0.00 :   15c65:       mov    0x20(%rdx),%rax
    0.00 :   15c69:       mov    0x24(%rcx),%ecx
    0.00 :   15c6c:       mov    %rax,0x0(%rip)        # 15c73 <pvclock_gtod_notify+0x33>
    0.00 :   15c73:       mov    0x70(%rdx),%rax
    0.00 :   15c77:       mov    %ecx,0x0(%rip)        # 15c7d <pvclock_gtod_notify+0x3d>
    0.00 :   15c7d:       mov    0x10(%rdx),%rcx
    0.00 :   15c81:       mov    %rax,0x0(%rip)        # 15c88 <pvclock_gtod_notify+0x48>
    0.00 :   15c88:       mov    %rcx,0x0(%rip)        # 15c8f <pvclock_gtod_notify+0x4f>
    0.00 :   15c8f:       mov    0x8(%rdx),%rcx
    0.00 :   15c93:       mov    %rcx,0x0(%rip)        # 15c9a <pvclock_gtod_notify+0x5a>
    0.00 :   15c9a:       mov    0x18(%rdx),%ecx
    0.00 :   15c9d:       mov    %ecx,0x0(%rip)        # 15ca3 <pvclock_gtod_notify+0x63>
    0.00 :   15ca3:       mov    0x1c(%rdx),%ecx
    0.00 :   15ca6:       mov    %ecx,0x0(%rip)        # 15cac <pvclock_gtod_notify+0x6c>
    0.00 :   15cac:       mov    0x0(%rip),%eax        # 15cb2 <pvclock_gtod_notify+0x72>
    0.00 :   15cb2:       addl   $0x1,0x0(%rip)        # 15cb9 <pvclock_gtod_notify+0x79>
    0.00 :   15cb9:       and    $0xfffffffd,%eax
    0.00 :   15cbc:       cmp    $0x1,%eax
    0.00 :   15cbf:       je     15ccb <pvclock_gtod_notify+0x8b>
    0.00 :   15cc1:       mov    0x0(%rip),%eax        # 15cc7 <pvclock_gtod_notify+0x87>
    0.00 :   15cc7:       test   %eax,%eax
    0.00 :   15cc9:       jne    15ccf <pvclock_gtod_notify+0x8f>
    0.00 :   15ccb:       xor    %eax,%eax
    0.00 :   15ccd:       pop    %rbp
    0.00 :   15cce:       retq
    0.00 :   15ccf:       mov    0x0(%rip),%rsi        # 15cd6 <pvclock_gtod_notify+0x96>
    0.00 :   15cd6:       mov    $0x0,%rdx
    0.00 :   15cdd:       mov    $0x2000,%edi
    0.00 :   15ce2:       callq  15ce7 <pvclock_gtod_notify+0xa7>
    0.00 :   15ce7:       xor    %eax,%eax
    0.00 :   15ce9:       pop    %rbp
    0.00 :   15cea:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c8150 <onnxruntime::OpKernelInfo::node() const>:
         :            _ZNK11onnxruntime12OpKernelInfo4nodeEv():
    0.00 :   5c8150:       mov    0x8(%rdi),%rax
  100.00 :   5c8154:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000592fa0 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const>:
         :            _ZNK11onnxruntime8BFCArena13RegionManager9RegionForEPKv():
    0.00 :   592fa0:       push   %r15
    0.00 :   592fa2:       push   %r14
    0.00 :   592fa4:       push   %r13
    0.00 :   592fa6:       push   %r12
    0.00 :   592fa8:       mov    %rsi,%r12
    0.00 :   592fab:       push   %rbp
    0.00 :   592fac:       push   %rbx
    0.00 :   592fad:       sub    $0x298,%rsp
    0.00 :   592fb4:       mov    0x8(%rdi),%r8
    0.00 :   592fb8:       mov    %fs:0x28,%rax
    0.00 :   592fc1:       mov    %rax,0x288(%rsp)
    0.00 :   592fc9:       xor    %eax,%eax
    0.00 :   592fcb:       mov    (%rdi),%rax
         :            template<typename _Iterator, typename _Container>
         :            inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :            operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
         :            const __normal_iterator<_Iterator, _Container>& __rhs)
         :            _GLIBCXX_NOEXCEPT
         :            { return __lhs.base() - __rhs.base(); }
    0.00 :   592fce:       mov    %r8,%rdx
    0.00 :   592fd1:       sub    %rax,%rdx
    0.00 :   592fd4:       sar    $0x5,%rdx
    0.00 :   592fd8:       jmp    592feb <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x4b>
    0.00 :   592fda:       nopw   0x0(%rax,%rax,1)
         :            __len = __half;
         :            else
         :            {
         :            __first = __middle;
         :            ++__first;
         :            __len = __len - __half - 1;
    0.00 :   592fe0:       sub    %rsi,%rdx
         :            ++_M_current;
    0.00 :   592fe3:       lea    0x20(%rcx),%rax
    0.00 :   592fe7:       sub    $0x1,%rdx
         :            while (__len > 0)
    0.00 :   592feb:       test   %rdx,%rdx
    0.00 :   592fee:       jle    59300e <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x6e>
         :            _DistanceType __half = __len >> 1;
    0.00 :   592ff0:       mov    %rdx,%rsi
    0.00 :   592ff3:       sar    %rsi
         :            { _M_current += __n; return *this; }
    0.00 :   592ff6:       mov    %rsi,%rcx
    0.00 :   592ff9:       shl    $0x5,%rcx
    0.00 :   592ffd:       add    %rax,%rcx
         :            if (__comp(__val, __middle))
    0.00 :   593000:       cmp    %r12,0x10(%rcx)
    0.00 :   593004:       jbe    592fe0 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x40>
         :            while (__len > 0)
    0.00 :   593006:       mov    %rsi,%rdx
    0.00 :   593009:       test   %rsi,%rsi
    0.00 :   59300c:       jne    592ff0 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x50>
  100.00 :   59300e:       cmp    %rax,%r8
    0.00 :   593011:       je     593040 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0xa0>
    0.00 :   593013:       mov    0x288(%rsp),%rbx
    0.00 :   59301b:       xor    %fs:0x28,%rbx
    0.00 :   593024:       jne    593448 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x4a8>
    0.00 :   59302a:       add    $0x298,%rsp
    0.00 :   593031:       pop    %rbx
    0.00 :   593032:       pop    %rbp
    0.00 :   593033:       pop    %r12
    0.00 :   593035:       pop    %r13
    0.00 :   593037:       pop    %r14
    0.00 :   593039:       pop    %r15
    0.00 :   59303b:       retq
    0.00 :   59303c:       nopl   0x0(%rax)
    0.00 :   593040:       lea    0x697e21(%rip),%rax        # c2ae68 <onnxruntime::logging::LoggingManager::s_default_logger_>
    0.00 :   593047:       mov    (%rax),%rax
    0.00 :   59304a:       test   %rax,%rax
    0.00 :   59304d:       je     59344d <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x4ad>
    0.00 :   593053:       cmpl   $0x4,0x28(%rax)
    0.00 :   593057:       jg     593422 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x482>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   59305d:       lea    0x30(%rsp),%r15
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593062:       lea    0x2f867f(%rip),%rdx        # 88b6e8 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x148>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593069:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   59306d:       lea    -0x38(%rdx),%rsi
    0.00 :   593071:       mov    %r15,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593074:       mov    %rax,0x30(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593079:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   59307e:       lea    0x2f92f4(%rip),%rdx        # 88c379 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const::__FUNCTION__+0x9>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593085:       lea    0x38(%r15),%rax
    0.00 :   593089:       movl   $0x139,0x50(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593091:       lea    0x28(%r15),%rdi
    0.00 :   593095:       lea    -0x9(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593099:       mov    %rax,0x58(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   59309e:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5930a3:       movq   $0x0,0x78(%rsp)
    0.00 :   5930ac:       lea    0x695bf5(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
    0.00 :   5930b3:       movq   $0x0,0x80(%rsp)
    0.00 :   5930bf:       movq   $0x0,0x88(%rsp)
    0.00 :   5930cb:       mov    (%rax),%rbx
    0.00 :   5930ce:       callq  114cc0 <onnxruntime::logging::LoggingManager::DefaultLogger()>
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5930d3:       mov    0x30(%rsp),%rsi
    0.00 :   5930d8:       mov    0x38(%rsp),%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5930dd:       lea    0x90(%rsp),%r13
    0.00 :   5930e5:       mov    %rax,0x90(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5930ed:       lea    0x20(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5930f1:       lea    0x30(%r13),%rax
    0.00 :   5930f5:       movl   $0x4,0x98(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593100:       add    %rsi,%rdx
    0.00 :   593103:       mov    %rbx,0xa0(%rsp)
    0.00 :   59310b:       movl   $0x0,0xa8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593116:       mov    %rax,0xb0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   59311e:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   593123:       mov    0x50(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593127:       mov    0x58(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   59312c:       lea    0x48(%r13),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593130:       mov    0x60(%rsp),%rdx
    0.00 :   593135:       mov    %eax,0xd0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   59313c:       lea    0x58(%r13),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593140:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593143:       mov    %rax,0xd8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   59314b:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   593150:       mov    0x80(%rsp),%r14
    0.00 :   593158:       mov    0x78(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   59315d:       movq   $0x0,0xf8(%rsp)
    0.00 :   593169:       movq   $0x0,0x100(%rsp)
    0.00 :   593175:       movq   $0x0,0x108(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   593181:       mov    %r14,%rbp
    0.00 :   593184:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   593187:       mov    %rbp,%rax
    0.00 :   59318a:       sar    $0x5,%rax
    0.00 :   59318e:       je     593430 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x490>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   593194:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   59319e:       cmp    %rdx,%rax
    0.00 :   5931a1:       ja     5934ea <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x54a>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5931a7:       mov    %rbp,%rdi
    0.00 :   5931aa:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5931af:       mov    %rax,0x8(%rsp)
    0.00 :   5931b4:       mov    0x80(%rsp),%r14
    0.00 :   5931bc:       mov    0x78(%rsp),%rbx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5931c1:       mov    0x8(%rsp),%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5931c6:       add    %rax,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5931c9:       mov    %rax,0xf8(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5931d1:       mov    %rax,0x100(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5931d9:       mov    %rbp,0x108(%rsp)
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5931e1:       cmp    %r14,%rbx
    0.00 :   5931e4:       je     59343e <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x49e>
         :            _ForwardIterator __cur = __result;
    0.00 :   5931ea:       mov    %rax,%rbp
    0.00 :   5931ed:       nopl   (%rax)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5931f0:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5931f4:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5931f7:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5931fb:       mov    (%rbx),%rsi
    0.00 :   5931fe:       mov    0x8(%rbx),%rdx
    0.00 :   593202:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593205:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   59320a:       add    $0x20,%rbx
    0.00 :   59320e:       add    $0x20,%rbp
    0.00 :   593212:       cmp    %rbx,%r14
    0.00 :   593215:       jne    5931f0 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x250>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   593217:       lea    0xf0(%r13),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   59321e:       mov    %rbp,0x100(%rsp)
    0.00 :   593226:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   59322b:       mov    0x6948f6(%rip),%rbp        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   593232:       xor    %esi,%esi
    0.00 :   593234:       movq   $0x0,0x258(%rsp)
    0.00 :   593240:       movq   $0x0,0x268(%rsp)
    0.00 :   59324c:       movq   $0x0,0x270(%rsp)
    0.00 :   593258:       lea    0x10(%rbp),%rax
    0.00 :   59325c:       mov    %rax,0x180(%rsp)
    0.00 :   593264:       xor    %eax,%eax
    0.00 :   593266:       mov    %ax,0x260(%rsp)
    0.00 :   59326e:       mov    0x694b2b(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   593275:       movq   $0x0,0x278(%rsp)
    0.00 :   593281:       mov    0x8(%rax),%rbx
    0.00 :   593285:       mov    0x10(%rax),%r14
    0.00 :   593289:       movq   $0x0,0x280(%rsp)
    0.00 :   593295:       mov    -0x18(%rbx),%rdx
    0.00 :   593299:       mov    %rbx,0x110(%rsp)
    0.00 :   5932a1:       lea    0x80(%r13,%rdx,1),%rdi
    0.00 :   5932a9:       mov    %r14,(%rdi)
    0.00 :   5932ac:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5932b1:       mov    0x694aa8(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5932b8:       lea    0xc0(%r13),%rdi
    0.00 :   5932bf:       movq   $0x0,0x120(%rsp)
    0.00 :   5932cb:       movq   $0x0,0x128(%rsp)
    0.00 :   5932d7:       movq   $0x0,0x130(%rsp)
    0.00 :   5932e3:       lea    0x18(%rax),%rdx
    0.00 :   5932e7:       add    $0x40,%rax
    0.00 :   5932eb:       mov    %rax,0x180(%rsp)
    0.00 :   5932f3:       mov    0x694966(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5932fa:       mov    %rdx,0x110(%rsp)
    0.00 :   593302:       movq   $0x0,0x138(%rsp)
    0.00 :   59330e:       add    $0x10,%rax
    0.00 :   593312:       mov    %rax,0x118(%rsp)
    0.00 :   59331a:       movq   $0x0,0x140(%rsp)
    0.00 :   593326:       movq   $0x0,0x148(%rsp)
    0.00 :   593332:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   593337:       mov    0x694c9a(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   59333e:       lea    0x88(%r13),%rsi
    0.00 :   593345:       lea    0xf0(%r13),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   59334c:       movl   $0x10,0x158(%rsp)
    0.00 :   593357:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   59335b:       movb   $0x0,0x170(%rsp)
    0.00 :   593363:       mov    %rax,0x118(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   59336b:       lea    0xe0(%r13),%rax
    0.00 :   593372:       mov    %rax,0x160(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   59337a:       movq   $0x0,0x168(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   593386:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   59338b:       lea    0x80(%r13),%rdi
    0.00 :   593392:       mov    $0x1a,%edx
    0.00 :   593397:       lea    0x2f8441(%rip),%rsi        # 88b7df <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x23f>
    0.00 :   59339e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__p); }
    0.00 :   5933a3:       lea    0x80(%r13),%rdi
    0.00 :   5933aa:       mov    %r12,%rsi
    0.00 :   5933ad:       callq  530b0 <std::ostream& std::ostream::_M_insert<void const*>(void const*)@plt>
    0.00 :   5933b2:       mov    %r13,%rdi
    0.00 :   5933b5:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5933ba:       mov    0x80(%rsp),%rbp
    0.00 :   5933c2:       mov    0x78(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   5933c7:       cmp    %rbx,%rbp
    0.00 :   5933ca:       je     5933ef <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x44f>
    0.00 :   5933cc:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5933d0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5933d3:       lea    0x10(%rbx),%rax
    0.00 :   5933d7:       cmp    %rax,%rdi
    0.00 :   5933da:       je     5933e1 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x441>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5933dc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5933e1:       add    $0x20,%rbx
    0.00 :   5933e5:       cmp    %rbx,%rbp
    0.00 :   5933e8:       jne    5933d0 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x430>
    0.00 :   5933ea:       mov    0x78(%rsp),%rbx
         :            if (__p)
    0.00 :   5933ef:       test   %rbx,%rbx
    0.00 :   5933f2:       je     5933fc <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x45c>
    0.00 :   5933f4:       mov    %rbx,%rdi
    0.00 :   5933f7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5933fc:       mov    0x58(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   593401:       lea    0x38(%r15),%rax
    0.00 :   593405:       cmp    %rax,%rdi
    0.00 :   593408:       je     59340f <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x46f>
    0.00 :   59340a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   59340f:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   593414:       add    $0x10,%r15
    0.00 :   593418:       cmp    %r15,%rdi
    0.00 :   59341b:       je     593422 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x482>
    0.00 :   59341d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   593422:       xor    %eax,%eax
    0.00 :   593424:       jmpq   593013 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x73>
    0.00 :   593429:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   593430:       movq   $0x0,0x8(%rsp)
    0.00 :   593439:       jmpq   5931c1 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x221>
         :            _ForwardIterator __cur = __result;
    0.00 :   59343e:       mov    0x8(%rsp),%rbp
    0.00 :   593443:       jmpq   593217 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x277>
    0.00 :   593448:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   59344d:       mov    $0xa0,%edi
    0.00 :   593452:       lea    0x30(%rsp),%r15
    0.00 :   593457:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   59345c:       lea    0x293cbd(%rip),%rsi        # 827120 <std::piecewise_construct+0x380>
    0.00 :   593463:       mov    %r15,%rdi
    0.00 :   593466:       mov    %rax,%rbp
    0.00 :   593469:       callq  58eec0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.122]>
    0.00 :   59346e:       lea    0x10(%rsp),%r12
    0.00 :   593473:       mov    %r12,%rdi
    0.00 :   593476:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   59347b:       lea    0x90(%rsp),%r13
    0.00 :   593483:       mov    %r12,%r8
    0.00 :   593486:       lea    0x2f9013(%rip),%rcx        # 88c4a0 <onnxruntime::logging::LoggingManager::DefaultLogger()::__PRETTY_FUNCTION__>
    0.00 :   59348d:       mov    $0x139,%edx
    0.00 :   593492:       lea    0x293cc7(%rip),%rsi        # 827160 <std::piecewise_construct+0x3c0>
    0.00 :   593499:       mov    %r13,%rdi
    0.00 :   59349c:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5934a1:       mov    %r15,%rcx
    0.00 :   5934a4:       xor    %edx,%edx
    0.00 :   5934a6:       mov    %r13,%rsi
    0.00 :   5934a9:       mov    %rbp,%rdi
    0.00 :   5934ac:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5934b1:       mov    %r13,%rdi
    0.00 :   5934b4:       add    $0x10,%r15
    0.00 :   5934b8:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5934bd:       mov    %r12,%rdi
    0.00 :   5934c0:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5934c5:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5934ca:       cmp    %r15,%rdi
    0.00 :   5934cd:       je     5934d4 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x534>
    0.00 :   5934cf:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5934d4:       lea    -0x499dbb(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   5934db:       lea    0x67e14e(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   5934e2:       mov    %rbp,%rdi
    0.00 :   5934e5:       callq  53bc0 <__cxa_throw@plt>
         :            std::__throw_bad_alloc();
    0.00 :   5934ea:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5934ef:       mov    %rax,%rbx
    0.00 :   5934f2:       jmp    593515 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x575>
    0.00 :   5934f4:       mov    %rax,%rbx
    0.00 :   5934f7:       jmp    593543 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5a3>
    0.00 :   5934f9:       mov    %rax,%rbx
    0.00 :   5934fc:       jmp    59352b <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x58b>
         :            std::_Construct(std::__addressof(*__cur), *__first);
         :            return __cur;
         :            }
         :            __catch(...)
    0.00 :   5934fe:       callq  53ad0 <__cxa_end_catch@plt>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   593503:       mov    0xf8(%rsp),%rdi
         :            if (__p)
    0.00 :   59350b:       test   %rdi,%rdi
    0.00 :   59350e:       je     593515 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x575>
         :            ::operator delete(__p);
    0.00 :   593510:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   593515:       mov    0xd8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   59351d:       lea    0x58(%r13),%rax
    0.00 :   593521:       cmp    %rax,%rdi
    0.00 :   593524:       je     59352b <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x58b>
    0.00 :   593526:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   59352b:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   593533:       add    $0x30,%r13
    0.00 :   593537:       cmp    %r13,%rdi
    0.00 :   59353a:       je     59354b <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5ab>
    0.00 :   59353c:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   593541:       jmp    59354b <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5ab>
    0.00 :   593543:       mov    %r13,%rdi
    0.00 :   593546:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   59354b:       mov    %r15,%rdi
    0.00 :   59354e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   593553:       mov    %rbx,%rdi
    0.00 :   593556:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   59355b:       mov    %rax,%rbx
    0.00 :   59355e:       jmp    593565 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5c5>
    0.00 :   593560:       mov    %rax,%rbx
    0.00 :   593563:       jmp    59356d <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5cd>
    0.00 :   593565:       mov    %r12,%rdi
    0.00 :   593568:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   59356d:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   593572:       add    $0x10,%r15
    0.00 :   593576:       cmp    %r15,%rdi
    0.00 :   593579:       je     593580 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5e0>
         :            ::operator delete(__p);
    0.00 :   59357b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   593580:       mov    %rbp,%rdi
    0.00 :   593583:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   593588:       mov    %rbx,%rdi
    0.00 :   59358b:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   593590:       mov    %rax,%rbx
    0.00 :   593593:       jmp    593580 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5e0>
    0.00 :   593595:       mov    %rax,%rdi
    0.00 :   593598:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   59359d:       cmp    %rbp,0x8(%rsp)
    0.00 :   5935a2:       jne    593609 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x669>
         :            {
         :            std::_Destroy(__result, __cur);
         :            __throw_exception_again;
    0.00 :   5935a4:       callq  53870 <__cxa_rethrow@plt>
    0.00 :   5935a9:       mov    %rax,%r12
    0.00 :   5935ac:       jmp    5935b3 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x613>
    0.00 :   5935ae:       mov    %rax,%rbx
    0.00 :   5935b1:       jmp    5935d6 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x636>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5935b3:       lea    0x88(%r13),%rdi
    0.00 :   5935ba:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
         :            ~basic_ostream() { }
    0.00 :   5935bf:       mov    -0x18(%rbx),%rax
    0.00 :   5935c3:       mov    %rbx,0x110(%rsp)
    0.00 :   5935cb:       mov    %r12,%rbx
    0.00 :   5935ce:       mov    %r14,0x110(%rsp,%rax,1)
         :            ~basic_ios() { }
    0.00 :   5935d6:       lea    0x10(%rbp),%rax
    0.00 :   5935da:       lea    0xf0(%r13),%rdi
    0.00 :   5935e1:       mov    %rax,0x180(%rsp)
    0.00 :   5935e9:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5935ee:       lea    0x20(%r13),%rdi
    0.00 :   5935f2:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5935f7:       jmpq   59354b <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5ab>
    0.00 :   5935fc:       mov    %rax,%rbx
    0.00 :   5935ff:       jmpq   59354b <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5ab>
    0.00 :   593604:       mov    %rax,%rbx
    0.00 :   593607:       jmp    59362a <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x68a>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   593609:       mov    0x8(%rsp),%rax
    0.00 :   59360e:       mov    (%rax),%rdi
         :            if (!_M_is_local())
    0.00 :   593611:       add    $0x10,%rax
    0.00 :   593615:       cmp    %rax,%rdi
    0.00 :   593618:       je     59361f <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x67f>
    0.00 :   59361a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   59361f:       addq   $0x20,0x8(%rsp)
    0.00 :   593625:       jmpq   59359d <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5fd>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   59362a:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   59362f:       add    $0x10,%r15
    0.00 :   593633:       cmp    %r15,%rdi
    0.00 :   593636:       je     593553 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5b3>
    0.00 :   59363c:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   593641:       jmpq   593553 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x5b3>
    0.00 :   593646:       mov    %rax,%rbx
    0.00 :   593649:       jmpq   5934fe <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const+0x55e>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000002a8b00 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)>:
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
    0.00 :   2a8b00:       push   %r15
    0.00 :   2a8b02:       push   %r14
    0.00 :   2a8b04:       push   %r13
    0.00 :   2a8b06:       push   %r12
    0.00 :   2a8b08:       push   %rbp
    0.00 :   2a8b09:       push   %rbx
    0.00 :   2a8b0a:       sub    $0x288,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2a8b11:       mov    0x8(%rcx),%rbp
    0.00 :   2a8b15:       sub    (%rcx),%rbp
  100.00 :   2a8b18:       mov    %r8d,(%rsp)
    0.00 :   2a8b1c:       mov    0x8(%rdx),%r8
    0.00 :   2a8b20:       mov    %rdi,0x18(%rsp)
    0.00 :   2a8b25:       sub    (%rdx),%r8
    0.00 :   2a8b28:       mov    %r9d,0x8(%rsp)
    0.00 :   2a8b2d:       mov    %fs:0x28,%rax
    0.00 :   2a8b36:       mov    %rax,0x278(%rsp)
    0.00 :   2a8b3e:       xor    %eax,%eax
    0.00 :   2a8b40:       sar    $0x3,%rbp
    0.00 :   2a8b44:       sete   %r13b
    0.00 :   2a8b48:       sar    $0x3,%r8
    0.00 :   2a8b4c:       sete   %al
    0.00 :   2a8b4f:       or     %al,%r13b
    0.00 :   2a8b52:       je     2a9280 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x780>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b58:       lea    0xa0(%rsp),%rbp
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8b60:       lea    0x5a1f1e(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b67:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8b6b:       lea    -0x45(%rdx),%rsi
    0.00 :   2a8b6f:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b72:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8b7a:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a8b7f:       lea    0x5a2119(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b86:       lea    0x38(%rbp),%rax
    0.00 :   2a8b8a:       movl   $0x23,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8b95:       lea    0x28(%rbp),%rdi
    0.00 :   2a8b99:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b9d:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8ba5:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2a8baa:       lea    0x100(%rsp),%rbx
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a8bb2:       movq   $0x0,0xe8(%rsp)
    0.00 :   2a8bbe:       movq   $0x0,0xf0(%rsp)
    0.00 :   2a8bca:       lea    0x70(%rbx),%rdi
    0.00 :   2a8bce:       movq   $0x0,0xf8(%rsp)
    0.00 :   2a8bda:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2a8bdf:       mov    0x97ef42(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a8be6:       xor    %r9d,%r9d
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   2a8be9:       xor    %esi,%esi
    0.00 :   2a8beb:       mov    %r9w,0x250(%rsp)
    0.00 :   2a8bf4:       mov    %rax,0x20(%rsp)
    0.00 :   2a8bf9:       add    $0x10,%rax
    0.00 :   2a8bfd:       mov    %rax,0x170(%rsp)
    0.00 :   2a8c05:       mov    0x97f194(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2a8c0c:       movq   $0x0,0x248(%rsp)
    0.00 :   2a8c18:       mov    0x8(%rax),%r13
    0.00 :   2a8c1c:       mov    0x10(%rax),%r14
    0.00 :   2a8c20:       movq   $0x0,0x258(%rsp)
    0.00 :   2a8c2c:       movq   $0x0,0x260(%rsp)
    0.00 :   2a8c38:       mov    -0x18(%r13),%rdi
    0.00 :   2a8c3c:       mov    %r13,0x100(%rsp)
    0.00 :   2a8c44:       movq   $0x0,0x268(%rsp)
    0.00 :   2a8c50:       movq   $0x0,0x270(%rsp)
    0.00 :   2a8c5c:       add    %rbx,%rdi
    0.00 :   2a8c5f:       mov    %r14,(%rdi)
    0.00 :   2a8c62:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2a8c67:       mov    0x97f0f2(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   2a8c6e:       lea    0x40(%rbx),%rdi
    0.00 :   2a8c72:       movq   $0x0,0x110(%rsp)
    0.00 :   2a8c7e:       movq   $0x0,0x118(%rsp)
    0.00 :   2a8c8a:       lea    0x18(%r12),%rax
    0.00 :   2a8c8f:       movq   $0x0,0x120(%rsp)
    0.00 :   2a8c9b:       mov    %rax,0x100(%rsp)
    0.00 :   2a8ca3:       lea    0x40(%r12),%rax
    0.00 :   2a8ca8:       mov    %rax,0x170(%rsp)
    0.00 :   2a8cb0:       mov    0x97efa9(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a8cb7:       movq   $0x0,0x128(%rsp)
    0.00 :   2a8cc3:       mov    %rax,0x8(%rsp)
    0.00 :   2a8cc8:       add    $0x10,%rax
    0.00 :   2a8ccc:       mov    %rax,0x108(%rsp)
    0.00 :   2a8cd4:       movq   $0x0,0x130(%rsp)
    0.00 :   2a8ce0:       movq   $0x0,0x138(%rsp)
    0.00 :   2a8cec:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a8cf1:       mov    0x97f2e0(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a8cf8:       lea    0x8(%rbx),%rsi
    0.00 :   2a8cfc:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a8d00:       movl   $0x10,0x148(%rsp)
    0.00 :   2a8d0b:       mov    %rax,0x10(%rsp)
    0.00 :   2a8d10:       add    $0x10,%rax
    0.00 :   2a8d14:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a8d1c:       lea    0x60(%rbx),%rax
    0.00 :   2a8d20:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a8d28:       movq   $0x0,0x158(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   2a8d34:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a8d3c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            size_type
         :            find_last_of(const _CharT* __s, size_type __pos = npos) const
         :            _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_string(__s);
         :            return this->find_last_of(__s, __pos, traits_type::length(__s));
    0.00 :   2a8d41:       mov    $0xffffffffffffffff,%rdx
    0.00 :   2a8d48:       mov    $0x2,%ecx
    0.00 :   2a8d4d:       lea    0x57e3b4(%rip),%rsi        # 827108 <std::piecewise_construct+0x368>
    0.00 :   2a8d54:       mov    %rbp,%rdi
    0.00 :   2a8d57:       callq  53ec0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const@plt>
         :            if (__pos > this->size())
    0.00 :   2a8d5c:       mov    0xa8(%rsp),%rdx
    0.00 :   2a8d64:       add    $0x1,%rax
    0.00 :   2a8d68:       cmp    %rdx,%rax
    0.00 :   2a8d6b:       ja     2ab6e2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2be2>
         :            + __str._M_check(__pos, "basic_string::basic_string");
    0.00 :   2a8d71:       mov    0xa0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a8d79:       lea    0x80(%rsp),%rdi
    0.00 :   2a8d81:       lea    0x10(%rdi),%rcx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8d85:       mov    %rdi,(%rsp)
         :            _M_construct(__start, __start + __str._M_limit(__pos, __n));
    0.00 :   2a8d89:       add    %rsi,%rdx
         :            const _CharT* __start = __str._M_data()
    0.00 :   2a8d8c:       add    %rax,%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a8d8f:       mov    %rcx,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8d97:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2a8d9c:       mov    0x88(%rsp),%rdx
    0.00 :   2a8da4:       mov    0x80(%rsp),%rsi
    0.00 :   2a8dac:       mov    %rbx,%rdi
    0.00 :   2a8daf:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   2a8db4:       mov    $0x1,%edx
    0.00 :   2a8db9:       lea    0x5fd6f6(%rip),%rsi        # 8a64b6 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0x9a>
    0.00 :   2a8dc0:       mov    %rax,%rdi
    0.00 :   2a8dc3:       mov    %rax,%r15
    0.00 :   2a8dc6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a8dcb:       mov    0xc0(%rsp),%esi
    0.00 :   2a8dd2:       mov    %r15,%rdi
    0.00 :   2a8dd5:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   2a8dda:       mov    $0x1,%edx
    0.00 :   2a8ddf:       lea    0x57e955(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2a8de6:       mov    %rax,%rdi
    0.00 :   2a8de9:       mov    %rax,%r15
    0.00 :   2a8dec:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a8df1:       mov    0xd0(%rsp),%rdx
    0.00 :   2a8df9:       mov    0xc8(%rsp),%rsi
    0.00 :   2a8e01:       mov    %r15,%rdi
    0.00 :   2a8e04:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!_M_is_local())
    0.00 :   2a8e09:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a8e0d:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a8e15:       add    $0x10,%rax
    0.00 :   2a8e19:       cmp    %rax,%rdi
    0.00 :   2a8e1c:       je     2a8e23 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x323>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2a8e1e:       callq  53300 <operator delete(void*)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8e23:       lea    0x60(%rsp),%r15
    0.00 :   2a8e28:       movb   $0x0,0x70(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a8e2d:       movq   $0x0,0x68(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8e36:       lea    0x10(%r15),%rax
    0.00 :   2a8e3a:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   2a8e3f:       mov    0x130(%rsp),%rax
    0.00 :   2a8e47:       test   %rax,%rax
    0.00 :   2a8e4a:       je     2a96d0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xbd0>
         :            if (this->pptr() > this->egptr())
    0.00 :   2a8e50:       mov    0x120(%rsp),%r8
    0.00 :   2a8e58:       mov    0x128(%rsp),%rcx
    0.00 :   2a8e60:       cmp    %r8,%rax
    0.00 :   2a8e63:       ja     2a9260 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x760>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a8e69:       sub    %rcx,%r8
    0.00 :   2a8e6c:       xor    %edx,%edx
    0.00 :   2a8e6e:       xor    %esi,%esi
    0.00 :   2a8e70:       mov    %r15,%rdi
    0.00 :   2a8e73:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   2a8e78:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a8e7d:       mov    0x150(%rsp),%rdi
    0.00 :   2a8e85:       mov    %rax,0x100(%rsp)
    0.00 :   2a8e8d:       lea    0x40(%r12),%rax
    0.00 :   2a8e92:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2a8e9a:       mov    0x10(%rsp),%rax
    0.00 :   2a8e9f:       add    $0x10,%rax
    0.00 :   2a8ea3:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2a8eab:       lea    0x60(%rbx),%rax
    0.00 :   2a8eaf:       cmp    %rax,%rdi
    0.00 :   2a8eb2:       je     2a8eb9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x3b9>
    0.00 :   2a8eb4:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2a8eb9:       mov    0x8(%rsp),%rax
    0.00 :   2a8ebe:       lea    0x40(%rbx),%rdi
    0.00 :   2a8ec2:       add    $0x10,%rax
    0.00 :   2a8ec6:       mov    %rax,0x108(%rsp)
    0.00 :   2a8ece:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2a8ed3:       mov    -0x18(%r13),%rax
         :            ~basic_ios() { }
    0.00 :   2a8ed7:       lea    0x70(%rbx),%rdx
    0.00 :   2a8edb:       mov    %r13,0x100(%rsp)
    0.00 :   2a8ee3:       mov    %rdx,%rdi
    0.00 :   2a8ee6:       mov    %rdx,0x28(%rsp)
    0.00 :   2a8eeb:       mov    %r14,0x100(%rsp,%rax,1)
    0.00 :   2a8ef3:       mov    0x20(%rsp),%rax
    0.00 :   2a8ef8:       add    $0x10,%rax
    0.00 :   2a8efc:       mov    %rax,0x170(%rsp)
    0.00 :   2a8f04:       mov    %rax,0x30(%rsp)
    0.00 :   2a8f09:       callq  52b40 <std::ios_base::~ios_base()@plt>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2a8f0e:       mov    0x28(%rsp),%rdx
    0.00 :   2a8f13:       mov    %rdx,%rdi
    0.00 :   2a8f16:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2a8f1b:       xor    %r8d,%r8d
    0.00 :   2a8f1e:       mov    0x30(%rsp),%rax
         :            { this->init(0); }
    0.00 :   2a8f23:       xor    %esi,%esi
    0.00 :   2a8f25:       mov    %r8w,0x250(%rsp)
    0.00 :   2a8f2e:       mov    -0x18(%r13),%rdi
    0.00 :   2a8f32:       mov    %rax,0x170(%rsp)
    0.00 :   2a8f3a:       add    %rbx,%rdi
    0.00 :   2a8f3d:       movq   $0x0,0x248(%rsp)
    0.00 :   2a8f49:       movq   $0x0,0x258(%rsp)
    0.00 :   2a8f55:       movq   $0x0,0x260(%rsp)
    0.00 :   2a8f61:       movq   $0x0,0x268(%rsp)
    0.00 :   2a8f6d:       movq   $0x0,0x270(%rsp)
    0.00 :   2a8f79:       mov    %r13,0x100(%rsp)
    0.00 :   2a8f81:       mov    %r14,(%rdi)
    0.00 :   2a8f84:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2a8f89:       lea    0x18(%r12),%rax
         :            _M_buf_locale(locale())
    0.00 :   2a8f8e:       lea    0x40(%rbx),%rdi
    0.00 :   2a8f92:       movq   $0x0,0x110(%rsp)
    0.00 :   2a8f9e:       mov    %rax,0x100(%rsp)
    0.00 :   2a8fa6:       lea    0x40(%r12),%rax
    0.00 :   2a8fab:       mov    %rax,0x170(%rsp)
    0.00 :   2a8fb3:       mov    0x8(%rsp),%rax
    0.00 :   2a8fb8:       movq   $0x0,0x118(%rsp)
    0.00 :   2a8fc4:       movq   $0x0,0x120(%rsp)
    0.00 :   2a8fd0:       add    $0x10,%rax
    0.00 :   2a8fd4:       mov    %rax,0x108(%rsp)
    0.00 :   2a8fdc:       movq   $0x0,0x128(%rsp)
    0.00 :   2a8fe8:       movq   $0x0,0x130(%rsp)
    0.00 :   2a8ff4:       movq   $0x0,0x138(%rsp)
    0.00 :   2a9000:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a9005:       mov    0x10(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a900a:       lea    0x8(%rbx),%rsi
    0.00 :   2a900e:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a9012:       movl   $0x10,0x148(%rsp)
    0.00 :   2a901d:       add    $0x10,%rax
    0.00 :   2a9021:       movb   $0x0,0x160(%rsp)
    0.00 :   2a9029:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a9031:       lea    0x60(%rbx),%rax
    0.00 :   2a9035:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a903d:       movq   $0x0,0x158(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a9049:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2a904e:       mov    0x68(%rsp),%rdx
    0.00 :   2a9053:       mov    0x60(%rsp),%rsi
    0.00 :   2a9058:       mov    %rbx,%rdi
    0.00 :   2a905b:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2a9060:       mov    $0x1,%edx
    0.00 :   2a9065:       lea    0x57e6cf(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2a906c:       mov    %rbx,%rdi
    0.00 :   2a906f:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a9074:       mov    %rbx,%rdi
    0.00 :   2a9077:       mov    $0x2d,%edx
    0.00 :   2a907c:       lea    0x5a1a05(%rip),%rsi        # 84aa88 <typeinfo name for onnxruntime::Hardmax<float>+0x68>
    0.00 :   2a9083:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9088:       mov    (%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2a908c:       movq   $0x0,0x88(%rsp)
    0.00 :   2a9098:       movb   $0x0,0x90(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a90a0:       lea    0x10(%rdi),%rax
    0.00 :   2a90a4:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2a90ac:       mov    0x130(%rsp),%rax
    0.00 :   2a90b4:       test   %rax,%rax
    0.00 :   2a90b7:       je     2a96b8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xbb8>
         :            if (this->pptr() > this->egptr())
    0.00 :   2a90bd:       mov    0x120(%rsp),%r8
    0.00 :   2a90c5:       mov    0x128(%rsp),%rcx
    0.00 :   2a90cd:       cmp    %r8,%rax
    0.00 :   2a90d0:       jbe    2a94d8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x9d8>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a90d6:       sub    %rcx,%rax
    0.00 :   2a90d9:       xor    %edx,%edx
    0.00 :   2a90db:       xor    %esi,%esi
    0.00 :   2a90dd:       mov    %rax,%r8
    0.00 :   2a90e0:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2a90e5:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a90ea:       mov    0x150(%rsp),%rdi
    0.00 :   2a90f2:       mov    %rax,0x100(%rsp)
    0.00 :   2a90fa:       lea    0x40(%r12),%rax
    0.00 :   2a90ff:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2a9107:       mov    0x10(%rsp),%rax
    0.00 :   2a910c:       add    $0x10,%rax
    0.00 :   2a9110:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2a9118:       lea    0x60(%rbx),%rax
    0.00 :   2a911c:       cmp    %rax,%rdi
    0.00 :   2a911f:       je     2a9126 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x626>
    0.00 :   2a9121:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2a9126:       mov    0x8(%rsp),%rax
    0.00 :   2a912b:       lea    0x40(%rbx),%rdi
    0.00 :   2a912f:       add    $0x10,%rax
    0.00 :   2a9133:       mov    %rax,0x108(%rsp)
    0.00 :   2a913b:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2a9140:       mov    -0x18(%r13),%rax
         :            ~basic_ios() { }
    0.00 :   2a9144:       lea    0x70(%rbx),%rdi
    0.00 :   2a9148:       mov    %r13,0x100(%rsp)
    0.00 :   2a9150:       mov    %r14,0x100(%rsp,%rax,1)
    0.00 :   2a9158:       mov    0x20(%rsp),%rax
    0.00 :   2a915d:       add    $0x10,%rax
    0.00 :   2a9161:       mov    %rax,0x170(%rsp)
    0.00 :   2a9169:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2a916e:       mov    (%rsp),%rbx
    0.00 :   2a9172:       mov    0x18(%rsp),%rdi
    0.00 :   2a9177:       mov    $0x1,%edx
    0.00 :   2a917c:       mov    $0x2,%esi
    0.00 :   2a9181:       mov    %rbx,%rcx
    0.00 :   2a9184:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a9189:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a918c:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9194:       add    $0x10,%rax
    0.00 :   2a9198:       cmp    %rax,%rdi
    0.00 :   2a919b:       je     2a91a2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6a2>
    0.00 :   2a919d:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a91a2:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a91a7:       add    $0x10,%r15
    0.00 :   2a91ab:       cmp    %r15,%rdi
    0.00 :   2a91ae:       je     2a91b5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6b5>
    0.00 :   2a91b0:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2a91b5:       mov    0xf0(%rsp),%r12
    0.00 :   2a91bd:       mov    0xe8(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   2a91c5:       cmp    %rbx,%r12
    0.00 :   2a91c8:       je     2a91f2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6f2>
    0.00 :   2a91ca:       nopw   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a91d0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2a91d3:       lea    0x10(%rbx),%rax
    0.00 :   2a91d7:       cmp    %rax,%rdi
    0.00 :   2a91da:       je     2a91e1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6e1>
    0.00 :   2a91dc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a91e1:       add    $0x20,%rbx
    0.00 :   2a91e5:       cmp    %rbx,%r12
    0.00 :   2a91e8:       jne    2a91d0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6d0>
    0.00 :   2a91ea:       mov    0xe8(%rsp),%rbx
         :            if (__p)
    0.00 :   2a91f2:       test   %rbx,%rbx
    0.00 :   2a91f5:       je     2a91ff <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6ff>
    0.00 :   2a91f7:       mov    %rbx,%rdi
    0.00 :   2a91fa:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a91ff:       mov    0xc8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9207:       lea    0x38(%rbp),%rax
    0.00 :   2a920b:       cmp    %rax,%rdi
    0.00 :   2a920e:       je     2a9215 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x715>
    0.00 :   2a9210:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9215:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a921d:       add    $0x10,%rbp
    0.00 :   2a9221:       cmp    %rbp,%rdi
    0.00 :   2a9224:       je     2a922b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x72b>
    0.00 :   2a9226:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a922b:       mov    0x278(%rsp),%rcx
    0.00 :   2a9233:       xor    %fs:0x28,%rcx
    0.00 :   2a923c:       mov    0x18(%rsp),%rax
    0.00 :   2a9241:       jne    2ab702 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c02>
    0.00 :   2a9247:       add    $0x288,%rsp
    0.00 :   2a924e:       pop    %rbx
    0.00 :   2a924f:       pop    %rbp
    0.00 :   2a9250:       pop    %r12
    0.00 :   2a9252:       pop    %r13
    0.00 :   2a9254:       pop    %r14
    0.00 :   2a9256:       pop    %r15
    0.00 :   2a9258:       retq
    0.00 :   2a9259:       nopl   0x0(%rax)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a9260:       sub    %rcx,%rax
    0.00 :   2a9263:       xor    %edx,%edx
    0.00 :   2a9265:       xor    %esi,%esi
    0.00 :   2a9267:       mov    %r15,%rdi
    0.00 :   2a926a:       mov    %rax,%r8
    0.00 :   2a926d:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2a9272:       jmpq   2a8e78 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x378>
    0.00 :   2a9277:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a9280:       mov    %rdx,%r15
    0.00 :   2a9283:       movzbl (%rsp),%edx
    0.00 :   2a9287:       cmp    $0x1,%rbp
    0.00 :   2a928b:       mov    %rsi,%r12
    0.00 :   2a928e:       seta   %al
    0.00 :   2a9291:       xor    $0x1,%edx
    0.00 :   2a9294:       and    %edx,%eax
    0.00 :   2a9296:       cmp    $0x1,%r8
    0.00 :   2a929a:       seta   %dl
    0.00 :   2a929d:       test   %dl,%al
    0.00 :   2a929f:       je     2a92aa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x7aa>
    0.00 :   2a92a1:       cmp    %rbp,%r8
    0.00 :   2a92a4:       jae    2aa7ce <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1cce>
    0.00 :   2a92aa:       cmp    $0x1,%r8
    0.00 :   2a92ae:       mov    %rbp,%rdx
    0.00 :   2a92b1:       sete   0x10(%rsp)
    0.00 :   2a92b6:       cmp    $0x1,%rbp
    0.00 :   2a92ba:       movzbl 0x10(%rsp),%esi
    0.00 :   2a92bf:       sete   %al
    0.00 :   2a92c2:       or     %esi,%eax
    0.00 :   2a92c4:       cmp    %rbp,%r8
    0.00 :   2a92c7:       mov    %al,0x20(%rsp)
    0.00 :   2a92cb:       cmovae %r8,%rdx
    0.00 :   2a92cf:       cmp    $0x1,%rbp
    0.00 :   2a92d3:       je     2a96e8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xbe8>
    0.00 :   2a92d9:       movzbl 0x20(%rsp),%eax
    0.00 :   2a92de:       mov    %rdx,0x28(%rsp)
    0.00 :   2a92e3:       mov    %rdx,%r9
    0.00 :   2a92e6:       sub    %rax,%r9
         :            if (__n > this->max_size())
    0.00 :   2a92e9:       movabs $0x1fffffffffffffff,%rax
    0.00 :   2a92f3:       cmp    %rax,%rdx
    0.00 :   2a92f6:       ja     2ab6fd <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bfd>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2a92fc:       lea    0x0(,%rdx,8),%r14
    0.00 :   2a9304:       mov    %r8,0x48(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2a9309:       xor    %ebx,%ebx
    0.00 :   2a930b:       mov    %r14,%rdi
    0.00 :   2a930e:       mov    %rcx,0x40(%rsp)
    0.00 :   2a9313:       mov    %r9,0x38(%rsp)
    0.00 :   2a9318:       mov    %rdx,0x30(%rsp)
    0.00 :   2a931d:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a9322:       mov    0x30(%rsp),%rdx
    0.00 :   2a9327:       mov    0x38(%rsp),%r9
    0.00 :   2a932c:       mov    0x40(%rsp),%rcx
    0.00 :   2a9331:       mov    0x48(%rsp),%r8
    0.00 :   2a9336:       lea    (%rax,%r14,1),%rsi
         :            __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :            __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
         :            {
         :            const _Tp __tmp = __value;
         :            for (__decltype(__n + 0) __niter = __n;
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   2a933a:       nopw   0x0(%rax,%rax,1)
         :            *__first = __tmp;
    0.00 :   2a9340:       movq   $0x1,(%rax,%rbx,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   2a9348:       add    $0x1,%rbx
    0.00 :   2a934c:       cmp    %rbx,%rdx
    0.00 :   2a934f:       jne    2a9340 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x840>
         :            #endif
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   2a9351:       mov    0x20(%r12),%rdi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   2a9356:       mov    %rsi,0x28(%r12)
    0.00 :   2a935b:       mov    %rax,0x20(%r12)
    0.00 :   2a9360:       mov    %rsi,0x30(%r12)
         :            if (__p)
    0.00 :   2a9365:       test   %rdi,%rdi
    0.00 :   2a9368:       je     2a938d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x88d>
    0.00 :   2a936a:       mov    %r8,0x40(%rsp)
    0.00 :   2a936f:       mov    %rcx,0x38(%rsp)
    0.00 :   2a9374:       mov    %r9,0x30(%rsp)
         :            ::operator delete(__p);
    0.00 :   2a9379:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a937e:       mov    0x30(%rsp),%r9
    0.00 :   2a9383:       mov    0x38(%rsp),%rcx
    0.00 :   2a9388:       mov    0x40(%rsp),%r8
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2a938d:       test   %rbx,%rbx
    0.00 :   2a9390:       je     2aab78 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2078>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2a9396:       mov    %r14,%rdi
    0.00 :   2a9399:       mov    %r8,0x40(%rsp)
    0.00 :   2a939e:       mov    %rcx,0x38(%rsp)
    0.00 :   2a93a3:       mov    %r9,0x30(%rsp)
    0.00 :   2a93a8:       callq  53340 <operator new(unsigned long)@plt>
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2a93ad:       mov    0x30(%rsp),%r9
    0.00 :   2a93b2:       mov    0x38(%rsp),%rcx
    0.00 :   2a93b7:       xor    %edx,%edx
    0.00 :   2a93b9:       mov    0x40(%rsp),%r8
    0.00 :   2a93be:       add    %rax,%r14
    0.00 :   2a93c1:       nopl   0x0(%rax)
         :            *__first = __tmp;
    0.00 :   2a93c8:       movq   $0x1,(%rax,%rdx,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   2a93d0:       add    $0x1,%rdx
    0.00 :   2a93d4:       cmp    %rdx,%rbx
    0.00 :   2a93d7:       jne    2a93c8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x8c8>
    0.00 :   2a93d9:       lea    (%rax,%rbx,8),%rdx
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   2a93dd:       mov    0x38(%r12),%rdi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   2a93e2:       mov    %rdx,0x40(%r12)
    0.00 :   2a93e7:       mov    %rax,0x38(%r12)
    0.00 :   2a93ec:       mov    %r14,0x48(%r12)
         :            if (__p)
    0.00 :   2a93f1:       test   %rdi,%rdi
    0.00 :   2a93f4:       je     2a9419 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x919>
    0.00 :   2a93f6:       mov    %r8,0x40(%rsp)
    0.00 :   2a93fb:       mov    %rcx,0x38(%rsp)
    0.00 :   2a9400:       mov    %r9,0x30(%rsp)
         :            ::operator delete(__p);
    0.00 :   2a9405:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a940a:       mov    0x40(%rsp),%r8
    0.00 :   2a940f:       mov    0x38(%rsp),%rcx
    0.00 :   2a9414:       mov    0x30(%rsp),%r9
    0.00 :   2a9419:       mov    (%r15),%rsi
    0.00 :   2a941c:       mov    0x8(%r15),%rax
    0.00 :   2a9420:       mov    0x20(%r12),%rdi
    0.00 :   2a9425:       sub    %rsi,%rax
    0.00 :   2a9428:       sar    $0x3,%rax
    0.00 :   2a942c:       test   %r13b,%r13b
    0.00 :   2a942f:       je     2a94f0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x9f0>
    0.00 :   2a9435:       mov    (%rcx),%r10
    0.00 :   2a9438:       lea    -0x2(%rbx),%rdx
    0.00 :   2a943c:       cmpq   $0x1,0x28(%rsp)
    0.00 :   2a9442:       mov    %rcx,0x38(%rsp)
         :            */
         :            reference
         :            operator[](size_type __n) _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   2a9447:       lea    0x0(,%rdx,8),%r14
    0.00 :   2a944f:       mov    %r9,0x30(%rsp)
    0.00 :   2a9454:       mov    (%r10),%r11
    0.00 :   2a9457:       mov    0x38(%r12),%r10
    0.00 :   2a945c:       mov    %r11,(%r10,%rdx,8)
    0.00 :   2a9460:       je     2aa380 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1880>
    0.00 :   2a9466:       lea    -0x2(%r8),%r13
    0.00 :   2a946a:       mov    %r8,0x28(%rsp)
    0.00 :   2a946f:       cmp    %rax,%r13
    0.00 :   2a9472:       cmovbe %r13,%rax
    0.00 :   2a9476:       movslq %r13d,%r13
    0.00 :   2a9479:       lea    0x0(,%rax,8),%rdx
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   2a9481:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
    0.00 :   2a9486:       mov    0x28(%rsp),%r8
    0.00 :   2a948b:       cmpb   $0x0,(%rsp)
    0.00 :   2a948f:       lea    0x0(,%r13,8),%r10
    0.00 :   2a9497:       mov    (%r15),%rsi
    0.00 :   2a949a:       mov    0x20(%r12),%rdx
    0.00 :   2a949f:       lea    -0x1(%r8),%rax
    0.00 :   2a94a3:       mov    0x30(%rsp),%r9
    0.00 :   2a94a8:       mov    0x38(%rsp),%rcx
    0.00 :   2a94ad:       cltq
    0.00 :   2a94af:       lea    0x0(,%rax,8),%rdi
    0.00 :   2a94b7:       jne    2aa3c0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x18c0>
    0.00 :   2a94bd:       mov    (%rsi,%r13,8),%rax
    0.00 :   2a94c1:       mov    %rax,-0x8(%rdx,%r14,1)
    0.00 :   2a94c6:       mov    (%rsi,%rdi,1),%rax
    0.00 :   2a94ca:       mov    %rax,0x8(%rdx,%r14,1)
    0.00 :   2a94cf:       jmpq   2a9562 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xa62>
    0.00 :   2a94d4:       nopl   0x0(%rax)
    0.00 :   2a94d8:       mov    (%rsp),%rdi
    0.00 :   2a94dc:       sub    %rcx,%r8
    0.00 :   2a94df:       xor    %edx,%edx
    0.00 :   2a94e1:       xor    %esi,%esi
    0.00 :   2a94e3:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2a94e8:       jmpq   2a90e5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x5e5>
    0.00 :   2a94ed:       nopl   (%rax)
    0.00 :   2a94f0:       mov    %rbx,%rdx
    0.00 :   2a94f3:       mov    %r9,0x38(%rsp)
    0.00 :   2a94f8:       sub    %r8,%rdx
    0.00 :   2a94fb:       cmp    %rax,%r8
    0.00 :   2a94fe:       mov    %r8,0x30(%rsp)
    0.00 :   2a9503:       cmovbe %r8,%rax
    0.00 :   2a9507:       lea    (%rdi,%rdx,8),%rdi
    0.00 :   2a950b:       mov    %rcx,0x28(%rsp)
    0.00 :   2a9510:       lea    0x0(,%rax,8),%rdx
         :            memcpy():
    0.00 :   2a9518:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
    0.00 :   2a951d:       mov    0x28(%rsp),%rcx
    0.00 :   2a9522:       mov    0x38(%r12),%rax
    0.00 :   2a9527:       mov    %rbx,%rdx
    0.00 :   2a952a:       sub    %rbp,%rdx
    0.00 :   2a952d:       mov    (%rcx),%rsi
    0.00 :   2a9530:       lea    (%rax,%rdx,8),%rdi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2a9534:       mov    0x8(%rcx),%rax
    0.00 :   2a9538:       sub    %rsi,%rax
    0.00 :   2a953b:       sar    $0x3,%rax
    0.00 :   2a953f:       cmp    %rbp,%rax
    0.00 :   2a9542:       cmova  %rbp,%rax
    0.00 :   2a9546:       lea    0x0(,%rax,8),%rdx
         :            memcpy():
    0.00 :   2a954e:       callq  53150 <memcpy@plt>
    0.00 :   2a9553:       mov    0x38(%rsp),%r9
    0.00 :   2a9558:       mov    0x30(%rsp),%r8
    0.00 :   2a955d:       mov    0x28(%rsp),%rcx
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2a9562:       test   %r9,%r9
    0.00 :   2a9565:       je     2a9720 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xc20>
         :            if (__n > this->max_size())
    0.00 :   2a956b:       movabs $0x1fffffffffffffff,%rax
    0.00 :   2a9575:       mov    %r8,0x38(%rsp)
    0.00 :   2a957a:       mov    %rcx,0x30(%rsp)
    0.00 :   2a957f:       cmp    %rax,%r9
    0.00 :   2a9582:       ja     2ab6fd <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bfd>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2a9588:       lea    0x0(,%r9,8),%r13
    0.00 :   2a9590:       mov    %r9,0x28(%rsp)
    0.00 :   2a9595:       mov    %r13,%rdi
    0.00 :   2a9598:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a959d:       mov    0x28(%rsp),%r9
    0.00 :   2a95a2:       mov    0x30(%rsp),%rcx
    0.00 :   2a95a7:       mov    0x38(%rsp),%r8
    0.00 :   2a95ac:       mov    %rax,%r14
    0.00 :   2a95af:       xor    %eax,%eax
    0.00 :   2a95b1:       nopl   0x0(%rax)
         :            *__first = __tmp;
    0.00 :   2a95b8:       movq   $0x0,(%r14,%rax,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   2a95c0:       add    $0x1,%rax
    0.00 :   2a95c4:       cmp    %rax,%r9
    0.00 :   2a95c7:       jne    2a95b8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xab8>
    0.00 :   2a95c9:       lea    (%r14,%r13,1),%rax
    0.00 :   2a95cd:       mov    %rax,0x28(%rsp)
    0.00 :   2a95d2:       mov    %rbx,%r10
    0.00 :   2a95d5:       sub    $0x2,%r10
    0.00 :   2a95d9:       je     2ab2b5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x27b5>
    0.00 :   2a95df:       mov    0x38(%r12),%rdx
    0.00 :   2a95e4:       mov    0x20(%r12),%rdi
    0.00 :   2a95e9:       xor    %r13d,%r13d
    0.00 :   2a95ec:       nopl   0x0(%rax)
         :            max(const _Tp& __a, const _Tp& __b)
    0.00 :   2a95f0:       mov    (%rdi,%r13,8),%rax
    0.00 :   2a95f4:       cmp    %rax,(%rdx,%r13,8)
    0.00 :   2a95f8:       cmovge (%rdx,%r13,8),%rax
    0.00 :   2a95fd:       mov    %rax,(%r14,%r13,8)
    0.00 :   2a9601:       mov    (%rdi,%r13,8),%rsi
    0.00 :   2a9605:       cmp    %rax,%rsi
    0.00 :   2a9608:       je     2a9614 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb14>
    0.00 :   2a960a:       cmp    $0x1,%rsi
    0.00 :   2a960e:       jne    2a9738 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xc38>
    0.00 :   2a9614:       mov    (%rdx,%r13,8),%rsi
    0.00 :   2a9618:       cmp    $0x1,%rsi
    0.00 :   2a961c:       je     2a9627 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb27>
    0.00 :   2a961e:       cmp    %rax,%rsi
    0.00 :   2a9621:       jne    2a9b40 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1040>
    0.00 :   2a9627:       add    $0x1,%r13
    0.00 :   2a962b:       cmp    %r10,%r13
    0.00 :   2a962e:       jne    2a95f0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xaf0>
    0.00 :   2a9630:       mov    %r10,%rdx
    0.00 :   2a9633:       cmpb   $0x0,(%rsp)
    0.00 :   2a9637:       mov    (%r15),%rax
    0.00 :   2a963a:       mov    $0x1,%esi
    0.00 :   2a963f:       je     2a9f10 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1410>
    0.00 :   2a9645:       cmpb   $0x0,0x20(%rsp)
    0.00 :   2a964a:       je     2aa409 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1909>
    0.00 :   2a9650:       sub    $0x2,%r8
    0.00 :   2a9654:       mov    %rsi,0xc8(%r12)
    0.00 :   2a965c:       movslq %r8d,%r8
    0.00 :   2a965f:       mov    (%rax,%r8,8),%rax
    0.00 :   2a9663:       mov    %rax,0xd8(%r12)
    0.00 :   2a966b:       cmpb   $0x0,0x8(%rsp)
    0.00 :   2a9670:       je     2a9f40 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1440>
    0.00 :   2a9676:       cmp    $0x1,%rbp
    0.00 :   2a967a:       je     2aa420 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1920>
    0.00 :   2a9680:       mov    (%rcx),%rax
    0.00 :   2a9683:       lea    -0x2(%rbp),%rsi
    0.00 :   2a9687:       cmpb   $0x0,0x20(%rsp)
    0.00 :   2a968c:       movslq %esi,%rsi
    0.00 :   2a968f:       mov    (%rax,%rsi,8),%rsi
    0.00 :   2a9693:       mov    %rsi,0xd0(%r12)
    0.00 :   2a969b:       jne    2aa42c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x192c>
    0.00 :   2a96a1:       mov    0xd8(%r12),%rdx
    0.00 :   2a96a9:       sub    $0x1,%rbp
    0.00 :   2a96ad:       jmpq   2a9f77 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1477>
    0.00 :   2a96b2:       nopw   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   2a96b8:       mov    (%rsp),%rdi
    0.00 :   2a96bc:       lea    0x50(%rbx),%rsi
    0.00 :   2a96c0:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2a96c5:       jmpq   2a90e5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x5e5>
    0.00 :   2a96ca:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a96d0:       lea    0x50(%rbx),%rsi
    0.00 :   2a96d4:       mov    %r15,%rdi
    0.00 :   2a96d7:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2a96dc:       jmpq   2a8e78 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x378>
    0.00 :   2a96e1:       nopl   0x0(%rax)
    0.00 :   2a96e8:       mov    %rdx,%r14
    0.00 :   2a96eb:       lea    -0x1(%rdx),%r9
    0.00 :   2a96ef:       add    $0x1,%r14
    0.00 :   2a96f3:       jne    2ab01f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x251f>
    0.00 :   2a96f9:       xor    %ebx,%ebx
    0.00 :   2a96fb:       xor    %eax,%eax
    0.00 :   2a96fd:       mov    $0xfffffffffffffffe,%r9
    0.00 :   2a9704:       movb   $0x1,0x20(%rsp)
    0.00 :   2a9709:       movq   $0xffffffffffffffff,0x28(%rsp)
    0.00 :   2a9712:       mov    $0x1,%r13d
    0.00 :   2a9718:       xor    %esi,%esi
    0.00 :   2a971a:       jmpq   2a9351 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x851>
    0.00 :   2a971f:       nop
    0.00 :   2a9720:       movq   $0x0,0x28(%rsp)
    0.00 :   2a9729:       xor    %r14d,%r14d
    0.00 :   2a972c:       jmpq   2a95d2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xad2>
    0.00 :   2a9731:       nopl   0x0(%rax)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9738:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9740:       lea    0x5a133e(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9747:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a974b:       lea    -0x45(%rdx),%rsi
    0.00 :   2a974f:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9752:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a975a:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a975f:       lea    0x5a1539(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9766:       lea    0x38(%rbp),%rax
    0.00 :   2a976a:       movl   $0x63,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9775:       lea    0x28(%rbp),%rdi
    0.00 :   2a9779:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a977d:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9785:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a978a:       lea    0x60(%rsp),%r15
    0.00 :   2a978f:       xor    %edx,%edx
    0.00 :   2a9791:       mov    %rbp,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a9794:       movq   $0x0,0xe8(%rsp)
    0.00 :   2a97a0:       movq   $0x0,0xf0(%rsp)
    0.00 :   2a97ac:       mov    %r15,%rdi
    0.00 :   2a97af:       movq   $0x0,0xf8(%rsp)
    0.00 :   2a97bb:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2a97c0:       lea    0x100(%rsp),%rbx
    0.00 :   2a97c8:       lea    0x70(%rbx),%rdi
    0.00 :   2a97cc:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2a97d1:       mov    0x97e350(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a97d8:       xor    %edi,%edi
         :            { this->init(0); }
    0.00 :   2a97da:       xor    %esi,%esi
    0.00 :   2a97dc:       mov    %di,0x250(%rsp)
    0.00 :   2a97e4:       mov    %rax,0x20(%rsp)
    0.00 :   2a97e9:       add    $0x10,%rax
    0.00 :   2a97ed:       mov    %rax,0x170(%rsp)
    0.00 :   2a97f5:       mov    0x97e5a4(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2a97fc:       movq   $0x0,0x248(%rsp)
    0.00 :   2a9808:       movq   $0x0,0x258(%rsp)
    0.00 :   2a9814:       mov    0x8(%rax),%rcx
    0.00 :   2a9818:       movq   $0x0,0x260(%rsp)
    0.00 :   2a9824:       mov    0x10(%rax),%rax
    0.00 :   2a9828:       mov    -0x18(%rcx),%rdi
    0.00 :   2a982c:       mov    %rcx,0x100(%rsp)
    0.00 :   2a9834:       movq   $0x0,0x268(%rsp)
    0.00 :   2a9840:       add    %rbx,%rdi
    0.00 :   2a9843:       mov    %rcx,0x28(%rsp)
    0.00 :   2a9848:       movq   $0x0,0x270(%rsp)
    0.00 :   2a9854:       mov    %rax,(%rdi)
    0.00 :   2a9857:       mov    %rax,0x30(%rsp)
    0.00 :   2a985c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2a9861:       mov    0x97e4f8(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2a9868:       lea    0x40(%rbx),%rdi
    0.00 :   2a986c:       movq   $0x0,0x110(%rsp)
    0.00 :   2a9878:       movq   $0x0,0x118(%rsp)
    0.00 :   2a9884:       lea    0x18(%r12),%rax
    0.00 :   2a9889:       movq   $0x0,0x120(%rsp)
    0.00 :   2a9895:       mov    %rax,0x100(%rsp)
    0.00 :   2a989d:       lea    0x40(%r12),%rax
    0.00 :   2a98a2:       mov    %rax,0x170(%rsp)
    0.00 :   2a98aa:       mov    0x97e3af(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a98b1:       movq   $0x0,0x128(%rsp)
    0.00 :   2a98bd:       mov    %rax,0x8(%rsp)
    0.00 :   2a98c2:       add    $0x10,%rax
    0.00 :   2a98c6:       mov    %rax,0x108(%rsp)
    0.00 :   2a98ce:       movq   $0x0,0x130(%rsp)
    0.00 :   2a98da:       movq   $0x0,0x138(%rsp)
    0.00 :   2a98e6:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a98eb:       mov    0x97e6e6(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a98f2:       lea    0x8(%rbx),%rsi
    0.00 :   2a98f6:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a98fa:       movl   $0x10,0x148(%rsp)
    0.00 :   2a9905:       mov    %rax,0x10(%rsp)
    0.00 :   2a990a:       add    $0x10,%rax
    0.00 :   2a990e:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a9916:       lea    0x60(%rbx),%rax
    0.00 :   2a991a:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a9922:       movq   $0x0,0x158(%rsp)
    0.00 :   2a992e:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a9936:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2a993b:       mov    0x68(%rsp),%rdx
    0.00 :   2a9940:       mov    0x60(%rsp),%rsi
    0.00 :   2a9945:       mov    %rbx,%rdi
    0.00 :   2a9948:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2a994d:       mov    $0x1,%edx
    0.00 :   2a9952:       lea    0x57dde2(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2a9959:       mov    %rbx,%rdi
    0.00 :   2a995c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a9961:       mov    $0x25,%edx
    0.00 :   2a9966:       lea    0x5a114b(%rip),%rsi        # 84aab8 <typeinfo name for onnxruntime::Hardmax<float>+0x98>
    0.00 :   2a996d:       mov    %rbx,%rdi
    0.00 :   2a9970:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   2a9975:       mov    %rbx,%rdi
    0.00 :   2a9978:       mov    %r13,%rsi
    0.00 :   2a997b:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9980:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2a9988:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9994:       lea    0x10(%rdi),%rax
    0.00 :   2a9998:       mov    %rdi,(%rsp)
    0.00 :   2a999c:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2a99a4:       mov    0x130(%rsp),%rax
    0.00 :   2a99ac:       movb   $0x0,0x90(%rsp)
    0.00 :   2a99b4:       test   %rax,%rax
    0.00 :   2a99b7:       je     2ab037 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2537>
         :            if (this->pptr() > this->egptr())
    0.00 :   2a99bd:       mov    0x120(%rsp),%r8
    0.00 :   2a99c5:       mov    0x128(%rsp),%rcx
    0.00 :   2a99cd:       cmp    %r8,%rax
    0.00 :   2a99d0:       ja     2aa3d1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x18d1>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a99d6:       mov    (%rsp),%rdi
    0.00 :   2a99da:       sub    %rcx,%r8
    0.00 :   2a99dd:       xor    %edx,%edx
    0.00 :   2a99df:       xor    %esi,%esi
    0.00 :   2a99e1:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2a99e6:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a99eb:       mov    0x150(%rsp),%rdi
    0.00 :   2a99f3:       mov    %rax,0x100(%rsp)
    0.00 :   2a99fb:       lea    0x40(%r12),%rax
    0.00 :   2a9a00:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2a9a08:       mov    0x10(%rsp),%rax
    0.00 :   2a9a0d:       add    $0x10,%rax
    0.00 :   2a9a11:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2a9a19:       lea    0x60(%rbx),%rax
    0.00 :   2a9a1d:       cmp    %rax,%rdi
    0.00 :   2a9a20:       je     2a9a27 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xf27>
         :            ::operator delete(__p);
    0.00 :   2a9a22:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2a9a27:       mov    0x8(%rsp),%rax
    0.00 :   2a9a2c:       lea    0x40(%rbx),%rdi
    0.00 :   2a9a30:       add    $0x10,%rax
    0.00 :   2a9a34:       mov    %rax,0x108(%rsp)
    0.00 :   2a9a3c:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2a9a41:       mov    0x28(%rsp),%rax
    0.00 :   2a9a46:       mov    0x30(%rsp),%rcx
         :            ~basic_ios() { }
    0.00 :   2a9a4b:       lea    0x70(%rbx),%rdi
    0.00 :   2a9a4f:       mov    %rax,0x100(%rsp)
    0.00 :   2a9a57:       mov    -0x18(%rax),%rax
    0.00 :   2a9a5b:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2a9a63:       mov    0x20(%rsp),%rax
    0.00 :   2a9a68:       add    $0x10,%rax
    0.00 :   2a9a6c:       mov    %rax,0x170(%rsp)
    0.00 :   2a9a74:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2a9a79:       mov    (%rsp),%rbx
    0.00 :   2a9a7d:       mov    0x18(%rsp),%rdi
    0.00 :   2a9a82:       mov    $0x1,%edx
    0.00 :   2a9a87:       mov    $0x2,%esi
    0.00 :   2a9a8c:       mov    %rbx,%rcx
    0.00 :   2a9a8f:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a9a94:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9a97:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9a9f:       add    $0x10,%rax
    0.00 :   2a9aa3:       cmp    %rax,%rdi
    0.00 :   2a9aa6:       je     2a9aad <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xfad>
    0.00 :   2a9aa8:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9aad:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9ab2:       add    $0x10,%r15
    0.00 :   2a9ab6:       cmp    %r15,%rdi
    0.00 :   2a9ab9:       je     2a9ac0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xfc0>
    0.00 :   2a9abb:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2a9ac0:       mov    0xf0(%rsp),%r12
    0.00 :   2a9ac8:       mov    0xe8(%rsp),%rbx
    0.00 :   2a9ad0:       cmp    %rbx,%r12
    0.00 :   2a9ad3:       je     2a9afa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xffa>
    0.00 :   2a9ad5:       nopl   (%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9ad8:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9adb:       lea    0x10(%rbx),%rax
    0.00 :   2a9adf:       cmp    %rax,%rdi
    0.00 :   2a9ae2:       je     2a9ae9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xfe9>
    0.00 :   2a9ae4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a9ae9:       add    $0x20,%rbx
    0.00 :   2a9aed:       cmp    %rbx,%r12
    0.00 :   2a9af0:       jne    2a9ad8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xfd8>
    0.00 :   2a9af2:       mov    0xe8(%rsp),%rbx
         :            if (__p)
    0.00 :   2a9afa:       test   %rbx,%rbx
    0.00 :   2a9afd:       je     2a9b07 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1007>
    0.00 :   2a9aff:       mov    %rbx,%rdi
    0.00 :   2a9b02:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9b07:       mov    0xc8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9b0f:       lea    0x38(%rbp),%rax
    0.00 :   2a9b13:       cmp    %rax,%rdi
    0.00 :   2a9b16:       je     2a9b1d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x101d>
    0.00 :   2a9b18:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9b1d:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9b25:       add    $0x10,%rbp
    0.00 :   2a9b29:       cmp    %rbp,%rdi
    0.00 :   2a9b2c:       je     2a9b33 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1033>
    0.00 :   2a9b2e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a9b33:       mov    %r14,%rdi
    0.00 :   2a9b36:       jmpq   2a9226 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x726>
    0.00 :   2a9b3b:       nopl   0x0(%rax,%rax,1)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b40:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b48:       lea    0x5a0f36(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b4f:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b53:       lea    -0x45(%rdx),%rsi
    0.00 :   2a9b57:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b5a:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b62:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a9b67:       lea    0x5a1131(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b6e:       lea    0x38(%rbp),%rax
    0.00 :   2a9b72:       movl   $0x65,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b7d:       lea    0x28(%rbp),%rdi
    0.00 :   2a9b81:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b85:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b8d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a9b92:       lea    0x60(%rsp),%r15
    0.00 :   2a9b97:       xor    %edx,%edx
    0.00 :   2a9b99:       mov    %rbp,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a9b9c:       movq   $0x0,0xe8(%rsp)
    0.00 :   2a9ba8:       movq   $0x0,0xf0(%rsp)
    0.00 :   2a9bb4:       mov    %r15,%rdi
    0.00 :   2a9bb7:       movq   $0x0,0xf8(%rsp)
    0.00 :   2a9bc3:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2a9bc8:       lea    0x100(%rsp),%rbx
    0.00 :   2a9bd0:       lea    0x70(%rbx),%rdi
    0.00 :   2a9bd4:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2a9bd9:       mov    0x97df48(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a9be0:       xor    %esi,%esi
    0.00 :   2a9be2:       movq   $0x0,0x248(%rsp)
    0.00 :   2a9bee:       mov    %si,0x250(%rsp)
         :            { this->init(0); }
    0.00 :   2a9bf6:       xor    %esi,%esi
    0.00 :   2a9bf8:       mov    %rax,0x20(%rsp)
    0.00 :   2a9bfd:       add    $0x10,%rax
    0.00 :   2a9c01:       mov    %rax,0x170(%rsp)
    0.00 :   2a9c09:       mov    0x97e190(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2a9c10:       movq   $0x0,0x258(%rsp)
    0.00 :   2a9c1c:       movq   $0x0,0x260(%rsp)
    0.00 :   2a9c28:       mov    0x8(%rax),%rcx
    0.00 :   2a9c2c:       movq   $0x0,0x268(%rsp)
    0.00 :   2a9c38:       mov    0x10(%rax),%rax
    0.00 :   2a9c3c:       mov    -0x18(%rcx),%rdi
    0.00 :   2a9c40:       mov    %rcx,0x100(%rsp)
    0.00 :   2a9c48:       movq   $0x0,0x270(%rsp)
    0.00 :   2a9c54:       add    %rbx,%rdi
    0.00 :   2a9c57:       mov    %rcx,0x28(%rsp)
    0.00 :   2a9c5c:       mov    %rax,(%rdi)
    0.00 :   2a9c5f:       mov    %rax,0x30(%rsp)
    0.00 :   2a9c64:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2a9c69:       mov    0x97e0f0(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2a9c70:       lea    0x40(%rbx),%rdi
    0.00 :   2a9c74:       movq   $0x0,0x110(%rsp)
    0.00 :   2a9c80:       movq   $0x0,0x118(%rsp)
    0.00 :   2a9c8c:       lea    0x18(%r12),%rax
    0.00 :   2a9c91:       movq   $0x0,0x120(%rsp)
    0.00 :   2a9c9d:       mov    %rax,0x100(%rsp)
    0.00 :   2a9ca5:       lea    0x40(%r12),%rax
    0.00 :   2a9caa:       mov    %rax,0x170(%rsp)
    0.00 :   2a9cb2:       mov    0x97dfa7(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a9cb9:       movq   $0x0,0x128(%rsp)
    0.00 :   2a9cc5:       mov    %rax,0x8(%rsp)
    0.00 :   2a9cca:       add    $0x10,%rax
    0.00 :   2a9cce:       mov    %rax,0x108(%rsp)
    0.00 :   2a9cd6:       movq   $0x0,0x130(%rsp)
    0.00 :   2a9ce2:       movq   $0x0,0x138(%rsp)
    0.00 :   2a9cee:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a9cf3:       mov    0x97e2de(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a9cfa:       lea    0x8(%rbx),%rsi
    0.00 :   2a9cfe:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a9d02:       movl   $0x10,0x148(%rsp)
    0.00 :   2a9d0d:       mov    %rax,0x10(%rsp)
    0.00 :   2a9d12:       add    $0x10,%rax
    0.00 :   2a9d16:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a9d1e:       lea    0x60(%rbx),%rax
    0.00 :   2a9d22:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a9d2a:       movq   $0x0,0x158(%rsp)
    0.00 :   2a9d36:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a9d3e:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2a9d43:       mov    0x68(%rsp),%rdx
    0.00 :   2a9d48:       mov    0x60(%rsp),%rsi
    0.00 :   2a9d4d:       mov    %rbx,%rdi
    0.00 :   2a9d50:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2a9d55:       mov    $0x1,%edx
    0.00 :   2a9d5a:       lea    0x57d9da(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2a9d61:       mov    %rbx,%rdi
    0.00 :   2a9d64:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a9d69:       mov    $0x26,%edx
    0.00 :   2a9d6e:       lea    0x5a0d6b(%rip),%rsi        # 84aae0 <typeinfo name for onnxruntime::Hardmax<float>+0xc0>
    0.00 :   2a9d75:       mov    %rbx,%rdi
    0.00 :   2a9d78:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   2a9d7d:       mov    %rbx,%rdi
    0.00 :   2a9d80:       mov    %r13,%rsi
    0.00 :   2a9d83:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9d88:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2a9d90:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9d9c:       lea    0x10(%rdi),%rax
    0.00 :   2a9da0:       mov    %rdi,(%rsp)
    0.00 :   2a9da4:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2a9dac:       mov    0x130(%rsp),%rax
    0.00 :   2a9db4:       movb   $0x0,0x90(%rsp)
    0.00 :   2a9dbc:       test   %rax,%rax
    0.00 :   2a9dbf:       je     2ab049 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2549>
         :            if (this->pptr() > this->egptr())
    0.00 :   2a9dc5:       mov    0x120(%rsp),%r8
    0.00 :   2a9dcd:       mov    0x128(%rsp),%rcx
    0.00 :   2a9dd5:       cmp    %r8,%rax
    0.00 :   2a9dd8:       ja     2aa3e5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x18e5>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a9dde:       mov    (%rsp),%rdi
    0.00 :   2a9de2:       sub    %rcx,%r8
    0.00 :   2a9de5:       xor    %edx,%edx
    0.00 :   2a9de7:       xor    %esi,%esi
    0.00 :   2a9de9:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2a9dee:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9df3:       mov    0x150(%rsp),%rdi
    0.00 :   2a9dfb:       mov    %rax,0x100(%rsp)
    0.00 :   2a9e03:       lea    0x40(%r12),%rax
    0.00 :   2a9e08:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2a9e10:       mov    0x10(%rsp),%rax
    0.00 :   2a9e15:       add    $0x10,%rax
    0.00 :   2a9e19:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2a9e21:       lea    0x60(%rbx),%rax
    0.00 :   2a9e25:       cmp    %rax,%rdi
    0.00 :   2a9e28:       je     2a9e2f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x132f>
    0.00 :   2a9e2a:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2a9e2f:       mov    0x8(%rsp),%rax
    0.00 :   2a9e34:       lea    0x40(%rbx),%rdi
    0.00 :   2a9e38:       add    $0x10,%rax
    0.00 :   2a9e3c:       mov    %rax,0x108(%rsp)
    0.00 :   2a9e44:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2a9e49:       mov    0x28(%rsp),%rax
    0.00 :   2a9e4e:       mov    0x30(%rsp),%rcx
         :            ~basic_ios() { }
    0.00 :   2a9e53:       lea    0x70(%rbx),%rdi
    0.00 :   2a9e57:       mov    %rax,0x100(%rsp)
    0.00 :   2a9e5f:       mov    -0x18(%rax),%rax
    0.00 :   2a9e63:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2a9e6b:       mov    0x20(%rsp),%rax
    0.00 :   2a9e70:       add    $0x10,%rax
    0.00 :   2a9e74:       mov    %rax,0x170(%rsp)
    0.00 :   2a9e7c:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2a9e81:       mov    (%rsp),%rbx
    0.00 :   2a9e85:       mov    0x18(%rsp),%rdi
    0.00 :   2a9e8a:       mov    $0x1,%edx
    0.00 :   2a9e8f:       mov    $0x2,%esi
    0.00 :   2a9e94:       mov    %rbx,%rcx
    0.00 :   2a9e97:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a9e9c:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9e9f:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9ea7:       add    $0x10,%rax
    0.00 :   2a9eab:       cmp    %rax,%rdi
    0.00 :   2a9eae:       je     2a9eb5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x13b5>
    0.00 :   2a9eb0:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9eb5:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9eba:       add    $0x10,%r15
    0.00 :   2a9ebe:       cmp    %r15,%rdi
    0.00 :   2a9ec1:       je     2a9ec8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x13c8>
    0.00 :   2a9ec3:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2a9ec8:       mov    0xf0(%rsp),%r12
    0.00 :   2a9ed0:       mov    0xe8(%rsp),%rbx
    0.00 :   2a9ed8:       cmp    %rbx,%r12
    0.00 :   2a9edb:       je     2a9afa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xffa>
    0.00 :   2a9ee1:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9ee8:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9eeb:       lea    0x10(%rbx),%rax
    0.00 :   2a9eef:       cmp    %rax,%rdi
    0.00 :   2a9ef2:       je     2a9ef9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x13f9>
    0.00 :   2a9ef4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a9ef9:       add    $0x20,%rbx
    0.00 :   2a9efd:       cmp    %rbx,%r12
    0.00 :   2a9f00:       jne    2a9ee8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x13e8>
    0.00 :   2a9f02:       jmpq   2a9af2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xff2>
    0.00 :   2a9f07:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a9f10:       cmpb   $0x0,0x20(%rsp)
    0.00 :   2a9f15:       je     2aa3f9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x18f9>
    0.00 :   2a9f1b:       sub    $0x1,%r8
    0.00 :   2a9f1f:       mov    %rsi,0xc8(%r12)
    0.00 :   2a9f27:       movslq %r8d,%r8
    0.00 :   2a9f2a:       mov    (%rax,%r8,8),%rax
    0.00 :   2a9f2e:       mov    %rax,0xd8(%r12)
    0.00 :   2a9f36:       jmpq   2a966b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb6b>
    0.00 :   2a9f3b:       nopl   0x0(%rax,%rax,1)
    0.00 :   2a9f40:       cmp    $0x1,%rbp
    0.00 :   2a9f44:       je     2aa420 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1920>
    0.00 :   2a9f4a:       mov    (%rcx),%rax
    0.00 :   2a9f4d:       lea    -0x1(%rbp),%rsi
    0.00 :   2a9f51:       cmpb   $0x0,0x20(%rsp)
    0.00 :   2a9f56:       movslq %esi,%rsi
    0.00 :   2a9f59:       mov    (%rax,%rsi,8),%rsi
    0.00 :   2a9f5d:       mov    %rsi,0xd0(%r12)
    0.00 :   2a9f65:       jne    2aa42c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x192c>
    0.00 :   2a9f6b:       mov    0xd8(%r12),%rdx
    0.00 :   2a9f73:       sub    $0x2,%rbp
    0.00 :   2a9f77:       movslq %ebp,%rbp
    0.00 :   2a9f7a:       cmp    %rdx,(%rax,%rbp,8)
    0.00 :   2a9f7e:       je     2aa81e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1d1e>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9f84:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9f8c:       lea    0x5a0af2(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9f93:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9f97:       lea    -0x45(%rdx),%rsi
    0.00 :   2a9f9b:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9f9e:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9fa6:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a9fab:       lea    0x5a0ced(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9fb2:       lea    0x38(%rbp),%rax
    0.00 :   2a9fb6:       movl   $0x77,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9fc1:       lea    0x28(%rbp),%rdi
    0.00 :   2a9fc5:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9fc9:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9fd1:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a9fd6:       lea    0x60(%rsp),%r15
    0.00 :   2a9fdb:       xor    %edx,%edx
    0.00 :   2a9fdd:       mov    %rbp,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a9fe0:       movq   $0x0,0xe8(%rsp)
    0.00 :   2a9fec:       movq   $0x0,0xf0(%rsp)
    0.00 :   2a9ff8:       mov    %r15,%rdi
    0.00 :   2a9ffb:       movq   $0x0,0xf8(%rsp)
    0.00 :   2aa007:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2aa00c:       lea    0x100(%rsp),%rbx
    0.00 :   2aa014:       lea    0x70(%rbx),%rdi
    0.00 :   2aa018:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2aa01d:       mov    0x97db04(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa024:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   2aa026:       xor    %esi,%esi
    0.00 :   2aa028:       mov    %cx,0x250(%rsp)
    0.00 :   2aa030:       mov    %rax,0x20(%rsp)
    0.00 :   2aa035:       add    $0x10,%rax
    0.00 :   2aa039:       mov    %rax,0x170(%rsp)
    0.00 :   2aa041:       mov    0x97dd58(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2aa048:       movq   $0x0,0x248(%rsp)
    0.00 :   2aa054:       movq   $0x0,0x258(%rsp)
    0.00 :   2aa060:       mov    0x8(%rax),%r13
    0.00 :   2aa064:       movq   $0x0,0x260(%rsp)
    0.00 :   2aa070:       mov    0x10(%rax),%rax
    0.00 :   2aa074:       mov    -0x18(%r13),%rdi
    0.00 :   2aa078:       mov    %r13,0x100(%rsp)
    0.00 :   2aa080:       movq   $0x0,0x268(%rsp)
    0.00 :   2aa08c:       add    %rbx,%rdi
    0.00 :   2aa08f:       mov    %rax,0x28(%rsp)
    0.00 :   2aa094:       movq   $0x0,0x270(%rsp)
    0.00 :   2aa0a0:       mov    %rax,(%rdi)
    0.00 :   2aa0a3:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2aa0a8:       mov    0x97dcb1(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2aa0af:       lea    0x40(%rbx),%rdi
    0.00 :   2aa0b3:       movq   $0x0,0x110(%rsp)
    0.00 :   2aa0bf:       movq   $0x0,0x118(%rsp)
    0.00 :   2aa0cb:       lea    0x18(%r12),%rax
    0.00 :   2aa0d0:       movq   $0x0,0x120(%rsp)
    0.00 :   2aa0dc:       mov    %rax,0x100(%rsp)
    0.00 :   2aa0e4:       lea    0x40(%r12),%rax
    0.00 :   2aa0e9:       mov    %rax,0x170(%rsp)
    0.00 :   2aa0f1:       mov    0x97db68(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa0f8:       movq   $0x0,0x128(%rsp)
    0.00 :   2aa104:       mov    %rax,0x8(%rsp)
    0.00 :   2aa109:       add    $0x10,%rax
    0.00 :   2aa10d:       mov    %rax,0x108(%rsp)
    0.00 :   2aa115:       movq   $0x0,0x130(%rsp)
    0.00 :   2aa121:       movq   $0x0,0x138(%rsp)
    0.00 :   2aa12d:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa132:       mov    0x97de9f(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa139:       lea    0x8(%rbx),%rsi
    0.00 :   2aa13d:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa141:       movl   $0x10,0x148(%rsp)
    0.00 :   2aa14c:       mov    %rax,0x10(%rsp)
    0.00 :   2aa151:       add    $0x10,%rax
    0.00 :   2aa155:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2aa15d:       lea    0x60(%rbx),%rax
    0.00 :   2aa161:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2aa169:       movq   $0x0,0x158(%rsp)
    0.00 :   2aa175:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa17d:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2aa182:       mov    0x68(%rsp),%rdx
    0.00 :   2aa187:       mov    0x60(%rsp),%rsi
    0.00 :   2aa18c:       mov    %rbx,%rdi
    0.00 :   2aa18f:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2aa194:       mov    $0x1,%edx
    0.00 :   2aa199:       lea    0x57d59b(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2aa1a0:       mov    %rbx,%rdi
    0.00 :   2aa1a3:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2aa1a8:       mov    %rbx,%rdi
    0.00 :   2aa1ab:       mov    $0x19,%edx
    0.00 :   2aa1b0:       lea    0x5a09d2(%rip),%rsi        # 84ab89 <typeinfo name for onnxruntime::Hardmax<float>+0x169>
    0.00 :   2aa1b7:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa1bc:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2aa1c4:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa1d0:       lea    0x10(%rdi),%rax
    0.00 :   2aa1d4:       mov    %rdi,(%rsp)
    0.00 :   2aa1d8:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2aa1e0:       mov    0x130(%rsp),%rax
    0.00 :   2aa1e8:       movb   $0x0,0x90(%rsp)
    0.00 :   2aa1f0:       test   %rax,%rax
    0.00 :   2aa1f3:       je     2ab4cc <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x29cc>
         :            if (this->pptr() > this->egptr())
    0.00 :   2aa1f9:       mov    0x120(%rsp),%r8
    0.00 :   2aa201:       mov    0x128(%rsp),%rcx
    0.00 :   2aa209:       cmp    %r8,%rax
    0.00 :   2aa20c:       jbe    2ab05b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x255b>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2aa212:       sub    %rcx,%rax
    0.00 :   2aa215:       xor    %edx,%edx
    0.00 :   2aa217:       xor    %esi,%esi
    0.00 :   2aa219:       mov    %rax,%r8
    0.00 :   2aa21c:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2aa221:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa226:       mov    0x150(%rsp),%rdi
    0.00 :   2aa22e:       mov    %rax,0x100(%rsp)
    0.00 :   2aa236:       lea    0x40(%r12),%rax
    0.00 :   2aa23b:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2aa243:       mov    0x10(%rsp),%rax
    0.00 :   2aa248:       add    $0x10,%rax
    0.00 :   2aa24c:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2aa254:       lea    0x60(%rbx),%rax
    0.00 :   2aa258:       cmp    %rax,%rdi
    0.00 :   2aa25b:       je     2aa262 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1762>
    0.00 :   2aa25d:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2aa262:       mov    0x8(%rsp),%rax
    0.00 :   2aa267:       lea    0x40(%rbx),%rdi
    0.00 :   2aa26b:       add    $0x10,%rax
    0.00 :   2aa26f:       mov    %rax,0x108(%rsp)
    0.00 :   2aa277:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2aa27c:       mov    -0x18(%r13),%rax
    0.00 :   2aa280:       mov    0x28(%rsp),%rcx
    0.00 :   2aa285:       mov    %r13,0x100(%rsp)
         :            ~basic_ios() { }
    0.00 :   2aa28d:       lea    0x70(%rbx),%rdi
    0.00 :   2aa291:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2aa299:       mov    0x20(%rsp),%rax
    0.00 :   2aa29e:       add    $0x10,%rax
    0.00 :   2aa2a2:       mov    %rax,0x170(%rsp)
    0.00 :   2aa2aa:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2aa2af:       mov    (%rsp),%rbx
    0.00 :   2aa2b3:       mov    0x18(%rsp),%rdi
    0.00 :   2aa2b8:       mov    $0x1,%edx
    0.00 :   2aa2bd:       mov    $0x2,%esi
    0.00 :   2aa2c2:       mov    %rbx,%rcx
    0.00 :   2aa2c5:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2aa2ca:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa2cd:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa2d5:       add    $0x10,%rax
    0.00 :   2aa2d9:       cmp    %rax,%rdi
    0.00 :   2aa2dc:       je     2aa2e3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x17e3>
    0.00 :   2aa2de:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa2e3:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa2e8:       add    $0x10,%r15
    0.00 :   2aa2ec:       cmp    %r15,%rdi
    0.00 :   2aa2ef:       je     2aa2f6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x17f6>
    0.00 :   2aa2f1:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2aa2f6:       mov    0xf0(%rsp),%r12
    0.00 :   2aa2fe:       mov    0xe8(%rsp),%rbx
    0.00 :   2aa306:       cmp    %rbx,%r12
    0.00 :   2aa309:       je     2aa332 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1832>
    0.00 :   2aa30b:       nopl   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa310:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa313:       lea    0x10(%rbx),%rax
    0.00 :   2aa317:       cmp    %rax,%rdi
    0.00 :   2aa31a:       je     2aa321 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1821>
    0.00 :   2aa31c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2aa321:       add    $0x20,%rbx
    0.00 :   2aa325:       cmp    %rbx,%r12
    0.00 :   2aa328:       jne    2aa310 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1810>
    0.00 :   2aa32a:       mov    0xe8(%rsp),%rbx
         :            if (__p)
    0.00 :   2aa332:       test   %rbx,%rbx
    0.00 :   2aa335:       je     2aa33f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x183f>
    0.00 :   2aa337:       mov    %rbx,%rdi
    0.00 :   2aa33a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa33f:       mov    0xc8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa347:       lea    0x38(%rbp),%rax
    0.00 :   2aa34b:       cmp    %rax,%rdi
    0.00 :   2aa34e:       je     2aa355 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1855>
    0.00 :   2aa350:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa355:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa35d:       add    $0x10,%rbp
    0.00 :   2aa361:       cmp    %rbp,%rdi
    0.00 :   2aa364:       je     2aa370 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1870>
    0.00 :   2aa366:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2aa36b:       nopl   0x0(%rax,%rax,1)
    0.00 :   2aa370:       test   %r14,%r14
    0.00 :   2aa373:       je     2a922b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x72b>
    0.00 :   2aa379:       jmpq   2a9b33 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1033>
    0.00 :   2aa37e:       xchg   %ax,%ax
    0.00 :   2aa380:       mov    %rbx,%rdx
    0.00 :   2aa383:       mov    %r8,0x28(%rsp)
    0.00 :   2aa388:       sub    %r8,%rdx
    0.00 :   2aa38b:       cmp    %rax,%r8
    0.00 :   2aa38e:       cmovbe %r8,%rax
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   2aa392:       lea    (%rdi,%rdx,8),%rdi
    0.00 :   2aa396:       lea    0x0(,%rax,8),%rdx
         :            memcpy():
    0.00 :   2aa39e:       callq  53150 <memcpy@plt>
    0.00 :   2aa3a3:       mov    0x28(%rsp),%r8
    0.00 :   2aa3a8:       mov    0x30(%rsp),%r9
    0.00 :   2aa3ad:       mov    0x38(%rsp),%rcx
    0.00 :   2aa3b2:       jmpq   2a9562 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xa62>
    0.00 :   2aa3b7:       nopw   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
    0.00 :   2aa3c0:       mov    (%rsi,%rax,8),%rax
    0.00 :   2aa3c4:       mov    %r10,%rdi
    0.00 :   2aa3c7:       mov    %rax,-0x8(%rdx,%r14,1)
    0.00 :   2aa3cc:       jmpq   2a94c6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x9c6>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2aa3d1:       sub    %rcx,%rax
    0.00 :   2aa3d4:       xor    %edx,%edx
    0.00 :   2aa3d6:       xor    %esi,%esi
    0.00 :   2aa3d8:       mov    %rax,%r8
    0.00 :   2aa3db:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2aa3e0:       jmpq   2a99e6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xee6>
    0.00 :   2aa3e5:       sub    %rcx,%rax
    0.00 :   2aa3e8:       xor    %edx,%edx
    0.00 :   2aa3ea:       xor    %esi,%esi
    0.00 :   2aa3ec:       mov    %rax,%r8
    0.00 :   2aa3ef:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2aa3f4:       jmpq   2a9dee <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x12ee>
    0.00 :   2aa3f9:       lea    -0x2(%r8),%rsi
    0.00 :   2aa3fd:       movslq %esi,%rsi
    0.00 :   2aa400:       mov    (%rax,%rsi,8),%rsi
    0.00 :   2aa404:       jmpq   2a9f1b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x141b>
    0.00 :   2aa409:       lea    -0x1(%r8),%rsi
    0.00 :   2aa40d:       movslq %esi,%rsi
    0.00 :   2aa410:       mov    (%rax,%rsi,8),%rsi
    0.00 :   2aa414:       jmpq   2a9650 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb50>
    0.00 :   2aa419:       nopl   0x0(%rax)
    0.00 :   2aa420:       movq   $0x1,0xd0(%r12)
    0.00 :   2aa42c:       test   %r9,%r9
    0.00 :   2aa42f:       jne    2aab81 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2081>
    0.00 :   2aa435:       cmpq   $0x1,0xc8(%r12)
    0.00 :   2aa43e:       jne    2aa44f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x194f>
    0.00 :   2aa440:       cmpq   $0x1,0xd0(%r12)
    0.00 :   2aa449:       je     2aacc7 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21c7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa44f:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa457:       lea    0x5a0627(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa45e:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa462:       lea    -0x45(%rdx),%rsi
    0.00 :   2aa466:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa469:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa471:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aa476:       lea    0x5a0822(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa47d:       lea    0x38(%rbp),%rax
    0.00 :   2aa481:       movl   $0x7f,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa48c:       lea    0x28(%rbp),%rdi
    0.00 :   2aa490:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa494:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa49c:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aa4a1:       lea    0x60(%rsp),%r15
    0.00 :   2aa4a6:       xor    %edx,%edx
    0.00 :   2aa4a8:       mov    %rbp,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2aa4ab:       movq   $0x0,0xe8(%rsp)
    0.00 :   2aa4b7:       movq   $0x0,0xf0(%rsp)
    0.00 :   2aa4c3:       mov    %r15,%rdi
    0.00 :   2aa4c6:       movq   $0x0,0xf8(%rsp)
    0.00 :   2aa4d2:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2aa4d7:       lea    0x100(%rsp),%rbx
    0.00 :   2aa4df:       lea    0x70(%rbx),%rdi
    0.00 :   2aa4e3:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2aa4e8:       mov    0x97d639(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            { this->init(0); }
    0.00 :   2aa4ef:       xor    %esi,%esi
    0.00 :   2aa4f1:       movq   $0x0,0x248(%rsp)
    0.00 :   2aa4fd:       movq   $0x0,0x258(%rsp)
    0.00 :   2aa509:       mov    %rax,0x20(%rsp)
    0.00 :   2aa50e:       add    $0x10,%rax
    0.00 :   2aa512:       mov    %rax,0x170(%rsp)
    0.00 :   2aa51a:       xor    %eax,%eax
    0.00 :   2aa51c:       mov    %ax,0x250(%rsp)
    0.00 :   2aa524:       mov    0x97d875(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2aa52b:       movq   $0x0,0x260(%rsp)
    0.00 :   2aa537:       movq   $0x0,0x268(%rsp)
    0.00 :   2aa543:       mov    0x8(%rax),%r13
    0.00 :   2aa547:       movq   $0x0,0x270(%rsp)
    0.00 :   2aa553:       mov    0x10(%rax),%rax
    0.00 :   2aa557:       mov    -0x18(%r13),%rdi
    0.00 :   2aa55b:       mov    %r13,0x100(%rsp)
    0.00 :   2aa563:       mov    %rax,0x28(%rsp)
    0.00 :   2aa568:       add    %rbx,%rdi
    0.00 :   2aa56b:       mov    %rax,(%rdi)
    0.00 :   2aa56e:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2aa573:       mov    0x97d7e6(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2aa57a:       lea    0x40(%rbx),%rdi
    0.00 :   2aa57e:       movq   $0x0,0x110(%rsp)
    0.00 :   2aa58a:       movq   $0x0,0x118(%rsp)
    0.00 :   2aa596:       lea    0x18(%r12),%rax
    0.00 :   2aa59b:       movq   $0x0,0x120(%rsp)
    0.00 :   2aa5a7:       mov    %rax,0x100(%rsp)
    0.00 :   2aa5af:       lea    0x40(%r12),%rax
    0.00 :   2aa5b4:       mov    %rax,0x170(%rsp)
    0.00 :   2aa5bc:       mov    0x97d69d(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa5c3:       movq   $0x0,0x128(%rsp)
    0.00 :   2aa5cf:       mov    %rax,0x8(%rsp)
    0.00 :   2aa5d4:       add    $0x10,%rax
    0.00 :   2aa5d8:       mov    %rax,0x108(%rsp)
    0.00 :   2aa5e0:       movq   $0x0,0x130(%rsp)
    0.00 :   2aa5ec:       movq   $0x0,0x138(%rsp)
    0.00 :   2aa5f8:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa5fd:       mov    0x97d9d4(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa604:       lea    0x8(%rbx),%rsi
    0.00 :   2aa608:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa60c:       movl   $0x10,0x148(%rsp)
    0.00 :   2aa617:       mov    %rax,0x10(%rsp)
    0.00 :   2aa61c:       add    $0x10,%rax
    0.00 :   2aa620:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2aa628:       lea    0x60(%rbx),%rax
    0.00 :   2aa62c:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2aa634:       movq   $0x0,0x158(%rsp)
    0.00 :   2aa640:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa648:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2aa64d:       mov    0x68(%rsp),%rdx
    0.00 :   2aa652:       mov    0x60(%rsp),%rsi
    0.00 :   2aa657:       mov    %rbx,%rdi
    0.00 :   2aa65a:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2aa65f:       mov    $0x1,%edx
    0.00 :   2aa664:       lea    0x57d0d0(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2aa66b:       mov    %rbx,%rdi
    0.00 :   2aa66e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2aa673:       mov    %rbx,%rdi
    0.00 :   2aa676:       mov    $0x1c,%edx
    0.00 :   2aa67b:       lea    0x5a0521(%rip),%rsi        # 84aba3 <typeinfo name for onnxruntime::Hardmax<float>+0x183>
    0.00 :   2aa682:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa687:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2aa68f:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa69b:       lea    0x10(%rdi),%rax
    0.00 :   2aa69f:       mov    %rdi,(%rsp)
    0.00 :   2aa6a3:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2aa6ab:       mov    0x130(%rsp),%rax
    0.00 :   2aa6b3:       movb   $0x0,0x90(%rsp)
    0.00 :   2aa6bb:       test   %rax,%rax
    0.00 :   2aa6be:       je     2ab4de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x29de>
         :            if (this->pptr() > this->egptr())
    0.00 :   2aa6c4:       mov    0x120(%rsp),%r8
    0.00 :   2aa6cc:       mov    0x128(%rsp),%rcx
    0.00 :   2aa6d4:       cmp    %r8,%rax
    0.00 :   2aa6d7:       jbe    2ab070 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2570>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2aa6dd:       sub    %rcx,%rax
    0.00 :   2aa6e0:       xor    %edx,%edx
    0.00 :   2aa6e2:       xor    %esi,%esi
    0.00 :   2aa6e4:       mov    %rax,%r8
    0.00 :   2aa6e7:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2aa6ec:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa6f1:       mov    0x150(%rsp),%rdi
    0.00 :   2aa6f9:       mov    %rax,0x100(%rsp)
    0.00 :   2aa701:       lea    0x40(%r12),%rax
    0.00 :   2aa706:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2aa70e:       mov    0x10(%rsp),%rax
    0.00 :   2aa713:       add    $0x10,%rax
    0.00 :   2aa717:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2aa71f:       lea    0x60(%rbx),%rax
    0.00 :   2aa723:       cmp    %rax,%rdi
    0.00 :   2aa726:       je     2aa72d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1c2d>
         :            ::operator delete(__p);
    0.00 :   2aa728:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2aa72d:       mov    0x8(%rsp),%rax
    0.00 :   2aa732:       lea    0x40(%rbx),%rdi
    0.00 :   2aa736:       add    $0x10,%rax
    0.00 :   2aa73a:       mov    %rax,0x108(%rsp)
    0.00 :   2aa742:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2aa747:       mov    -0x18(%r13),%rax
    0.00 :   2aa74b:       mov    0x28(%rsp),%rcx
    0.00 :   2aa750:       mov    %r13,0x100(%rsp)
         :            ~basic_ios() { }
    0.00 :   2aa758:       lea    0x70(%rbx),%rdi
    0.00 :   2aa75c:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2aa764:       mov    0x20(%rsp),%rax
    0.00 :   2aa769:       add    $0x10,%rax
    0.00 :   2aa76d:       mov    %rax,0x170(%rsp)
    0.00 :   2aa775:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2aa77a:       mov    (%rsp),%rbx
    0.00 :   2aa77e:       mov    0x18(%rsp),%rdi
    0.00 :   2aa783:       mov    $0x1,%edx
    0.00 :   2aa788:       mov    $0x2,%esi
    0.00 :   2aa78d:       mov    %rbx,%rcx
    0.00 :   2aa790:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2aa795:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa798:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa7a0:       add    $0x10,%rax
    0.00 :   2aa7a4:       cmp    %rax,%rdi
    0.00 :   2aa7a7:       je     2aa7ae <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1cae>
    0.00 :   2aa7a9:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa7ae:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa7b3:       add    $0x10,%r15
    0.00 :   2aa7b7:       cmp    %r15,%rdi
    0.00 :   2aa7ba:       je     2aa7c1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1cc1>
    0.00 :   2aa7bc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2aa7c1:       mov    %rbp,%rdi
    0.00 :   2aa7c4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2aa7c9:       jmpq   2aa370 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1870>
    0.00 :   2aa7ce:       lea    -0x1(%rbp),%rbx
    0.00 :   2aa7d2:       mov    %rcx,%rdi
    0.00 :   2aa7d5:       mov    %r8,0x20(%rsp)
    0.00 :   2aa7da:       lea    -0x2(%rbp),%r14
    0.00 :   2aa7de:       mov    %rbx,%rsi
    0.00 :   2aa7e1:       mov    %rcx,0x10(%rsp)
    0.00 :   2aa7e6:       movslq %r14d,%r14
    0.00 :   2aa7e9:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   2aa7ee:       mov    0x10(%rsp),%rcx
    0.00 :   2aa7f3:       mov    0x20(%rsp),%r8
    0.00 :   2aa7f8:       mov    (%rcx),%rdx
    0.00 :   2aa7fb:       cmp    %rax,(%rdx,%r14,8)
    0.00 :   2aa7ff:       je     2ab4f0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x29f0>
    0.00 :   2aa805:       cmp    %rbp,%r8
    0.00 :   2aa808:       mov    %rbp,%rdx
    0.00 :   2aa80b:       movb   $0x0,0x20(%rsp)
    0.00 :   2aa810:       cmovae %r8,%rdx
    0.00 :   2aa814:       movb   $0x0,0x10(%rsp)
    0.00 :   2aa819:       jmpq   2a92d9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x7d9>
    0.00 :   2aa81e:       cmp    %r9,%rbx
    0.00 :   2aa821:       je     2aacae <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21ae>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa827:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa82f:       lea    0x5a024f(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa836:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa83a:       lea    -0x45(%rdx),%rsi
    0.00 :   2aa83e:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa841:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa849:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aa84e:       lea    0x5a044a(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa855:       lea    0x38(%rbp),%rax
    0.00 :   2aa859:       movl   $0x79,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa864:       lea    0x28(%rbp),%rdi
    0.00 :   2aa868:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa86c:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa874:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aa879:       lea    0x60(%rsp),%r15
    0.00 :   2aa87e:       xor    %edx,%edx
    0.00 :   2aa880:       mov    %rbp,%rsi
    0.00 :   2aa883:       movq   $0x0,0xe8(%rsp)
    0.00 :   2aa88f:       movq   $0x0,0xf0(%rsp)
    0.00 :   2aa89b:       mov    %r15,%rdi
    0.00 :   2aa89e:       movq   $0x0,0xf8(%rsp)
    0.00 :   2aa8aa:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2aa8af:       lea    0x100(%rsp),%rbx
    0.00 :   2aa8b7:       lea    0x70(%rbx),%rdi
    0.00 :   2aa8bb:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2aa8c0:       mov    0x97d261(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa8c7:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   2aa8c9:       xor    %esi,%esi
    0.00 :   2aa8cb:       mov    %dx,0x250(%rsp)
    0.00 :   2aa8d3:       mov    %rax,0x20(%rsp)
    0.00 :   2aa8d8:       add    $0x10,%rax
    0.00 :   2aa8dc:       mov    %rax,0x170(%rsp)
    0.00 :   2aa8e4:       mov    0x97d4b5(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2aa8eb:       movq   $0x0,0x248(%rsp)
    0.00 :   2aa8f7:       movq   $0x0,0x258(%rsp)
    0.00 :   2aa903:       mov    0x8(%rax),%r13
    0.00 :   2aa907:       movq   $0x0,0x260(%rsp)
    0.00 :   2aa913:       mov    0x10(%rax),%rax
    0.00 :   2aa917:       mov    -0x18(%r13),%rdi
    0.00 :   2aa91b:       mov    %r13,0x100(%rsp)
    0.00 :   2aa923:       movq   $0x0,0x268(%rsp)
    0.00 :   2aa92f:       add    %rbx,%rdi
    0.00 :   2aa932:       mov    %rax,0x28(%rsp)
    0.00 :   2aa937:       movq   $0x0,0x270(%rsp)
    0.00 :   2aa943:       mov    %rax,(%rdi)
    0.00 :   2aa946:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2aa94b:       mov    0x97d40e(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2aa952:       lea    0x40(%rbx),%rdi
    0.00 :   2aa956:       movq   $0x0,0x110(%rsp)
    0.00 :   2aa962:       movq   $0x0,0x118(%rsp)
    0.00 :   2aa96e:       lea    0x18(%r12),%rax
    0.00 :   2aa973:       movq   $0x0,0x120(%rsp)
    0.00 :   2aa97f:       mov    %rax,0x100(%rsp)
    0.00 :   2aa987:       lea    0x40(%r12),%rax
    0.00 :   2aa98c:       mov    %rax,0x170(%rsp)
    0.00 :   2aa994:       mov    0x97d2c5(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa99b:       movq   $0x0,0x128(%rsp)
    0.00 :   2aa9a7:       mov    %rax,0x8(%rsp)
    0.00 :   2aa9ac:       add    $0x10,%rax
    0.00 :   2aa9b0:       mov    %rax,0x108(%rsp)
    0.00 :   2aa9b8:       movq   $0x0,0x130(%rsp)
    0.00 :   2aa9c4:       movq   $0x0,0x138(%rsp)
    0.00 :   2aa9d0:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa9d5:       mov    0x97d5fc(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa9dc:       lea    0x8(%rbx),%rsi
    0.00 :   2aa9e0:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa9e4:       movl   $0x10,0x148(%rsp)
    0.00 :   2aa9ef:       mov    %rax,0x10(%rsp)
    0.00 :   2aa9f4:       add    $0x10,%rax
    0.00 :   2aa9f8:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2aaa00:       lea    0x60(%rbx),%rax
    0.00 :   2aaa04:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2aaa0c:       movq   $0x0,0x158(%rsp)
    0.00 :   2aaa18:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aaa20:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2aaa25:       mov    0x68(%rsp),%rdx
    0.00 :   2aaa2a:       mov    0x60(%rsp),%rsi
    0.00 :   2aaa2f:       mov    %rbx,%rdi
    0.00 :   2aaa32:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2aaa37:       mov    $0x1,%edx
    0.00 :   2aaa3c:       lea    0x57ccf8(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2aaa43:       mov    %rbx,%rdi
    0.00 :   2aaa46:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2aaa4b:       mov    %rbx,%rdi
    0.00 :   2aaa4e:       mov    $0x24,%edx
    0.00 :   2aaa53:       lea    0x5a00ae(%rip),%rsi        # 84ab08 <typeinfo name for onnxruntime::Hardmax<float>+0xe8>
    0.00 :   2aaa5a:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aaa5f:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2aaa67:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aaa73:       lea    0x10(%rdi),%rax
    0.00 :   2aaa77:       mov    %rdi,(%rsp)
    0.00 :   2aaa7b:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2aaa83:       mov    0x130(%rsp),%rax
    0.00 :   2aaa8b:       movb   $0x0,0x90(%rsp)
    0.00 :   2aaa93:       test   %rax,%rax
    0.00 :   2aaa96:       je     2ab6b0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bb0>
         :            if (this->pptr() > this->egptr())
    0.00 :   2aaa9c:       mov    0x120(%rsp),%r8
    0.00 :   2aaaa4:       mov    0x128(%rsp),%rcx
    0.00 :   2aaaac:       cmp    %r8,%rax
    0.00 :   2aaaaf:       jbe    2ab2f5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x27f5>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2aaab5:       sub    %rcx,%rax
    0.00 :   2aaab8:       xor    %edx,%edx
    0.00 :   2aaaba:       xor    %esi,%esi
    0.00 :   2aaabc:       mov    %rax,%r8
    0.00 :   2aaabf:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2aaac4:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aaac9:       mov    0x150(%rsp),%rdi
    0.00 :   2aaad1:       mov    %rax,0x100(%rsp)
    0.00 :   2aaad9:       lea    0x40(%r12),%rax
    0.00 :   2aaade:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2aaae6:       mov    0x10(%rsp),%rax
    0.00 :   2aaaeb:       add    $0x10,%rax
    0.00 :   2aaaef:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2aaaf7:       lea    0x60(%rbx),%rax
    0.00 :   2aaafb:       cmp    %rax,%rdi
    0.00 :   2aaafe:       je     2aab05 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2005>
    0.00 :   2aab00:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2aab05:       mov    0x8(%rsp),%rax
    0.00 :   2aab0a:       lea    0x40(%rbx),%rdi
    0.00 :   2aab0e:       add    $0x10,%rax
    0.00 :   2aab12:       mov    %rax,0x108(%rsp)
    0.00 :   2aab1a:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2aab1f:       mov    -0x18(%r13),%rax
    0.00 :   2aab23:       mov    0x28(%rsp),%rcx
    0.00 :   2aab28:       mov    %r13,0x100(%rsp)
         :            ~basic_ios() { }
    0.00 :   2aab30:       lea    0x70(%rbx),%rdi
    0.00 :   2aab34:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2aab3c:       mov    0x20(%rsp),%rax
    0.00 :   2aab41:       add    $0x10,%rax
    0.00 :   2aab45:       mov    %rax,0x170(%rsp)
    0.00 :   2aab4d:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2aab52:       mov    (%rsp),%rbx
    0.00 :   2aab56:       mov    0x18(%rsp),%rdi
    0.00 :   2aab5b:       mov    $0x1,%edx
    0.00 :   2aab60:       mov    $0x2,%esi
    0.00 :   2aab65:       mov    %rbx,%rcx
    0.00 :   2aab68:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2aab6d:       jmpq   2aa795 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1c95>
    0.00 :   2aab72:       nopw   0x0(%rax,%rax,1)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2aab78:       xor    %eax,%eax
    0.00 :   2aab7a:       xor    %edx,%edx
    0.00 :   2aab7c:       jmpq   2a93dd <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x8dd>
    0.00 :   2aab81:       cmpb   $0x0,0x10(%rsp)
    0.00 :   2aab86:       jne    2ab17a <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x267a>
    0.00 :   2aab8c:       cmp    %rdx,%r9
    0.00 :   2aab8f:       je     2ab085 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2585>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aab95:       lea    0x100(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aab9d:       lea    0x59fee1(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aaba4:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aaba8:       lea    -0x45(%rdx),%rsi
    0.00 :   2aabac:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aabaf:       mov    %rax,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aabb7:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aabbc:       lea    0x5a00dc(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aabc3:       lea    0x38(%rbx),%rax
    0.00 :   2aabc7:       movl   $0x88,0x120(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aabd2:       lea    0x28(%rbx),%rdi
    0.00 :   2aabd6:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aabda:       mov    %rax,0x128(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aabe2:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aabe7:       lea    0x80(%rsp),%rax
    0.00 :   2aabef:       xor    %edx,%edx
    0.00 :   2aabf1:       mov    %rbx,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2aabf4:       movq   $0x0,0x148(%rsp)
    0.00 :   2aac00:       mov    %rax,%rdi
    0.00 :   2aac03:       mov    %rax,(%rsp)
    0.00 :   2aac07:       movq   $0x0,0x150(%rsp)
    0.00 :   2aac13:       movq   $0x0,0x158(%rsp)
    0.00 :   2aac1f:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2aac24:       lea    0x59ff35(%rip),%rax        # 84ab60 <typeinfo name for onnxruntime::Hardmax<float>+0x140>
    0.00 :   2aac2b:       mov    (%rsp),%rsi
    0.00 :   2aac2f:       lea    0x58(%rsp),%rcx
    0.00 :   2aac34:       lea    0xa0(%rsp),%rbp
    0.00 :   2aac3c:       mov    %rax,0x58(%rsp)
    0.00 :   2aac41:       lea    0x50(%rsp),%rdx
    0.00 :   2aac46:       lea    0x57caee(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2aac4d:       mov    %rbp,%rdi
    0.00 :   2aac50:       mov    %rax,0x50(%rsp)
    0.00 :   2aac55:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2aac5a:       mov    0x18(%rsp),%rdi
    0.00 :   2aac5f:       mov    %rbp,%rcx
    0.00 :   2aac62:       mov    $0x1,%edx
    0.00 :   2aac67:       mov    $0x2,%esi
    0.00 :   2aac6c:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aac71:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aac79:       add    $0x10,%rbp
    0.00 :   2aac7d:       cmp    %rbp,%rdi
    0.00 :   2aac80:       je     2aac87 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2187>
    0.00 :   2aac82:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2aac87:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aac8b:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aac93:       add    $0x10,%rax
    0.00 :   2aac97:       cmp    %rax,%rdi
    0.00 :   2aac9a:       je     2aaca1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21a1>
    0.00 :   2aac9c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2aaca1:       mov    %rbx,%rdi
    0.00 :   2aaca4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2aaca9:       jmpq   2aa370 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1870>
    0.00 :   2aacae:       mov    0xc8(%r12),%rax
    0.00 :   2aacb6:       mov    %rax,(%r14,%r10,8)
    0.00 :   2aacba:       mov    0xd0(%r12),%rax
    0.00 :   2aacc2:       mov    %rax,0x8(%r14,%r10,8)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aacc7:       mov    0x28(%rsp),%rbx
    0.00 :   2aaccc:       sub    %r14,%rbx
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2aaccf:       mov    %rbx,%rax
    0.00 :   2aacd2:       sar    $0x3,%rax
    0.00 :   2aacd6:       je     2ab2bc <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x27bc>
         :            if (__n > this->max_size())
    0.00 :   2aacdc:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   2aace6:       cmp    %rdx,%rax
    0.00 :   2aace9:       ja     2ab707 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c07>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2aacef:       mov    %rbx,%rdi
    0.00 :   2aacf2:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2aacf7:       mov    %rax,%rcx
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2aacfa:       lea    (%rcx,%rbx,1),%rbp
         :            if (_Num)
    0.00 :   2aacfe:       cmp    0x28(%rsp),%r14
    0.00 :   2aad03:       je     2aad16 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2216>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   2aad05:       mov    %rcx,%rdi
    0.00 :   2aad08:       mov    %rbx,%rdx
    0.00 :   2aad0b:       mov    %r14,%rsi
    0.00 :   2aad0e:       callq  53150 <memcpy@plt>
    0.00 :   2aad13:       mov    %rax,%rcx
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   2aad16:       mov    0xb0(%r12),%rdi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   2aad1e:       mov    %rbp,0xb8(%r12)
    0.00 :   2aad26:       mov    %rcx,0xb0(%r12)
    0.00 :   2aad2e:       mov    %rbp,0xc0(%r12)
         :            if (__p)
    0.00 :   2aad36:       test   %rdi,%rdi
    0.00 :   2aad39:       je     2aad40 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2240>
         :            ::operator delete(__p);
    0.00 :   2aad3b:       callq  53300 <operator delete(void*)@plt>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aad40:       mov    0x28(%r12),%rax
    0.00 :   2aad45:       sub    0x20(%r12),%rax
    0.00 :   2aad4a:       sar    $0x3,%rax
    0.00 :   2aad4e:       sub    $0x2,%rax
    0.00 :   2aad52:       mov    %rax,0x18(%r12)
    0.00 :   2aad57:       je     2ab268 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2768>
    0.00 :   2aad5d:       mov    0xc8(%r12),%rdx
    0.00 :   2aad65:       mov    0xd8(%r12),%rcx
    0.00 :   2aad6d:       mov    %rdx,%rsi
    0.00 :   2aad70:       imul   %rcx,%rsi
    0.00 :   2aad74:       mov    %rsi,(%r12)
    0.00 :   2aad78:       mov    0xd0(%r12),%rsi
    0.00 :   2aad80:       imul   %rsi,%rcx
    0.00 :   2aad84:       imul   %rsi,%rdx
         :            if (__new_size > size())
    0.00 :   2aad88:       mov    0x68(%r12),%rsi
    0.00 :   2aad8d:       mov    %rcx,0x8(%r12)
    0.00 :   2aad92:       mov    0x70(%r12),%rcx
    0.00 :   2aad97:       mov    %rdx,0x10(%r12)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aad9c:       mov    %rcx,%rdx
    0.00 :   2aad9f:       sub    %rsi,%rdx
    0.00 :   2aada2:       sar    $0x3,%rdx
         :            if (__new_size > size())
    0.00 :   2aada6:       cmp    %rdx,%rax
    0.00 :   2aada9:       ja     2ab30a <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x280a>
         :            else if (__new_size < size())
    0.00 :   2aadaf:       jae    2aadbf <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22bf>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aadb1:       lea    (%rsi,%rax,8),%rdx
         :            // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         :            // _M_assign_aux.
         :            void
         :            _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
         :            {
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aadb5:       cmp    %rdx,%rcx
    0.00 :   2aadb8:       je     2aadbf <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22bf>
         :            {
         :            std::_Destroy(__pos, this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aadba:       mov    %rdx,0x70(%r12)
         :            if (__new_size > size())
    0.00 :   2aadbf:       mov    0x88(%r12),%rcx
    0.00 :   2aadc7:       mov    0x80(%r12),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aadcf:       mov    %rcx,%rdx
    0.00 :   2aadd2:       sub    %rsi,%rdx
    0.00 :   2aadd5:       sar    $0x3,%rdx
         :            if (__new_size > size())
    0.00 :   2aadd9:       cmp    %rdx,%rax
    0.00 :   2aaddc:       ja     2ab341 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2841>
         :            else if (__new_size < size())
    0.00 :   2aade2:       jae    2aadf5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22f5>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aade4:       lea    (%rsi,%rax,8),%rdx
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aade8:       cmp    %rdx,%rcx
    0.00 :   2aadeb:       je     2aadf5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22f5>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aaded:       mov    %rdx,0x88(%r12)
         :            if (__new_size > size())
    0.00 :   2aadf5:       mov    0xa0(%r12),%rcx
    0.00 :   2aadfd:       mov    0x98(%r12),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aae05:       mov    %rcx,%rdx
    0.00 :   2aae08:       sub    %rsi,%rdx
    0.00 :   2aae0b:       sar    $0x3,%rdx
         :            if (__new_size > size())
    0.00 :   2aae0f:       cmp    %rdx,%rax
    0.00 :   2aae12:       ja     2ab324 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2824>
         :            else if (__new_size < size())
    0.00 :   2aae18:       jae    2aae2b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x232b>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aae1a:       lea    (%rsi,%rax,8),%rdx
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aae1e:       cmp    %rdx,%rcx
    0.00 :   2aae21:       je     2aae2b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x232b>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aae23:       mov    %rdx,0xa0(%r12)
         :            if (__new_size > size())
    0.00 :   2aae2b:       mov    0x58(%r12),%rcx
    0.00 :   2aae30:       mov    0x50(%r12),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aae35:       mov    %rcx,%rdx
    0.00 :   2aae38:       sub    %rsi,%rdx
    0.00 :   2aae3b:       sar    $0x3,%rdx
         :            if (__new_size > size())
    0.00 :   2aae3f:       cmp    %rdx,%rax
    0.00 :   2aae42:       ja     2ab3a6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x28a6>
         :            else if (__new_size < size())
    0.00 :   2aae48:       jae    2aae58 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2358>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aae4a:       lea    (%rsi,%rax,8),%rdx
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aae4e:       cmp    %rdx,%rcx
    0.00 :   2aae51:       je     2aae58 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2358>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aae53:       mov    %rdx,0x58(%r12)
    0.00 :   2aae58:       mov    0x98(%r12),%rdi
    0.00 :   2aae60:       test   %rax,%rax
    0.00 :   2aae63:       je     2aaee9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x23e9>
    0.00 :   2aae69:       mov    0x38(%r12),%rcx
    0.00 :   2aae6e:       mov    0x20(%r12),%r10
    0.00 :   2aae73:       mov    0x68(%r12),%r9
    0.00 :   2aae78:       mov    0x80(%r12),%r8
    0.00 :   2aae80:       mov    -0x8(%r10,%rax,8),%rdx
    0.00 :   2aae85:       cmp    %rdx,-0x8(%rcx,%rax,8)
    0.00 :   2aae8a:       cmovge -0x8(%rcx,%rax,8),%rdx
    0.00 :   2aae90:       mov    %rdx,-0x8(%rsi,%rax,8)
    0.00 :   2aae95:       mov    $0x1,%edx
    0.00 :   2aae9a:       cmp    %rax,0x18(%r12)
    0.00 :   2aae9f:       je     2aaeaa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x23aa>
    0.00 :   2aaea1:       mov    (%rdi,%rax,8),%rdx
    0.00 :   2aaea5:       imul   (%rsi,%rax,8),%rdx
    0.00 :   2aaeaa:       mov    %rdx,-0x8(%rdi,%rax,8)
    0.00 :   2aaeaf:       mov    $0x1,%edx
    0.00 :   2aaeb4:       cmp    %rax,0x18(%r12)
    0.00 :   2aaeb9:       je     2aaec4 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x23c4>
    0.00 :   2aaebb:       mov    (%r9,%rax,8),%rdx
    0.00 :   2aaebf:       imul   (%r10,%rax,8),%rdx
    0.00 :   2aaec4:       mov    %rdx,-0x8(%r9,%rax,8)
    0.00 :   2aaec9:       mov    $0x1,%edx
    0.00 :   2aaece:       cmp    %rax,0x18(%r12)
    0.00 :   2aaed3:       je     2aaede <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x23de>
    0.00 :   2aaed5:       mov    (%r8,%rax,8),%rdx
    0.00 :   2aaed9:       imul   (%rcx,%rax,8),%rdx
    0.00 :   2aaede:       mov    %rdx,-0x8(%r8,%rax,8)
    0.00 :   2aaee3:       sub    $0x1,%rax
    0.00 :   2aaee7:       jne    2aae80 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2380>
         :            if (__new_size > size())
    0.00 :   2aaee9:       mov    0xe8(%r12),%rdx
    0.00 :   2aaef1:       mov    0xe0(%r12),%rcx
    0.00 :   2aaef9:       mov    (%rsi),%rbx
    0.00 :   2aaefc:       imul   (%rdi),%rbx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aaf00:       mov    %rdx,%rax
    0.00 :   2aaf03:       sub    %rcx,%rax
    0.00 :   2aaf06:       sar    $0x3,%rax
         :            if (__new_size > size())
    0.00 :   2aaf0a:       cmp    %rax,%rbx
    0.00 :   2aaf0d:       ja     2ab38e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x288e>
         :            else if (__new_size < size())
    0.00 :   2aaf13:       jae    2aaf26 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2426>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aaf15:       lea    (%rcx,%rbx,8),%rax
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aaf19:       cmp    %rax,%rdx
    0.00 :   2aaf1c:       je     2aaf26 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2426>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aaf1e:       mov    %rax,0xe8(%r12)
         :            if (__new_size > size())
    0.00 :   2aaf26:       mov    0x100(%r12),%rdx
    0.00 :   2aaf2e:       mov    0xf8(%r12),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aaf36:       mov    %rdx,%rax
    0.00 :   2aaf39:       sub    %rcx,%rax
    0.00 :   2aaf3c:       sar    $0x3,%rax
         :            if (__new_size > size())
    0.00 :   2aaf40:       cmp    %rax,%rbx
    0.00 :   2aaf43:       ja     2ab376 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2876>
         :            else if (__new_size < size())
    0.00 :   2aaf49:       jae    2aaf5c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x245c>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aaf4b:       lea    (%rcx,%rbx,8),%rax
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aaf4f:       cmp    %rax,%rdx
    0.00 :   2aaf52:       je     2aaf5c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x245c>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aaf54:       mov    %rax,0x100(%r12)
         :            if (__new_size > size())
    0.00 :   2aaf5c:       mov    0x118(%r12),%rdx
    0.00 :   2aaf64:       mov    0x110(%r12),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aaf6c:       mov    %rdx,%rax
    0.00 :   2aaf6f:       sub    %rcx,%rax
    0.00 :   2aaf72:       sar    $0x3,%rax
         :            if (__new_size > size())
    0.00 :   2aaf76:       cmp    %rax,%rbx
    0.00 :   2aaf79:       ja     2ab35e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x285e>
         :            else if (__new_size < size())
    0.00 :   2aaf7f:       jae    2aaf92 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2492>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aaf81:       lea    (%rcx,%rbx,8),%rax
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aaf85:       cmp    %rax,%rdx
    0.00 :   2aaf88:       je     2aaf92 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2492>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aaf8a:       mov    %rax,0x118(%r12)
    0.00 :   2aaf92:       cmpq   $0x0,0x18(%r12)
    0.00 :   2aaf98:       je     2ab2c3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x27c3>
    0.00 :   2aaf9e:       mov    0x50(%r12),%rax
    0.00 :   2aafa3:       mov    (%rax),%rbx
    0.00 :   2aafa6:       test   %rbx,%rbx
    0.00 :   2aafa9:       jle    2ab00e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x250e>
    0.00 :   2aafab:       mov    0x20(%r12),%rax
    0.00 :   2aafb0:       xor    %r15d,%r15d
    0.00 :   2aafb3:       mov    (%rax),%r13
    0.00 :   2aafb6:       mov    0x38(%r12),%rax
    0.00 :   2aafbb:       mov    (%rax),%rbp
    0.00 :   2aafbe:       mov    0x98(%r12),%rax
    0.00 :   2aafc6:       xor    %ecx,%ecx
    0.00 :   2aafc8:       mov    (%rax),%r8
    0.00 :   2aafcb:       imul   %r15,%r8
    0.00 :   2aafcf:       cmp    $0x1,%rbp
    0.00 :   2aafd3:       je     2aafe4 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x24e4>
    0.00 :   2aafd5:       mov    0x80(%r12),%rax
    0.00 :   2aafdd:       mov    (%rax),%rcx
    0.00 :   2aafe0:       imul   %r15,%rcx
    0.00 :   2aafe4:       xor    %edx,%edx
    0.00 :   2aafe6:       cmp    $0x1,%r13
    0.00 :   2aafea:       je     2aaff8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x24f8>
    0.00 :   2aafec:       mov    0x68(%r12),%rax
    0.00 :   2aaff1:       mov    (%rax),%rdx
    0.00 :   2aaff4:       imul   %r15,%rdx
    0.00 :   2aaff8:       mov    $0x1,%esi
    0.00 :   2aaffd:       mov    %r12,%rdi
    0.00 :   2ab000:       add    $0x1,%r15
    0.00 :   2ab004:       callq  2a6750 <onnxruntime::MatMulComputeHelper::RecursiveFill(unsigned long, unsigned long, unsigned long, unsigned long)>
    0.00 :   2ab009:       cmp    %r15,%rbx
    0.00 :   2ab00c:       jne    2aafbe <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x24be>
    0.00 :   2ab00e:       mov    0x18(%rsp),%rax
    0.00 :   2ab013:       movq   $0x0,(%rax)
         :            };
         :
         :            template<std::size_t _Idx, typename _Head>
         :            struct _Head_base<_Idx, _Head, false>
         :            {
         :            constexpr _Head_base()
    0.00 :   2ab01a:       jmpq   2aa370 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1870>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2ab01f:       mov    %rdx,0x28(%rsp)
    0.00 :   2ab024:       mov    $0x1,%r13d
    0.00 :   2ab02a:       mov    %r14,%rdx
    0.00 :   2ab02d:       movb   $0x1,0x20(%rsp)
    0.00 :   2ab032:       jmpq   2a92e9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x7e9>
         :            this->_M_assign(__str);
    0.00 :   2ab037:       mov    (%rsp),%rdi
    0.00 :   2ab03b:       lea    0x50(%rbx),%rsi
    0.00 :   2ab03f:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab044:       jmpq   2a99e6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xee6>
    0.00 :   2ab049:       mov    (%rsp),%rdi
    0.00 :   2ab04d:       lea    0x50(%rbx),%rsi
    0.00 :   2ab051:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab056:       jmpq   2a9dee <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x12ee>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2ab05b:       mov    (%rsp),%rdi
    0.00 :   2ab05f:       sub    %rcx,%r8
    0.00 :   2ab062:       xor    %edx,%edx
    0.00 :   2ab064:       xor    %esi,%esi
    0.00 :   2ab066:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2ab06b:       jmpq   2aa221 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1721>
    0.00 :   2ab070:       mov    (%rsp),%rdi
    0.00 :   2ab074:       sub    %rcx,%r8
    0.00 :   2ab077:       xor    %edx,%edx
    0.00 :   2ab079:       xor    %esi,%esi
    0.00 :   2ab07b:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2ab080:       jmpq   2aa6ec <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1bec>
    0.00 :   2ab085:       mov    (%rcx),%rax
    0.00 :   2ab088:       mov    (%rax),%rax
    0.00 :   2ab08b:       cmp    %rax,0xd8(%r12)
    0.00 :   2ab093:       je     2aacc7 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21c7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab099:       lea    0x100(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0a1:       lea    0x59f9dd(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab0a8:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0ac:       lea    -0x45(%rdx),%rsi
    0.00 :   2ab0b0:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab0b3:       mov    %rax,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0bb:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab0c0:       lea    0x59fbd8(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab0c7:       lea    0x38(%rbx),%rax
    0.00 :   2ab0cb:       movl   $0x89,0x120(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0d6:       lea    0x28(%rbx),%rdi
    0.00 :   2ab0da:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab0de:       mov    %rax,0x128(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0e6:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab0eb:       lea    0x80(%rsp),%rax
    0.00 :   2ab0f3:       xor    %edx,%edx
    0.00 :   2ab0f5:       mov    %rbx,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2ab0f8:       movq   $0x0,0x148(%rsp)
    0.00 :   2ab104:       mov    %rax,%rdi
    0.00 :   2ab107:       mov    %rax,(%rsp)
    0.00 :   2ab10b:       movq   $0x0,0x150(%rsp)
    0.00 :   2ab117:       movq   $0x0,0x158(%rsp)
    0.00 :   2ab123:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2ab128:       lea    0x59fa5a(%rip),%rax        # 84ab89 <typeinfo name for onnxruntime::Hardmax<float>+0x169>
    0.00 :   2ab12f:       mov    (%rsp),%rsi
    0.00 :   2ab133:       lea    0x58(%rsp),%rcx
    0.00 :   2ab138:       lea    0xa0(%rsp),%rbp
    0.00 :   2ab140:       mov    %rax,0x58(%rsp)
    0.00 :   2ab145:       lea    0x50(%rsp),%rdx
    0.00 :   2ab14a:       lea    0x57c5ea(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2ab151:       mov    %rbp,%rdi
    0.00 :   2ab154:       mov    %rax,0x50(%rsp)
    0.00 :   2ab159:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2ab15e:       mov    0x18(%rsp),%rdi
    0.00 :   2ab163:       mov    %rbp,%rcx
    0.00 :   2ab166:       mov    $0x1,%edx
    0.00 :   2ab16b:       mov    $0x2,%esi
    0.00 :   2ab170:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2ab175:       jmpq   2aac71 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2171>
    0.00 :   2ab17a:       lea    -0x1(%rbx),%rax
    0.00 :   2ab17e:       cmp    %r9,%rax
    0.00 :   2ab181:       je     2ab3c5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x28c5>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab187:       lea    0x100(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab18f:       lea    0x59f8ef(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab196:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab19a:       lea    -0x45(%rdx),%rsi
    0.00 :   2ab19e:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab1a1:       mov    %rax,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab1a9:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab1ae:       lea    0x59faea(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab1b5:       lea    0x38(%rbx),%rax
    0.00 :   2ab1b9:       movl   $0x82,0x120(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab1c4:       lea    0x28(%rbx),%rdi
    0.00 :   2ab1c8:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab1cc:       mov    %rax,0x128(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab1d4:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab1d9:       lea    0x80(%rsp),%rax
    0.00 :   2ab1e1:       xor    %edx,%edx
    0.00 :   2ab1e3:       mov    %rbx,%rsi
    0.00 :   2ab1e6:       movq   $0x0,0x148(%rsp)
    0.00 :   2ab1f2:       mov    %rax,%rdi
    0.00 :   2ab1f5:       mov    %rax,(%rsp)
    0.00 :   2ab1f9:       movq   $0x0,0x150(%rsp)
    0.00 :   2ab205:       movq   $0x0,0x158(%rsp)
    0.00 :   2ab211:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2ab216:       lea    0x59f913(%rip),%rax        # 84ab30 <typeinfo name for onnxruntime::Hardmax<float>+0x110>
    0.00 :   2ab21d:       mov    (%rsp),%rsi
    0.00 :   2ab221:       lea    0x58(%rsp),%rcx
    0.00 :   2ab226:       lea    0xa0(%rsp),%rbp
    0.00 :   2ab22e:       mov    %rax,0x58(%rsp)
    0.00 :   2ab233:       lea    0x50(%rsp),%rdx
    0.00 :   2ab238:       lea    0x57c4fc(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2ab23f:       mov    %rbp,%rdi
    0.00 :   2ab242:       mov    %rax,0x50(%rsp)
    0.00 :   2ab247:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2ab24c:       mov    0x18(%rsp),%rdi
    0.00 :   2ab251:       mov    %rbp,%rcx
    0.00 :   2ab254:       mov    $0x1,%edx
    0.00 :   2ab259:       mov    $0x2,%esi
    0.00 :   2ab25e:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2ab263:       jmpq   2aac71 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2171>
         :            this->_M_assign_aux(__l.begin(), __l.end(),
    0.00 :   2ab268:       lea    0x59fa51(%rip),%rdx        # 84acc0 <._168>
    0.00 :   2ab26f:       lea    0xe0(%r12),%rdi
    0.00 :   2ab277:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab27b:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab280:       lea    0x59fa31(%rip),%rdx        # 84acb8 <._169>
    0.00 :   2ab287:       lea    0xf8(%r12),%rdi
    0.00 :   2ab28f:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab293:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab298:       lea    0x59fa11(%rip),%rdx        # 84acb0 <._170>
    0.00 :   2ab29f:       lea    0x110(%r12),%rdi
    0.00 :   2ab2a7:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab2ab:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab2b0:       jmpq   2ab00e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x250e>
    0.00 :   2ab2b5:       xor    %edx,%edx
    0.00 :   2ab2b7:       jmpq   2a9633 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb33>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2ab2bc:       xor    %ecx,%ecx
    0.00 :   2ab2be:       jmpq   2aacfa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21fa>
    0.00 :   2ab2c3:       mov    0xe0(%r12),%rax
    0.00 :   2ab2cb:       movq   $0x0,(%rax)
    0.00 :   2ab2d2:       mov    0xf8(%r12),%rax
    0.00 :   2ab2da:       movq   $0x0,(%rax)
    0.00 :   2ab2e1:       mov    0x110(%r12),%rax
    0.00 :   2ab2e9:       movq   $0x0,(%rax)
    0.00 :   2ab2f0:       jmpq   2ab00e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x250e>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2ab2f5:       mov    (%rsp),%rdi
    0.00 :   2ab2f9:       sub    %rcx,%r8
    0.00 :   2ab2fc:       xor    %edx,%edx
    0.00 :   2ab2fe:       xor    %esi,%esi
    0.00 :   2ab300:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2ab305:       jmpq   2aaac4 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1fc4>
         :            _M_default_append(__new_size - size());
    0.00 :   2ab30a:       sub    %rdx,%rax
    0.00 :   2ab30d:       lea    0x68(%r12),%rdi
    0.00 :   2ab312:       mov    %rax,%rsi
    0.00 :   2ab315:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab31a:       mov    0x18(%r12),%rax
    0.00 :   2ab31f:       jmpq   2aadbf <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22bf>
    0.00 :   2ab324:       sub    %rdx,%rax
    0.00 :   2ab327:       lea    0x98(%r12),%rdi
    0.00 :   2ab32f:       mov    %rax,%rsi
    0.00 :   2ab332:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab337:       mov    0x18(%r12),%rax
    0.00 :   2ab33c:       jmpq   2aae2b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x232b>
    0.00 :   2ab341:       sub    %rdx,%rax
    0.00 :   2ab344:       lea    0x80(%r12),%rdi
    0.00 :   2ab34c:       mov    %rax,%rsi
    0.00 :   2ab34f:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab354:       mov    0x18(%r12),%rax
    0.00 :   2ab359:       jmpq   2aadf5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22f5>
    0.00 :   2ab35e:       mov    %rbx,%rsi
    0.00 :   2ab361:       lea    0x110(%r12),%rdi
    0.00 :   2ab369:       sub    %rax,%rsi
    0.00 :   2ab36c:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab371:       jmpq   2aaf92 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2492>
    0.00 :   2ab376:       mov    %rbx,%rsi
    0.00 :   2ab379:       lea    0xf8(%r12),%rdi
    0.00 :   2ab381:       sub    %rax,%rsi
    0.00 :   2ab384:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab389:       jmpq   2aaf5c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x245c>
    0.00 :   2ab38e:       mov    %rbx,%rsi
    0.00 :   2ab391:       lea    0xe0(%r12),%rdi
    0.00 :   2ab399:       sub    %rax,%rsi
    0.00 :   2ab39c:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab3a1:       jmpq   2aaf26 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2426>
    0.00 :   2ab3a6:       sub    %rdx,%rax
    0.00 :   2ab3a9:       lea    0x50(%r12),%rdi
    0.00 :   2ab3ae:       mov    %rax,%rsi
    0.00 :   2ab3b1:       callq  27c810 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)>
    0.00 :   2ab3b6:       mov    0x18(%r12),%rax
    0.00 :   2ab3bb:       mov    0x50(%r12),%rsi
    0.00 :   2ab3c0:       jmpq   2aae58 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2358>
    0.00 :   2ab3c5:       xor    %eax,%eax
    0.00 :   2ab3c7:       cmpb   $0x0,0x8(%rsp)
    0.00 :   2ab3cc:       mov    (%rcx),%rdx
    0.00 :   2ab3cf:       setne  %al
    0.00 :   2ab3d2:       lea    -0x2(%rax,%rbp,1),%rax
    0.00 :   2ab3d7:       cltq
    0.00 :   2ab3d9:       mov    (%rdx,%rax,8),%rax
    0.00 :   2ab3dd:       cmp    %rax,0xd8(%r12)
    0.00 :   2ab3e5:       je     2ab69e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2b9e>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab3eb:       lea    0x100(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab3f3:       lea    0x59f68b(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab3fa:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab3fe:       lea    -0x45(%rdx),%rsi
    0.00 :   2ab402:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab405:       mov    %rax,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab40d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab412:       lea    0x59f886(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab419:       lea    0x38(%rbx),%rax
    0.00 :   2ab41d:       movl   $0x84,0x120(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab428:       lea    0x28(%rbx),%rdi
    0.00 :   2ab42c:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab430:       mov    %rax,0x128(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab438:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab43d:       lea    0x80(%rsp),%rax
    0.00 :   2ab445:       xor    %edx,%edx
    0.00 :   2ab447:       mov    %rbx,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2ab44a:       movq   $0x0,0x148(%rsp)
    0.00 :   2ab456:       mov    %rax,%rdi
    0.00 :   2ab459:       mov    %rax,(%rsp)
    0.00 :   2ab45d:       movq   $0x0,0x150(%rsp)
    0.00 :   2ab469:       movq   $0x0,0x158(%rsp)
    0.00 :   2ab475:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2ab47a:       lea    0x59f708(%rip),%rax        # 84ab89 <typeinfo name for onnxruntime::Hardmax<float>+0x169>
    0.00 :   2ab481:       mov    (%rsp),%rsi
    0.00 :   2ab485:       lea    0x58(%rsp),%rcx
    0.00 :   2ab48a:       lea    0xa0(%rsp),%rbp
    0.00 :   2ab492:       mov    %rax,0x58(%rsp)
    0.00 :   2ab497:       lea    0x50(%rsp),%rdx
    0.00 :   2ab49c:       lea    0x57c298(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2ab4a3:       mov    %rbp,%rdi
    0.00 :   2ab4a6:       mov    %rax,0x50(%rsp)
    0.00 :   2ab4ab:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2ab4b0:       mov    0x18(%rsp),%rdi
    0.00 :   2ab4b5:       mov    %rbp,%rcx
    0.00 :   2ab4b8:       mov    $0x1,%edx
    0.00 :   2ab4bd:       mov    $0x2,%esi
    0.00 :   2ab4c2:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2ab4c7:       jmpq   2aac71 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2171>
         :            this->_M_assign(__str);
    0.00 :   2ab4cc:       mov    (%rsp),%rdi
    0.00 :   2ab4d0:       lea    0x50(%rbx),%rsi
    0.00 :   2ab4d4:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab4d9:       jmpq   2aa221 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1721>
    0.00 :   2ab4de:       mov    (%rsp),%rdi
    0.00 :   2ab4e2:       lea    0x50(%rbx),%rsi
    0.00 :   2ab4e6:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab4eb:       jmpq   2aa6ec <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1bec>
    0.00 :   2ab4f0:       lea    -0x1(%r8),%rbp
    0.00 :   2ab4f4:       mov    %r15,%rdi
    0.00 :   2ab4f7:       mov    %rcx,(%rsp)
    0.00 :   2ab4fb:       mov    %rbp,%rsi
    0.00 :   2ab4fe:       movslq %ebp,%rbp
    0.00 :   2ab501:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   2ab506:       cmpb   $0x0,0x8(%rsp)
    0.00 :   2ab50b:       mov    (%rsp),%rcx
    0.00 :   2ab50f:       mov    %rax,0xc8(%r12)
    0.00 :   2ab517:       mov    (%r15),%rax
    0.00 :   2ab51a:       mov    (%rax,%rbp,8),%rax
    0.00 :   2ab51e:       mov    %rax,0xd8(%r12)
    0.00 :   2ab526:       je     2ab6d3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bd3>
    0.00 :   2ab52c:       mov    (%rcx),%rax
    0.00 :   2ab52f:       mov    (%rax,%r14,8),%rax
    0.00 :   2ab533:       lea    0xb0(%r12),%rdi
    0.00 :   2ab53b:       mov    %rax,0xd0(%r12)
    0.00 :   2ab543:       mov    %r15,%rsi
    0.00 :   2ab546:       mov    %rcx,(%rsp)
    0.00 :   2ab54a:       callq  2452e0 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)>
    0.00 :   2ab54f:       mov    0xb0(%r12),%rax
    0.00 :   2ab557:       mov    0xd0(%r12),%rdx
    0.00 :   2ab55f:       lea    0x110(%r12),%rdi
    0.00 :   2ab567:       mov    %rdx,(%rax,%rbp,8)
         :            this->_M_assign_aux(__l.begin(), __l.end(),
    0.00 :   2ab56b:       lea    0x59f766(%rip),%rdx        # 84acd8 <._166+0x8>
    0.00 :   2ab572:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab576:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab57b:       lea    0x59f74e(%rip),%rdx        # 84acd0 <._166>
    0.00 :   2ab582:       lea    0xe0(%r12),%rdi
    0.00 :   2ab58a:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab58e:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab593:       lea    0x59f72e(%rip),%rdx        # 84acc8 <._167>
    0.00 :   2ab59a:       lea    0xf8(%r12),%rdi
    0.00 :   2ab5a2:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab5a6:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab5ab:       mov    (%rsp),%rcx
    0.00 :   2ab5af:       mov    0xd8(%r12),%rdx
    0.00 :   2ab5b7:       mov    (%rcx),%rax
    0.00 :   2ab5ba:       cmp    (%rax,%r14,8),%rdx
    0.00 :   2ab5be:       je     2ab6c2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bc2>
    0.00 :   2ab5c4:       cmpb   $0x0,0x8(%rsp)
    0.00 :   2ab5c9:       je     2ab5d8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ad8>
    0.00 :   2ab5cb:       movslq %ebx,%rbx
    0.00 :   2ab5ce:       cmp    (%rax,%rbx,8),%rdx
    0.00 :   2ab5d2:       je     2ab6c2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bc2>
    0.00 :   2ab5d8:       lea    0x100(%rsp),%rbx
    0.00 :   2ab5e0:       mov    $0x37,%edx
    0.00 :   2ab5e5:       lea    0x59f454(%rip),%rsi        # 84aa40 <typeinfo name for onnxruntime::Hardmax<float>+0x20>
    0.00 :   2ab5ec:       mov    %rbx,%rdi
    0.00 :   2ab5ef:       lea    0x59f6a2(%rip),%rcx        # 84ac98 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__>
    0.00 :   2ab5f6:       callq  167570 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*)>
    0.00 :   2ab5fb:       lea    0x80(%rsp),%rax
    0.00 :   2ab603:       xor    %edx,%edx
    0.00 :   2ab605:       mov    %rbx,%rsi
    0.00 :   2ab608:       mov    %rax,%rdi
    0.00 :   2ab60b:       mov    %rax,(%rsp)
    0.00 :   2ab60f:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2ab614:       lea    0x59f56e(%rip),%rax        # 84ab89 <typeinfo name for onnxruntime::Hardmax<float>+0x169>
    0.00 :   2ab61b:       mov    (%rsp),%rsi
    0.00 :   2ab61f:       lea    0x58(%rsp),%rcx
    0.00 :   2ab624:       lea    0xa0(%rsp),%rbp
    0.00 :   2ab62c:       mov    %rax,0x58(%rsp)
    0.00 :   2ab631:       lea    0x50(%rsp),%rdx
    0.00 :   2ab636:       lea    0x57c0fe(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2ab63d:       mov    %rbp,%rdi
    0.00 :   2ab640:       mov    %rax,0x50(%rsp)
    0.00 :   2ab645:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2ab64a:       mov    0x18(%rsp),%rdi
    0.00 :   2ab64f:       mov    %rbp,%rcx
    0.00 :   2ab652:       mov    $0x1,%edx
    0.00 :   2ab657:       mov    $0x2,%esi
    0.00 :   2ab65c:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab661:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab669:       add    $0x10,%rbp
    0.00 :   2ab66d:       cmp    %rbp,%rdi
    0.00 :   2ab670:       je     2ab677 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2b77>
    0.00 :   2ab672:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab677:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab67b:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab683:       add    $0x10,%rax
    0.00 :   2ab687:       cmp    %rax,%rdi
    0.00 :   2ab68a:       je     2ab691 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2b91>
    0.00 :   2ab68c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab691:       mov    %rbx,%rdi
    0.00 :   2ab694:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab699:       jmpq   2a922b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x72b>
    0.00 :   2ab69e:       mov    0xd0(%r12),%rax
    0.00 :   2ab6a6:       mov    %rax,-0x10(%r14,%rbx,8)
    0.00 :   2ab6ab:       jmpq   2aacc7 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21c7>
         :            this->_M_assign(__str);
    0.00 :   2ab6b0:       mov    (%rsp),%rdi
    0.00 :   2ab6b4:       lea    0x50(%rbx),%rsi
    0.00 :   2ab6b8:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab6bd:       jmpq   2aaac4 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1fc4>
    0.00 :   2ab6c2:       mov    0x18(%rsp),%rax
    0.00 :   2ab6c7:       movq   $0x0,(%rax)
    0.00 :   2ab6ce:       jmpq   2a922b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x72b>
    0.00 :   2ab6d3:       mov    (%rcx),%rdx
    0.00 :   2ab6d6:       movslq %ebx,%rax
    0.00 :   2ab6d9:       mov    (%rdx,%rax,8),%rax
    0.00 :   2ab6dd:       jmpq   2ab533 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2a33>
         :            __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    0.00 :   2ab6e2:       mov    %rdx,%rcx
    0.00 :   2ab6e5:       lea    0x57ba1f(%rip),%rsi        # 82710b <std::piecewise_construct+0x36b>
    0.00 :   2ab6ec:       mov    %rax,%rdx
    0.00 :   2ab6ef:       xor    %eax,%eax
    0.00 :   2ab6f1:       lea    0x579e60(%rip),%rdi        # 825558 <_fini+0x2c0>
    0.00 :   2ab6f8:       callq  53940 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
         :            std::__throw_bad_alloc();
    0.00 :   2ab6fd:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   2ab702:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   2ab707:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   2ab70c:       mov    %rax,%rbx
    0.00 :   2ab70f:       jmp    2ab743 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c43>
    0.00 :   2ab711:       mov    %rax,%rbx
    0.00 :   2ab714:       jmp    2ab75b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c5b>
         :            if (!_M_is_local())
    0.00 :   2ab716:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab71a:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab722:       add    $0x10,%rax
    0.00 :   2ab726:       cmp    %rax,%rdi
    0.00 :   2ab729:       je     2ab730 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c30>
         :            ::operator delete(__p);
    0.00 :   2ab72b:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab730:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab735:       add    $0x10,%r15
    0.00 :   2ab739:       cmp    %r15,%rdi
    0.00 :   2ab73c:       je     2ab743 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c43>
    0.00 :   2ab73e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab743:       mov    %rbp,%rdi
    0.00 :   2ab746:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab74b:       mov    %r14,%rdi
    0.00 :   2ab74e:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2ab753:       mov    %rbx,%rdi
    0.00 :   2ab756:       callq  53c30 <_Unwind_Resume@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab75b:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab763:       add    $0x10,%rbp
    0.00 :   2ab767:       cmp    %rbp,%rdi
    0.00 :   2ab76a:       je     2ab74b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4b>
         :            ::operator delete(__p);
    0.00 :   2ab76c:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2ab771:       jmp    2ab74b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4b>
    0.00 :   2ab773:       mov    %rax,%rbx
    0.00 :   2ab776:       jmp    2ab716 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c16>
    0.00 :   2ab778:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab77c:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab784:       add    $0x10,%rax
    0.00 :   2ab788:       cmp    %rax,%rdi
    0.00 :   2ab78b:       je     2ab792 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c92>
         :            ::operator delete(__p);
    0.00 :   2ab78d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab792:       callq  52a50 <std::terminate()@plt>
    0.00 :   2ab797:       mov    %rax,%r12
    0.00 :   2ab79a:       jmp    2ab7a1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ca1>
    0.00 :   2ab79c:       mov    %rax,%r12
    0.00 :   2ab79f:       jmp    2ab7b6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cb6>
    0.00 :   2ab7a1:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab7a5:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab7ad:       add    $0x10,%rax
    0.00 :   2ab7b1:       cmp    %rax,%rdi
    0.00 :   2ab7b4:       jne    2ab7dc <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cdc>
    0.00 :   2ab7b6:       mov    %rbx,%rdi
    0.00 :   2ab7b9:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   2ab7be:       mov    %rbp,%rdi
    0.00 :   2ab7c1:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab7c6:       mov    %r12,%rdi
    0.00 :   2ab7c9:       callq  53c30 <_Unwind_Resume@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab7ce:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab7d3:       add    $0x10,%r15
    0.00 :   2ab7d7:       cmp    %r15,%rdi
    0.00 :   2ab7da:       je     2ab7b6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cb6>
    0.00 :   2ab7dc:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2ab7e1:       jmp    2ab7b6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cb6>
    0.00 :   2ab7e3:       mov    %rax,%r12
    0.00 :   2ab7e6:       jmp    2ab7ea <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cea>
    0.00 :   2ab7e8:       jmp    2ab823 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d23>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2ab7ea:       lea    0x8(%rbx),%rdi
    0.00 :   2ab7ee:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   2ab7f3:       mov    -0x18(%r13),%rax
    0.00 :   2ab7f7:       mov    %r13,0x100(%rsp)
    0.00 :   2ab7ff:       mov    %r14,0x100(%rsp,%rax,1)
    0.00 :   2ab807:       mov    0x20(%rsp),%rax
    0.00 :   2ab80c:       lea    0x70(%rbx),%rdi
    0.00 :   2ab810:       add    $0x10,%rax
    0.00 :   2ab814:       mov    %rax,0x170(%rsp)
    0.00 :   2ab81c:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2ab821:       jmp    2ab7be <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cbe>
    0.00 :   2ab823:       lea    0x8(%rbx),%rdi
    0.00 :   2ab827:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   2ab82c:       mov    -0x18(%r13),%rax
    0.00 :   2ab830:       mov    %r13,0x100(%rsp)
    0.00 :   2ab838:       mov    %r14,0x100(%rsp,%rax,1)
    0.00 :   2ab840:       mov    0x20(%rsp),%rax
    0.00 :   2ab845:       lea    0x70(%rbx),%rdi
    0.00 :   2ab849:       add    $0x10,%rax
    0.00 :   2ab84d:       mov    %rax,0x170(%rsp)
    0.00 :   2ab855:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2ab85a:       jmpq   2ab792 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c92>
    0.00 :   2ab85f:       mov    %rax,%r12
    0.00 :   2ab862:       jmp    2ab869 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d69>
    0.00 :   2ab864:       mov    %rax,%r12
    0.00 :   2ab867:       jmp    2ab899 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d99>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab869:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab871:       add    $0x10,%rbp
    0.00 :   2ab875:       cmp    %rbp,%rdi
    0.00 :   2ab878:       je     2ab87f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d7f>
         :            ::operator delete(__p);
    0.00 :   2ab87a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab87f:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab883:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab88b:       add    $0x10,%rax
    0.00 :   2ab88f:       cmp    %rax,%rdi
    0.00 :   2ab892:       je     2ab899 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d99>
    0.00 :   2ab894:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab899:       mov    %rbx,%rdi
    0.00 :   2ab89c:       mov    %r12,%rbx
    0.00 :   2ab89f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab8a4:       jmpq   2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
    0.00 :   2ab8a9:       mov    %rax,%rbx
    0.00 :   2ab8ac:       jmpq   2ab947 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e47>
    0.00 :   2ab8b1:       mov    %rax,%rbp
    0.00 :   2ab8b4:       jmp    2ab927 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e27>
    0.00 :   2ab8b6:       jmpq   2ab9f1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ef1>
    0.00 :   2ab8bb:       mov    %rax,%r12
    0.00 :   2ab8be:       jmp    2ab8d3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2dd3>
    0.00 :   2ab8c0:       jmpq   2ab97d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e7d>
    0.00 :   2ab8c5:       jmp    2ab922 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e22>
    0.00 :   2ab8c7:       jmpq   2ab9ec <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2eec>
    0.00 :   2ab8cc:       jmpq   2ab773 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c73>
    0.00 :   2ab8d1:       jmp    2ab913 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e13>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab8d3:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab8db:       add    $0x10,%rbp
    0.00 :   2ab8df:       cmp    %rbp,%rdi
    0.00 :   2ab8e2:       je     2ab8e9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2de9>
    0.00 :   2ab8e4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab8e9:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab8ed:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab8f5:       add    $0x10,%rax
    0.00 :   2ab8f9:       cmp    %rax,%rdi
    0.00 :   2ab8fc:       je     2ab903 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e03>
    0.00 :   2ab8fe:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab903:       mov    %rbx,%rdi
    0.00 :   2ab906:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab90b:       mov    %r12,%rdi
    0.00 :   2ab90e:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   2ab913:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2ab918:       jmpq   2ab711 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c11>
    0.00 :   2ab91d:       jmpq   2ab70c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c0c>
    0.00 :   2ab922:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab927:       mov    0x100(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab92f:       add    $0x10,%rbx
    0.00 :   2ab933:       cmp    %rbx,%rdi
    0.00 :   2ab936:       je     2ab93d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e3d>
    0.00 :   2ab938:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2ab93d:       mov    %rbp,%rbx
    0.00 :   2ab940:       jmpq   2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
    0.00 :   2ab945:       jmp    2ab94c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e4c>
         :            _M_deallocate(pointer __p, size_t __n)
    0.00 :   2ab947:       jmpq   2ab74b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4b>
    0.00 :   2ab94c:       lea    0x8(%rbx),%rdi
    0.00 :   2ab950:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   2ab955:       mov    -0x18(%r13),%rax
    0.00 :   2ab959:       mov    0x28(%rsp),%rcx
    0.00 :   2ab95e:       mov    %r13,0x100(%rsp)
    0.00 :   2ab966:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2ab96e:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2ab973:       mov    %rax,%r12
    0.00 :   2ab976:       jmp    2ab903 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e03>
    0.00 :   2ab978:       mov    %rax,%rbx
    0.00 :   2ab97b:       jmp    2ab9d6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ed6>
    0.00 :   2ab97d:       lea    0x8(%rbx),%rdi
    0.00 :   2ab981:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   2ab986:       mov    0x28(%rsp),%rax
    0.00 :   2ab98b:       mov    0x30(%rsp),%rcx
    0.00 :   2ab990:       mov    %rax,0x100(%rsp)
    0.00 :   2ab998:       mov    -0x18(%rax),%rax
    0.00 :   2ab99c:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2ab9a4:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2ab9a9:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab9ad:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab9b5:       add    $0x10,%rax
    0.00 :   2ab9b9:       cmp    %rax,%rdi
    0.00 :   2ab9bc:       je     2ab9c3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ec3>
         :            ::operator delete(__p);
    0.00 :   2ab9be:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab9c3:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab9c8:       add    $0x10,%r15
    0.00 :   2ab9cc:       cmp    %r15,%rdi
    0.00 :   2ab9cf:       je     2ab9d6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ed6>
    0.00 :   2ab9d1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab9d6:       mov    %rbp,%rdi
    0.00 :   2ab9d9:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
         :            if (__p)
    0.00 :   2ab9de:       test   %r14,%r14
    0.00 :   2ab9e1:       jne    2ab74b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4b>
    0.00 :   2ab9e7:       jmpq   2ab753 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c53>
    0.00 :   2ab9ec:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
         :            _M_is_local() const
    0.00 :   2ab9f1:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
    0.00 :   2ab9f6:       mov    %rax,%rbx
    0.00 :   2ab9f9:       jmp    2ab9a9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ea9>
    0.00 :   2ab9fb:       jmpq   2ab8b1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2db1>
    0.00 :   2aba00:       jmp    2aba07 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f07>
    0.00 :   2aba02:       mov    %rax,%r12
    0.00 :   2aba05:       jmp    2aba0c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f0c>
    0.00 :   2aba07:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
         :            if (!_M_is_local())
    0.00 :   2aba0c:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aba10:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aba18:       add    $0x10,%rax
    0.00 :   2aba1c:       cmp    %rax,%rdi
    0.00 :   2aba1f:       je     2aba26 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f26>
    0.00 :   2aba21:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aba26:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aba2b:       add    $0x10,%r15
    0.00 :   2aba2f:       cmp    %r15,%rdi
    0.00 :   2aba32:       je     2ab7be <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cbe>
    0.00 :   2aba38:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2aba3d:       jmpq   2ab7be <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cbe>
    0.00 :   2aba42:       jmp    2aba46 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f46>
    0.00 :   2aba44:       jmp    2aba4b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f4b>
    0.00 :   2aba46:       jmpq   2ab94c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e4c>
    0.00 :   2aba4b:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2aba50:       jmpq   2ab978 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e78>
    0.00 :   2aba55:       mov    %rax,%rbx
    0.00 :   2aba58:       jmpq   2abaf8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ff8>
    0.00 :   2aba5d:       jmpq   2ab85f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d5f>
    0.00 :   2aba62:       jmp    2ab9f6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ef6>
    0.00 :   2aba64:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
    0.00 :   2aba69:       jmpq   2ab864 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d64>
    0.00 :   2aba6e:       jmpq   2ab8b1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2db1>
    0.00 :   2aba73:       jmpq   2ab864 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d64>
    0.00 :   2aba78:       jmpq   2ab8b1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2db1>
    0.00 :   2aba7d:       jmpq   2ab864 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d64>
    0.00 :   2aba82:       jmpq   2ab85f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d5f>
    0.00 :   2aba87:       jmpq   2ab97d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e7d>
    0.00 :   2aba8c:       jmp    2aba95 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f95>
    0.00 :   2aba8e:       jmpq   2ab85f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d5f>
    0.00 :   2aba93:       jmp    2aba9a <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f9a>
         :            _M_is_local() const
    0.00 :   2aba95:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
    0.00 :   2aba9a:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
    0.00 :   2aba9f:       jmpq   2ab94c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e4c>
    0.00 :   2abaa4:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2abaa9:       jmpq   2ab978 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e78>
    0.00 :   2abaae:       jmp    2aba55 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f55>
    0.00 :   2abab0:       mov    %rax,%r12
    0.00 :   2abab3:       jmpq   2ab807 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d07>
    0.00 :   2abab8:       mov    %rax,%rbx
    0.00 :   2ababb:       jmp    2abac7 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2fc7>
    0.00 :   2ababd:       mov    %rax,%r12
    0.00 :   2abac0:       jmpq   2ab7ce <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cce>
    0.00 :   2abac5:       jmp    2abae1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2fe1>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2abac7:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2abacf:       add    $0x10,%rbp
    0.00 :   2abad3:       cmp    %rbp,%rdi
    0.00 :   2abad6:       jne    2ab74e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4e>
    0.00 :   2abadc:       jmpq   2ab753 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c53>
    0.00 :   2abae1:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2abae6:       jmpq   2aba55 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f55>
    0.00 :   2abaeb:       mov    %rax,%rbx
    0.00 :   2abaee:       jmpq   2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
    0.00 :   2abaf3:       jmpq   2ab9f6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ef6>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2abaf8:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2abb00:       add    $0x10,%rbp
    0.00 :   2abb04:       cmp    %rbp,%rdi
    0.00 :   2abb07:       je     2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
         :            ::operator delete(__p);
    0.00 :   2abb0d:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2abb12:       jmpq   2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a8d20 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)>:
         :            _Z17MlasSgemmScheduleP21MLAS_SGEMM_WORK_BLOCKPN11onnxruntime11concurrency10ThreadPoolE():
    0.00 :   6a8d20:       push   %r14
    0.00 :   6a8d22:       push   %r13
    0.00 :   6a8d24:       mov    %rsi,%r13
    0.00 :   6a8d27:       push   %r12
    0.00 :   6a8d29:       mov    %rdi,%r12
    0.00 :   6a8d2c:       push   %rbp
    0.00 :   6a8d2d:       push   %rbx
    0.00 :   6a8d2e:       mov    0x10(%rdi),%r14
    0.00 :   6a8d32:       mov    0x18(%rdi),%rbp
    0.00 :   6a8d36:       test   %r14,%r14
    0.00 :   6a8d39:       js     6a8e68 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x148>
  100.00 :   6a8d3f:       pxor   %xmm0,%xmm0
    0.00 :   6a8d43:       cvtsi2sd %r14,%xmm0
    0.00 :   6a8d48:       test   %rbp,%rbp
    0.00 :   6a8d4b:       js     6a8e40 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x120>
    0.00 :   6a8d51:       pxor   %xmm1,%xmm1
    0.00 :   6a8d55:       cvtsi2sd %rbp,%xmm1
    0.00 :   6a8d5a:       mov    0x20(%r12),%rax
    0.00 :   6a8d5f:       mulsd  %xmm1,%xmm0
    0.00 :   6a8d63:       test   %rax,%rax
    0.00 :   6a8d66:       js     6a8e20 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x100>
    0.00 :   6a8d6c:       pxor   %xmm1,%xmm1
    0.00 :   6a8d70:       cvtsi2sd %rax,%xmm1
    0.00 :   6a8d75:       lea    0x5821c4(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8d7c:       mulsd  %xmm1,%xmm0
    0.00 :   6a8d80:       pxor   %xmm1,%xmm1
    0.00 :   6a8d84:       mov    0x108(%rax),%edx
    0.00 :   6a8d8a:       mov    %edx,%eax
    0.00 :   6a8d8c:       mov    %edx,%ebx
    0.00 :   6a8d8e:       shl    $0x10,%eax
    0.00 :   6a8d91:       cvtsi2sd %rax,%xmm1
    0.00 :   6a8d96:       comisd %xmm0,%xmm1
    0.00 :   6a8d9a:       jbe    6a8dab <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x8b>
    0.00 :   6a8d9c:       mulsd  0x1b624c(%rip),%xmm0        # 85eff0 <typeinfo name for onnxruntime::QLinearConv::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}+0x50>
    0.00 :   6a8da4:       cvttsd2si %xmm0,%edx
    0.00 :   6a8da8:       lea    0x1(%rdx),%ebx
         :            _Z25MlasGetMaximumThreadCountPN11onnxruntime11concurrency10ThreadPoolE():
    0.00 :   6a8dab:       mov    %r13,%rdi
    0.00 :   6a8dae:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            _Z17MlasSgemmScheduleP21MLAS_SGEMM_WORK_BLOCKPN11onnxruntime11concurrency10ThreadPoolE():
    0.00 :   6a8db3:       cmp    %eax,%ebx
    0.00 :   6a8db5:       cmovle %ebx,%eax
    0.00 :   6a8db8:       mov    %eax,%edx
    0.00 :   6a8dba:       cltq
    0.00 :   6a8dbc:       cmp    %rbp,%r14
    0.00 :   6a8dbf:       jae    6a8e00 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0xe0>
    0.00 :   6a8dc1:       add    $0xf,%rbp
    0.00 :   6a8dc5:       movl   $0x1,(%r12)
    0.00 :   6a8dcd:       shr    $0x4,%rbp
    0.00 :   6a8dd1:       cmp    %rbp,%rax
    0.00 :   6a8dd4:       cmova  %ebp,%edx
    0.00 :   6a8dd7:       mov    %edx,0x4(%r12)
    0.00 :   6a8ddc:       lea    -0x213(%rip),%rdi        # 6a8bd0 <MlasSgemmThreaded(void*, int)>
    0.00 :   6a8de3:       pop    %rbx
    0.00 :   6a8de4:       mov    %r13,%rcx
    0.00 :   6a8de7:       mov    %r12,%rsi
    0.00 :   6a8dea:       pop    %rbp
    0.00 :   6a8deb:       pop    %r12
    0.00 :   6a8ded:       pop    %r13
    0.00 :   6a8def:       pop    %r14
    0.00 :   6a8df1:       jmpq   6e5600 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)>
    0.00 :   6a8df6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   6a8e00:       movl   $0x1,0x4(%r12)
    0.00 :   6a8e09:       cmp    %r14,%rax
    0.00 :   6a8e0c:       cmova  %r14d,%edx
    0.00 :   6a8e10:       mov    %edx,(%r12)
    0.00 :   6a8e14:       jmp    6a8ddc <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0xbc>
    0.00 :   6a8e16:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   6a8e20:       mov    %rax,%rdx
    0.00 :   6a8e23:       and    $0x1,%eax
    0.00 :   6a8e26:       pxor   %xmm1,%xmm1
    0.00 :   6a8e2a:       shr    %rdx
    0.00 :   6a8e2d:       or     %rax,%rdx
    0.00 :   6a8e30:       cvtsi2sd %rdx,%xmm1
    0.00 :   6a8e35:       addsd  %xmm1,%xmm1
    0.00 :   6a8e39:       jmpq   6a8d75 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x55>
    0.00 :   6a8e3e:       xchg   %ax,%ax
    0.00 :   6a8e40:       mov    %rbp,%rax
    0.00 :   6a8e43:       mov    %rbp,%rdx
    0.00 :   6a8e46:       pxor   %xmm1,%xmm1
    0.00 :   6a8e4a:       shr    %rax
    0.00 :   6a8e4d:       and    $0x1,%edx
    0.00 :   6a8e50:       or     %rdx,%rax
    0.00 :   6a8e53:       cvtsi2sd %rax,%xmm1
    0.00 :   6a8e58:       addsd  %xmm1,%xmm1
    0.00 :   6a8e5c:       jmpq   6a8d5a <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x3a>
    0.00 :   6a8e61:       nopl   0x0(%rax)
    0.00 :   6a8e68:       mov    %r14,%rax
    0.00 :   6a8e6b:       mov    %r14,%rdx
    0.00 :   6a8e6e:       pxor   %xmm0,%xmm0
    0.00 :   6a8e72:       shr    %rax
    0.00 :   6a8e75:       and    $0x1,%edx
    0.00 :   6a8e78:       or     %rdx,%rax
    0.00 :   6a8e7b:       cvtsi2sd %rax,%xmm0
    0.00 :   6a8e80:       addsd  %xmm0,%xmm0
    0.00 :   6a8e84:       jmpq   6a8d48 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x28>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000059b540 <onnxruntime::PrimitiveDataType<float>::Size() const>:
         :            _ZNK11onnxruntime17PrimitiveDataTypeIfE4SizeEv():
  100.00 :   59b540:       mov    $0x4,%eax
    0.00 :   59b545:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004988a0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime9Transpose7ComputeEPNS_15OpKernelContextE():
    0.00 :   4988a0:       push   %r15
    0.00 :   4988a2:       push   %r14
    0.00 :   4988a4:       mov    %rsi,%r14
    0.00 :   4988a7:       xor    %esi,%esi
    0.00 :   4988a9:       push   %r13
    0.00 :   4988ab:       push   %r12
    0.00 :   4988ad:       push   %rbp
    0.00 :   4988ae:       push   %rbx
    0.00 :   4988af:       sub    $0x438,%rsp
    0.00 :   4988b6:       mov    %rdi,0x18(%rsp)
    0.00 :   4988bb:       mov    %rdx,%rdi
    0.00 :   4988be:       mov    %rdx,0x40(%rsp)
    0.00 :   4988c3:       mov    %fs:0x28,%rax
    0.00 :   4988cc:       mov    %rax,0x428(%rsp)
    0.00 :   4988d4:       xor    %eax,%eax
    0.00 :   4988d6:       callq  5c7570 <onnxruntime::OpKernelContext::GetInputMLValue(int) const>
    0.00 :   4988db:       test   %rax,%rax
    0.00 :   4988de:       je     4990d8 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x838>
    0.00 :   4988e4:       mov    0x10(%rax),%rdi
    0.00 :   4988e8:       mov    %rax,%rbx
    0.00 :   4988eb:       test   %rdi,%rdi
    0.00 :   4988ee:       je     4988fe <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x5e>
    0.00 :   4988f0:       mov    (%rdi),%rax
    0.00 :   4988f3:       callq  *0x30(%rax)
    0.00 :   4988f6:       test   %al,%al
    0.00 :   4988f8:       jne    498dc0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x520>
    0.00 :   4988fe:       mov    $0xa0,%edi
    0.00 :   498903:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   498908:       mov    0x10(%rbx),%rdi
    0.00 :   49890c:       mov    %rax,0x18(%rsp)
    0.00 :   498911:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   498916:       lea    0x2b0(%rsp),%r13
    0.00 :   49891e:       mov    %rax,%r14
    0.00 :   498921:       lea    0x70(%r13),%rdi
    0.00 :   498925:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   49892a:       mov    0x78f1f7(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   498931:       xor    %ecx,%ecx
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   498933:       xor    %esi,%esi
    0.00 :   498935:       mov    %cx,0x400(%rsp)
    0.00 :   49893d:       mov    %rax,0x8(%rsp)
    0.00 :   498942:       add    $0x10,%rax
    0.00 :   498946:       mov    %rax,0x320(%rsp)
    0.00 :   49894e:       mov    0x78f44b(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   498955:       movq   $0x0,0x3f8(%rsp)
    0.00 :   498961:       mov    0x8(%rax),%rbp
    0.00 :   498965:       mov    0x10(%rax),%r12
    0.00 :   498969:       movq   $0x0,0x408(%rsp)
    0.00 :   498975:       movq   $0x0,0x410(%rsp)
    0.00 :   498981:       mov    -0x18(%rbp),%rdi
    0.00 :   498985:       mov    %rbp,0x2b0(%rsp)
    0.00 :   49898d:       movq   $0x0,0x418(%rsp)
    0.00 :   498999:       movq   $0x0,0x420(%rsp)
    0.00 :   4989a5:       add    %r13,%rdi
    0.00 :   4989a8:       mov    %r12,(%rdi)
    0.00 :   4989ab:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   4989b0:       mov    0x78f3a9(%rip),%rbx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   4989b7:       lea    0x40(%r13),%rdi
    0.00 :   4989bb:       movq   $0x0,0x2c0(%rsp)
    0.00 :   4989c7:       movq   $0x0,0x2c8(%rsp)
    0.00 :   4989d3:       movq   $0x0,0x2d0(%rsp)
    0.00 :   4989df:       lea    0x18(%rbx),%rax
    0.00 :   4989e3:       mov    %rax,0x2b0(%rsp)
    0.00 :   4989eb:       lea    0x40(%rbx),%rax
    0.00 :   4989ef:       mov    %rax,0x320(%rsp)
    0.00 :   4989f7:       mov    0x78f262(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   4989fe:       movq   $0x0,0x2d8(%rsp)
    0.00 :   498a0a:       mov    %rax,0x10(%rsp)
    0.00 :   498a0f:       add    $0x10,%rax
    0.00 :   498a13:       mov    %rax,0x2b8(%rsp)
    0.00 :   498a1b:       movq   $0x0,0x2e0(%rsp)
    0.00 :   498a27:       movq   $0x0,0x2e8(%rsp)
    0.00 :   498a33:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   498a38:       mov    0x78f599(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   498a3f:       lea    0x8(%r13),%rsi
    0.00 :   498a43:       lea    0x70(%r13),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   498a47:       movl   $0x10,0x2f8(%rsp)
    0.00 :   498a52:       mov    %rax,0x20(%rsp)
    0.00 :   498a57:       add    $0x10,%rax
    0.00 :   498a5b:       mov    %rax,0x2b8(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   498a63:       lea    0x60(%r13),%rax
    0.00 :   498a67:       mov    %rax,0x300(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   498a6f:       movq   $0x0,0x308(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   498a7b:       movb   $0x0,0x310(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   498a83:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   498a88:       mov    $0x21,%edx
    0.00 :   498a8d:       lea    0x38e87c(%rip),%rsi        # 827310 <std::piecewise_construct+0x570>
    0.00 :   498a94:       mov    %r13,%rdi
    0.00 :   498a97:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!__s)
    0.00 :   498a9c:       test   %r14,%r14
    0.00 :   498a9f:       je     4998d0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1030>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   498aa5:       mov    %r14,%rdi
    0.00 :   498aa8:       callq  52c60 <strlen@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   498aad:       mov    %r14,%rsi
    0.00 :   498ab0:       mov    %r13,%rdi
    0.00 :   498ab3:       mov    %rax,%rdx
    0.00 :   498ab6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   498abb:       lea    0x130(%rsp),%r14
         :            { __c1 = __c2; }
    0.00 :   498ac3:       movb   $0x0,0x140(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   498acb:       movq   $0x0,0x138(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   498ad7:       lea    0x10(%r14),%rax
    0.00 :   498adb:       mov    %rax,0x130(%rsp)
         :            if (this->pptr())
    0.00 :   498ae3:       mov    0x2e0(%rsp),%rax
    0.00 :   498aeb:       test   %rax,%rax
    0.00 :   498aee:       je     499918 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1078>
         :            if (this->pptr() > this->egptr())
    0.00 :   498af4:       mov    0x2d0(%rsp),%r8
    0.00 :   498afc:       mov    0x2d8(%rsp),%rcx
    0.00 :   498b04:       cmp    %r8,%rax
    0.00 :   498b07:       ja     499840 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xfa0>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   498b0d:       sub    %rcx,%r8
    0.00 :   498b10:       xor    %edx,%edx
    0.00 :   498b12:       xor    %esi,%esi
    0.00 :   498b14:       mov    %r14,%rdi
    0.00 :   498b17:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   498b1c:       lea    0x18(%rbx),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   498b20:       mov    0x300(%rsp),%rdi
    0.00 :   498b28:       mov    %rax,0x2b0(%rsp)
    0.00 :   498b30:       lea    0x40(%rbx),%rax
    0.00 :   498b34:       mov    %rax,0x320(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   498b3c:       mov    0x20(%rsp),%rax
    0.00 :   498b41:       add    $0x10,%rax
    0.00 :   498b45:       mov    %rax,0x2b8(%rsp)
         :            if (!_M_is_local())
    0.00 :   498b4d:       lea    0x60(%r13),%rax
    0.00 :   498b51:       cmp    %rax,%rdi
    0.00 :   498b54:       je     498b5b <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x2bb>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   498b56:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   498b5b:       mov    0x10(%rsp),%rax
    0.00 :   498b60:       lea    0x40(%r13),%rdi
    0.00 :   498b64:       add    $0x10,%rax
    0.00 :   498b68:       mov    %rax,0x2b8(%rsp)
    0.00 :   498b70:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   498b75:       mov    -0x18(%rbp),%rax
         :            ~basic_ios() { }
    0.00 :   498b79:       lea    0x70(%r13),%rdi
    0.00 :   498b7d:       mov    %rbp,0x2b0(%rsp)
    0.00 :   498b85:       mov    %r12,0x2b0(%rsp,%rax,1)
    0.00 :   498b8d:       mov    0x8(%rsp),%rax
    0.00 :   498b92:       add    $0x10,%rax
    0.00 :   498b96:       mov    %rax,0x320(%rsp)
    0.00 :   498b9e:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   498ba3:       lea    0xb0(%rsp),%rax
    0.00 :   498bab:       mov    %rax,%rdi
    0.00 :   498bae:       mov    %rax,0x8(%rsp)
    0.00 :   498bb3:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   498bb8:       lea    0x38e7b8(%rip),%rdx        # 827377 <std::piecewise_construct+0x5d7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   498bbf:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   498bc3:       mov    %r13,%rdi
    0.00 :   498bc6:       lea    -0x3f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   498bca:       mov    %rax,0x2b0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   498bd2:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   498bd7:       lea    0x3e169f(%rip),%rdx        # 87a27d <OrtValue::Get<onnxruntime::Tensor>() const::__PRETTY_FUNCTION__+0x3d>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   498bde:       lea    0x38(%r13),%rax
    0.00 :   498be2:       movl   $0x57,0x2d0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   498bed:       lea    0x28(%r13),%rdi
    0.00 :   498bf1:       lea    -0x3d(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   498bf5:       mov    %rax,0x2d8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   498bfd:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   498c02:       mov    0xb8(%rsp),%r12
    0.00 :   498c0a:       mov    0xb0(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498c12:       movq   $0x0,0x2f8(%rsp)
    0.00 :   498c1e:       movq   $0x0,0x300(%rsp)
    0.00 :   498c2a:       movq   $0x0,0x308(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   498c36:       mov    %r12,%rbp
    0.00 :   498c39:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   498c3c:       mov    %rbp,%rax
    0.00 :   498c3f:       sar    $0x5,%rax
    0.00 :   498c43:       je     4998f0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1050>
         :            if (__n > this->max_size())
    0.00 :   498c49:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   498c53:       cmp    %rdx,%rax
    0.00 :   498c56:       ja     499ba0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1300>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   498c5c:       mov    %rbp,%rdi
    0.00 :   498c5f:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   498c64:       mov    0xb8(%rsp),%r12
    0.00 :   498c6c:       mov    0xb0(%rsp),%rbx
    0.00 :   498c74:       mov    %rax,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   498c77:       add    %r15,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   498c7a:       mov    %r15,0x2f8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   498c82:       mov    %rbp,0x308(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   498c8a:       mov    %r15,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   498c8d:       mov    %r15,0x300(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   498c95:       cmp    %rbx,%r12
    0.00 :   498c98:       je     498cc7 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x427>
    0.00 :   498c9a:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   498ca0:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   498ca4:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   498ca7:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   498cab:       mov    (%rbx),%rsi
    0.00 :   498cae:       mov    0x8(%rbx),%rdx
    0.00 :   498cb2:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   498cb5:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   498cba:       add    $0x20,%rbx
    0.00 :   498cbe:       add    $0x20,%rbp
    0.00 :   498cc2:       cmp    %rbx,%r12
    0.00 :   498cc5:       jne    498ca0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x400>
    0.00 :   498cc7:       mov    0x18(%rsp),%rdi
    0.00 :   498ccc:       mov    %r14,%rcx
    0.00 :   498ccf:       lea    0x3fa29f(%rip),%rdx        # 892f75 <onnxruntime::MemPatternPlanner::TraceAllocation(int, unsigned long)::__PRETTY_FUNCTION__+0x175>
    0.00 :   498cd6:       mov    %r13,%rsi
         :            this->_M_impl._M_finish =
    0.00 :   498cd9:       mov    %rbp,0x300(%rsp)
    0.00 :   498ce1:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   498ce6:       mov    0x300(%rsp),%rbp
    0.00 :   498cee:       mov    0x2f8(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   498cf6:       cmp    %rbx,%rbp
    0.00 :   498cf9:       je     498d22 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x482>
    0.00 :   498cfb:       nopl   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   498d00:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   498d03:       lea    0x10(%rbx),%rax
    0.00 :   498d07:       cmp    %rax,%rdi
    0.00 :   498d0a:       je     498d11 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x471>
         :            ::operator delete(__p);
    0.00 :   498d0c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   498d11:       add    $0x20,%rbx
    0.00 :   498d15:       cmp    %rbx,%rbp
    0.00 :   498d18:       jne    498d00 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x460>
    0.00 :   498d1a:       mov    0x2f8(%rsp),%rbx
         :            if (__p)
    0.00 :   498d22:       test   %rbx,%rbx
    0.00 :   498d25:       je     498d2f <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x48f>
    0.00 :   498d27:       mov    %rbx,%rdi
    0.00 :   498d2a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   498d2f:       mov    0x2d8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   498d37:       lea    0x38(%r13),%rax
    0.00 :   498d3b:       cmp    %rax,%rdi
    0.00 :   498d3e:       je     498d45 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x4a5>
    0.00 :   498d40:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   498d45:       mov    0x2b0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   498d4d:       lea    0x10(%r13),%rax
    0.00 :   498d51:       cmp    %rax,%rdi
    0.00 :   498d54:       je     498d5b <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x4bb>
    0.00 :   498d56:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   498d5b:       mov    0xb8(%rsp),%rbp
    0.00 :   498d63:       mov    0xb0(%rsp),%rbx
    0.00 :   498d6b:       cmp    %rbx,%rbp
    0.00 :   498d6e:       je     498d92 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x4f2>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   498d70:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   498d73:       lea    0x10(%rbx),%rax
    0.00 :   498d77:       cmp    %rax,%rdi
    0.00 :   498d7a:       je     498d81 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x4e1>
    0.00 :   498d7c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   498d81:       add    $0x20,%rbx
    0.00 :   498d85:       cmp    %rbx,%rbp
    0.00 :   498d88:       jne    498d70 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x4d0>
    0.00 :   498d8a:       mov    0xb0(%rsp),%rbx
         :            if (__p)
    0.00 :   498d92:       test   %rbx,%rbx
    0.00 :   498d95:       je     498d9f <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x4ff>
    0.00 :   498d97:       mov    %rbx,%rdi
    0.00 :   498d9a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   498d9f:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   498da7:       lea    0x10(%r14),%rax
    0.00 :   498dab:       cmp    %rax,%rdi
    0.00 :   498dae:       je     9ab46 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x3d4>
    0.00 :   498db4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   498db9:       jmpq   9ab46 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x3d4>
    0.00 :   498dbe:       xchg   %ax,%ax
    0.00 :   498dc0:       mov    (%rbx),%r15
    0.00 :   498dc3:       test   %r15,%r15
    0.00 :   498dc6:       je     4990d8 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x838>
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498dcc:       movq   $0x0,0x70(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   498dd5:       mov    0x20(%r15),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498dd9:       movq   $0x0,0x78(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   498de2:       sub    0x18(%r15),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498de6:       movq   $0x0,0x80(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   498df2:       mov    %rbx,%r13
    0.00 :   498df5:       sar    $0x3,%r13
    0.00 :   498df9:       mov    %r13,%rdx
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   498dfc:       je     499178 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x8d8>
         :            if (__n > this->max_size())
    0.00 :   498e02:       movabs $0x1fffffffffffffff,%rax
    0.00 :   498e0c:       cmp    %rax,%r13
    0.00 :   498e0f:       ja     499b9b <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x12fb>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   498e15:       mov    %rbx,%rdi
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   498e18:       xor    %ebp,%ebp
    0.00 :   498e1a:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   498e1f:       lea    (%rax,%rbx,1),%rdx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   498e23:       mov    %rax,0x70(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   498e28:       mov    %rdx,0x80(%rsp)
         :            __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :            __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
         :            {
         :            const _Tp __tmp = __value;
         :            for (__decltype(__n + 0) __niter = __n;
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   498e30:       jmp    498e3b <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x59b>
    0.00 :   498e32:       nopw   0x0(%rax,%rax,1)
    0.00 :   498e38:       mov    %rdx,%rbp
    0.00 :   498e3b:       lea    0x1(%rbp),%rdx
         :            *__first = __tmp;
    0.00 :   498e3f:       movq   $0x0,(%rax,%rbp,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   498e47:       cmp    %rdx,%r13
    0.00 :   498e4a:       jne    498e38 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x598>
    0.00 :   498e4c:       shl    $0x3,%r13
    0.00 :   498e50:       mov    %rbx,%rdi
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498e53:       movq   $0x0,0x90(%rsp)
    0.00 :   498e5f:       movq   $0x0,0x98(%rsp)
         :            #if __cplusplus >= 201103L
         :            // Called by the vector(n) constructor.
         :            void
         :            _M_default_initialize(size_type __n)
         :            {
         :            this->_M_impl._M_finish =
    0.00 :   498e6b:       add    %r13,%rax
    0.00 :   498e6e:       mov    %rax,0x78(%rsp)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498e73:       movq   $0x0,0xa0(%rsp)
    0.00 :   498e7f:       callq  53340 <operator new(unsigned long)@plt>
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   498e84:       add    %rax,%rbx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   498e87:       mov    %rax,0x90(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   498e8f:       xor    %edx,%edx
    0.00 :   498e91:       mov    %rbx,0xa0(%rsp)
    0.00 :   498e99:       jmp    498ea3 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x603>
    0.00 :   498e9b:       nopl   0x0(%rax,%rax,1)
    0.00 :   498ea0:       mov    %rcx,%rdx
         :            *__first = __tmp;
    0.00 :   498ea3:       movq   $0x0,(%rax,%rdx,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   498eab:       lea    0x1(%rdx),%rcx
    0.00 :   498eaf:       cmp    %rdx,%rbp
    0.00 :   498eb2:       jne    498ea0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x600>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   498eb4:       mov    0x20(%r15),%rbx
    0.00 :   498eb8:       sub    0x18(%r15),%rbx
    0.00 :   498ebc:       lea    (%rax,%r13,1),%r8
    0.00 :   498ec0:       sar    $0x3,%r13
    0.00 :   498ec4:       mov    %rbx,%rbp
         :            this->_M_impl._M_finish =
    0.00 :   498ec7:       mov    %r8,0x98(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   498ecf:       sar    $0x3,%rbp
    0.00 :   498ed3:       mov    %rbp,%r12
         :            if (__new_size > size())
    0.00 :   498ed6:       cmp    %r13,%rbp
    0.00 :   498ed9:       ja     4998a0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1000>
    0.00 :   498edf:       mov    0x78(%rsp),%rcx
    0.00 :   498ee4:       mov    0x70(%rsp),%rsi
    0.00 :   498ee9:       mov    %rcx,%rdx
    0.00 :   498eec:       mov    %rcx,%rdi
    0.00 :   498eef:       sub    %rsi,%rdx
    0.00 :   498ef2:       sar    $0x3,%rdx
         :            else if (__new_size < size())
    0.00 :   498ef6:       cmp    %r13,%rbp
    0.00 :   498ef9:       jae    498f0b <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x66b>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   498efb:       add    %rbx,%rax
         :            // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         :            // _M_assign_aux.
         :            void
         :            _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
         :            {
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   498efe:       cmp    %rax,%r8
    0.00 :   498f01:       je     498f0b <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x66b>
         :            {
         :            std::_Destroy(__pos, this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            this->_M_impl._M_finish = __pos;
    0.00 :   498f03:       mov    %rax,0x98(%rsp)
    0.00 :   498f0b:       cmpb   $0x0,0x10(%r14)
    0.00 :   498f10:       jne    4991b8 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x918>
    0.00 :   498f16:       test   %rbp,%rbp
    0.00 :   498f19:       je     499a80 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x11e0>
    0.00 :   498f1f:       mov    0x90(%rsp),%rax
    0.00 :   498f27:       sub    $0x1,%rbp
    0.00 :   498f2b:       nopl   0x0(%rax,%rax,1)
    0.00 :   498f30:       mov    %rbp,(%rax)
    0.00 :   498f33:       sub    $0x1,%rbp
    0.00 :   498f37:       add    $0x8,%rax
    0.00 :   498f3b:       cmp    $0xffffffffffffffff,%rbp
    0.00 :   498f3f:       jne    498f30 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x690>
    0.00 :   498f41:       lea    0x90(%rsp),%rax
    0.00 :   498f49:       mov    %rax,0x28(%rsp)
         :            if (__new_size > size())
    0.00 :   498f4e:       cmp    %rdx,%r12
    0.00 :   498f51:       ja     4991ca <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x92a>
         :            else if (__new_size < size())
    0.00 :   498f57:       jb     499860 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xfc0>
    0.00 :   498f5d:       test   %r12,%r12
    0.00 :   498f60:       je     499b40 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x12a0>
    0.00 :   498f66:       mov    0x28(%rsp),%rax
    0.00 :   498f6b:       mov    (%rax),%rcx
    0.00 :   498f6e:       mov    (%rcx),%rdx
  100.00 :   498f71:       cmp    %rdx,%r12
    0.00 :   498f74:       jbe    4991e0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x940>
    0.00 :   498f7a:       mov    0x18(%r15),%rdi
    0.00 :   498f7e:       mov    0x70(%rsp),%rsi
    0.00 :   498f83:       xor    %eax,%eax
    0.00 :   498f85:       jmp    498f9d <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x6fd>
    0.00 :   498f87:       nopw   0x0(%rax,%rax,1)
    0.00 :   498f90:       mov    (%rcx,%rax,8),%rdx
    0.00 :   498f94:       cmp    %r12,%rdx
    0.00 :   498f97:       jae    4991e0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x940>
    0.00 :   498f9d:       mov    (%rdi,%rdx,8),%rdx
    0.00 :   498fa1:       mov    %rdx,(%rsi,%rax,8)
    0.00 :   498fa5:       add    $0x1,%rax
    0.00 :   498fa9:       cmp    %r12,%rax
    0.00 :   498fac:       jne    498f90 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x6f0>
    0.00 :   498fae:       mov    0x78(%rsp),%rcx
    0.00 :   498fb3:       movq   $0x0,0x50(%rsp)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498fbc:       movq   $0x0,0xb0(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   498fc8:       mov    %rcx,%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498fcb:       movq   $0x0,0xb8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   498fd7:       sub    %rsi,%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   498fda:       movq   $0x0,0xc0(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   498fe6:       mov    %rbx,%rax
    0.00 :   498fe9:       sar    $0x3,%rax
    0.00 :   498fed:       je     499950 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x10b0>
         :            if (__n > this->max_size())
    0.00 :   498ff3:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   498ffd:       cmp    %rdx,%rax
    0.00 :   499000:       ja     499bb4 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1314>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   499006:       mov    %rbx,%rdi
    0.00 :   499009:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   49900e:       mov    0x78(%rsp),%rcx
    0.00 :   499013:       mov    0x70(%rsp),%rsi
    0.00 :   499018:       mov    %rax,%r8
    0.00 :   49901b:       mov    %rcx,%rbp
    0.00 :   49901e:       sub    %rsi,%rbp
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   499021:       add    %r8,%rbx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   499024:       mov    %r8,0xb0(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   49902c:       mov    %r8,0xb8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   499034:       mov    %rbx,0xc0(%rsp)
         :            if (_Num)
    0.00 :   49903c:       cmp    %rcx,%rsi
    0.00 :   49903f:       je     49904f <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x7af>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   499041:       mov    %r8,%rdi
    0.00 :   499044:       mov    %rbp,%rdx
    0.00 :   499047:       callq  53aa0 <memmove@plt>
    0.00 :   49904c:       mov    %rax,%r8
    0.00 :   49904f:       lea    0xb0(%rsp),%r14
    0.00 :   499057:       mov    0x40(%rsp),%rdi
         :            return __result + _Num;
    0.00 :   49905c:       add    %rbp,%r8
    0.00 :   49905f:       xor    %esi,%esi
    0.00 :   499061:       mov    %r14,%rdx
    0.00 :   499064:       mov    %r8,0xb8(%rsp)
    0.00 :   49906c:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
    0.00 :   499071:       mov    %r14,%rdi
    0.00 :   499074:       mov    %rax,%rbx
    0.00 :   499077:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   49907c:       test   %rax,%rax
    0.00 :   49907f:       jne    499990 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x10f0>
    0.00 :   499085:       mov    0x18(%rsp),%rax
    0.00 :   49908a:       movq   $0x0,(%rax)
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   499091:       mov    0xb0(%rsp),%rdi
         :            if (__p)
    0.00 :   499099:       test   %rdi,%rdi
    0.00 :   49909c:       je     4990a3 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x803>
         :            ::operator delete(__p);
    0.00 :   49909e:       callq  53300 <operator delete(void*)@plt>
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   4990a3:       mov    0x50(%rsp),%rbx
    0.00 :   4990a8:       test   %rbx,%rbx
    0.00 :   4990ab:       je     4997ec <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xf4c>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4990b1:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   4990b5:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   4990b9:       cmp    %rax,%rdi
    0.00 :   4990bc:       je     4990c3 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x823>
    0.00 :   4990be:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   4990c3:       mov    $0x28,%esi
    0.00 :   4990c8:       mov    %rbx,%rdi
    0.00 :   4990cb:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   4990d0:       jmpq   4997ec <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xf4c>
    0.00 :   4990d5:       nopl   (%rax)
    0.00 :   4990d8:       mov    $0xa0,%edi
    0.00 :   4990dd:       lea    0x130(%rsp),%r14
    0.00 :   4990e5:       lea    0xb0(%rsp),%r15
    0.00 :   4990ed:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4990f2:       mov    %r14,%rdi
    0.00 :   4990f5:       mov    %rax,%rbx
    0.00 :   4990f8:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   4990fd:       mov    %r15,%rdi
    0.00 :   499100:       mov    %r15,0x8(%rsp)
    0.00 :   499105:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   49910a:       lea    0x2b0(%rsp),%r13
    0.00 :   499112:       mov    %r15,%r8
    0.00 :   499115:       lea    0x3e11c4(%rip),%rcx        # 87a2e0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const::__PRETTY_FUNCTION__>
    0.00 :   49911c:       mov    $0x2b0,%edx
    0.00 :   499121:       lea    0x3e0d30(%rip),%rsi        # 879e58 <typeinfo name for onnxruntime::Tile+0x68>
    0.00 :   499128:       mov    %r13,%rdi
    0.00 :   49912b:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   499130:       mov    %r14,%rcx
    0.00 :   499133:       lea    0x3b6715(%rip),%rdx        # 84f84f <typeinfo name for onnxruntime::ml::DictVectorizerOp<long, double>+0x10f>
    0.00 :   49913a:       mov    %r13,%rsi
    0.00 :   49913d:       mov    %rbx,%rdi
    0.00 :   499140:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   499145:       mov    %r13,%rdi
    0.00 :   499148:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   49914d:       mov    %r15,%rdi
    0.00 :   499150:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   499155:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   49915d:       lea    0x10(%r14),%rax
    0.00 :   499161:       cmp    %rax,%rdi
    0.00 :   499164:       je     9aa97 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x325>
    0.00 :   49916a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   49916f:       jmpq   9aa97 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x325>
    0.00 :   499174:       nopl   0x0(%rax)
    0.00 :   499178:       cmpb   $0x0,0x10(%r14)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   49917d:       mov    %rbx,0x80(%rsp)
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   499185:       movq   $0x0,0x90(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   499191:       mov    %rbx,0xa0(%rsp)
         :            this->_M_impl._M_finish =
    0.00 :   499199:       movq   $0x0,0x98(%rsp)
    0.00 :   4991a5:       je     499930 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1090>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4991ab:       xor    %r12d,%r12d
    0.00 :   4991ae:       xor    %edi,%edi
    0.00 :   4991b0:       xor    %esi,%esi
    0.00 :   4991b2:       nopw   0x0(%rax,%rax,1)
    0.00 :   4991b8:       lea    0x18(%r14),%rax
    0.00 :   4991bc:       mov    %rax,0x28(%rsp)
         :            if (__new_size > size())
    0.00 :   4991c1:       cmp    %rdx,%r12
    0.00 :   4991c4:       jbe    498f57 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x6b7>
         :            _M_default_append(__new_size - size());
    0.00 :   4991ca:       mov    %r12,%rsi
    0.00 :   4991cd:       lea    0x70(%rsp),%rdi
    0.00 :   4991d2:       sub    %rdx,%rsi
    0.00 :   4991d5:       callq  27c810 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)>
    0.00 :   4991da:       jmpq   498f5d <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x6bd>
    0.00 :   4991df:       nop
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   4991e0:       lea    0x130(%rsp),%r14
    0.00 :   4991e8:       lea    0x70(%r14),%rdi
    0.00 :   4991ec:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   4991f1:       mov    0x78e930(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   4991f8:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   4991fa:       xor    %esi,%esi
    0.00 :   4991fc:       mov    %dx,0x280(%rsp)
    0.00 :   499204:       mov    %rax,0x8(%rsp)
    0.00 :   499209:       add    $0x10,%rax
    0.00 :   49920d:       mov    %rax,0x1a0(%rsp)
    0.00 :   499215:       mov    0x78eb84(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   49921c:       movq   $0x0,0x278(%rsp)
    0.00 :   499228:       movq   $0x0,0x288(%rsp)
    0.00 :   499234:       mov    0x8(%rax),%rcx
    0.00 :   499238:       movq   $0x0,0x290(%rsp)
    0.00 :   499244:       mov    0x10(%rax),%rax
    0.00 :   499248:       mov    -0x18(%rcx),%rdi
    0.00 :   49924c:       mov    %rcx,0x130(%rsp)
    0.00 :   499254:       movq   $0x0,0x298(%rsp)
    0.00 :   499260:       add    %r14,%rdi
    0.00 :   499263:       mov    %rcx,0x30(%rsp)
    0.00 :   499268:       movq   $0x0,0x2a0(%rsp)
    0.00 :   499274:       mov    %rax,(%rdi)
    0.00 :   499277:       mov    %rax,0x38(%rsp)
    0.00 :   49927c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   499281:       mov    0x78ead8(%rip),%rbx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   499288:       lea    0x40(%r14),%rdi
    0.00 :   49928c:       movq   $0x0,0x140(%rsp)
    0.00 :   499298:       movq   $0x0,0x148(%rsp)
    0.00 :   4992a4:       movq   $0x0,0x150(%rsp)
    0.00 :   4992b0:       lea    0x18(%rbx),%rax
    0.00 :   4992b4:       mov    %rax,0x130(%rsp)
    0.00 :   4992bc:       lea    0x40(%rbx),%rax
    0.00 :   4992c0:       mov    %rax,0x1a0(%rsp)
    0.00 :   4992c8:       mov    0x78e991(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   4992cf:       movq   $0x0,0x158(%rsp)
    0.00 :   4992db:       mov    %rax,0x10(%rsp)
    0.00 :   4992e0:       add    $0x10,%rax
    0.00 :   4992e4:       mov    %rax,0x138(%rsp)
    0.00 :   4992ec:       movq   $0x0,0x160(%rsp)
    0.00 :   4992f8:       movq   $0x0,0x168(%rsp)
    0.00 :   499304:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   499309:       mov    0x78ecc8(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   499310:       lea    0x8(%r14),%rsi
    0.00 :   499314:       lea    0x70(%r14),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   499318:       movl   $0x10,0x178(%rsp)
    0.00 :   499323:       mov    %rax,0x20(%rsp)
    0.00 :   499328:       add    $0x10,%rax
    0.00 :   49932c:       mov    %rax,0x138(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   499334:       lea    0x60(%r14),%rax
    0.00 :   499338:       mov    %rax,0x180(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   499340:       movq   $0x0,0x188(%rsp)
    0.00 :   49934c:       movb   $0x0,0x190(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   499354:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   499359:       mov    $0x2,%edx
    0.00 :   49935e:       lea    0x3e0d65(%rip),%rsi        # 87a0ca <typeinfo name for onnxruntime::Tile+0x2da>
    0.00 :   499365:       mov    %r14,%rdi
    0.00 :   499368:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   49936d:       mov    0x28(%rsp),%rax
    0.00 :   499372:       mov    0x8(%rax),%r13
    0.00 :   499376:       mov    (%rax),%rbp
    0.00 :   499379:       cmp    %r13,%rbp
    0.00 :   49937c:       je     4993a9 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xb09>
    0.00 :   49937e:       xchg   %ax,%ax
         :            { return _M_insert(__n); }
    0.00 :   499380:       mov    0x0(%rbp),%rsi
    0.00 :   499384:       mov    %r14,%rdi
    0.00 :   499387:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   49938c:       mov    $0x1,%edx
    0.00 :   499391:       lea    0x38e3a3(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   499398:       mov    %rax,%rdi
    0.00 :   49939b:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   4993a0:       add    $0x8,%rbp
    0.00 :   4993a4:       cmp    %rbp,%r13
    0.00 :   4993a7:       jne    499380 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xae0>
    0.00 :   4993a9:       mov    $0x1,%edx
    0.00 :   4993ae:       lea    0x42ea74(%rip),%rsi        # 8c7e29 <typeinfo name for re2::NumCapturesWalker+0x79>
    0.00 :   4993b5:       mov    %r14,%rdi
    0.00 :   4993b8:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :
         :            inline string
         :            to_string(unsigned long __val)
         :            { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
         :            4 * sizeof(unsigned long),
         :            "%lu", __val); }
    0.00 :   4993bd:       lea    0xf0(%rsp),%rax
    0.00 :   4993c5:       mov    %r12,%r8
    0.00 :   4993c8:       mov    0x78e879(%rip),%rsi        # c27c48 <vsnprintf@GLIBC_2.2.5>
    0.00 :   4993cf:       lea    0x38c6d1(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   4993d6:       mov    %rax,0x48(%rsp)
    0.00 :   4993db:       mov    %rax,%rdi
    0.00 :   4993de:       mov    $0x20,%edx
    0.00 :   4993e3:       xor    %eax,%eax
    0.00 :   4993e5:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4993ea:       lea    0xd0(%rsp),%r12
    0.00 :   4993f2:       movb   $0x0,0xe0(%rsp)
    0.00 :   4993fa:       lea    0x10(%r12),%rax
         :            { _M_string_length = __length; }
    0.00 :   4993ff:       movq   $0x0,0xd8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   49940b:       mov    %rax,0xd0(%rsp)
         :            if (this->pptr())
    0.00 :   499413:       mov    0x160(%rsp),%rax
    0.00 :   49941b:       test   %rax,%rax
    0.00 :   49941e:       je     499960 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x10c0>
         :            if (this->pptr() > this->egptr())
    0.00 :   499424:       mov    0x150(%rsp),%r8
    0.00 :   49942c:       mov    0x158(%rsp),%rcx
    0.00 :   499434:       cmp    %r8,%rax
    0.00 :   499437:       ja     499880 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xfe0>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   49943d:       sub    %rcx,%r8
    0.00 :   499440:       xor    %edx,%edx
    0.00 :   499442:       xor    %esi,%esi
    0.00 :   499444:       mov    %r12,%rdi
    0.00 :   499447:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   49944c:       lea    0x2b0(%rsp),%r13
    0.00 :   499454:       lea    0x70(%r13),%rdi
    0.00 :   499458:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   49945d:       mov    0x8(%rsp),%rax
         :            { this->init(0); }
    0.00 :   499462:       xor    %esi,%esi
    0.00 :   499464:       movq   $0x0,0x3f8(%rsp)
    0.00 :   499470:       movq   $0x0,0x408(%rsp)
    0.00 :   49947c:       movq   $0x0,0x410(%rsp)
    0.00 :   499488:       add    $0x10,%rax
    0.00 :   49948c:       mov    %rax,0x320(%rsp)
    0.00 :   499494:       xor    %eax,%eax
    0.00 :   499496:       mov    %ax,0x400(%rsp)
    0.00 :   49949e:       mov    0x30(%rsp),%rax
    0.00 :   4994a3:       movq   $0x0,0x418(%rsp)
    0.00 :   4994af:       mov    -0x18(%rax),%rdi
    0.00 :   4994b3:       mov    %rax,0x2b0(%rsp)
    0.00 :   4994bb:       mov    0x38(%rsp),%rax
    0.00 :   4994c0:       movq   $0x0,0x420(%rsp)
    0.00 :   4994cc:       add    %r13,%rdi
    0.00 :   4994cf:       mov    %rax,(%rdi)
    0.00 :   4994d2:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   4994d7:       lea    0x18(%rbx),%rax
    0.00 :   4994db:       lea    0x40(%r13),%rdi
    0.00 :   4994df:       movq   $0x0,0x2c0(%rsp)
    0.00 :   4994eb:       mov    %rax,0x2b0(%rsp)
    0.00 :   4994f3:       lea    0x40(%rbx),%rax
    0.00 :   4994f7:       mov    %rax,0x320(%rsp)
    0.00 :   4994ff:       mov    0x10(%rsp),%rax
    0.00 :   499504:       movq   $0x0,0x2c8(%rsp)
    0.00 :   499510:       movq   $0x0,0x2d0(%rsp)
    0.00 :   49951c:       add    $0x10,%rax
    0.00 :   499520:       mov    %rax,0x2b8(%rsp)
    0.00 :   499528:       movq   $0x0,0x2d8(%rsp)
    0.00 :   499534:       movq   $0x0,0x2e0(%rsp)
    0.00 :   499540:       movq   $0x0,0x2e8(%rsp)
    0.00 :   49954c:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   499551:       mov    0x20(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   499556:       lea    0x8(%r13),%rsi
    0.00 :   49955a:       lea    0x70(%r13),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   49955e:       movl   $0x10,0x2f8(%rsp)
    0.00 :   499569:       add    $0x10,%rax
    0.00 :   49956d:       movb   $0x0,0x310(%rsp)
    0.00 :   499575:       mov    %rax,0x2b8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   49957d:       lea    0x60(%r13),%rax
    0.00 :   499581:       mov    %rax,0x300(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   499589:       movq   $0x0,0x308(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   499595:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   49959a:       mov    $0x6,%edx
    0.00 :   49959f:       lea    0x3e0b27(%rip),%rsi        # 87a0cd <typeinfo name for onnxruntime::Tile+0x2dd>
    0.00 :   4995a6:       mov    %r13,%rdi
    0.00 :   4995a9:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   4995ae:       mov    0xd8(%rsp),%rdx
    0.00 :   4995b6:       mov    %r13,%rdi
    0.00 :   4995b9:       mov    0xd0(%rsp),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4995c1:       lea    0x110(%rsp),%rbp
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   4995c9:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   4995ce:       mov    $0x29,%edx
    0.00 :   4995d3:       lea    0x3e0ac6(%rip),%rsi        # 87a0a0 <typeinfo name for onnxruntime::Tile+0x2b0>
    0.00 :   4995da:       mov    %r13,%rdi
    0.00 :   4995dd:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   4995e2:       mov    0xf8(%rsp),%rdx
    0.00 :   4995ea:       mov    0xf0(%rsp),%rsi
    0.00 :   4995f2:       mov    %r13,%rdi
    0.00 :   4995f5:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4995fa:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   4995fe:       movq   $0x0,0x118(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   49960a:       mov    %rax,0x110(%rsp)
         :            if (this->pptr())
    0.00 :   499612:       mov    0x2e0(%rsp),%rax
    0.00 :   49961a:       movb   $0x0,0x120(%rsp)
    0.00 :   499622:       test   %rax,%rax
    0.00 :   499625:       je     499978 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x10d8>
         :            if (this->pptr() > this->egptr())
    0.00 :   49962b:       mov    0x2d0(%rsp),%r8
    0.00 :   499633:       mov    0x2d8(%rsp),%rcx
    0.00 :   49963b:       cmp    %r8,%rax
    0.00 :   49963e:       jbe    499900 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1060>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   499644:       sub    %rcx,%rax
    0.00 :   499647:       xor    %edx,%edx
    0.00 :   499649:       xor    %esi,%esi
    0.00 :   49964b:       mov    %rbp,%rdi
    0.00 :   49964e:       mov    %rax,%r8
    0.00 :   499651:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   499656:       lea    0x18(%rbx),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   49965a:       mov    0x300(%rsp),%rdi
    0.00 :   499662:       mov    %rax,0x2b0(%rsp)
    0.00 :   49966a:       lea    0x40(%rbx),%rax
    0.00 :   49966e:       mov    %rax,0x320(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   499676:       mov    0x20(%rsp),%rax
    0.00 :   49967b:       add    $0x10,%rax
    0.00 :   49967f:       mov    %rax,0x2b8(%rsp)
         :            if (!_M_is_local())
    0.00 :   499687:       lea    0x60(%r13),%rax
    0.00 :   49968b:       cmp    %rax,%rdi
    0.00 :   49968e:       je     499695 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xdf5>
    0.00 :   499690:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   499695:       mov    0x10(%rsp),%rax
    0.00 :   49969a:       lea    0x40(%r13),%rdi
    0.00 :   49969e:       add    $0x10,%rax
    0.00 :   4996a2:       mov    %rax,0x2b8(%rsp)
    0.00 :   4996aa:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   4996af:       mov    0x30(%rsp),%rax
    0.00 :   4996b4:       mov    0x38(%rsp),%rcx
         :            ~basic_ios() { }
    0.00 :   4996b9:       lea    0x70(%r13),%rdi
    0.00 :   4996bd:       mov    %rax,0x2b0(%rsp)
    0.00 :   4996c5:       mov    -0x18(%rax),%rax
    0.00 :   4996c9:       mov    %rcx,0x2b0(%rsp,%rax,1)
    0.00 :   4996d1:       mov    0x8(%rsp),%rax
    0.00 :   4996d6:       add    $0x10,%rax
    0.00 :   4996da:       mov    %rax,0x320(%rsp)
    0.00 :   4996e2:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   4996e7:       lea    0x50(%rsp),%rdi
    0.00 :   4996ec:       mov    %rbp,%rcx
    0.00 :   4996ef:       mov    $0x2,%edx
    0.00 :   4996f4:       mov    $0x2,%esi
    0.00 :   4996f9:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4996fe:       mov    0x110(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   499706:       add    $0x10,%rbp
    0.00 :   49970a:       cmp    %rbp,%rdi
    0.00 :   49970d:       je     499714 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xe74>
    0.00 :   49970f:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   499714:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   49971c:       add    $0x10,%r12
    0.00 :   499720:       cmp    %r12,%rdi
    0.00 :   499723:       je     49972a <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xe8a>
    0.00 :   499725:       callq  53300 <operator delete(void*)@plt>
    0.00 :   49972a:       mov    0x48(%rsp),%r13
         :            { return _M_data() == _M_local_data(); }
    0.00 :   49972f:       mov    0xf0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   499737:       add    $0x10,%r13
    0.00 :   49973b:       cmp    %r13,%rdi
    0.00 :   49973e:       je     499745 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xea5>
    0.00 :   499740:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   499745:       lea    0x18(%rbx),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   499749:       mov    0x180(%rsp),%rdi
    0.00 :   499751:       mov    %rax,0x130(%rsp)
    0.00 :   499759:       lea    0x40(%rbx),%rax
    0.00 :   49975d:       mov    %rax,0x1a0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   499765:       mov    0x20(%rsp),%rax
    0.00 :   49976a:       add    $0x10,%rax
    0.00 :   49976e:       mov    %rax,0x138(%rsp)
         :            if (!_M_is_local())
    0.00 :   499776:       lea    0x60(%r14),%rax
    0.00 :   49977a:       cmp    %rax,%rdi
    0.00 :   49977d:       je     499784 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xee4>
    0.00 :   49977f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   499784:       mov    0x10(%rsp),%rax
    0.00 :   499789:       lea    0x40(%r14),%rdi
    0.00 :   49978d:       add    $0x10,%rax
    0.00 :   499791:       mov    %rax,0x138(%rsp)
    0.00 :   499799:       callq  537d0 <std::locale::~locale()@plt>
    0.00 :   49979e:       mov    0x30(%rsp),%rax
    0.00 :   4997a3:       mov    0x38(%rsp),%rcx
    0.00 :   4997a8:       lea    0x70(%r14),%rdi
    0.00 :   4997ac:       mov    %rax,0x130(%rsp)
    0.00 :   4997b4:       mov    -0x18(%rax),%rax
    0.00 :   4997b8:       mov    %rcx,0x130(%rsp,%rax,1)
    0.00 :   4997c0:       mov    0x8(%rsp),%rax
    0.00 :   4997c5:       add    $0x10,%rax
    0.00 :   4997c9:       mov    %rax,0x1a0(%rsp)
    0.00 :   4997d1:       callq  52b40 <std::ios_base::~ios_base()@plt>
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   4997d6:       mov    0x50(%rsp),%rax
    0.00 :   4997db:       test   %rax,%rax
    0.00 :   4997de:       je     499ba5 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1305>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   4997e4:       mov    0x18(%rsp),%rcx
    0.00 :   4997e9:       mov    %rax,(%rcx)
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4997ec:       mov    0x90(%rsp),%rdi
         :            if (__p)
    0.00 :   4997f4:       test   %rdi,%rdi
    0.00 :   4997f7:       je     4997fe <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xf5e>
    0.00 :   4997f9:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4997fe:       mov    0x70(%rsp),%rdi
         :            if (__p)
    0.00 :   499803:       test   %rdi,%rdi
    0.00 :   499806:       je     49980d <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xf6d>
    0.00 :   499808:       callq  53300 <operator delete(void*)@plt>
    0.00 :   49980d:       mov    0x428(%rsp),%rcx
    0.00 :   499815:       xor    %fs:0x28,%rcx
    0.00 :   49981e:       mov    0x18(%rsp),%rax
    0.00 :   499823:       jne    499b96 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x12f6>
    0.00 :   499829:       add    $0x438,%rsp
    0.00 :   499830:       pop    %rbx
    0.00 :   499831:       pop    %rbp
    0.00 :   499832:       pop    %r12
    0.00 :   499834:       pop    %r13
    0.00 :   499836:       pop    %r14
    0.00 :   499838:       pop    %r15
    0.00 :   49983a:       retq
    0.00 :   49983b:       nopl   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   499840:       sub    %rcx,%rax
    0.00 :   499843:       xor    %edx,%edx
    0.00 :   499845:       xor    %esi,%esi
    0.00 :   499847:       mov    %r14,%rdi
    0.00 :   49984a:       mov    %rax,%r8
    0.00 :   49984d:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   499852:       jmpq   498b1c <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x27c>
    0.00 :   499857:       nopw   0x0(%rax,%rax,1)
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   499860:       add    %rsi,%rbx
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   499863:       cmp    %rbx,%rdi
    0.00 :   499866:       je     498f5d <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x6bd>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   49986c:       mov    %rbx,0x78(%rsp)
    0.00 :   499871:       jmpq   498f5d <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x6bd>
    0.00 :   499876:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   499880:       sub    %rcx,%rax
    0.00 :   499883:       xor    %edx,%edx
    0.00 :   499885:       xor    %esi,%esi
    0.00 :   499887:       mov    %r12,%rdi
    0.00 :   49988a:       mov    %rax,%r8
    0.00 :   49988d:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   499892:       jmpq   49944c <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xbac>
    0.00 :   499897:       nopw   0x0(%rax,%rax,1)
         :            _M_default_append(__new_size - size());
    0.00 :   4998a0:       mov    %rbp,%rsi
    0.00 :   4998a3:       lea    0x90(%rsp),%rdi
    0.00 :   4998ab:       sub    %r13,%rsi
    0.00 :   4998ae:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   4998b3:       mov    0x78(%rsp),%rcx
    0.00 :   4998b8:       mov    0x70(%rsp),%rsi
    0.00 :   4998bd:       mov    %rcx,%rdx
    0.00 :   4998c0:       mov    %rcx,%rdi
    0.00 :   4998c3:       sub    %rsi,%rdx
    0.00 :   4998c6:       sar    $0x3,%rdx
    0.00 :   4998ca:       jmpq   498f0b <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x66b>
    0.00 :   4998cf:       nop
         :            __out.setstate(ios_base::badbit);
    0.00 :   4998d0:       mov    0x2b0(%rsp),%rax
    0.00 :   4998d8:       mov    -0x18(%rax),%rdi
    0.00 :   4998dc:       add    %r13,%rdi
         :            operator&(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
         :
         :            inline _GLIBCXX_CONSTEXPR _Ios_Iostate
         :            operator|(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
    0.00 :   4998df:       mov    0x20(%rdi),%esi
    0.00 :   4998e2:       or     $0x1,%esi
         :            { this->clear(this->rdstate() | __state); }
    0.00 :   4998e5:       callq  53b90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   4998ea:       jmpq   498abb <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x21b>
    0.00 :   4998ef:       nop
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4998f0:       xor    %r15d,%r15d
    0.00 :   4998f3:       jmpq   498c77 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x3d7>
    0.00 :   4998f8:       nopl   0x0(%rax,%rax,1)
    0.00 :   499900:       sub    %rcx,%r8
    0.00 :   499903:       xor    %edx,%edx
    0.00 :   499905:       xor    %esi,%esi
    0.00 :   499907:       mov    %rbp,%rdi
    0.00 :   49990a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   49990f:       jmpq   499656 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xdb6>
    0.00 :   499914:       nopl   0x0(%rax)
         :            this->_M_assign(__str);
    0.00 :   499918:       lea    0x50(%r13),%rsi
    0.00 :   49991c:       mov    %r14,%rdi
    0.00 :   49991f:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   499924:       jmpq   498b1c <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x27c>
    0.00 :   499929:       nopl   0x0(%rax)
    0.00 :   499930:       xor    %ecx,%ecx
    0.00 :   499932:       lea    0x90(%rsp),%rax
    0.00 :   49993a:       mov    %rax,0x28(%rsp)
    0.00 :   49993f:       mov    0x70(%rsp),%rsi
    0.00 :   499944:       jmpq   498fb3 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x713>
    0.00 :   499949:       nopl   0x0(%rax)
    0.00 :   499950:       mov    %rbx,%rbp
    0.00 :   499953:       xor    %r8d,%r8d
    0.00 :   499956:       jmpq   499021 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x781>
    0.00 :   49995b:       nopl   0x0(%rax,%rax,1)
    0.00 :   499960:       lea    0x50(%r14),%rsi
    0.00 :   499964:       mov    %r12,%rdi
    0.00 :   499967:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   49996c:       jmpq   49944c <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xbac>
    0.00 :   499971:       nopl   0x0(%rax)
    0.00 :   499978:       lea    0x50(%r13),%rsi
    0.00 :   49997c:       mov    %rbp,%rdi
    0.00 :   49997f:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   499984:       jmpq   499656 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xdb6>
    0.00 :   499989:       nopl   0x0(%rax)
    0.00 :   499990:       lea    0x18(%r15),%rbp
    0.00 :   499994:       mov    0x28(%rsp),%rdi
    0.00 :   499999:       mov    %rbp,%rsi
    0.00 :   49999c:       callq  494010 <onnxruntime::IsTransposeReshape(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<long, std::allocator<long> > const&)>
    0.00 :   4999a1:       test   %al,%al
    0.00 :   4999a3:       je     499a10 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1170>
    0.00 :   4999a5:       mov    0x50(%rbx),%rax
    0.00 :   4999a9:       mov    0x50(%r15),%r13
    0.00 :   4999ad:       add    (%rbx),%rax
    0.00 :   4999b0:       add    (%r15),%r13
    0.00 :   4999b3:       mov    %rax,%rbx
    0.00 :   4999b6:       cmp    %r13,%rax
    0.00 :   4999b9:       je     499085 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x7e5>
    0.00 :   4999bf:       mov    0x30(%r15),%rax
    0.00 :   4999c3:       mov    (%rax),%rdx
    0.00 :   4999c6:       mov    0x68(%rdx),%rdx
    0.00 :   4999ca:       cmp    0x78e5c7(%rip),%rdx        # c27f98 <.got+0x4d8>
    0.00 :   4999d1:       jne    499b83 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x12e3>
    0.00 :   4999d7:       cmpl   $0x8,0x8(%rax)
    0.00 :   4999db:       je     499b4a <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x12aa>
    0.00 :   4999e1:       mov    %rbp,%rdi
    0.00 :   4999e4:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   4999e9:       mov    0x30(%r15),%rdi
    0.00 :   4999ed:       mov    %rax,%rbp
    0.00 :   4999f0:       mov    (%rdi),%rax
    0.00 :   4999f3:       callq  *0x18(%rax)
    0.00 :   4999f6:       mov    %rbp,%rdx
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   4999f9:       mov    %r13,%rsi
    0.00 :   4999fc:       mov    %rbx,%rdi
         :            _ZNK11onnxruntime9Transpose7ComputeEPNS_15OpKernelContextE():
    0.00 :   4999ff:       imul   %rax,%rdx
         :            memcpy():
    0.00 :   499a03:       callq  53150 <memcpy@plt>
    0.00 :   499a08:       jmpq   499085 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x7e5>
    0.00 :   499a0d:       nopl   (%rax)
         :            _ZNK11onnxruntime9Transpose7ComputeEPNS_15OpKernelContextE():
    0.00 :   499a10:       mov    0x28(%rsp),%rdi
    0.00 :   499a15:       lea    0x60(%rsp),%rdx
    0.00 :   499a1a:       lea    0x58(%rsp),%rsi
    0.00 :   499a1f:       movq   $0x0,0x58(%rsp)
    0.00 :   499a28:       movq   $0x0,0x60(%rsp)
    0.00 :   499a31:       callq  493e30 <onnxruntime::IsMovingSingleAxis(std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long&, unsigned long&) [clone .constprop.208]>
    0.00 :   499a36:       test   %al,%al
    0.00 :   499a38:       je     499ab0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1210>
    0.00 :   499a3a:       mov    0x30(%r15),%rax
    0.00 :   499a3e:       cmpl   $0x8,0x8(%rax)
    0.00 :   499a42:       je     499ab0 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1210>
    0.00 :   499a44:       mov    0x60(%rsp),%rcx
    0.00 :   499a49:       mov    0x58(%rsp),%rdx
    0.00 :   499a4e:       xor    %r8d,%r8d
    0.00 :   499a51:       mov    %rbx,%rsi
    0.00 :   499a54:       mov    %r15,%rdi
    0.00 :   499a57:       cmp    %rdx,%rcx
    0.00 :   499a5a:       jae    499b79 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x12d9>
    0.00 :   499a60:       callq  4936e0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]>
    0.00 :   499a65:       mov    0x50(%rsp),%rax
         :            /// Release ownership of any stored pointer.
         :            pointer
         :            release() noexcept
         :            {
         :            pointer __p = get();
         :            _M_t._M_ptr() = pointer();
    0.00 :   499a6a:       movq   $0x0,0x50(%rsp)
    0.00 :   499a73:       mov    0x18(%rsp),%rcx
    0.00 :   499a78:       mov    %rax,(%rcx)
    0.00 :   499a7b:       jmpq   499091 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x7f1>
         :            else if (__new_size < size())
    0.00 :   499a80:       test   %rdx,%rdx
    0.00 :   499a83:       je     499932 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1092>
    0.00 :   499a89:       lea    0x90(%rsp),%rax
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   499a91:       add    %rsi,%rbx
    0.00 :   499a94:       mov    %rax,0x28(%rsp)
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   499a99:       cmp    %rbx,%rcx
    0.00 :   499a9c:       jne    49986c <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0xfcc>
    0.00 :   499aa2:       jmpq   49993f <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x109f>
    0.00 :   499aa7:       nopw   0x0(%rax,%rax,1)
    0.00 :   499ab0:       mov    0x28(%rsp),%rsi
    0.00 :   499ab5:       lea    0x68(%rsp),%rdi
    0.00 :   499aba:       xor    %r8d,%r8d
    0.00 :   499abd:       mov    %rbx,%rcx
    0.00 :   499ac0:       mov    %r15,%rdx
    0.00 :   499ac3:       callq  497590 <onnxruntime::DoUntypedTranspose(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, onnxruntime::TensorShape const*)>
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   499ac8:       mov    0x68(%rsp),%rax
         :            #endif
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   499acd:       mov    0x50(%rsp),%rbx
         :            _M_t._M_ptr() = pointer();
    0.00 :   499ad2:       movq   $0x0,0x68(%rsp)
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   499adb:       mov    %rax,0x50(%rsp)
         :            void
         :            reset(pointer __p = pointer()) noexcept
         :            {
         :            using std::swap;
         :            swap(_M_t._M_ptr(), __p);
         :            if (__p != pointer())
    0.00 :   499ae0:       test   %rbx,%rbx
    0.00 :   499ae3:       je     499a6a <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x11ca>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   499ae5:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   499ae9:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   499aed:       cmp    %rax,%rdi
    0.00 :   499af0:       je     499af7 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1257>
    0.00 :   499af2:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   499af7:       mov    %rbx,%rdi
    0.00 :   499afa:       mov    $0x28,%esi
    0.00 :   499aff:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            if (__ptr != nullptr)
    0.00 :   499b04:       mov    0x68(%rsp),%rbx
    0.00 :   499b09:       test   %rbx,%rbx
    0.00 :   499b0c:       je     499a65 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x11c5>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   499b12:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   499b16:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   499b1a:       cmp    %rax,%rdi
    0.00 :   499b1d:       je     499b24 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1284>
    0.00 :   499b1f:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   499b24:       mov    $0x28,%esi
    0.00 :   499b29:       mov    %rbx,%rdi
    0.00 :   499b2c:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   499b31:       jmpq   499a65 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x11c5>
    0.00 :   499b36:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   499b40:       mov    0x78(%rsp),%rcx
    0.00 :   499b45:       jmpq   49993f <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x109f>
    0.00 :   499b4a:       xor    %r12d,%r12d
    0.00 :   499b4d:       jmp    499b67 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x12c7>
    0.00 :   499b4f:       nop
         :            this->_M_assign(__str);
    0.00 :   499b50:       mov    %r13,%rsi
    0.00 :   499b53:       mov    %rbx,%rdi
    0.00 :   499b56:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   499b5b:       add    $0x1,%r12
    0.00 :   499b5f:       add    $0x20,%rbx
    0.00 :   499b63:       add    $0x20,%r13
    0.00 :   499b67:       mov    %rbp,%rdi
    0.00 :   499b6a:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   499b6f:       cmp    %r12,%rax
    0.00 :   499b72:       jg     499b50 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x12b0>
    0.00 :   499b74:       jmpq   499085 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x7e5>
    0.00 :   499b79:       callq  493a90 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]>
    0.00 :   499b7e:       jmpq   499a65 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x11c5>
    0.00 :   499b83:       mov    %rax,%rdi
    0.00 :   499b86:       callq  *%rdx
    0.00 :   499b88:       test   %rax,%rax
    0.00 :   499b8b:       je     4999e1 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1141>
    0.00 :   499b91:       jmpq   4999d7 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x1137>
    0.00 :   499b96:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   499b9b:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   499ba0:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   499ba5:       mov    0x70(%rsp),%rsi
    0.00 :   499baa:       mov    0x78(%rsp),%rcx
    0.00 :   499baf:       jmpq   498fbc <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const+0x71c>
    0.00 :   499bb4:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   499bb9:       mov    %rax,%rbx
    0.00 :   499bbc:       jmpq   9a7b9 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x47>
    0.00 :   499bc1:       mov    %rax,%rbx
    0.00 :   499bc4:       jmpq   9a811 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x9f>
    0.00 :   499bc9:       mov    %rax,%rbx
    0.00 :   499bcc:       jmpq   9a7ea <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x78>
    0.00 :   499bd1:       mov    %rax,%rbx
    0.00 :   499bd4:       mov    %rdx,%rbp
    0.00 :   499bd7:       jmpq   9a84a <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0xd8>
    0.00 :   499bdc:       mov    %rax,%rbx
    0.00 :   499bdf:       jmpq   9a772 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]>
    0.00 :   499be4:       mov    %rax,%rbp
    0.00 :   499be7:       jmpq   9aa3d <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x2cb>
    0.00 :   499bec:       mov    %rax,%rbp
    0.00 :   499bef:       jmpq   9aa35 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x2c3>
    0.00 :   499bf4:       mov    %rax,%rbx
    0.00 :   499bf7:       jmpq   9a7c1 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x4f>
    0.00 :   499bfc:       mov    %rax,%rbx
    0.00 :   499bff:       jmpq   9aa7f <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x30d>
    0.00 :   499c04:       mov    %rax,%rbp
    0.00 :   499c07:       jmpq   9aa47 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x2d5>
    0.00 :   499c0c:       jmpq   9aab2 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x340>
    0.00 :   499c11:       mov    %rax,%rbx
    0.00 :   499c14:       jmpq   9aa6d <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x2fb>
    0.00 :   499c19:       mov    %rax,%rbx
    0.00 :   499c1c:       mov    %rdx,%rbp
    0.00 :   499c1f:       jmpq   9aacd <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x35b>
    0.00 :   499c24:       jmpq   9aada <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x368>
    0.00 :   499c29:       mov    %rax,%rbx
    0.00 :   499c2c:       mov    %rdx,%rbp
    0.00 :   499c2f:       jmpq   9a860 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0xee>
    0.00 :   499c34:       jmpq   9ab03 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x391>
    0.00 :   499c39:       jmpq   9ab2a <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x3b8>
    0.00 :   499c3e:       mov    %rax,%rbx
    0.00 :   499c41:       jmpq   9a788 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x16>
    0.00 :   499c46:       mov    %rax,%rbx
    0.00 :   499c49:       mov    %rdx,%rbp
    0.00 :   499c4c:       jmpq   9a895 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x123>
    0.00 :   499c51:       jmpq   9abb8 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x446>
    0.00 :   499c56:       jmpq   9ab9b <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x429>
    0.00 :   499c5b:       mov    %rax,%rbx
    0.00 :   499c5e:       jmpq   9a7d3 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x61>
    0.00 :   499c63:       mov    %rax,%rbx
    0.00 :   499c66:       mov    %rdx,%rbp
    0.00 :   499c69:       jmpq   9a87f <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x10d>
    0.00 :   499c6e:       jmpq   9abd7 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x465>
    0.00 :   499c73:       mov    %rax,%rbx
    0.00 :   499c76:       mov    %rdx,%rbp
    0.00 :   499c79:       jmpq   9a875 <onnxruntime::Transpose::Compute(onnxruntime::OpKernelContext*) const [clone .cold.219]+0x103>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004bf2b0 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime5WhereIfE7ComputeEPNS_15OpKernelContextE():
  100.00 :   4bf2b0:       push   %r14
    0.00 :   4bf2b2:       push   %r13
    0.00 :   4bf2b4:       mov    %rdi,%r13
    0.00 :   4bf2b7:       push   %r12
    0.00 :   4bf2b9:       push   %rbp
    0.00 :   4bf2ba:       push   %rbx
    0.00 :   4bf2bb:       mov    %rdx,%rbx
    0.00 :   4bf2be:       mov    %rbx,%rsi
    0.00 :   4bf2c1:       sub    $0xf0,%rsp
    0.00 :   4bf2c8:       mov    %fs:0x28,%rax
    0.00 :   4bf2d1:       mov    %rax,0xe8(%rsp)
    0.00 :   4bf2d9:       xor    %eax,%eax
    0.00 :   4bf2db:       lea    0x20(%rsp),%rbp
    0.00 :   4bf2e0:       lea    0x10(%rsp),%r12
         :            #if __cplusplus > 201402L
         :            using weak_type = __weak_ptr<_Tp, _Lp>;
         :            #endif
         :
         :            constexpr __shared_ptr() noexcept
         :            : _M_ptr(0), _M_refcount()
    0.00 :   4bf2e5:       movq   $0x0,0x10(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   4bf2ee:       movq   $0x0,0x18(%rsp)
    0.00 :   4bf2f7:       mov    %r12,%rdx
    0.00 :   4bf2fa:       mov    %rbp,%rdi
    0.00 :   4bf2fd:       callq  5c7230 <onnxruntime::OpKernelContext::GetTempSpaceAllocator(std::shared_ptr<onnxruntime::IAllocator>*) const>
    0.00 :   4bf302:       cmpq   $0x0,0x20(%rsp)
    0.00 :   4bf308:       jne    4bf48b <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x1db>
    0.00 :   4bf30e:       lea    -0x3685(%rip),%rax        # 4bbc90 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#1}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   4bf315:       mov    %rsp,%rdi
    0.00 :   4bf318:       mov    %rbp,%r9
    0.00 :   4bf31b:       mov    %r12,%rcx
    0.00 :   4bf31e:       lea    -0x26d5(%rip),%r14        # 4bcc50 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)>
    0.00 :   4bf325:       mov    %rax,0x20(%rsp)
    0.00 :   4bf32a:       mov    $0x1,%edx
    0.00 :   4bf32f:       mov    %rbx,%rsi
    0.00 :   4bf332:       lea    -0x3ae9(%rip),%rax        # 4bb850 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   4bf339:       mov    %rax,0x28(%rsp)
    0.00 :   4bf33e:       mov    %r14,%r8
    0.00 :   4bf341:       lea    -0x3928(%rip),%rax        # 4bba20 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   4bf348:       mov    %rax,0x30(%rsp)
    0.00 :   4bf34d:       callq  4be860 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)>
    0.00 :   4bf352:       lea    0x8(%rsp),%rdi
    0.00 :   4bf357:       mov    %rbp,%r9
    0.00 :   4bf35a:       mov    %r14,%r8
    0.00 :   4bf35d:       mov    %r12,%rcx
    0.00 :   4bf360:       xor    %edx,%edx
    0.00 :   4bf362:       mov    %rbx,%rsi
    0.00 :   4bf365:       callq  4be860 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)>
    0.00 :   4bf36a:       lea    -0x2ae1(%rip),%rax        # 4bc890 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#1}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   4bf371:       mov    0x8(%rsp),%rdx
    0.00 :   4bf376:       mov    (%rsp),%rsi
    0.00 :   4bf37a:       mov    %rbx,%rdi
    0.00 :   4bf37d:       mov    %rax,0x40(%rsp)
    0.00 :   4bf382:       lea    -0x2a69(%rip),%rax        # 4bc920 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   4bf389:       lea    0x40(%rsp),%rcx
    0.00 :   4bf38e:       mov    %rax,0x48(%rsp)
    0.00 :   4bf393:       lea    -0x409a(%rip),%rax        # 4bb300 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   4bf39a:       mov    %rax,0x50(%rsp)
    0.00 :   4bf39f:       callq  4be500 <onnxruntime::(anonymous namespace)::UntypedMerge(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&, onnxruntime::Tensor const&, onnxruntime::ProcessBroadcastSpanFuncs const&)>
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   4bf3a4:       mov    0x8(%rsp),%rbx
    0.00 :   4bf3a9:       movq   $0x0,0x0(%r13)
    0.00 :   4bf3b1:       test   %rbx,%rbx
    0.00 :   4bf3b4:       je     4bf3cb <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x11b>
         :            delete __ptr;
    0.00 :   4bf3b6:       mov    %rbx,%rdi
    0.00 :   4bf3b9:       callq  5edae0 <onnxruntime::Tensor::~Tensor()>
    0.00 :   4bf3be:       mov    $0x58,%esi
    0.00 :   4bf3c3:       mov    %rbx,%rdi
    0.00 :   4bf3c6:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            if (__ptr != nullptr)
    0.00 :   4bf3cb:       mov    (%rsp),%rbx
    0.00 :   4bf3cf:       test   %rbx,%rbx
    0.00 :   4bf3d2:       je     4bf3e9 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x139>
         :            delete __ptr;
    0.00 :   4bf3d4:       mov    %rbx,%rdi
    0.00 :   4bf3d7:       callq  5edae0 <onnxruntime::Tensor::~Tensor()>
    0.00 :   4bf3dc:       mov    $0x58,%esi
    0.00 :   4bf3e1:       mov    %rbx,%rdi
    0.00 :   4bf3e4:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            if (_M_pi != nullptr)
    0.00 :   4bf3e9:       mov    0x18(%rsp),%rbx
    0.00 :   4bf3ee:       test   %rbx,%rbx
    0.00 :   4bf3f1:       je     4bf410 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x160>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   4bf3f3:       mov    0x768b0e(%rip),%rbp        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4bf3fa:       test   %rbp,%rbp
    0.00 :   4bf3fd:       je     4bf440 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x190>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4bf3ff:       mov    $0xffffffff,%eax
    0.00 :   4bf404:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4bf409:       cmp    $0x1,%eax
    0.00 :   4bf40c:       je     4bf44e <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x19e>
    0.00 :   4bf40e:       xchg   %ax,%ax
    0.00 :   4bf410:       mov    0xe8(%rsp),%rcx
    0.00 :   4bf418:       xor    %fs:0x28,%rcx
    0.00 :   4bf421:       mov    %r13,%rax
    0.00 :   4bf424:       jne    4bf541 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x291>
    0.00 :   4bf42a:       add    $0xf0,%rsp
    0.00 :   4bf431:       pop    %rbx
    0.00 :   4bf432:       pop    %rbp
    0.00 :   4bf433:       pop    %r12
    0.00 :   4bf435:       pop    %r13
    0.00 :   4bf437:       pop    %r14
    0.00 :   4bf439:       retq
    0.00 :   4bf43a:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   4bf440:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4bf443:       lea    -0x1(%rax),%edx
    0.00 :   4bf446:       mov    %edx,0x8(%rbx)
    0.00 :   4bf449:       cmp    $0x1,%eax
    0.00 :   4bf44c:       jne    4bf410 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x160>
         :            _M_dispose();
    0.00 :   4bf44e:       mov    (%rbx),%rax
    0.00 :   4bf451:       mov    %rbx,%rdi
    0.00 :   4bf454:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4bf457:       test   %rbp,%rbp
    0.00 :   4bf45a:       je     4bf480 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x1d0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4bf45c:       mov    $0xffffffff,%eax
    0.00 :   4bf461:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4bf466:       cmp    $0x1,%eax
    0.00 :   4bf469:       jne    4bf410 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x160>
         :            _M_destroy();
    0.00 :   4bf46b:       mov    (%rbx),%rax
    0.00 :   4bf46e:       mov    %rbx,%rdi
    0.00 :   4bf471:       callq  *0x18(%rax)
    0.00 :   4bf474:       jmp    4bf410 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x160>
    0.00 :   4bf476:       nopw   %cs:0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   4bf480:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4bf483:       lea    -0x1(%rax),%edx
    0.00 :   4bf486:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   4bf489:       jmp    4bf466 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x1b6>
    0.00 :   4bf48b:       mov    $0xa0,%edi
    0.00 :   4bf490:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4bf495:       mov    %rbp,%rdi
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   4bf498:       lea    0x60(%rsp),%rbp
    0.00 :   4bf49d:       mov    %rax,%r12
    0.00 :   4bf4a0:       callq  697000 <onnxruntime::common::Status::ErrorMessage[abi:cxx11]() const>
    0.00 :   4bf4a5:       lea    0x10(%rbp),%rdx
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4bf4a9:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   4bf4ac:       mov    %rdx,0x60(%rsp)
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   4bf4b1:       mov    0x8(%rax),%rdx
    0.00 :   4bf4b5:       mov    (%rax),%rsi
    0.00 :   4bf4b8:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4bf4bb:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   4bf4c0:       lea    0x40(%rsp),%r13
    0.00 :   4bf4c5:       mov    %r13,%rdi
    0.00 :   4bf4c8:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4bf4cd:       lea    0x80(%rsp),%r14
    0.00 :   4bf4d5:       mov    %r13,%r8
    0.00 :   4bf4d8:       lea    0x3bcd61(%rip),%rcx        # 87c240 <onnxruntime::TensorAllocator::TensorAllocator(onnxruntime::OpKernelContext&)::__PRETTY_FUNCTION__>
    0.00 :   4bf4df:       mov    $0x3ba,%edx
    0.00 :   4bf4e4:       lea    0x38556d(%rip),%rsi        # 844a58 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x1d8>
    0.00 :   4bf4eb:       mov    %r14,%rdi
    0.00 :   4bf4ee:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4bf4f3:       mov    %rbp,%rcx
    0.00 :   4bf4f6:       lea    0x36f036(%rip),%rdx        # 82e533 <std::piecewise_construct+0xdad>
    0.00 :   4bf4fd:       mov    %r14,%rsi
    0.00 :   4bf500:       mov    %r12,%rdi
    0.00 :   4bf503:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4bf508:       mov    %r14,%rdi
         :            if (!_M_is_local())
    0.00 :   4bf50b:       add    $0x10,%rbp
    0.00 :   4bf50f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4bf514:       mov    %r13,%rdi
    0.00 :   4bf517:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4bf51c:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4bf521:       cmp    %rbp,%rdi
    0.00 :   4bf524:       je     4bf52b <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x27b>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   4bf526:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4bf52b:       lea    -0x3c5e12(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4bf532:       lea    0x7520f7(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4bf539:       mov    %r12,%rdi
    0.00 :   4bf53c:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4bf541:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   4bf546:       mov    %rax,%rbx
    0.00 :   4bf549:       jmp    4bf561 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x2b1>
    0.00 :   4bf54b:       mov    %rax,%rbx
    0.00 :   4bf54e:       jmp    4bf569 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x2b9>
    0.00 :   4bf550:       mov    %rax,%rbx
    0.00 :   4bf553:       jmp    4bf5b5 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x305>
    0.00 :   4bf555:       mov    %rax,%rbx
    0.00 :   4bf558:       jmp    4bf584 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x2d4>
    0.00 :   4bf55a:       jmp    4bf550 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x2a0>
    0.00 :   4bf55c:       mov    %rax,%rbx
    0.00 :   4bf55f:       jmp    4bf571 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x2c1>
    0.00 :   4bf561:       mov    %r14,%rdi
    0.00 :   4bf564:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4bf569:       mov    %r13,%rdi
    0.00 :   4bf56c:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4bf571:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4bf576:       add    $0x10,%rbp
    0.00 :   4bf57a:       cmp    %rbp,%rdi
    0.00 :   4bf57d:       je     4bf584 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x2d4>
    0.00 :   4bf57f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4bf584:       mov    %r12,%rdi
    0.00 :   4bf587:       callq  52fe0 <__cxa_free_exception@plt>
         :            if (__ptr != nullptr)
    0.00 :   4bf58c:       mov    0x20(%rsp),%rbp
    0.00 :   4bf591:       test   %rbp,%rbp
    0.00 :   4bf594:       je     4bf5b5 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x305>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4bf596:       mov    0x8(%rbp),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   4bf59a:       lea    0x18(%rbp),%rax
         :            if (!_M_is_local())
    0.00 :   4bf59e:       cmp    %rax,%rdi
    0.00 :   4bf5a1:       je     4bf5a8 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x2f8>
    0.00 :   4bf5a3:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   4bf5a8:       mov    $0x28,%esi
    0.00 :   4bf5ad:       mov    %rbp,%rdi
    0.00 :   4bf5b0:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            if (_M_pi != nullptr)
    0.00 :   4bf5b5:       mov    0x18(%rsp),%rdi
    0.00 :   4bf5ba:       test   %rdi,%rdi
    0.00 :   4bf5bd:       je     4bf5c4 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x314>
         :            _M_pi->_M_release();
    0.00 :   4bf5bf:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   4bf5c4:       mov    %rbx,%rdi
    0.00 :   4bf5c7:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4bf5cc:       mov    %rax,%rbx
    0.00 :   4bf5cf:       jmp    4bf5e0 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x330>
         :            if (__ptr != nullptr)
    0.00 :   4bf5d1:       mov    0x8(%rsp),%rdi
    0.00 :   4bf5d6:       test   %rdi,%rdi
    0.00 :   4bf5d9:       je     4bf5e0 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x330>
         :            get_deleter()(__ptr);
    0.00 :   4bf5db:       callq  9b8d8 <std::default_delete<onnxruntime::Tensor>::operator()(onnxruntime::Tensor*) const [clone .isra.165]>
         :            if (__ptr != nullptr)
    0.00 :   4bf5e0:       mov    (%rsp),%rdi
    0.00 :   4bf5e4:       test   %rdi,%rdi
    0.00 :   4bf5e7:       je     4bf5b5 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x305>
         :            get_deleter()(__ptr);
    0.00 :   4bf5e9:       callq  9b8d8 <std::default_delete<onnxruntime::Tensor>::operator()(onnxruntime::Tensor*) const [clone .isra.165]>
    0.00 :   4bf5ee:       jmp    4bf5b5 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x305>
    0.00 :   4bf5f0:       mov    %rax,%rbx
    0.00 :   4bf5f3:       jmp    4bf5d1 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x321>
    0.00 :   4bf5f5:       mov    %rax,%rbx
    0.00 :   4bf5f8:       jmp    4bf58c <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const+0x2dc>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005ee4f0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)>:
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee4f0:       push   %r15
    0.00 :   5ee4f2:       push   %r14
    0.00 :   5ee4f4:       push   %r13
    0.00 :   5ee4f6:       push   %r12
    0.00 :   5ee4f8:       push   %rbp
    0.00 :   5ee4f9:       push   %rbx
    0.00 :   5ee4fa:       mov    %rdi,%rbx
    0.00 :   5ee4fd:       sub    $0x108,%rsp
  100.00 :   5ee504:       mov    %fs:0x28,%rax
    0.00 :   5ee50d:       mov    %rax,0xf8(%rsp)
    0.00 :   5ee515:       xor    %eax,%eax
    0.00 :   5ee517:       mov    (%rcx),%rax
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            #if __cplusplus > 201402L
         :            using weak_type = __weak_ptr<_Tp, _Lp>;
         :            #endif
         :
         :            constexpr __shared_ptr() noexcept
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5ee51a:       movq   $0x0,0x8(%rdi)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5ee522:       movq   $0x0,0x10(%rdi)
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee52a:       movdqu 0x8(%rax),%xmm0
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ee52f:       movq   $0x0,0x18(%rdi)
    0.00 :   5ee537:       movq   $0x0,0x20(%rdi)
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee53f:       movups %xmm0,0x38(%rdi)
    0.00 :   5ee543:       mov    0x18(%rax),%rax
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee547:       movq   $0x0,0x28(%rdi)
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee54f:       mov    %rax,0x48(%rdi)
    0.00 :   5ee553:       test   %rsi,%rsi
    0.00 :   5ee556:       je     5ee77a <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x28a>
    0.00 :   5ee55c:       mov    %rdx,%rdi
    0.00 :   5ee55f:       mov    %rsi,%r12
    0.00 :   5ee562:       mov    %rdx,%r13
    0.00 :   5ee565:       mov    %rcx,%rbp
    0.00 :   5ee568:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5ee56d:       mov    %rax,%r14
    0.00 :   5ee570:       test   %rax,%rax
    0.00 :   5ee573:       js     5ee6e7 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x1f7>
    0.00 :   5ee579:       je     5ee6b0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x1c0>
    0.00 :   5ee57f:       movq   $0x0,0x8(%rsp)
    0.00 :   5ee588:       mov    (%r12),%rax
    0.00 :   5ee58c:       mov    %r12,%rdi
    0.00 :   5ee58f:       callq  *0x18(%rax)
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee592:       xor    %edx,%edx
    0.00 :   5ee594:       lea    0x8(%rsp),%rcx
    0.00 :   5ee599:       mov    %rax,%rsi
    0.00 :   5ee59c:       mov    %r14,%rdi
    0.00 :   5ee59f:       callq  58cef0 <onnxruntime::IAllocator::CalcMemSizeForArrayWithAlignment(unsigned long, unsigned long, unsigned long, unsigned long*)>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee5a4:       test   %al,%al
    0.00 :   5ee5a6:       je     5ee80d <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x31d>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    0.00 :   5ee5ac:       mov    0x0(%rbp),%rdi
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee5b0:       mov    0x8(%rsp),%rsi
    0.00 :   5ee5b5:       mov    (%rdi),%rax
    0.00 :   5ee5b8:       callq  *0x10(%rax)
    0.00 :   5ee5bb:       mov    %rax,%rcx
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5ee5be:       mov    0x0(%rbp),%rax
         :            : _M_pi(__r._M_pi)
    0.00 :   5ee5c2:       mov    0x8(%rbp),%rdx
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5ee5c6:       mov    %rax,0x10(%rsp)
         :            : _M_pi(__r._M_pi)
    0.00 :   5ee5cb:       mov    %rdx,0x18(%rsp)
         :            if (_M_pi != 0)
    0.00 :   5ee5d0:       test   %rdx,%rdx
    0.00 :   5ee5d3:       je     5ee5e4 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0xf4>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5ee5d5:       cmpq   $0x0,0x63992b(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ee5dd:       je     5ee650 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x160>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee5df:       lock addl $0x1,0x8(%rdx)
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee5e4:       xor    %r9d,%r9d
    0.00 :   5ee5e7:       lea    0x10(%rsp),%r8
    0.00 :   5ee5ec:       mov    %r13,%rdx
    0.00 :   5ee5ef:       mov    %r12,%rsi
    0.00 :   5ee5f2:       mov    %rbx,%rdi
    0.00 :   5ee5f5:       callq  5edfa0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            if (_M_pi != nullptr)
    0.00 :   5ee5fa:       mov    0x18(%rsp),%rbx
    0.00 :   5ee5ff:       test   %rbx,%rbx
    0.00 :   5ee602:       je     5ee620 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x130>
         :            if (__gthread_active_p())
    0.00 :   5ee604:       mov    0x6398fd(%rip),%rbp        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ee60b:       test   %rbp,%rbp
    0.00 :   5ee60e:       je     5ee660 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x170>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee610:       mov    $0xffffffff,%eax
    0.00 :   5ee615:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ee61a:       cmp    $0x1,%eax
    0.00 :   5ee61d:       je     5ee66e <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x17e>
    0.00 :   5ee61f:       nop
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee620:       mov    0xf8(%rsp),%rax
    0.00 :   5ee628:       xor    %fs:0x28,%rax
    0.00 :   5ee631:       jne    5ee808 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x318>
    0.00 :   5ee637:       add    $0x108,%rsp
    0.00 :   5ee63e:       pop    %rbx
    0.00 :   5ee63f:       pop    %rbp
    0.00 :   5ee640:       pop    %r12
    0.00 :   5ee642:       pop    %r13
    0.00 :   5ee644:       pop    %r14
    0.00 :   5ee646:       pop    %r15
    0.00 :   5ee648:       retq
    0.00 :   5ee649:       nopl   0x0(%rax)
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            { *__mem += __val; }
    0.00 :   5ee650:       addl   $0x1,0x8(%rdx)
    0.00 :   5ee654:       jmp    5ee5e4 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0xf4>
    0.00 :   5ee656:       nopw   %cs:0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ee660:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5ee663:       lea    -0x1(%rax),%edx
    0.00 :   5ee666:       mov    %edx,0x8(%rbx)
    0.00 :   5ee669:       cmp    $0x1,%eax
    0.00 :   5ee66c:       jne    5ee620 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x130>
         :            _M_dispose();
    0.00 :   5ee66e:       mov    (%rbx),%rax
    0.00 :   5ee671:       mov    0x10(%rax),%rax
    0.00 :   5ee675:       cmp    0x6394e4(%rip),%rax        # c27b60 <.got+0xa0>
    0.00 :   5ee67c:       jne    5ee6e0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x1f0>
         :            if (__gthread_active_p())
    0.00 :   5ee67e:       test   %rbp,%rbp
    0.00 :   5ee681:       je     5ee6c0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x1d0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee683:       mov    $0xffffffff,%eax
    0.00 :   5ee688:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ee68d:       cmp    $0x1,%eax
    0.00 :   5ee690:       jne    5ee620 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x130>
         :            _M_destroy();
    0.00 :   5ee692:       mov    (%rbx),%rax
         :            { delete this; }
    0.00 :   5ee695:       mov    %rbx,%rdi
         :            _M_destroy();
    0.00 :   5ee698:       mov    0x18(%rax),%rdx
    0.00 :   5ee69c:       cmp    0x6394fd(%rip),%rdx        # c27ba0 <.got+0xe0>
    0.00 :   5ee6a3:       jne    5ee6d0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x1e0>
         :            { delete this; }
    0.00 :   5ee6a5:       callq  *0x8(%rax)
    0.00 :   5ee6a8:       jmpq   5ee620 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x130>
    0.00 :   5ee6ad:       nopl   (%rax)
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee6b0:       xor    %ecx,%ecx
    0.00 :   5ee6b2:       jmpq   5ee5be <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0xce>
    0.00 :   5ee6b7:       nopw   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            _Atomic_word __result = *__mem;
    0.00 :   5ee6c0:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5ee6c3:       lea    -0x1(%rax),%edx
    0.00 :   5ee6c6:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5ee6c9:       jmp    5ee68d <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x19d>
    0.00 :   5ee6cb:       nopl   0x0(%rax,%rax,1)
         :            _M_destroy();
    0.00 :   5ee6d0:       callq  *%rdx
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee6d2:       jmpq   5ee620 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x130>
    0.00 :   5ee6d7:       nopw   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            _M_dispose();
    0.00 :   5ee6e0:       mov    %rbx,%rdi
    0.00 :   5ee6e3:       callq  *%rax
    0.00 :   5ee6e5:       jmp    5ee67e <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)+0x18e>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee6e7:       mov    $0xa0,%edi
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee6ec:       lea    0x90(%rsp),%r13
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee6f4:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee6f9:       lea    0x2a6aef(%rip),%rsi        # 8951ef <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xef>
    0.00 :   5ee700:       mov    %r13,%rdi
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee703:       mov    %rax,%r14
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee706:       callq  5ede30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.69]>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee70b:       lea    0x10(%rsp),%rbp
    0.00 :   5ee710:       mov    %rbp,%rdi
    0.00 :   5ee713:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ee718:       lea    0x30(%rsp),%r12
    0.00 :   5ee71d:       mov    %rbp,%r8
    0.00 :   5ee720:       lea    0x2a6c59(%rip),%rcx        # 895380 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)::__PRETTY_FUNCTION__>
    0.00 :   5ee727:       mov    $0x19,%edx
    0.00 :   5ee72c:       lea    0x2a6a85(%rip),%rsi        # 8951b8 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xb8>
    0.00 :   5ee733:       mov    %r12,%rdi
    0.00 :   5ee736:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee73b:       mov    %r13,%rcx
    0.00 :   5ee73e:       xor    %edx,%edx
    0.00 :   5ee740:       mov    %r12,%rsi
    0.00 :   5ee743:       mov    %r14,%rdi
    0.00 :   5ee746:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee74b:       mov    %r12,%rdi
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5ee74e:       add    $0x10,%r13
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee752:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ee757:       mov    %rbp,%rdi
    0.00 :   5ee75a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ee75f:       mov    0x90(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ee767:       cmp    %r13,%rdi
    0.00 :   5ee76a:       je     b757d <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x77>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5ee770:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ee775:       jmpq   b757d <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x77>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee77a:       mov    $0xa0,%edi
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee77f:       lea    0x30(%rsp),%r12
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee784:       lea    0x10(%rsp),%rbp
    0.00 :   5ee789:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee78e:       mov    %r12,%rdi
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee791:       mov    %rax,%r14
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee794:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee799:       mov    %rbp,%rdi
    0.00 :   5ee79c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ee7a1:       lea    0x90(%rsp),%r13
    0.00 :   5ee7a9:       mov    %rbp,%r8
    0.00 :   5ee7ac:       lea    0x2a6bcd(%rip),%rcx        # 895380 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)::__PRETTY_FUNCTION__>
    0.00 :   5ee7b3:       mov    $0x16,%edx
    0.00 :   5ee7b8:       lea    0x2a69f9(%rip),%rsi        # 8951b8 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xb8>
    0.00 :   5ee7bf:       mov    %r13,%rdi
    0.00 :   5ee7c2:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5ee7c7:       mov    %r12,%rcx
    0.00 :   5ee7ca:       lea    0x2a6a8c(%rip),%rdx        # 89525d <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0x15d>
    0.00 :   5ee7d1:       mov    %r13,%rsi
    0.00 :   5ee7d4:       mov    %r14,%rdi
    0.00 :   5ee7d7:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5ee7dc:       mov    %r13,%rdi
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee7df:       add    $0x10,%r12
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee7e3:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ee7e8:       mov    %rbp,%rdi
    0.00 :   5ee7eb:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ee7f0:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ee7f5:       cmp    %r12,%rdi
    0.00 :   5ee7f8:       je     b75b6 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0xb0>
    0.00 :   5ee7fe:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ee803:       jmpq   b75b6 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0xb0>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee808:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5ee80d:       mov    $0xa0,%edi
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee812:       lea    0x30(%rsp),%r12
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee817:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee81c:       lea    0x2a6a4d(%rip),%rsi        # 895270 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0x170>
    0.00 :   5ee823:       mov    %r12,%rdi
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee826:       mov    %rax,%r14
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee829:       callq  5ede30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.69]>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee82e:       lea    0x10(%rsp),%rbp
    0.00 :   5ee833:       mov    %rbp,%rdi
    0.00 :   5ee836:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ee83b:       lea    0x90(%rsp),%r13
    0.00 :   5ee843:       mov    %rbp,%r8
    0.00 :   5ee846:       lea    0x2a6b33(%rip),%rcx        # 895380 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)::__PRETTY_FUNCTION__>
    0.00 :   5ee84d:       mov    $0x1f,%edx
    0.00 :   5ee852:       lea    0x2a695f(%rip),%rsi        # 8951b8 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xb8>
    0.00 :   5ee859:       mov    %r13,%rdi
    0.00 :   5ee85c:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee861:       mov    %r12,%rcx
    0.00 :   5ee864:       xor    %edx,%edx
    0.00 :   5ee866:       mov    %r13,%rsi
    0.00 :   5ee869:       mov    %r14,%rdi
    0.00 :   5ee86c:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee871:       mov    %r13,%rdi
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee874:       add    $0x10,%r12
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
    0.00 :   5ee878:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ee87d:       mov    %rbp,%rdi
    0.00 :   5ee880:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime6TensorC1EPKNS_12DataTypeImplERKNS_11TensorShapeESt10shared_ptrINS_10IAllocatorEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ee885:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ee88a:       cmp    %r12,%rdi
    0.00 :   5ee88d:       je     b753f <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x39>
    0.00 :   5ee893:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ee898:       jmpq   b753f <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x39>
    0.00 :   5ee89d:       jmpq   b7507 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x1>
    0.00 :   5ee8a2:       mov    %rax,%rbp
    0.00 :   5ee8a5:       jmpq   b752e <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x28>
    0.00 :   5ee8aa:       mov    %rax,%r13
    0.00 :   5ee8ad:       jmpq   b7555 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x4f>
    0.00 :   5ee8b2:       mov    %rax,%rbp
    0.00 :   5ee8b5:       jmpq   b7560 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x5a>
    0.00 :   5ee8ba:       mov    %rax,%rbp
    0.00 :   5ee8bd:       jmpq   b7573 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x6d>
    0.00 :   5ee8c2:       mov    %rax,%r12
    0.00 :   5ee8c5:       jmpq   b7593 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x8d>
    0.00 :   5ee8ca:       mov    %rax,%rbp
    0.00 :   5ee8cd:       jmpq   b759e <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x98>
    0.00 :   5ee8d2:       mov    %rax,%rbp
    0.00 :   5ee8d5:       jmpq   b7573 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0x6d>
    0.00 :   5ee8da:       mov    %rax,%r13
    0.00 :   5ee8dd:       jmpq   b75d7 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0xd1>
    0.00 :   5ee8e2:       mov    %rax,%rbp
    0.00 :   5ee8e5:       jmpq   b75e2 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0xdc>
    0.00 :   5ee8ea:       mov    %rax,%r15
    0.00 :   5ee8ed:       jmpq   b75cc <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>) [clone .cold.103]+0xc6>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a9630 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)>:
         :            _ZN11onnxruntime14ExecutionFrame13TraceAllocateEim():
    0.00 :   5a9630:       push   %r15
    0.00 :   5a9632:       push   %r14
    0.00 :   5a9634:       push   %r13
    0.00 :   5a9636:       push   %r12
    0.00 :   5a9638:       push   %rbp
    0.00 :   5a9639:       push   %rbx
    0.00 :   5a963a:       sub    $0x298,%rsp
    0.00 :   5a9641:       mov    %fs:0x28,%rax
    0.00 :   5a964a:       mov    %rax,0x288(%rsp)
    0.00 :   5a9652:       xor    %eax,%eax
    0.00 :   5a9654:       cmpq   $0x0,0x90(%rdi)
    0.00 :   5a965c:       je     5a9b18 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x4e8>
    0.00 :   5a9662:       mov    %rdi,%rbx
    0.00 :   5a9665:       mov    %esi,%r12d
    0.00 :   5a9668:       mov    %rdx,%r14
    0.00 :   5a966b:       callq  5a9500 <onnxruntime::ExecutionFrame::GetAllocationPlan(int)>
    0.00 :   5a9670:       cmpl   $0x4,(%rax)
    0.00 :   5a9673:       je     5a9b18 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x4e8>
    0.00 :   5a9679:       lea    0x28(%rsp),%rax
    0.00 :   5a967e:       mov    0x90(%rbx),%rsi
    0.00 :   5a9685:       mov    %r14,%rcx
    0.00 :   5a9688:       mov    %r12d,%edx
    0.00 :   5a968b:       mov    %rax,%rdi
    0.00 :   5a968e:       mov    %rax,0x8(%rsp)
    0.00 :   5a9693:       callq  5ccf20 <onnxruntime::OrtValuePatternPlanner::TraceAllocation(int, unsigned long)>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   5a9698:       mov    0x28(%rsp),%rbp
    0.00 :   5a969d:       test   %rbp,%rbp
    0.00 :   5a96a0:       je     5a9b18 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x4e8>
    0.00 :   5a96a6:       mov    0x48(%rbx),%rax
    0.00 :   5a96aa:       mov    0x210(%rax),%rax
    0.00 :   5a96b1:       cmpl   $0x2,0x28(%rax)
    0.00 :   5a96b5:       jg     5a9af6 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x4c6>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5a96bb:       lea    0x30(%rsp),%rcx
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a96c0:       lea    0x2e63b0(%rip),%rdx        # 88fa77 <std::piecewise_construct+0x19a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5a96c7:       lea    0x40(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a96cc:       lea    -0x3f(%rdx),%rsi
    0.00 :   5a96d0:       mov    %rcx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5a96d3:       mov    %rcx,%r15
    0.00 :   5a96d6:       mov    %rcx,0x10(%rsp)
    0.00 :   5a96db:       mov    %rax,0x30(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a96e0:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5a96e5:       lea    0x38(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a96e9:       lea    0x2e6ab5(%rip),%rdx        # 8901a5 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)::__FUNCTION__+0xd>
    0.00 :   5a96f0:       movl   $0x278,0x50(%rsp)
    0.00 :   5a96f8:       lea    0x28(%r15),%rdi
    0.00 :   5a96fc:       lea    -0xd(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5a9700:       mov    %rax,0x58(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a9705:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5a970a:       mov    0x48(%rbx),%rdx
    0.00 :   5a970e:       lea    0x67f593(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5a9715:       lea    0x90(%rsp),%r13
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5a971d:       movq   $0x0,0x78(%rsp)
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5a9726:       mov    0x30(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a972b:       lea    0x20(%r13),%rdi
    0.00 :   5a972f:       movq   $0x0,0x80(%rsp)
    0.00 :   5a973b:       mov    0x210(%rdx),%rdx
    0.00 :   5a9742:       mov    (%rax),%rax
    0.00 :   5a9745:       movq   $0x0,0x88(%rsp)
    0.00 :   5a9751:       movl   $0x2,0x98(%rsp)
    0.00 :   5a975c:       mov    %rdx,0x90(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5a9764:       mov    0x38(%rsp),%rdx
    0.00 :   5a9769:       mov    %rax,0xa0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5a9771:       lea    0x30(%r13),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5a9775:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5a9778:       mov    %rax,0xb0(%rsp)
    0.00 :   5a9780:       movl   $0x0,0xa8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a978b:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5a9790:       mov    0x50(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5a9794:       mov    0x58(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a9799:       lea    0x48(%r13),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5a979d:       mov    0x60(%rsp),%rdx
    0.00 :   5a97a2:       mov    %eax,0xd0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5a97a9:       lea    0x58(%r13),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5a97ad:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5a97b0:       mov    %rax,0xd8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a97b8:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5a97bd:       mov    0x80(%rsp),%r15
    0.00 :   5a97c5:       mov    0x78(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5a97ca:       movq   $0x0,0xf8(%rsp)
    0.00 :   5a97d6:       movq   $0x0,0x100(%rsp)
    0.00 :   5a97e2:       movq   $0x0,0x108(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5a97ee:       mov    %r15,%rbp
    0.00 :   5a97f1:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5a97f4:       mov    %rbp,%rax
    0.00 :   5a97f7:       sar    $0x5,%rax
    0.00 :   5a97fb:       je     5a9b40 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x510>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   5a9801:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5a980b:       cmp    %rdx,%rax
    0.00 :   5a980e:       ja     5a9b5f <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x52f>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5a9814:       mov    %rbp,%rdi
    0.00 :   5a9817:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5a981c:       mov    %rax,0x18(%rsp)
    0.00 :   5a9821:       mov    0x80(%rsp),%r15
    0.00 :   5a9829:       mov    0x78(%rsp),%rbx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5a982e:       mov    0x18(%rsp),%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5a9833:       add    %rax,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5a9836:       mov    %rax,0xf8(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5a983e:       mov    %rax,0x100(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5a9846:       mov    %rbp,0x108(%rsp)
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5a984e:       cmp    %r15,%rbx
    0.00 :   5a9851:       je     5a9b50 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x520>
         :            _ForwardIterator __cur = __result;
    0.00 :   5a9857:       mov    %rax,%rbp
    0.00 :   5a985a:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5a9860:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a9864:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5a9867:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5a986b:       mov    (%rbx),%rsi
    0.00 :   5a986e:       mov    0x8(%rbx),%rdx
    0.00 :   5a9872:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5a9875:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5a987a:       add    $0x20,%rbx
    0.00 :   5a987e:       add    $0x20,%rbp
    0.00 :   5a9882:       cmp    %rbx,%r15
    0.00 :   5a9885:       jne    5a9860 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x230>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5a9887:       lea    0xf0(%r13),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   5a988e:       mov    %rbp,0x100(%rsp)
    0.00 :   5a9896:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5a989b:       mov    0x67e286(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5a98a2:       xor    %esi,%esi
    0.00 :   5a98a4:       movq   $0x0,0x258(%rsp)
    0.00 :   5a98b0:       movq   $0x0,0x268(%rsp)
    0.00 :   5a98bc:       movq   $0x0,0x270(%rsp)
    0.00 :   5a98c8:       lea    0x10(%r15),%rax
    0.00 :   5a98cc:       mov    %rax,0x180(%rsp)
    0.00 :   5a98d4:       xor    %eax,%eax
    0.00 :   5a98d6:       mov    %ax,0x260(%rsp)
    0.00 :   5a98de:       mov    0x67e4bb(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5a98e5:       movq   $0x0,0x278(%rsp)
    0.00 :   5a98f1:       mov    0x8(%rax),%rbx
    0.00 :   5a98f5:       mov    0x10(%rax),%rbp
    0.00 :   5a98f9:       movq   $0x0,0x280(%rsp)
    0.00 :   5a9905:       mov    -0x18(%rbx),%rdx
    0.00 :   5a9909:       mov    %rbx,0x110(%rsp)
    0.00 :   5a9911:       lea    0x80(%r13,%rdx,1),%rdi
    0.00 :   5a9919:       mov    %rbp,(%rdi)
    0.00 :   5a991c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5a9921:       mov    0x67e438(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5a9928:       lea    0xc0(%r13),%rdi
    0.00 :   5a992f:       movq   $0x0,0x120(%rsp)
    0.00 :   5a993b:       movq   $0x0,0x128(%rsp)
    0.00 :   5a9947:       movq   $0x0,0x130(%rsp)
    0.00 :   5a9953:       lea    0x18(%rax),%rdx
    0.00 :   5a9957:       add    $0x40,%rax
    0.00 :   5a995b:       mov    %rax,0x180(%rsp)
    0.00 :   5a9963:       mov    0x67e2f6(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5a996a:       mov    %rdx,0x110(%rsp)
    0.00 :   5a9972:       movq   $0x0,0x138(%rsp)
    0.00 :   5a997e:       add    $0x10,%rax
    0.00 :   5a9982:       mov    %rax,0x118(%rsp)
    0.00 :   5a998a:       movq   $0x0,0x140(%rsp)
    0.00 :   5a9996:       movq   $0x0,0x148(%rsp)
    0.00 :   5a99a2:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5a99a7:       mov    0x67e62a(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5a99ae:       lea    0x88(%r13),%rsi
    0.00 :   5a99b5:       lea    0xf0(%r13),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5a99bc:       movl   $0x10,0x158(%rsp)
    0.00 :   5a99c7:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5a99cb:       movb   $0x0,0x170(%rsp)
    0.00 :   5a99d3:       mov    %rax,0x118(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5a99db:       lea    0xe0(%r13),%rax
    0.00 :   5a99e2:       mov    %rax,0x160(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5a99ea:       movq   $0x0,0x168(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5a99f6:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5a99fb:       lea    0x80(%r13),%rdi
    0.00 :   5a9a02:       mov    $0x22,%edx
    0.00 :   5a9a07:       lea    0x2e60ba(%rip),%rsi        # 88fac8 <std::piecewise_construct+0x1eb>
    0.00 :   5a9a0e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5a9a13:       lea    0x80(%r13),%rdi
    0.00 :   5a9a1a:       mov    %r12d,%esi
    0.00 :   5a9a1d:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   5a9a22:       mov    $0x6,%edx
    0.00 :   5a9a27:       lea    0x2e60bd(%rip),%rsi        # 88faeb <std::piecewise_construct+0x20e>
    0.00 :   5a9a2e:       mov    %rax,%rdi
    0.00 :   5a9a31:       mov    %rax,%rbx
    0.00 :   5a9a34:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   5a9a39:       mov    %r14,%rsi
    0.00 :   5a9a3c:       mov    %rbx,%rdi
    0.00 :   5a9a3f:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5a9a44:       mov    $0x9,%edx
    0.00 :   5a9a49:       lea    0x2fd379(%rip),%rsi        # 8a6dc9 <typeinfo name for onnxruntime::concurrency::ThreadPoolTempl<onnxruntime::Env>::WorkerLoop(int)::{lambda()#2}+0x89>
    0.00 :   5a9a50:       mov    %rax,%rdi
         :            { return _M_insert(__n); }
    0.00 :   5a9a53:       mov    %rax,%rbx
         :            __ostream_insert(__out, __s,
    0.00 :   5a9a56:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5a9a5b:       mov    0x8(%rsp),%rdi
    0.00 :   5a9a60:       callq  697000 <onnxruntime::common::Status::ErrorMessage[abi:cxx11]() const>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   5a9a65:       mov    %rbx,%rdi
    0.00 :   5a9a68:       mov    0x8(%rax),%rdx
    0.00 :   5a9a6c:       mov    (%rax),%rsi
    0.00 :   5a9a6f:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5a9a74:       mov    %r13,%rdi
    0.00 :   5a9a77:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5a9a7c:       mov    0x80(%rsp),%rbp
    0.00 :   5a9a84:       mov    0x78(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   5a9a89:       cmp    %rbx,%rbp
    0.00 :   5a9a8c:       je     5a9aaf <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x47f>
    0.00 :   5a9a8e:       xchg   %ax,%ax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5a9a90:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5a9a93:       lea    0x10(%rbx),%rax
    0.00 :   5a9a97:       cmp    %rax,%rdi
    0.00 :   5a9a9a:       je     5a9aa1 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x471>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5a9a9c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5a9aa1:       add    $0x20,%rbx
    0.00 :   5a9aa5:       cmp    %rbx,%rbp
    0.00 :   5a9aa8:       jne    5a9a90 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x460>
    0.00 :   5a9aaa:       mov    0x78(%rsp),%rbx
         :            if (__p)
    0.00 :   5a9aaf:       test   %rbx,%rbx
    0.00 :   5a9ab2:       je     5a9abc <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x48c>
    0.00 :   5a9ab4:       mov    %rbx,%rdi
    0.00 :   5a9ab7:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5a9abc:       mov    0x10(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5a9ac1:       mov    0x58(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5a9ac6:       add    $0x38,%rax
    0.00 :   5a9aca:       cmp    %rax,%rdi
    0.00 :   5a9acd:       je     5a9ad4 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x4a4>
    0.00 :   5a9acf:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5a9ad4:       mov    0x10(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5a9ad9:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5a9ade:       add    $0x10,%rax
    0.00 :   5a9ae2:       cmp    %rax,%rdi
    0.00 :   5a9ae5:       je     5a9aec <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x4bc>
    0.00 :   5a9ae7:       callq  53300 <operator delete(void*)@plt>
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   5a9aec:       mov    0x28(%rsp),%rbp
    0.00 :   5a9af1:       test   %rbp,%rbp
    0.00 :   5a9af4:       je     5a9b18 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x4e8>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5a9af6:       mov    0x8(%rbp),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   5a9afa:       lea    0x18(%rbp),%rax
         :            if (!_M_is_local())
    0.00 :   5a9afe:       cmp    %rax,%rdi
    0.00 :   5a9b01:       je     5a9b08 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x4d8>
    0.00 :   5a9b03:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   5a9b08:       mov    $0x28,%esi
    0.00 :   5a9b0d:       mov    %rbp,%rdi
    0.00 :   5a9b10:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   5a9b15:       nopl   (%rax)
  100.00 :   5a9b18:       mov    0x288(%rsp),%rax
    0.00 :   5a9b20:       xor    %fs:0x28,%rax
    0.00 :   5a9b29:       jne    5a9b5a <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x52a>
    0.00 :   5a9b2b:       add    $0x298,%rsp
    0.00 :   5a9b32:       pop    %rbx
    0.00 :   5a9b33:       pop    %rbp
    0.00 :   5a9b34:       pop    %r12
    0.00 :   5a9b36:       pop    %r13
    0.00 :   5a9b38:       pop    %r14
    0.00 :   5a9b3a:       pop    %r15
    0.00 :   5a9b3c:       retq
    0.00 :   5a9b3d:       nopl   (%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5a9b40:       movq   $0x0,0x18(%rsp)
    0.00 :   5a9b49:       jmpq   5a982e <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x1fe>
    0.00 :   5a9b4e:       xchg   %ax,%ax
         :            _ForwardIterator __cur = __result;
    0.00 :   5a9b50:       mov    0x18(%rsp),%rbp
    0.00 :   5a9b55:       jmpq   5a9887 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)+0x257>
    0.00 :   5a9b5a:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   5a9b5f:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5a9b64:       mov    %rax,%rbx
    0.00 :   5a9b67:       jmpq   b1199 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0x1b>
    0.00 :   5a9b6c:       jmpq   b11e1 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0x63>
    0.00 :   5a9b71:       mov    %rax,%rbx
    0.00 :   5a9b74:       jmpq   b11af <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0x31>
    0.00 :   5a9b79:       mov    %rax,%r12
    0.00 :   5a9b7c:       jmpq   b1200 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0x82>
    0.00 :   5a9b81:       mov    %rax,%rbx
    0.00 :   5a9b84:       jmpq   b1249 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0xcb>
    0.00 :   5a9b89:       mov    %rax,%rbx
    0.00 :   5a9b8c:       jmpq   b126a <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0xec>
    0.00 :   5a9b91:       mov    %rax,%rbx
    0.00 :   5a9b94:       jmpq   b11c0 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0x42>
    0.00 :   5a9b99:       mov    %rax,%rbx
    0.00 :   5a9b9c:       jmpq   b1223 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0xa5>
    0.00 :   5a9ba1:       mov    %rax,%rbx
    0.00 :   5a9ba4:       jmpq   b11ca <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long) [clone .cold.429]+0x4c>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000823a40 <nsync::nsync_mu_lock(nsync::nsync_mu_s_*)>:
         :            _ZN5nsync13nsync_mu_lockEPNS_11nsync_mu_s_E():
         :            memory_order __b1 = __m1 & __memory_order_mask;
         :            __glibcxx_assert(__b2 != memory_order_release);
         :            __glibcxx_assert(__b2 != memory_order_acq_rel);
         :            __glibcxx_assert(__b2 <= __b1);
         :
         :            return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
  100.00 :   823a40:       xor    %eax,%eax
    0.00 :   823a42:       mov    $0x1,%edx
    0.00 :   823a47:       lock cmpxchg %edx,(%rdi)
    0.00 :   823a4b:       jne    823a4e <nsync::nsync_mu_lock(nsync::nsync_mu_s_*)+0xe>
    0.00 :   823a4d:       retq
         :            return __atomic_load_n(&_M_i, __m);
    0.00 :   823a4e:       mov    (%rdi),%eax
    0.00 :   823a50:       test   $0xffffff41,%eax
    0.00 :   823a55:       jne    823a63 <nsync::nsync_mu_lock(nsync::nsync_mu_s_*)+0x23>
    0.00 :   823a57:       lea    0x1(%rax),%edx
    0.00 :   823a5a:       and    $0xffffffdf,%edx
         :            return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
    0.00 :   823a5d:       lock cmpxchg %edx,(%rdi)
    0.00 :   823a61:       je     823a4d <nsync::nsync_mu_lock(nsync::nsync_mu_s_*)+0xd>
    0.00 :   823a63:       push   %rbp
    0.00 :   823a64:       mov    %rdi,%rbp
    0.00 :   823a67:       push   %rbx
    0.00 :   823a68:       push   %rax
    0.00 :   823a69:       callq  824810 <nsync::nsync_waiter_new_()>
    0.00 :   823a6e:       lea    0x405613(%rip),%rdx        # c29088 <nsync::nsync_writer_type_>
    0.00 :   823a75:       mov    %rbp,%rdi
    0.00 :   823a78:       mov    %rax,%rbx
    0.00 :   823a7b:       mov    %rax,%rsi
    0.00 :   823a7e:       mov    (%rdx),%rcx
    0.00 :   823a81:       xor    %edx,%edx
    0.00 :   823a83:       callq  8238a0 <nsync::nsync_mu_lock_slow_(nsync::nsync_mu_s_*, nsync::waiter*, unsigned int, nsync::lock_type_s*)>
    0.00 :   823a88:       pop    %rdx
    0.00 :   823a89:       mov    %rbx,%rdi
    0.00 :   823a8c:       pop    %rbx
    0.00 :   823a8d:       pop    %rbp
    0.00 :   823a8e:       jmpq   8249b0 <nsync::nsync_waiter_free_(nsync::waiter*)>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000002452e0 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)>:
         :            _ZNSt6vectorIlSaIlEEaSERKS1_():
         :            return __first;
         :            }
         :
         :            template<typename _Tp, typename _Alloc>
         :            vector<_Tp, _Alloc>&
         :            vector<_Tp, _Alloc>::
   80.39 :   2452e0:       push   %r15
    0.00 :   2452e2:       push   %r14
    0.00 :   2452e4:       push   %r13
    0.00 :   2452e6:       push   %r12
    0.00 :   2452e8:       push   %rbp
    0.00 :   2452e9:       push   %rbx
    0.00 :   2452ea:       mov    %rdi,%rbx
    0.00 :   2452ed:       sub    $0x8,%rsp
         :            operator=(const vector<_Tp, _Alloc>& __x)
         :            {
         :            if (&__x != this)
    0.00 :   2452f1:       cmp    %rdi,%rsi
    0.00 :   2452f4:       je     245358 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x78>
         :            }
         :            std::__alloc_on_copy(_M_get_Tp_allocator(),
         :            __x._M_get_Tp_allocator());
         :            }
         :            #endif
         :            const size_type __xlen = __x.size();
    0.00 :   2452f6:       mov    0x8(%rsi),%r15
    0.00 :   2452fa:       mov    (%rsi),%r13
         :            #endif
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
    0.00 :   2452fd:       mov    %rsi,%r12
         :            if (__xlen > capacity())
    0.00 :   245300:       mov    (%rdi),%r14
         :            *  hold before needing to allocate more memory.
         :            */
         :            size_type
         :            capacity() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start); }
    0.00 :   245303:       mov    0x10(%rdi),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   245307:       mov    %r15,%rbp
    0.00 :   24530a:       sub    %r13,%rbp
         :            - this->_M_impl._M_start); }
    0.00 :   24530d:       sub    %r14,%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   245310:       mov    %rbp,%rax
         :            - this->_M_impl._M_start); }
    0.00 :   245313:       sar    $0x3,%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   245317:       sar    $0x3,%rax
    0.00 :   24531b:       cmp    %rcx,%rax
    0.00 :   24531e:       ja     245370 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x90>
         :            this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start);
         :            this->_M_impl._M_start = __tmp;
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
         :            }
         :            else if (size() >= __xlen)
    0.00 :   245320:       mov    0x8(%rdi),%rdi
    0.00 :   245324:       mov    %rdi,%rdx
    0.00 :   245327:       sub    %r14,%rdx
    0.00 :   24532a:       mov    %rdx,%rcx
    0.00 :   24532d:       sar    $0x3,%rcx
    0.00 :   245331:       cmp    %rcx,%rax
    0.00 :   245334:       ja     2453c8 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0xe8>
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   24533a:       cmp    %r15,%r13
    0.00 :   24533d:       je     2453f8 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x118>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   245343:       mov    %rbp,%rdx
    0.00 :   245346:       mov    %r13,%rsi
    0.00 :   245349:       mov    %r14,%rdi
    0.00 :   24534c:       callq  53aa0 <memmove@plt>
    0.00 :   245351:       add    (%rbx),%rbp
         :            std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
         :            __x._M_impl._M_finish,
         :            this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            }
         :            this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
    0.00 :   245354:       mov    %rbp,0x8(%rbx)
         :            }
         :            return *this;
         :            }
    0.00 :   245358:       add    $0x8,%rsp
    0.00 :   24535c:       mov    %rbx,%rax
    0.00 :   24535f:       pop    %rbx
    0.00 :   245360:       pop    %rbp
    0.00 :   245361:       pop    %r12
    0.00 :   245363:       pop    %r13
    0.00 :   245365:       pop    %r14
    0.00 :   245367:       pop    %r15
    0.00 :   245369:       retq
    0.00 :   24536a:       nopw   0x0(%rax,%rax,1)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   245370:       xor    %r12d,%r12d
    0.00 :   245373:       test   %rax,%rax
    0.00 :   245376:       je     245399 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0xb9>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   245378:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   245382:       cmp    %rdx,%rax
    0.00 :   245385:       ja     245418 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x138>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   24538b:       mov    %rbp,%rdi
    0.00 :   24538e:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   245393:       mov    (%rbx),%r14
    0.00 :   245396:       mov    %rax,%r12
         :            if (_Num)
    0.00 :   245399:       cmp    %r15,%r13
    0.00 :   24539c:       je     2453ac <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0xcc>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   24539e:       mov    %rbp,%rdx
    0.00 :   2453a1:       mov    %r13,%rsi
    0.00 :   2453a4:       mov    %r12,%rdi
    0.00 :   2453a7:       callq  53aa0 <memmove@plt>
         :            if (__p)
    0.00 :   2453ac:       test   %r14,%r14
    0.00 :   2453af:       je     2453b9 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0xd9>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2453b1:       mov    %r14,%rdi
    0.00 :   2453b4:       callq  53300 <operator delete(void*)@plt>
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
    0.00 :   2453b9:       add    %r12,%rbp
         :            this->_M_impl._M_start = __tmp;
    0.00 :   2453bc:       mov    %r12,(%rbx)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
    0.00 :   2453bf:       mov    %rbp,0x10(%rbx)
    0.00 :   2453c3:       jmp    2453fb <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x11b>
    0.00 :   2453c5:       nopl   (%rax)
         :            if (_Num)
    0.00 :   2453c8:       test   %rdx,%rdx
    0.00 :   2453cb:       je     2453ee <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x10e>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   2453cd:       mov    %r14,%rdi
    0.00 :   2453d0:       mov    %r13,%rsi
    0.00 :   2453d3:       callq  53aa0 <memmove@plt>
    0.00 :   2453d8:       mov    0x8(%rbx),%rdi
    0.00 :   2453dc:       mov    (%rbx),%r14
    0.00 :   2453df:       mov    0x8(%r12),%r15
    0.00 :   2453e4:       mov    (%r12),%r13
    0.00 :   2453e8:       mov    %rdi,%rdx
    0.00 :   2453eb:       sub    %r14,%rdx
         :            std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
    0.00 :   2453ee:       lea    0x0(%r13,%rdx,1),%rsi
         :            if (_Num)
    0.00 :   2453f3:       cmp    %r15,%rsi
    0.00 :   2453f6:       jne    245408 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x128>
    0.00 :   2453f8:       add    %r14,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
    0.00 :   2453fb:       mov    %rbp,0x8(%rbx)
   19.61 :   2453ff:       jmpq   245358 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x78>
    0.00 :   245404:       nopl   0x0(%rax)
         :            const ptrdiff_t _Num = __last - __first;
    0.00 :   245408:       mov    %r15,%rdx
    0.00 :   24540b:       sub    %rsi,%rdx
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   24540e:       callq  53aa0 <memmove@plt>
    0.00 :   245413:       add    (%rbx),%rbp
    0.00 :   245416:       jmp    2453fb <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)+0x11b>
         :            std::__throw_bad_alloc();
    0.00 :   245418:       callq  52ba0 <std::__throw_bad_alloc()@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005adde0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>:
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5adde0:       push   %rbp
    0.00 :   5adde1:       mov    %ecx,%eax
    0.00 :   5adde3:       mov    %rsp,%rbp
    0.00 :   5adde6:       push   %r15
    0.00 :   5adde8:       push   %r14
    0.00 :   5addea:       push   %r13
    0.00 :   5addec:       push   %r12
    0.00 :   5addee:       push   %rbx
    0.00 :   5addef:       sub    $0x318,%rsp
    0.00 :   5addf6:       mov    %rdi,-0x2e8(%rbp)
    0.00 :   5addfd:       mov    0x10(%rbp),%r15
    0.00 :   5ade01:       mov    %rdx,-0x2f0(%rbp)
    0.00 :   5ade08:       mov    0x18(%rbp),%r12d
    0.00 :   5ade0c:       mov    %ecx,-0x2fc(%rbp)
    0.00 :   5ade12:       mov    %r9,-0x2f8(%rbp)
    0.00 :   5ade19:       mov    %fs:0x28,%rcx
    0.00 :   5ade22:       mov    %rcx,-0x38(%rbp)
    0.00 :   5ade26:       xor    %ecx,%ecx
    0.00 :   5ade28:       cmp    $0xffffffff,%eax
    0.00 :   5ade2b:       je     5ae788 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9a8>
    0.00 :   5ade31:       mov    %r15,%rdi
    0.00 :   5ade34:       mov    %rsi,%rbx
    0.00 :   5ade37:       mov    %r8,%r13
    0.00 :   5ade3a:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5ade3f:       mov    %rax,%r14
    0.00 :   5ade42:       test   %rax,%rax
    0.00 :   5ade45:       js     5ae7d0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9f0>
    0.00 :   5ade4b:       mov    0x0(%r13),%rax
    0.00 :   5ade4f:       mov    %r13,%rdi
    0.00 :   5ade52:       callq  *0x18(%rax)
    0.00 :   5ade55:       lea    -0x2d8(%rbp),%rcx
    0.00 :   5ade5c:       mov    $0x100,%edx
    0.00 :   5ade61:       mov    %r14,%rdi
    0.00 :   5ade64:       mov    %rax,%rsi
    0.00 :   5ade67:       callq  58cef0 <onnxruntime::IAllocator::CalcMemSizeForArrayWithAlignment(unsigned long, unsigned long, unsigned long, unsigned long*)>
    0.00 :   5ade6c:       test   %al,%al
    0.00 :   5ade6e:       je     5ae7f0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xa10>
    0.00 :   5ade74:       test   %r12b,%r12b
    0.00 :   5ade77:       je     5ae810 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xa30>
    0.00 :   5ade7d:       mov    -0x2f0(%rbp),%rax
    0.00 :   5ade84:       mov    0x18(%rax),%r14
    0.00 :   5ade88:       test   %r14,%r14
    0.00 :   5ade8b:       jne    5aebe6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe06>
    0.00 :   5ade91:       mov    -0x2f8(%rbp),%rdx
    0.00 :   5ade98:       lea    -0x2d0(%rbp),%rdi
    0.00 :   5ade9f:       mov    %rbx,%rsi
    0.00 :   5adea2:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
         :            { }
         :
         :            __shared_ptr(__shared_ptr&& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5adea7:       mov    -0x2d0(%rbp),%rax
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5adeae:       mov    -0x2c8(%rbp),%rcx
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5adeb5:       mov    %rax,-0x310(%rbp)
    0.00 :   5adebc:       mov    (%rax),%rax
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5adebf:       mov    %rcx,-0x308(%rbp)
    0.00 :   5adec6:       mov    0x20(%rax),%rax
    0.00 :   5adeca:       cmp    0x679c2f(%rip),%rax        # c27b00 <.got+0x40>
    0.00 :   5aded1:       jne    5ae990 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xbb0>
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5aded7:       movq   $0x0,-0x2b0(%rbp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5adee2:       movq   $0x0,-0x2a8(%rbp)
         :            class __shared_ptr
    0.00 :   5adeed:       mov    -0x2f0(%rbp),%rax
         :            if (__tmp != _M_pi)
    0.00 :   5adef4:       mov    0x20(%rax),%rdi
         :            class __shared_ptr
    0.00 :   5adef8:       mov    %r14,0x18(%rax)
         :            if (__tmp != _M_pi)
    0.00 :   5adefc:       mov    %rax,%r14
    0.00 :   5adeff:       test   %rdi,%rdi
    0.00 :   5adf02:       je     5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
         :            _M_pi->_M_release();
    0.00 :   5adf04:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            _M_pi = __tmp;
    0.00 :   5adf09:       movq   $0x0,0x20(%r14)
         :            ~__shared_count() noexcept
    0.00 :   5adf11:       mov    -0x2a8(%rbp),%r14
         :            if (_M_pi != nullptr)
    0.00 :   5adf18:       test   %r14,%r14
    0.00 :   5adf1b:       je     5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5adf1d:       mov    0x679fe4(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5adf24:       test   %r12,%r12
    0.00 :   5adf27:       je     5ae960 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb80>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5adf2d:       mov    $0xffffffff,%eax
    0.00 :   5adf32:       lock xadd %eax,0x8(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5adf38:       cmp    $0x1,%eax
    0.00 :   5adf3b:       je     5aead8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xcf8>
    0.00 :   5adf41:       mov    -0x2fc(%rbp),%esi
    0.00 :   5adf47:       mov    %rbx,%rdi
    0.00 :   5adf4a:       callq  5a9500 <onnxruntime::ExecutionFrame::GetAllocationPlan(int)>
    0.00 :   5adf4f:       mov    0x88(%rbx),%rcx
    0.00 :   5adf56:       test   %rcx,%rcx
    0.00 :   5adf59:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5adf5f:       cmpl   $0x4,(%rax)
    0.00 :   5adf62:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5adf68:       mov    (%rcx),%r12
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5adf6b:       mov    0x8(%rcx),%rdx
    0.00 :   5adf6f:       movabs $0xaaaaaaaaaaaaaaab,%rax
    0.00 :   5adf79:       sub    %r12,%rdx
    0.00 :   5adf7c:       sar    $0x3,%rdx
    0.00 :   5adf80:       imul   %rax,%rdx
    0.00 :   5adf84:       test   %rdx,%rdx
    0.00 :   5adf87:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :            _ZeqRK13OrtMemoryInfoS1_():
    0.00 :   5adf8d:       mov    -0x2f8(%rbp),%rax
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5adf94:       mov    %r15,%r9
    0.00 :   5adf97:       xor    %r14d,%r14d
    0.00 :   5adf9a:       mov    %r13,%r15
    0.00 :   5adf9d:       mov    -0x2f0(%rbp),%r13
    0.00 :   5adfa4:       mov    %rbx,-0x2f0(%rbp)
         :            _ZeqRK13OrtMemoryInfoS1_():
    0.00 :   5adfab:       mov    0xc(%rax),%r8d
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5adfaf:       mov    %rax,%rbx
    0.00 :   5adfb2:       jmp    5adfc9 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1e9>
    0.00 :   5adfb4:       nopl   0x0(%rax)
    0.00 :   5adfb8:       add    $0x1,%r14
         :            size() const _GLIBCXX_NOEXCEPT
    0.00 :   5adfbc:       add    $0x18,%r12
    0.00 :   5adfc0:       cmp    %rdx,%r14
    0.00 :   5adfc3:       je     5ae970 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb90>
         :            _ZeqRK13OrtMemoryInfoS1_():
    0.00 :   5adfc9:       cmp    %r8d,0xc(%r12)
    0.00 :   5adfce:       jne    5adfb8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1d8>
    0.00 :   5adfd0:       mov    0x10(%rbx),%eax
    0.00 :   5adfd3:       cmp    %eax,0x10(%r12)
    0.00 :   5adfd8:       jne    5adfb8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1d8>
    0.00 :   5adfda:       mov    0x8(%rbx),%eax
    0.00 :   5adfdd:       cmp    %eax,0x8(%r12)
    0.00 :   5adfe2:       jne    5adfb8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1d8>
    0.00 :   5adfe4:       mov    (%rbx),%rsi
    0.00 :   5adfe7:       mov    (%r12),%rdi
    0.00 :   5adfeb:       mov    %rdx,-0x330(%rbp)
    0.00 :   5adff2:       mov    %r9,-0x328(%rbp)
    0.00 :   5adff9:       mov    %r8d,-0x320(%rbp)
    0.00 :   5ae000:       mov    %rcx,-0x318(%rbp)
    0.00 :   5ae007:       callq  537b0 <strcmp@plt>
    0.00 :   5ae00c:       mov    -0x318(%rbp),%rcx
    0.00 :   5ae013:       mov    -0x320(%rbp),%r8d
    0.00 :   5ae01a:       test   %eax,%eax
    0.00 :   5ae01c:       mov    -0x328(%rbp),%r9
    0.00 :   5ae023:       mov    -0x330(%rbp),%rdx
    0.00 :   5ae02a:       jne    5adfb8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1d8>
    0.00 :   5ae02c:       mov    -0x2f0(%rbp),%rbx
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5ae033:       shl    $0x6,%r14
    0.00 :   5ae037:       mov    %r13,-0x2f0(%rbp)
    0.00 :   5ae03e:       mov    %r15,%r13
    0.00 :   5ae041:       mov    %r9,%r15
    0.00 :   5ae044:       add    0x18(%rcx),%r14
    0.00 :   5ae048:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :
         :            /// Explicit specialization for short.
         :            _Cxx_hashtable_define_trivial_hash(short)
         :
         :            /// Explicit specialization for int.
         :            _Cxx_hashtable_define_trivial_hash(int)
    0.00 :   5ae04e:       movslq -0x2fc(%rbp),%rax
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            find(const key_type& __k) const
         :            -> const_iterator
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   5ae055:       mov    0x8(%r14),%rdi
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   5ae059:       xor    %edx,%edx
    0.00 :   5ae05b:       mov    %rax,%r10
    0.00 :   5ae05e:       div    %rdi
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __n, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__n];
    0.00 :   5ae061:       mov    (%r14),%rax
    0.00 :   5ae064:       mov    (%rax,%rdx,8),%r9
    0.00 :   5ae068:       mov    %rdx,%r8
         :            if (!__prev_p)
    0.00 :   5ae06b:       test   %r9,%r9
    0.00 :   5ae06e:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   5ae074:       mov    (%r9),%rcx
    0.00 :   5ae077:       mov    -0x2f0(%rbp),%rax
    0.00 :   5ae07e:       mov    0x8(%rcx),%esi
    0.00 :   5ae081:       mov    %rax,%r11
    0.00 :   5ae084:       jmp    5ae0b6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2d6>
    0.00 :   5ae086:       nopw   %cs:0x0(%rax,%rax,1)
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   5ae090:       mov    (%rcx),%rax
    0.00 :   5ae093:       test   %rax,%rax
    0.00 :   5ae096:       je     5aeb48 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd68>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   5ae09c:       mov    0x8(%rax),%esi
         :            { return __num % __den; }
    0.00 :   5ae09f:       mov    %rcx,%r9
    0.00 :   5ae0a2:       xor    %edx,%edx
    0.00 :   5ae0a4:       mov    %rax,%rcx
    0.00 :   5ae0a7:       movslq %esi,%rax
    0.00 :   5ae0aa:       div    %rdi
    0.00 :   5ae0ad:       cmp    %rdx,%r8
    0.00 :   5ae0b0:       jne    5aeb48 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd68>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   5ae0b6:       cmp    %esi,%r10d
    0.00 :   5ae0b9:       jne    5ae090 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2b0>
         :            return static_cast<__node_type*>(__before_n->_M_nxt);
    0.00 :   5ae0bb:       mov    (%r9),%rax
    0.00 :   5ae0be:       mov    %r11,-0x2f0(%rbp)
    0.00 :   5ae0c5:       mov    %rax,-0x328(%rbp)
         :            return __p ? const_iterator(__p) : end();
    0.00 :   5ae0cc:       test   %rax,%rax
    0.00 :   5ae0cf:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :            *  past-the-end ( @c end() ) iterator.
         :            */
         :
         :            iterator
         :            find(const key_type& __x)
         :            { return _M_t.find(__x); }
    0.00 :   5ae0d5:       mov    -0x2f8(%rbp),%rsi
    0.00 :   5ae0dc:       lea    0x98(%rbx),%rdi
    0.00 :   5ae0e3:       callq  5a8f60 <std::_Rb_tree<OrtMemoryInfo, std::pair<OrtMemoryInfo const, std::unique_ptr<void, onnxruntime::BufferDeleter> >, std::_Select1st<std::pair<OrtMemoryInfo const, std::unique_ptr<void, onnxruntime::BufferDeleter> > >, std::less<OrtMemoryInfo>, std::allocator<std::pair<OrtMemoryInfo const, std::unique_ptr<void, onnxruntime::BufferDeleter> > > >::find(OrtMemoryInfo const&)>
         :            begin() const _GLIBCXX_NOEXCEPT
         :            { return const_iterator(this->_M_impl._M_header._M_left); }
         :
         :            iterator
         :            end() _GLIBCXX_NOEXCEPT
         :            { return iterator(&this->_M_impl._M_header); }
    0.00 :   5ae0e8:       lea    0xa0(%rbx),%rdx
    0.00 :   5ae0ef:       cmp    %rdx,%rax
    0.00 :   5ae0f2:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5ae0f8:       mov    -0x328(%rbp),%rsi
    0.00 :   5ae0ff:       mov    -0x2d8(%rbp),%rcx
    0.00 :   5ae106:       cmp    %rcx,0x18(%rsi)
    0.00 :   5ae10a:       je     5aeb78 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd98>
    0.00 :   5ae110:       mov    0x48(%rbx),%rax
    0.00 :   5ae114:       mov    0x210(%rax),%rax
    0.00 :   5ae11b:       mov    0x28(%rax),%edx
    0.00 :   5ae11e:       test   %edx,%edx
    0.00 :   5ae120:       jg     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae126:       lea    -0x290(%rbp),%rcx
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae12d:       lea    0x2e1943(%rip),%rdx        # 88fa77 <std::piecewise_construct+0x19a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae134:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae138:       lea    -0x3f(%rdx),%rsi
    0.00 :   5ae13c:       mov    %rcx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae13f:       mov    %rcx,%r14
    0.00 :   5ae142:       mov    %rcx,-0x330(%rbp)
    0.00 :   5ae149:       mov    %rax,-0x290(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae150:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ae155:       lea    0x2e22ec(%rip),%rdx        # 890448 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)::__FUNCTION__+0x28>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae15c:       lea    0x38(%r14),%rax
    0.00 :   5ae160:       movl   $0x183,-0x270(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae16a:       lea    0x28(%r14),%rdi
    0.00 :   5ae16e:       lea    -0x28(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae172:       mov    %rax,-0x268(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae179:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ae17e:       mov    0x48(%rbx),%rdx
    0.00 :   5ae182:       lea    0x67ab1f(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae189:       lea    -0x230(%rbp),%r14
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ae190:       movq   $0x0,-0x248(%rbp)
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae19b:       mov    -0x290(%rbp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae1a2:       lea    0x20(%r14),%rdi
    0.00 :   5ae1a6:       movq   $0x0,-0x240(%rbp)
    0.00 :   5ae1b1:       mov    0x210(%rdx),%rdx
    0.00 :   5ae1b8:       mov    (%rax),%rax
    0.00 :   5ae1bb:       movq   $0x0,-0x238(%rbp)
    0.00 :   5ae1c6:       movl   $0x0,-0x228(%rbp)
    0.00 :   5ae1d0:       mov    %rdx,-0x230(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae1d7:       mov    -0x288(%rbp),%rdx
    0.00 :   5ae1de:       mov    %rax,-0x220(%rbp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae1e5:       lea    0x30(%r14),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae1e9:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae1ec:       mov    %rax,-0x210(%rbp)
    0.00 :   5ae1f3:       movl   $0x0,-0x218(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae1fd:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ae202:       mov    -0x270(%rbp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae208:       mov    -0x268(%rbp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae20f:       lea    0x48(%r14),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae213:       mov    -0x260(%rbp),%rdx
    0.00 :   5ae21a:       mov    %eax,-0x1f0(%rbp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae220:       lea    0x58(%r14),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae224:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae227:       mov    %rax,-0x1e8(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae22e:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ae233:       mov    -0x240(%rbp),%rax
    0.00 :   5ae23a:       mov    -0x248(%rbp),%rdx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ae241:       movq   $0x0,-0x1c8(%rbp)
    0.00 :   5ae24c:       movq   $0x0,-0x1c0(%rbp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ae257:       mov    %rax,%r12
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ae25a:       mov    %rax,-0x320(%rbp)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ae261:       movq   $0x0,-0x1b8(%rbp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ae26c:       sub    %rdx,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5ae26f:       mov    %r12,%rax
    0.00 :   5ae272:       sar    $0x5,%rax
    0.00 :   5ae276:       je     5aebbe <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdde>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   5ae27c:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5ae286:       cmp    %rdx,%rax
    0.00 :   5ae289:       ja     5aec8a <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xeaa>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5ae28f:       mov    %r12,%rdi
    0.00 :   5ae292:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5ae297:       mov    %rax,-0x338(%rbp)
    0.00 :   5ae29e:       mov    -0x240(%rbp),%rax
    0.00 :   5ae2a5:       mov    -0x248(%rbp),%rdx
    0.00 :   5ae2ac:       mov    %rax,-0x320(%rbp)
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ae2b3:       mov    -0x338(%rbp),%rsi
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ae2ba:       lea    (%rsi,%r12,1),%rax
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ae2be:       mov    %rsi,-0x1c8(%rbp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5ae2c5:       mov    %rsi,-0x1c0(%rbp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ae2cc:       mov    %rax,-0x1b8(%rbp)
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5ae2d3:       cmp    %rdx,-0x320(%rbp)
    0.00 :   5ae2da:       je     5aebce <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdee>
         :            _ForwardIterator __cur = __result;
    0.00 :   5ae2e0:       mov    %rsi,-0x318(%rbp)
    0.00 :   5ae2e7:       mov    %rdx,%r12
    0.00 :   5ae2ea:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae2f0:       mov    -0x318(%rbp),%rcx
    0.00 :   5ae2f7:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae2fb:       mov    %rcx,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae2fe:       mov    %rax,(%rcx)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae301:       mov    (%r12),%rsi
    0.00 :   5ae305:       mov    0x8(%r12),%rdx
    0.00 :   5ae30a:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae30d:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5ae312:       addq   $0x20,-0x318(%rbp)
    0.00 :   5ae31a:       add    $0x20,%r12
    0.00 :   5ae31e:       cmp    %r12,-0x320(%rbp)
    0.00 :   5ae325:       jne    5ae2f0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x510>
         :            this->_M_impl._M_finish =
    0.00 :   5ae327:       mov    -0x318(%rbp),%rax
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5ae32e:       lea    0xf0(%r14),%rdi
    0.00 :   5ae335:       mov    %rax,-0x1c0(%rbp)
    0.00 :   5ae33c:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5ae341:       mov    0x6797e0(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5ae348:       xor    %esi,%esi
    0.00 :   5ae34a:       movq   $0x0,-0x68(%rbp)
    0.00 :   5ae352:       movq   $0x0,-0x58(%rbp)
    0.00 :   5ae35a:       add    $0x10,%rax
    0.00 :   5ae35e:       movq   $0x0,-0x50(%rbp)
    0.00 :   5ae366:       mov    %rax,-0x140(%rbp)
    0.00 :   5ae36d:       xor    %eax,%eax
    0.00 :   5ae36f:       mov    %ax,-0x60(%rbp)
    0.00 :   5ae373:       mov    0x679a26(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5ae37a:       movq   $0x0,-0x48(%rbp)
    0.00 :   5ae382:       mov    0x8(%rax),%r12
    0.00 :   5ae386:       mov    0x10(%rax),%rax
    0.00 :   5ae38a:       movq   $0x0,-0x40(%rbp)
    0.00 :   5ae392:       mov    -0x18(%r12),%rdx
    0.00 :   5ae397:       mov    %r12,-0x1b0(%rbp)
    0.00 :   5ae39e:       mov    %rax,-0x318(%rbp)
    0.00 :   5ae3a5:       lea    0x80(%r14,%rdx,1),%rdi
    0.00 :   5ae3ad:       mov    %rax,(%rdi)
    0.00 :   5ae3b0:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5ae3b5:       mov    0x6799a4(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5ae3bc:       lea    0xc0(%r14),%rdi
    0.00 :   5ae3c3:       movq   $0x0,-0x1a0(%rbp)
    0.00 :   5ae3ce:       movq   $0x0,-0x198(%rbp)
    0.00 :   5ae3d9:       movq   $0x0,-0x190(%rbp)
    0.00 :   5ae3e4:       lea    0x18(%rax),%rdx
    0.00 :   5ae3e8:       add    $0x40,%rax
    0.00 :   5ae3ec:       mov    %rax,-0x140(%rbp)
    0.00 :   5ae3f3:       mov    0x679866(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5ae3fa:       mov    %rdx,-0x1b0(%rbp)
    0.00 :   5ae401:       movq   $0x0,-0x188(%rbp)
    0.00 :   5ae40c:       add    $0x10,%rax
    0.00 :   5ae410:       mov    %rax,-0x1a8(%rbp)
    0.00 :   5ae417:       movq   $0x0,-0x180(%rbp)
    0.00 :   5ae422:       movq   $0x0,-0x178(%rbp)
    0.00 :   5ae42d:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ae432:       mov    0x679b9f(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ae439:       lea    0x88(%r14),%rsi
    0.00 :   5ae440:       lea    0xf0(%r14),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ae447:       movl   $0x10,-0x168(%rbp)
    0.00 :   5ae451:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5ae455:       movb   $0x0,-0x150(%rbp)
    0.00 :   5ae45c:       mov    %rax,-0x1a8(%rbp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae463:       lea    0xe0(%r14),%rax
    0.00 :   5ae46a:       mov    %rax,-0x160(%rbp)
         :            { _M_string_length = __length; }
    0.00 :   5ae471:       movq   $0x0,-0x158(%rbp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ae47c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5ae481:       lea    0x80(%r14),%rdi
    0.00 :   5ae488:       mov    $0x1a,%edx
    0.00 :   5ae48d:       lea    0x2e19d4(%rip),%rsi        # 88fe68 <std::piecewise_construct+0x58b>
    0.00 :   5ae494:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ae499:       mov    -0x2fc(%rbp),%esi
    0.00 :   5ae49f:       lea    0x80(%r14),%rdi
    0.00 :   5ae4a6:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   5ae4ab:       mov    $0x23,%edx
    0.00 :   5ae4b0:       lea    0x2e1941(%rip),%rsi        # 88fdf8 <std::piecewise_construct+0x51b>
    0.00 :   5ae4b7:       mov    %rax,%rdi
    0.00 :   5ae4ba:       mov    %rax,%r12
    0.00 :   5ae4bd:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   5ae4c2:       mov    -0x328(%rbp),%rax
    0.00 :   5ae4c9:       mov    %r12,%rdi
    0.00 :   5ae4cc:       mov    0x18(%rax),%rsi
    0.00 :   5ae4d0:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5ae4d5:       mov    $0x1b,%edx
    0.00 :   5ae4da:       lea    0x2e19a2(%rip),%rsi        # 88fe83 <std::piecewise_construct+0x5a6>
    0.00 :   5ae4e1:       mov    %rax,%rdi
         :            { return _M_insert(__n); }
    0.00 :   5ae4e4:       mov    %rax,%r12
         :            __ostream_insert(__out, __s,
    0.00 :   5ae4e7:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   5ae4ec:       mov    -0x2d8(%rbp),%rsi
    0.00 :   5ae4f3:       mov    %r12,%rdi
    0.00 :   5ae4f6:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5ae4fb:       mov    $0x2a,%edx
    0.00 :   5ae500:       lea    0x2e1919(%rip),%rsi        # 88fe20 <std::piecewise_construct+0x543>
    0.00 :   5ae507:       mov    %rax,%rdi
    0.00 :   5ae50a:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ae50f:       mov    %r14,%rdi
    0.00 :   5ae512:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   5ae517:       mov    -0x330(%rbp),%rdi
    0.00 :   5ae51e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ae523:       nopl   0x0(%rax,%rax,1)
  100.00 :   5ae528:       cmpq   $0x0,-0x310(%rbp)
    0.00 :   5ae530:       je     5ae840 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xa60>
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5ae536:       mov    -0x310(%rbp),%rax
    0.00 :   5ae53d:       mov    %rax,-0x2b0(%rbp)
         :            : _M_pi(__r._M_pi)
    0.00 :   5ae544:       mov    -0x308(%rbp),%rax
    0.00 :   5ae54b:       mov    %rax,-0x2a8(%rbp)
         :            if (_M_pi != 0)
    0.00 :   5ae552:       test   %rax,%rax
    0.00 :   5ae555:       je     5ae56a <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x78a>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5ae557:       cmpq   $0x0,0x6799a9(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ae55f:       je     5ae830 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xa50>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae565:       lock addl $0x1,0x8(%rax)
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   5ae56a:       mov    $0x58,%edi
    0.00 :   5ae56f:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5ae574:       lea    -0x2b0(%rbp),%rcx
    0.00 :   5ae57b:       mov    %r15,%rdx
    0.00 :   5ae57e:       mov    %r13,%rsi
    0.00 :   5ae581:       mov    %rax,%rdi
    0.00 :   5ae584:       mov    %rax,%r14
    0.00 :   5ae587:       callq  5ee4f0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)>
         :            if (_M_pi != nullptr)
    0.00 :   5ae58c:       mov    -0x2a8(%rbp),%r15
    0.00 :   5ae593:       test   %r15,%r15
    0.00 :   5ae596:       je     5ae5bc <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x7dc>
         :            if (__gthread_active_p())
    0.00 :   5ae598:       mov    0x679969(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ae59f:       test   %r12,%r12
    0.00 :   5ae5a2:       je     5ae8d0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xaf0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae5a8:       mov    $0xffffffff,%eax
    0.00 :   5ae5ad:       lock xadd %eax,0x8(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ae5b3:       cmp    $0x1,%eax
    0.00 :   5ae5b6:       je     5ae928 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb48>
    0.00 :   5ae5bc:       callq  59bf30 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::Tensor>()>
    0.00 :   5ae5c1:       mov    %rax,%r15
    0.00 :   5ae5c4:       mov    (%rax),%rax
    0.00 :   5ae5c7:       mov    %r15,%rdi
    0.00 :   5ae5ca:       callq  *0x20(%rax)
    0.00 :   5ae5cd:       mov    $0x20,%edi
    0.00 :   5ae5d2:       mov    %rax,%r12
    0.00 :   5ae5d5:       callq  53340 <operator new(unsigned long)@plt>
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   5ae5da:       mov    -0x2f0(%rbp),%rsi
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5ae5e1:       mov    %r14,0x18(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5ae5e5:       movabs $0x100000001,%rcx
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5ae5ef:       lea    0x6631ba(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5ae5f6:       mov    %rcx,0x8(%rax)
    0.00 :   5ae5fa:       mov    %r14,(%rsi)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5ae5fd:       mov    0x8(%rsi),%r14
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5ae601:       add    $0x10,%rdx
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5ae605:       mov    %r12,0x10(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5ae609:       mov    %rdx,(%rax)
         :            __r._M_pi = _M_pi;
    0.00 :   5ae60c:       mov    %rax,0x8(%rsi)
         :            if (_M_pi != nullptr)
    0.00 :   5ae610:       test   %r14,%r14
    0.00 :   5ae613:       je     5ae639 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x859>
         :            if (__gthread_active_p())
    0.00 :   5ae615:       mov    0x6798ec(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ae61c:       test   %r12,%r12
    0.00 :   5ae61f:       je     5ae8e0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb00>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae625:       mov    $0xffffffff,%eax
    0.00 :   5ae62a:       lock xadd %eax,0x8(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ae630:       cmp    $0x1,%eax
    0.00 :   5ae633:       je     5ae8f0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb10>
    0.00 :   5ae639:       mov    -0x2f0(%rbp),%rax
    0.00 :   5ae640:       mov    %r13,%rdi
    0.00 :   5ae643:       mov    %r15,0x10(%rax)
    0.00 :   5ae647:       mov    0x0(%r13),%rax
    0.00 :   5ae64b:       callq  *0x68(%rax)
    0.00 :   5ae64e:       test   %rax,%rax
    0.00 :   5ae651:       je     5ae659 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x879>
    0.00 :   5ae653:       cmpl   $0x8,0x8(%rax)
    0.00 :   5ae657:       je     5ae66e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x88e>
    0.00 :   5ae659:       mov    -0x2d8(%rbp),%rdx
    0.00 :   5ae660:       mov    -0x2fc(%rbp),%esi
    0.00 :   5ae666:       mov    %rbx,%rdi
    0.00 :   5ae669:       callq  5a9630 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)>
         :            __gthread_mutex_lock():
         :            }
         :
         :            static inline int
         :            __gthread_mutex_lock (__gthread_mutex_t *__mutex)
         :            {
         :            if (__gthread_active_p ())
    0.00 :   5ae66e:       mov    0x679893(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5ae675:       lea    0x170(%rbx),%rax
    0.00 :   5ae67c:       mov    %rax,%r15
         :            __gthread_mutex_lock():
    0.00 :   5ae67f:       test   %r12,%r12
    0.00 :   5ae682:       je     5ae694 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8b4>
         :            return __gthrw_(pthread_mutex_lock) (__mutex);
    0.00 :   5ae684:       mov    %rax,%rdi
    0.00 :   5ae687:       callq  538b0 <pthread_mutex_lock@plt>
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
         :            lock()
         :            {
         :            int __e = __gthread_mutex_lock(&_M_mutex);
         :
         :            // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)
         :            if (__e)
    0.00 :   5ae68c:       test   %eax,%eax
    0.00 :   5ae68e:       jne    5aec83 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xea3>
    0.00 :   5ae694:       mov    -0x2f8(%rbp),%rax
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae69b:       lea    -0x230(%rbp),%r14
         :            // 3076. basic_string CTAD ambiguity
         :            template<typename = _RequireAllocator<_Alloc>>
         :            #endif
         :            basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
         :            : _M_dataplus(_M_local_data(), __a)
         :            { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
    0.00 :   5ae6a2:       mov    $0xffffffffffffffff,%rdx
    0.00 :   5ae6a9:       mov    (%rax),%r13
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae6ac:       lea    0x10(%r14),%rax
    0.00 :   5ae6b0:       mov    %rax,-0x230(%rbp)
         :            { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
    0.00 :   5ae6b7:       test   %r13,%r13
    0.00 :   5ae6ba:       je     5ae6c9 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8e9>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   5ae6bc:       mov    %r13,%rdi
    0.00 :   5ae6bf:       callq  52c60 <strlen@plt>
    0.00 :   5ae6c4:       lea    0x0(%r13,%rax,1),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae6c9:       mov    %r13,%rsi
    0.00 :   5ae6cc:       mov    %r14,%rdi
    0.00 :   5ae6cf:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            operator[](const key_type& __k)
         :            { return _M_h[__k]; }
         :
         :            mapped_type&
         :            operator[](key_type&& __k)
         :            { return _M_h[std::move(__k)]; }
    0.00 :   5ae6d4:       lea    0x138(%rbx),%rdi
    0.00 :   5ae6db:       mov    %r14,%rsi
    0.00 :   5ae6de:       callq  5adcf0 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
    0.00 :   5ae6e3:       mov    -0x2d8(%rbp),%rdx
    0.00 :   5ae6ea:       add    %rdx,(%rax)
         :            if (!_M_is_local())
    0.00 :   5ae6ed:       add    $0x10,%r14
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ae6f1:       mov    -0x230(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ae6f8:       cmp    %r14,%rdi
    0.00 :   5ae6fb:       je     5ae702 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x922>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5ae6fd:       callq  53300 <operator delete(void*)@plt>
         :            __gthread_mutex_unlock():
         :            #endif
         :
         :            static inline int
         :            __gthread_mutex_unlock (__gthread_mutex_t *__mutex)
         :            {
         :            if (__gthread_active_p ())
    0.00 :   5ae702:       test   %r12,%r12
    0.00 :   5ae705:       je     5ae70f <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x92f>
         :            return __gthrw_(pthread_mutex_unlock) (__mutex);
    0.00 :   5ae707:       mov    %r15,%rdi
    0.00 :   5ae70a:       callq  53060 <pthread_mutex_unlock@plt>
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5ae70f:       mov    -0x2e8(%rbp),%rax
    0.00 :   5ae716:       movq   $0x0,(%rax)
         :            if (_M_pi != nullptr)
    0.00 :   5ae71d:       mov    -0x308(%rbp),%rax
    0.00 :   5ae724:       test   %rax,%rax
    0.00 :   5ae727:       je     5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
         :            if (__gthread_active_p())
    0.00 :   5ae729:       mov    0x6797d8(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ae730:       test   %r12,%r12
    0.00 :   5ae733:       je     5ae8b8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xad8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae739:       mov    $0xffffffff,%ebx
    0.00 :   5ae73e:       lock xadd %ebx,0x8(%rax)
    0.00 :   5ae743:       mov    %ebx,%eax
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ae745:       cmp    $0x1,%eax
    0.00 :   5ae748:       jne    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
         :            _M_dispose();
    0.00 :   5ae74a:       mov    -0x308(%rbp),%rbx
    0.00 :   5ae751:       mov    (%rbx),%rax
    0.00 :   5ae754:       mov    %rbx,%rdi
    0.00 :   5ae757:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ae75a:       test   %r12,%r12
    0.00 :   5ae75d:       je     5aea38 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc58>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae763:       mov    $0xffffffff,%eax
    0.00 :   5ae768:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ae76d:       cmp    $0x1,%eax
    0.00 :   5ae770:       jne    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
         :            _M_destroy();
    0.00 :   5ae772:       mov    -0x308(%rbp),%rdi
    0.00 :   5ae779:       mov    (%rdi),%rax
    0.00 :   5ae77c:       callq  *0x18(%rax)
    0.00 :   5ae77f:       jmp    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
    0.00 :   5ae781:       nopl   0x0(%rax)
    0.00 :   5ae788:       lea    0x2e15f9(%rip),%rcx        # 88fd88 <std::piecewise_construct+0x4ab>
    0.00 :   5ae78f:       mov    $0x1,%edx
    0.00 :   5ae794:       mov    $0x2,%esi
    0.00 :   5ae799:       callq  6975f0 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, char const*)>
    0.00 :   5ae79e:       mov    -0x38(%rbp),%rbx
    0.00 :   5ae7a2:       xor    %fs:0x28,%rbx
    0.00 :   5ae7ab:       mov    -0x2e8(%rbp),%rax
    0.00 :   5ae7b2:       jne    5aebe1 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe01>
    0.00 :   5ae7b8:       lea    -0x28(%rbp),%rsp
    0.00 :   5ae7bc:       pop    %rbx
    0.00 :   5ae7bd:       pop    %r12
    0.00 :   5ae7bf:       pop    %r13
    0.00 :   5ae7c1:       pop    %r14
    0.00 :   5ae7c3:       pop    %r15
    0.00 :   5ae7c5:       pop    %rbp
    0.00 :   5ae7c6:       retq
    0.00 :   5ae7c7:       nopw   0x0(%rax,%rax,1)
    0.00 :   5ae7d0:       mov    -0x2e8(%rbp),%rdi
    0.00 :   5ae7d7:       mov    $0x2,%edx
    0.00 :   5ae7dc:       mov    $0x2,%esi
    0.00 :   5ae7e1:       lea    0x2e15e0(%rip),%rcx        # 88fdc8 <std::piecewise_construct+0x4eb>
    0.00 :   5ae7e8:       callq  6975f0 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, char const*)>
    0.00 :   5ae7ed:       jmp    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
    0.00 :   5ae7ef:       nop
    0.00 :   5ae7f0:       mov    -0x2e8(%rbp),%rdi
    0.00 :   5ae7f7:       mov    $0x1,%edx
    0.00 :   5ae7fc:       mov    $0x2,%esi
    0.00 :   5ae801:       lea    0x2e699c(%rip),%rcx        # 8951a4 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xa4>
    0.00 :   5ae808:       callq  6975f0 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, char const*)>
    0.00 :   5ae80d:       jmp    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
    0.00 :   5ae80f:       nop
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5ae810:       movq   $0x0,-0x308(%rbp)
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5ae81b:       movq   $0x0,-0x310(%rbp)
    0.00 :   5ae826:       jmpq   5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
    0.00 :   5ae82b:       nopl   0x0(%rax,%rax,1)
         :            { *__mem += __val; }
    0.00 :   5ae830:       mov    -0x308(%rbp),%rax
    0.00 :   5ae837:       addl   $0x1,0x8(%rax)
    0.00 :   5ae83b:       jmpq   5ae56a <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x78a>
    0.00 :   5ae840:       mov    -0x2f8(%rbp),%rdx
    0.00 :   5ae847:       lea    -0x2c0(%rbp),%rdi
    0.00 :   5ae84e:       mov    %rbx,%rsi
    0.00 :   5ae851:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5ae856:       mov    -0x2c0(%rbp),%rax
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5ae85d:       mov    -0x2b8(%rbp),%r12
         :            {
         :            _M_refcount._M_swap(__r._M_refcount);
         :            __r._M_ptr = 0;
    0.00 :   5ae864:       movq   $0x0,-0x2c0(%rbp)
         :            __r._M_pi = _M_pi;
    0.00 :   5ae86f:       movq   $0x0,-0x2b8(%rbp)
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5ae87a:       mov    %rax,-0x310(%rbp)
         :            if (_M_pi != nullptr)
    0.00 :   5ae881:       mov    -0x308(%rbp),%rax
    0.00 :   5ae888:       test   %rax,%rax
    0.00 :   5ae88b:       je     5ae8a6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xac6>
         :            _M_pi->_M_release();
    0.00 :   5ae88d:       mov    %rax,%rdi
    0.00 :   5ae890:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            if (_M_pi != nullptr)
    0.00 :   5ae895:       mov    -0x2b8(%rbp),%rdi
    0.00 :   5ae89c:       test   %rdi,%rdi
    0.00 :   5ae89f:       je     5ae8a6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xac6>
         :            _M_pi->_M_release();
    0.00 :   5ae8a1:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            __r._M_pi = _M_pi;
    0.00 :   5ae8a6:       mov    %r12,-0x308(%rbp)
    0.00 :   5ae8ad:       jmpq   5ae536 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x756>
    0.00 :   5ae8b2:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ae8b8:       mov    -0x308(%rbp),%rbx
    0.00 :   5ae8bf:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5ae8c2:       lea    -0x1(%rax),%edx
    0.00 :   5ae8c5:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   5ae8c8:       jmpq   5ae745 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x965>
    0.00 :   5ae8cd:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ae8d0:       mov    0x8(%r15),%eax
         :            *__mem += __val;
    0.00 :   5ae8d4:       lea    -0x1(%rax),%edx
    0.00 :   5ae8d7:       mov    %edx,0x8(%r15)
         :            return __result;
    0.00 :   5ae8db:       jmpq   5ae5b3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x7d3>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ae8e0:       mov    0x8(%r14),%eax
         :            *__mem += __val;
    0.00 :   5ae8e4:       lea    -0x1(%rax),%edx
    0.00 :   5ae8e7:       mov    %edx,0x8(%r14)
         :            return __result;
    0.00 :   5ae8eb:       jmpq   5ae630 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x850>
         :            _M_dispose();
    0.00 :   5ae8f0:       mov    (%r14),%rax
    0.00 :   5ae8f3:       mov    %r14,%rdi
    0.00 :   5ae8f6:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ae8f9:       test   %r12,%r12
    0.00 :   5ae8fc:       je     5aea50 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc70>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae902:       mov    $0xffffffff,%eax
    0.00 :   5ae907:       lock xadd %eax,0xc(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ae90d:       cmp    $0x1,%eax
    0.00 :   5ae910:       jne    5ae639 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x859>
         :            _M_destroy();
    0.00 :   5ae916:       mov    (%r14),%rax
    0.00 :   5ae919:       mov    %r14,%rdi
    0.00 :   5ae91c:       callq  *0x18(%rax)
    0.00 :   5ae91f:       jmpq   5ae639 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x859>
    0.00 :   5ae924:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5ae928:       mov    (%r15),%rax
    0.00 :   5ae92b:       mov    %r15,%rdi
    0.00 :   5ae92e:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ae931:       test   %r12,%r12
    0.00 :   5ae934:       je     5aea60 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc80>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae93a:       mov    $0xffffffff,%eax
    0.00 :   5ae93f:       lock xadd %eax,0xc(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ae945:       cmp    $0x1,%eax
    0.00 :   5ae948:       jne    5ae5bc <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x7dc>
         :            _M_destroy();
    0.00 :   5ae94e:       mov    (%r15),%rax
    0.00 :   5ae951:       mov    %r15,%rdi
    0.00 :   5ae954:       callq  *0x18(%rax)
    0.00 :   5ae957:       jmpq   5ae5bc <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x7dc>
    0.00 :   5ae95c:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ae960:       mov    0x8(%r14),%eax
         :            *__mem += __val;
    0.00 :   5ae964:       lea    -0x1(%rax),%edx
    0.00 :   5ae967:       mov    %edx,0x8(%r14)
         :            return __result;
    0.00 :   5ae96b:       jmpq   5adf38 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x158>
    0.00 :   5ae970:       mov    -0x2f0(%rbp),%rbx
    0.00 :   5ae977:       mov    %r13,-0x2f0(%rbp)
    0.00 :   5ae97e:       mov    %r15,%r13
    0.00 :   5ae981:       mov    %r9,%r15
    0.00 :   5ae984:       jmpq   5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5ae989:       nopl   0x0(%rax)
    0.00 :   5ae990:       lea    -0x2b0(%rbp),%rdi
    0.00 :   5ae997:       mov    0x48(%rbx),%rdx
    0.00 :   5ae99b:       mov    -0x310(%rbp),%rsi
    0.00 :   5ae9a2:       callq  *%rax
    0.00 :   5ae9a4:       mov    -0x2a8(%rbp),%rax
         :            __shared_count(const __shared_count& __r) noexcept
    0.00 :   5ae9ab:       mov    -0x2b0(%rbp),%r14
         :            if (_M_pi != 0)
    0.00 :   5ae9b2:       test   %rax,%rax
    0.00 :   5ae9b5:       je     5adeed <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10d>
         :            if (__gthread_active_p())
    0.00 :   5ae9bb:       mov    0x679546(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   5ae9c2:       lea    0x8(%rax),%rdx
    0.00 :   5ae9c6:       test   %r12,%r12
    0.00 :   5ae9c9:       je     5aea70 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc90>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae9cf:       lock addl $0x1,(%rdx)
         :            class __shared_ptr
    0.00 :   5ae9d3:       mov    -0x2f0(%rbp),%rcx
    0.00 :   5ae9da:       mov    %r14,0x18(%rcx)
         :            if (__tmp != _M_pi)
    0.00 :   5ae9de:       mov    0x20(%rcx),%r14
    0.00 :   5ae9e2:       cmp    %r14,%rax
    0.00 :   5ae9e5:       je     5aea16 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc36>
         :            if (__gthread_active_p())
    0.00 :   5ae9e7:       test   %r12,%r12
    0.00 :   5ae9ea:       je     5aea90 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xcb0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae9f0:       lock addl $0x1,(%rdx)
    0.00 :   5ae9f4:       mov    -0x2f0(%rbp),%rsi
    0.00 :   5ae9fb:       mov    0x20(%rsi),%r14
         :            if (_M_pi != 0)
    0.00 :   5ae9ff:       test   %r14,%r14
    0.00 :   5aea02:       jne    5aeb10 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd30>
         :            _M_pi = __tmp;
    0.00 :   5aea08:       mov    -0x2f0(%rbp),%rsi
    0.00 :   5aea0f:       mov    %rax,0x20(%rsi)
    0.00 :   5aea13:       mov    %rax,%r14
         :            if (__gthread_active_p())
    0.00 :   5aea16:       test   %r12,%r12
    0.00 :   5aea19:       je     5aea80 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xca0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aea1b:       mov    $0xffffffff,%eax
    0.00 :   5aea20:       lock xadd %eax,(%rdx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5aea24:       cmp    $0x1,%eax
    0.00 :   5aea27:       je     5aeaa0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xcc0>
    0.00 :   5aea29:       mov    -0x2a8(%rbp),%r14
    0.00 :   5aea30:       jmpq   5adf18 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x138>
    0.00 :   5aea35:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aea38:       mov    -0x308(%rbp),%rbx
    0.00 :   5aea3f:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5aea42:       lea    -0x1(%rax),%edx
    0.00 :   5aea45:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5aea48:       jmpq   5ae76d <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x98d>
    0.00 :   5aea4d:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aea50:       mov    0xc(%r14),%eax
         :            *__mem += __val;
    0.00 :   5aea54:       lea    -0x1(%rax),%edx
    0.00 :   5aea57:       mov    %edx,0xc(%r14)
         :            return __result;
    0.00 :   5aea5b:       jmpq   5ae90d <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb2d>
         :            _Atomic_word __result = *__mem;
    0.00 :   5aea60:       mov    0xc(%r15),%eax
         :            *__mem += __val;
    0.00 :   5aea64:       lea    -0x1(%rax),%edx
    0.00 :   5aea67:       mov    %edx,0xc(%r15)
         :            return __result;
    0.00 :   5aea6b:       jmpq   5ae945 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb65>
         :            { *__mem += __val; }
    0.00 :   5aea70:       addl   $0x1,0x8(%rax)
    0.00 :   5aea74:       jmpq   5ae9d3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xbf3>
    0.00 :   5aea79:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aea80:       mov    0x8(%r14),%eax
         :            *__mem += __val;
    0.00 :   5aea84:       lea    -0x1(%rax),%edx
    0.00 :   5aea87:       mov    %edx,0x8(%r14)
         :            return __result;
    0.00 :   5aea8b:       jmp    5aea24 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc44>
    0.00 :   5aea8d:       nopl   (%rax)
         :            { *__mem += __val; }
    0.00 :   5aea90:       addl   $0x1,0x8(%rax)
    0.00 :   5aea94:       jmpq   5ae9ff <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc1f>
    0.00 :   5aea99:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5aeaa0:       mov    (%r14),%rax
    0.00 :   5aeaa3:       mov    %r14,%rdi
    0.00 :   5aeaa6:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5aeaa9:       test   %r12,%r12
    0.00 :   5aeaac:       je     5aeb68 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd88>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aeab2:       mov    $0xffffffff,%eax
    0.00 :   5aeab7:       lock xadd %eax,0xc(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5aeabd:       cmp    $0x1,%eax
    0.00 :   5aeac0:       jne    5aea29 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc49>
         :            _M_destroy();
    0.00 :   5aeac6:       mov    (%r14),%rax
    0.00 :   5aeac9:       mov    %r14,%rdi
    0.00 :   5aeacc:       callq  *0x18(%rax)
    0.00 :   5aeacf:       jmpq   5aea29 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc49>
    0.00 :   5aead4:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5aead8:       mov    (%r14),%rax
    0.00 :   5aeadb:       mov    %r14,%rdi
    0.00 :   5aeade:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5aeae1:       test   %r12,%r12
    0.00 :   5aeae4:       je     5aeb58 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd78>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aeae6:       mov    $0xffffffff,%eax
    0.00 :   5aeaeb:       lock xadd %eax,0xc(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5aeaf1:       cmp    $0x1,%eax
    0.00 :   5aeaf4:       jne    5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
         :            _M_destroy();
    0.00 :   5aeafa:       mov    (%r14),%rax
    0.00 :   5aeafd:       mov    %r14,%rdi
    0.00 :   5aeb00:       callq  *0x18(%rax)
    0.00 :   5aeb03:       jmpq   5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
    0.00 :   5aeb08:       nopl   0x0(%rax,%rax,1)
         :            _M_pi->_M_release();
    0.00 :   5aeb10:       mov    %r14,%rdi
    0.00 :   5aeb13:       mov    %rdx,-0x320(%rbp)
    0.00 :   5aeb1a:       mov    %rax,-0x318(%rbp)
    0.00 :   5aeb21:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            _M_pi = __tmp;
    0.00 :   5aeb26:       mov    -0x2f0(%rbp),%rsi
    0.00 :   5aeb2d:       mov    -0x318(%rbp),%rax
    0.00 :   5aeb34:       mov    -0x320(%rbp),%rdx
    0.00 :   5aeb3b:       mov    %rax,0x20(%rsi)
    0.00 :   5aeb3f:       jmpq   5aea13 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc33>
    0.00 :   5aeb44:       nopl   0x0(%rax)
    0.00 :   5aeb48:       mov    %r11,-0x2f0(%rbp)
    0.00 :   5aeb4f:       jmpq   5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5aeb54:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aeb58:       mov    0xc(%r14),%eax
         :            *__mem += __val;
    0.00 :   5aeb5c:       lea    -0x1(%rax),%edx
    0.00 :   5aeb5f:       mov    %edx,0xc(%r14)
         :            return __result;
    0.00 :   5aeb63:       jmp    5aeaf1 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd11>
    0.00 :   5aeb65:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aeb68:       mov    0xc(%r14),%eax
         :            *__mem += __val;
    0.00 :   5aeb6c:       lea    -0x1(%rax),%edx
    0.00 :   5aeb6f:       mov    %edx,0xc(%r14)
         :            return __result;
    0.00 :   5aeb73:       jmpq   5aeabd <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xcdd>
    0.00 :   5aeb78:       sub    $0x8,%rsp
    0.00 :   5aeb7c:       mov    0x10(%rsi),%rcx
    0.00 :   5aeb80:       add    0x48(%rax),%rcx
    0.00 :   5aeb84:       lea    -0x2b0(%rbp),%rdi
    0.00 :   5aeb8b:       push   %r15
    0.00 :   5aeb8d:       mov    -0x2f8(%rbp),%r9
    0.00 :   5aeb94:       mov    %r13,%r8
    0.00 :   5aeb97:       mov    %rbx,%rsi
    0.00 :   5aeb9a:       mov    -0x2f0(%rbp),%rdx
    0.00 :   5aeba1:       callq  5a8bd0 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5aeba6:       mov    -0x2b0(%rbp),%rax
    0.00 :   5aebad:       mov    -0x2e8(%rbp),%rbx
    0.00 :   5aebb4:       pop    %rcx
    0.00 :   5aebb5:       pop    %rsi
    0.00 :   5aebb6:       mov    %rax,(%rbx)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   5aebb9:       jmpq   5ae71d <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x93d>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5aebbe:       movq   $0x0,-0x338(%rbp)
    0.00 :   5aebc9:       jmpq   5ae2b3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4d3>
         :            _ForwardIterator __cur = __result;
    0.00 :   5aebce:       mov    -0x338(%rbp),%rax
    0.00 :   5aebd5:       mov    %rax,-0x318(%rbp)
    0.00 :   5aebdc:       jmpq   5ae327 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x547>
    0.00 :   5aebe1:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5aebe6:       mov    $0xa0,%edi
    0.00 :   5aebeb:       lea    -0x290(%rbp),%rbx
    0.00 :   5aebf2:       lea    -0x2b0(%rbp),%r12
    0.00 :   5aebf9:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5aebfe:       mov    %rbx,%rdi
    0.00 :   5aec01:       mov    %rbx,-0x330(%rbp)
    0.00 :   5aec08:       mov    %rax,%r15
    0.00 :   5aec0b:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5aec10:       mov    %r12,%rdi
    0.00 :   5aec13:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5aec18:       lea    -0x230(%rbp),%r14
    0.00 :   5aec1f:       mov    %r12,%r8
    0.00 :   5aec22:       lea    0x2e1837(%rip),%rcx        # 890460 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)::__PRETTY_FUNCTION__>
    0.00 :   5aec29:       mov    $0x163,%edx
    0.00 :   5aec2e:       lea    0x2e0e03(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5aec35:       mov    %r14,%rdi
    0.00 :   5aec38:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5aec3d:       mov    %rbx,%rcx
    0.00 :   5aec40:       lea    0x2e1204(%rip),%rdx        # 88fe4b <std::piecewise_construct+0x56e>
    0.00 :   5aec47:       mov    %r14,%rsi
    0.00 :   5aec4a:       mov    %r15,%rdi
    0.00 :   5aec4d:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5aec52:       mov    %r14,%rdi
    0.00 :   5aec55:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5aec5a:       mov    %r12,%rdi
    0.00 :   5aec5d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
    0.00 :   5aec62:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aec65:       mov    -0x290(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   5aec6c:       add    $0x10,%rax
    0.00 :   5aec70:       cmp    %rax,%rdi
    0.00 :   5aec73:       je     b1dca <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x11c>
    0.00 :   5aec79:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aec7e:       jmpq   b1dca <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x11c>
         :            __throw_system_error(__e);
    0.00 :   5aec83:       mov    %eax,%edi
    0.00 :   5aec85:       callq  52f30 <std::__throw_system_error(int)@plt>
         :            std::__throw_bad_alloc();
    0.00 :   5aec8a:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5aec8f:       mov    %rax,%rbx
    0.00 :   5aec92:       jmpq   b1cc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x15>
    0.00 :   5aec97:       mov    %rax,%rbx
    0.00 :   5aec9a:       jmpq   b1cd0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x22>
    0.00 :   5aec9f:       mov    %rax,%rbx
    0.00 :   5aeca2:       jmpq   b1cd0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x22>
    0.00 :   5aeca7:       jmpq   b1cee <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x40>
    0.00 :   5aecac:       mov    %rax,%rbx
    0.00 :   5aecaf:       jmpq   b1ce6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x38>
    0.00 :   5aecb4:       mov    %rax,%rbx
    0.00 :   5aecb7:       jmpq   b1d24 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x76>
    0.00 :   5aecbc:       mov    %rax,%rbx
    0.00 :   5aecbf:       jmpq   b1cd0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x22>
    0.00 :   5aecc4:       mov    %rax,%rbx
    0.00 :   5aecc7:       jmpq   b1cd0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x22>
    0.00 :   5aeccc:       jmpq   b1d76 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0xc8>
    0.00 :   5aecd1:       mov    %rax,%rbx
    0.00 :   5aecd4:       jmpq   b1d89 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0xdb>
    0.00 :   5aecd9:       mov    %rax,%rbx
    0.00 :   5aecdc:       jmpq   b1da3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0xf5>
    0.00 :   5aece1:       mov    %rax,%rbx
    0.00 :   5aece4:       jmpq   b1db0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x102>
    0.00 :   5aece9:       mov    %rax,%rbx
    0.00 :   5aecec:       jmpq   b1df0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x142>
    0.00 :   5aecf1:       mov    %rax,%rbx
    0.00 :   5aecf4:       jmpq   b1de8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x13a>
    0.00 :   5aecf9:       mov    %rax,%rbx
    0.00 :   5aecfc:       jmpq   b1df8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x14a>
    0.00 :   5aed01:       mov    %rax,%rbx
    0.00 :   5aed04:       jmpq   b1cae <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]>
    0.00 :   5aed09:       mov    %rax,%rbx
    0.00 :   5aed0c:       jmpq   b1e21 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x173>
    0.00 :   5aed11:       mov    %rax,%rbx
    0.00 :   5aed14:       jmpq   b1d39 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x8b>
    0.00 :   5aed19:       mov    %rax,%rbx
    0.00 :   5aed1c:       jmpq   b1d4e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0xa0>
    0.00 :   5aed21:       mov    %rax,%rbx
    0.00 :   5aed24:       jmpq   b1e2e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x180>
    0.00 :   5aed29:       mov    %rax,%rbx
    0.00 :   5aed2c:       jmpq   b1e53 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x1a5>
    0.00 :   5aed31:       mov    %rax,%rbx
    0.00 :   5aed34:       jmpq   b1e7a <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x1cc>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005d8e20 <std::_Function_handler<std::shared_ptr<onnxruntime::IAllocator> (int, OrtMemType), onnxruntime::SessionState::SetupAllocators()::{lambda(int, OrtMemType)#1}>::_M_invoke(std::_Any_data const&, int&&, OrtMemType&&)>:
         :            _ZNSt17_Function_handlerIFSt10shared_ptrIN11onnxruntime10IAllocatorEEi10OrtMemTypeEZNS1_12SessionState15SetupAllocatorsEvEUliS4_E_E9_M_invokeERKSt9_Any_dataOiOS4_():
         :            {
         :            typedef _Function_base::_Base_manager<_Functor> _Base;
         :
         :            public:
         :            static _Res
         :            _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    0.00 :   5d8e20:       push   %rbx
    0.00 :   5d8e21:       mov    %rdi,%rbx
    0.00 :   5d8e24:       sub    $0x10,%rsp
         :            operator()():
    0.00 :   5d8e28:       mov    (%rcx),%ecx
    0.00 :   5d8e2a:       mov    (%rdx),%edx
         :            _ZNSt17_Function_handlerIFSt10shared_ptrIN11onnxruntime10IAllocatorEEi10OrtMemTypeEZNS1_12SessionState15SetupAllocatorsEvEUliS4_E_E9_M_invokeERKSt9_Any_dataOiOS4_():
    0.00 :   5d8e2c:       mov    %fs:0x28,%rax
    0.00 :   5d8e35:       mov    %rax,0x8(%rsp)
    0.00 :   5d8e3a:       xor    %eax,%eax
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   5d8e3c:       mov    (%rsi),%rax
    0.00 :   5d8e3f:       mov    (%rax),%rsi
         :            operator()():
  100.00 :   5d8e42:       mov    (%rsi),%rax
    0.00 :   5d8e45:       callq  *0x10(%rax)
         :            _ZNSt17_Function_handlerIFSt10shared_ptrIN11onnxruntime10IAllocatorEEi10OrtMemTypeEZNS1_12SessionState15SetupAllocatorsEvEUliS4_E_E9_M_invokeERKSt9_Any_dataOiOS4_():
         :            {
         :            return (*_Base::_M_get_pointer(__functor))(
         :            std::forward<_ArgTypes>(__args)...);
         :            }
    0.00 :   5d8e48:       mov    0x8(%rsp),%rdi
    0.00 :   5d8e4d:       xor    %fs:0x28,%rdi
    0.00 :   5d8e56:       jne    5d8e61 <std::_Function_handler<std::shared_ptr<onnxruntime::IAllocator> (int, OrtMemType), onnxruntime::SessionState::SetupAllocators()::{lambda(int, OrtMemType)#1}>::_M_invoke(std::_Any_data const&, int&&, OrtMemType&&)+0x41>
    0.00 :   5d8e58:       add    $0x10,%rsp
    0.00 :   5d8e5c:       mov    %rbx,%rax
    0.00 :   5d8e5f:       pop    %rbx
    0.00 :   5d8e60:       retq
    0.00 :   5d8e61:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000593a90 <onnxruntime::BFCArena::DeallocateRawInternal(void*)>:
         :            _ZN11onnxruntime8BFCArena21DeallocateRawInternalEPv():
    0.00 :   593a90:       push   %r15
    0.00 :   593a92:       push   %r14
    0.00 :   593a94:       push   %r13
    0.00 :   593a96:       push   %r12
    0.00 :   593a98:       push   %rbp
    0.00 :   593a99:       push   %rbx
    0.00 :   593a9a:       mov    %rsi,%rbx
    0.00 :   593a9d:       sub    $0x298,%rsp
    0.00 :   593aa4:       mov    0x4f0(%rdi),%r8
    0.00 :   593aab:       mov    0x4e8(%rdi),%rdx
    0.00 :   593ab2:       mov    %fs:0x28,%rax
    0.00 :   593abb:       mov    %rax,0x288(%rsp)
    0.00 :   593ac3:       xor    %eax,%eax
         :            template<typename _Iterator, typename _Container>
         :            inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :            operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
         :            const __normal_iterator<_Iterator, _Container>& __rhs)
         :            _GLIBCXX_NOEXCEPT
         :            { return __lhs.base() - __rhs.base(); }
    0.00 :   593ac5:       mov    %r8,%rax
    0.00 :   593ac8:       sub    %rdx,%rax
    0.00 :   593acb:       sar    $0x5,%rax
    0.00 :   593acf:       jmp    593ae3 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x53>
    0.00 :   593ad1:       nopl   0x0(%rax)
         :            __len = __half;
         :            else
         :            {
         :            __first = __middle;
         :            ++__first;
         :            __len = __len - __half - 1;
    0.00 :   593ad8:       sub    %rsi,%rax
         :            ++_M_current;
    0.00 :   593adb:       lea    0x20(%rcx),%rdx
    0.00 :   593adf:       sub    $0x1,%rax
         :            while (__len > 0)
    0.00 :   593ae3:       test   %rax,%rax
    0.00 :   593ae6:       jle    593b06 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x76>
         :            _DistanceType __half = __len >> 1;
    0.00 :   593ae8:       mov    %rax,%rsi
    0.00 :   593aeb:       sar    %rsi
         :            { _M_current += __n; return *this; }
    0.00 :   593aee:       mov    %rsi,%rcx
    0.00 :   593af1:       shl    $0x5,%rcx
    0.00 :   593af5:       add    %rdx,%rcx
         :            if (__comp(__val, __middle))
    0.00 :   593af8:       cmp    0x10(%rcx),%rbx
    0.00 :   593afc:       jae    593ad8 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x48>
         :            while (__len > 0)
    0.00 :   593afe:       mov    %rsi,%rax
    0.00 :   593b01:       test   %rsi,%rsi
    0.00 :   593b04:       jne    593ae8 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x58>
    0.00 :   593b06:       cmp    %rdx,%r8
    0.00 :   593b09:       je     593b78 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0xe8>
    0.00 :   593b0b:       mov    (%rdx),%rax
    0.00 :   593b0e:       mov    0x18(%rdx),%rcx
    0.00 :   593b12:       cmp    %rax,%rbx
    0.00 :   593b15:       jb     594069 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x5d9>
    0.00 :   593b1b:       mov    0x8(%rdx),%rsi
    0.00 :   593b1f:       add    %rax,%rsi
    0.00 :   593b22:       cmp    %rsi,%rbx
    0.00 :   593b25:       jae    593fdb <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x54b>
    0.00 :   593b2b:       sub    %rax,%rbx
    0.00 :   593b2e:       shr    $0x8,%rbx
    0.00 :   593b32:       movslq %ebx,%rbx
    0.00 :   593b35:       mov    (%rcx,%rbx,8),%rsi
  100.00 :   593b39:       cmp    $0xffffffffffffffff,%rsi
    0.00 :   593b3d:       je     593f4d <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x4bd>
    0.00 :   593b43:       callq  5938b0 <onnxruntime::BFCArena::FreeAndMaybeCoalesce(unsigned long)>
    0.00 :   593b48:       mov    0x288(%rsp),%rax
    0.00 :   593b50:       xor    %fs:0x28,%rax
    0.00 :   593b59:       jne    593f48 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x4b8>
    0.00 :   593b5f:       add    $0x298,%rsp
    0.00 :   593b66:       pop    %rbx
    0.00 :   593b67:       pop    %rbp
    0.00 :   593b68:       pop    %r12
    0.00 :   593b6a:       pop    %r13
    0.00 :   593b6c:       pop    %r14
    0.00 :   593b6e:       pop    %r15
    0.00 :   593b70:       retq
    0.00 :   593b71:       nopl   0x0(%rax)
    0.00 :   593b78:       callq  114cc0 <onnxruntime::logging::LoggingManager::DefaultLogger()>
    0.00 :   593b7d:       cmpl   $0x4,0x28(%rax)
    0.00 :   593b81:       jg     adb62 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0xbe>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593b87:       lea    0x30(%rsp),%r15
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593b8c:       lea    0x2f7b55(%rip),%rdx        # 88b6e8 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x148>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593b93:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593b97:       lea    -0x38(%rdx),%rsi
    0.00 :   593b9b:       mov    %r15,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593b9e:       mov    %rax,0x30(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593ba3:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   593ba8:       lea    0x2f87ca(%rip),%rdx        # 88c379 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const::__FUNCTION__+0x9>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593baf:       lea    0x38(%r15),%rax
    0.00 :   593bb3:       movl   $0x139,0x50(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593bbb:       lea    0x28(%r15),%rdi
    0.00 :   593bbf:       lea    -0x9(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   593bc3:       mov    %rax,0x58(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593bc8:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   593bcd:       movq   $0x0,0x78(%rsp)
    0.00 :   593bd6:       lea    0x6950cb(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
    0.00 :   593bdd:       movq   $0x0,0x80(%rsp)
    0.00 :   593be9:       movq   $0x0,0x88(%rsp)
    0.00 :   593bf5:       mov    (%rax),%rbp
    0.00 :   593bf8:       callq  114cc0 <onnxruntime::logging::LoggingManager::DefaultLogger()>
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593bfd:       mov    0x30(%rsp),%rsi
    0.00 :   593c02:       mov    0x38(%rsp),%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593c07:       lea    0x90(%rsp),%r13
    0.00 :   593c0f:       mov    %rax,0x90(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593c17:       lea    0x20(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593c1b:       lea    0x30(%r13),%rax
    0.00 :   593c1f:       movl   $0x4,0x98(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593c2a:       add    %rsi,%rdx
    0.00 :   593c2d:       mov    %rbp,0xa0(%rsp)
    0.00 :   593c35:       movl   $0x0,0xa8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593c40:       mov    %rax,0xb0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593c48:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   593c4d:       mov    0x50(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593c51:       mov    0x58(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593c56:       lea    0x48(%r13),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593c5a:       mov    0x60(%rsp),%rdx
    0.00 :   593c5f:       mov    %eax,0xd0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593c66:       lea    0x58(%r13),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593c6a:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593c6d:       mov    %rax,0xd8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593c75:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   593c7a:       mov    0x80(%rsp),%r14
    0.00 :   593c82:       mov    0x78(%rsp),%rbp
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   593c87:       movq   $0x0,0xf8(%rsp)
    0.00 :   593c93:       movq   $0x0,0x100(%rsp)
    0.00 :   593c9f:       movq   $0x0,0x108(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   593cab:       mov    %r14,%r12
    0.00 :   593cae:       sub    %rbp,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   593cb1:       mov    %r12,%rax
    0.00 :   593cb4:       sar    $0x5,%rax
    0.00 :   593cb8:       je     593f30 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x4a0>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   593cbe:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   593cc8:       cmp    %rdx,%rax
    0.00 :   593ccb:       ja     5940f7 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x667>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   593cd1:       mov    %r12,%rdi
    0.00 :   593cd4:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   593cd9:       mov    %rax,0x8(%rsp)
    0.00 :   593cde:       mov    0x80(%rsp),%r14
    0.00 :   593ce6:       mov    0x78(%rsp),%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   593ceb:       mov    0x8(%rsp),%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   593cf0:       add    %rax,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   593cf3:       mov    %rax,0xf8(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   593cfb:       mov    %rax,0x100(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   593d03:       mov    %r12,0x108(%rsp)
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   593d0b:       cmp    %r14,%rbp
    0.00 :   593d0e:       je     593f3e <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x4ae>
         :            _ForwardIterator __cur = __result;
    0.00 :   593d14:       mov    %rax,%r12
    0.00 :   593d17:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593d20:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593d25:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593d28:       mov    %rax,(%r12)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   593d2c:       mov    0x0(%rbp),%rsi
    0.00 :   593d30:       mov    0x8(%rbp),%rdx
    0.00 :   593d34:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   593d37:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   593d3c:       add    $0x20,%rbp
    0.00 :   593d40:       add    $0x20,%r12
    0.00 :   593d44:       cmp    %rbp,%r14
    0.00 :   593d47:       jne    593d20 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x290>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   593d49:       lea    0xf0(%r13),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   593d50:       mov    %r12,0x100(%rsp)
    0.00 :   593d58:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   593d5d:       mov    0x693dc4(%rip),%r12        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   593d64:       xor    %esi,%esi
    0.00 :   593d66:       movq   $0x0,0x258(%rsp)
    0.00 :   593d72:       movq   $0x0,0x268(%rsp)
    0.00 :   593d7e:       lea    0x10(%r12),%rax
    0.00 :   593d83:       movq   $0x0,0x270(%rsp)
    0.00 :   593d8f:       mov    %rax,0x180(%rsp)
    0.00 :   593d97:       xor    %eax,%eax
    0.00 :   593d99:       mov    %ax,0x260(%rsp)
    0.00 :   593da1:       mov    0x693ff8(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   593da8:       movq   $0x0,0x278(%rsp)
    0.00 :   593db4:       mov    0x8(%rax),%rbp
    0.00 :   593db8:       mov    0x10(%rax),%r14
    0.00 :   593dbc:       movq   $0x0,0x280(%rsp)
    0.00 :   593dc8:       mov    -0x18(%rbp),%rdx
    0.00 :   593dcc:       mov    %rbp,0x110(%rsp)
    0.00 :   593dd4:       lea    0x80(%r13,%rdx,1),%rdi
    0.00 :   593ddc:       mov    %r14,(%rdi)
    0.00 :   593ddf:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   593de4:       mov    0x693f75(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   593deb:       lea    0xc0(%r13),%rdi
    0.00 :   593df2:       movq   $0x0,0x120(%rsp)
    0.00 :   593dfe:       movq   $0x0,0x128(%rsp)
    0.00 :   593e0a:       movq   $0x0,0x130(%rsp)
    0.00 :   593e16:       lea    0x18(%rax),%rdx
    0.00 :   593e1a:       add    $0x40,%rax
    0.00 :   593e1e:       mov    %rax,0x180(%rsp)
    0.00 :   593e26:       mov    0x693e33(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   593e2d:       mov    %rdx,0x110(%rsp)
    0.00 :   593e35:       movq   $0x0,0x138(%rsp)
    0.00 :   593e41:       add    $0x10,%rax
    0.00 :   593e45:       mov    %rax,0x118(%rsp)
    0.00 :   593e4d:       movq   $0x0,0x140(%rsp)
    0.00 :   593e59:       movq   $0x0,0x148(%rsp)
    0.00 :   593e65:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   593e6a:       mov    0x694167(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   593e71:       lea    0x88(%r13),%rsi
    0.00 :   593e78:       lea    0xf0(%r13),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   593e7f:       movl   $0x10,0x158(%rsp)
    0.00 :   593e8a:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   593e8e:       movb   $0x0,0x170(%rsp)
    0.00 :   593e96:       mov    %rax,0x118(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   593e9e:       lea    0xe0(%r13),%rax
    0.00 :   593ea5:       mov    %rax,0x160(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   593ead:       movq   $0x0,0x168(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   593eb9:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   593ebe:       lea    0x80(%r13),%rdi
    0.00 :   593ec5:       mov    $0x1a,%edx
    0.00 :   593eca:       lea    0x2f790e(%rip),%rsi        # 88b7df <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x23f>
    0.00 :   593ed1:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__p); }
    0.00 :   593ed6:       lea    0x80(%r13),%rdi
    0.00 :   593edd:       mov    %rbx,%rsi
    0.00 :   593ee0:       callq  530b0 <std::ostream& std::ostream::_M_insert<void const*>(void const*)@plt>
    0.00 :   593ee5:       mov    %r13,%rdi
    0.00 :   593ee8:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   593eed:       mov    0x80(%rsp),%rbp
    0.00 :   593ef5:       mov    0x78(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   593efa:       cmp    %rbx,%rbp
    0.00 :   593efd:       je     adb2d <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x89>
    0.00 :   593f03:       nopl   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   593f08:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   593f0b:       lea    0x10(%rbx),%rax
    0.00 :   593f0f:       cmp    %rax,%rdi
    0.00 :   593f12:       je     593f19 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x489>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   593f14:       callq  53300 <operator delete(void*)@plt>
    0.00 :   593f19:       add    $0x20,%rbx
    0.00 :   593f1d:       cmp    %rbx,%rbp
    0.00 :   593f20:       jne    593f08 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x478>
    0.00 :   593f22:       jmpq   adb2d <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x89>
    0.00 :   593f27:       nopw   0x0(%rax,%rax,1)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   593f30:       movq   $0x0,0x8(%rsp)
    0.00 :   593f39:       jmpq   593ceb <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x25b>
         :            _ForwardIterator __cur = __result;
    0.00 :   593f3e:       mov    0x8(%rsp),%r12
    0.00 :   593f43:       jmpq   593d49 <onnxruntime::BFCArena::DeallocateRawInternal(void*)+0x2b9>
    0.00 :   593f48:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   593f4d:       mov    $0xa0,%edi
    0.00 :   593f52:       lea    0x30(%rsp),%r15
    0.00 :   593f57:       lea    0x10(%rsp),%rbx
    0.00 :   593f5c:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   593f61:       mov    %r15,%rdi
    0.00 :   593f64:       mov    %rax,%rbp
    0.00 :   593f67:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   593f6c:       mov    %rbx,%rdi
    0.00 :   593f6f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   593f74:       lea    0x90(%rsp),%r13
    0.00 :   593f7c:       mov    %rbx,%r8
    0.00 :   593f7f:       lea    0x2f81fa(%rip),%rcx        # 88c180 <onnxruntime::BFCArena::DeallocateRawInternal(void*)::__PRETTY_FUNCTION__>
    0.00 :   593f86:       mov    $0x19d,%edx
    0.00 :   593f8b:       lea    0x2f7696(%rip),%rsi        # 88b628 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   593f92:       mov    %r13,%rdi
    0.00 :   593f95:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   593f9a:       mov    %r15,%rcx
    0.00 :   593f9d:       lea    0x2f7b4a(%rip),%rdx        # 88baee <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x54e>
    0.00 :   593fa4:       mov    %r13,%rsi
    0.00 :   593fa7:       mov    %rbp,%rdi
    0.00 :   593faa:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   593faf:       mov    %r13,%rdi
    0.00 :   593fb2:       add    $0x10,%r15
    0.00 :   593fb6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   593fbb:       mov    %rbx,%rdi
    0.00 :   593fbe:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   593fc3:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   593fc8:       cmp    %r15,%rdi
    0.00 :   593fcb:       je     adb87 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0xe3>
    0.00 :   593fd1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   593fd6:       jmpq   adb87 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0xe3>
    0.00 :   593fdb:       mov    $0xa0,%edi
    0.00 :   593fe0:       lea    0x30(%rsp),%r15
    0.00 :   593fe5:       lea    0x10(%rsp),%rbx
    0.00 :   593fea:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   593fef:       mov    %r15,%rdi
    0.00 :   593ff2:       mov    %rax,%r12
    0.00 :   593ff5:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   593ffa:       mov    %rbx,%rdi
    0.00 :   593ffd:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   594002:       lea    0x90(%rsp),%r13
    0.00 :   59400a:       mov    %rbx,%r8
    0.00 :   59400d:       lea    0x2f830c(%rip),%rcx        # 88c320 <onnxruntime::BFCArena::AllocationRegion::IndexFor(void const*) const::__PRETTY_FUNCTION__>
    0.00 :   594014:       mov    $0xf9,%edx
    0.00 :   594019:       lea    0x2f7690(%rip),%rsi        # 88b6b0 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x110>
    0.00 :   594020:       mov    %r13,%rdi
    0.00 :   594023:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   594028:       mov    %r15,%rcx
    0.00 :   59402b:       lea    0x2f76be(%rip),%rdx        # 88b6f0 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x150>
    0.00 :   594032:       mov    %r13,%rsi
    0.00 :   594035:       mov    %r12,%rdi
    0.00 :   594038:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   59403d:       mov    %r13,%rdi
    0.00 :   594040:       add    $0x10,%r15
    0.00 :   594044:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   594049:       mov    %rbx,%rdi
    0.00 :   59404c:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   594051:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   594056:       cmp    %r15,%rdi
    0.00 :   594059:       je     adbd0 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x12c>
    0.00 :   59405f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   594064:       jmpq   adbd0 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x12c>
    0.00 :   594069:       mov    $0xa0,%edi
    0.00 :   59406e:       lea    0x30(%rsp),%r15
    0.00 :   594073:       lea    0x10(%rsp),%rbx
    0.00 :   594078:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   59407d:       mov    %r15,%rdi
    0.00 :   594080:       mov    %rax,%r12
    0.00 :   594083:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   594088:       mov    %rbx,%rdi
    0.00 :   59408b:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   594090:       lea    0x90(%rsp),%r13
    0.00 :   594098:       mov    %rbx,%r8
    0.00 :   59409b:       lea    0x2f827e(%rip),%rcx        # 88c320 <onnxruntime::BFCArena::AllocationRegion::IndexFor(void const*) const::__PRETTY_FUNCTION__>
    0.00 :   5940a2:       mov    $0xf8,%edx
    0.00 :   5940a7:       lea    0x2f7602(%rip),%rsi        # 88b6b0 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x110>
    0.00 :   5940ae:       mov    %r13,%rdi
    0.00 :   5940b1:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5940b6:       mov    %r15,%rcx
    0.00 :   5940b9:       lea    0x2f7650(%rip),%rdx        # 88b710 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x170>
    0.00 :   5940c0:       mov    %r13,%rsi
    0.00 :   5940c3:       mov    %r12,%rdi
    0.00 :   5940c6:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5940cb:       mov    %r13,%rdi
    0.00 :   5940ce:       add    $0x10,%r15
    0.00 :   5940d2:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5940d7:       mov    %rbx,%rdi
    0.00 :   5940da:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5940df:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5940e4:       cmp    %r15,%rdi
    0.00 :   5940e7:       je     adc19 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x175>
    0.00 :   5940ed:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5940f2:       jmpq   adc19 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x175>
         :            std::__throw_bad_alloc();
    0.00 :   5940f7:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5940fc:       mov    %rax,%rbx
    0.00 :   5940ff:       jmpq   adabf <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x1b>
    0.00 :   594104:       mov    %rax,%rbx
    0.00 :   594107:       jmpq   adad5 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x31>
    0.00 :   59410c:       jmpq   adafb <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x57>
    0.00 :   594111:       mov    %rax,%rbx
    0.00 :   594114:       jmpq   adaeb <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x47>
    0.00 :   594119:       mov    %rax,%rbx
    0.00 :   59411c:       jmpq   adb6c <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0xc8>
    0.00 :   594121:       mov    %rax,%r12
    0.00 :   594124:       jmpq   adb9d <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0xf9>
    0.00 :   594129:       mov    %rax,%r12
    0.00 :   59412c:       jmpq   adba5 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x101>
    0.00 :   594131:       mov    %rax,%r12
    0.00 :   594134:       jmpq   adbad <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x109>
    0.00 :   594139:       mov    %rax,%rbp
    0.00 :   59413c:       jmpq   adbe6 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x142>
    0.00 :   594141:       mov    %rax,%rbp
    0.00 :   594144:       jmpq   adbee <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x14a>
    0.00 :   594149:       mov    %rax,%rbp
    0.00 :   59414c:       jmpq   adbf6 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x152>
    0.00 :   594151:       mov    %rax,%rbx
    0.00 :   594154:       jmpq   adca9 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x205>
    0.00 :   594159:       mov    %rax,%rbp
    0.00 :   59415c:       jmpq   adc76 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x1d2>
    0.00 :   594161:       mov    %rax,%rbx
    0.00 :   594164:       jmpq   adc2f <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x18b>
    0.00 :   594169:       mov    %rax,%rbp
    0.00 :   59416c:       jmpq   adc7e <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x1da>
    0.00 :   594171:       mov    %rax,%rbp
    0.00 :   594174:       jmpq   adc86 <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x1e2>
    0.00 :   594179:       mov    %rax,%rbx
    0.00 :   59417c:       jmpq   adc4f <onnxruntime::BFCArena::DeallocateRawInternal(void*) [clone .cold.261]+0x1ab>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a80a0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)>:
         :            _Z18MlasSgemmOperation15CBLAS_TRANSPOSES_mmmfPKfmS1_mfPfm():
    0.00 :   6a80a0:       lea    0x8(%rsp),%r10
    0.00 :   6a80a5:       and    $0xffffffffffffffc0,%rsp
    0.00 :   6a80a9:       pushq  -0x8(%r10)
    0.00 :   6a80ad:       push   %rbp
    0.00 :   6a80ae:       mov    %rsp,%rbp
    0.00 :   6a80b1:       push   %r15
    0.00 :   6a80b3:       push   %r14
    0.00 :   6a80b5:       push   %r13
    0.00 :   6a80b7:       push   %r12
    0.00 :   6a80b9:       push   %r10
    0.00 :   6a80bb:       push   %rbx
    0.00 :   6a80bc:       sub    $0x11900,%rsp
    0.00 :   6a80c3:       mov    (%r10),%rax
    0.00 :   6a80c6:       mov    %edi,-0x118e4(%rbp)
    0.00 :   6a80cc:       mov    %esi,-0x118e8(%rbp)
    0.00 :   6a80d2:       mov    0x20(%r10),%r15
    0.00 :   6a80d6:       mov    %rax,-0x118b8(%rbp)
    0.00 :   6a80dd:       mov    0x8(%r10),%rax
    0.00 :   6a80e1:       mov    %rdx,-0x118d8(%rbp)
    0.00 :   6a80e8:       mov    %rax,-0x118f8(%rbp)
    0.00 :   6a80ef:       mov    0x10(%r10),%rax
    0.00 :   6a80f3:       mov    %rcx,-0x11918(%rbp)
    0.00 :   6a80fa:       mov    %rax,-0x118e0(%rbp)
    0.00 :   6a8101:       mov    0x18(%r10),%rax
    0.00 :   6a8105:       mov    %r8,-0x118c8(%rbp)
    0.00 :   6a810c:       mov    %r9,-0x118f0(%rbp)
    0.00 :   6a8113:       mov    %rax,-0x11930(%rbp)
    0.00 :   6a811a:       movss  %xmm0,-0x11894(%rbp)
    0.00 :   6a8122:       movss  %xmm1,-0x11924(%rbp)
    0.00 :   6a812a:       mov    %fs:0x28,%rax
    0.00 :   6a8133:       mov    %rax,-0x38(%rbp)
    0.00 :   6a8137:       xor    %eax,%eax
    0.00 :   6a8139:       test   %r8,%r8
    0.00 :   6a813c:       je     6a8671 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x5d1>
    0.00 :   6a8142:       movss  0x17ec5a(%rip),%xmm0        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   6a814a:       movss  -0x11894(%rbp),%xmm5
    0.00 :   6a8152:       mov    $0x0,%ecx
    0.00 :   6a8157:       ucomiss %xmm0,%xmm5
    0.00 :   6a815a:       setnp  %dl
    0.00 :   6a815d:       cmovne %ecx,%edx
    0.00 :   6a8160:       cmpq   $0x1,-0x118d8(%rbp)
    0.00 :   6a8168:       sete   %sil
    0.00 :   6a816c:       cmpl   $0x6f,-0x118e4(%rbp)
    0.00 :   6a8173:       sete   %al
    0.00 :   6a8176:       test   %al,%sil
    0.00 :   6a8179:       je     6a8183 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0xe3>
    0.00 :   6a817b:       test   %dl,%dl
    0.00 :   6a817d:       jne    6a8696 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x5f6>
    0.00 :   6a8183:       cmpq   $0x1,-0x11918(%rbp)
    0.00 :   6a818b:       jne    6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a818d:       cmpq   $0x1,-0x118e0(%rbp)
    0.00 :   6a8195:       jne    6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a8197:       cmp    $0x1,%r15
    0.00 :   6a819b:       jne    6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a819d:       test   %dl,%dl
    0.00 :   6a819f:       je     6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a81a1:       movss  -0x11924(%rbp),%xmm4
    0.00 :   6a81a9:       pxor   %xmm1,%xmm1
    0.00 :   6a81ad:       mov    $0x0,%edx
    0.00 :   6a81b2:       ucomiss %xmm1,%xmm4
    0.00 :   6a81b5:       setnp  %al
    0.00 :   6a81b8:       cmovne %edx,%eax
    0.00 :   6a81bb:       test   %al,%al
    0.00 :   6a81bd:       jne    6a876b <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x6cb>
    0.00 :   6a81c3:       ucomiss %xmm0,%xmm4
    0.00 :   6a81c6:       setnp  %dl
    0.00 :   6a81c9:       cmove  %edx,%eax
    0.00 :   6a81cc:       test   %al,%al
    0.00 :   6a81ce:       jne    6a876b <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x6cb>
    0.00 :   6a81d4:       mov    -0x118c8(%rbp),%rax
    0.00 :   6a81db:       mov    -0x11918(%rbp),%rcx
    0.00 :   6a81e2:       cmp    %rcx,%rax
    0.00 :   6a81e5:       jbe    6a84f6 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x456>
    0.00 :   6a81eb:       cmpl   $0x6f,-0x118e4(%rbp)
    0.00 :   6a81f2:       movq   $0x80,-0x118d0(%rbp)
    0.00 :   6a81fd:       movq   $0x80,-0x11920(%rbp)
    0.00 :   6a8208:       je     6a871a <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x67a>
    0.00 :   6a820e:       cmpq   $0x0,-0x11918(%rbp)
    0.00 :   6a8216:       je     6a84ce <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x42e>
    0.00 :   6a821c:       pxor   %xmm1,%xmm1
    0.00 :   6a8220:       mov    $0x0,%eax
    0.00 :   6a8225:       mov    $0x1,%ecx
    0.00 :   6a822a:       movss  -0x11924(%rbp),%xmm2
    0.00 :   6a8232:       movq   $0x0,-0x11908(%rbp)
    0.00 :   6a823d:       ucomiss %xmm1,%xmm2
    0.00 :   6a8240:       setnp  %dl
    0.00 :   6a8243:       cmove  %edx,%eax
    0.00 :   6a8246:       ucomiss %xmm0,%xmm2
    0.00 :   6a8249:       mov    %al,-0x11925(%rbp)
    0.00 :   6a824f:       setp   %dl
    0.00 :   6a8252:       cmovne %ecx,%edx
    0.00 :   6a8255:       ucomiss %xmm1,%xmm2
    0.00 :   6a8258:       setp   %al
    0.00 :   6a825b:       cmovne %ecx,%eax
    0.00 :   6a825e:       and    %eax,%edx
    0.00 :   6a8260:       lea    -0x10070(%rbp),%rax
    0.00 :   6a8267:       mov    %rax,-0x11890(%rbp)
    0.00 :   6a826e:       lea    -0x11870(%rbp),%rax
    0.00 :   6a8275:       mov    %dl,-0x11926(%rbp)
    0.00 :   6a827b:       mov    %rax,-0x118b0(%rbp)
    0.00 :   6a8282:       mov    -0x11908(%rbp),%rdi
    0.00 :   6a8289:       mov    -0x11918(%rbp),%rax
    0.00 :   6a8290:       mov    -0x11920(%rbp),%rsi
    0.00 :   6a8297:       sub    %rdi,%rax
    0.00 :   6a829a:       cmp    %rsi,%rax
    0.00 :   6a829d:       cmova  %rsi,%rax
    0.00 :   6a82a1:       cmpb   $0x0,-0x11926(%rbp)
    0.00 :   6a82a8:       mov    %rax,-0x11888(%rbp)
    0.00 :   6a82af:       mov    -0x11930(%rbp),%rax
    0.00 :   6a82b6:       lea    (%rax,%rdi,4),%rax
    0.00 :   6a82ba:       mov    %rax,-0x11900(%rbp)
    0.00 :   6a82c1:       jne    6a864b <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x5ab>
    0.00 :   6a82c7:       mov    -0x118e0(%rbp),%rax
    0.00 :   6a82ce:       imul   -0x11908(%rbp),%rax
    0.00 :   6a82d6:       movq   $0x0,-0x118c0(%rbp)
    0.00 :   6a82e1:       mov    %rax,-0x11910(%rbp)
    0.00 :   6a82e8:       movzbl -0x11925(%rbp),%eax
    0.00 :   6a82ef:       mov    %al,-0x11895(%rbp)
    0.00 :   6a82f5:       nopl   (%rax)
    0.00 :   6a82f8:       mov    -0x118d0(%rbp),%rax
    0.00 :   6a82ff:       mov    -0x118c8(%rbp),%r12
    0.00 :   6a8306:       sub    -0x118c0(%rbp),%r12
    0.00 :   6a830d:       cmp    %rax,%r12
    0.00 :   6a8310:       cmova  %rax,%r12
    0.00 :   6a8314:       cmpl   $0x6f,-0x118e8(%rbp)
    0.00 :   6a831b:       je     6a860c <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x56c>
    0.00 :   6a8321:       mov    -0x118f8(%rbp),%rcx
    0.00 :   6a8328:       mov    -0x11910(%rbp),%rax
    0.00 :   6a832f:       mov    %r12,%r8
    0.00 :   6a8332:       add    -0x118c0(%rbp),%rax
    0.00 :   6a8339:       mov    -0x118e0(%rbp),%rdx
    0.00 :   6a8340:       lea    (%rcx,%rax,4),%rsi
    0.00 :   6a8344:       mov    -0x11890(%rbp),%rdi
    0.00 :   6a834b:       mov    -0x11888(%rbp),%rcx
    0.00 :   6a8352:       callq  6a78d0 <MlasSgemmTransposePackB(float*, float const*, unsigned long, unsigned long, unsigned long)>
    0.00 :   6a8357:       cmpl   $0x6f,-0x118e4(%rbp)
    0.00 :   6a835e:       je     6a8540 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x4a0>
    0.00 :   6a8364:       mov    -0x118b8(%rbp),%rax
    0.00 :   6a836b:       imul   -0x118c0(%rbp),%rax
    0.00 :   6a8373:       mov    -0x118f0(%rbp),%rsi
    0.00 :   6a837a:       mov    -0x11900(%rbp),%r13
    0.00 :   6a8381:       lea    (%rsi,%rax,4),%rax
    0.00 :   6a8385:       mov    %rax,-0x118a0(%rbp)
    0.00 :   6a838c:       mov    -0x118d8(%rbp),%rax
    0.00 :   6a8393:       mov    %rax,-0x118a8(%rbp)
    0.00 :   6a839a:       mov    -0x118a8(%rbp),%r14
    0.00 :   6a83a1:       test   %r14,%r14
    0.00 :   6a83a4:       je     6a848a <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x3ea>
    0.00 :   6a83aa:       nopw   0x0(%rax,%rax,1)
    0.00 :   6a83b0:       cmp    $0xc,%r14
    0.00 :   6a83b4:       mov    $0xc,%ebx
    0.00 :   6a83b9:       mov    -0x118b8(%rbp),%rdx
    0.00 :   6a83c0:       mov    -0x118a0(%rbp),%rsi
    0.00 :   6a83c7:       cmovbe %r14,%rbx
    0.00 :   6a83cb:       mov    -0x118b0(%rbp),%rdi
    0.00 :   6a83d2:       mov    %r12,%r8
    0.00 :   6a83d5:       mov    %rbx,%rcx
    0.00 :   6a83d8:       callq  6a7610 <MlasSgemmTransposeA(float*, float const*, unsigned long, unsigned long, unsigned long)>
    0.00 :   6a83dd:       mov    %r14,%rax
    0.00 :   6a83e0:       mov    -0x118b0(%rbp),%r14
    0.00 :   6a83e7:       sub    %rbx,%rax
    0.00 :   6a83ea:       mov    %rax,-0x118a8(%rbp)
    0.00 :   6a83f1:       mov    -0x118a0(%rbp),%rax
    0.00 :   6a83f8:       lea    (%rax,%rbx,4),%rax
    0.00 :   6a83fc:       mov    %rax,-0x118a0(%rbp)
    0.00 :   6a8403:       movzbl -0x11895(%rbp),%eax
    0.00 :   6a840a:       mov    %eax,-0x11878(%rbp)
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8410:       lea    0x582b29(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8417:       mov    %rax,-0x11880(%rbp)
    0.00 :   6a841e:       xchg   %ax,%ax
    0.00 :   6a8420:       mov    -0x11878(%rbp),%eax
    0.00 :   6a8426:       sub    $0x8,%rsp
    0.00 :   6a842a:       mov    %r13,%rdx
    0.00 :   6a842d:       mov    %r14,%rdi
    0.00 :   6a8430:       movss  -0x11894(%rbp),%xmm0
    0.00 :   6a8438:       mov    -0x11888(%rbp),%r9
    0.00 :   6a843f:       mov    %rbx,%r8
    0.00 :   6a8442:       mov    %r12,%rcx
    0.00 :   6a8445:       push   %rax
    0.00 :   6a8446:       mov    -0x11880(%rbp),%rax
    0.00 :   6a844d:       push   %r15
    0.00 :   6a844f:       mov    -0x11890(%rbp),%rsi
    0.00 :   6a8456:       push   %r12
    0.00 :   6a8458:       callq  *(%rax)
    0.00 :   6a845a:       mov    %r15,%rdx
    0.00 :   6a845d:       imul   %rax,%rdx
    0.00 :   6a8461:       add    $0x20,%rsp
    0.00 :   6a8465:       lea    0x0(%r13,%rdx,4),%r13
    0.00 :   6a846a:       mov    %rax,%rdx
    0.00 :   6a846d:       imul   %r12,%rdx
    0.00 :   6a8471:       lea    (%r14,%rdx,4),%r14
    0.00 :   6a8475:       sub    %rax,%rbx
    0.00 :   6a8478:       jne    6a8420 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x380>
         :            _Z18MlasSgemmOperation15CBLAS_TRANSPOSES_mmmfPKfmS1_mfPfm():
    0.00 :   6a847a:       mov    -0x118a8(%rbp),%r14
    0.00 :   6a8481:       test   %r14,%r14
    0.00 :   6a8484:       jne    6a83b0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x310>
    0.00 :   6a848a:       add    %r12,-0x118c0(%rbp)
    0.00 :   6a8491:       mov    -0x118c0(%rbp),%rax
    0.00 :   6a8498:       movb   $0x0,-0x11895(%rbp)
    0.00 :   6a849f:       cmp    %rax,-0x118c8(%rbp)
    0.00 :   6a84a6:       ja     6a82f8 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x258>
    0.00 :   6a84ac:       mov    -0x11888(%rbp),%rsi
    0.00 :   6a84b3:       add    %rsi,-0x11908(%rbp)
    0.00 :   6a84ba:       mov    -0x11908(%rbp),%rax
    0.00 :   6a84c1:       cmp    %rax,-0x11918(%rbp)
    0.00 :   6a84c8:       ja     6a8282 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x1e2>
    0.00 :   6a84ce:       mov    -0x38(%rbp),%rax
    0.00 :   6a84d2:       xor    %fs:0x28,%rax
    0.00 :   6a84db:       jne    6a87e2 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x742>
    0.00 :   6a84e1:       lea    -0x30(%rbp),%rsp
    0.00 :   6a84e5:       pop    %rbx
    0.00 :   6a84e6:       pop    %r10
    0.00 :   6a84e8:       pop    %r12
    0.00 :   6a84ea:       pop    %r13
    0.00 :   6a84ec:       pop    %r14
    0.00 :   6a84ee:       pop    %r15
    0.00 :   6a84f0:       pop    %rbp
    0.00 :   6a84f1:       lea    -0x8(%r10),%rsp
    0.00 :   6a84f5:       retq
    0.00 :   6a84f6:       cmp    $0x40,%rax
    0.00 :   6a84fa:       ja     6a87f0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x750>
    0.00 :   6a8500:       movq   $0x80,-0x11920(%rbp)
    0.00 :   6a850b:       movq   $0x40,-0x118d0(%rbp)
    0.00 :   6a8516:       jmp    6a851f <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x47f>
    0.00 :   6a8518:       mov    %rax,-0x118d0(%rbp)
    0.00 :   6a851f:       mov    -0x118d0(%rbp),%rax
    0.00 :   6a8526:       shlq   -0x11920(%rbp)
    0.00 :   6a852d:       shr    %rax
    0.00 :   6a8530:       cmp    -0x118c8(%rbp),%rax
    0.00 :   6a8537:       jae    6a8518 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x478>
    0.00 :   6a8539:       jmpq   6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
    0.00 :   6a853e:       xchg   %ax,%ax
    0.00 :   6a8540:       movzbl -0x11895(%rbp),%eax
    0.00 :   6a8547:       mov    -0x118c0(%rbp),%rcx
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a854e:       mov    -0x118d8(%rbp),%rbx
         :            _Z18MlasSgemmOperation15CBLAS_TRANSPOSES_mmmfPKfmS1_mfPfm():
    0.00 :   6a8555:       mov    %eax,-0x11880(%rbp)
    0.00 :   6a855b:       mov    -0x118f0(%rbp),%rax
    0.00 :   6a8562:       lea    (%rax,%rcx,4),%r13
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8566:       test   %rbx,%rbx
    0.00 :   6a8569:       je     6a848a <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x3ea>
    0.00 :   6a856f:       lea    0x5829ca(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8576:       mov    %r12,-0x11878(%rbp)
    0.00 :   6a857d:       mov    %r15,%r12
    0.00 :   6a8580:       mov    %r13,%r15
    0.00 :   6a8583:       mov    -0x11900(%rbp),%r14
    0.00 :   6a858a:       mov    -0x118b8(%rbp),%r13
    0.00 :   6a8591:       mov    %rax,-0x118a0(%rbp)
    0.00 :   6a8598:       nopl   0x0(%rax,%rax,1)
    0.00 :   6a85a0:       mov    -0x11880(%rbp),%eax
    0.00 :   6a85a6:       sub    $0x8,%rsp
    0.00 :   6a85aa:       mov    %r14,%rdx
    0.00 :   6a85ad:       mov    %r15,%rdi
    0.00 :   6a85b0:       movss  -0x11894(%rbp),%xmm0
    0.00 :   6a85b8:       mov    -0x11888(%rbp),%r9
    0.00 :   6a85bf:       mov    %rbx,%r8
    0.00 :   6a85c2:       mov    -0x11878(%rbp),%rcx
    0.00 :   6a85c9:       mov    -0x11890(%rbp),%rsi
    0.00 :   6a85d0:       push   %rax
    0.00 :   6a85d1:       mov    -0x118a0(%rbp),%rax
    0.00 :   6a85d8:       push   %r12
    0.00 :   6a85da:       push   %r13
  100.00 :   6a85dc:       callq  *(%rax)
    0.00 :   6a85de:       mov    %r12,%rdx
    0.00 :   6a85e1:       imul   %rax,%rdx
    0.00 :   6a85e5:       add    $0x20,%rsp
    0.00 :   6a85e9:       lea    (%r14,%rdx,4),%r14
    0.00 :   6a85ed:       mov    %r13,%rdx
    0.00 :   6a85f0:       imul   %rax,%rdx
    0.00 :   6a85f4:       lea    (%r15,%rdx,4),%r15
    0.00 :   6a85f8:       sub    %rax,%rbx
    0.00 :   6a85fb:       jne    6a85a0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x500>
    0.00 :   6a85fd:       mov    %r12,%r15
    0.00 :   6a8600:       mov    -0x11878(%rbp),%r12
    0.00 :   6a8607:       jmpq   6a848a <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x3ea>
         :            _Z18MlasSgemmOperation15CBLAS_TRANSPOSES_mmmfPKfmS1_mfPfm():
    0.00 :   6a860c:       mov    -0x118e0(%rbp),%rdx
    0.00 :   6a8613:       mov    -0x118c0(%rbp),%rax
    0.00 :   6a861a:       mov    %r12,%r8
    0.00 :   6a861d:       mov    -0x118f8(%rbp),%rsi
    0.00 :   6a8624:       mov    -0x11888(%rbp),%rcx
    0.00 :   6a862b:       imul   %rdx,%rax
    0.00 :   6a862f:       mov    -0x11890(%rbp),%rdi
    0.00 :   6a8636:       add    -0x11908(%rbp),%rax
    0.00 :   6a863d:       lea    (%rsi,%rax,4),%rsi
    0.00 :   6a8641:       callq  6a7780 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)>
    0.00 :   6a8646:       jmpq   6a8357 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x2b7>
    0.00 :   6a864b:       movss  -0x11924(%rbp),%xmm0
    0.00 :   6a8653:       mov    -0x11888(%rbp),%rdx
    0.00 :   6a865a:       mov    %r15,%rcx
    0.00 :   6a865d:       mov    %rax,%rdi
    0.00 :   6a8660:       mov    -0x118d8(%rbp),%rsi
    0.00 :   6a8667:       callq  6a7580 <MlasSgemmMultiplyBeta(float*, unsigned long, unsigned long, unsigned long, float)>
    0.00 :   6a866c:       jmpq   6a82c7 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x227>
    0.00 :   6a8671:       mov    -0x11918(%rbp),%rdx
    0.00 :   6a8678:       mov    -0x118d8(%rbp),%rsi
    0.00 :   6a867f:       movaps %xmm1,%xmm0
    0.00 :   6a8682:       mov    %r15,%rcx
    0.00 :   6a8685:       mov    -0x11930(%rbp),%rdi
    0.00 :   6a868c:       callq  6a7580 <MlasSgemmMultiplyBeta(float*, unsigned long, unsigned long, unsigned long, float)>
    0.00 :   6a8691:       jmpq   6a84ce <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x42e>
    0.00 :   6a8696:       movss  -0x11924(%rbp),%xmm3
    0.00 :   6a869e:       pxor   %xmm1,%xmm1
    0.00 :   6a86a2:       ucomiss %xmm1,%xmm3
    0.00 :   6a86a5:       setnp  %al
    0.00 :   6a86a8:       cmovne %ecx,%eax
    0.00 :   6a86ab:       test   %al,%al
    0.00 :   6a86ad:       jne    6a86c0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x620>
    0.00 :   6a86af:       ucomiss %xmm0,%xmm3
    0.00 :   6a86b2:       setnp  %cl
    0.00 :   6a86b5:       cmove  %ecx,%eax
    0.00 :   6a86b8:       test   %al,%al
    0.00 :   6a86ba:       je     6a8183 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0xe3>
    0.00 :   6a86c0:       lea    0x582879(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a86c7:       cmpl   $0x6f,-0x118e8(%rbp)
    0.00 :   6a86ce:       mov    0x10(%rax),%r10
    0.00 :   6a86d2:       cmove  0x8(%rax),%r10
    0.00 :   6a86d7:       test   %r10,%r10
    0.00 :   6a86da:       je     6a8183 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0xe3>
    0.00 :   6a86e0:       movss  -0x11924(%rbp),%xmm0
    0.00 :   6a86e8:       mov    -0x118e0(%rbp),%r9
    0.00 :   6a86ef:       mov    -0x11918(%rbp),%r8
    0.00 :   6a86f6:       mov    -0x118c8(%rbp),%rcx
    0.00 :   6a86fd:       mov    -0x11930(%rbp),%rdx
    0.00 :   6a8704:       mov    -0x118f8(%rbp),%rsi
    0.00 :   6a870b:       mov    -0x118f0(%rbp),%rdi
    0.00 :   6a8712:       callq  *%r10
    0.00 :   6a8715:       jmpq   6a84ce <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x42e>
    0.00 :   6a871a:       mov    -0x11918(%rbp),%rax
    0.00 :   6a8721:       cmp    $0x40,%rax
    0.00 :   6a8725:       ja     6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
    0.00 :   6a872b:       cmp    $0x20,%rax
    0.00 :   6a872f:       ja     6a87c7 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x727>
    0.00 :   6a8735:       cmp    $0x11,%rax
    0.00 :   6a8739:       sbb    %rcx,%rcx
    0.00 :   6a873c:       and    $0x200,%ecx
    0.00 :   6a8742:       add    $0x200,%rcx
    0.00 :   6a8749:       cmp    $0x11,%rax
    0.00 :   6a874d:       sbb    %rax,%rax
    0.00 :   6a8750:       mov    %rcx,-0x118d0(%rbp)
    0.00 :   6a8757:       and    $0xfffffffffffffff0,%rax
    0.00 :   6a875b:       add    $0x20,%rax
    0.00 :   6a875f:       mov    %rax,-0x11920(%rbp)
    0.00 :   6a8766:       jmpq   6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
    0.00 :   6a876b:       lea    0x5827ce(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8772:       cmpl   $0x6f,-0x118e4(%rbp)
    0.00 :   6a8779:       mov    0x10(%rax),%rdx
    0.00 :   6a877d:       cmovne 0x8(%rax),%rdx
    0.00 :   6a8782:       mov    %rdx,%rax
    0.00 :   6a8785:       test   %rdx,%rdx
    0.00 :   6a8788:       je     6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a878e:       movss  -0x11924(%rbp),%xmm0
    0.00 :   6a8796:       mov    -0x118b8(%rbp),%r9
    0.00 :   6a879d:       mov    -0x118d8(%rbp),%r8
    0.00 :   6a87a4:       mov    -0x118c8(%rbp),%rcx
    0.00 :   6a87ab:       mov    -0x11930(%rbp),%rdx
    0.00 :   6a87b2:       mov    -0x118f0(%rbp),%rsi
    0.00 :   6a87b9:       mov    -0x118f8(%rbp),%rdi
    0.00 :   6a87c0:       callq  *%rax
    0.00 :   6a87c2:       jmpq   6a84ce <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x42e>
    0.00 :   6a87c7:       movq   $0x100,-0x118d0(%rbp)
    0.00 :   6a87d2:       movq   $0x40,-0x11920(%rbp)
    0.00 :   6a87dd:       jmpq   6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
    0.00 :   6a87e2:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   6a87e7:       nopw   0x0(%rax,%rax,1)
    0.00 :   6a87f0:       movq   $0x80,-0x118d0(%rbp)
    0.00 :   6a87fb:       movq   $0x80,-0x11920(%rbp)
    0.00 :   6a8806:       jmpq   6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000058e810 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::_M_erase(std::_Rb_tree_node<unsigned long>*)>:
         :            _ZNSt8_Rb_treeImmSt9_IdentityImEN11onnxruntime8BFCArena3Bin15ChunkComparatorESaImEE8_M_eraseEPSt13_Rb_tree_nodeImE():
         :            void
         :            _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         :            _M_erase(_Link_type __x)
         :            {
         :            // Erase without rebalancing.
         :            while (__x != 0)
  100.00 :   58e810:       test   %rsi,%rsi
    0.00 :   58e813:       je     58e848 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::_M_erase(std::_Rb_tree_node<unsigned long>*)+0x38>
         :            _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :   58e815:       push   %r12
    0.00 :   58e817:       mov    %rdi,%r12
    0.00 :   58e81a:       push   %rbp
    0.00 :   58e81b:       push   %rbx
    0.00 :   58e81c:       mov    %rsi,%rbx
         :            {
         :            _M_erase(_S_right(__x));
    0.00 :   58e81f:       mov    0x18(%rbx),%rsi
    0.00 :   58e823:       mov    %r12,%rdi
    0.00 :   58e826:       callq  58e810 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::_M_erase(std::_Rb_tree_node<unsigned long>*)>
         :            _Link_type __y = _S_left(__x);
    0.00 :   58e82b:       mov    0x10(%rbx),%rbp
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   58e82f:       mov    %rbx,%rdi
    0.00 :   58e832:       callq  53300 <operator delete(void*)@plt>
         :            while (__x != 0)
    0.00 :   58e837:       mov    %rbp,%rbx
    0.00 :   58e83a:       test   %rbp,%rbp
    0.00 :   58e83d:       jne    58e81f <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::_M_erase(std::_Rb_tree_node<unsigned long>*)+0xf>
         :            _M_drop_node(__x);
         :            __x = __y;
         :            }
         :            }
    0.00 :   58e83f:       pop    %rbx
    0.00 :   58e840:       pop    %rbp
    0.00 :   58e841:       pop    %r12
    0.00 :   58e843:       retq
    0.00 :   58e844:       nopl   0x0(%rax)
    0.00 :   58e848:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004be860 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)>:
         :            _ZN11onnxruntime12_GLOBAL__N_1L13UntypedSelectERNS_15OpKernelContextEbRKNS_15TensorAllocatorEPFSt10unique_ptrINS_6TensorESt14default_deleteIS7_EES5_RKNS_11TensorShapeEERKNS_25ProcessBroadcastSpanFuncsE():
    0.00 :   4be860:       push   %r15
    0.00 :   4be862:       mov    %r9,%r15
    0.00 :   4be865:       push   %r14
    0.00 :   4be867:       mov    %r8,%r14
    0.00 :   4be86a:       push   %r13
    0.00 :   4be86c:       mov    %rcx,%r13
    0.00 :   4be86f:       push   %r12
    0.00 :   4be871:       mov    %rsi,%r12
    0.00 :   4be874:       xor    %esi,%esi
    0.00 :   4be876:       push   %rbp
    0.00 :   4be877:       mov    %rdi,%rbp
    0.00 :   4be87a:       mov    %r12,%rdi
    0.00 :   4be87d:       push   %rbx
    0.00 :   4be87e:       sub    $0x1b8,%rsp
    0.00 :   4be885:       mov    %dl,0xf(%rsp)
    0.00 :   4be889:       mov    %edx,(%rsp)
    0.00 :   4be88c:       mov    %fs:0x28,%rax
    0.00 :   4be895:       mov    %rax,0x1a8(%rsp)
    0.00 :   4be89d:       xor    %eax,%eax
    0.00 :   4be89f:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   4be8a4:       mov    (%rsp),%edx
    0.00 :   4be8a7:       xor    %esi,%esi
    0.00 :   4be8a9:       mov    %r12,%rdi
    0.00 :   4be8ac:       mov    %rax,%rbx
    0.00 :   4be8af:       test   %dl,%dl
    0.00 :   4be8b1:       sete   %sil
    0.00 :   4be8b5:       add    $0x1,%esi
    0.00 :   4be8b8:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   4be8bd:       mov    0x30(%rbx),%rdi
    0.00 :   4be8c1:       mov    %rbx,0xa0(%rsp)
    0.00 :   4be8c9:       mov    %rax,0xa8(%rsp)
    0.00 :   4be8d1:       add    $0x18,%rax
    0.00 :   4be8d5:       mov    %rax,0xb0(%rsp)
    0.00 :   4be8dd:       mov    (%rdi),%rax
    0.00 :   4be8e0:       callq  *0x18(%rax)
    0.00 :   4be8e3:       mov    0xa8(%rsp),%rdx
    0.00 :   4be8eb:       mov    %rax,0xb8(%rsp)
    0.00 :   4be8f3:       test   %rdx,%rdx
    0.00 :   4be8f6:       je     4bebb0 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x350>
    0.00 :   4be8fc:       mov    0x30(%rdx),%rdi
    0.00 :   4be900:       mov    (%rdi),%rax
    0.00 :   4be903:       callq  *0x18(%rax)
    0.00 :   4be906:       mov    0xa0(%rsp),%rsi
    0.00 :   4be90e:       mov    0xa8(%rsp),%rdx
    0.00 :   4be916:       mov    %rax,0xc0(%rsp)
    0.00 :   4be91e:       mov    0x50(%rsi),%rax
    0.00 :   4be922:       add    (%rsi),%rax
    0.00 :   4be925:       mov    %rax,0xc8(%rsp)
    0.00 :   4be92d:       test   %rdx,%rdx
    0.00 :   4be930:       je     4be93c <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0xdc>
    0.00 :   4be932:       mov    0x50(%rdx),%rax
    0.00 :   4be936:       add    (%rdx),%rax
    0.00 :   4be939:       mov    %rax,%rdx
    0.00 :   4be93c:       mov    %rdx,0xd0(%rsp)
    0.00 :   4be944:       lea    0xa0(%rsp),%r12
    0.00 :   4be94c:       mov    0xb0(%rsp),%rdx
    0.00 :   4be954:       add    $0x18,%rsi
    0.00 :   4be958:       lea    0x38(%r12),%rdi
    0.00 :   4be95d:       callq  282e50 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)>
         :            min(const _Tp& __a, const _Tp& __b)
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :            //return __b < __a ? __b : __a;
         :            if (__b < __a)
    0.00 :   4be962:       mov    0x160(%rsp),%rdx
    0.00 :   4be96a:       mov    0x108(%rsp),%rax
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   4be972:       mov    0x188(%rsp),%rsi
    0.00 :   4be97a:       mov    (%rax),%rax
    0.00 :   4be97d:       cmp    %rax,(%rdx)
    0.00 :   4be980:       cmovle (%rdx),%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4be984:       movq   $0x0,0x40(%rsp)
    0.00 :   4be98d:       movq   $0x0,0x48(%rsp)
    0.00 :   4be996:       mov    %rax,0x1a0(%rsp)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   4be99e:       mov    0x190(%rsp),%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4be9a6:       movq   $0x0,0x50(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4be9af:       mov    %rax,%rbx
    0.00 :   4be9b2:       sub    %rsi,%rbx
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4be9b5:       mov    %rbx,%rdx
    0.00 :   4be9b8:       sar    $0x3,%rdx
    0.00 :   4be9bc:       je     4bebe0 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x380>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   4be9c2:       movabs $0x1fffffffffffffff,%rax
    0.00 :   4be9cc:       cmp    %rax,%rdx
    0.00 :   4be9cf:       ja     4bebef <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x38f>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4be9d5:       mov    %rbx,%rdi
    0.00 :   4be9d8:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4be9dd:       mov    %rax,%rcx
    0.00 :   4be9e0:       mov    0x190(%rsp),%rax
    0.00 :   4be9e8:       mov    0x188(%rsp),%rsi
    0.00 :   4be9f0:       mov    %rax,%r8
    0.00 :   4be9f3:       sub    %rsi,%r8
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4be9f6:       add    %rcx,%rbx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4be9f9:       mov    %rcx,0x40(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   4be9fe:       mov    %rcx,0x48(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4bea03:       mov    %rbx,0x50(%rsp)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   4bea08:       cmp    %rax,%rsi
    0.00 :   4bea0b:       je     4bea23 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x1c3>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   4bea0d:       mov    %r8,%rdx
    0.00 :   4bea10:       mov    %rcx,%rdi
    0.00 :   4bea13:       mov    %r8,(%rsp)
    0.00 :   4bea17:       callq  53aa0 <memmove@plt>
    0.00 :   4bea1c:       mov    (%rsp),%r8
    0.00 :   4bea20:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   4bea23:       add    %r8,%rcx
    0.00 :   4bea26:       lea    0x40(%rsp),%rbx
    0.00 :   4bea2b:       mov    %r13,%rsi
    0.00 :   4bea2e:       mov    %rbp,%rdi
    0.00 :   4bea31:       mov    %rcx,0x48(%rsp)
    0.00 :   4bea36:       mov    %rbx,%rdx
    0.00 :   4bea39:       callq  *%r14
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4bea3c:       mov    0x40(%rsp),%rdi
         :            if (__p)
    0.00 :   4bea41:       test   %rdi,%rdi
    0.00 :   4bea44:       je     4bea4b <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x1eb>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   4bea46:       callq  53300 <operator delete(void*)@plt>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   4bea4b:       mov    0x0(%rbp),%r13
    0.00 :   4bea4f:       mov    0x1a0(%rsp),%r14
    0.00 :   4bea57:       mov    0x30(%r13),%rdi
    0.00 :   4bea5b:       mov    (%rdi),%rax
    0.00 :   4bea5e:       callq  *0x18(%rax)
    0.00 :   4bea61:       lea    0x18(%r13),%rdi
    0.00 :   4bea65:       mov    %rax,0x10(%rsp)
    0.00 :   4bea6a:       mov    %r14,0x18(%rsp)
    0.00 :   4bea6f:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   4bea74:       mov    %rax,0x20(%rsp)
    0.00 :   4bea79:       mov    0x50(%r13),%rdx
    0.00 :   4bea7d:       mov    %r15,%rsi
    0.00 :   4bea80:       mov    %rbx,%rdi
    0.00 :   4bea83:       imul   0x10(%rsp),%rax
    0.00 :   4bea89:       add    0x0(%r13),%rdx
    0.00 :   4bea8d:       mov    %r12,0x40(%rsp)
    0.00 :   4bea92:       mov    %rdx,0x28(%rsp)
    0.00 :   4bea97:       movq   $0x0,0x50(%rsp)
    0.00 :   4beaa0:       movq   $0x0,0x58(%rsp)
    0.00 :   4beaa9:       add    %rax,%rdx
    0.00 :   4beaac:       lea    0x10(%rsp),%rax
    0.00 :   4beab1:       mov    %rax,0x48(%rsp)
    0.00 :   4beab6:       mov    0x1a0(%rsp),%rax
    0.00 :   4beabe:       mov    %rdx,0x30(%rsp)
    0.00 :   4beac3:       mov    %rax,0x68(%rsp)
    0.00 :   4beac8:       mov    %rax,0x78(%rsp)
    0.00 :   4beacd:       mov    %rax,0x88(%rsp)
    0.00 :   4bead5:       movzbl 0xf(%rsp),%eax
    0.00 :   4beada:       movq   $0x0,0x60(%rsp)
    0.00 :   4beae3:       movq   $0x0,0x70(%rsp)
    0.00 :   4beaec:       movq   $0x0,0x80(%rsp)
    0.00 :   4beaf8:       mov    %rax,0x90(%rsp)
    0.00 :   4beb00:       callq  280280 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4beb05:       mov    0x188(%rsp),%rdi
         :            if (__p)
  100.00 :   4beb0d:       test   %rdi,%rdi
    0.00 :   4beb10:       je     4beb17 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x2b7>
    0.00 :   4beb12:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4beb17:       mov    0x160(%rsp),%rdi
         :            if (__p)
    0.00 :   4beb1f:       test   %rdi,%rdi
    0.00 :   4beb22:       je     4beb29 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x2c9>
    0.00 :   4beb24:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4beb29:       mov    0x148(%rsp),%rdi
         :            if (__p)
    0.00 :   4beb31:       test   %rdi,%rdi
    0.00 :   4beb34:       je     4beb3b <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x2db>
    0.00 :   4beb36:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4beb3b:       mov    0x130(%rsp),%rdi
         :            if (__p)
    0.00 :   4beb43:       test   %rdi,%rdi
    0.00 :   4beb46:       je     4beb4d <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x2ed>
    0.00 :   4beb48:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4beb4d:       mov    0x108(%rsp),%rdi
         :            if (__p)
    0.00 :   4beb55:       test   %rdi,%rdi
    0.00 :   4beb58:       je     4beb5f <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x2ff>
    0.00 :   4beb5a:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4beb5f:       mov    0xf0(%rsp),%rdi
         :            if (__p)
    0.00 :   4beb67:       test   %rdi,%rdi
    0.00 :   4beb6a:       je     4beb71 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x311>
    0.00 :   4beb6c:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4beb71:       mov    0xd8(%rsp),%rdi
         :            if (__p)
    0.00 :   4beb79:       test   %rdi,%rdi
    0.00 :   4beb7c:       je     4beb83 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x323>
    0.00 :   4beb7e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4beb83:       mov    0x1a8(%rsp),%rcx
    0.00 :   4beb8b:       xor    %fs:0x28,%rcx
    0.00 :   4beb94:       mov    %rbp,%rax
    0.00 :   4beb97:       jne    4bebea <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x38a>
    0.00 :   4beb99:       add    $0x1b8,%rsp
    0.00 :   4beba0:       pop    %rbx
    0.00 :   4beba1:       pop    %rbp
    0.00 :   4beba2:       pop    %r12
    0.00 :   4beba4:       pop    %r13
    0.00 :   4beba6:       pop    %r14
    0.00 :   4beba8:       pop    %r15
    0.00 :   4bebaa:       retq
    0.00 :   4bebab:       nopl   0x0(%rax,%rax,1)
    0.00 :   4bebb0:       mov    0xa0(%rsp),%rsi
    0.00 :   4bebb8:       movq   $0x0,0xc0(%rsp)
    0.00 :   4bebc4:       mov    0x50(%rsi),%rax
    0.00 :   4bebc8:       add    (%rsi),%rax
    0.00 :   4bebcb:       mov    %rax,0xc8(%rsp)
    0.00 :   4bebd3:       jmpq   4be93c <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0xdc>
    0.00 :   4bebd8:       nopl   0x0(%rax,%rax,1)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4bebe0:       mov    %rbx,%r8
    0.00 :   4bebe3:       xor    %ecx,%ecx
    0.00 :   4bebe5:       jmpq   4be9f6 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&)+0x196>
    0.00 :   4bebea:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   4bebef:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   4bebf4:       mov    %rax,%rbx
    0.00 :   4bebf7:       jmpq   9bb43 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&) [clone .cold.760]>
    0.00 :   4bebfc:       mov    %rax,%rbx
    0.00 :   4bebff:       jmpq   9bb63 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&) [clone .cold.760]+0x20>
    0.00 :   4bec04:       mov    %rax,%rbx
    0.00 :   4bec07:       jmpq   9bb51 <onnxruntime::(anonymous namespace)::UntypedSelect(onnxruntime::OpKernelContext&, bool, onnxruntime::TensorAllocator const&, std::unique_ptr<onnxruntime::Tensor, std::default_delete<onnxruntime::Tensor> > (*)(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&), onnxruntime::ProcessBroadcastSpanFuncs const&) [clone .cold.760]+0xe>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004bcc50 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)>:
         :            _ZZNK11onnxruntime5WhereIfE7ComputeEPNS_15OpKernelContextEENUlRKNS_15TensorAllocatorERKNS_11TensorShapeEE_4_FUNES6_S9_():
    0.00 :   4bcc50:       push   %r13
    0.00 :   4bcc52:       mov    %rdx,%r13
    0.00 :   4bcc55:       push   %r12
    0.00 :   4bcc57:       push   %rbp
    0.00 :   4bcc58:       mov    %rdi,%rbp
    0.00 :   4bcc5b:       push   %rbx
    0.00 :   4bcc5c:       mov    %rsi,%rbx
    0.00 :   4bcc5f:       sub    $0x28,%rsp
    0.00 :   4bcc63:       mov    %fs:0x28,%rax
    0.00 :   4bcc6c:       mov    %rax,0x18(%rsp)
    0.00 :   4bcc71:       xor    %eax,%eax
    0.00 :   4bcc73:       callq  59c440 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<float>()>
    0.00 :   4bcc78:       mov    %rax,%r12
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   4bcc7b:       mov    (%rbx),%rax
    0.00 :   4bcc7e:       mov    %rax,(%rsp)
         :            : _M_pi(__r._M_pi)
    0.00 :   4bcc82:       mov    0x8(%rbx),%rax
    0.00 :   4bcc86:       mov    %rax,0x8(%rsp)
         :            if (_M_pi != 0)
    0.00 :   4bcc8b:       test   %rax,%rax
    0.00 :   4bcc8e:       je     4bcc9f <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0x4f>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   4bcc90:       cmpq   $0x0,0x76b270(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4bcc98:       je     4bcd10 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0xc0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4bcc9a:       lock addl $0x1,0x8(%rax)
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
  100.00 :   4bcc9f:       mov    $0x58,%edi
    0.00 :   4bcca4:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4bcca9:       mov    %rsp,%rcx
    0.00 :   4bccac:       mov    %r13,%rdx
    0.00 :   4bccaf:       mov    %r12,%rsi
    0.00 :   4bccb2:       mov    %rax,%rdi
    0.00 :   4bccb5:       mov    %rax,%rbx
    0.00 :   4bccb8:       callq  5ee4f0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)>
         :            __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    0.00 :   4bccbd:       mov    %rbx,0x0(%rbp)
         :            if (_M_pi != nullptr)
    0.00 :   4bccc1:       mov    0x8(%rsp),%rbx
    0.00 :   4bccc6:       test   %rbx,%rbx
    0.00 :   4bccc9:       je     4bccf0 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0xa0>
         :            if (__gthread_active_p())
    0.00 :   4bcccb:       mov    0x76b236(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4bccd2:       test   %r12,%r12
    0.00 :   4bccd5:       je     4bcd20 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0xd0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4bccd7:       mov    $0xffffffff,%eax
    0.00 :   4bccdc:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4bcce1:       cmp    $0x1,%eax
    0.00 :   4bcce4:       je     4bcd2e <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0xde>
    0.00 :   4bcce6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   4bccf0:       mov    0x18(%rsp),%rsi
    0.00 :   4bccf5:       xor    %fs:0x28,%rsi
    0.00 :   4bccfe:       mov    %rbp,%rax
    0.00 :   4bcd01:       jne    4bcd6b <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0x11b>
    0.00 :   4bcd03:       add    $0x28,%rsp
    0.00 :   4bcd07:       pop    %rbx
    0.00 :   4bcd08:       pop    %rbp
    0.00 :   4bcd09:       pop    %r12
    0.00 :   4bcd0b:       pop    %r13
    0.00 :   4bcd0d:       retq
    0.00 :   4bcd0e:       xchg   %ax,%ax
         :            { *__mem += __val; }
    0.00 :   4bcd10:       addl   $0x1,0x8(%rax)
    0.00 :   4bcd14:       jmp    4bcc9f <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0x4f>
    0.00 :   4bcd16:       nopw   %cs:0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   4bcd20:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4bcd23:       lea    -0x1(%rax),%edx
    0.00 :   4bcd26:       mov    %edx,0x8(%rbx)
    0.00 :   4bcd29:       cmp    $0x1,%eax
    0.00 :   4bcd2c:       jne    4bccf0 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0xa0>
         :            _M_dispose();
    0.00 :   4bcd2e:       mov    (%rbx),%rax
    0.00 :   4bcd31:       mov    %rbx,%rdi
    0.00 :   4bcd34:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4bcd37:       test   %r12,%r12
    0.00 :   4bcd3a:       je     4bcd60 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0x110>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4bcd3c:       mov    $0xffffffff,%eax
    0.00 :   4bcd41:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4bcd46:       cmp    $0x1,%eax
    0.00 :   4bcd49:       jne    4bccf0 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0xa0>
         :            _M_destroy();
    0.00 :   4bcd4b:       mov    (%rbx),%rax
    0.00 :   4bcd4e:       mov    %rbx,%rdi
    0.00 :   4bcd51:       callq  *0x18(%rax)
    0.00 :   4bcd54:       jmp    4bccf0 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0xa0>
    0.00 :   4bcd56:       nopw   %cs:0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   4bcd60:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4bcd63:       lea    -0x1(%rax),%edx
    0.00 :   4bcd66:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   4bcd69:       jmp    4bcd46 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0xf6>
    0.00 :   4bcd6b:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   4bcd70:       mov    %rax,%rbp
    0.00 :   4bcd73:       jmp    4bcd85 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0x135>
    0.00 :   4bcd75:       mov    %rax,%rbp
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   4bcd78:       mov    $0x58,%esi
    0.00 :   4bcd7d:       mov    %rbx,%rdi
    0.00 :   4bcd80:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            if (_M_pi != nullptr)
    0.00 :   4bcd85:       mov    0x8(%rsp),%rdi
    0.00 :   4bcd8a:       test   %rdi,%rdi
    0.00 :   4bcd8d:       je     4bcd94 <onnxruntime::Where<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)#1}::_FUN(onnxruntime::TensorAllocator const&, onnxruntime::TensorShape const&)+0x144>
         :            _M_pi->_M_release();
    0.00 :   4bcd8f:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   4bcd94:       mov    %rbp,%rdi
    0.00 :   4bcd97:       callq  53c30 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004126b0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const>:
         :            _ZNK11onnxruntime10ConcatBase17PrepareForComputeEPNS_15OpKernelContextERKSt6vectorIPKNS_6TensorESaIS6_EERNS_7PrepareE():
  100.00 :   4126b0:       push   %r15
    0.00 :   4126b2:       push   %r14
    0.00 :   4126b4:       push   %r13
    0.00 :   4126b6:       push   %r12
    0.00 :   4126b8:       push   %rbp
    0.00 :   4126b9:       push   %rbx
    0.00 :   4126ba:       sub    $0x448,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4126c1:       mov    0x8(%rcx),%rax
    0.00 :   4126c5:       mov    %rdi,0x20(%rsp)
    0.00 :   4126ca:       mov    %rsi,(%rsp)
    0.00 :   4126ce:       mov    %rdx,0x18(%rsp)
    0.00 :   4126d3:       mov    %rcx,0x10(%rsp)
    0.00 :   4126d8:       mov    %fs:0x28,%rdx
    0.00 :   4126e1:       mov    %rdx,0x438(%rsp)
    0.00 :   4126e9:       xor    %edx,%edx
    0.00 :   4126eb:       mov    (%rcx),%rdx
    0.00 :   4126ee:       sub    %rdx,%rax
    0.00 :   4126f1:       sar    $0x3,%rax
    0.00 :   4126f5:       mov    %rax,0x8(%rsp)
    0.00 :   4126fa:       test   %eax,%eax
    0.00 :   4126fc:       jle    413110 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa60>
    0.00 :   412702:       mov    (%rdx),%r13
    0.00 :   412705:       test   %r13,%r13
    0.00 :   412708:       je     413868 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x11b8>
    0.00 :   41270e:       mov    (%rsp),%rdx
    0.00 :   412712:       mov    0x20(%r13),%rax
    0.00 :   412716:       mov    %r8,%r14
    0.00 :   412719:       sub    0x18(%r13),%rax
    0.00 :   41271d:       sar    $0x3,%rax
    0.00 :   412721:       cmpb   $0x0,0x8(%rdx)
    0.00 :   412725:       mov    %rax,%rbp
    0.00 :   412728:       mov    %rax,0x58(%rsp)
    0.00 :   41272d:       jne    412960 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2b0>
    0.00 :   412733:       test   %rax,%rax
    0.00 :   412736:       je     4138b0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1200>
    0.00 :   41273c:       mov    (%rsp),%rax
    0.00 :   412740:       mov    (%rax),%rbx
    0.00 :   412743:       mov    %rbp,%rax
    0.00 :   412746:       neg    %rax
    0.00 :   412749:       cmp    %rax,%rbx
    0.00 :   41274c:       jl     414c0a <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x255a>
    0.00 :   412752:       cmp    %rbp,%rbx
    0.00 :   412755:       jge    414c0a <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x255a>
    0.00 :   41275b:       add    %rbx,%rbp
    0.00 :   41275e:       test   %rbx,%rbx
    0.00 :   412761:       cmovs  %rbp,%rbx
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   412765:       xor    %r12d,%r12d
    0.00 :   412768:       mov    %rbx,0x30(%r14)
    0.00 :   41276c:       movslq 0x8(%rsp),%rbx
    0.00 :   412771:       lea    0x0(,%rbx,8),%rdi
    0.00 :   412779:       mov    %rbx,0x28(%rsp)
    0.00 :   41277e:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   412783:       mov    %rbx,%rdx
    0.00 :   412786:       mov    %rax,0x38(%rsp)
         :            __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :            __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
         :            {
         :            const _Tp __tmp = __value;
         :            for (__decltype(__n + 0) __niter = __n;
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   41278b:       nopl   0x0(%rax,%rax,1)
         :            *__first = __tmp;
    0.00 :   412790:       movq   $0x0,(%rax,%r12,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   412798:       add    $0x1,%r12
    0.00 :   41279c:       cmp    %r12,%rdx
    0.00 :   41279f:       jne    412790 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xe0>
    0.00 :   4127a1:       lea    0x18(%r13),%rdi
    0.00 :   4127a5:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   4127aa:       mov    0x38(%rsp),%rsi
    0.00 :   4127af:       cmpl   $0x1,0x8(%rsp)
    0.00 :   4127b4:       mov    %rax,(%rsi)
    0.00 :   4127b7:       je     413fef <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x193f>
    0.00 :   4127bd:       mov    0x10(%rsp),%rax
    0.00 :   4127c2:       mov    (%rax),%r10
    0.00 :   4127c5:       mov    0x8(%r10),%rax
    0.00 :   4127c9:       test   %rax,%rax
    0.00 :   4127cc:       je     41431e <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c6e>
    0.00 :   4127d2:       mov    0x18(%rax),%rsi
    0.00 :   4127d6:       mov    0x20(%rax),%rax
    0.00 :   4127da:       mov    0x58(%rsp),%rcx
    0.00 :   4127df:       sub    %rsi,%rax
    0.00 :   4127e2:       sar    $0x3,%rax
    0.00 :   4127e6:       mov    %rax,0x60(%rsp)
    0.00 :   4127eb:       cmp    %rcx,%rax
    0.00 :   4127ee:       jne    412892 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1e2>
    0.00 :   4127f4:       mov    0x8(%rsp),%rax
    0.00 :   4127f9:       mov    (%rsp),%rdi
    0.00 :   4127fd:       xor    %r8d,%r8d
    0.00 :   412800:       lea    -0x2(%rax),%r9d
    0.00 :   412804:       shl    $0x3,%r9
    0.00 :   412808:       test   %rcx,%rcx
    0.00 :   41280b:       je     413f92 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x18e2>
    0.00 :   412811:       movzbl 0x8(%rdi),%edx
    0.00 :   412815:       xor    %ebx,%ebx
    0.00 :   412817:       mov    $0x1,%eax
    0.00 :   41281c:       nopl   0x0(%rax)
    0.00 :   412820:       mov    (%rsi,%rbx,8),%rbp
    0.00 :   412824:       lea    0x0(,%rbx,8),%r15
    0.00 :   41282c:       imul   %rbp,%rax
    0.00 :   412830:       test   %dl,%dl
    0.00 :   412832:       jne    41283a <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x18a>
    0.00 :   412834:       cmp    %rbx,0x30(%r14)
    0.00 :   412838:       je     412847 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x197>
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   41283a:       add    0x18(%r13),%r15
    0.00 :   41283e:       cmp    (%r15),%rbp
    0.00 :   412841:       jne    412970 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2c0>
    0.00 :   412847:       add    $0x1,%rbx
    0.00 :   41284b:       cmp    %rcx,%rbx
    0.00 :   41284e:       jne    412820 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x170>
    0.00 :   412850:       mov    0x38(%rsp),%rdx
    0.00 :   412855:       mov    %rax,0x8(%rdx,%r8,1)
    0.00 :   41285a:       cmp    %r8,%r9
    0.00 :   41285d:       je     413fef <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x193f>
    0.00 :   412863:       mov    0x10(%r10,%r8,1),%rax
    0.00 :   412868:       test   %rax,%rax
    0.00 :   41286b:       je     41431e <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c6e>
    0.00 :   412871:       mov    0x18(%rax),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   412875:       mov    0x20(%rax),%rax
    0.00 :   412879:       add    $0x8,%r8
    0.00 :   41287d:       sub    %rsi,%rax
    0.00 :   412880:       sar    $0x3,%rax
    0.00 :   412884:       mov    %rax,0x60(%rsp)
    0.00 :   412889:       cmp    %rcx,%rax
    0.00 :   41288c:       je     412808 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x158>
    0.00 :   412892:       mov    $0xa0,%edi
    0.00 :   412897:       lea    0xa0(%rsp),%rbp
    0.00 :   41289f:       lea    0x140(%rsp),%r13
    0.00 :   4128a7:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4128ac:       mov    %r13,%rdi
    0.00 :   4128af:       lea    0x58(%rsp),%rdx
    0.00 :   4128b4:       mov    %rbp,%rcx
    0.00 :   4128b7:       mov    %rax,%r14
    0.00 :   4128ba:       lea    0x45d319(%rip),%rax        # 86fbda <typeinfo name for onnxruntime::Compress+0x18a>
    0.00 :   4128c1:       lea    0x80(%rsp),%rsi
    0.00 :   4128c9:       mov    %rax,0xa0(%rsp)
    0.00 :   4128d1:       lea    0x60(%rsp),%r8
    0.00 :   4128d6:       lea    0x45d223(%rip),%rax        # 86fb00 <typeinfo name for onnxruntime::Compress+0xb0>
    0.00 :   4128dd:       mov    %rax,0x80(%rsp)
    0.00 :   4128e5:       callq  1a6270 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, unsigned long, char const*, unsigned long>(char const* const&, unsigned long const&, char const* const&, unsigned long const&)>
    0.00 :   4128ea:       mov    %rbp,%rdi
    0.00 :   4128ed:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4128f2:       lea    0x2c0(%rsp),%r12
    0.00 :   4128fa:       mov    %rbp,%r8
    0.00 :   4128fd:       lea    0x45d3dc(%rip),%rcx        # 86fce0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const::__PRETTY_FUNCTION__>
    0.00 :   412904:       mov    $0x48,%edx
    0.00 :   412909:       lea    0x45d1a8(%rip),%rsi        # 86fab8 <typeinfo name for onnxruntime::Compress+0x68>
    0.00 :   412910:       mov    %r12,%rdi
    0.00 :   412913:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   412918:       mov    %r13,%rcx
    0.00 :   41291b:       lea    0x45d22e(%rip),%rdx        # 86fb50 <typeinfo name for onnxruntime::Compress+0x100>
    0.00 :   412922:       mov    %r12,%rsi
    0.00 :   412925:       mov    %r14,%rdi
    0.00 :   412928:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   41292d:       mov    %r12,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   412930:       add    $0x10,%r13
    0.00 :   412934:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   412939:       mov    %rbp,%rdi
    0.00 :   41293c:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   412941:       mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   412949:       cmp    %r13,%rdi
    0.00 :   41294c:       je     8f72b <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x28b>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   412952:       callq  53300 <operator delete(void*)@plt>
    0.00 :   412957:       jmpq   8f72b <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x28b>
    0.00 :   41295c:       nopl   0x0(%rax)
    0.00 :   412960:       add    $0x1,%rbp
    0.00 :   412964:       jmpq   41273c <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x8c>
    0.00 :   412969:       nopl   0x0(%rax)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   412970:       lea    0xe0(%rsp),%rcx
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   412978:       lea    0x45d17a(%rip),%rdx        # 86faf9 <typeinfo name for onnxruntime::Compress+0xa9>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41297f:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   412983:       lea    -0x41(%rdx),%rsi
    0.00 :   412987:       mov    %rcx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41298a:       mov    %rcx,%r14
    0.00 :   41298d:       mov    %rcx,0x18(%rsp)
    0.00 :   412992:       mov    %rax,0xe0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   41299a:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   41299f:       lea    0x45d40b(%rip),%rdx        # 86fdb1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const::__FUNCTION__+0x11>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4129a6:       lea    0x38(%r14),%rax
    0.00 :   4129aa:       movl   $0x57,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4129b5:       lea    0x28(%r14),%rdi
    0.00 :   4129b9:       lea    -0x11(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4129bd:       mov    %rax,0x108(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4129c5:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   4129ca:       lea    0x140(%rsp),%r13
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4129d2:       movq   $0x0,0x128(%rsp)
    0.00 :   4129de:       movq   $0x0,0x130(%rsp)
    0.00 :   4129ea:       lea    0x70(%r13),%rdi
    0.00 :   4129ee:       movq   $0x0,0x138(%rsp)
    0.00 :   4129fa:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   4129ff:       mov    0x815122(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   412a06:       xor    %esi,%esi
    0.00 :   412a08:       movq   $0x0,0x288(%rsp)
    0.00 :   412a14:       mov    %si,0x290(%rsp)
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   412a1c:       xor    %esi,%esi
    0.00 :   412a1e:       mov    %rax,0x28(%rsp)
    0.00 :   412a23:       add    $0x10,%rax
    0.00 :   412a27:       mov    %rax,0x1b0(%rsp)
    0.00 :   412a2f:       mov    0x81536a(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   412a36:       movq   $0x0,0x298(%rsp)
    0.00 :   412a42:       movq   $0x0,0x2a0(%rsp)
    0.00 :   412a4e:       mov    0x8(%rax),%rcx
    0.00 :   412a52:       movq   $0x0,0x2a8(%rsp)
    0.00 :   412a5e:       mov    0x10(%rax),%rax
    0.00 :   412a62:       mov    -0x18(%rcx),%rdi
    0.00 :   412a66:       mov    %rcx,0x140(%rsp)
    0.00 :   412a6e:       movq   $0x0,0x2b0(%rsp)
    0.00 :   412a7a:       add    %r13,%rdi
    0.00 :   412a7d:       mov    %rcx,0x30(%rsp)
    0.00 :   412a82:       mov    %rax,(%rdi)
    0.00 :   412a85:       mov    %rax,0x40(%rsp)
    0.00 :   412a8a:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   412a8f:       mov    0x8152ca(%rip),%rdx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   412a96:       lea    0x40(%r13),%rdi
    0.00 :   412a9a:       movq   $0x0,0x150(%rsp)
    0.00 :   412aa6:       movq   $0x0,0x158(%rsp)
    0.00 :   412ab2:       lea    0x18(%rdx),%rax
    0.00 :   412ab6:       mov    %rdx,0x8(%rsp)
    0.00 :   412abb:       mov    %rax,0x140(%rsp)
    0.00 :   412ac3:       lea    0x40(%rdx),%rax
    0.00 :   412ac7:       mov    %rax,0x1b0(%rsp)
    0.00 :   412acf:       mov    0x81518a(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   412ad6:       movq   $0x0,0x160(%rsp)
    0.00 :   412ae2:       mov    %rax,(%rsp)
    0.00 :   412ae6:       add    $0x10,%rax
    0.00 :   412aea:       mov    %rax,0x148(%rsp)
    0.00 :   412af2:       movq   $0x0,0x168(%rsp)
    0.00 :   412afe:       movq   $0x0,0x170(%rsp)
    0.00 :   412b0a:       movq   $0x0,0x178(%rsp)
    0.00 :   412b16:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   412b1b:       mov    0x8154b6(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   412b22:       lea    0x8(%r13),%rsi
    0.00 :   412b26:       lea    0x70(%r13),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   412b2a:       movl   $0x10,0x188(%rsp)
    0.00 :   412b35:       mov    %rax,0x10(%rsp)
    0.00 :   412b3a:       add    $0x10,%rax
    0.00 :   412b3e:       mov    %rax,0x148(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   412b46:       lea    0x60(%r13),%rax
    0.00 :   412b4a:       mov    %rax,0x190(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   412b52:       movq   $0x0,0x198(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   412b5e:       movb   $0x0,0x1a0(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   412b66:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            size_type
         :            find_last_of(const _CharT* __s, size_type __pos = npos) const
         :            _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_string(__s);
         :            return this->find_last_of(__s, __pos, traits_type::length(__s));
    0.00 :   412b6b:       mov    0x18(%rsp),%rdi
    0.00 :   412b70:       mov    $0x2,%ecx
    0.00 :   412b75:       mov    $0xffffffffffffffff,%rdx
    0.00 :   412b7c:       lea    0x414585(%rip),%rsi        # 827108 <std::piecewise_construct+0x368>
    0.00 :   412b83:       callq  53ec0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const@plt>
         :            if (__pos > this->size())
    0.00 :   412b88:       mov    0xe8(%rsp),%rcx
    0.00 :   412b90:       add    $0x1,%rax
    0.00 :   412b94:       cmp    %rcx,%rax
    0.00 :   412b97:       ja     414bda <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x252a>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   412b9d:       lea    0x2c0(%rsp),%r12
         :            + __str._M_check(__pos, "basic_string::basic_string");
    0.00 :   412ba5:       mov    0xe0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   412bad:       lea    0x10(%r12),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   412bb2:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   412bb5:       mov    %rdx,0x2c0(%rsp)
         :            _M_construct(__start, __start + __str._M_limit(__pos, __n));
    0.00 :   412bbd:       lea    (%rsi,%rcx,1),%rdx
         :            const _CharT* __start = __str._M_data()
    0.00 :   412bc1:       add    %rax,%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   412bc4:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   412bc9:       mov    0x2c8(%rsp),%rdx
    0.00 :   412bd1:       mov    0x2c0(%rsp),%rsi
    0.00 :   412bd9:       mov    %r13,%rdi
    0.00 :   412bdc:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   412be1:       mov    $0x1,%edx
    0.00 :   412be6:       lea    0x4938c9(%rip),%rsi        # 8a64b6 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0x9a>
    0.00 :   412bed:       mov    %rax,%rdi
    0.00 :   412bf0:       mov    %rax,%r14
    0.00 :   412bf3:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   412bf8:       mov    0x100(%rsp),%esi
    0.00 :   412bff:       mov    %r14,%rdi
    0.00 :   412c02:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   412c07:       mov    $0x1,%edx
    0.00 :   412c0c:       lea    0x414b28(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   412c13:       mov    %rax,%rdi
    0.00 :   412c16:       mov    %rax,%r14
    0.00 :   412c19:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   412c1e:       mov    0x110(%rsp),%rdx
    0.00 :   412c26:       mov    0x108(%rsp),%rsi
    0.00 :   412c2e:       mov    %r14,%rdi
    0.00 :   412c31:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   412c36:       mov    0x2c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   412c3e:       lea    0x10(%r12),%rax
    0.00 :   412c43:       cmp    %rax,%rdi
    0.00 :   412c46:       je     412c4d <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x59d>
    0.00 :   412c48:       callq  53300 <operator delete(void*)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   412c4d:       lea    0xc0(%rsp),%r14
    0.00 :   412c55:       movb   $0x0,0xd0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   412c5d:       movq   $0x0,0xc8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   412c69:       lea    0x10(%r14),%rax
    0.00 :   412c6d:       mov    %rax,0xc0(%rsp)
         :            if (this->pptr())
    0.00 :   412c75:       mov    0x170(%rsp),%rax
    0.00 :   412c7d:       test   %rax,%rax
    0.00 :   412c80:       je     413f81 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x18d1>
         :            if (this->pptr() > this->egptr())
    0.00 :   412c86:       mov    0x160(%rsp),%r8
    0.00 :   412c8e:       mov    0x168(%rsp),%rcx
    0.00 :   412c96:       cmp    %r8,%rax
    0.00 :   412c99:       ja     413810 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1160>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   412c9f:       sub    %rcx,%r8
    0.00 :   412ca2:       xor    %edx,%edx
    0.00 :   412ca4:       xor    %esi,%esi
    0.00 :   412ca6:       mov    %r14,%rdi
    0.00 :   412ca9:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   412cae:       mov    0x8(%rsp),%rcx
         :            { return _M_data() == _M_local_data(); }
    0.00 :   412cb3:       mov    0x190(%rsp),%rdi
    0.00 :   412cbb:       lea    0x18(%rcx),%rax
    0.00 :   412cbf:       mov    %rax,0x140(%rsp)
    0.00 :   412cc7:       lea    0x40(%rcx),%rax
    0.00 :   412ccb:       mov    %rax,0x1b0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   412cd3:       mov    0x10(%rsp),%rax
    0.00 :   412cd8:       add    $0x10,%rax
    0.00 :   412cdc:       mov    %rax,0x148(%rsp)
         :            if (!_M_is_local())
    0.00 :   412ce4:       lea    0x60(%r13),%rax
    0.00 :   412ce8:       cmp    %rax,%rdi
    0.00 :   412ceb:       je     412cf2 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x642>
    0.00 :   412ced:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   412cf2:       mov    (%rsp),%rax
    0.00 :   412cf6:       lea    0x40(%r13),%rdi
    0.00 :   412cfa:       add    $0x10,%rax
    0.00 :   412cfe:       mov    %rax,0x148(%rsp)
    0.00 :   412d06:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   412d0b:       mov    0x30(%rsp),%rax
    0.00 :   412d10:       mov    0x40(%rsp),%rsi
         :            ~basic_ios() { }
    0.00 :   412d15:       lea    0x70(%r13),%rdi
    0.00 :   412d19:       mov    0x28(%rsp),%rdx
    0.00 :   412d1e:       mov    %rax,0x140(%rsp)
    0.00 :   412d26:       mov    -0x18(%rax),%rax
    0.00 :   412d2a:       mov    %rsi,0x140(%rsp,%rax,1)
    0.00 :   412d32:       lea    0x10(%rdx),%rax
    0.00 :   412d36:       mov    %rax,0x1b0(%rsp)
    0.00 :   412d3e:       mov    %rax,0x48(%rsp)
    0.00 :   412d43:       callq  52b40 <std::ios_base::~ios_base()@plt>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   412d48:       lea    0x70(%r12),%rdi
    0.00 :   412d4d:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   412d52:       mov    0x48(%rsp),%rax
    0.00 :   412d57:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   412d59:       mov    0x40(%rsp),%rsi
    0.00 :   412d5e:       mov    %cx,0x410(%rsp)
    0.00 :   412d66:       mov    %rax,0x330(%rsp)
    0.00 :   412d6e:       mov    0x30(%rsp),%rax
    0.00 :   412d73:       movq   $0x0,0x408(%rsp)
    0.00 :   412d7f:       mov    -0x18(%rax),%rdi
    0.00 :   412d83:       movq   $0x0,0x418(%rsp)
    0.00 :   412d8f:       movq   $0x0,0x420(%rsp)
    0.00 :   412d9b:       add    %r12,%rdi
    0.00 :   412d9e:       mov    %rax,0x2c0(%rsp)
    0.00 :   412da6:       movq   $0x0,0x428(%rsp)
    0.00 :   412db2:       movq   $0x0,0x430(%rsp)
    0.00 :   412dbe:       mov    %rsi,(%rdi)
    0.00 :   412dc1:       xor    %esi,%esi
    0.00 :   412dc3:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   412dc8:       mov    0x8(%rsp),%rcx
         :            _M_buf_locale(locale())
    0.00 :   412dcd:       lea    0x40(%r12),%rdi
    0.00 :   412dd2:       movq   $0x0,0x2d0(%rsp)
    0.00 :   412dde:       movq   $0x0,0x2d8(%rsp)
    0.00 :   412dea:       movq   $0x0,0x2e0(%rsp)
    0.00 :   412df6:       lea    0x18(%rcx),%rax
    0.00 :   412dfa:       mov    %rax,0x2c0(%rsp)
    0.00 :   412e02:       lea    0x40(%rcx),%rax
    0.00 :   412e06:       mov    %rax,0x330(%rsp)
    0.00 :   412e0e:       mov    (%rsp),%rax
    0.00 :   412e12:       movq   $0x0,0x2e8(%rsp)
    0.00 :   412e1e:       movq   $0x0,0x2f0(%rsp)
    0.00 :   412e2a:       add    $0x10,%rax
    0.00 :   412e2e:       mov    %rax,0x2c8(%rsp)
    0.00 :   412e36:       movq   $0x0,0x2f8(%rsp)
    0.00 :   412e42:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   412e47:       mov    0x10(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   412e4c:       lea    0x8(%r12),%rsi
    0.00 :   412e51:       lea    0x70(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   412e56:       movl   $0x10,0x308(%rsp)
    0.00 :   412e61:       add    $0x10,%rax
    0.00 :   412e65:       movb   $0x0,0x320(%rsp)
    0.00 :   412e6d:       mov    %rax,0x2c8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   412e75:       lea    0x60(%r12),%rax
    0.00 :   412e7a:       mov    %rax,0x310(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   412e82:       movq   $0x0,0x318(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   412e8e:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   412e93:       mov    0xc8(%rsp),%rdx
    0.00 :   412e9b:       mov    0xc0(%rsp),%rsi
    0.00 :   412ea3:       mov    %r12,%rdi
    0.00 :   412ea6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   412eab:       mov    $0x1,%edx
    0.00 :   412eb0:       lea    0x414884(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   412eb7:       mov    %r12,%rdi
    0.00 :   412eba:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   412ebf:       mov    $0x2c,%edx
    0.00 :   412ec4:       lea    0x45cca5(%rip),%rsi        # 86fb70 <typeinfo name for onnxruntime::Compress+0x120>
    0.00 :   412ecb:       mov    %r12,%rdi
    0.00 :   412ece:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   412ed3:       mov    %rbx,%rsi
    0.00 :   412ed6:       mov    %r12,%rdi
    0.00 :   412ed9:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   412ede:       mov    $0x1e,%edx
    0.00 :   412ee3:       lea    0x45ccb6(%rip),%rsi        # 86fba0 <typeinfo name for onnxruntime::Compress+0x150>
    0.00 :   412eea:       mov    %r12,%rdi
    0.00 :   412eed:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   412ef2:       mov    %rbp,%rsi
    0.00 :   412ef5:       mov    %r12,%rdi
    0.00 :   412ef8:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   412efd:       mov    $0x5,%edx
    0.00 :   412f02:       lea    0x427b1e(%rip),%rsi        # 83aa27 <typeinfo name for onnxruntime::BiasGeluFusion+0x47>
    0.00 :   412f09:       mov    %r12,%rdi
    0.00 :   412f0c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   412f11:       mov    (%r15),%rsi
    0.00 :   412f14:       mov    %r12,%rdi
    0.00 :   412f17:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   412f1c:       lea    0x10(%r13),%rax
         :            { _M_string_length = __length; }
    0.00 :   412f20:       movq   $0x0,0x148(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   412f2c:       mov    %rax,0x140(%rsp)
         :            if (this->pptr())
    0.00 :   412f34:       mov    0x2f0(%rsp),%rax
    0.00 :   412f3c:       movb   $0x0,0x150(%rsp)
    0.00 :   412f44:       test   %rax,%rax
    0.00 :   412f47:       je     413f6f <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x18bf>
         :            if (this->pptr() > this->egptr())
    0.00 :   412f4d:       mov    0x2e0(%rsp),%r8
    0.00 :   412f55:       mov    0x2e8(%rsp),%rcx
    0.00 :   412f5d:       cmp    %r8,%rax
    0.00 :   412f60:       jbe    413850 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x11a0>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   412f66:       sub    %rcx,%rax
    0.00 :   412f69:       xor    %edx,%edx
    0.00 :   412f6b:       xor    %esi,%esi
    0.00 :   412f6d:       mov    %r13,%rdi
    0.00 :   412f70:       mov    %rax,%r8
    0.00 :   412f73:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   412f78:       mov    0x8(%rsp),%rsi
         :            { return _M_data() == _M_local_data(); }
    0.00 :   412f7d:       mov    0x310(%rsp),%rdi
    0.00 :   412f85:       lea    0x18(%rsi),%rax
    0.00 :   412f89:       mov    %rax,0x2c0(%rsp)
    0.00 :   412f91:       lea    0x40(%rsi),%rax
    0.00 :   412f95:       mov    %rax,0x330(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   412f9d:       mov    0x10(%rsp),%rax
    0.00 :   412fa2:       add    $0x10,%rax
    0.00 :   412fa6:       mov    %rax,0x2c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   412fae:       lea    0x60(%r12),%rax
    0.00 :   412fb3:       cmp    %rax,%rdi
    0.00 :   412fb6:       je     412fbd <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x90d>
    0.00 :   412fb8:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   412fbd:       mov    (%rsp),%rax
    0.00 :   412fc1:       lea    0x40(%r12),%rdi
    0.00 :   412fc6:       add    $0x10,%rax
    0.00 :   412fca:       mov    %rax,0x2c8(%rsp)
    0.00 :   412fd2:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   412fd7:       mov    0x30(%rsp),%rax
    0.00 :   412fdc:       mov    0x40(%rsp),%rdx
         :            ~basic_ios() { }
    0.00 :   412fe1:       lea    0x70(%r12),%rdi
    0.00 :   412fe6:       mov    %rax,0x2c0(%rsp)
    0.00 :   412fee:       mov    -0x18(%rax),%rax
    0.00 :   412ff2:       mov    %rdx,0x2c0(%rsp,%rax,1)
    0.00 :   412ffa:       mov    0x28(%rsp),%rax
    0.00 :   412fff:       add    $0x10,%rax
    0.00 :   413003:       mov    %rax,0x330(%rsp)
    0.00 :   41300b:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   413010:       mov    0x20(%rsp),%rdi
    0.00 :   413015:       mov    %r13,%rcx
    0.00 :   413018:       mov    $0x1,%edx
    0.00 :   41301d:       mov    $0x2,%esi
    0.00 :   413022:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413027:       mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   41302f:       add    $0x10,%r13
    0.00 :   413033:       cmp    %r13,%rdi
    0.00 :   413036:       je     41303d <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x98d>
    0.00 :   413038:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   41303d:       mov    0xc0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   413045:       add    $0x10,%r14
    0.00 :   413049:       cmp    %r14,%rdi
    0.00 :   41304c:       je     413053 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x9a3>
    0.00 :   41304e:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   413053:       mov    0x130(%rsp),%rbp
    0.00 :   41305b:       mov    0x128(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   413063:       cmp    %rbx,%rbp
    0.00 :   413066:       je     413092 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x9e2>
    0.00 :   413068:       nopl   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413070:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   413073:       lea    0x10(%rbx),%rax
    0.00 :   413077:       cmp    %rax,%rdi
    0.00 :   41307a:       je     413081 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x9d1>
    0.00 :   41307c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   413081:       add    $0x20,%rbx
    0.00 :   413085:       cmp    %rbx,%rbp
    0.00 :   413088:       jne    413070 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x9c0>
    0.00 :   41308a:       mov    0x128(%rsp),%rbx
         :            if (__p)
    0.00 :   413092:       test   %rbx,%rbx
    0.00 :   413095:       je     41309f <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x9ef>
    0.00 :   413097:       mov    %rbx,%rdi
    0.00 :   41309a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   41309f:       mov    0x18(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4130a4:       mov    0x108(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4130ac:       add    $0x38,%rax
    0.00 :   4130b0:       cmp    %rax,%rdi
    0.00 :   4130b3:       je     4130ba <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa0a>
    0.00 :   4130b5:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4130ba:       mov    0x18(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4130bf:       mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4130c7:       add    $0x10,%rax
    0.00 :   4130cb:       cmp    %rax,%rdi
    0.00 :   4130ce:       je     4130d5 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa25>
    0.00 :   4130d0:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4130d5:       mov    0x38(%rsp),%rdi
    0.00 :   4130da:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4130df:       mov    0x438(%rsp),%rsi
    0.00 :   4130e7:       xor    %fs:0x28,%rsi
    0.00 :   4130f0:       mov    0x20(%rsp),%rax
    0.00 :   4130f5:       jne    414d50 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x26a0>
    0.00 :   4130fb:       add    $0x448,%rsp
    0.00 :   413102:       pop    %rbx
    0.00 :   413103:       pop    %rbp
    0.00 :   413104:       pop    %r12
    0.00 :   413106:       pop    %r13
    0.00 :   413108:       pop    %r14
    0.00 :   41310a:       pop    %r15
    0.00 :   41310c:       retq
    0.00 :   41310d:       nopl   (%rax)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   413110:       lea    0x140(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   413118:       lea    0x45c9da(%rip),%rdx        # 86faf9 <typeinfo name for onnxruntime::Compress+0xa9>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41311f:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   413123:       lea    -0x41(%rdx),%rsi
    0.00 :   413127:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41312a:       mov    %rax,0x140(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   413132:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   413137:       lea    0x45cc73(%rip),%rdx        # 86fdb1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const::__FUNCTION__+0x11>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41313e:       lea    0x38(%r13),%rax
    0.00 :   413142:       movl   $0x27,0x160(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   41314d:       lea    0x28(%r13),%rdi
    0.00 :   413151:       lea    -0x11(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   413155:       mov    %rax,0x168(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   41315d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   413162:       lea    0x2c0(%rsp),%r12
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   41316a:       movq   $0x0,0x188(%rsp)
    0.00 :   413176:       lea    0x70(%r12),%rdi
    0.00 :   41317b:       movq   $0x0,0x190(%rsp)
    0.00 :   413187:       movq   $0x0,0x198(%rsp)
    0.00 :   413193:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   413198:       mov    0x814989(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   41319f:       xor    %r10d,%r10d
         :            { this->init(0); }
    0.00 :   4131a2:       xor    %esi,%esi
    0.00 :   4131a4:       mov    %r10w,0x410(%rsp)
    0.00 :   4131ad:       mov    %rax,0x28(%rsp)
    0.00 :   4131b2:       add    $0x10,%rax
    0.00 :   4131b6:       mov    %rax,0x330(%rsp)
    0.00 :   4131be:       mov    0x814bdb(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   4131c5:       movq   $0x0,0x408(%rsp)
    0.00 :   4131d1:       mov    0x8(%rax),%rbx
    0.00 :   4131d5:       mov    0x10(%rax),%rbp
    0.00 :   4131d9:       movq   $0x0,0x418(%rsp)
    0.00 :   4131e5:       movq   $0x0,0x420(%rsp)
    0.00 :   4131f1:       mov    -0x18(%rbx),%rdi
    0.00 :   4131f5:       mov    %rbx,0x2c0(%rsp)
    0.00 :   4131fd:       movq   $0x0,0x428(%rsp)
    0.00 :   413209:       movq   $0x0,0x430(%rsp)
    0.00 :   413215:       add    %r12,%rdi
    0.00 :   413218:       mov    %rbp,(%rdi)
    0.00 :   41321b:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   413220:       mov    0x814b39(%rip),%rcx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   413227:       lea    0x40(%r12),%rdi
    0.00 :   41322c:       movq   $0x0,0x2d0(%rsp)
    0.00 :   413238:       movq   $0x0,0x2d8(%rsp)
    0.00 :   413244:       lea    0x18(%rcx),%rax
    0.00 :   413248:       mov    %rcx,0x8(%rsp)
    0.00 :   41324d:       mov    %rax,0x2c0(%rsp)
    0.00 :   413255:       lea    0x40(%rcx),%rax
    0.00 :   413259:       mov    %rax,0x330(%rsp)
    0.00 :   413261:       mov    0x8149f8(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   413268:       movq   $0x0,0x2e0(%rsp)
    0.00 :   413274:       mov    %rax,(%rsp)
    0.00 :   413278:       add    $0x10,%rax
    0.00 :   41327c:       mov    %rax,0x2c8(%rsp)
    0.00 :   413284:       movq   $0x0,0x2e8(%rsp)
    0.00 :   413290:       movq   $0x0,0x2f0(%rsp)
    0.00 :   41329c:       movq   $0x0,0x2f8(%rsp)
    0.00 :   4132a8:       callq  53eb0 <std::locale::locale()@plt>
         :            { this->init(&_M_stringbuf); }
    0.00 :   4132ad:       lea    0x8(%r12),%rsi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4132b2:       mov    0x814d1f(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   4132b9:       lea    0x70(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4132be:       movl   $0x10,0x308(%rsp)
    0.00 :   4132c9:       mov    %rax,0x10(%rsp)
    0.00 :   4132ce:       add    $0x10,%rax
    0.00 :   4132d2:       mov    %rax,0x2c8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   4132da:       lea    0x60(%r12),%rax
    0.00 :   4132df:       mov    %rax,0x310(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   4132e7:       movq   $0x0,0x318(%rsp)
    0.00 :   4132f3:       movb   $0x0,0x320(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   4132fb:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return this->find_last_of(__s, __pos, traits_type::length(__s));
    0.00 :   413300:       mov    $0x2,%ecx
    0.00 :   413305:       mov    $0xffffffffffffffff,%rdx
    0.00 :   41330c:       lea    0x413df5(%rip),%rsi        # 827108 <std::piecewise_construct+0x368>
    0.00 :   413313:       mov    %r13,%rdi
    0.00 :   413316:       callq  53ec0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const@plt>
         :            if (__pos > this->size())
    0.00 :   41331b:       mov    0x148(%rsp),%rcx
    0.00 :   413323:       add    $0x1,%rax
    0.00 :   413327:       cmp    %rcx,%rax
    0.00 :   41332a:       ja     414bf2 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2542>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   413330:       lea    0xe0(%rsp),%rdi
         :            + __str._M_check(__pos, "basic_string::basic_string");
    0.00 :   413338:       mov    0x140(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   413340:       lea    0x10(%rdi),%rdx
    0.00 :   413344:       mov    %rdi,%r15
    0.00 :   413347:       mov    %rdi,0x18(%rsp)
    0.00 :   41334c:       mov    %rdx,0xe0(%rsp)
         :            _M_construct(__start, __start + __str._M_limit(__pos, __n));
    0.00 :   413354:       lea    (%rsi,%rcx,1),%rdx
         :            const _CharT* __start = __str._M_data()
    0.00 :   413358:       add    %rax,%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   41335b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   413360:       mov    0xe8(%rsp),%rdx
    0.00 :   413368:       mov    0xe0(%rsp),%rsi
    0.00 :   413370:       mov    %r12,%rdi
    0.00 :   413373:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   413378:       mov    $0x1,%edx
    0.00 :   41337d:       lea    0x493132(%rip),%rsi        # 8a64b6 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0x9a>
    0.00 :   413384:       mov    %rax,%rdi
    0.00 :   413387:       mov    %rax,%r14
    0.00 :   41338a:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   41338f:       mov    0x160(%rsp),%esi
    0.00 :   413396:       mov    %r14,%rdi
    0.00 :   413399:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   41339e:       mov    $0x1,%edx
    0.00 :   4133a3:       lea    0x414391(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   4133aa:       mov    %rax,%rdi
    0.00 :   4133ad:       mov    %rax,%r14
    0.00 :   4133b0:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   4133b5:       mov    0x170(%rsp),%rdx
    0.00 :   4133bd:       mov    0x168(%rsp),%rsi
    0.00 :   4133c5:       mov    %r14,%rdi
    0.00 :   4133c8:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4133cd:       mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4133d5:       lea    0x10(%r15),%rax
    0.00 :   4133d9:       cmp    %rax,%rdi
    0.00 :   4133dc:       je     4133e3 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xd33>
    0.00 :   4133de:       callq  53300 <operator delete(void*)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4133e3:       lea    0xc0(%rsp),%r14
    0.00 :   4133eb:       movb   $0x0,0xd0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   4133f3:       movq   $0x0,0xc8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4133ff:       lea    0x10(%r14),%rax
    0.00 :   413403:       mov    %rax,0xc0(%rsp)
         :            if (this->pptr())
    0.00 :   41340b:       mov    0x2f0(%rsp),%rax
    0.00 :   413413:       test   %rax,%rax
    0.00 :   413416:       je     413fc7 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1917>
         :            if (this->pptr() > this->egptr())
    0.00 :   41341c:       mov    0x2e0(%rsp),%r8
    0.00 :   413424:       mov    0x2e8(%rsp),%rcx
    0.00 :   41342c:       cmp    %r8,%rax
    0.00 :   41342f:       ja     413830 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1180>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   413435:       sub    %rcx,%r8
    0.00 :   413438:       xor    %edx,%edx
    0.00 :   41343a:       xor    %esi,%esi
    0.00 :   41343c:       mov    %r14,%rdi
    0.00 :   41343f:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   413444:       mov    0x8(%rsp),%rsi
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413449:       mov    0x310(%rsp),%rdi
    0.00 :   413451:       lea    0x18(%rsi),%rax
    0.00 :   413455:       mov    %rax,0x2c0(%rsp)
    0.00 :   41345d:       lea    0x40(%rsi),%rax
    0.00 :   413461:       mov    %rax,0x330(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   413469:       mov    0x10(%rsp),%rax
    0.00 :   41346e:       add    $0x10,%rax
    0.00 :   413472:       mov    %rax,0x2c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   41347a:       lea    0x60(%r12),%rax
    0.00 :   41347f:       cmp    %rax,%rdi
    0.00 :   413482:       je     413489 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xdd9>
    0.00 :   413484:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   413489:       mov    (%rsp),%rax
    0.00 :   41348d:       lea    0x40(%r12),%rdi
    0.00 :   413492:       add    $0x10,%rax
    0.00 :   413496:       mov    %rax,0x2c8(%rsp)
    0.00 :   41349e:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   4134a3:       mov    -0x18(%rbx),%rax
         :            ~basic_ios() { }
    0.00 :   4134a7:       lea    0x70(%r12),%rdx
    0.00 :   4134ac:       mov    %rbx,0x2c0(%rsp)
    0.00 :   4134b4:       mov    %rdx,%rdi
    0.00 :   4134b7:       mov    %rdx,0x30(%rsp)
    0.00 :   4134bc:       mov    %rbp,0x2c0(%rsp,%rax,1)
    0.00 :   4134c4:       mov    0x28(%rsp),%rax
    0.00 :   4134c9:       lea    0x10(%rax),%r15
    0.00 :   4134cd:       mov    %r15,0x330(%rsp)
    0.00 :   4134d5:       callq  52b40 <std::ios_base::~ios_base()@plt>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   4134da:       mov    0x30(%rsp),%rdx
    0.00 :   4134df:       mov    %rdx,%rdi
    0.00 :   4134e2:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   4134e7:       xor    %r9d,%r9d
    0.00 :   4134ea:       mov    %r15,0x330(%rsp)
         :            { this->init(0); }
    0.00 :   4134f2:       xor    %esi,%esi
    0.00 :   4134f4:       mov    %r9w,0x410(%rsp)
    0.00 :   4134fd:       mov    -0x18(%rbx),%rdi
    0.00 :   413501:       movq   $0x0,0x408(%rsp)
    0.00 :   41350d:       add    %r12,%rdi
    0.00 :   413510:       movq   $0x0,0x418(%rsp)
    0.00 :   41351c:       movq   $0x0,0x420(%rsp)
    0.00 :   413528:       movq   $0x0,0x428(%rsp)
    0.00 :   413534:       movq   $0x0,0x430(%rsp)
    0.00 :   413540:       mov    %rbx,0x2c0(%rsp)
    0.00 :   413548:       mov    %rbp,(%rdi)
    0.00 :   41354b:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   413550:       mov    0x8(%rsp),%rcx
         :            _M_buf_locale(locale())
    0.00 :   413555:       lea    0x40(%r12),%rdi
    0.00 :   41355a:       movq   $0x0,0x2d0(%rsp)
    0.00 :   413566:       movq   $0x0,0x2d8(%rsp)
    0.00 :   413572:       movq   $0x0,0x2e0(%rsp)
    0.00 :   41357e:       lea    0x18(%rcx),%rax
    0.00 :   413582:       mov    %rax,0x2c0(%rsp)
    0.00 :   41358a:       lea    0x40(%rcx),%rax
    0.00 :   41358e:       mov    %rax,0x330(%rsp)
    0.00 :   413596:       mov    (%rsp),%rax
    0.00 :   41359a:       movq   $0x0,0x2e8(%rsp)
    0.00 :   4135a6:       movq   $0x0,0x2f0(%rsp)
    0.00 :   4135b2:       add    $0x10,%rax
    0.00 :   4135b6:       mov    %rax,0x2c8(%rsp)
    0.00 :   4135be:       movq   $0x0,0x2f8(%rsp)
    0.00 :   4135ca:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4135cf:       mov    0x10(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   4135d4:       lea    0x8(%r12),%rsi
    0.00 :   4135d9:       lea    0x70(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4135de:       movl   $0x10,0x308(%rsp)
    0.00 :   4135e9:       add    $0x10,%rax
    0.00 :   4135ed:       movb   $0x0,0x320(%rsp)
    0.00 :   4135f5:       mov    %rax,0x2c8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   4135fd:       lea    0x60(%r12),%rax
    0.00 :   413602:       mov    %rax,0x310(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   41360a:       movq   $0x0,0x318(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   413616:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   41361b:       mov    0xc8(%rsp),%rdx
    0.00 :   413623:       mov    0xc0(%rsp),%rsi
    0.00 :   41362b:       mov    %r12,%rdi
    0.00 :   41362e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   413633:       mov    $0x1,%edx
    0.00 :   413638:       lea    0x4140fc(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   41363f:       mov    %r12,%rdi
    0.00 :   413642:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   413647:       mov    %r12,%rdi
    0.00 :   41364a:       mov    $0x1a,%edx
    0.00 :   41364f:       lea    0x4317c7(%rip),%rsi        # 844e1d <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x59d>
    0.00 :   413656:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41365b:       mov    0x18(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   413660:       movq   $0x0,0xe8(%rsp)
    0.00 :   41366c:       movb   $0x0,0xf0(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   413674:       lea    0x10(%rdi),%rax
    0.00 :   413678:       mov    %rax,0xe0(%rsp)
         :            if (this->pptr())
    0.00 :   413680:       mov    0x2f0(%rsp),%rax
    0.00 :   413688:       test   %rax,%rax
    0.00 :   41368b:       je     413fb3 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1903>
         :            if (this->pptr() > this->egptr())
    0.00 :   413691:       mov    0x2e0(%rsp),%r8
    0.00 :   413699:       mov    0x2e8(%rsp),%rcx
    0.00 :   4136a1:       cmp    %r8,%rax
    0.00 :   4136a4:       jbe    413890 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x11e0>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   4136aa:       sub    %rcx,%rax
    0.00 :   4136ad:       xor    %edx,%edx
    0.00 :   4136af:       xor    %esi,%esi
    0.00 :   4136b1:       mov    %rax,%r8
    0.00 :   4136b4:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   4136b9:       mov    0x8(%rsp),%rdx
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4136be:       mov    0x310(%rsp),%rdi
    0.00 :   4136c6:       lea    0x18(%rdx),%rax
    0.00 :   4136ca:       mov    %rax,0x2c0(%rsp)
    0.00 :   4136d2:       lea    0x40(%rdx),%rax
    0.00 :   4136d6:       mov    %rax,0x330(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   4136de:       mov    0x10(%rsp),%rax
    0.00 :   4136e3:       add    $0x10,%rax
    0.00 :   4136e7:       mov    %rax,0x2c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   4136ef:       lea    0x60(%r12),%rax
    0.00 :   4136f4:       cmp    %rax,%rdi
    0.00 :   4136f7:       je     4136fe <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x104e>
    0.00 :   4136f9:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   4136fe:       mov    (%rsp),%rax
    0.00 :   413702:       lea    0x40(%r12),%rdi
    0.00 :   413707:       add    $0x10,%rax
    0.00 :   41370b:       mov    %rax,0x2c8(%rsp)
    0.00 :   413713:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   413718:       mov    -0x18(%rbx),%rax
         :            ~basic_ios() { }
    0.00 :   41371c:       lea    0x70(%r12),%rdi
    0.00 :   413721:       mov    %rbx,0x2c0(%rsp)
    0.00 :   413729:       mov    %rbp,0x2c0(%rsp,%rax,1)
    0.00 :   413731:       mov    0x28(%rsp),%rax
    0.00 :   413736:       add    $0x10,%rax
    0.00 :   41373a:       mov    %rax,0x330(%rsp)
    0.00 :   413742:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   413747:       mov    0x18(%rsp),%rbx
    0.00 :   41374c:       mov    0x20(%rsp),%rdi
    0.00 :   413751:       mov    $0x1,%edx
    0.00 :   413756:       mov    $0x2,%esi
    0.00 :   41375b:       mov    %rbx,%rcx
    0.00 :   41375e:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   413763:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413766:       mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   41376e:       add    $0x10,%rax
    0.00 :   413772:       cmp    %rax,%rdi
    0.00 :   413775:       je     41377c <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x10cc>
    0.00 :   413777:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   41377c:       mov    0xc0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   413784:       add    $0x10,%r14
    0.00 :   413788:       cmp    %r14,%rdi
    0.00 :   41378b:       je     413792 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x10e2>
    0.00 :   41378d:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   413792:       mov    0x190(%rsp),%rbp
    0.00 :   41379a:       mov    0x188(%rsp),%rbx
    0.00 :   4137a2:       cmp    %rbx,%rbp
    0.00 :   4137a5:       je     4137d2 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1122>
    0.00 :   4137a7:       nopw   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4137b0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   4137b3:       lea    0x10(%rbx),%rax
    0.00 :   4137b7:       cmp    %rax,%rdi
    0.00 :   4137ba:       je     4137c1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1111>
    0.00 :   4137bc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4137c1:       add    $0x20,%rbx
    0.00 :   4137c5:       cmp    %rbx,%rbp
    0.00 :   4137c8:       jne    4137b0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1100>
    0.00 :   4137ca:       mov    0x188(%rsp),%rbx
         :            if (__p)
    0.00 :   4137d2:       test   %rbx,%rbx
    0.00 :   4137d5:       je     4137df <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x112f>
    0.00 :   4137d7:       mov    %rbx,%rdi
    0.00 :   4137da:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4137df:       mov    0x168(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4137e7:       lea    0x38(%r13),%rax
    0.00 :   4137eb:       cmp    %rax,%rdi
    0.00 :   4137ee:       je     4137f5 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1145>
    0.00 :   4137f0:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4137f5:       mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4137fd:       add    $0x10,%r13
    0.00 :   413801:       cmp    %r13,%rdi
    0.00 :   413804:       jne    4130da <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa2a>
    0.00 :   41380a:       jmpq   4130df <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa2f>
    0.00 :   41380f:       nop
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   413810:       sub    %rcx,%rax
    0.00 :   413813:       xor    %edx,%edx
    0.00 :   413815:       xor    %esi,%esi
    0.00 :   413817:       mov    %r14,%rdi
    0.00 :   41381a:       mov    %rax,%r8
    0.00 :   41381d:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   413822:       jmpq   412cae <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x5fe>
    0.00 :   413827:       nopw   0x0(%rax,%rax,1)
    0.00 :   413830:       sub    %rcx,%rax
    0.00 :   413833:       xor    %edx,%edx
    0.00 :   413835:       xor    %esi,%esi
    0.00 :   413837:       mov    %r14,%rdi
    0.00 :   41383a:       mov    %rax,%r8
    0.00 :   41383d:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   413842:       jmpq   413444 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xd94>
    0.00 :   413847:       nopw   0x0(%rax,%rax,1)
    0.00 :   413850:       sub    %rcx,%r8
    0.00 :   413853:       xor    %edx,%edx
    0.00 :   413855:       xor    %esi,%esi
    0.00 :   413857:       mov    %r13,%rdi
    0.00 :   41385a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   41385f:       jmpq   412f78 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x8c8>
    0.00 :   413864:       nopl   0x0(%rax)
    0.00 :   413868:       mov    0x20(%rsp),%rdi
    0.00 :   41386d:       mov    $0x1,%edx
    0.00 :   413872:       mov    $0x2,%esi
    0.00 :   413877:       lea    0x42b9b4(%rip),%rcx        # 83f232 <typeinfo name for onnxruntime::OpKernel* (*)(onnxruntime::OpKernelInfo const&)+0x312>
    0.00 :   41387e:       callq  6975f0 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, char const*)>
    0.00 :   413883:       jmpq   4130df <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa2f>
    0.00 :   413888:       nopl   0x0(%rax,%rax,1)
    0.00 :   413890:       mov    0x18(%rsp),%rdi
    0.00 :   413895:       sub    %rcx,%r8
    0.00 :   413898:       xor    %edx,%edx
    0.00 :   41389a:       xor    %esi,%esi
    0.00 :   41389c:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   4138a1:       jmpq   4136b9 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1009>
    0.00 :   4138a6:       nopw   %cs:0x0(%rax,%rax,1)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4138b0:       lea    0x140(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4138b8:       lea    0x45c23a(%rip),%rdx        # 86faf9 <typeinfo name for onnxruntime::Compress+0xa9>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4138bf:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4138c3:       lea    -0x41(%rdx),%rsi
    0.00 :   4138c7:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4138ca:       mov    %rax,0x140(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4138d2:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   4138d7:       lea    0x45c4d3(%rip),%rdx        # 86fdb1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const::__FUNCTION__+0x11>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4138de:       lea    0x38(%r13),%rax
    0.00 :   4138e2:       movl   $0x33,0x160(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4138ed:       lea    0x28(%r13),%rdi
    0.00 :   4138f1:       lea    -0x11(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4138f5:       mov    %rax,0x168(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4138fd:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   413902:       lea    0x2c0(%rsp),%r12
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   41390a:       movq   $0x0,0x188(%rsp)
    0.00 :   413916:       lea    0x70(%r12),%rdi
    0.00 :   41391b:       movq   $0x0,0x190(%rsp)
    0.00 :   413927:       movq   $0x0,0x198(%rsp)
    0.00 :   413933:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   413938:       mov    0x8141e9(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   41393f:       xor    %r8d,%r8d
         :            { this->init(0); }
    0.00 :   413942:       xor    %esi,%esi
    0.00 :   413944:       mov    %r8w,0x410(%rsp)
    0.00 :   41394d:       mov    %rax,0x28(%rsp)
    0.00 :   413952:       add    $0x10,%rax
    0.00 :   413956:       mov    %rax,0x330(%rsp)
    0.00 :   41395e:       mov    0x81443b(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   413965:       movq   $0x0,0x408(%rsp)
    0.00 :   413971:       mov    0x8(%rax),%rbx
    0.00 :   413975:       mov    0x10(%rax),%rbp
    0.00 :   413979:       movq   $0x0,0x418(%rsp)
    0.00 :   413985:       movq   $0x0,0x420(%rsp)
    0.00 :   413991:       mov    -0x18(%rbx),%rdi
    0.00 :   413995:       mov    %rbx,0x2c0(%rsp)
    0.00 :   41399d:       movq   $0x0,0x428(%rsp)
    0.00 :   4139a9:       movq   $0x0,0x430(%rsp)
    0.00 :   4139b5:       add    %r12,%rdi
    0.00 :   4139b8:       mov    %rbp,(%rdi)
    0.00 :   4139bb:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   4139c0:       mov    0x814399(%rip),%rsi        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   4139c7:       lea    0x40(%r12),%rdi
    0.00 :   4139cc:       movq   $0x0,0x2d0(%rsp)
    0.00 :   4139d8:       movq   $0x0,0x2d8(%rsp)
    0.00 :   4139e4:       lea    0x18(%rsi),%rax
    0.00 :   4139e8:       mov    %rsi,0x8(%rsp)
    0.00 :   4139ed:       mov    %rax,0x2c0(%rsp)
    0.00 :   4139f5:       lea    0x40(%rsi),%rax
    0.00 :   4139f9:       mov    %rax,0x330(%rsp)
    0.00 :   413a01:       mov    0x814258(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   413a08:       movq   $0x0,0x2e0(%rsp)
    0.00 :   413a14:       mov    %rax,(%rsp)
    0.00 :   413a18:       add    $0x10,%rax
    0.00 :   413a1c:       mov    %rax,0x2c8(%rsp)
    0.00 :   413a24:       movq   $0x0,0x2e8(%rsp)
    0.00 :   413a30:       movq   $0x0,0x2f0(%rsp)
    0.00 :   413a3c:       movq   $0x0,0x2f8(%rsp)
    0.00 :   413a48:       callq  53eb0 <std::locale::locale()@plt>
         :            { this->init(&_M_stringbuf); }
    0.00 :   413a4d:       lea    0x8(%r12),%rsi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   413a52:       mov    0x81457f(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   413a59:       lea    0x70(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   413a5e:       movl   $0x10,0x308(%rsp)
    0.00 :   413a69:       mov    %rax,0x10(%rsp)
    0.00 :   413a6e:       add    $0x10,%rax
    0.00 :   413a72:       mov    %rax,0x2c8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   413a7a:       lea    0x60(%r12),%rax
    0.00 :   413a7f:       mov    %rax,0x310(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   413a87:       movq   $0x0,0x318(%rsp)
    0.00 :   413a93:       movb   $0x0,0x320(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   413a9b:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return this->find_last_of(__s, __pos, traits_type::length(__s));
    0.00 :   413aa0:       mov    $0x2,%ecx
    0.00 :   413aa5:       mov    $0xffffffffffffffff,%rdx
    0.00 :   413aac:       lea    0x413655(%rip),%rsi        # 827108 <std::piecewise_construct+0x368>
    0.00 :   413ab3:       mov    %r13,%rdi
    0.00 :   413ab6:       callq  53ec0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const@plt>
         :            if (__pos > this->size())
    0.00 :   413abb:       mov    0x148(%rsp),%rcx
    0.00 :   413ac3:       add    $0x1,%rax
    0.00 :   413ac7:       cmp    %rcx,%rax
    0.00 :   413aca:       ja     414d1e <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x266e>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   413ad0:       lea    0xe0(%rsp),%rdi
         :            + __str._M_check(__pos, "basic_string::basic_string");
    0.00 :   413ad8:       mov    0x140(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   413ae0:       lea    0x10(%rdi),%rdx
    0.00 :   413ae4:       mov    %rdi,%r15
    0.00 :   413ae7:       mov    %rdi,0x18(%rsp)
    0.00 :   413aec:       mov    %rdx,0xe0(%rsp)
         :            _M_construct(__start, __start + __str._M_limit(__pos, __n));
    0.00 :   413af4:       lea    (%rsi,%rcx,1),%rdx
         :            const _CharT* __start = __str._M_data()
    0.00 :   413af8:       add    %rax,%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   413afb:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   413b00:       mov    0xe8(%rsp),%rdx
    0.00 :   413b08:       mov    0xe0(%rsp),%rsi
    0.00 :   413b10:       mov    %r12,%rdi
    0.00 :   413b13:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   413b18:       mov    $0x1,%edx
    0.00 :   413b1d:       lea    0x492992(%rip),%rsi        # 8a64b6 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0x9a>
    0.00 :   413b24:       mov    %rax,%rdi
    0.00 :   413b27:       mov    %rax,%r14
    0.00 :   413b2a:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   413b2f:       mov    0x160(%rsp),%esi
    0.00 :   413b36:       mov    %r14,%rdi
    0.00 :   413b39:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   413b3e:       mov    $0x1,%edx
    0.00 :   413b43:       lea    0x413bf1(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   413b4a:       mov    %rax,%rdi
    0.00 :   413b4d:       mov    %rax,%r14
    0.00 :   413b50:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   413b55:       mov    0x170(%rsp),%rdx
    0.00 :   413b5d:       mov    0x168(%rsp),%rsi
    0.00 :   413b65:       mov    %r14,%rdi
    0.00 :   413b68:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413b6d:       mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   413b75:       lea    0x10(%r15),%rax
    0.00 :   413b79:       cmp    %rax,%rdi
    0.00 :   413b7c:       je     413b83 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x14d3>
    0.00 :   413b7e:       callq  53300 <operator delete(void*)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   413b83:       lea    0xc0(%rsp),%r14
    0.00 :   413b8b:       movb   $0x0,0xd0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   413b93:       movq   $0x0,0xc8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   413b9f:       lea    0x10(%r14),%rax
    0.00 :   413ba3:       mov    %rax,0xc0(%rsp)
         :            if (this->pptr())
    0.00 :   413bab:       mov    0x2f0(%rsp),%rax
    0.00 :   413bb3:       test   %rax,%rax
    0.00 :   413bb6:       je     41434b <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c9b>
         :            if (this->pptr() > this->egptr())
    0.00 :   413bbc:       mov    0x2e0(%rsp),%r8
    0.00 :   413bc4:       mov    0x2e8(%rsp),%rcx
    0.00 :   413bcc:       cmp    %r8,%rax
    0.00 :   413bcf:       ja     413f9c <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x18ec>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   413bd5:       sub    %rcx,%r8
    0.00 :   413bd8:       xor    %edx,%edx
    0.00 :   413bda:       xor    %esi,%esi
    0.00 :   413bdc:       mov    %r14,%rdi
    0.00 :   413bdf:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   413be4:       mov    0x8(%rsp),%rcx
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413be9:       mov    0x310(%rsp),%rdi
    0.00 :   413bf1:       lea    0x18(%rcx),%rax
    0.00 :   413bf5:       mov    %rax,0x2c0(%rsp)
    0.00 :   413bfd:       lea    0x40(%rcx),%rax
    0.00 :   413c01:       mov    %rax,0x330(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   413c09:       mov    0x10(%rsp),%rax
    0.00 :   413c0e:       add    $0x10,%rax
    0.00 :   413c12:       mov    %rax,0x2c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   413c1a:       lea    0x60(%r12),%rax
    0.00 :   413c1f:       cmp    %rax,%rdi
    0.00 :   413c22:       je     413c29 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1579>
    0.00 :   413c24:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   413c29:       mov    (%rsp),%rax
    0.00 :   413c2d:       lea    0x40(%r12),%rdi
    0.00 :   413c32:       add    $0x10,%rax
    0.00 :   413c36:       mov    %rax,0x2c8(%rsp)
    0.00 :   413c3e:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   413c43:       mov    -0x18(%rbx),%rax
         :            ~basic_ios() { }
    0.00 :   413c47:       lea    0x70(%r12),%rdx
    0.00 :   413c4c:       mov    %rbx,0x2c0(%rsp)
    0.00 :   413c54:       mov    %rdx,%rdi
    0.00 :   413c57:       mov    %rdx,0x30(%rsp)
    0.00 :   413c5c:       mov    %rbp,0x2c0(%rsp,%rax,1)
    0.00 :   413c64:       mov    0x28(%rsp),%rax
    0.00 :   413c69:       lea    0x10(%rax),%r15
    0.00 :   413c6d:       mov    %r15,0x330(%rsp)
    0.00 :   413c75:       callq  52b40 <std::ios_base::~ios_base()@plt>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   413c7a:       mov    0x30(%rsp),%rdx
    0.00 :   413c7f:       mov    %rdx,%rdi
    0.00 :   413c82:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   413c87:       xor    %edi,%edi
    0.00 :   413c89:       mov    %r15,0x330(%rsp)
         :            { this->init(0); }
    0.00 :   413c91:       xor    %esi,%esi
    0.00 :   413c93:       mov    %di,0x410(%rsp)
    0.00 :   413c9b:       mov    -0x18(%rbx),%rdi
    0.00 :   413c9f:       movq   $0x0,0x408(%rsp)
    0.00 :   413cab:       add    %r12,%rdi
    0.00 :   413cae:       movq   $0x0,0x418(%rsp)
    0.00 :   413cba:       movq   $0x0,0x420(%rsp)
    0.00 :   413cc6:       movq   $0x0,0x428(%rsp)
    0.00 :   413cd2:       movq   $0x0,0x430(%rsp)
    0.00 :   413cde:       mov    %rbx,0x2c0(%rsp)
    0.00 :   413ce6:       mov    %rbp,(%rdi)
    0.00 :   413ce9:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   413cee:       mov    0x8(%rsp),%rdx
         :            _M_buf_locale(locale())
    0.00 :   413cf3:       lea    0x40(%r12),%rdi
    0.00 :   413cf8:       movq   $0x0,0x2d0(%rsp)
    0.00 :   413d04:       movq   $0x0,0x2d8(%rsp)
    0.00 :   413d10:       movq   $0x0,0x2e0(%rsp)
    0.00 :   413d1c:       lea    0x18(%rdx),%rax
    0.00 :   413d20:       mov    %rax,0x2c0(%rsp)
    0.00 :   413d28:       lea    0x40(%rdx),%rax
    0.00 :   413d2c:       mov    %rax,0x330(%rsp)
    0.00 :   413d34:       mov    (%rsp),%rax
    0.00 :   413d38:       movq   $0x0,0x2e8(%rsp)
    0.00 :   413d44:       movq   $0x0,0x2f0(%rsp)
    0.00 :   413d50:       add    $0x10,%rax
    0.00 :   413d54:       mov    %rax,0x2c8(%rsp)
    0.00 :   413d5c:       movq   $0x0,0x2f8(%rsp)
    0.00 :   413d68:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   413d6d:       mov    0x10(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   413d72:       lea    0x8(%r12),%rsi
    0.00 :   413d77:       lea    0x70(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   413d7c:       movl   $0x10,0x308(%rsp)
    0.00 :   413d87:       add    $0x10,%rax
    0.00 :   413d8b:       movb   $0x0,0x320(%rsp)
    0.00 :   413d93:       mov    %rax,0x2c8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   413d9b:       lea    0x60(%r12),%rax
    0.00 :   413da0:       mov    %rax,0x310(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   413da8:       movq   $0x0,0x318(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   413db4:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   413db9:       mov    0xc8(%rsp),%rdx
    0.00 :   413dc1:       mov    0xc0(%rsp),%rsi
    0.00 :   413dc9:       mov    %r12,%rdi
    0.00 :   413dcc:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   413dd1:       mov    $0x1,%edx
    0.00 :   413dd6:       lea    0x41395e(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   413ddd:       mov    %r12,%rdi
    0.00 :   413de0:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   413de5:       mov    %r12,%rdi
    0.00 :   413de8:       mov    $0x1a,%edx
    0.00 :   413ded:       lea    0x45bdcb(%rip),%rsi        # 86fbbf <typeinfo name for onnxruntime::Compress+0x16f>
    0.00 :   413df4:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   413df9:       mov    0x18(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   413dfe:       movq   $0x0,0xe8(%rsp)
    0.00 :   413e0a:       movb   $0x0,0xf0(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   413e12:       lea    0x10(%rdi),%rax
    0.00 :   413e16:       mov    %rax,0xe0(%rsp)
         :            if (this->pptr())
    0.00 :   413e1e:       mov    0x2f0(%rsp),%rax
    0.00 :   413e26:       test   %rax,%rax
    0.00 :   413e29:       je     41435d <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1cad>
         :            if (this->pptr() > this->egptr())
    0.00 :   413e2f:       mov    0x2e0(%rsp),%r8
    0.00 :   413e37:       mov    0x2e8(%rsp),%rcx
    0.00 :   413e3f:       cmp    %r8,%rax
    0.00 :   413e42:       jbe    413fd9 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1929>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   413e48:       sub    %rcx,%rax
    0.00 :   413e4b:       xor    %edx,%edx
    0.00 :   413e4d:       xor    %esi,%esi
    0.00 :   413e4f:       mov    %rax,%r8
    0.00 :   413e52:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   413e57:       mov    0x8(%rsp),%rsi
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413e5c:       mov    0x310(%rsp),%rdi
    0.00 :   413e64:       lea    0x18(%rsi),%rax
    0.00 :   413e68:       mov    %rax,0x2c0(%rsp)
    0.00 :   413e70:       lea    0x40(%rsi),%rax
    0.00 :   413e74:       mov    %rax,0x330(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   413e7c:       mov    0x10(%rsp),%rax
    0.00 :   413e81:       add    $0x10,%rax
    0.00 :   413e85:       mov    %rax,0x2c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   413e8d:       lea    0x60(%r12),%rax
    0.00 :   413e92:       cmp    %rax,%rdi
    0.00 :   413e95:       je     413e9c <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x17ec>
    0.00 :   413e97:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   413e9c:       mov    (%rsp),%rax
    0.00 :   413ea0:       lea    0x40(%r12),%rdi
    0.00 :   413ea5:       add    $0x10,%rax
    0.00 :   413ea9:       mov    %rax,0x2c8(%rsp)
    0.00 :   413eb1:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   413eb6:       mov    -0x18(%rbx),%rax
         :            ~basic_ios() { }
    0.00 :   413eba:       lea    0x70(%r12),%rdi
    0.00 :   413ebf:       mov    %rbx,0x2c0(%rsp)
    0.00 :   413ec7:       mov    %rbp,0x2c0(%rsp,%rax,1)
    0.00 :   413ecf:       mov    0x28(%rsp),%rax
    0.00 :   413ed4:       add    $0x10,%rax
    0.00 :   413ed8:       mov    %rax,0x330(%rsp)
    0.00 :   413ee0:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   413ee5:       mov    0x18(%rsp),%rbx
    0.00 :   413eea:       mov    0x20(%rsp),%rdi
    0.00 :   413eef:       mov    $0x1,%edx
    0.00 :   413ef4:       mov    $0x2,%esi
    0.00 :   413ef9:       mov    %rbx,%rcx
    0.00 :   413efc:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   413f01:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413f04:       mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   413f0c:       add    $0x10,%rax
    0.00 :   413f10:       cmp    %rax,%rdi
    0.00 :   413f13:       je     413f1a <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x186a>
    0.00 :   413f15:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413f1a:       mov    0xc0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   413f22:       add    $0x10,%r14
    0.00 :   413f26:       cmp    %r14,%rdi
    0.00 :   413f29:       je     413f30 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1880>
    0.00 :   413f2b:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   413f30:       mov    0x190(%rsp),%rbp
    0.00 :   413f38:       mov    0x188(%rsp),%rbx
    0.00 :   413f40:       cmp    %rbx,%rbp
    0.00 :   413f43:       je     4137d2 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1122>
    0.00 :   413f49:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   413f50:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   413f53:       lea    0x10(%rbx),%rax
    0.00 :   413f57:       cmp    %rax,%rdi
    0.00 :   413f5a:       je     413f61 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x18b1>
    0.00 :   413f5c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   413f61:       add    $0x20,%rbx
    0.00 :   413f65:       cmp    %rbx,%rbp
    0.00 :   413f68:       jne    413f50 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x18a0>
    0.00 :   413f6a:       jmpq   4137ca <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x111a>
         :            this->_M_assign(__str);
    0.00 :   413f6f:       lea    0x50(%r12),%rsi
    0.00 :   413f74:       mov    %r13,%rdi
    0.00 :   413f77:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   413f7c:       jmpq   412f78 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x8c8>
    0.00 :   413f81:       lea    0x50(%r13),%rsi
    0.00 :   413f85:       mov    %r14,%rdi
    0.00 :   413f88:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   413f8d:       jmpq   412cae <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x5fe>
    0.00 :   413f92:       mov    $0x1,%eax
    0.00 :   413f97:       jmpq   412850 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1a0>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   413f9c:       sub    %rcx,%rax
    0.00 :   413f9f:       xor    %edx,%edx
    0.00 :   413fa1:       xor    %esi,%esi
    0.00 :   413fa3:       mov    %r14,%rdi
    0.00 :   413fa6:       mov    %rax,%r8
    0.00 :   413fa9:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   413fae:       jmpq   413be4 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1534>
         :            this->_M_assign(__str);
    0.00 :   413fb3:       mov    0x18(%rsp),%rdi
    0.00 :   413fb8:       lea    0x50(%r12),%rsi
    0.00 :   413fbd:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   413fc2:       jmpq   4136b9 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1009>
    0.00 :   413fc7:       lea    0x50(%r12),%rsi
    0.00 :   413fcc:       mov    %r14,%rdi
    0.00 :   413fcf:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   413fd4:       jmpq   413444 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xd94>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   413fd9:       mov    0x18(%rsp),%rdi
    0.00 :   413fde:       sub    %rcx,%r8
    0.00 :   413fe1:       xor    %edx,%edx
    0.00 :   413fe3:       xor    %esi,%esi
    0.00 :   413fe5:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   413fea:       jmpq   413e57 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x17a7>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   413fef:       mov    0x20(%r13),%rax
    0.00 :   413ff3:       mov    0x18(%r13),%rsi
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   413ff7:       movq   $0x0,0x60(%rsp)
    0.00 :   414000:       movq   $0x0,0x68(%rsp)
    0.00 :   414009:       movq   $0x0,0x70(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   414012:       mov    %rax,%rbp
    0.00 :   414015:       sub    %rsi,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   414018:       mov    %rbp,%rdx
    0.00 :   41401b:       sar    $0x3,%rdx
    0.00 :   41401f:       je     4143ec <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1d3c>
         :            if (__n > this->max_size())
    0.00 :   414025:       movabs $0x1fffffffffffffff,%rax
    0.00 :   41402f:       cmp    %rax,%rdx
    0.00 :   414032:       ja     414d19 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2669>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   414038:       mov    %rbp,%rdi
    0.00 :   41403b:       mov    %rbp,%rbx
    0.00 :   41403e:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   414043:       mov    %rax,%r8
    0.00 :   414046:       mov    0x20(%r13),%rax
    0.00 :   41404a:       mov    0x18(%r13),%rsi
    0.00 :   41404e:       mov    %rax,%rbp
    0.00 :   414051:       sub    %rsi,%rbp
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   414054:       add    %r8,%rbx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   414057:       mov    %r8,0x60(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   41405c:       mov    %r8,0x68(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   414061:       mov    %rbx,0x70(%rsp)
         :            if (_Num)
    0.00 :   414066:       cmp    %rax,%rsi
    0.00 :   414069:       je     414079 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x19c9>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   41406b:       mov    %r8,%rdi
    0.00 :   41406e:       mov    %rbp,%rdx
    0.00 :   414071:       callq  53aa0 <memmove@plt>
    0.00 :   414076:       mov    %rax,%r8
    0.00 :   414079:       mov    (%rsp),%rcx
    0.00 :   41407d:       mov    0x30(%r14),%rax
         :            return __result + _Num;
    0.00 :   414081:       lea    (%r8,%rbp,1),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   414085:       mov    %rdi,0x68(%rsp)
    0.00 :   41408a:       cmpb   $0x0,0x8(%rcx)
    0.00 :   41408e:       lea    (%r8,%rax,8),%r13
    0.00 :   414092:       jne    41437b <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1ccb>
    0.00 :   414098:       cltq
    0.00 :   41409a:       xor    %edx,%edx
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   41409c:       lea    0x0(,%rax,8),%rsi
    0.00 :   4140a4:       mov    0x10(%rsp),%rax
    0.00 :   4140a9:       mov    (%rax),%rax
    0.00 :   4140ac:       lea    (%rax,%r12,8),%r9
    0.00 :   4140b0:       mov    (%rax),%rcx
    0.00 :   4140b3:       add    $0x8,%rax
    0.00 :   4140b7:       mov    0x18(%rcx),%rcx
    0.00 :   4140bb:       add    (%rcx,%rsi,1),%rdx
    0.00 :   4140bf:       cmp    %rax,%r9
    0.00 :   4140c2:       jne    4140b0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1a00>
    0.00 :   4140c4:       mov    %rdx,0x0(%r13)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4140c8:       movq   $0x0,0x80(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4140d4:       mov    %rbp,%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4140d7:       movq   $0x0,0x88(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4140e3:       sar    $0x3,%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4140e7:       movq   $0x0,0x90(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4140f3:       je     4143e2 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1d32>
         :            if (__n > this->max_size())
    0.00 :   4140f9:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   414103:       cmp    %rdx,%rax
    0.00 :   414106:       ja     414d36 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2686>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   41410c:       mov    %rbp,%rdi
    0.00 :   41410f:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   414114:       mov    0x68(%rsp),%rdi
    0.00 :   414119:       mov    0x60(%rsp),%r8
    0.00 :   41411e:       mov    %rax,%rcx
    0.00 :   414121:       mov    %rdi,%rbx
    0.00 :   414124:       sub    %r8,%rbx
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   414127:       add    %rcx,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   41412a:       mov    %rcx,0x80(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   414132:       mov    %rcx,0x88(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   41413a:       mov    %rbp,0x90(%rsp)
         :            if (_Num)
    0.00 :   414142:       cmp    %rdi,%r8
    0.00 :   414145:       je     414158 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1aa8>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   414147:       mov    %rcx,%rdi
    0.00 :   41414a:       mov    %rbx,%rdx
    0.00 :   41414d:       mov    %r8,%rsi
    0.00 :   414150:       callq  53aa0 <memmove@plt>
    0.00 :   414155:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   414158:       add    %rbx,%rcx
    0.00 :   41415b:       mov    0x18(%rsp),%rdi
    0.00 :   414160:       lea    0x80(%rsp),%rbx
    0.00 :   414168:       xor    %esi,%esi
    0.00 :   41416a:       mov    %rbx,%rdx
    0.00 :   41416d:       mov    %rcx,0x88(%rsp)
    0.00 :   414175:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
    0.00 :   41417a:       mov    %rax,0x28(%r14)
    0.00 :   41417e:       mov    %rbx,%rdi
    0.00 :   414181:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   414186:       mov    %rax,0x18(%r14)
    0.00 :   41418a:       test   %rax,%rax
    0.00 :   41418d:       je     4142ed <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c3d>
    0.00 :   414193:       mov    (%rsp),%rax
    0.00 :   414197:       movq   $0x1,0x20(%r14)
    0.00 :   41419f:       mov    0x58(%rsp),%rdx
    0.00 :   4141a4:       cmpb   $0x0,0x8(%rax)
    0.00 :   4141a8:       je     414af7 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2447>
    0.00 :   4141ae:       lea    0x1(%rdx),%rcx
    0.00 :   4141b2:       mov    %rdx,%rax
    0.00 :   4141b5:       mov    0x30(%r14),%rsi
    0.00 :   4141b9:       mov    0x60(%rsp),%rdi
    0.00 :   4141be:       mov    $0x1,%edx
    0.00 :   4141c3:       cmp    %rcx,%rsi
    0.00 :   4141c6:       jb     4141d3 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1b23>
    0.00 :   4141c8:       jmp    4141e5 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1b35>
    0.00 :   4141ca:       nopw   0x0(%rax,%rax,1)
    0.00 :   4141d0:       mov    %rcx,%rax
    0.00 :   4141d3:       imul   (%rdi,%rax,8),%rdx
    0.00 :   4141d8:       lea    -0x1(%rax),%rcx
    0.00 :   4141dc:       mov    %rdx,0x20(%r14)
    0.00 :   4141e0:       cmp    %rsi,%rax
    0.00 :   4141e3:       ja     4141d0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1b20>
         :            vector<_Tp, _Alloc>::
         :            reserve(size_type __n)
         :            {
         :            if (__n > this->max_size())
         :            __throw_length_error(__N("vector::reserve"));
         :            if (this->capacity() < __n)
    0.00 :   4141e5:       mov    (%r14),%rbx
         :            - this->_M_impl._M_start); }
    0.00 :   4141e8:       mov    0x10(%r14),%rax
    0.00 :   4141ec:       movabs $0xaaaaaaaaaaaaaaab,%rdx
    0.00 :   4141f6:       sub    %rbx,%rax
    0.00 :   4141f9:       sar    $0x3,%rax
    0.00 :   4141fd:       imul   %rdx,%rax
    0.00 :   414201:       cmp    %rax,%r12
    0.00 :   414204:       ja     414b03 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2453>
    0.00 :   41420a:       mov    0x8(%rsp),%rax
    0.00 :   41420f:       xor    %ebx,%ebx
         :            std::forward<_Args>(__args)...);
         :            ++this->_M_impl._M_finish;
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         :            }
         :            else
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    0.00 :   414211:       lea    0xa0(%rsp),%r12
    0.00 :   414219:       sub    $0x1,%eax
    0.00 :   41421c:       lea    0x8(,%rax,8),%rbp
    0.00 :   414224:       nopl   0x0(%rax)
    0.00 :   414228:       mov    0x10(%rsp),%rax
    0.00 :   41422d:       mov    (%rax),%rax
    0.00 :   414230:       mov    (%rax,%rbx,1),%rsi
    0.00 :   414234:       mov    0x28(%r14),%rax
    0.00 :   414238:       mov    0x30(%rax),%rax
    0.00 :   41423c:       cmp    %rax,0x30(%rsi)
    0.00 :   414240:       jne    4143f7 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1d47>
    0.00 :   414246:       mov    0x58(%rsp),%rax
    0.00 :   41424b:       mov    0x30(%r14),%rdx
    0.00 :   41424f:       cmp    %rdx,%rax
    0.00 :   414252:       jbe    414371 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1cc1>
    0.00 :   414258:       mov    0x18(%rsi),%rcx
    0.00 :   41425c:       lea    -0x8(%rcx,%rax,8),%rax
    0.00 :   414261:       lea    -0x8(%rcx,%rdx,8),%rcx
    0.00 :   414266:       mov    $0x1,%edx
    0.00 :   41426b:       nopl   0x0(%rax,%rax,1)
    0.00 :   414270:       imul   (%rax),%rdx
    0.00 :   414274:       sub    $0x8,%rax
    0.00 :   414278:       cmp    %rax,%rcx
    0.00 :   41427b:       jne    414270 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1bc0>
    0.00 :   41427d:       mov    0x38(%rsp),%rax
    0.00 :   414282:       mov    %rsi,0xa0(%rsp)
    0.00 :   41428a:       mov    %rdx,0xa8(%rsp)
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   414292:       mov    0x8(%r14),%rsi
    0.00 :   414296:       mov    (%rax,%rbx,1),%rax
    0.00 :   41429a:       mov    %rax,0xb0(%rsp)
    0.00 :   4142a2:       cmp    0x10(%r14),%rsi
    0.00 :   4142a6:       je     41433e <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c8e>
         :            #endif // __cpp_sized_deallocation
         :            #endif // __cpp_aligned_new
         :
         :            // Default placement versions of operator new.
         :            inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :            { return __p; }
    0.00 :   4142ac:       movdqa 0xa0(%rsp),%xmm0
         :            ++this->_M_impl._M_finish;
    0.00 :   4142b5:       add    $0x18,%rsi
    0.00 :   4142b9:       movups %xmm0,-0x18(%rsi)
    0.00 :   4142bd:       mov    0xb0(%rsp),%rax
    0.00 :   4142c5:       mov    %rax,-0x8(%rsi)
    0.00 :   4142c9:       mov    %rsi,0x8(%r14)
    0.00 :   4142cd:       add    $0x8,%rbx
    0.00 :   4142d1:       cmp    %rbx,%rbp
    0.00 :   4142d4:       jne    414228 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1b78>
    0.00 :   4142da:       mov    (%r14),%rax
    0.00 :   4142dd:       mov    (%rax),%rax
    0.00 :   4142e0:       mov    0x30(%rax),%rax
    0.00 :   4142e4:       cmpl   $0x8,0x8(%rax)
    0.00 :   4142e8:       sete   0x38(%r14)
    0.00 :   4142ed:       mov    0x20(%rsp),%rax
    0.00 :   4142f2:       movq   $0x0,(%rax)
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4142f9:       mov    0x80(%rsp),%rdi
         :            if (__p)
    0.00 :   414301:       test   %rdi,%rdi
    0.00 :   414304:       je     41430b <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c5b>
         :            ::operator delete(__p);
    0.00 :   414306:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   41430b:       mov    0x60(%rsp),%rdi
         :            if (__p)
    0.00 :   414310:       test   %rdi,%rdi
    0.00 :   414313:       jne    4130d0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa20>
    0.00 :   414319:       jmpq   4130d5 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa25>
    0.00 :   41431e:       mov    0x20(%rsp),%rdi
    0.00 :   414323:       mov    $0x1,%edx
    0.00 :   414328:       mov    $0x2,%esi
    0.00 :   41432d:       lea    0x42aefe(%rip),%rcx        # 83f232 <typeinfo name for onnxruntime::OpKernel* (*)(onnxruntime::OpKernelInfo const&)+0x312>
    0.00 :   414334:       callq  6975f0 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, char const*)>
    0.00 :   414339:       jmpq   4130d5 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0xa25>
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    0.00 :   41433e:       mov    %r12,%rdx
    0.00 :   414341:       mov    %r14,%rdi
    0.00 :   414344:       callq  412310 <void std::vector<onnxruntime::Prepare::InputInfo, std::allocator<onnxruntime::Prepare::InputInfo> >::_M_realloc_insert<onnxruntime::Prepare::InputInfo>(__gnu_cxx::__normal_iterator<onnxruntime::Prepare::InputInfo*, std::vector<onnxruntime::Prepare::InputInfo, std::allocator<onnxruntime::Prepare::InputInfo> > >, onnxruntime::Prepare::InputInfo&&)>
    0.00 :   414349:       jmp    4142cd <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c1d>
         :            this->_M_assign(__str);
    0.00 :   41434b:       lea    0x50(%r12),%rsi
    0.00 :   414350:       mov    %r14,%rdi
    0.00 :   414353:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   414358:       jmpq   413be4 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1534>
    0.00 :   41435d:       mov    0x18(%rsp),%rdi
    0.00 :   414362:       lea    0x50(%r12),%rsi
    0.00 :   414367:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   41436c:       jmpq   413e57 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x17a7>
    0.00 :   414371:       mov    $0x1,%edx
    0.00 :   414376:       jmpq   41427d <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1bcd>
    0.00 :   41437b:       mov    0x28(%rsp),%rax
    0.00 :   414380:       mov    %rax,0xa0(%rsp)
         :            auto
         :            vector<_Tp, _Alloc>::
         :            _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
         :            {
         :            const auto __n = __position - cbegin();
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   414388:       cmp    %rdi,%rbx
    0.00 :   41438b:       je     414b90 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x24e0>
         :
         :            _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
         :            : _M_current(_Iterator()) { }
         :
         :            explicit
         :            __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    0.00 :   414391:       lea    0x8(%rdi),%rbx
         :            if (__position == cend())
    0.00 :   414395:       cmp    %rdi,%r13
    0.00 :   414398:       je     414b56 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x24a6>
    0.00 :   41439e:       mov    -0x8(%rdi),%rax
         :            ++this->_M_impl._M_finish;
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         :            #if __cplusplus < 201103L
         :            _Tp __x_copy = __x;
         :            #endif
         :            _GLIBCXX_MOVE_BACKWARD3(__position.base(),
    0.00 :   4143a2:       lea    -0x8(%rdi),%rdx
         :            ++this->_M_impl._M_finish;
    0.00 :   4143a6:       mov    %rbx,0x68(%rsp)
    0.00 :   4143ab:       mov    %rax,(%rdi)
         :            if (_Num)
    0.00 :   4143ae:       cmp    %rdx,%r13
    0.00 :   4143b1:       je     4143cb <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1d1b>
         :            const ptrdiff_t _Num = __last - __first;
    0.00 :   4143b3:       sub    %r13,%rdx
         :            __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
    0.00 :   4143b6:       mov    %r13,%rsi
    0.00 :   4143b9:       mov    %r8,0x30(%rsp)
    0.00 :   4143be:       sub    %rdx,%rdi
    0.00 :   4143c1:       callq  53aa0 <memmove@plt>
    0.00 :   4143c6:       mov    0x30(%rsp),%r8
         :            this->_M_impl._M_finish - 2,
         :            this->_M_impl._M_finish - 1);
         :            #if __cplusplus < 201103L
         :            *__position = __x_copy;
         :            #else
         :            *__position = std::forward<_Arg>(__arg);
    0.00 :   4143cb:       mov    0x28(%rsp),%rax
    0.00 :   4143d0:       mov    %rbx,%rdi
    0.00 :   4143d3:       mov    %rax,0x0(%r13)
    0.00 :   4143d7:       mov    %rdi,%rbp
    0.00 :   4143da:       sub    %r8,%rbp
    0.00 :   4143dd:       jmpq   4140c8 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1a18>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4143e2:       mov    %rbp,%rbx
    0.00 :   4143e5:       xor    %ecx,%ecx
    0.00 :   4143e7:       jmpq   414127 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1a77>
    0.00 :   4143ec:       mov    %rbp,%rbx
    0.00 :   4143ef:       xor    %r8d,%r8d
    0.00 :   4143f2:       jmpq   414054 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x19a4>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4143f7:       lea    0x140(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4143ff:       lea    0x45b6f3(%rip),%rdx        # 86faf9 <typeinfo name for onnxruntime::Compress+0xa9>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   414406:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   41440a:       lea    -0x41(%rdx),%rsi
    0.00 :   41440e:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   414411:       mov    %rax,0x140(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   414419:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   41441e:       lea    0x45b98c(%rip),%rdx        # 86fdb1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const::__FUNCTION__+0x11>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   414425:       lea    0x38(%r13),%rax
    0.00 :   414429:       movl   $0x8d,0x160(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   414434:       lea    0x28(%r13),%rdi
    0.00 :   414438:       lea    -0x11(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41443c:       mov    %rax,0x168(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   414444:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   414449:       lea    0x2c0(%rsp),%r12
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   414451:       movq   $0x0,0x188(%rsp)
    0.00 :   41445d:       lea    0x70(%r12),%rdi
    0.00 :   414462:       movq   $0x0,0x190(%rsp)
    0.00 :   41446e:       movq   $0x0,0x198(%rsp)
    0.00 :   41447a:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   41447f:       mov    0x8136a2(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   414486:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   414488:       xor    %esi,%esi
    0.00 :   41448a:       mov    %dx,0x410(%rsp)
    0.00 :   414492:       mov    %rax,0x28(%rsp)
    0.00 :   414497:       add    $0x10,%rax
    0.00 :   41449b:       mov    %rax,0x330(%rsp)
    0.00 :   4144a3:       mov    0x8138f6(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   4144aa:       movq   $0x0,0x408(%rsp)
    0.00 :   4144b6:       movq   $0x0,0x418(%rsp)
    0.00 :   4144c2:       mov    0x8(%rax),%rbp
    0.00 :   4144c6:       movq   $0x0,0x420(%rsp)
    0.00 :   4144d2:       mov    0x10(%rax),%rax
    0.00 :   4144d6:       mov    -0x18(%rbp),%rdi
    0.00 :   4144da:       mov    %rbp,0x2c0(%rsp)
    0.00 :   4144e2:       movq   $0x0,0x428(%rsp)
    0.00 :   4144ee:       mov    %rax,%r15
    0.00 :   4144f1:       movq   $0x0,0x430(%rsp)
    0.00 :   4144fd:       add    %r12,%rdi
    0.00 :   414500:       mov    %rax,(%rdi)
    0.00 :   414503:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   414508:       mov    0x813851(%rip),%rcx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   41450f:       lea    0x40(%r12),%rdi
    0.00 :   414514:       movq   $0x0,0x2d0(%rsp)
    0.00 :   414520:       movq   $0x0,0x2d8(%rsp)
    0.00 :   41452c:       lea    0x18(%rcx),%rax
    0.00 :   414530:       mov    %rcx,0x8(%rsp)
    0.00 :   414535:       mov    %rax,0x2c0(%rsp)
    0.00 :   41453d:       lea    0x40(%rcx),%rax
    0.00 :   414541:       mov    %rax,0x330(%rsp)
    0.00 :   414549:       mov    0x813710(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   414550:       movq   $0x0,0x2e0(%rsp)
    0.00 :   41455c:       mov    %rax,(%rsp)
    0.00 :   414560:       add    $0x10,%rax
    0.00 :   414564:       mov    %rax,0x2c8(%rsp)
    0.00 :   41456c:       movq   $0x0,0x2e8(%rsp)
    0.00 :   414578:       movq   $0x0,0x2f0(%rsp)
    0.00 :   414584:       movq   $0x0,0x2f8(%rsp)
    0.00 :   414590:       callq  53eb0 <std::locale::locale()@plt>
         :            { this->init(&_M_stringbuf); }
    0.00 :   414595:       lea    0x8(%r12),%rsi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   41459a:       mov    0x813a37(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   4145a1:       lea    0x70(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4145a6:       movl   $0x10,0x308(%rsp)
    0.00 :   4145b1:       mov    %rax,0x10(%rsp)
    0.00 :   4145b6:       add    $0x10,%rax
    0.00 :   4145ba:       mov    %rax,0x2c8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   4145c2:       lea    0x60(%r12),%rax
    0.00 :   4145c7:       mov    %rax,0x310(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   4145cf:       movq   $0x0,0x318(%rsp)
    0.00 :   4145db:       movb   $0x0,0x320(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   4145e3:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return this->find_last_of(__s, __pos, traits_type::length(__s));
    0.00 :   4145e8:       mov    $0x2,%ecx
    0.00 :   4145ed:       mov    $0xffffffffffffffff,%rdx
    0.00 :   4145f4:       lea    0x412b0d(%rip),%rsi        # 827108 <std::piecewise_construct+0x368>
    0.00 :   4145fb:       mov    %r13,%rdi
    0.00 :   4145fe:       callq  53ec0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const@plt>
         :            if (__pos > this->size())
    0.00 :   414603:       mov    0x148(%rsp),%rcx
    0.00 :   41460b:       lea    0x1(%rax),%rdx
    0.00 :   41460f:       cmp    %rcx,%rdx
    0.00 :   414612:       ja     414d3b <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x268b>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   414618:       lea    0xe0(%rsp),%rbx
    0.00 :   414620:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   414624:       mov    %rbx,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   414627:       mov    %rbx,%r14
    0.00 :   41462a:       mov    %rbx,0x18(%rsp)
    0.00 :   41462f:       mov    %rax,0xe0(%rsp)
         :            + __str._M_check(__pos, "basic_string::basic_string");
    0.00 :   414637:       mov    0x140(%rsp),%rax
         :            _M_construct(__start, __start + __str._M_limit(__pos, __n));
    0.00 :   41463f:       add    %rax,%rcx
         :            const _CharT* __start = __str._M_data()
    0.00 :   414642:       lea    (%rax,%rdx,1),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   414646:       mov    %rcx,%rdx
    0.00 :   414649:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   41464e:       mov    0xe8(%rsp),%rdx
    0.00 :   414656:       mov    0xe0(%rsp),%rsi
    0.00 :   41465e:       mov    %r12,%rdi
    0.00 :   414661:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   414666:       mov    $0x1,%edx
    0.00 :   41466b:       lea    0x491e44(%rip),%rsi        # 8a64b6 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0x9a>
    0.00 :   414672:       mov    %rax,%rdi
    0.00 :   414675:       mov    %rax,%rbx
    0.00 :   414678:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   41467d:       mov    0x160(%rsp),%esi
    0.00 :   414684:       mov    %rbx,%rdi
    0.00 :   414687:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   41468c:       mov    $0x1,%edx
    0.00 :   414691:       lea    0x4130a3(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   414698:       mov    %rax,%rdi
    0.00 :   41469b:       mov    %rax,%rbx
    0.00 :   41469e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   4146a3:       mov    0x170(%rsp),%rdx
    0.00 :   4146ab:       mov    0x168(%rsp),%rsi
    0.00 :   4146b3:       mov    %rbx,%rdi
    0.00 :   4146b6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4146bb:       mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4146c3:       lea    0x10(%r14),%rax
    0.00 :   4146c7:       cmp    %rax,%rdi
    0.00 :   4146ca:       je     4146d1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2021>
    0.00 :   4146cc:       callq  53300 <operator delete(void*)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4146d1:       lea    0xc0(%rsp),%r14
    0.00 :   4146d9:       movb   $0x0,0xd0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   4146e1:       movq   $0x0,0xc8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4146ed:       lea    0x10(%r14),%rax
    0.00 :   4146f1:       mov    %rax,0xc0(%rsp)
         :            if (this->pptr())
    0.00 :   4146f9:       mov    0x2f0(%rsp),%rax
    0.00 :   414701:       test   %rax,%rax
    0.00 :   414704:       je     414bc8 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2518>
         :            if (this->pptr() > this->egptr())
    0.00 :   41470a:       mov    0x2e0(%rsp),%r8
    0.00 :   414712:       mov    0x2e8(%rsp),%rcx
    0.00 :   41471a:       cmp    %r8,%rax
    0.00 :   41471d:       jbe    414b66 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x24b6>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   414723:       sub    %rcx,%rax
    0.00 :   414726:       xor    %edx,%edx
    0.00 :   414728:       xor    %esi,%esi
    0.00 :   41472a:       mov    %r14,%rdi
    0.00 :   41472d:       mov    %rax,%r8
    0.00 :   414730:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   414735:       mov    0x8(%rsp),%rcx
         :            { return _M_data() == _M_local_data(); }
    0.00 :   41473a:       mov    0x310(%rsp),%rdi
    0.00 :   414742:       lea    0x18(%rcx),%rax
    0.00 :   414746:       mov    %rax,0x2c0(%rsp)
    0.00 :   41474e:       lea    0x40(%rcx),%rax
    0.00 :   414752:       mov    %rax,0x330(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   41475a:       mov    0x10(%rsp),%rax
    0.00 :   41475f:       add    $0x10,%rax
    0.00 :   414763:       mov    %rax,0x2c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   41476b:       lea    0x60(%r12),%rax
    0.00 :   414770:       cmp    %rax,%rdi
    0.00 :   414773:       je     41477a <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x20ca>
    0.00 :   414775:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   41477a:       mov    (%rsp),%rax
    0.00 :   41477e:       lea    0x40(%r12),%rdi
    0.00 :   414783:       add    $0x10,%rax
    0.00 :   414787:       mov    %rax,0x2c8(%rsp)
    0.00 :   41478f:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   414794:       mov    -0x18(%rbp),%rax
    0.00 :   414798:       mov    %rbp,0x2c0(%rsp)
    0.00 :   4147a0:       mov    %r15,0x2c0(%rsp,%rax,1)
         :            ~basic_ios() { }
    0.00 :   4147a8:       mov    0x28(%rsp),%rax
    0.00 :   4147ad:       lea    0x10(%rax),%rbx
    0.00 :   4147b1:       lea    0x70(%r12),%rax
    0.00 :   4147b6:       mov    %rax,%rdi
    0.00 :   4147b9:       mov    %rax,0x30(%rsp)
    0.00 :   4147be:       mov    %rbx,0x330(%rsp)
    0.00 :   4147c6:       callq  52b40 <std::ios_base::~ios_base()@plt>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   4147cb:       mov    0x30(%rsp),%rax
    0.00 :   4147d0:       mov    %rax,%rdi
    0.00 :   4147d3:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   4147d8:       xor    %eax,%eax
    0.00 :   4147da:       mov    %rbx,0x330(%rsp)
         :            { this->init(0); }
    0.00 :   4147e2:       xor    %esi,%esi
    0.00 :   4147e4:       mov    %ax,0x410(%rsp)
    0.00 :   4147ec:       mov    -0x18(%rbp),%rdi
    0.00 :   4147f0:       movq   $0x0,0x408(%rsp)
    0.00 :   4147fc:       add    %r12,%rdi
    0.00 :   4147ff:       movq   $0x0,0x418(%rsp)
    0.00 :   41480b:       movq   $0x0,0x420(%rsp)
    0.00 :   414817:       movq   $0x0,0x428(%rsp)
    0.00 :   414823:       movq   $0x0,0x430(%rsp)
    0.00 :   41482f:       mov    %rbp,0x2c0(%rsp)
    0.00 :   414837:       mov    %r15,(%rdi)
    0.00 :   41483a:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   41483f:       mov    0x8(%rsp),%rcx
         :            _M_buf_locale(locale())
    0.00 :   414844:       lea    0x40(%r12),%rdi
    0.00 :   414849:       movq   $0x0,0x2d0(%rsp)
    0.00 :   414855:       movq   $0x0,0x2d8(%rsp)
    0.00 :   414861:       movq   $0x0,0x2e0(%rsp)
    0.00 :   41486d:       lea    0x18(%rcx),%rax
    0.00 :   414871:       mov    %rax,0x2c0(%rsp)
    0.00 :   414879:       lea    0x40(%rcx),%rax
    0.00 :   41487d:       mov    %rax,0x330(%rsp)
    0.00 :   414885:       mov    (%rsp),%rax
    0.00 :   414889:       movq   $0x0,0x2e8(%rsp)
    0.00 :   414895:       movq   $0x0,0x2f0(%rsp)
    0.00 :   4148a1:       add    $0x10,%rax
    0.00 :   4148a5:       mov    %rax,0x2c8(%rsp)
    0.00 :   4148ad:       movq   $0x0,0x2f8(%rsp)
    0.00 :   4148b9:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4148be:       mov    0x10(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   4148c3:       lea    0x8(%r12),%rsi
    0.00 :   4148c8:       lea    0x70(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4148cd:       movl   $0x10,0x308(%rsp)
    0.00 :   4148d8:       add    $0x10,%rax
    0.00 :   4148dc:       movb   $0x0,0x320(%rsp)
    0.00 :   4148e4:       mov    %rax,0x2c8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   4148ec:       lea    0x60(%r12),%rax
    0.00 :   4148f1:       mov    %rax,0x310(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   4148f9:       movq   $0x0,0x318(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   414905:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   41490a:       mov    0xc8(%rsp),%rdx
    0.00 :   414912:       mov    0xc0(%rsp),%rsi
    0.00 :   41491a:       mov    %r12,%rdi
    0.00 :   41491d:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   414922:       mov    $0x1,%edx
    0.00 :   414927:       lea    0x412e0d(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   41492e:       mov    %r12,%rdi
    0.00 :   414931:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   414936:       mov    %r12,%rdi
    0.00 :   414939:       mov    $0x12,%edx
    0.00 :   41493e:       lea    0x45b29c(%rip),%rsi        # 86fbe1 <typeinfo name for onnxruntime::Compress+0x191>
    0.00 :   414945:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41494a:       mov    0x18(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   41494f:       movq   $0x0,0xe8(%rsp)
    0.00 :   41495b:       movb   $0x0,0xf0(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   414963:       lea    0x10(%rdi),%rax
    0.00 :   414967:       mov    %rax,0xe0(%rsp)
         :            if (this->pptr())
    0.00 :   41496f:       mov    0x2f0(%rsp),%rax
    0.00 :   414977:       test   %rax,%rax
    0.00 :   41497a:       je     414bb4 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2504>
         :            if (this->pptr() > this->egptr())
    0.00 :   414980:       mov    0x2e0(%rsp),%r8
    0.00 :   414988:       mov    0x2e8(%rsp),%rcx
    0.00 :   414990:       cmp    %r8,%rax
    0.00 :   414993:       jbe    414b7a <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x24ca>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   414999:       sub    %rcx,%rax
    0.00 :   41499c:       xor    %edx,%edx
    0.00 :   41499e:       xor    %esi,%esi
    0.00 :   4149a0:       mov    %rax,%r8
    0.00 :   4149a3:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   4149a8:       mov    0x8(%rsp),%rdx
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4149ad:       mov    0x310(%rsp),%rdi
    0.00 :   4149b5:       lea    0x18(%rdx),%rax
    0.00 :   4149b9:       mov    %rax,0x2c0(%rsp)
    0.00 :   4149c1:       lea    0x40(%rdx),%rax
    0.00 :   4149c5:       mov    %rax,0x330(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   4149cd:       mov    0x10(%rsp),%rax
    0.00 :   4149d2:       add    $0x10,%rax
    0.00 :   4149d6:       mov    %rax,0x2c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   4149de:       lea    0x60(%r12),%rax
    0.00 :   4149e3:       cmp    %rax,%rdi
    0.00 :   4149e6:       je     4149ed <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x233d>
    0.00 :   4149e8:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   4149ed:       mov    (%rsp),%rax
    0.00 :   4149f1:       lea    0x40(%r12),%rdi
    0.00 :   4149f6:       add    $0x10,%rax
    0.00 :   4149fa:       mov    %rax,0x2c8(%rsp)
    0.00 :   414a02:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   414a07:       mov    -0x18(%rbp),%rax
         :            ~basic_ios() { }
    0.00 :   414a0b:       lea    0x70(%r12),%rdi
    0.00 :   414a10:       mov    %rbp,0x2c0(%rsp)
    0.00 :   414a18:       mov    %r15,0x2c0(%rsp,%rax,1)
    0.00 :   414a20:       mov    0x28(%rsp),%rax
    0.00 :   414a25:       add    $0x10,%rax
    0.00 :   414a29:       mov    %rax,0x330(%rsp)
    0.00 :   414a31:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   414a36:       mov    0x18(%rsp),%rbx
    0.00 :   414a3b:       mov    0x20(%rsp),%rdi
    0.00 :   414a40:       mov    $0x1,%edx
    0.00 :   414a45:       mov    $0x2,%esi
    0.00 :   414a4a:       mov    %rbx,%rcx
    0.00 :   414a4d:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   414a52:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   414a55:       mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   414a5d:       add    $0x10,%rax
    0.00 :   414a61:       cmp    %rax,%rdi
    0.00 :   414a64:       je     414a6b <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x23bb>
    0.00 :   414a66:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   414a6b:       mov    0xc0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   414a73:       add    $0x10,%r14
    0.00 :   414a77:       cmp    %r14,%rdi
    0.00 :   414a7a:       je     414a81 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x23d1>
    0.00 :   414a7c:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   414a81:       mov    0x190(%rsp),%rbp
    0.00 :   414a89:       mov    0x188(%rsp),%rbx
    0.00 :   414a91:       cmp    %rbx,%rbp
    0.00 :   414a94:       je     414ab0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2400>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   414a96:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   414a99:       lea    0x10(%rbx),%rax
    0.00 :   414a9d:       cmp    %rax,%rdi
    0.00 :   414aa0:       je     414aa7 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x23f7>
    0.00 :   414aa2:       callq  53300 <operator delete(void*)@plt>
    0.00 :   414aa7:       add    $0x20,%rbx
    0.00 :   414aab:       cmp    %rbx,%rbp
    0.00 :   414aae:       jne    414a96 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x23e6>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   414ab0:       mov    0x188(%rsp),%rdi
         :            if (__p)
    0.00 :   414ab8:       test   %rdi,%rdi
    0.00 :   414abb:       je     414ac2 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2412>
    0.00 :   414abd:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   414ac2:       mov    0x168(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   414aca:       lea    0x38(%r13),%rax
    0.00 :   414ace:       cmp    %rax,%rdi
    0.00 :   414ad1:       je     414ad8 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2428>
    0.00 :   414ad3:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   414ad8:       mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   414ae0:       add    $0x10,%r13
    0.00 :   414ae4:       cmp    %r13,%rdi
    0.00 :   414ae7:       je     4142f9 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c49>
    0.00 :   414aed:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   414af2:       jmpq   4142f9 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1c49>
    0.00 :   414af7:       lea    -0x1(%rdx),%rax
    0.00 :   414afb:       mov    %rdx,%rcx
    0.00 :   414afe:       jmpq   4141b5 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1b05>
         :            const size_type __old_size = size();
    0.00 :   414b03:       mov    0x8(%r14),%r15
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   414b07:       lea    (%r12,%r12,2),%r12
    0.00 :   414b0b:       shl    $0x3,%r12
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   414b0f:       mov    %r15,%r13
    0.00 :   414b12:       mov    %r12,%rdi
    0.00 :   414b15:       sub    %rbx,%r13
    0.00 :   414b18:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   414b1d:       mov    %rax,%rbp
         :            if (_Num)
    0.00 :   414b20:       cmp    %r15,%rbx
    0.00 :   414b23:       je     414b33 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2483>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   414b25:       mov    %r13,%rdx
    0.00 :   414b28:       mov    %rbx,%rsi
    0.00 :   414b2b:       mov    %rax,%rdi
    0.00 :   414b2e:       callq  53aa0 <memmove@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   414b33:       mov    (%r14),%rdi
         :            if (__p)
    0.00 :   414b36:       test   %rdi,%rdi
    0.00 :   414b39:       je     414b40 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2490>
         :            ::operator delete(__p);
    0.00 :   414b3b:       callq  53300 <operator delete(void*)@plt>
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   414b40:       add    %rbp,%r13
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   414b43:       add    %rbp,%r12
         :            this->_M_impl._M_start = __tmp;
    0.00 :   414b46:       mov    %rbp,(%r14)
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   414b49:       mov    %r13,0x8(%r14)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   414b4d:       mov    %r12,0x10(%r14)
    0.00 :   414b51:       jmpq   41420a <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1b5a>
    0.00 :   414b56:       mov    %rax,(%rdi)
         :            ++this->_M_impl._M_finish;
    0.00 :   414b59:       mov    %rbx,%rdi
    0.00 :   414b5c:       mov    %rbx,0x68(%rsp)
    0.00 :   414b61:       jmpq   4143d7 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1d27>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   414b66:       sub    %rcx,%r8
    0.00 :   414b69:       xor    %edx,%edx
    0.00 :   414b6b:       xor    %esi,%esi
    0.00 :   414b6d:       mov    %r14,%rdi
    0.00 :   414b70:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   414b75:       jmpq   414735 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2085>
    0.00 :   414b7a:       mov    0x18(%rsp),%rdi
    0.00 :   414b7f:       sub    %rcx,%r8
    0.00 :   414b82:       xor    %edx,%edx
    0.00 :   414b84:       xor    %esi,%esi
    0.00 :   414b86:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   414b8b:       jmpq   4149a8 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x22f8>
         :            _M_realloc_insert(begin() + __n, std::move(__v));
    0.00 :   414b90:       lea    0xa0(%rsp),%rdx
    0.00 :   414b98:       lea    0x60(%rsp),%rdi
    0.00 :   414b9d:       mov    %r13,%rsi
    0.00 :   414ba0:       callq  14b050 <void std::vector<long, std::allocator<long> >::_M_realloc_insert<long>(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, long&&)>
    0.00 :   414ba5:       mov    0x60(%rsp),%r8
    0.00 :   414baa:       mov    0x68(%rsp),%rdi
    0.00 :   414baf:       jmpq   4143d7 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x1d27>
         :            this->_M_assign(__str);
    0.00 :   414bb4:       mov    0x18(%rsp),%rdi
    0.00 :   414bb9:       lea    0x50(%r12),%rsi
    0.00 :   414bbe:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   414bc3:       jmpq   4149a8 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x22f8>
    0.00 :   414bc8:       lea    0x50(%r12),%rsi
    0.00 :   414bcd:       mov    %r14,%rdi
    0.00 :   414bd0:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   414bd5:       jmpq   414735 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const+0x2085>
         :            __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    0.00 :   414bda:       mov    %rax,%rdx
    0.00 :   414bdd:       lea    0x412527(%rip),%rsi        # 82710b <std::piecewise_construct+0x36b>
    0.00 :   414be4:       lea    0x41096d(%rip),%rdi        # 825558 <_fini+0x2c0>
    0.00 :   414beb:       xor    %eax,%eax
    0.00 :   414bed:       callq  53940 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    0.00 :   414bf2:       mov    %rax,%rdx
    0.00 :   414bf5:       lea    0x41250f(%rip),%rsi        # 82710b <std::piecewise_construct+0x36b>
    0.00 :   414bfc:       lea    0x410955(%rip),%rdi        # 825558 <_fini+0x2c0>
    0.00 :   414c03:       xor    %eax,%eax
    0.00 :   414c05:       callq  53940 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    0.00 :   414c0a:       lea    0x2c0(%rsp),%r12
    0.00 :   414c12:       mov    $0xa0,%edi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   414c17:       lea    0x140(%rsp),%r13
    0.00 :   414c1f:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   414c24:       mov    $0x10,%esi
    0.00 :   414c29:       mov    %r12,%rdi
    0.00 :   414c2c:       mov    %rax,%r14
    0.00 :   414c2f:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   414c34:       lea    0x425dc5(%rip),%rsi        # 83aa00 <typeinfo name for onnxruntime::BiasGeluFusion+0x20>
    0.00 :   414c3b:       mov    %r12,%rdi
    0.00 :   414c3e:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            { return _M_insert(__n); }
    0.00 :   414c43:       mov    %rbx,%rsi
    0.00 :   414c46:       mov    %r12,%rdi
    0.00 :   414c49:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   414c4e:       lea    0x425db1(%rip),%rsi        # 83aa06 <typeinfo name for onnxruntime::BiasGeluFusion+0x26>
    0.00 :   414c55:       mov    %r12,%rdi
    0.00 :   414c58:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   414c5d:       mov    %rbp,%rsi
    0.00 :   414c60:       mov    %r12,%rdi
    0.00 :   414c63:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   414c68:       lea    0x49186a(%rip),%rsi        # 8a64d9 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0xbd>
    0.00 :   414c6f:       mov    %r12,%rdi
    0.00 :   414c72:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   414c77:       lea    -0x1(%rbp),%rsi
    0.00 :   414c7b:       mov    %r12,%rdi
    0.00 :   414c7e:       lea    0xa0(%rsp),%rbp
    0.00 :   414c86:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   414c8b:       lea    0x4b3197(%rip),%rsi        # 8c7e29 <typeinfo name for re2::NumCapturesWalker+0x79>
    0.00 :   414c92:       mov    %r12,%rdi
    0.00 :   414c95:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   414c9a:       lea    0x8(%r12),%rsi
    0.00 :   414c9f:       mov    %r13,%rdi
    0.00 :   414ca2:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   414ca7:       mov    %r12,%rdi
    0.00 :   414caa:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   414caf:       mov    %rbp,%rdi
    0.00 :   414cb2:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   414cb7:       mov    %rbp,%r8
    0.00 :   414cba:       mov    $0x16,%edx
    0.00 :   414cbf:       mov    %r12,%rdi
    0.00 :   414cc2:       lea    0x45afd7(%rip),%rcx        # 86fca0 <onnxruntime::HandleNegativeAxis(long, long)::__PRETTY_FUNCTION__>
    0.00 :   414cc9:       lea    0x425df0(%rip),%rsi        # 83aac0 <typeinfo name for onnxruntime::BiasGeluFusion+0xe0>
    0.00 :   414cd0:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   414cd5:       mov    %r13,%rcx
    0.00 :   414cd8:       lea    0x425e19(%rip),%rdx        # 83aaf8 <typeinfo name for onnxruntime::BiasGeluFusion+0x118>
    0.00 :   414cdf:       mov    %r12,%rsi
    0.00 :   414ce2:       mov    %r14,%rdi
    0.00 :   414ce5:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   414cea:       mov    %r12,%rdi
         :            if (!_M_is_local())
    0.00 :   414ced:       add    $0x10,%r13
    0.00 :   414cf1:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   414cf6:       mov    %rbp,%rdi
    0.00 :   414cf9:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   414cfe:       mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   414d06:       cmp    %r13,%rdi
    0.00 :   414d09:       je     8f6df <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x23f>
    0.00 :   414d0f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   414d14:       jmpq   8f6df <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x23f>
         :            std::__throw_bad_alloc();
    0.00 :   414d19:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    0.00 :   414d1e:       mov    %rax,%rdx
    0.00 :   414d21:       lea    0x4123e3(%rip),%rsi        # 82710b <std::piecewise_construct+0x36b>
    0.00 :   414d28:       lea    0x410829(%rip),%rdi        # 825558 <_fini+0x2c0>
    0.00 :   414d2f:       xor    %eax,%eax
    0.00 :   414d31:       callq  53940 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    0.00 :   414d36:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   414d3b:       lea    0x4123c9(%rip),%rsi        # 82710b <std::piecewise_construct+0x36b>
    0.00 :   414d42:       lea    0x41080f(%rip),%rdi        # 825558 <_fini+0x2c0>
    0.00 :   414d49:       xor    %eax,%eax
    0.00 :   414d4b:       callq  53940 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    0.00 :   414d50:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   414d55:       mov    %rax,%rbx
    0.00 :   414d58:       jmpq   8f4a0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]>
    0.00 :   414d5d:       jmpq   8f4e3 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x43>
    0.00 :   414d62:       jmpq   8f4fe <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x5e>
    0.00 :   414d67:       mov    %rax,%rbx
    0.00 :   414d6a:       jmpq   8f54d <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0xad>
    0.00 :   414d6f:       mov    %rax,%rbx
    0.00 :   414d72:       jmpq   8f593 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0xf3>
    0.00 :   414d77:       mov    %rax,%rbx
    0.00 :   414d7a:       jmpq   8f5d3 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x133>
    0.00 :   414d7f:       mov    %rax,%rbx
    0.00 :   414d82:       jmpq   8f5f1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x151>
    0.00 :   414d87:       jmpq   8f616 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x176>
    0.00 :   414d8c:       jmpq   8f636 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x196>
    0.00 :   414d91:       jmpq   8f692 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x1f2>
    0.00 :   414d96:       mov    %rax,%rbx
    0.00 :   414d99:       jmpq   8f6af <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x20f>
    0.00 :   414d9e:       mov    %rax,%rbx
    0.00 :   414da1:       jmpq   8f6f5 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x255>
    0.00 :   414da6:       mov    %rax,%rbx
    0.00 :   414da9:       jmpq   8f6fd <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x25d>
    0.00 :   414dae:       mov    %rax,%rbx
    0.00 :   414db1:       jmpq   8f705 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x265>
    0.00 :   414db6:       mov    %rax,%rbx
    0.00 :   414db9:       jmpq   8f749 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x2a9>
    0.00 :   414dbe:       mov    %rax,%rbx
    0.00 :   414dc1:       jmpq   8f751 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x2b1>
    0.00 :   414dc6:       mov    %rax,%rbx
    0.00 :   414dc9:       jmpq   8f759 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x2b9>
    0.00 :   414dce:       mov    %rax,%rbx
    0.00 :   414dd1:       jmpq   8f77c <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x2dc>
    0.00 :   414dd6:       mov    %rax,%rbx
    0.00 :   414dd9:       jmpq   8f6c0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x220>
    0.00 :   414dde:       mov    %rax,%r14
    0.00 :   414de1:       jmpq   8f7a0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x300>
    0.00 :   414de6:       mov    %rax,%rbx
    0.00 :   414de9:       jmpq   8f5a9 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x109>
    0.00 :   414dee:       jmpq   8f526 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x86>
    0.00 :   414df3:       mov    %rax,%rbx
    0.00 :   414df6:       jmpq   8f7e1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x341>
    0.00 :   414dfb:       mov    %rax,%rbx
    0.00 :   414dfe:       jmpq   8f574 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0xd4>
    0.00 :   414e03:       mov    %rax,%rbx
    0.00 :   414e06:       jmpq   8f800 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x360>
    0.00 :   414e0b:       mov    %rax,%rbx
    0.00 :   414e0e:       jmpq   8f823 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x383>
    0.00 :   414e13:       jmpq   8f674 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x1d4>
    0.00 :   414e18:       mov    %rax,%rbx
    0.00 :   414e1b:       jmpq   8f7c1 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x321>
    0.00 :   414e20:       mov    %rax,%rbx
    0.00 :   414e23:       jmpq   8f85d <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x3bd>
    0.00 :   414e28:       mov    %rax,%rbx
    0.00 :   414e2b:       jmpq   8f87b <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x3db>
    0.00 :   414e30:       jmpq   8f8bc <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x41c>
    0.00 :   414e35:       jmpq   8f654 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x1b4>
    0.00 :   414e3a:       mov    %rax,%rbx
    0.00 :   414e3d:       jmpq   8f8e0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x440>
    0.00 :   414e42:       mov    %rax,%rbx
    0.00 :   414e45:       jmpq   8f5bb <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x11b>
    0.00 :   414e4a:       mov    %rax,%rbx
    0.00 :   414e4d:       jmpq   8f9d3 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x533>
    0.00 :   414e52:       mov    %rax,%rbx
    0.00 :   414e55:       jmpq   8fa19 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x579>
    0.00 :   414e5a:       mov    %rax,%rbx
    0.00 :   414e5d:       jmpq   8f8ff <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x45f>
    0.00 :   414e62:       jmpq   8f939 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x499>
    0.00 :   414e67:       mov    %rax,%r14
    0.00 :   414e6a:       jmpq   8f95d <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x4bd>
    0.00 :   414e6f:       jmpq   8f741 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x2a1>
    0.00 :   414e74:       mov    %rax,%rbx
    0.00 :   414e77:       jmpq   8f816 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x376>
    0.00 :   414e7c:       mov    %rax,%rbx
    0.00 :   414e7f:       jmpq   8f99e <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x4fe>
    0.00 :   414e84:       mov    %rax,%rbx
    0.00 :   414e87:       jmpq   8f9e0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x540>
    0.00 :   414e8c:       mov    %rax,%rbx
    0.00 :   414e8f:       jmpq   8f9fe <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x55e>
    0.00 :   414e94:       mov    %rax,%rbx
    0.00 :   414e97:       jmpq   8f97e <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x4de>
    0.00 :   414e9c:       mov    %rax,%rbx
    0.00 :   414e9f:       jmpq   8f9bd <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x51d>
    0.00 :   414ea4:       mov    %rax,%rbx
    0.00 :   414ea7:       jmpq   8fa26 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x586>
    0.00 :   414eac:       jmpq   8fa43 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x5a3>
    0.00 :   414eb1:       jmpq   8fa61 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const [clone .cold.222]+0x5c1>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000599100 <onnxruntime::BFCArena::Alloc(unsigned long)>:
         :            _ZN11onnxruntime8BFCArena5AllocEm():
  100.00 :   599100:       xor    %edx,%edx
    0.00 :   599102:       jmpq   5986f0 <onnxruntime::BFCArena::AllocateRawInternal(unsigned long, bool)>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005edae0 <onnxruntime::Tensor::~Tensor()>:
         :            _ZN11onnxruntime6TensorD2Ev():
    0.00 :   5edae0:       push   %rbp
    0.00 :   5edae1:       push   %rbx
    0.00 :   5edae2:       mov    %rdi,%rbx
    0.00 :   5edae5:       sub    $0x8,%rsp
    0.00 :   5edae9:       callq  5eda40 <onnxruntime::Tensor::ReleaseBuffer()>
         :            *  not touched in any way.  Managing the pointer is the user's
         :            *  responsibility.
         :            */
         :            ~vector() _GLIBCXX_NOEXCEPT
         :            {
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5edaee:       mov    0x18(%rbx),%rdi
         :            if (__p)
    0.00 :   5edaf2:       test   %rdi,%rdi
    0.00 :   5edaf5:       je     5edafc <onnxruntime::Tensor::~Tensor()+0x1c>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5edaf7:       callq  53300 <operator delete(void*)@plt>
         :            // Does not throw if __r._M_get_use_count() == 0, caller must check.
         :            explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);
         :
         :            ~__shared_count() noexcept
         :            {
         :            if (_M_pi != nullptr)
    0.00 :   5edafc:       mov    0x10(%rbx),%rbx
    0.00 :   5edb00:       test   %rbx,%rbx
    0.00 :   5edb03:       je     5edb20 <onnxruntime::Tensor::~Tensor()+0x40>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5edb05:       mov    0x63a3fc(%rip),%rbp        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5edb0c:       test   %rbp,%rbp
    0.00 :   5edb0f:       je     5edb30 <onnxruntime::Tensor::~Tensor()+0x50>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5edb11:       mov    $0xffffffff,%eax
    0.00 :   5edb16:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
  100.00 :   5edb1b:       cmp    $0x1,%eax
    0.00 :   5edb1e:       je     5edb3e <onnxruntime::Tensor::~Tensor()+0x5e>
    0.00 :   5edb20:       add    $0x8,%rsp
    0.00 :   5edb24:       pop    %rbx
    0.00 :   5edb25:       pop    %rbp
    0.00 :   5edb26:       retq
    0.00 :   5edb27:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5edb30:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5edb33:       lea    -0x1(%rax),%edx
    0.00 :   5edb36:       mov    %edx,0x8(%rbx)
    0.00 :   5edb39:       cmp    $0x1,%eax
    0.00 :   5edb3c:       jne    5edb20 <onnxruntime::Tensor::~Tensor()+0x40>
         :            _M_dispose();
    0.00 :   5edb3e:       mov    (%rbx),%rax
    0.00 :   5edb41:       mov    0x10(%rax),%rax
    0.00 :   5edb45:       cmp    0x63a014(%rip),%rax        # c27b60 <.got+0xa0>
    0.00 :   5edb4c:       jne    5edba8 <onnxruntime::Tensor::~Tensor()+0xc8>
         :            if (__gthread_active_p())
    0.00 :   5edb4e:       test   %rbp,%rbp
    0.00 :   5edb51:       je     5edb88 <onnxruntime::Tensor::~Tensor()+0xa8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5edb53:       mov    $0xffffffff,%eax
    0.00 :   5edb58:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5edb5d:       cmp    $0x1,%eax
    0.00 :   5edb60:       jne    5edb20 <onnxruntime::Tensor::~Tensor()+0x40>
         :            _M_destroy();
    0.00 :   5edb62:       mov    (%rbx),%rax
    0.00 :   5edb65:       mov    0x18(%rax),%rdx
    0.00 :   5edb69:       cmp    0x63a030(%rip),%rdx        # c27ba0 <.got+0xe0>
    0.00 :   5edb70:       jne    5edb98 <onnxruntime::Tensor::~Tensor()+0xb8>
         :            { delete this; }
    0.00 :   5edb72:       mov    0x8(%rax),%rax
    0.00 :   5edb76:       add    $0x8,%rsp
    0.00 :   5edb7a:       mov    %rbx,%rdi
    0.00 :   5edb7d:       pop    %rbx
    0.00 :   5edb7e:       pop    %rbp
    0.00 :   5edb7f:       jmpq   *%rax
    0.00 :   5edb81:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5edb88:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5edb8b:       lea    -0x1(%rax),%edx
    0.00 :   5edb8e:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5edb91:       jmp    5edb5d <onnxruntime::Tensor::~Tensor()+0x7d>
    0.00 :   5edb93:       nopl   0x0(%rax,%rax,1)
    0.00 :   5edb98:       add    $0x8,%rsp
         :            _M_destroy();
    0.00 :   5edb9c:       mov    %rbx,%rdi
    0.00 :   5edb9f:       pop    %rbx
    0.00 :   5edba0:       pop    %rbp
    0.00 :   5edba1:       jmpq   *%rdx
    0.00 :   5edba3:       nopl   0x0(%rax,%rax,1)
         :            _M_dispose();
    0.00 :   5edba8:       mov    %rbx,%rdi
    0.00 :   5edbab:       callq  *%rax
    0.00 :   5edbad:       jmp    5edb4e <onnxruntime::Tensor::~Tensor()+0x6e>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000280280 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)>:
         :            _ZN11onnxruntime15BroadcastLooperINS_15BroadcastHelperEEEvRT_RKNS_25ProcessBroadcastSpanFuncsE():
    0.00 :   280280:       push   %r14
    0.00 :   280282:       push   %r13
    0.00 :   280284:       push   %r12
    0.00 :   280286:       push   %rbp
    0.00 :   280287:       push   %rbx
    0.00 :   280288:       sub    $0xb0,%rsp
    0.00 :   28028f:       mov    %fs:0x28,%rax
    0.00 :   280298:       mov    %rax,0xa8(%rsp)
    0.00 :   2802a0:       xor    %eax,%eax
    0.00 :   2802a2:       mov    (%rdi),%rax
    0.00 :   2802a5:       cmpq   $0x0,0x8(%rax)
    0.00 :   2802aa:       je     280589 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x309>
    0.00 :   2802b0:       mov    %rdi,%rbx
    0.00 :   2802b3:       mov    0x10(%rdi),%rdi
    0.00 :   2802b7:       mov    %rsi,%rbp
    0.00 :   2802ba:       callq  69a850 <onnxruntime::concurrency::ThreadPool::ShouldParallelize(onnxruntime::concurrency::ThreadPool const*)>
    0.00 :   2802bf:       mov    (%rbx),%rdx
    0.00 :   2802c2:       test   %al,%al
    0.00 :   2802c4:       mov    0x8(%rbx),%rax
    0.00 :   2802c8:       mov    0x50(%rdx),%rcx
    0.00 :   2802cc:       mov    (%rcx),%rcx
    0.00 :   2802cf:       je     2802e2 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x62>
    0.00 :   2802d1:       mov    0x10(%rax),%rsi
    0.00 :   2802d5:       cmp    %rsi,0x100(%rdx)
    0.00 :   2802dc:       je     2803e0 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x160>
         :
         :            _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
         :            : _M_current(_Iterator()) { }
         :
         :            explicit
         :            __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    0.00 :   2802e2:       mov    0x20(%rax),%rsi
    0.00 :   2802e6:       mov    0x18(%rax),%rax
    0.00 :   2802ea:       test   %rcx,%rcx
    0.00 :   2802ed:       jne    280350 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xd0>
    0.00 :   2802ef:       cmp    %rax,%rsi
    0.00 :   2802f2:       je     280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
    0.00 :   2802f4:       nopl   0x0(%rax)
    0.00 :   2802f8:       mov    %rbx,%rdi
    0.00 :   2802fb:       callq  *0x0(%rbp)
    0.00 :   2802fe:       mov    (%rbx),%rdi
    0.00 :   280301:       mov    0x100(%rdi),%rsi
    0.00 :   280308:       callq  280110 <onnxruntime::InputBroadcaster::AdvanceBy(unsigned long)>
    0.00 :   28030d:       mov    0x8(%rbx),%rdx
    0.00 :   280311:       mov    0x8(%rdx),%rax
    0.00 :   280315:       imul   (%rdx),%rax
    0.00 :   280319:       add    0x18(%rdx),%rax
    0.00 :   28031d:       mov    %rax,0x18(%rdx)
    0.00 :   280321:       cmp    %rax,0x20(%rdx)
    0.00 :   280325:       jne    2802f8 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x78>
    0.00 :   280327:       mov    0xa8(%rsp),%rax
    0.00 :   28032f:       xor    %fs:0x28,%rax
    0.00 :   280338:       jne    280584 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x304>
    0.00 :   28033e:       add    $0xb0,%rsp
    0.00 :   280345:       pop    %rbx
    0.00 :   280346:       pop    %rbp
    0.00 :   280347:       pop    %r12
    0.00 :   280349:       pop    %r13
    0.00 :   28034b:       pop    %r14
    0.00 :   28034d:       retq
    0.00 :   28034e:       xchg   %ax,%ax
    0.00 :   280350:       mov    0xa8(%rdx),%rdx
    0.00 :   280357:       cmpq   $0x0,(%rdx)
    0.00 :   28035b:       jne    2803a0 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x120>
    0.00 :   28035d:       cmp    %rax,%rsi
    0.00 :   280360:       je     280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
    0.00 :   280362:       nopw   0x0(%rax,%rax,1)
    0.00 :   280368:       mov    %rbx,%rdi
    0.00 :   28036b:       callq  *0x8(%rbp)
    0.00 :   28036e:       mov    (%rbx),%rdi
    0.00 :   280371:       mov    0x100(%rdi),%rsi
    0.00 :   280378:       callq  280110 <onnxruntime::InputBroadcaster::AdvanceBy(unsigned long)>
    0.00 :   28037d:       mov    0x8(%rbx),%rdx
    0.00 :   280381:       mov    0x8(%rdx),%rax
    0.00 :   280385:       imul   (%rdx),%rax
    0.00 :   280389:       add    0x18(%rdx),%rax
    0.00 :   28038d:       mov    %rax,0x18(%rdx)
    0.00 :   280391:       cmp    %rax,0x20(%rdx)
    0.00 :   280395:       jne    280368 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xe8>
    0.00 :   280397:       jmp    280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
    0.00 :   280399:       nopl   0x0(%rax)
    0.00 :   2803a0:       cmp    %rax,%rsi
    0.00 :   2803a3:       je     280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
    0.00 :   2803a5:       nopl   (%rax)
    0.00 :   2803a8:       mov    %rbx,%rdi
    0.00 :   2803ab:       callq  *0x10(%rbp)
    0.00 :   2803ae:       mov    (%rbx),%rdi
    0.00 :   2803b1:       mov    0x100(%rdi),%rsi
  100.00 :   2803b8:       callq  280110 <onnxruntime::InputBroadcaster::AdvanceBy(unsigned long)>
    0.00 :   2803bd:       mov    0x8(%rbx),%rdx
    0.00 :   2803c1:       mov    0x8(%rdx),%rax
    0.00 :   2803c5:       imul   (%rdx),%rax
    0.00 :   2803c9:       add    0x18(%rdx),%rax
    0.00 :   2803cd:       mov    %rax,0x18(%rdx)
    0.00 :   2803d1:       cmp    %rax,0x20(%rdx)
    0.00 :   2803d5:       jne    2803a8 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x128>
    0.00 :   2803d7:       jmpq   280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
    0.00 :   2803dc:       nopl   0x0(%rax)
    0.00 :   2803e0:       mov    0x18(%rdx),%rsi
    0.00 :   2803e4:       cmp    %rsi,0x20(%rdx)
    0.00 :   2803e8:       cmovae 0x20(%rdx),%rsi
    0.00 :   2803ed:       test   %rsi,%rsi
    0.00 :   2803f0:       js     280510 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x290>
    0.00 :   2803f6:       pxor   %xmm0,%xmm0
    0.00 :   2803fa:       cvtsi2ss %rsi,%xmm0
    0.00 :   2803ff:       mov    (%rax),%rdi
    0.00 :   280402:       cvtss2sd %xmm0,%xmm0
    0.00 :   280406:       movsd  %xmm0,(%rsp)
    0.00 :   28040b:       test   %rdi,%rdi
    0.00 :   28040e:       js     2804f0 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x270>
    0.00 :   280414:       pxor   %xmm0,%xmm0
    0.00 :   280418:       cvtsi2ss %rdi,%xmm0
    0.00 :   28041d:       cvtss2sd %xmm0,%xmm0
    0.00 :   280421:       movsd  %xmm0,0x8(%rsp)
    0.00 :   280427:       movsd  0x18(%rbx),%xmm0
    0.00 :   28042c:       mov    0x10(%rbx),%rdi
    0.00 :   280430:       movsd  %xmm0,0x10(%rsp)
    0.00 :   280436:       test   %rcx,%rcx
    0.00 :   280439:       je     28052e <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x2ae>
    0.00 :   28043f:       mov    0xa8(%rdx),%rdx
    0.00 :   280446:       cmpq   $0x0,(%rdx)
    0.00 :   28044a:       mov    %rbx,0x40(%rsp)
    0.00 :   28044f:       mov    %rbp,0x48(%rsp)
    0.00 :   280454:       jne    2804a2 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x222>
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   280456:       lea    -0x223ed(%rip),%rcx        # 25e070 <std::_Function_handler<void (long, long), onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#2}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)>
    0.00 :   28045d:       lea    0x40(%rsp),%rbx
    0.00 :   280462:       mov    %rsp,%rdx
    0.00 :   280465:       mov    %rcx,0x58(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   28046a:       lea    -0x22331(%rip),%rcx        # 25e140 <std::_Function_base::_Base_manager<onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#2}> const&, std::_Manager_operation)>
    0.00 :   280471:       mov    %rcx,0x50(%rsp)
    0.00 :   280476:       mov    0x10(%rax),%rsi
    0.00 :   28047a:       mov    %rbx,%rcx
    0.00 :   28047d:       callq  69e260 <onnxruntime::concurrency::ThreadPool::TryParallelFor(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::TensorOpCost const&, std::function<void (long, long)> const&)>
         :            if (_M_manager)
    0.00 :   280482:       mov    0x50(%rsp),%rax
    0.00 :   280487:       test   %rax,%rax
    0.00 :   28048a:       je     280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   280490:       mov    $0x3,%edx
    0.00 :   280495:       mov    %rbx,%rsi
    0.00 :   280498:       mov    %rbx,%rdi
    0.00 :   28049b:       callq  *%rax
    0.00 :   28049d:       jmpq   280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   2804a2:       lea    -0x171e9(%rip),%rcx        # 2692c0 <std::_Function_handler<void (long, long), onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#3}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)>
    0.00 :   2804a9:       lea    0x40(%rsp),%rbx
    0.00 :   2804ae:       mov    %rsp,%rdx
    0.00 :   2804b1:       mov    %rcx,0x58(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   2804b6:       lea    -0x2233d(%rip),%rcx        # 25e180 <std::_Function_base::_Base_manager<onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#3}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#3}> const&, std::_Manager_operation)>
    0.00 :   2804bd:       mov    %rcx,0x50(%rsp)
    0.00 :   2804c2:       mov    0x10(%rax),%rsi
    0.00 :   2804c6:       mov    %rbx,%rcx
    0.00 :   2804c9:       callq  69e260 <onnxruntime::concurrency::ThreadPool::TryParallelFor(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::TensorOpCost const&, std::function<void (long, long)> const&)>
         :            if (_M_manager)
    0.00 :   2804ce:       mov    0x50(%rsp),%rax
    0.00 :   2804d3:       test   %rax,%rax
    0.00 :   2804d6:       je     280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   2804dc:       mov    $0x3,%edx
    0.00 :   2804e1:       mov    %rbx,%rsi
    0.00 :   2804e4:       mov    %rbx,%rdi
    0.00 :   2804e7:       callq  *%rax
    0.00 :   2804e9:       jmpq   280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
    0.00 :   2804ee:       xchg   %ax,%ax
    0.00 :   2804f0:       mov    %rdi,%rsi
    0.00 :   2804f3:       and    $0x1,%edi
    0.00 :   2804f6:       pxor   %xmm0,%xmm0
    0.00 :   2804fa:       shr    %rsi
    0.00 :   2804fd:       or     %rdi,%rsi
    0.00 :   280500:       cvtsi2ss %rsi,%xmm0
    0.00 :   280505:       addss  %xmm0,%xmm0
    0.00 :   280509:       jmpq   28041d <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x19d>
    0.00 :   28050e:       xchg   %ax,%ax
    0.00 :   280510:       mov    %rsi,%rdi
    0.00 :   280513:       and    $0x1,%esi
    0.00 :   280516:       pxor   %xmm0,%xmm0
    0.00 :   28051a:       shr    %rdi
    0.00 :   28051d:       or     %rsi,%rdi
    0.00 :   280520:       cvtsi2ss %rdi,%xmm0
    0.00 :   280525:       addss  %xmm0,%xmm0
    0.00 :   280529:       jmpq   2803ff <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x17f>
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   28052e:       lea    -0x17345(%rip),%rcx        # 2691f0 <std::_Function_handler<void (long, long), onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#1}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)>
    0.00 :   280535:       mov    %rbx,0x40(%rsp)
    0.00 :   28053a:       lea    0x40(%rsp),%rbx
    0.00 :   28053f:       mov    %rsp,%rdx
    0.00 :   280542:       mov    %rcx,0x58(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   280547:       lea    -0x2251e(%rip),%rcx        # 25e030 <std::_Function_base::_Base_manager<onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<onnxruntime::ParallelizeSingleSpan<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::{lambda(long, long)#1}> const&, std::_Manager_operation)>
    0.00 :   28054e:       mov    %rcx,0x50(%rsp)
    0.00 :   280553:       mov    0x10(%rax),%rsi
    0.00 :   280557:       mov    %rbx,%rcx
    0.00 :   28055a:       mov    %rbp,0x48(%rsp)
    0.00 :   28055f:       callq  69e260 <onnxruntime::concurrency::ThreadPool::TryParallelFor(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::TensorOpCost const&, std::function<void (long, long)> const&)>
         :            if (_M_manager)
    0.00 :   280564:       mov    0x50(%rsp),%rax
    0.00 :   280569:       test   %rax,%rax
    0.00 :   28056c:       je     280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   280572:       mov    $0x3,%edx
    0.00 :   280577:       mov    %rbx,%rsi
    0.00 :   28057a:       mov    %rbx,%rdi
    0.00 :   28057d:       callq  *%rax
    0.00 :   28057f:       jmpq   280327 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0xa7>
    0.00 :   280584:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   280589:       mov    $0xa0,%edi
    0.00 :   28058e:       lea    0x20(%rsp),%r13
    0.00 :   280593:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   280598:       lea    0x5c4521(%rip),%rsi        # 844ac0 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x240>
    0.00 :   28059f:       mov    %r13,%rdi
    0.00 :   2805a2:       mov    %rax,%r12
    0.00 :   2805a5:       callq  27fdf0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.796]>
    0.00 :   2805aa:       mov    %rsp,%r14
    0.00 :   2805ad:       mov    %r14,%rdi
    0.00 :   2805b0:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2805b5:       lea    0x40(%rsp),%rbx
    0.00 :   2805ba:       mov    %r14,%r8
    0.00 :   2805bd:       lea    0x5c55bc(%rip),%rcx        # 845b80 <onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)::__PRETTY_FUNCTION__>
    0.00 :   2805c4:       mov    $0x39e,%edx
    0.00 :   2805c9:       lea    0x5c4488(%rip),%rsi        # 844a58 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x1d8>
    0.00 :   2805d0:       mov    %rbx,%rdi
    0.00 :   2805d3:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2805d8:       mov    %r13,%rcx
    0.00 :   2805db:       lea    0x5c49e4(%rip),%rdx        # 844fc6 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x746>
    0.00 :   2805e2:       mov    %rbx,%rsi
    0.00 :   2805e5:       mov    %r12,%rdi
    0.00 :   2805e8:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2805ed:       mov    %rbx,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   2805f0:       add    $0x10,%r13
    0.00 :   2805f4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2805f9:       mov    %r14,%rdi
    0.00 :   2805fc:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   280601:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   280606:       cmp    %r13,%rdi
    0.00 :   280609:       je     280610 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x390>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   28060b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   280610:       lea    -0x186ef7(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   280617:       lea    0x991012(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   28061e:       mov    %r12,%rdi
    0.00 :   280621:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   280626:       mov    %rax,%rbp
    0.00 :   280629:       jmp    280635 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x3b5>
    0.00 :   28062b:       mov    %rax,%rbx
    0.00 :   28062e:       jmp    280640 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x3c0>
    0.00 :   280630:       mov    %rax,%rbx
    0.00 :   280633:       jmp    280648 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x3c8>
    0.00 :   280635:       mov    %rbx,%rdi
    0.00 :   280638:       mov    %rbp,%rbx
    0.00 :   28063b:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   280640:       mov    %r14,%rdi
    0.00 :   280643:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   280648:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   28064d:       add    $0x10,%r13
    0.00 :   280651:       cmp    %r13,%rdi
    0.00 :   280654:       je     28065b <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x3db>
    0.00 :   280656:       callq  53300 <operator delete(void*)@plt>
    0.00 :   28065b:       mov    %r12,%rdi
    0.00 :   28065e:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   280663:       mov    %rbx,%rdi
    0.00 :   280666:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   28066b:       mov    %rax,%rbx
    0.00 :   28066e:       jmp    28065b <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x3db>
    0.00 :   280670:       mov    %rax,%rbp
    0.00 :   280673:       jmp    28067f <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x3ff>
    0.00 :   280675:       mov    %rax,%rbp
    0.00 :   280678:       jmp    2806b7 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x437>
    0.00 :   28067a:       mov    %rax,%rbp
    0.00 :   28067d:       jmp    28069e <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x41e>
         :            if (_M_manager)
    0.00 :   28067f:       mov    0x50(%rsp),%rax
    0.00 :   280684:       test   %rax,%rax
    0.00 :   280687:       je     280696 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x416>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   280689:       mov    $0x3,%edx
    0.00 :   28068e:       mov    %rbx,%rsi
    0.00 :   280691:       mov    %rbx,%rdi
    0.00 :   280694:       callq  *%rax
    0.00 :   280696:       mov    %rbp,%rdi
    0.00 :   280699:       callq  53c30 <_Unwind_Resume@plt>
         :            if (_M_manager)
    0.00 :   28069e:       mov    0x50(%rsp),%rax
    0.00 :   2806a3:       test   %rax,%rax
    0.00 :   2806a6:       je     280696 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x416>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   2806a8:       mov    $0x3,%edx
    0.00 :   2806ad:       mov    %rbx,%rsi
    0.00 :   2806b0:       mov    %rbx,%rdi
    0.00 :   2806b3:       callq  *%rax
    0.00 :   2806b5:       jmp    280696 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x416>
         :            if (_M_manager)
    0.00 :   2806b7:       mov    0x50(%rsp),%rax
    0.00 :   2806bc:       test   %rax,%rax
    0.00 :   2806bf:       je     280696 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x416>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   2806c1:       mov    $0x3,%edx
    0.00 :   2806c6:       mov    %rbx,%rsi
    0.00 :   2806c9:       mov    %rbx,%rdi
    0.00 :   2806cc:       callq  *%rax
    0.00 :   2806ce:       jmp    280696 <void onnxruntime::BroadcastLooper<onnxruntime::BroadcastHelper>(onnxruntime::BroadcastHelper&, onnxruntime::ProcessBroadcastSpanFuncs const&)+0x416>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000494010 <onnxruntime::IsTransposeReshape(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<long, std::allocator<long> > const&)>:
         :            _ZN11onnxruntime18IsTransposeReshapeERKSt6vectorImSaImEERKS0_IlSaIlEE():
    0.00 :   494010:       mov    (%rdi),%r8
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  100.00 :   494013:       mov    0x8(%rdi),%rdi
    0.00 :   494017:       sub    %r8,%rdi
    0.00 :   49401a:       sar    $0x3,%rdi
    0.00 :   49401e:       je     49404c <onnxruntime::IsTransposeReshape(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<long, std::allocator<long> > const&)+0x3c>
    0.00 :   494020:       mov    (%rsi),%rsi
    0.00 :   494023:       xor    %eax,%eax
    0.00 :   494025:       xor    %ecx,%ecx
    0.00 :   494027:       nopw   0x0(%rax,%rax,1)
    0.00 :   494030:       mov    (%r8,%rax,8),%rdx
    0.00 :   494034:       cmpq   $0x1,(%rsi,%rdx,8)
    0.00 :   494039:       je     494043 <onnxruntime::IsTransposeReshape(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<long, std::allocator<long> > const&)+0x33>
    0.00 :   49403b:       cmp    %rcx,%rdx
    0.00 :   49403e:       jb     494058 <onnxruntime::IsTransposeReshape(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<long, std::allocator<long> > const&)+0x48>
    0.00 :   494040:       mov    %rdx,%rcx
    0.00 :   494043:       add    $0x1,%rax
    0.00 :   494047:       cmp    %rdi,%rax
    0.00 :   49404a:       jne    494030 <onnxruntime::IsTransposeReshape(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<long, std::allocator<long> > const&)+0x20>
    0.00 :   49404c:       mov    $0x1,%eax
    0.00 :   494051:       retq
    0.00 :   494052:       nopw   0x0(%rax,%rax,1)
    0.00 :   494058:       xor    %eax,%eax
    0.00 :   49405a:       retq
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000097140 <__libc_malloc@@GLIBC_2.2.5>:
    0.00 :   97140:       push   %rbp
    0.00 :   97141:       push   %rbx
    0.00 :   97142:       sub    $0x18,%rsp
    0.00 :   97146:       mov    0x353d9b(%rip),%rax        # 3eaee8 <__malloc_hook@@GLIBC_2.2.5-0xd48>
    0.00 :   9714d:       mov    (%rax),%rax
    0.00 :   97150:       test   %rax,%rax
    0.00 :   97153:       jne    97350 <__libc_malloc@@GLIBC_2.2.5+0x210>
    0.00 :   97159:       lea    0x17(%rdi),%rax
    0.00 :   9715d:       cmp    $0x1f,%rax
    0.00 :   97161:       ja     97270 <__libc_malloc@@GLIBC_2.2.5+0x130>
    0.00 :   97167:       xor    %edx,%edx
    0.00 :   97169:       mov    $0x20,%eax
    0.00 :   9716e:       cmp    %rdi,%rax
    0.00 :   97171:       jb     97360 <__libc_malloc@@GLIBC_2.2.5+0x220>
    0.00 :   97177:       test   %dl,%dl
    0.00 :   97179:       jne    97360 <__libc_malloc@@GLIBC_2.2.5+0x220>
    0.00 :   9717f:       mov    0x353bf2(%rip),%rbp        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   97186:       sub    $0x11,%rax
    0.00 :   9718a:       mov    %rdi,%rbx
    0.00 :   9718d:       shr    $0x4,%rax
    0.00 :   97191:       mov    %fs:0x0(%rbp),%rcx
    0.00 :   97196:       test   %rcx,%rcx
    0.00 :   97199:       je     97280 <__libc_malloc@@GLIBC_2.2.5+0x140>
    0.00 :   9719f:       cmp    0x35412a(%rip),%rax        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   971a6:       jb     972c0 <__libc_malloc@@GLIBC_2.2.5+0x180>
    0.00 :   971ac:       lea    0x359825(%rip),%rax        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   971b3:       mov    (%rax),%eax
   26.50 :   971b5:       test   %eax,%eax
    0.00 :   971b7:       jne    97378 <__libc_malloc@@GLIBC_2.2.5+0x238>
    0.00 :   971bd:       lea    0x354a7c(%rip),%rdi        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   971c4:       mov    %rbx,%rsi
    0.00 :   971c7:       callq  94450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>
    0.00 :   971cc:       test   %rax,%rax
    0.00 :   971cf:       mov    %rax,%rdx
    0.00 :   971d2:       je     97340 <__libc_malloc@@GLIBC_2.2.5+0x200>
    0.00 :   971d8:       mov    -0x8(%rax),%rax
    0.00 :   971dc:       test   $0x2,%al
    0.00 :   971de:       jne    972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   971e4:       test   $0x4,%al
    0.00 :   971e6:       je     972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   971ec:       lea    -0x10(%rdx),%rax
    0.00 :   971f0:       lea    0x354a49(%rip),%rcx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   971f7:       and    $0xfffffffffc000000,%rax
    0.00 :   971fd:       cmp    %rcx,(%rax)
    0.00 :   97200:       je     972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   97206:       mov    0x353be3(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   9720d:       lea    0x11c9e5(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   97214:       lea    0x121aa5(%rip),%rbx        # 1b8cc0 <_libc_intl_domainname@@GLIBC_2.2.5+0x502c>
    0.00 :   9721b:       mov    $0xbfd,%r9d
    0.00 :   97221:       mov    (%rax),%rdx
    0.00 :   97224:       lea    0x11cc25(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9722b:       cmpb   $0x0,(%rdx)
    0.00 :   9722e:       cmovne %rax,%rcx
    0.00 :   97232:       sub    $0x8,%rsp
    0.00 :   97236:       push   %rbx
    0.00 :   97237:       push   %rax
    0.00 :   97238:       lea    0x121da1(%rip),%rax        # 1b8fe0 <_libc_intl_domainname@@GLIBC_2.2.5+0x534c>
    0.00 :   9723f:       push   %rax
    0.00 :   97240:       lea    0x11da31(%rip),%r8        # 1b4c78 <_libc_intl_domainname@@GLIBC_2.2.5+0xfe4>
    0.00 :   97247:       lea    0x121482(%rip),%rsi        # 1b86d0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4a3c>
    0.00 :   9724e:       xor    %edi,%edi
    0.00 :   97250:       xor    %eax,%eax
    0.00 :   97252:       callq  7deb0 <psiginfo@@GLIBC_2.10+0x1780>
    0.00 :   97257:       mov    0x353b52(%rip),%rax        # 3eadb0 <stderr@@GLIBC_2.2.5-0x1a90>
    0.00 :   9725e:       add    $0x20,%rsp
    0.00 :   97262:       mov    (%rax),%rdi
    0.00 :   97265:       callq  7e8c0 <_IO_fflush@@GLIBC_2.2.5>
    0.00 :   9726a:       callq  407e0 <abort@@GLIBC_2.2.5>
    0.00 :   9726f:       nop
    0.00 :   97270:       and    $0xfffffffffffffff0,%rax
    0.00 :   97274:       cmp    $0xffffffffffffffbf,%rax
    0.00 :   97278:       seta   %dl
    0.00 :   9727b:       jmpq   9716e <__libc_malloc@@GLIBC_2.2.5+0x2e>
    0.00 :   97280:       mov    0x353af9(%rip),%rdx        # 3ead80 <h_errlist@@GLIBC_2.2.5+0xce0>
    0.00 :   97287:       cmpb   $0x0,%fs:(%rdx)
    0.00 :   9728b:       jne    971ac <__libc_malloc@@GLIBC_2.2.5+0x6c>
    0.00 :   97291:       mov    %rax,0x8(%rsp)
    0.00 :   97296:       callq  96530 <_IO_str_seekoff@@GLIBC_2.2.5+0x6040>
    0.00 :   9729b:       mov    0x8(%rsp),%rax
    0.00 :   972a0:       cmp    %rax,0x354029(%rip)        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   972a7:       jbe    971ac <__libc_malloc@@GLIBC_2.2.5+0x6c>
    0.00 :   972ad:       mov    %fs:0x0(%rbp),%rcx
    0.00 :   972b2:       test   %rcx,%rcx
    0.00 :   972b5:       je     971ac <__libc_malloc@@GLIBC_2.2.5+0x6c>
    0.00 :   972bb:       nopl   0x0(%rax,%rax,1)
    0.00 :   972c0:       lea    (%rcx,%rax,8),%rsi
    0.00 :   972c4:       mov    0x40(%rsi),%rdx
   73.50 :   972c8:       test   %rdx,%rdx
    0.00 :   972cb:       je     971ac <__libc_malloc@@GLIBC_2.2.5+0x6c>
    0.00 :   972d1:       cmp    $0x3f,%rax
    0.00 :   972d5:       ja     972f8 <__libc_malloc@@GLIBC_2.2.5+0x1b8>
    0.00 :   972d7:       mov    (%rdx),%rdi
    0.00 :   972da:       mov    %rdi,0x40(%rsi)
    0.00 :   972de:       subb   $0x1,(%rcx,%rax,1)
    0.00 :   972e2:       movq   $0x0,0x8(%rdx)
    0.00 :   972ea:       add    $0x18,%rsp
    0.00 :   972ee:       mov    %rdx,%rax
    0.00 :   972f1:       pop    %rbx
    0.00 :   972f2:       pop    %rbp
    0.00 :   972f3:       retq
    0.00 :   972f4:       nopl   0x0(%rax)
    0.00 :   972f8:       mov    0x353af1(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   972ff:       lea    0x11c8f3(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   97306:       lea    0x11da28(%rip),%rbx        # 1b4d35 <_libc_intl_domainname@@GLIBC_2.2.5+0x10a1>
    0.00 :   9730d:       mov    $0xb86,%r9d
    0.00 :   97313:       mov    (%rax),%rdx
    0.00 :   97316:       lea    0x11cb33(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9731d:       cmpb   $0x0,(%rdx)
    0.00 :   97320:       cmovne %rax,%rcx
    0.00 :   97324:       sub    $0x8,%rsp
    0.00 :   97328:       push   %rbx
    0.00 :   97329:       push   %rax
    0.00 :   9732a:       lea    0x121d1f(%rip),%rax        # 1b9050 <_libc_intl_domainname@@GLIBC_2.2.5+0x53bc>
    0.00 :   97331:       push   %rax
    0.00 :   97332:       jmpq   97240 <__libc_malloc@@GLIBC_2.2.5+0x100>
    0.00 :   97337:       nopw   0x0(%rax,%rax,1)
    0.00 :   97340:       add    $0x18,%rsp
    0.00 :   97344:       xor    %edx,%edx
    0.00 :   97346:       mov    %rdx,%rax
    0.00 :   97349:       pop    %rbx
    0.00 :   9734a:       pop    %rbp
    0.00 :   9734b:       retq
    0.00 :   9734c:       nopl   0x0(%rax)
    0.00 :   97350:       mov    0x28(%rsp),%rsi
    0.00 :   97355:       add    $0x18,%rsp
    0.00 :   97359:       pop    %rbx
    0.00 :   9735a:       pop    %rbp
    0.00 :   9735b:       jmpq   *%rax
    0.00 :   9735d:       nopl   (%rax)
    0.00 :   97360:       mov    0x353b01(%rip),%rax        # 3eae68 <h_errlist@@GLIBC_2.2.5+0xdc8>
    0.00 :   97367:       xor    %edx,%edx
    0.00 :   97369:       movl   $0xc,%fs:(%rax)
    0.00 :   97370:       jmpq   972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   97375:       nopl   (%rax)
    0.00 :   97378:       mov    0x3539f1(%rip),%rax        # 3ead70 <h_errlist@@GLIBC_2.2.5+0xcd0>
    0.00 :   9737f:       mov    %fs:(%rax),%rbp
    0.00 :   97383:       test   %rbp,%rbp
    0.00 :   97386:       je     97480 <__libc_malloc@@GLIBC_2.2.5+0x340>
    0.00 :   9738c:       mov    $0x1,%esi
    0.00 :   97391:       xor    %eax,%eax
    0.00 :   97393:       cmpl   $0x0,0x35963e(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   9739a:       je     973a5 <__libc_malloc@@GLIBC_2.2.5+0x265>
    0.00 :   9739c:       lock cmpxchg %esi,0x0(%rbp)
    0.00 :   973a1:       jne    973ab <__libc_malloc@@GLIBC_2.2.5+0x26b>
    0.00 :   973a3:       jmp    973c2 <__libc_malloc@@GLIBC_2.2.5+0x282>
    0.00 :   973a5:       cmpxchg %esi,0x0(%rbp)
    0.00 :   973a9:       je     973c2 <__libc_malloc@@GLIBC_2.2.5+0x282>
    0.00 :   973ab:       lea    0x0(%rbp),%rdi
    0.00 :   973af:       sub    $0x80,%rsp
    0.00 :   973b6:       callq  130520 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   973bb:       add    $0x80,%rsp
    0.00 :   973c2:       mov    %rbx,%rsi
    0.00 :   973c5:       mov    %rbp,%rdi
    0.00 :   973c8:       callq  94450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>
    0.00 :   973cd:       test   %rax,%rax
    0.00 :   973d0:       mov    %rax,%rdx
    0.00 :   973d3:       je     974c0 <__libc_malloc@@GLIBC_2.2.5+0x380>
    0.00 :   973d9:       cmpl   $0x0,0x3595f8(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   973e0:       je     973ea <__libc_malloc@@GLIBC_2.2.5+0x2aa>
    0.00 :   973e2:       lock decl 0x0(%rbp)
    0.00 :   973e6:       jne    973ef <__libc_malloc@@GLIBC_2.2.5+0x2af>
    0.00 :   973e8:       jmp    97406 <__libc_malloc@@GLIBC_2.2.5+0x2c6>
    0.00 :   973ea:       decl   0x0(%rbp)
    0.00 :   973ed:       je     97406 <__libc_malloc@@GLIBC_2.2.5+0x2c6>
    0.00 :   973ef:       lea    0x0(%rbp),%rdi
    0.00 :   973f3:       sub    $0x80,%rsp
    0.00 :   973fa:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   973ff:       add    $0x80,%rsp
    0.00 :   97406:       test   %rdx,%rdx
    0.00 :   97409:       je     97340 <__libc_malloc@@GLIBC_2.2.5+0x200>
    0.00 :   9740f:       mov    -0x8(%rdx),%rax
    0.00 :   97413:       test   $0x2,%al
    0.00 :   97415:       jne    972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   9741b:       test   $0x4,%al
    0.00 :   9741d:       lea    0x35481c(%rip),%rcx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   97424:       je     97433 <__libc_malloc@@GLIBC_2.2.5+0x2f3>
    0.00 :   97426:       lea    -0x10(%rdx),%rax
    0.00 :   9742a:       and    $0xfffffffffc000000,%rax
    0.00 :   97430:       mov    (%rax),%rcx
    0.00 :   97433:       cmp    %rbp,%rcx
    0.00 :   97436:       je     972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   9743c:       mov    0x3539ad(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   97443:       lea    0x11c7af(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   9744a:       lea    0x1218d7(%rip),%rsi        # 1b8d28 <_libc_intl_domainname@@GLIBC_2.2.5+0x5094>
    0.00 :   97451:       mov    $0xc11,%r9d
    0.00 :   97457:       mov    (%rax),%rdx
    0.00 :   9745a:       lea    0x11c9ef(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   97461:       cmpb   $0x0,(%rdx)
    0.00 :   97464:       cmovne %rax,%rcx
    0.00 :   97468:       sub    $0x8,%rsp
    0.00 :   9746c:       push   %rsi
    0.00 :   9746d:       push   %rax
    0.00 :   9746e:       lea    0x121b6b(%rip),%rax        # 1b8fe0 <_libc_intl_domainname@@GLIBC_2.2.5+0x534c>
    0.00 :   97475:       push   %rax
    0.00 :   97476:       jmpq   97240 <__libc_malloc@@GLIBC_2.2.5+0x100>
    0.00 :   9747b:       nopl   0x0(%rax,%rax,1)
    0.00 :   97480:       callq  91e70 <_IO_str_seekoff@@GLIBC_2.2.5+0x1980>
    0.00 :   97485:       test   %rax,%rax
    0.00 :   97488:       mov    %rax,%rbp
    0.00 :   9748b:       jne    973c2 <__libc_malloc@@GLIBC_2.2.5+0x282>
    0.00 :   97491:       xor    %esi,%esi
    0.00 :   97493:       mov    %rbx,%rdi
    0.00 :   97496:       callq  917b0 <_IO_str_seekoff@@GLIBC_2.2.5+0x12c0>
    0.00 :   9749b:       mov    %rbx,%rsi
    0.00 :   9749e:       mov    %rax,%rdi
    0.00 :   974a1:       mov    %rax,%rbp
    0.00 :   974a4:       callq  94450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>
    0.00 :   974a9:       test   %rax,%rax
    0.00 :   974ac:       mov    %rax,%rdx
    0.00 :   974af:       jne    974dd <__libc_malloc@@GLIBC_2.2.5+0x39d>
    0.00 :   974b1:       test   %rbp,%rbp
    0.00 :   974b4:       je     974dd <__libc_malloc@@GLIBC_2.2.5+0x39d>
    0.00 :   974b6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   974c0:       nop
    0.00 :   974c1:       mov    %rbp,%rdi
    0.00 :   974c4:       mov    %rbx,%rsi
    0.00 :   974c7:       callq  92090 <_IO_str_seekoff@@GLIBC_2.2.5+0x1ba0>
    0.00 :   974cc:       mov    %rbx,%rsi
    0.00 :   974cf:       mov    %rax,%rdi
    0.00 :   974d2:       mov    %rax,%rbp
    0.00 :   974d5:       callq  94450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>
    0.00 :   974da:       mov    %rax,%rdx
    0.00 :   974dd:       test   %rbp,%rbp
    0.00 :   974e0:       je     97406 <__libc_malloc@@GLIBC_2.2.5+0x2c6>
    0.00 :   974e6:       jmpq   973d9 <__libc_malloc@@GLIBC_2.2.5+0x299>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000002a1e00 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime4GemmIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   2a1e00:       push   %rbp
    0.00 :   2a1e01:       mov    %rsp,%rbp
    0.00 :   2a1e04:       push   %r15
    0.00 :   2a1e06:       mov    %rdi,%r15
    0.00 :   2a1e09:       mov    %rdx,%rdi
    0.00 :   2a1e0c:       push   %r14
    0.00 :   2a1e0e:       xor    %r14d,%r14d
    0.00 :   2a1e11:       push   %r13
    0.00 :   2a1e13:       push   %r12
    0.00 :   2a1e15:       mov    %rdx,%r12
    0.00 :   2a1e18:       push   %rbx
    0.00 :   2a1e19:       mov    %rsi,%rbx
    0.00 :   2a1e1c:       xor    %esi,%esi
    0.00 :   2a1e1e:       sub    $0x128,%rsp
    0.00 :   2a1e25:       mov    %fs:0x28,%rax
    0.00 :   2a1e2e:       mov    %rax,-0x38(%rbp)
    0.00 :   2a1e32:       xor    %eax,%eax
    0.00 :   2a1e34:       mov    0x18(%rdx),%rax
    0.00 :   2a1e38:       mov    %rax,-0x130(%rbp)
    0.00 :   2a1e3f:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   2a1e44:       cmpq   $0x0,0x48(%rbx)
    0.00 :   2a1e49:       mov    %rax,-0x118(%rbp)
    0.00 :   2a1e50:       je     2a2260 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x460>
    0.00 :   2a1e56:       mov    $0x2,%esi
    0.00 :   2a1e5b:       mov    %r12,%rdi
    0.00 :   2a1e5e:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   2a1e63:       mov    %rax,-0x120(%rbp)
    0.00 :   2a1e6a:       test   %rax,%rax
    0.00 :   2a1e6d:       je     2a2130 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x330>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   2a1e73:       mov    0x18(%rax),%rsi
    0.00 :   2a1e77:       mov    0x20(%rax),%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a1e7b:       movq   $0x0,-0x100(%rbp)
    0.00 :   2a1e86:       movq   $0x0,-0xf8(%rbp)
    0.00 :   2a1e91:       movq   $0x0,-0xf0(%rbp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2a1e9c:       mov    %rax,%r13
    0.00 :   2a1e9f:       sub    %rsi,%r13
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2a1ea2:       mov    %r13,%rdx
    0.00 :   2a1ea5:       sar    $0x3,%rdx
    0.00 :   2a1ea9:       je     2a2080 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x280>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   2a1eaf:       movabs $0x1fffffffffffffff,%rax
    0.00 :   2a1eb9:       cmp    %rax,%rdx
    0.00 :   2a1ebc:       ja     2a230f <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x50f>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2a1ec2:       mov    %r13,%rdi
    0.00 :   2a1ec5:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a1eca:       mov    -0x120(%rbp),%rdx
    0.00 :   2a1ed1:       mov    %rax,%rcx
    0.00 :   2a1ed4:       mov    0x20(%rdx),%rax
    0.00 :   2a1ed8:       mov    0x18(%rdx),%rsi
    0.00 :   2a1edc:       mov    %rax,%r8
    0.00 :   2a1edf:       sub    %rsi,%r8
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2a1ee2:       add    %rcx,%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   2a1ee5:       mov    %rcx,-0x100(%rbp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   2a1eec:       mov    %rcx,-0xf8(%rbp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2a1ef3:       mov    %r13,-0xf0(%rbp)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   2a1efa:       cmp    %rax,%rsi
    0.00 :   2a1efd:       je     2a1f1b <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x11b>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   2a1eff:       mov    %r8,%rdx
    0.00 :   2a1f02:       mov    %rcx,%rdi
    0.00 :   2a1f05:       mov    %r8,-0x128(%rbp)
    0.00 :   2a1f0c:       callq  53aa0 <memmove@plt>
    0.00 :   2a1f11:       mov    -0x128(%rbp),%r8
    0.00 :   2a1f18:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   2a1f1b:       add    %r8,%rcx
    0.00 :   2a1f1e:       mov    %rcx,-0xf8(%rbp)
    0.00 :   2a1f25:       xor    %r8d,%r8d
    0.00 :   2a1f28:       cmpl   $0x6f,0x14(%rbx)
    0.00 :   2a1f2c:       lea    0x18(%r14),%rax
    0.00 :   2a1f30:       setne  %r8b
    0.00 :   2a1f34:       lea    0x20(%rbx),%rcx
    0.00 :   2a1f38:       test   %r14,%r14
    0.00 :   2a1f3b:       cmovne %rax,%rcx
    0.00 :   2a1f3f:       mov    -0x118(%rbp),%rax
    0.00 :   2a1f46:       xor    %edx,%edx
    0.00 :   2a1f48:       cmpl   $0x6f,0x10(%rbx)
    0.00 :   2a1f4c:       lea    -0x100(%rbp),%r9
    0.00 :   2a1f53:       setne  %dl
    0.00 :   2a1f56:       lea    0x18(%rax),%rsi
    0.00 :   2a1f5a:       lea    -0xe0(%rbp),%rdi
    0.00 :   2a1f61:       mov    %r9,-0x128(%rbp)
    0.00 :   2a1f68:       callq  2a0d20 <onnxruntime::GemmHelper::GemmHelper(onnxruntime::TensorShape const&, bool, onnxruntime::TensorShape const&, bool, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2a1f6d:       mov    -0x100(%rbp),%rdi
         :            if (__p)
    0.00 :   2a1f74:       test   %rdi,%rdi
    0.00 :   2a1f77:       je     2a1f7e <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x17e>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2a1f79:       callq  53300 <operator delete(void*)@plt>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   2a1f7e:       mov    -0xc8(%rbp),%r13
    0.00 :   2a1f85:       test   %r13,%r13
    0.00 :   2a1f88:       je     2a2090 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x290>
    0.00 :   2a1f8e:       mov    $0x28,%edi
    0.00 :   2a1f93:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a1f98:       mov    %rax,%rbx
    0.00 :   2a1f9b:       mov    0x0(%r13),%eax
         :
         :            pointer
         :            _M_local_data()
         :            {
         :            #if __cplusplus >= 201103L
         :            return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    0.00 :   2a1f9f:       lea    0x18(%rbx),%r14
    0.00 :   2a1fa3:       lea    0x8(%rbx),%rdi
    0.00 :   2a1fa7:       mov    %eax,(%rbx)
    0.00 :   2a1fa9:       mov    0x4(%r13),%eax
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a1fad:       mov    %r14,0x8(%rbx)
    0.00 :   2a1fb1:       mov    %eax,0x4(%rbx)
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   2a1fb4:       mov    0x8(%r13),%rsi
    0.00 :   2a1fb8:       mov    0x10(%r13),%rdx
    0.00 :   2a1fbc:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a1fbf:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a1fc4:       mov    0x8(%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2a1fc8:       cmp    %rdi,%r14
    0.00 :   2a1fcb:       je     2a1fd2 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1d2>
    0.00 :   2a1fcd:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   2a1fd2:       mov    %rbx,%rdi
    0.00 :   2a1fd5:       mov    $0x28,%esi
    0.00 :   2a1fda:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   2a1fdf:       mov    -0xc8(%rbp),%rbx
    0.00 :   2a1fe6:       test   %rbx,%rbx
    0.00 :   2a1fe9:       je     2a2120 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x320>
    0.00 :   2a1fef:       mov    $0x28,%edi
    0.00 :   2a1ff4:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a1ff9:       mov    %rax,%r14
    0.00 :   2a1ffc:       mov    (%rbx),%eax
         :            return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    0.00 :   2a1ffe:       lea    0x8(%r14),%rdi
    0.00 :   2a2002:       mov    %eax,(%r14)
    0.00 :   2a2005:       mov    0x4(%rbx),%eax
    0.00 :   2a2008:       mov    %eax,0x4(%r14)
    0.00 :   2a200c:       lea    0x18(%r14),%rax
    0.00 :   2a2010:       mov    %rax,0x8(%r14)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   2a2014:       mov    0x8(%rbx),%rsi
    0.00 :   2a2018:       mov    0x10(%rbx),%rdx
    0.00 :   2a201c:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a201f:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    0.00 :   2a2024:       mov    %r14,(%r15)
    0.00 :   2a2027:       mov    -0xc8(%rbp),%rbx
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
   28.03 :   2a202e:       test   %rbx,%rbx
    0.00 :   2a2031:       je     2a2052 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x252>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a2033:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   2a2037:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   2a203b:       cmp    %rax,%rdi
    0.00 :   2a203e:       je     2a2045 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x245>
    0.00 :   2a2040:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   2a2045:       mov    $0x28,%esi
    0.00 :   2a204a:       mov    %rbx,%rdi
    0.00 :   2a204d:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   2a2052:       mov    -0x38(%rbp),%rcx
    0.00 :   2a2056:       xor    %fs:0x28,%rcx
    0.00 :   2a205f:       mov    %r15,%rax
    0.00 :   2a2062:       jne    2a230a <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x50a>
    0.00 :   2a2068:       lea    -0x28(%rbp),%rsp
    0.00 :   2a206c:       pop    %rbx
    0.00 :   2a206d:       pop    %r12
    0.00 :   2a206f:       pop    %r13
    0.00 :   2a2071:       pop    %r14
    0.00 :   2a2073:       pop    %r15
    0.00 :   2a2075:       pop    %rbp
    0.00 :   2a2076:       retq
    0.00 :   2a2077:       nopw   0x0(%rax,%rax,1)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2a2080:       mov    %r13,%r8
    0.00 :   2a2083:       xor    %ecx,%ecx
    0.00 :   2a2085:       jmpq   2a1ee2 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0xe2>
    0.00 :   2a208a:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a2090:       mov    -0xd0(%rbp),%rax
    0.00 :   2a2097:       mov    -0xe0(%rbp),%r13
    0.00 :   2a209e:       xor    %esi,%esi
    0.00 :   2a20a0:       mov    %r12,%rdi
    0.00 :   2a20a3:       mov    -0xd8(%rbp),%rcx
    0.00 :   2a20aa:       mov    -0x128(%rbp),%rdx
    0.00 :   2a20b1:       movq   $0x2,-0xf8(%rbp)
    0.00 :   2a20bc:       mov    %rax,-0x138(%rbp)
    0.00 :   2a20c3:       mov    %rax,-0x98(%rbp)
    0.00 :   2a20ca:       lea    -0xa0(%rbp),%rax
    0.00 :   2a20d1:       mov    %rcx,-0x140(%rbp)
    0.00 :   2a20d8:       mov    %r13,-0xa0(%rbp)
    0.00 :   2a20df:       mov    %rax,-0x148(%rbp)
    0.00 :   2a20e6:       mov    %rax,-0x100(%rbp)
    0.00 :   2a20ed:       callq  5c7f90 <onnxruntime::OpKernelContext::Output(int, std::initializer_list<long> const&)>
    0.00 :   2a20f2:       mov    %rax,%r12
    0.00 :   2a20f5:       test   %r13,%r13
    0.00 :   2a20f8:       je     2a2104 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x304>
    0.00 :   2a20fa:       cmpq   $0x0,-0x138(%rbp)
    0.00 :   2a2102:       jne    2a2160 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x360>
    0.00 :   2a2104:       movq   $0x0,(%r15)
         :            };
         :
         :            template<std::size_t _Idx, typename _Head>
         :            struct _Head_base<_Idx, _Head, false>
         :            {
         :            constexpr _Head_base()
    0.00 :   2a210b:       mov    -0xc8(%rbp),%rbx
    0.00 :   2a2112:       jmpq   2a202e <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x22e>
    0.00 :   2a2117:       nopw   0x0(%rax,%rax,1)
         :            __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    0.00 :   2a2120:       movq   $0x0,(%r15)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   2a2127:       jmpq   2a2052 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x252>
    0.00 :   2a212c:       nopl   0x0(%rax)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a2130:       movq   $0x0,-0x100(%rbp)
    0.00 :   2a213b:       movq   $0x0,-0xf8(%rbp)
    0.00 :   2a2146:       movq   $0x0,-0xf0(%rbp)
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2a2151:       jmpq   2a1f25 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x125>
    0.00 :   2a2156:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   2a2160:       mov    0x30(%rax),%rax
    0.00 :   2a2164:       cmpl   $0x1,0x8(%rax)
    0.00 :   2a2168:       jne    2a24c6 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x6c6>
    0.00 :   2a216e:       mov    0x50(%r12),%rax
    0.00 :   2a2173:       xor    %r10d,%r10d
    0.00 :   2a2176:       add    (%r12),%rax
    0.00 :   2a217a:       cmpq   $0x0,-0x120(%rbp)
    0.00 :   2a2182:       mov    %rax,%r12
    0.00 :   2a2185:       je     2a21b9 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3b9>
    0.00 :   2a2187:       mov    -0x120(%rbp),%rax
    0.00 :   2a218e:       mov    0x30(%rax),%rax
    0.00 :   2a2192:       cmpl   $0x1,0x8(%rax)
    0.00 :   2a2196:       jne    2a23ed <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x5ed>
    0.00 :   2a219c:       mov    -0x120(%rbp),%rcx
    0.00 :   2a21a3:       mov    0x50(%rcx),%rax
    0.00 :   2a21a7:       add    $0x18,%rcx
    0.00 :   2a21ab:       add    -0x18(%rcx),%rax
    0.00 :   2a21af:       mov    %rcx,-0x120(%rbp)
    0.00 :   2a21b6:       mov    %rax,%r10
    0.00 :   2a21b9:       movss  0x1c(%rbx),%xmm1
    0.00 :   2a21be:       test   %r14,%r14
    0.00 :   2a21c1:       je     2a2278 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x478>
    0.00 :   2a21c7:       mov    0x30(%r14),%rax
    0.00 :   2a21cb:       cmpl   $0x1,0x8(%rax)
    0.00 :   2a21cf:       jne    2a2672 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x872>
    0.00 :   2a21d5:       mov    -0x118(%rbp),%rcx
    0.00 :   2a21dc:       mov    0x50(%r14),%rax
    0.00 :   2a21e0:       add    (%r14),%rax
    0.00 :   2a21e3:       mov    0x30(%rcx),%rdx
    0.00 :   2a21e7:       cmpl   $0x1,0x8(%rdx)
    0.00 :   2a21eb:       jne    2a2599 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x799>
    0.00 :   2a21f1:       sub    $0x8,%rsp
    0.00 :   2a21f5:       mov    0x14(%rbx),%esi
    0.00 :   2a21f8:       mov    0x10(%rbx),%edi
    0.00 :   2a21fb:       mov    %r13,%rdx
    0.00 :   2a21fe:       mov    -0x118(%rbp),%rcx
    0.00 :   2a2205:       movss  0x18(%rbx),%xmm0
    0.00 :   2a220a:       mov    -0x140(%rbp),%r8
    0.00 :   2a2211:       mov    0x50(%rcx),%r9
    0.00 :   2a2215:       add    (%rcx),%r9
    0.00 :   2a2218:       pushq  -0x130(%rbp)
    0.00 :   2a221e:       mov    -0x138(%rbp),%rcx
    0.00 :   2a2225:       push   %r12
    0.00 :   2a2227:       pushq  -0x120(%rbp)
    0.00 :   2a222d:       push   %r10
    0.00 :   2a222f:       push   %rax
    0.00 :   2a2230:       callq  2a07d0 <onnxruntime::Gemm<float>::ComputeGemm(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, long, long, long, float, float const*, float const*, float, float const*, onnxruntime::TensorShape const*, float*, onnxruntime::concurrency::ThreadPool*)>
    0.00 :   2a2235:       add    $0x30,%rsp
    0.00 :   2a2239:       mov    -0x138(%rbp),%rdx
   51.72 :   2a2240:       mov    -0x130(%rbp),%rcx
    0.00 :   2a2247:       mov    %r12,%rsi
    0.00 :   2a224a:       mov    %rbx,%rdi
    0.00 :   2a224d:       imul   %r13,%rdx
    0.00 :   2a2251:       callq  29e130 <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const>
    0.00 :   2a2256:       jmpq   2a2104 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x304>
    0.00 :   2a225b:       nopl   0x0(%rax,%rax,1)
    0.00 :   2a2260:       mov    $0x1,%esi
    0.00 :   2a2265:       mov    %r12,%rdi
    0.00 :   2a2268:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   2a226d:       mov    %rax,%r14
    0.00 :   2a2270:       jmpq   2a1e56 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x56>
    0.00 :   2a2275:       nopl   (%rax)
    0.00 :   2a2278:       mov    -0x120(%rbp),%rcx
    0.00 :   2a227f:       mov    %r12,%r8
    0.00 :   2a2282:       mov    %r10,%rdx
    0.00 :   2a2285:       movaps %xmm1,%xmm0
    0.00 :   2a2288:       mov    -0x138(%rbp),%rsi
    0.00 :   2a228f:       mov    %r13,%rdi
    0.00 :   2a2292:       mov    %r10,%r14
    0.00 :   2a2295:       callq  2a0440 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)>
    0.00 :   2a229a:       pxor   %xmm1,%xmm1
    0.00 :   2a229e:       test   %r14,%r14
    0.00 :   2a22a1:       je     2a22a8 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x4a8>
    0.00 :   2a22a3:       movss  0x1c(%rbx),%xmm1
    0.00 :   2a22a8:       mov    -0x118(%rbp),%rcx
    0.00 :   2a22af:       mov    0x10(%rbx),%edi
    0.00 :   2a22b2:       mov    -0x140(%rbp),%r9
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   2a22b9:       mov    0x48(%rbx),%rax
    0.00 :   2a22bd:       mov    0x30(%rcx),%rdx
    0.00 :   2a22c1:       cmp    $0x6f,%edi
    0.00 :   2a22c4:       cmovne %r13,%r9
    0.00 :   2a22c8:       cmpl   $0x1,0x8(%rdx)
    0.00 :   2a22cc:       jne    2a2314 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x514>
    0.00 :   2a22ce:       mov    -0x118(%rbp),%rcx
    0.00 :   2a22d5:       mov    -0x138(%rbp),%rdx
    0.00 :   2a22dc:       mov    %r13,%rsi
    0.00 :   2a22df:       movss  0x18(%rbx),%xmm0
    0.00 :   2a22e4:       mov    0x50(%rcx),%r8
    0.00 :   2a22e8:       add    (%rcx),%r8
    0.00 :   2a22eb:       pushq  -0x130(%rbp)
    0.00 :   2a22f1:       mov    -0x140(%rbp),%rcx
    0.00 :   2a22f8:       push   %rdx
    0.00 :   2a22f9:       push   %r12
    0.00 :   2a22fb:       push   %rax
    0.00 :   2a22fc:       callq  6a8f50 <MlasGemm(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, float, float*, unsigned long, onnxruntime::concurrency::ThreadPool*)>
   20.26 :   2a2301:       add    $0x20,%rsp
    0.00 :   2a2305:       jmpq   2a2239 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x439>
    0.00 :   2a230a:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   2a230f:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   2a2314:       mov    $0xa0,%edi
    0.00 :   2a2319:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a2320:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a2325:       mov    -0x128(%rbp),%r15
    0.00 :   2a232c:       mov    %rbx,%rdi
    0.00 :   2a232f:       lea    -0x110(%rbp),%rcx
    0.00 :   2a2336:       mov    %rax,%r12
    0.00 :   2a2339:       lea    0x5834cb(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a2340:       lea    -0x108(%rbp),%rdx
    0.00 :   2a2347:       mov    %rax,-0x110(%rbp)
    0.00 :   2a234e:       lea    0x5834b3(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a2355:       mov    %r15,%rsi
    0.00 :   2a2358:       mov    %rax,-0x108(%rbp)
    0.00 :   2a235f:       lea    0x58348b(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a2366:       mov    %rax,-0x100(%rbp)
    0.00 :   2a236d:       mov    -0x118(%rbp),%rax
    0.00 :   2a2374:       lea    0x30(%rax),%r8
    0.00 :   2a2378:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a237d:       mov    %r15,%rdi
    0.00 :   2a2380:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a2385:       mov    -0x148(%rbp),%r14
    0.00 :   2a238c:       mov    %r15,%r8
    0.00 :   2a238f:       lea    0x5a80ea(%rip),%rcx        # 84a480 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2a2396:       mov    $0x97,%edx
    0.00 :   2a239b:       lea    0x58346e(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a23a2:       mov    %r14,%rdi
    0.00 :   2a23a5:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a23aa:       mov    %rbx,%rcx
    0.00 :   2a23ad:       lea    0x58349c(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a23b4:       mov    %r14,%rsi
    0.00 :   2a23b7:       mov    %r12,%rdi
    0.00 :   2a23ba:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a23bf:       mov    %r14,%rdi
    0.00 :   2a23c2:       add    $0x10,%rbx
    0.00 :   2a23c6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a23cb:       mov    %r15,%rdi
    0.00 :   2a23ce:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a23d3:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a23da:       cmp    %rbx,%rdi
    0.00 :   2a23dd:       je     78ade <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xc8>
         :            ::operator delete(__p);
    0.00 :   2a23e3:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a23e8:       jmpq   78ade <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xc8>
    0.00 :   2a23ed:       mov    $0xa0,%edi
    0.00 :   2a23f2:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a23f9:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a23fe:       mov    -0x128(%rbp),%r15
    0.00 :   2a2405:       mov    %rbx,%rdi
    0.00 :   2a2408:       lea    -0x110(%rbp),%rcx
    0.00 :   2a240f:       mov    %rax,%r12
    0.00 :   2a2412:       lea    0x5833f2(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a2419:       lea    -0x108(%rbp),%rdx
    0.00 :   2a2420:       mov    %rax,-0x110(%rbp)
    0.00 :   2a2427:       lea    0x5833da(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a242e:       mov    %r15,%rsi
    0.00 :   2a2431:       mov    %rax,-0x108(%rbp)
    0.00 :   2a2438:       lea    0x5833b2(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a243f:       mov    %rax,-0x100(%rbp)
    0.00 :   2a2446:       mov    -0x120(%rbp),%rax
    0.00 :   2a244d:       lea    0x30(%rax),%r8
    0.00 :   2a2451:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a2456:       mov    %r15,%rdi
    0.00 :   2a2459:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a245e:       mov    -0x148(%rbp),%r14
    0.00 :   2a2465:       mov    %r15,%r8
    0.00 :   2a2468:       lea    0x5a8011(%rip),%rcx        # 84a480 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2a246f:       mov    $0x97,%edx
    0.00 :   2a2474:       lea    0x583395(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a247b:       mov    %r14,%rdi
    0.00 :   2a247e:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a2483:       mov    %rbx,%rcx
    0.00 :   2a2486:       lea    0x5833c3(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a248d:       mov    %r14,%rsi
    0.00 :   2a2490:       mov    %r12,%rdi
    0.00 :   2a2493:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a2498:       mov    %r14,%rdi
    0.00 :   2a249b:       add    $0x10,%rbx
    0.00 :   2a249f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a24a4:       mov    %r15,%rdi
    0.00 :   2a24a7:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a24ac:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a24b3:       cmp    %rbx,%rdi
    0.00 :   2a24b6:       je     78ab2 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x9c>
    0.00 :   2a24bc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a24c1:       jmpq   78ab2 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x9c>
    0.00 :   2a24c6:       mov    $0xa0,%edi
    0.00 :   2a24cb:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a24d2:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a24d7:       mov    -0x128(%rbp),%r15
    0.00 :   2a24de:       mov    %rbx,%rdi
    0.00 :   2a24e1:       lea    -0x110(%rbp),%rcx
    0.00 :   2a24e8:       mov    %rax,%r13
    0.00 :   2a24eb:       lea    0x583319(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a24f2:       lea    -0x108(%rbp),%rdx
    0.00 :   2a24f9:       mov    %rax,-0x110(%rbp)
    0.00 :   2a2500:       lea    0x30(%r12),%r8
    0.00 :   2a2505:       mov    %r15,%rsi
    0.00 :   2a2508:       lea    0x5832f9(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a250f:       mov    %rax,-0x108(%rbp)
    0.00 :   2a2516:       lea    0x5832d4(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a251d:       mov    %rax,-0x100(%rbp)
    0.00 :   2a2524:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a2529:       mov    %r15,%rdi
    0.00 :   2a252c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a2531:       mov    -0x148(%rbp),%r14
    0.00 :   2a2538:       mov    %r15,%r8
    0.00 :   2a253b:       lea    0x5a7e5e(%rip),%rcx        # 84a3a0 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   2a2542:       mov    $0x83,%edx
    0.00 :   2a2547:       lea    0x5832c2(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a254e:       mov    %r14,%rdi
    0.00 :   2a2551:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a2556:       mov    %rbx,%rcx
    0.00 :   2a2559:       lea    0x5832f0(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a2560:       mov    %r14,%rsi
    0.00 :   2a2563:       mov    %r13,%rdi
    0.00 :   2a2566:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a256b:       mov    %r14,%rdi
    0.00 :   2a256e:       add    $0x10,%rbx
    0.00 :   2a2572:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a2577:       mov    %r15,%rdi
    0.00 :   2a257a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a257f:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a2586:       cmp    %rbx,%rdi
    0.00 :   2a2589:       je     78ac8 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xb2>
    0.00 :   2a258f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a2594:       jmpq   78ac8 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xb2>
    0.00 :   2a2599:       mov    $0xa0,%edi
    0.00 :   2a259e:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a25a5:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a25aa:       mov    -0x128(%rbp),%r15
    0.00 :   2a25b1:       mov    %rbx,%rdi
    0.00 :   2a25b4:       lea    -0x110(%rbp),%rcx
    0.00 :   2a25bb:       mov    %rax,%r12
    0.00 :   2a25be:       lea    0x583246(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a25c5:       lea    -0x108(%rbp),%rdx
    0.00 :   2a25cc:       mov    %rax,-0x110(%rbp)
    0.00 :   2a25d3:       lea    0x58322e(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a25da:       mov    %r15,%rsi
    0.00 :   2a25dd:       mov    %rax,-0x108(%rbp)
    0.00 :   2a25e4:       lea    0x583206(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a25eb:       mov    %rax,-0x100(%rbp)
    0.00 :   2a25f2:       mov    -0x118(%rbp),%rax
    0.00 :   2a25f9:       lea    0x30(%rax),%r8
    0.00 :   2a25fd:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a2602:       mov    %r15,%rdi
    0.00 :   2a2605:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a260a:       mov    -0x148(%rbp),%r14
    0.00 :   2a2611:       mov    %r15,%r8
    0.00 :   2a2614:       lea    0x5a7e65(%rip),%rcx        # 84a480 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2a261b:       mov    $0x97,%edx
    0.00 :   2a2620:       lea    0x5831e9(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a2627:       mov    %r14,%rdi
    0.00 :   2a262a:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a262f:       mov    %rbx,%rcx
    0.00 :   2a2632:       lea    0x583217(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a2639:       mov    %r14,%rsi
    0.00 :   2a263c:       mov    %r12,%rdi
    0.00 :   2a263f:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a2644:       mov    %r14,%rdi
    0.00 :   2a2647:       add    $0x10,%rbx
    0.00 :   2a264b:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a2650:       mov    %r15,%rdi
    0.00 :   2a2653:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a2658:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a265f:       cmp    %rbx,%rdi
    0.00 :   2a2662:       je     78a16 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]>
    0.00 :   2a2668:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a266d:       jmpq   78a16 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]>
    0.00 :   2a2672:       mov    $0xa0,%edi
    0.00 :   2a2677:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a267e:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a2683:       mov    -0x128(%rbp),%r15
    0.00 :   2a268a:       mov    %rbx,%rdi
    0.00 :   2a268d:       lea    -0x110(%rbp),%rcx
    0.00 :   2a2694:       mov    %rax,%r12
    0.00 :   2a2697:       lea    0x58316d(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a269e:       lea    -0x108(%rbp),%rdx
    0.00 :   2a26a5:       mov    %rax,-0x110(%rbp)
    0.00 :   2a26ac:       lea    0x30(%r14),%r8
    0.00 :   2a26b0:       mov    %r15,%rsi
    0.00 :   2a26b3:       lea    0x58314e(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a26ba:       mov    %rax,-0x108(%rbp)
    0.00 :   2a26c1:       lea    0x583129(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a26c8:       mov    %rax,-0x100(%rbp)
    0.00 :   2a26cf:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a26d4:       mov    %r15,%rdi
    0.00 :   2a26d7:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a26dc:       mov    -0x148(%rbp),%r14
    0.00 :   2a26e3:       mov    %r15,%r8
    0.00 :   2a26e6:       lea    0x5a7d93(%rip),%rcx        # 84a480 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2a26ed:       mov    $0x97,%edx
    0.00 :   2a26f2:       lea    0x583117(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a26f9:       mov    %r14,%rdi
    0.00 :   2a26fc:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a2701:       mov    %rbx,%rcx
    0.00 :   2a2704:       lea    0x583145(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a270b:       mov    %r14,%rsi
    0.00 :   2a270e:       mov    %r12,%rdi
    0.00 :   2a2711:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a2716:       mov    %r14,%rdi
    0.00 :   2a2719:       add    $0x10,%rbx
    0.00 :   2a271d:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a2722:       mov    %r15,%rdi
    0.00 :   2a2725:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a272a:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a2731:       cmp    %rbx,%rdi
    0.00 :   2a2734:       je     78a82 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x6c>
    0.00 :   2a273a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a273f:       jmpq   78a82 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x6c>
    0.00 :   2a2744:       mov    %rax,%r15
    0.00 :   2a2747:       jmpq   78a48 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x32>
    0.00 :   2a274c:       mov    %rax,%r15
    0.00 :   2a274f:       jmpq   78a98 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x82>
    0.00 :   2a2754:       mov    %rax,%r15
    0.00 :   2a2757:       jmpq   78aa4 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x8e>
    0.00 :   2a275c:       mov    %rax,%r15
    0.00 :   2a275f:       jmpq   78a60 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x4a>
    0.00 :   2a2764:       mov    %rax,%r15
    0.00 :   2a2767:       jmpq   78a54 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x3e>
    0.00 :   2a276c:       mov    %rax,%r15
    0.00 :   2a276f:       jmpq   78a60 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x4a>
    0.00 :   2a2774:       mov    %rax,%r15
    0.00 :   2a2777:       jmpq   78b38 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x122>
    0.00 :   2a277c:       mov    %rax,%rbx
    0.00 :   2a277f:       jmpq   78b92 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x17c>
    0.00 :   2a2784:       mov    %rax,%r15
    0.00 :   2a2787:       jmpq   78af4 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xde>
    0.00 :   2a278c:       mov    %rax,%r15
    0.00 :   2a278f:       jmpq   78b00 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xea>
    0.00 :   2a2794:       mov    %rax,%r15
    0.00 :   2a2797:       jmpq   78a60 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x4a>
    0.00 :   2a279c:       mov    %rax,%r15
    0.00 :   2a279f:       jmpq   78b11 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xfb>
    0.00 :   2a27a4:       mov    %rax,%rbx
    0.00 :   2a27a7:       jmpq   78b26 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x110>
    0.00 :   2a27ac:       jmpq   78a2c <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x16>
    0.00 :   2a27b1:       mov    %rax,%r15
    0.00 :   2a27b4:       jmpq   78b44 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x12e>
    0.00 :   2a27b9:       mov    %rax,%r15
    0.00 :   2a27bc:       jmpq   78a60 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x4a>
    0.00 :   2a27c1:       mov    %rax,%r15
    0.00 :   2a27c4:       jmpq   78b61 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x14b>
    0.00 :   2a27c9:       mov    %rax,%r15
    0.00 :   2a27cc:       jmpq   78b6d <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x157>
    0.00 :   2a27d1:       mov    %rax,%r15
    0.00 :   2a27d4:       jmpq   78b55 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x13f>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a9310 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const>:
         :            _ZNK11onnxruntime15IExecutionFrame22GetNodeIdxToMLValueIdxEi():
    0.00 :   5a9310:       push   %r14
    0.00 :   5a9312:       push   %r13
    0.00 :   5a9314:       push   %r12
    0.00 :   5a9316:       push   %rbp
    0.00 :   5a9317:       push   %rbx
    0.00 :   5a9318:       sub    $0xb0,%rsp
    0.00 :   5a931f:       mov    %fs:0x28,%rax
    0.00 :   5a9328:       mov    %rax,0xa8(%rsp)
    0.00 :   5a9330:       xor    %eax,%eax
    0.00 :   5a9332:       mov    0x8(%rdi),%rax
    0.00 :   5a9336:       test   %esi,%esi
    0.00 :   5a9338:       js     5a9370 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const+0x60>
    0.00 :   5a933a:       movslq %esi,%rsi
    0.00 :   5a933d:       cmp    0x40(%rax),%rsi
    0.00 :   5a9341:       jae    5a9370 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const+0x60>
    0.00 :   5a9343:       mov    0xa8(%rsp),%rcx
    0.00 :   5a934b:       xor    %fs:0x28,%rcx
    0.00 :   5a9354:       mov    (%rax),%rax
  100.00 :   5a9357:       mov    (%rax,%rsi,4),%eax
    0.00 :   5a935a:       jne    5a93f9 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const+0xe9>
    0.00 :   5a9360:       add    $0xb0,%rsp
    0.00 :   5a9367:       pop    %rbx
    0.00 :   5a9368:       pop    %rbp
    0.00 :   5a9369:       pop    %r12
    0.00 :   5a936b:       pop    %r13
    0.00 :   5a936d:       pop    %r14
    0.00 :   5a936f:       retq
    0.00 :   5a9370:       mov    $0xa0,%edi
    0.00 :   5a9375:       lea    0x20(%rsp),%rbx
    0.00 :   5a937a:       mov    %rsp,%r13
    0.00 :   5a937d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5a9382:       mov    %rbx,%rdi
    0.00 :   5a9385:       mov    %rax,%r12
    0.00 :   5a9388:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5a938d:       mov    %r13,%rdi
    0.00 :   5a9390:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5a9395:       lea    0x40(%rsp),%r14
    0.00 :   5a939a:       mov    %r13,%r8
    0.00 :   5a939d:       lea    0x2e741c(%rip),%rcx        # 8907c0 <onnxruntime::NodeIndexInfo::GetMLValueIndex(int) const::__PRETTY_FUNCTION__>
    0.00 :   5a93a4:       mov    $0x2a,%edx
    0.00 :   5a93a9:       lea    0x2e6608(%rip),%rsi        # 88f9b8 <std::piecewise_construct+0xdb>
    0.00 :   5a93b0:       mov    %r14,%rdi
    0.00 :   5a93b3:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5a93b8:       mov    %rbx,%rcx
    0.00 :   5a93bb:       lea    0x2e6636(%rip),%rdx        # 88f9f8 <std::piecewise_construct+0x11b>
    0.00 :   5a93c2:       mov    %r14,%rsi
    0.00 :   5a93c5:       mov    %r12,%rdi
    0.00 :   5a93c8:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5a93cd:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5a93d0:       add    $0x10,%rbx
    0.00 :   5a93d4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5a93d9:       mov    %r13,%rdi
    0.00 :   5a93dc:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5a93e1:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5a93e6:       cmp    %rbx,%rdi
    0.00 :   5a93e9:       je     b10ea <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5a93ef:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5a93f4:       jmpq   b10ea <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]>
    0.00 :   5a93f9:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5a93fe:       mov    %rax,%rbp
    0.00 :   5a9401:       jmpq   b1100 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]+0x16>
    0.00 :   5a9406:       mov    %rax,%rbp
    0.00 :   5a9409:       jmpq   b1108 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]+0x1e>
    0.00 :   5a940e:       mov    %rax,%rbp
    0.00 :   5a9411:       jmpq   b1110 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]+0x26>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000059c450 <onnxruntime::TensorType<float>::GetElementType() const>:
         :            _ZNK11onnxruntime10TensorTypeIfE14GetElementTypeEv():
  100.00 :   59c450:       jmpq   59c440 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<float>()>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005d95c0 <onnxruntime::SessionState::GetExecutionPlan() const>:
         :            _ZNK11onnxruntime12SessionState16GetExecutionPlanEv():
   24.08 :   5d95c0:       mov    0x208(%rdi),%rax
   75.92 :   5d95c7:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005ac9c0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>:
         :            _ZN11onnxruntime14ExecutionFrame38AllocateMLValueTensorPreAllocateBufferER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5ac9c0:       push   %r15
    0.00 :   5ac9c2:       push   %r14
    0.00 :   5ac9c4:       push   %r13
    0.00 :   5ac9c6:       push   %r12
    0.00 :   5ac9c8:       push   %rbp
    0.00 :   5ac9c9:       push   %rbx
    0.00 :   5ac9ca:       sub    $0x338,%rsp
    0.00 :   5ac9d1:       mov    0x370(%rsp),%rax
    0.00 :   5ac9d9:       mov    %rdi,0x18(%rsp)
    0.00 :   5ac9de:       mov    %rdx,0x10(%rsp)
    0.00 :   5ac9e3:       mov    %rax,0x8(%rsp)
    0.00 :   5ac9e8:       mov    0x378(%rsp),%eax
    0.00 :   5ac9ef:       mov    %r8,0x40(%rsp)
    0.00 :   5ac9f4:       mov    %r9,0x38(%rsp)
    0.00 :   5ac9f9:       mov    %eax,0x4c(%rsp)
    0.00 :   5ac9fd:       mov    %fs:0x28,%rax
    0.00 :   5aca06:       mov    %rax,0x328(%rsp)
    0.00 :   5aca0e:       xor    %eax,%eax
    0.00 :   5aca10:       test   %ecx,%ecx
    0.00 :   5aca12:       js     5adb72 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x11b2>
    0.00 :   5aca18:       mov    %rsi,%rbp
    0.00 :   5aca1b:       movslq %ecx,%rcx
    0.00 :   5aca1e:       cmp    0x28(%rsi),%rcx
    0.00 :   5aca22:       jae    5adb72 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x11b2>
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5aca28:       mov    0x10(%rsi),%rax
    0.00 :   5aca2c:       lea    (%rcx,%rcx,4),%rdx
    0.00 :   5aca30:       lea    (%rax,%rdx,8),%r14
    0.00 :   5aca34:       mov    0x10(%r14),%rdi
    0.00 :   5aca38:       test   %rdi,%rdi
    0.00 :   5aca3b:       je     5aca4b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8b>
    0.00 :   5aca3d:       mov    (%rdi),%rax
    0.00 :   5aca40:       callq  *0x30(%rax)
    0.00 :   5aca43:       test   %al,%al
    0.00 :   5aca45:       jne    5acf18 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x558>
    0.00 :   5aca4b:       mov    $0xa0,%edi
    0.00 :   5aca50:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5aca55:       mov    0x10(%r14),%rdi
    0.00 :   5aca59:       mov    %rax,0x8(%rsp)
    0.00 :   5aca5e:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5aca63:       lea    0x130(%rsp),%r15
    0.00 :   5aca6b:       mov    %rax,%r13
    0.00 :   5aca6e:       lea    0x70(%r15),%rdi
    0.00 :   5aca72:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5aca77:       mov    0x67b0aa(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5aca7e:       xor    %edi,%edi
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5aca80:       xor    %esi,%esi
    0.00 :   5aca82:       mov    %di,0x280(%rsp)
    0.00 :   5aca8a:       mov    %rax,0x20(%rsp)
    0.00 :   5aca8f:       add    $0x10,%rax
    0.00 :   5aca93:       mov    %rax,0x1a0(%rsp)
    0.00 :   5aca9b:       mov    0x67b2fe(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5acaa2:       movq   $0x0,0x278(%rsp)
    0.00 :   5acaae:       mov    0x8(%rax),%rbp
    0.00 :   5acab2:       mov    0x10(%rax),%r12
    0.00 :   5acab6:       movq   $0x0,0x288(%rsp)
    0.00 :   5acac2:       movq   $0x0,0x290(%rsp)
    0.00 :   5acace:       mov    -0x18(%rbp),%rdi
    0.00 :   5acad2:       mov    %rbp,0x130(%rsp)
    0.00 :   5acada:       movq   $0x0,0x298(%rsp)
    0.00 :   5acae6:       movq   $0x0,0x2a0(%rsp)
    0.00 :   5acaf2:       add    %r15,%rdi
    0.00 :   5acaf5:       mov    %r12,(%rdi)
    0.00 :   5acaf8:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5acafd:       mov    0x67b25c(%rip),%rbx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5acb04:       lea    0x40(%r15),%rdi
    0.00 :   5acb08:       movq   $0x0,0x140(%rsp)
    0.00 :   5acb14:       movq   $0x0,0x148(%rsp)
    0.00 :   5acb20:       movq   $0x0,0x150(%rsp)
    0.00 :   5acb2c:       lea    0x18(%rbx),%rax
    0.00 :   5acb30:       mov    %rax,0x130(%rsp)
    0.00 :   5acb38:       lea    0x40(%rbx),%rax
    0.00 :   5acb3c:       mov    %rax,0x1a0(%rsp)
    0.00 :   5acb44:       mov    0x67b115(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5acb4b:       movq   $0x0,0x158(%rsp)
    0.00 :   5acb57:       mov    %rax,0x30(%rsp)
    0.00 :   5acb5c:       add    $0x10,%rax
    0.00 :   5acb60:       mov    %rax,0x138(%rsp)
    0.00 :   5acb68:       movq   $0x0,0x160(%rsp)
    0.00 :   5acb74:       movq   $0x0,0x168(%rsp)
    0.00 :   5acb80:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5acb85:       mov    0x67b44c(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5acb8c:       lea    0x8(%r15),%rsi
    0.00 :   5acb90:       lea    0x70(%r15),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5acb94:       movl   $0x10,0x178(%rsp)
    0.00 :   5acb9f:       mov    %rax,0x28(%rsp)
    0.00 :   5acba4:       add    $0x10,%rax
    0.00 :   5acba8:       mov    %rax,0x138(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5acbb0:       lea    0x60(%r15),%rax
    0.00 :   5acbb4:       mov    %rax,0x180(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   5acbbc:       movq   $0x0,0x188(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5acbc8:       movb   $0x0,0x190(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5acbd0:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5acbd5:       mov    $0x21,%edx
    0.00 :   5acbda:       lea    0x27a72f(%rip),%rsi        # 827310 <std::piecewise_construct+0x570>
    0.00 :   5acbe1:       mov    %r15,%rdi
    0.00 :   5acbe4:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!__s)
    0.00 :   5acbe9:       test   %r13,%r13
    0.00 :   5acbec:       je     5ad040 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x680>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   5acbf2:       mov    %r13,%rdi
    0.00 :   5acbf5:       callq  52c60 <strlen@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5acbfa:       mov    %r13,%rsi
    0.00 :   5acbfd:       mov    %r15,%rdi
    0.00 :   5acc00:       mov    %rax,%rdx
    0.00 :   5acc03:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acc08:       lea    0xd0(%rsp),%rdi
         :            { __c1 = __c2; }
    0.00 :   5acc10:       movb   $0x0,0xe0(%rsp)
    0.00 :   5acc18:       lea    0x10(%rdi),%rax
    0.00 :   5acc1c:       mov    %rdi,(%rsp)
    0.00 :   5acc20:       mov    %rax,0xd0(%rsp)
         :            if (this->pptr())
    0.00 :   5acc28:       mov    0x160(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   5acc30:       movq   $0x0,0xd8(%rsp)
    0.00 :   5acc3c:       test   %rax,%rax
    0.00 :   5acc3f:       je     5ad780 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdc0>
         :            if (this->pptr() > this->egptr())
    0.00 :   5acc45:       mov    0x150(%rsp),%r8
    0.00 :   5acc4d:       mov    0x158(%rsp),%rcx
    0.00 :   5acc55:       cmp    %r8,%rax
    0.00 :   5acc58:       jbe    5ad028 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x668>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5acc5e:       sub    %rcx,%rax
    0.00 :   5acc61:       xor    %edx,%edx
    0.00 :   5acc63:       xor    %esi,%esi
    0.00 :   5acc65:       mov    %rax,%r8
    0.00 :   5acc68:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   5acc6d:       lea    0x18(%rbx),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5acc71:       mov    0x180(%rsp),%rdi
    0.00 :   5acc79:       mov    %rax,0x130(%rsp)
    0.00 :   5acc81:       lea    0x40(%rbx),%rax
    0.00 :   5acc85:       mov    %rax,0x1a0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5acc8d:       mov    0x28(%rsp),%rax
    0.00 :   5acc92:       add    $0x10,%rax
    0.00 :   5acc96:       mov    %rax,0x138(%rsp)
         :            if (!_M_is_local())
    0.00 :   5acc9e:       lea    0x60(%r15),%rax
    0.00 :   5acca2:       cmp    %rax,%rdi
    0.00 :   5acca5:       je     5accac <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2ec>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5acca7:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5accac:       mov    0x30(%rsp),%rax
    0.00 :   5accb1:       lea    0x40(%r15),%rdi
    0.00 :   5accb5:       lea    0x90(%rsp),%r14
    0.00 :   5accbd:       add    $0x10,%rax
    0.00 :   5accc1:       mov    %rax,0x138(%rsp)
    0.00 :   5accc9:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5accce:       mov    -0x18(%rbp),%rax
         :            ~basic_ios() { }
    0.00 :   5accd2:       lea    0x70(%r15),%rdi
    0.00 :   5accd6:       mov    %rbp,0x130(%rsp)
    0.00 :   5accde:       mov    %r12,0x130(%rsp,%rax,1)
    0.00 :   5acce6:       mov    0x20(%rsp),%rax
    0.00 :   5acceb:       add    $0x10,%rax
    0.00 :   5accef:       mov    %rax,0x1a0(%rsp)
    0.00 :   5accf7:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5accfc:       mov    %r14,%rdi
    0.00 :   5accff:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd04:       lea    0x27a66c(%rip),%rdx        # 827377 <std::piecewise_construct+0x5d7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acd0b:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd0f:       mov    %r15,%rdi
    0.00 :   5acd12:       lea    -0x3f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acd16:       mov    %rax,0x130(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd1e:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5acd23:       lea    0x2e39ce(%rip),%rdx        # 8906f8 <OrtValue::GetMutable<onnxruntime::Tensor>()::__PRETTY_FUNCTION__+0x38>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acd2a:       lea    0x38(%r15),%rax
    0.00 :   5acd2e:       movl   $0x5d,0x150(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd39:       lea    0x28(%r15),%rdi
    0.00 :   5acd3d:       lea    -0x38(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acd41:       mov    %rax,0x158(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd49:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5acd4e:       mov    0x98(%rsp),%r12
    0.00 :   5acd56:       mov    0x90(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5acd5e:       movq   $0x0,0x178(%rsp)
    0.00 :   5acd6a:       movq   $0x0,0x180(%rsp)
    0.00 :   5acd76:       movq   $0x0,0x188(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5acd82:       mov    %r12,%rbp
    0.00 :   5acd85:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5acd88:       mov    %rbp,%rax
    0.00 :   5acd8b:       sar    $0x5,%rax
    0.00 :   5acd8f:       je     5ad770 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdb0>
         :            if (__n > this->max_size())
    0.00 :   5acd95:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5acd9f:       cmp    %rdx,%rax
    0.00 :   5acda2:       ja     5adc0d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x124d>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5acda8:       mov    %rbp,%rdi
    0.00 :   5acdab:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5acdb0:       mov    0x98(%rsp),%r12
    0.00 :   5acdb8:       mov    0x90(%rsp),%rbx
    0.00 :   5acdc0:       mov    %rax,%r13
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5acdc3:       add    %r13,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5acdc6:       mov    %r13,0x178(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5acdce:       mov    %rbp,0x188(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   5acdd6:       mov    %r13,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5acdd9:       mov    %r13,0x180(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5acde1:       cmp    %rbx,%r12
    0.00 :   5acde4:       je     5ace17 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x457>
    0.00 :   5acde6:       nopw   %cs:0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5acdf0:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acdf4:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5acdf7:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5acdfb:       mov    (%rbx),%rsi
    0.00 :   5acdfe:       mov    0x8(%rbx),%rdx
    0.00 :   5ace02:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ace05:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ace0a:       add    $0x20,%rbx
    0.00 :   5ace0e:       add    $0x20,%rbp
    0.00 :   5ace12:       cmp    %rbx,%r12
    0.00 :   5ace15:       jne    5acdf0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x430>
    0.00 :   5ace17:       mov    (%rsp),%rcx
    0.00 :   5ace1b:       mov    0x8(%rsp),%rdi
    0.00 :   5ace20:       mov    %r15,%rsi
    0.00 :   5ace23:       lea    0x2e614b(%rip),%rdx        # 892f75 <onnxruntime::MemPatternPlanner::TraceAllocation(int, unsigned long)::__PRETTY_FUNCTION__+0x175>
         :            this->_M_impl._M_finish =
    0.00 :   5ace2a:       mov    %rbp,0x180(%rsp)
    0.00 :   5ace32:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5ace37:       mov    0x180(%rsp),%rbp
    0.00 :   5ace3f:       mov    0x178(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   5ace47:       cmp    %rbx,%rbp
    0.00 :   5ace4a:       je     5ace72 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4b2>
    0.00 :   5ace4c:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ace50:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5ace53:       lea    0x10(%rbx),%rax
    0.00 :   5ace57:       cmp    %rax,%rdi
    0.00 :   5ace5a:       je     5ace61 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4a1>
         :            ::operator delete(__p);
    0.00 :   5ace5c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ace61:       add    $0x20,%rbx
    0.00 :   5ace65:       cmp    %rbx,%rbp
    0.00 :   5ace68:       jne    5ace50 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x490>
    0.00 :   5ace6a:       mov    0x178(%rsp),%rbx
         :            if (__p)
    0.00 :   5ace72:       test   %rbx,%rbx
    0.00 :   5ace75:       je     5ace7f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4bf>
    0.00 :   5ace77:       mov    %rbx,%rdi
    0.00 :   5ace7a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ace7f:       mov    0x158(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ace87:       lea    0x38(%r15),%rax
    0.00 :   5ace8b:       cmp    %rax,%rdi
    0.00 :   5ace8e:       je     5ace95 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4d5>
    0.00 :   5ace90:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ace95:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ace9d:       lea    0x10(%r15),%rax
    0.00 :   5acea1:       cmp    %rax,%rdi
    0.00 :   5acea4:       je     5aceab <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4eb>
    0.00 :   5acea6:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5aceab:       mov    0x98(%rsp),%rbp
    0.00 :   5aceb3:       mov    0x90(%rsp),%rbx
    0.00 :   5acebb:       cmp    %rbx,%rbp
    0.00 :   5acebe:       je     5acee2 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x522>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5acec0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5acec3:       lea    0x10(%rbx),%rax
    0.00 :   5acec7:       cmp    %rax,%rdi
    0.00 :   5aceca:       je     5aced1 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x511>
    0.00 :   5acecc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aced1:       add    $0x20,%rbx
    0.00 :   5aced5:       cmp    %rbx,%rbp
    0.00 :   5aced8:       jne    5acec0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x500>
    0.00 :   5aceda:       mov    0x90(%rsp),%rbx
         :            if (__p)
    0.00 :   5acee2:       test   %rbx,%rbx
    0.00 :   5acee5:       je     5aceef <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x52f>
    0.00 :   5acee7:       mov    %rbx,%rdi
    0.00 :   5aceea:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aceef:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5acef3:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5acefb:       add    $0x10,%rax
    0.00 :   5aceff:       cmp    %rax,%rdi
    0.00 :   5acf02:       je     b1ae8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x16e>
    0.00 :   5acf08:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5acf0d:       jmpq   b1ae8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x16e>
    0.00 :   5acf12:       nopw   0x0(%rax,%rax,1)
    0.00 :   5acf18:       mov    (%r14),%rax
    0.00 :   5acf1b:       lea    0x18(%rax),%r12
    0.00 :   5acf1f:       mov    %rax,0x50(%rsp)
    0.00 :   5acf24:       mov    %r12,%rdi
    0.00 :   5acf27:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5acf2c:       mov    0x8(%rsp),%rdi
    0.00 :   5acf31:       mov    %rax,%r13
    0.00 :   5acf34:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5acf39:       mov    %rax,(%rsp)
    0.00 :   5acf3d:       cmp    %rax,%r13
    0.00 :   5acf40:       jne    5ad060 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x6a0>
    0.00 :   5acf46:       mov    0x50(%rsp),%rax
    0.00 :   5acf4b:       mov    0x50(%rax),%rbx
    0.00 :   5acf4f:       add    (%rax),%rbx
    0.00 :   5acf52:       cmpb   $0x0,0x4c(%rsp)
    0.00 :   5acf57:       mov    0x18(%r14),%rax
    0.00 :   5acf5b:       je     5acf66 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5a6>
    0.00 :   5acf5d:       test   %rax,%rax
    0.00 :   5acf60:       je     5ad890 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xed0>
         :            _M_get() const noexcept
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
         :            };
         :
         :            template<typename _Tp, _Lock_policy _Lp>
         :            class __shared_ptr
    0.00 :   5acf66:       mov    0x10(%rsp),%rcx
    0.00 :   5acf6b:       mov    0x20(%r14),%r13
         :            if (__tmp != _M_pi)
    0.00 :   5acf6f:       mov    0x20(%rcx),%r12
         :            class __shared_ptr
  100.00 :   5acf73:       mov    %rax,0x18(%rcx)
         :            if (__tmp != _M_pi)
    0.00 :   5acf77:       cmp    %r12,%r13
    0.00 :   5acf7a:       je     5acfcc <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x60c>
         :            if (__tmp != 0)
    0.00 :   5acf7c:       test   %r13,%r13
    0.00 :   5acf7f:       je     5acf99 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5d9>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5acf81:       cmpq   $0x0,0x67af7f(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5acf89:       je     5ad7b0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdf0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5acf8f:       lock addl $0x1,0x8(%r13)
    0.00 :   5acf95:       mov    0x20(%rcx),%r12
         :            if (_M_pi != 0)
    0.00 :   5acf99:       test   %r12,%r12
    0.00 :   5acf9c:       je     5acfc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x603>
         :            if (__gthread_active_p())
    0.00 :   5acf9e:       mov    0x67af63(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5acfa5:       test   %r15,%r15
    0.00 :   5acfa8:       je     5ad840 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe80>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5acfae:       mov    $0xffffffff,%eax
    0.00 :   5acfb3:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5acfba:       cmp    $0x1,%eax
    0.00 :   5acfbd:       je     5ad858 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe98>
         :            _M_pi = __tmp;
    0.00 :   5acfc3:       mov    0x10(%rsp),%rax
    0.00 :   5acfc8:       mov    %r13,0x20(%rax)
    0.00 :   5acfcc:       sub    $0x8,%rsp
    0.00 :   5acfd0:       mov    %rbx,%rcx
    0.00 :   5acfd3:       mov    %rbp,%rsi
    0.00 :   5acfd6:       pushq  0x10(%rsp)
    0.00 :   5acfda:       mov    0x48(%rsp),%r9
    0.00 :   5acfdf:       mov    0x50(%rsp),%r8
    0.00 :   5acfe4:       mov    0x20(%rsp),%rdx
    0.00 :   5acfe9:       mov    0x28(%rsp),%rdi
    0.00 :   5acfee:       callq  5a8bd0 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)>
    0.00 :   5acff3:       pop    %rax
    0.00 :   5acff4:       pop    %rdx
    0.00 :   5acff5:       mov    0x328(%rsp),%rcx
    0.00 :   5acffd:       xor    %fs:0x28,%rcx
    0.00 :   5ad006:       mov    0x18(%rsp),%rax
    0.00 :   5ad00b:       jne    5adc12 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1252>
    0.00 :   5ad011:       add    $0x338,%rsp
    0.00 :   5ad018:       pop    %rbx
    0.00 :   5ad019:       pop    %rbp
    0.00 :   5ad01a:       pop    %r12
    0.00 :   5ad01c:       pop    %r13
    0.00 :   5ad01e:       pop    %r14
    0.00 :   5ad020:       pop    %r15
    0.00 :   5ad022:       retq
    0.00 :   5ad023:       nopl   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5ad028:       mov    (%rsp),%rdi
    0.00 :   5ad02c:       sub    %rcx,%r8
    0.00 :   5ad02f:       xor    %edx,%edx
    0.00 :   5ad031:       xor    %esi,%esi
    0.00 :   5ad033:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   5ad038:       jmpq   5acc6d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2ad>
    0.00 :   5ad03d:       nopl   (%rax)
         :            __out.setstate(ios_base::badbit);
    0.00 :   5ad040:       mov    0x130(%rsp),%rax
    0.00 :   5ad048:       mov    -0x18(%rax),%rdi
    0.00 :   5ad04c:       add    %r15,%rdi
         :            operator&(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
         :
         :            inline _GLIBCXX_CONSTEXPR _Ios_Iostate
         :            operator|(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
    0.00 :   5ad04f:       mov    0x20(%rdi),%esi
    0.00 :   5ad052:       or     $0x1,%esi
         :            { this->clear(this->rdstate() | __state); }
    0.00 :   5ad055:       callq  53b90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   5ad05a:       jmpq   5acc08 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x248>
    0.00 :   5ad05f:       nop
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5ad060:       lea    0x130(%rsp),%r15
    0.00 :   5ad068:       lea    0x70(%r15),%rdi
    0.00 :   5ad06c:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5ad071:       mov    0x67aab0(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5ad078:       xor    %esi,%esi
    0.00 :   5ad07a:       movq   $0x0,0x278(%rsp)
    0.00 :   5ad086:       mov    %si,0x280(%rsp)
         :            { this->init(0); }
    0.00 :   5ad08e:       xor    %esi,%esi
    0.00 :   5ad090:       mov    %rax,0x20(%rsp)
    0.00 :   5ad095:       add    $0x10,%rax
    0.00 :   5ad099:       mov    %rax,0x1a0(%rsp)
    0.00 :   5ad0a1:       mov    0x67acf8(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5ad0a8:       movq   $0x0,0x288(%rsp)
    0.00 :   5ad0b4:       movq   $0x0,0x290(%rsp)
    0.00 :   5ad0c0:       mov    0x8(%rax),%rcx
    0.00 :   5ad0c4:       movq   $0x0,0x298(%rsp)
    0.00 :   5ad0d0:       mov    0x10(%rax),%rax
    0.00 :   5ad0d4:       mov    -0x18(%rcx),%rdi
    0.00 :   5ad0d8:       mov    %rcx,0x130(%rsp)
    0.00 :   5ad0e0:       movq   $0x0,0x2a0(%rsp)
    0.00 :   5ad0ec:       add    %r15,%rdi
    0.00 :   5ad0ef:       mov    %rcx,0x68(%rsp)
    0.00 :   5ad0f4:       mov    %rax,(%rdi)
    0.00 :   5ad0f7:       mov    %rax,0x70(%rsp)
    0.00 :   5ad0fc:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5ad101:       mov    0x67ac58(%rip),%rbx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   5ad108:       lea    0x40(%r15),%rdi
    0.00 :   5ad10c:       movq   $0x0,0x140(%rsp)
    0.00 :   5ad118:       movq   $0x0,0x148(%rsp)
    0.00 :   5ad124:       movq   $0x0,0x150(%rsp)
    0.00 :   5ad130:       lea    0x18(%rbx),%rax
    0.00 :   5ad134:       mov    %rax,0x130(%rsp)
    0.00 :   5ad13c:       lea    0x40(%rbx),%rax
    0.00 :   5ad140:       mov    %rax,0x1a0(%rsp)
    0.00 :   5ad148:       mov    0x67ab11(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5ad14f:       movq   $0x0,0x158(%rsp)
    0.00 :   5ad15b:       mov    %rax,0x30(%rsp)
    0.00 :   5ad160:       add    $0x10,%rax
    0.00 :   5ad164:       mov    %rax,0x138(%rsp)
    0.00 :   5ad16c:       movq   $0x0,0x160(%rsp)
    0.00 :   5ad178:       movq   $0x0,0x168(%rsp)
    0.00 :   5ad184:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ad189:       mov    0x67ae48(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ad190:       lea    0x8(%r15),%rsi
    0.00 :   5ad194:       lea    0x70(%r15),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ad198:       movl   $0x10,0x178(%rsp)
    0.00 :   5ad1a3:       mov    %rax,0x28(%rsp)
    0.00 :   5ad1a8:       add    $0x10,%rax
    0.00 :   5ad1ac:       mov    %rax,0x138(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad1b4:       lea    0x60(%r15),%rax
    0.00 :   5ad1b8:       mov    %rax,0x180(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5ad1c0:       movq   $0x0,0x188(%rsp)
    0.00 :   5ad1cc:       movb   $0x0,0x190(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ad1d4:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5ad1d9:       mov    $0x2c,%edx
    0.00 :   5ad1de:       lea    0x2e2ad3(%rip),%rsi        # 88fcb8 <std::piecewise_construct+0x3db>
    0.00 :   5ad1e5:       mov    %r15,%rdi
    0.00 :   5ad1e8:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ad1ed:       mov    %r12,%rsi
    0.00 :   5ad1f0:       mov    %r15,%rdi
    0.00 :   5ad1f3:       callq  5f25f0 <onnxruntime::operator<<(std::ostream&, onnxruntime::TensorShape const&)>
    0.00 :   5ad1f8:       mov    $0x4,%edx
    0.00 :   5ad1fd:       lea    0x2ae859(%rip),%rsi        # 85ba5d <typeinfo name for onnxruntime::MaxUnpool+0x1cd>
    0.00 :   5ad204:       mov    %r15,%rdi
    0.00 :   5ad207:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ad20c:       mov    0x8(%rsp),%rsi
    0.00 :   5ad211:       mov    %r15,%rdi
    0.00 :   5ad214:       callq  5f25f0 <onnxruntime::operator<<(std::ostream&, onnxruntime::TensorShape const&)>
    0.00 :   5ad219:       mov    %r15,%rdi
    0.00 :   5ad21c:       mov    $0x9b,%edx
    0.00 :   5ad221:       lea    0x2e2ac0(%rip),%rsi        # 88fce8 <std::piecewise_construct+0x40b>
    0.00 :   5ad228:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad22d:       lea    0xb0(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   5ad235:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad241:       lea    0x10(%rdi),%rax
    0.00 :   5ad245:       mov    %rdi,0x60(%rsp)
    0.00 :   5ad24a:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   5ad252:       mov    0x160(%rsp),%rax
    0.00 :   5ad25a:       movb   $0x0,0xc0(%rsp)
    0.00 :   5ad262:       test   %rax,%rax
    0.00 :   5ad265:       je     5ad9e0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1020>
         :            if (this->pptr() > this->egptr())
    0.00 :   5ad26b:       mov    0x150(%rsp),%r8
    0.00 :   5ad273:       mov    0x158(%rsp),%rcx
    0.00 :   5ad27b:       cmp    %r8,%rax
    0.00 :   5ad27e:       jbe    5ad798 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdd8>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5ad284:       sub    %rcx,%rax
    0.00 :   5ad287:       xor    %edx,%edx
    0.00 :   5ad289:       xor    %esi,%esi
    0.00 :   5ad28b:       mov    %rax,%r8
    0.00 :   5ad28e:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   5ad293:       lea    0x18(%rbx),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad297:       mov    0x180(%rsp),%rdi
    0.00 :   5ad29f:       mov    %rax,0x130(%rsp)
    0.00 :   5ad2a7:       lea    0x40(%rbx),%rax
    0.00 :   5ad2ab:       mov    %rax,0x1a0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5ad2b3:       mov    0x28(%rsp),%rax
    0.00 :   5ad2b8:       add    $0x10,%rax
    0.00 :   5ad2bc:       mov    %rax,0x138(%rsp)
         :            if (!_M_is_local())
    0.00 :   5ad2c4:       lea    0x60(%r15),%rax
    0.00 :   5ad2c8:       cmp    %rax,%rdi
    0.00 :   5ad2cb:       je     5ad2d2 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x912>
    0.00 :   5ad2cd:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5ad2d2:       mov    0x30(%rsp),%rax
    0.00 :   5ad2d7:       lea    0x40(%r15),%rdi
    0.00 :   5ad2db:       add    $0x10,%rax
    0.00 :   5ad2df:       mov    %rax,0x138(%rsp)
    0.00 :   5ad2e7:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5ad2ec:       mov    0x68(%rsp),%rax
    0.00 :   5ad2f1:       mov    0x70(%rsp),%rcx
         :            ~basic_ios() { }
    0.00 :   5ad2f6:       lea    0x70(%r15),%rdi
    0.00 :   5ad2fa:       mov    %rax,0x130(%rsp)
    0.00 :   5ad302:       mov    -0x18(%rax),%rax
    0.00 :   5ad306:       mov    %rcx,0x130(%rsp,%rax,1)
    0.00 :   5ad30e:       mov    0x20(%rsp),%rax
    0.00 :   5ad313:       add    $0x10,%rax
    0.00 :   5ad317:       mov    %rax,0x1a0(%rsp)
    0.00 :   5ad31f:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5ad324:       cmp    (%rsp),%r13
    0.00 :   5ad328:       jl     5ad7c0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe00>
    0.00 :   5ad32e:       mov    0x48(%rbp),%rax
    0.00 :   5ad332:       mov    0x210(%rax),%rax
    0.00 :   5ad339:       cmpl   $0x2,0x28(%rax)
    0.00 :   5ad33d:       jg     5ad745 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd85>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad343:       lea    0xd0(%rsp),%rcx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad34b:       lea    0x2e2725(%rip),%rdx        # 88fa77 <std::piecewise_construct+0x19a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad352:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad356:       lea    -0x3f(%rdx),%rsi
    0.00 :   5ad35a:       mov    %rcx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad35d:       mov    %rcx,%r13
    0.00 :   5ad360:       mov    %rcx,(%rsp)
    0.00 :   5ad364:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad36c:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ad371:       lea    0x2e308e(%rip),%rdx        # 890406 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)::__FUNCTION__+0x26>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad378:       lea    0x38(%r13),%rax
    0.00 :   5ad37c:       movl   $0x1c4,0xf0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad387:       lea    0x28(%r13),%rdi
    0.00 :   5ad38b:       lea    -0x26(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad38f:       mov    %rax,0xf8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad397:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ad39c:       mov    0x48(%rbp),%rdx
    0.00 :   5ad3a0:       lea    0x67b901(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
    0.00 :   5ad3a7:       lea    0x20(%r15),%rdi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ad3ab:       movq   $0x0,0x118(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad3b7:       mov    0xd0(%rsp),%rsi
    0.00 :   5ad3bf:       movq   $0x0,0x120(%rsp)
    0.00 :   5ad3cb:       mov    0x210(%rdx),%rdx
    0.00 :   5ad3d2:       mov    (%rax),%rax
    0.00 :   5ad3d5:       movq   $0x0,0x128(%rsp)
    0.00 :   5ad3e1:       movl   $0x2,0x138(%rsp)
    0.00 :   5ad3ec:       mov    %rdx,0x130(%rsp)
    0.00 :   5ad3f4:       mov    0xd8(%rsp),%rdx
    0.00 :   5ad3fc:       mov    %rax,0x140(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad404:       lea    0x30(%r15),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad408:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad40b:       mov    %rax,0x150(%rsp)
    0.00 :   5ad413:       movl   $0x0,0x148(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad41e:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ad423:       mov    0xf0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad42a:       mov    0xf8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad432:       lea    0x48(%r15),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad436:       mov    0x100(%rsp),%rdx
    0.00 :   5ad43e:       mov    %eax,0x170(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad445:       lea    0x58(%r15),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad449:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad44c:       mov    %rax,0x178(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad454:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ad459:       mov    0x120(%rsp),%rax
    0.00 :   5ad461:       mov    0x118(%rsp),%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ad469:       movq   $0x0,0x198(%rsp)
    0.00 :   5ad475:       movq   $0x0,0x1a0(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ad481:       mov    %rax,%r13
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ad484:       mov    %rax,0x58(%rsp)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ad489:       movq   $0x0,0x1a8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ad495:       sub    %r12,%r13
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5ad498:       mov    %r13,%rax
    0.00 :   5ad49b:       sar    $0x5,%rax
    0.00 :   5ad49f:       je     5ad9c8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1008>
         :            if (__n > this->max_size())
    0.00 :   5ad4a5:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5ad4af:       cmp    %rdx,%rax
    0.00 :   5ad4b2:       ja     5adc21 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1261>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5ad4b8:       mov    %r13,%rdi
    0.00 :   5ad4bb:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5ad4c0:       mov    %rax,0x78(%rsp)
    0.00 :   5ad4c5:       mov    0x120(%rsp),%rax
    0.00 :   5ad4cd:       mov    0x118(%rsp),%r12
    0.00 :   5ad4d5:       mov    %rax,0x58(%rsp)
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ad4da:       mov    0x78(%rsp),%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ad4df:       add    %rax,%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ad4e2:       mov    %rax,0x198(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5ad4ea:       mov    %rax,0x1a0(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ad4f2:       mov    %r13,0x1a8(%rsp)
    0.00 :   5ad4fa:       cmp    0x58(%rsp),%r12
    0.00 :   5ad4ff:       je     5ada9b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10db>
         :            _ForwardIterator __cur = __result;
    0.00 :   5ad505:       mov    %rax,%r13
    0.00 :   5ad508:       nopl   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad510:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad514:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad517:       mov    %rax,0x0(%r13)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad51b:       mov    (%r12),%rsi
    0.00 :   5ad51f:       mov    0x8(%r12),%rdx
    0.00 :   5ad524:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad527:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5ad52c:       add    $0x20,%r13
    0.00 :   5ad530:       add    $0x20,%r12
    0.00 :   5ad534:       cmp    %r12,0x58(%rsp)
    0.00 :   5ad539:       jne    5ad510 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb50>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5ad53b:       lea    0xf0(%r15),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   5ad542:       mov    %r13,0x1a0(%rsp)
    0.00 :   5ad54a:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5ad54f:       mov    0x20(%rsp),%rax
    0.00 :   5ad554:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   5ad556:       xor    %esi,%esi
    0.00 :   5ad558:       mov    %cx,0x300(%rsp)
    0.00 :   5ad560:       movq   $0x0,0x2f8(%rsp)
    0.00 :   5ad56c:       add    $0x10,%rax
    0.00 :   5ad570:       mov    %rax,0x220(%rsp)
    0.00 :   5ad578:       mov    0x68(%rsp),%rax
    0.00 :   5ad57d:       movq   $0x0,0x308(%rsp)
    0.00 :   5ad589:       mov    %rax,0x1b0(%rsp)
    0.00 :   5ad591:       mov    -0x18(%rax),%rax
    0.00 :   5ad595:       movq   $0x0,0x310(%rsp)
    0.00 :   5ad5a1:       lea    0x80(%r15,%rax,1),%rdi
    0.00 :   5ad5a9:       mov    0x70(%rsp),%rax
    0.00 :   5ad5ae:       movq   $0x0,0x318(%rsp)
    0.00 :   5ad5ba:       movq   $0x0,0x320(%rsp)
    0.00 :   5ad5c6:       mov    %rax,(%rdi)
    0.00 :   5ad5c9:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5ad5ce:       lea    0x18(%rbx),%rax
         :            _M_buf_locale(locale())
    0.00 :   5ad5d2:       lea    0xc0(%r15),%rdi
    0.00 :   5ad5d9:       movq   $0x0,0x1c0(%rsp)
    0.00 :   5ad5e5:       mov    %rax,0x1b0(%rsp)
    0.00 :   5ad5ed:       lea    0x40(%rbx),%rax
    0.00 :   5ad5f1:       mov    %rax,0x220(%rsp)
    0.00 :   5ad5f9:       mov    0x30(%rsp),%rax
    0.00 :   5ad5fe:       movq   $0x0,0x1c8(%rsp)
    0.00 :   5ad60a:       movq   $0x0,0x1d0(%rsp)
    0.00 :   5ad616:       add    $0x10,%rax
    0.00 :   5ad61a:       mov    %rax,0x1b8(%rsp)
    0.00 :   5ad622:       movq   $0x0,0x1d8(%rsp)
    0.00 :   5ad62e:       movq   $0x0,0x1e0(%rsp)
    0.00 :   5ad63a:       movq   $0x0,0x1e8(%rsp)
    0.00 :   5ad646:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ad64b:       mov    0x28(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ad650:       lea    0x88(%r15),%rsi
    0.00 :   5ad657:       lea    0xf0(%r15),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ad65e:       movl   $0x10,0x1f8(%rsp)
    0.00 :   5ad669:       add    $0x10,%rax
    0.00 :   5ad66d:       movb   $0x0,0x210(%rsp)
    0.00 :   5ad675:       mov    %rax,0x1b8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad67d:       lea    0xe0(%r15),%rax
    0.00 :   5ad684:       mov    %rax,0x200(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5ad68c:       movq   $0x0,0x208(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ad698:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   5ad69d:       mov    0xb8(%rsp),%rdx
    0.00 :   5ad6a5:       mov    0xb0(%rsp),%rsi
    0.00 :   5ad6ad:       lea    0x80(%r15),%rdi
    0.00 :   5ad6b4:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ad6b9:       mov    %r15,%rdi
    0.00 :   5ad6bc:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5ad6c1:       mov    0x120(%rsp),%rbx
    0.00 :   5ad6c9:       mov    0x118(%rsp),%r12
    0.00 :   5ad6d1:       cmp    %r12,%rbx
    0.00 :   5ad6d4:       je     5ad704 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd44>
    0.00 :   5ad6d6:       nopw   %cs:0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad6e0:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad6e4:       lea    0x10(%r12),%rax
    0.00 :   5ad6e9:       cmp    %rax,%rdi
    0.00 :   5ad6ec:       je     5ad6f3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd33>
         :            ::operator delete(__p);
    0.00 :   5ad6ee:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad6f3:       add    $0x20,%r12
    0.00 :   5ad6f7:       cmp    %r12,%rbx
    0.00 :   5ad6fa:       jne    5ad6e0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd20>
    0.00 :   5ad6fc:       mov    0x118(%rsp),%r12
         :            if (__p)
    0.00 :   5ad704:       test   %r12,%r12
    0.00 :   5ad707:       je     5ad711 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd51>
    0.00 :   5ad709:       mov    %r12,%rdi
    0.00 :   5ad70c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad711:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad715:       mov    0xf8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad71d:       add    $0x38,%rax
    0.00 :   5ad721:       cmp    %rax,%rdi
    0.00 :   5ad724:       je     5ad72b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd6b>
    0.00 :   5ad726:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad72b:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad72f:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad737:       add    $0x10,%rax
    0.00 :   5ad73b:       cmp    %rax,%rdi
    0.00 :   5ad73e:       je     5ad745 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd85>
    0.00 :   5ad740:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad745:       mov    0x60(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad74a:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad752:       add    $0x10,%rax
    0.00 :   5ad756:       cmp    %rax,%rdi
    0.00 :   5ad759:       je     5acf46 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x586>
    0.00 :   5ad75f:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   5ad764:       jmpq   5acf46 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x586>
    0.00 :   5ad769:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5ad770:       xor    %r13d,%r13d
    0.00 :   5ad773:       jmpq   5acdc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x403>
    0.00 :   5ad778:       nopl   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   5ad780:       mov    (%rsp),%rdi
    0.00 :   5ad784:       lea    0x50(%r15),%rsi
    0.00 :   5ad788:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5ad78d:       jmpq   5acc6d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2ad>
    0.00 :   5ad792:       nopw   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5ad798:       mov    0x60(%rsp),%rdi
    0.00 :   5ad79d:       sub    %rcx,%r8
    0.00 :   5ad7a0:       xor    %edx,%edx
    0.00 :   5ad7a2:       xor    %esi,%esi
    0.00 :   5ad7a4:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   5ad7a9:       jmpq   5ad293 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8d3>
    0.00 :   5ad7ae:       xchg   %ax,%ax
         :            { *__mem += __val; }
    0.00 :   5ad7b0:       addl   $0x1,0x8(%r13)
    0.00 :   5ad7b5:       jmpq   5acf99 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5d9>
    0.00 :   5ad7ba:       nopw   0x0(%rax,%rax,1)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad7c0:       mov    0xb0(%rsp),%rsi
    0.00 :   5ad7c8:       mov    0xb8(%rsp),%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad7d0:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad7d4:       mov    %r15,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad7d7:       mov    %rax,0x130(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad7df:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad7e2:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ad7e7:       mov    0x18(%rsp),%rdi
    0.00 :   5ad7ec:       mov    %r15,%rcx
    0.00 :   5ad7ef:       mov    $0x1,%edx
    0.00 :   5ad7f4:       mov    $0x2,%esi
    0.00 :   5ad7f9:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad7fe:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad806:       lea    0x10(%r15),%rax
    0.00 :   5ad80a:       cmp    %rax,%rdi
    0.00 :   5ad80d:       je     5ad814 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe54>
         :            ::operator delete(__p);
    0.00 :   5ad80f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad814:       mov    0x60(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad819:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad821:       add    $0x10,%rax
    0.00 :   5ad825:       cmp    %rax,%rdi
    0.00 :   5ad828:       je     5acff5 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x635>
    0.00 :   5ad82e:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   5ad833:       jmpq   5acff5 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x635>
    0.00 :   5ad838:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ad840:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ad845:       lea    -0x1(%rax),%edx
    0.00 :   5ad848:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5ad84d:       jmpq   5acfba <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5fa>
    0.00 :   5ad852:       nopw   0x0(%rax,%rax,1)
         :            _M_dispose();
    0.00 :   5ad858:       mov    (%r12),%rax
    0.00 :   5ad85c:       mov    %r12,%rdi
    0.00 :   5ad85f:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ad862:       test   %r15,%r15
    0.00 :   5ad865:       je     5ad9f8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1038>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad86b:       mov    $0xffffffff,%eax
    0.00 :   5ad870:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ad877:       cmp    $0x1,%eax
    0.00 :   5ad87a:       jne    5acfc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x603>
         :            _M_destroy();
    0.00 :   5ad880:       mov    (%r12),%rax
    0.00 :   5ad884:       mov    %r12,%rdi
    0.00 :   5ad887:       callq  *0x18(%rax)
    0.00 :   5ad88a:       jmpq   5acfc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x603>
    0.00 :   5ad88f:       nop
    0.00 :   5ad890:       mov    0x38(%rsp),%rdx
    0.00 :   5ad895:       mov    %rbp,%rsi
    0.00 :   5ad898:       lea    0x90(%rsp),%rdi
    0.00 :   5ad8a0:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    0.00 :   5ad8a5:       mov    0x90(%rsp),%rsi
    0.00 :   5ad8ad:       mov    (%rsi),%rax
    0.00 :   5ad8b0:       mov    0x20(%rax),%rax
    0.00 :   5ad8b4:       cmp    0x67a245(%rip),%rax        # c27b00 <.got+0x40>
    0.00 :   5ad8bb:       jne    5ada88 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10c8>
         :            #if __cplusplus > 201402L
         :            using weak_type = __weak_ptr<_Tp, _Lp>;
         :            #endif
         :
         :            constexpr __shared_ptr() noexcept
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5ad8c1:       movq   $0x0,0x80(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5ad8cd:       movq   $0x0,0x88(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   5ad8d9:       mov    0x98(%rsp),%r12
    0.00 :   5ad8e1:       test   %r12,%r12
    0.00 :   5ad8e4:       je     5ad90b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf4b>
         :            if (__gthread_active_p())
    0.00 :   5ad8e6:       mov    0x67a61b(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ad8ed:       test   %r15,%r15
    0.00 :   5ad8f0:       je     5ada6b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10ab>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad8f6:       mov    $0xffffffff,%eax
    0.00 :   5ad8fb:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ad902:       cmp    $0x1,%eax
    0.00 :   5ad905:       je     5adadc <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x111c>
         :            : _M_pi(__r._M_pi)
    0.00 :   5ad90b:       mov    0x88(%rsp),%r12
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5ad913:       mov    0x80(%rsp),%rax
         :            if (_M_pi != 0)
    0.00 :   5ad91b:       test   %r12,%r12
    0.00 :   5ad91e:       je     5ada20 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1060>
         :            if (__gthread_active_p())
    0.00 :   5ad924:       mov    0x67a5dd(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   5ad92b:       lea    0x8(%r12),%r13
    0.00 :   5ad930:       test   %r15,%r15
    0.00 :   5ad933:       je     5ada10 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1050>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad939:       lock addl $0x1,0x0(%r13)
         :            if (__tmp != _M_pi)
    0.00 :   5ad93f:       mov    0x20(%r14),%rdi
         :            class __shared_ptr
    0.00 :   5ad943:       mov    %rax,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5ad947:       cmp    %r12,%rdi
    0.00 :   5ad94a:       je     5ad96c <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfac>
         :            if (__gthread_active_p())
    0.00 :   5ad94c:       test   %r15,%r15
    0.00 :   5ad94f:       je     5ada7d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10bd>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad955:       lock addl $0x1,0x0(%r13)
    0.00 :   5ad95b:       mov    0x20(%r14),%rdi
         :            if (_M_pi != 0)
    0.00 :   5ad95f:       test   %rdi,%rdi
    0.00 :   5ad962:       jne    5adc17 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1257>
         :            _M_pi = __tmp;
    0.00 :   5ad968:       mov    %r12,0x20(%r14)
         :            if (__gthread_active_p())
    0.00 :   5ad96c:       test   %r15,%r15
    0.00 :   5ad96f:       je     5ada59 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1099>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad975:       mov    $0xffffffff,%eax
    0.00 :   5ad97a:       lock xadd %eax,0x0(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ad980:       cmp    $0x1,%eax
    0.00 :   5ad983:       je     5adb0f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x114f>
    0.00 :   5ad989:       mov    0x88(%rsp),%r12
         :            if (_M_pi != nullptr)
    0.00 :   5ad991:       test   %r12,%r12
    0.00 :   5ad994:       je     5ad9bb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xffb>
         :            if (__gthread_active_p())
    0.00 :   5ad996:       mov    0x67a56b(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ad99d:       test   %r15,%r15
    0.00 :   5ad9a0:       je     5ada47 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1087>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad9a6:       mov    $0xffffffff,%eax
    0.00 :   5ad9ab:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ad9b2:       cmp    $0x1,%eax
    0.00 :   5ad9b5:       je     5adaa5 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10e5>
    0.00 :   5ad9bb:       mov    0x18(%r14),%rax
    0.00 :   5ad9bf:       jmpq   5acf66 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5a6>
    0.00 :   5ad9c4:       nopl   0x0(%rax)
    0.00 :   5ad9c8:       movq   $0x0,0x78(%rsp)
    0.00 :   5ad9d1:       jmpq   5ad4da <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb1a>
    0.00 :   5ad9d6:       nopw   %cs:0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   5ad9e0:       mov    0x60(%rsp),%rdi
    0.00 :   5ad9e5:       lea    0x50(%r15),%rsi
    0.00 :   5ad9e9:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5ad9ee:       jmpq   5ad293 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8d3>
    0.00 :   5ad9f3:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ad9f8:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ad9fd:       lea    -0x1(%rax),%edx
    0.00 :   5ada00:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5ada05:       jmpq   5ad877 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xeb7>
    0.00 :   5ada0a:       nopw   0x0(%rax,%rax,1)
         :            { *__mem += __val; }
    0.00 :   5ada10:       addl   $0x1,0x8(%r12)
    0.00 :   5ada16:       jmpq   5ad93f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf7f>
    0.00 :   5ada1b:       nopl   0x0(%rax,%rax,1)
         :            if (__tmp != _M_pi)
    0.00 :   5ada20:       mov    0x20(%r14),%rdi
         :            class __shared_ptr
    0.00 :   5ada24:       mov    %rax,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5ada28:       test   %rdi,%rdi
    0.00 :   5ada2b:       je     5ad9bb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xffb>
         :            _M_pi->_M_release();
    0.00 :   5ada2d:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            _M_pi = __tmp;
    0.00 :   5ada32:       movq   $0x0,0x20(%r14)
         :            ~__shared_count() noexcept
    0.00 :   5ada3a:       mov    0x88(%rsp),%r12
    0.00 :   5ada42:       jmpq   5ad991 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfd1>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ada47:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ada4c:       lea    -0x1(%rax),%edx
    0.00 :   5ada4f:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5ada54:       jmpq   5ad9b2 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xff2>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ada59:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ada5e:       lea    -0x1(%rax),%edx
    0.00 :   5ada61:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5ada66:       jmpq   5ad980 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfc0>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ada6b:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ada70:       lea    -0x1(%rax),%edx
    0.00 :   5ada73:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5ada78:       jmpq   5ad902 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf42>
         :            { *__mem += __val; }
    0.00 :   5ada7d:       addl   $0x1,0x8(%r12)
    0.00 :   5ada83:       jmpq   5ad95f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf9f>
    0.00 :   5ada88:       lea    0x80(%rsp),%rdi
    0.00 :   5ada90:       mov    0x48(%rbp),%rdx
    0.00 :   5ada94:       callq  *%rax
    0.00 :   5ada96:       jmpq   5ad8d9 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf19>
         :            _ForwardIterator __cur = __result;
    0.00 :   5ada9b:       mov    0x78(%rsp),%r13
    0.00 :   5adaa0:       jmpq   5ad53b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb7b>
         :            _M_dispose();
    0.00 :   5adaa5:       mov    (%r12),%rax
    0.00 :   5adaa9:       mov    %r12,%rdi
    0.00 :   5adaac:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5adaaf:       test   %r15,%r15
    0.00 :   5adab2:       je     5adb42 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1182>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5adab8:       mov    $0xffffffff,%eax
    0.00 :   5adabd:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5adac4:       cmp    $0x1,%eax
    0.00 :   5adac7:       jne    5ad9bb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xffb>
         :            _M_destroy();
    0.00 :   5adacd:       mov    (%r12),%rax
    0.00 :   5adad1:       mov    %r12,%rdi
    0.00 :   5adad4:       callq  *0x18(%rax)
    0.00 :   5adad7:       jmpq   5ad9bb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xffb>
         :            _M_dispose();
    0.00 :   5adadc:       mov    (%r12),%rax
    0.00 :   5adae0:       mov    %r12,%rdi
    0.00 :   5adae3:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5adae6:       test   %r15,%r15
    0.00 :   5adae9:       je     5adb54 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1194>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5adaeb:       mov    $0xffffffff,%eax
    0.00 :   5adaf0:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5adaf7:       cmp    $0x1,%eax
    0.00 :   5adafa:       jne    5ad90b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf4b>
         :            _M_destroy();
    0.00 :   5adb00:       mov    (%r12),%rax
    0.00 :   5adb04:       mov    %r12,%rdi
    0.00 :   5adb07:       callq  *0x18(%rax)
    0.00 :   5adb0a:       jmpq   5ad90b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf4b>
         :            _M_dispose();
    0.00 :   5adb0f:       mov    (%r12),%rax
    0.00 :   5adb13:       mov    %r12,%rdi
    0.00 :   5adb16:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5adb19:       test   %r15,%r15
    0.00 :   5adb1c:       je     5adb63 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x11a3>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5adb1e:       mov    $0xffffffff,%eax
    0.00 :   5adb23:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5adb2a:       cmp    $0x1,%eax
    0.00 :   5adb2d:       jne    5ad989 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfc9>
         :            _M_destroy();
    0.00 :   5adb33:       mov    (%r12),%rax
    0.00 :   5adb37:       mov    %r12,%rdi
    0.00 :   5adb3a:       callq  *0x18(%rax)
    0.00 :   5adb3d:       jmpq   5ad989 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfc9>
         :            _Atomic_word __result = *__mem;
    0.00 :   5adb42:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5adb47:       lea    -0x1(%rax),%edx
    0.00 :   5adb4a:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5adb4f:       jmpq   5adac4 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1104>
         :            _Atomic_word __result = *__mem;
    0.00 :   5adb54:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5adb59:       lea    -0x1(%rax),%edx
    0.00 :   5adb5c:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5adb61:       jmp    5adaf7 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1137>
         :            _Atomic_word __result = *__mem;
    0.00 :   5adb63:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5adb68:       lea    -0x1(%rax),%edx
    0.00 :   5adb6b:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5adb70:       jmp    5adb2a <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x116a>
    0.00 :   5adb72:       mov    $0xa0,%edi
    0.00 :   5adb77:       lea    0xd0(%rsp),%rbx
    0.00 :   5adb7f:       lea    0x90(%rsp),%r14
    0.00 :   5adb87:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5adb8c:       mov    %rbx,%rdi
    0.00 :   5adb8f:       mov    %rbx,(%rsp)
    0.00 :   5adb93:       mov    %rax,%rbp
    0.00 :   5adb96:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5adb9b:       mov    %r14,%rdi
    0.00 :   5adb9e:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5adba3:       lea    0x130(%rsp),%r15
    0.00 :   5adbab:       mov    %r14,%r8
    0.00 :   5adbae:       lea    0x2e2c4b(%rip),%rcx        # 890800 <onnxruntime::IExecutionFrame::GetMLValue(int) const::__PRETTY_FUNCTION__>
    0.00 :   5adbb5:       mov    $0x57,%edx
    0.00 :   5adbba:       lea    0x2e1d67(%rip),%rsi        # 88f928 <std::piecewise_construct+0x4b>
    0.00 :   5adbc1:       mov    %r15,%rdi
    0.00 :   5adbc4:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5adbc9:       mov    %rbx,%rcx
    0.00 :   5adbcc:       lea    0x2e1d95(%rip),%rdx        # 88f968 <std::piecewise_construct+0x8b>
    0.00 :   5adbd3:       mov    %r15,%rsi
    0.00 :   5adbd6:       mov    %rbp,%rdi
    0.00 :   5adbd9:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5adbde:       mov    %r15,%rdi
         :            if (!_M_is_local())
    0.00 :   5adbe1:       add    $0x10,%rbx
    0.00 :   5adbe5:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5adbea:       mov    %r14,%rdi
    0.00 :   5adbed:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5adbf2:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5adbfa:       cmp    %rbx,%rdi
    0.00 :   5adbfd:       je     b1c5e <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x2e4>
         :            ::operator delete(__p);
    0.00 :   5adc03:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5adc08:       jmpq   b1c5e <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x2e4>
         :            std::__throw_bad_alloc();
    0.00 :   5adc0d:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5adc12:       callq  53460 <__stack_chk_fail@plt>
         :            _M_pi->_M_release();
    0.00 :   5adc17:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   5adc1c:       jmpq   5ad968 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfa8>
    0.00 :   5adc21:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5adc26:       mov    %rax,%rbx
    0.00 :   5adc29:       jmpq   b1995 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x1b>
    0.00 :   5adc2e:       mov    %rax,%rbx
    0.00 :   5adc31:       jmpq   b19c3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x49>
    0.00 :   5adc36:       mov    %rax,%rbx
    0.00 :   5adc39:       jmpq   b1a0f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x95>
    0.00 :   5adc3e:       mov    %rax,%rbx
    0.00 :   5adc41:       jmpq   b19f7 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x7d>
    0.00 :   5adc46:       mov    %rax,%rbx
    0.00 :   5adc49:       jmpq   b1a39 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0xbf>
    0.00 :   5adc4e:       mov    %rax,%rbx
    0.00 :   5adc51:       jmpq   b1a94 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x11a>
    0.00 :   5adc56:       mov    %rax,%rbx
    0.00 :   5adc59:       jmpq   b1aac <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x132>
    0.00 :   5adc5e:       jmpq   b1b00 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x186>
    0.00 :   5adc63:       jmpq   b1b1d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x1a3>
    0.00 :   5adc68:       jmpq   b1b3c <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x1c2>
    0.00 :   5adc6d:       mov    %rax,%rbx
    0.00 :   5adc70:       jmpq   b1a7e <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x104>
    0.00 :   5adc75:       mov    %rax,%rbx
    0.00 :   5adc78:       jmpq   b1ad6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x15c>
    0.00 :   5adc7d:       jmpq   b1b66 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x1ec>
    0.00 :   5adc82:       jmpq   b1b8d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x213>
    0.00 :   5adc87:       jmpq   b1bac <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x232>
    0.00 :   5adc8c:       mov    %rax,%rbx
    0.00 :   5adc8f:       jmpq   b1bc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x249>
    0.00 :   5adc94:       mov    %rax,%rbx
    0.00 :   5adc97:       jmpq   b19ab <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x31>
    0.00 :   5adc9c:       mov    %rax,%rbx
    0.00 :   5adc9f:       jmpq   b1bf4 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x27a>
    0.00 :   5adca4:       mov    %rax,%rbx
    0.00 :   5adca7:       jmpq   b19d4 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x5a>
    0.00 :   5adcac:       mov    %rax,%rbx
    0.00 :   5adcaf:       jmpq   b19cb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x51>
    0.00 :   5adcb4:       jmpq   b1c17 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x29d>
    0.00 :   5adcb9:       jmpq   b1c3b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x2c1>
    0.00 :   5adcbe:       mov    %rax,%rbx
    0.00 :   5adcc1:       jmpq   b1abc <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x142>
    0.00 :   5adcc6:       mov    %rax,%rbx
    0.00 :   5adcc9:       jmpq   b1ab4 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x13a>
    0.00 :   5adcce:       mov    %rax,%rbx
    0.00 :   5adcd1:       jmpq   b1c74 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x2fa>
    0.00 :   5adcd6:       mov    %rax,%rbx
    0.00 :   5adcd9:       jmpq   b1c7c <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x302>
    0.00 :   5adcde:       mov    %rax,%rbx
    0.00 :   5adce1:       jmpq   b1c84 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x30a>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000048a720 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const>:
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48a720:       push   %rbp
    0.00 :   48a721:       mov    %rsp,%rbp
    0.00 :   48a724:       push   %r15
    0.00 :   48a726:       mov    %rdx,%r15
    0.00 :   48a729:       push   %r14
    0.00 :   48a72b:       push   %r13
    0.00 :   48a72d:       mov    %rcx,%r13
    0.00 :   48a730:       push   %r12
    0.00 :   48a732:       mov    %rsi,%r12
    0.00 :   48a735:       push   %rbx
    0.00 :   48a736:       sub    $0x288,%rsp
    0.00 :   48a73d:       mov    %rdi,-0x2a0(%rbp)
    0.00 :   48a744:       mov    0x10(%rdx),%rdi
    0.00 :   48a748:       mov    %rsi,-0x248(%rbp)
    0.00 :   48a74f:       mov    %rdx,-0x270(%rbp)
    0.00 :   48a756:       mov    %fs:0x28,%rax
    0.00 :   48a75f:       mov    %rax,-0x38(%rbp)
    0.00 :   48a763:       xor    %eax,%eax
    0.00 :   48a765:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   48a76a:       mov    0x10(%r15),%rdi
    0.00 :   48a76e:       movl   $0x0,-0x234(%rbp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a778:       mov    0xe0(%rax),%rbx
    0.00 :   48a77f:       sub    0xd8(%rax),%rbx
    0.00 :   48a786:       movl   $0x0,-0x230(%rbp)
    0.00 :   48a790:       mov    0x10(%r12),%rax
    0.00 :   48a795:       sar    $0x3,%rbx
    0.00 :   48a799:       movl   $0x0,-0x22c(%rbp)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   48a7a3:       movq   $0x0,-0x210(%rbp)
    0.00 :   48a7ae:       mov    %rax,-0x228(%rbp)
    0.00 :   48a7b5:       movq   $0x0,-0x208(%rbp)
    0.00 :   48a7c0:       movq   $0x0,-0x200(%rbp)
    0.00 :   48a7cb:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a7d0:       mov    0xb0(%rax),%rdx
    0.00 :   48a7d7:       sub    0xa8(%rax),%rdx
    0.00 :   48a7de:       lea    0x18(%r13),%r14
    0.00 :   48a7e2:       sar    $0x3,%rdx
    0.00 :   48a7e6:       cmp    $0x2,%edx
    0.00 :   48a7e9:       je     48a8e0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x1c0>
    0.00 :   48a7ef:       mov    -0x248(%rbp),%rax
         :            // Called by the range assign to implement [23.1.1]/9
         :            template<typename _InputIterator>
         :            void
         :            _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
         :            __false_type)
         :            { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
    0.00 :   48a7f6:       lea    -0x210(%rbp),%r12
    0.00 :   48a7fd:       mov    %r12,%rdi
    0.00 :   48a800:       mov    0x20(%rax),%rdx
         :            assign(_InputIterator __first, _InputIterator __last)
    0.00 :   48a804:       mov    0x18(%rax),%rsi
         :            { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
    0.00 :   48a808:       callq  34f6c0 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)>
    0.00 :   48a80d:       sub    $0x8,%rsp
    0.00 :   48a811:       lea    -0x22c(%rbp),%rax
    0.00 :   48a818:       mov    %r14,%rdx
    0.00 :   48a81b:       mov    %ebx,%ecx
    0.00 :   48a81d:       push   %r12
    0.00 :   48a81f:       mov    -0x248(%rbp),%rsi
    0.00 :   48a826:       lea    -0x1f0(%rbp),%rdi
    0.00 :   48a82d:       lea    -0x234(%rbp),%r9
    0.00 :   48a834:       push   %rax
    0.00 :   48a835:       lea    -0x230(%rbp),%rax
    0.00 :   48a83c:       lea    -0x228(%rbp),%r8
    0.00 :   48a843:       mov    %rdi,%r14
    0.00 :   48a846:       push   %rax
    0.00 :   48a847:       add    $0x10,%rsi
    0.00 :   48a84b:       mov    %rdi,-0x278(%rbp)
    0.00 :   48a852:       callq  4893c0 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   48a857:       mov    -0x1f0(%rbp),%rax
    0.00 :   48a85e:       add    $0x20,%rsp
    0.00 :   48a862:       mov    %rax,-0x2a8(%rbp)
    0.00 :   48a869:       test   %rax,%rax
    0.00 :   48a86c:       je     48a940 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x220>
    0.00 :   48a872:       mov    $0x9f,%r8d
    0.00 :   48a878:       lea    0x3eee41(%rip),%rcx        # 8796c0 <onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const::__FUNCTION__>
    0.00 :   48a87f:       mov    %r14,%rsi
    0.00 :   48a882:       xor    %edi,%edi
    0.00 :   48a884:       lea    0x3ee7a5(%rip),%rdx        # 879030 <typeinfo name for onnxruntime::DepthToSpace<float>+0x270>
    0.00 :   48a88b:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   48a890:       mov    -0x1f0(%rbp),%rax
    0.00 :   48a897:       mov    -0x2a0(%rbp),%rsi
    0.00 :   48a89e:       mov    %rax,(%rsi)
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48a8a1:       mov    -0x210(%rbp),%rdi
         :            if (__p)
    0.00 :   48a8a8:       test   %rdi,%rdi
    0.00 :   48a8ab:       je     48a8b2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x192>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   48a8ad:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48a8b2:       mov    -0x38(%rbp),%rsi
    0.00 :   48a8b6:       xor    %fs:0x28,%rsi
    0.00 :   48a8bf:       mov    -0x2a0(%rbp),%rax
    0.00 :   48a8c6:       jne    48b13a <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xa1a>
    0.00 :   48a8cc:       lea    -0x28(%rbp),%rsp
    0.00 :   48a8d0:       pop    %rbx
    0.00 :   48a8d1:       pop    %r12
    0.00 :   48a8d3:       pop    %r13
    0.00 :   48a8d5:       pop    %r14
    0.00 :   48a8d7:       pop    %r15
    0.00 :   48a8d9:       pop    %rbp
    0.00 :   48a8da:       retq
    0.00 :   48a8db:       nopl   0x0(%rax,%rax,1)
    0.00 :   48a8e0:       mov    -0x270(%rbp),%rdi
    0.00 :   48a8e7:       mov    $0x1,%esi
    0.00 :   48a8ec:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   48a8f1:       mov    0x18(%rax),%rdx
    0.00 :   48a8f5:       mov    %rax,%r12
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a8f8:       mov    0x20(%rax),%rax
    0.00 :   48a8fc:       sub    %rdx,%rax
    0.00 :   48a8ff:       cmp    $0x8,%rax
    0.00 :   48a903:       jne    48b229 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xb09>
    0.00 :   48a909:       mov    (%rdx),%rax
    0.00 :   48a90c:       mov    0x30(%r12),%rdx
    0.00 :   48a911:       cmpl   $0x7,0x8(%rdx)
    0.00 :   48a915:       jne    48b2da <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xbba>
    0.00 :   48a91b:       mov    0x50(%r12),%rsi
    0.00 :   48a920:       add    (%r12),%rsi
         :            { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
    0.00 :   48a924:       lea    -0x210(%rbp),%r12
    0.00 :   48a92b:       lea    (%rsi,%rax,8),%rdx
    0.00 :   48a92f:       mov    %r12,%rdi
    0.00 :   48a932:       callq  48a5e0 <void std::vector<long, std::allocator<long> >::_M_assign_aux<long const*>(long const*, long const*, std::forward_iterator_tag)>
    0.00 :   48a937:       jmpq   48a80d <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xed>
    0.00 :   48a93c:       nopl   0x0(%rax)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   48a940:       mov    0x20(%r13),%rax
    0.00 :   48a944:       mov    0x18(%r13),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a948:       mov    %rax,%r12
    0.00 :   48a94b:       sub    %rsi,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48a94e:       mov    %r12,%rdx
    0.00 :   48a951:       sar    $0x3,%rdx
    0.00 :   48a955:       je     48ac40 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x520>
         :            if (__n > this->max_size())
    0.00 :   48a95b:       movabs $0x1fffffffffffffff,%rax
    0.00 :   48a965:       cmp    %rax,%rdx
    0.00 :   48a968:       ja     48b3c1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xca1>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   48a96e:       mov    %r12,%rdi
    0.00 :   48a971:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   48a976:       mov    %rax,-0x258(%rbp)
    0.00 :   48a97d:       mov    0x20(%r13),%rax
    0.00 :   48a981:       mov    0x18(%r13),%rsi
    0.00 :   48a985:       mov    %rax,%r12
    0.00 :   48a988:       sub    %rsi,%r12
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   48a98b:       cmp    %rax,%rsi
    0.00 :   48a98e:       je     48a99f <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x27f>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   48a990:       mov    -0x258(%rbp),%rdi
    0.00 :   48a997:       mov    %r12,%rdx
    0.00 :   48a99a:       callq  53aa0 <memmove@plt>
    0.00 :   48a99f:       mov    0x30(%r13),%rax
    0.00 :   48a9a3:       cmpl   $0x1,0x8(%rax)
    0.00 :   48a9a7:       jne    48b13f <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xa1f>
    0.00 :   48a9ad:       mov    0x0(%r13),%rax
    0.00 :   48a9b1:       mov    %rax,-0x280(%rbp)
    0.00 :   48a9b8:       mov    0x50(%r13),%rax
    0.00 :   48a9bc:       mov    %rax,-0x288(%rbp)
    0.00 :   48a9c3:       test   %ebx,%ebx
    0.00 :   48a9c5:       jle    48ac10 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4f0>
    0.00 :   48a9cb:       mov    -0x210(%rbp),%rax
    0.00 :   48a9d2:       mov    (%rax),%rdx
    0.00 :   48a9d5:       movslq %edx,%rax
    0.00 :   48a9d8:       mov    %edx,%r14d
    0.00 :   48a9db:       cmp    %rdx,%rax
    0.00 :   48a9de:       jne    48abcb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4ab>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a9e4:       mov    %r12,%rax
    0.00 :   48a9e7:       xor    %r13d,%r13d
    0.00 :   48a9ea:       sar    $0x3,%rax
    0.00 :   48a9ee:       mov    %rax,-0x290(%rbp)
    0.00 :   48a9f5:       lea    -0x1(%rbx),%eax
    0.00 :   48a9f8:       xor    %ebx,%ebx
    0.00 :   48a9fa:       mov    %rax,-0x298(%rbp)
    0.00 :   48aa01:       nopl   0x0(%rax)
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   48aa08:       mov    -0x228(%rbp),%rax
    0.00 :   48aa0f:       mov    -0x258(%rbp),%rcx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   48aa16:       movq   $0x0,-0x1f0(%rbp)
    0.00 :   48aa21:       movq   $0x0,-0x1e8(%rbp)
    0.00 :   48aa2c:       mov    %rdx,(%rcx,%rax,8)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48aa30:       mov    -0x290(%rbp),%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   48aa37:       movq   $0x0,-0x1e0(%rbp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48aa42:       test   %rax,%rax
    0.00 :   48aa45:       je     48abd0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4b0>
         :            if (__n > this->max_size())
    0.00 :   48aa4b:       movabs $0x1fffffffffffffff,%rsi
    0.00 :   48aa55:       cmp    %rsi,%rax
    0.00 :   48aa58:       ja     48b110 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9f0>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   48aa5e:       mov    %r12,%rdi
    0.00 :   48aa61:       callq  53340 <operator new(unsigned long)@plt>
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48aa66:       lea    (%rax,%r12,1),%r15
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   48aa6a:       mov    %rax,-0x1f0(%rbp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   48aa71:       mov    %rax,-0x1e8(%rbp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48aa78:       mov    %r15,-0x1e0(%rbp)
         :            if (_Num)
    0.00 :   48aa7f:       test   %r12,%r12
    0.00 :   48aa82:       je     48aa96 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x376>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   48aa84:       mov    -0x258(%rbp),%rsi
    0.00 :   48aa8b:       mov    %r12,%rdx
    0.00 :   48aa8e:       mov    %rax,%rdi
    0.00 :   48aa91:       callq  53150 <memcpy@plt>
    0.00 :   48aa96:       mov    -0x278(%rbp),%rdx
    0.00 :   48aa9d:       mov    -0x270(%rbp),%rdi
    0.00 :   48aaa4:       mov    %ebx,%esi
         :            this->_M_impl._M_finish =
    0.00 :   48aaa6:       mov    %r15,-0x1e8(%rbp)
    0.00 :   48aaad:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48aab2:       mov    -0x1f0(%rbp),%rdi
    0.00 :   48aab9:       mov    %rax,-0x248(%rbp)
         :            if (__p)
    0.00 :   48aac0:       test   %rdi,%rdi
    0.00 :   48aac3:       je     48aaca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x3aa>
         :            ::operator delete(__p);
    0.00 :   48aac5:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48aaca:       mov    -0x248(%rbp),%rax
    0.00 :   48aad1:       mov    0x30(%rax),%rax
    0.00 :   48aad5:       cmpl   $0x1,0x8(%rax)
    0.00 :   48aad9:       jne    48ac50 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x530>
    0.00 :   48aadf:       mov    -0x22c(%rbp),%edx
    0.00 :   48aae5:       mov    -0x248(%rbp),%rax
    0.00 :   48aaec:       mov    -0x288(%rbp),%rcx
    0.00 :   48aaf3:       mov    -0x234(%rbp),%r8d
    0.00 :   48aafa:       imul   %r14d,%edx
    0.00 :   48aafe:       mov    0x50(%rax),%rdi
    0.00 :   48ab02:       add    (%rax),%rdi
    0.00 :   48ab05:       lea    (%rcx,%r13,4),%rsi
    0.00 :   48ab09:       movslq -0x230(%rbp),%rax
    0.00 :   48ab10:       mov    -0x280(%rbp),%rcx
    0.00 :   48ab17:       mov    %rdi,%r10
    0.00 :   48ab1a:       lea    (%rcx,%rsi,1),%r15
    0.00 :   48ab1e:       cmp    %eax,%edx
    0.00 :   48ab20:       je     48abe0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4c0>
    0.00 :   48ab26:       test   %r8d,%r8d
    0.00 :   48ab29:       jle    48ab9e <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x47e>
    0.00 :   48ab2b:       shl    $0x2,%rax
    0.00 :   48ab2f:       movslq %edx,%rcx
    0.00 :   48ab32:       mov    %r8d,-0x24c(%rbp)
    0.00 :   48ab39:       shl    $0x2,%rcx
    0.00 :   48ab3d:       mov    %rax,-0x248(%rbp)
    0.00 :   48ab44:       xor    %eax,%eax
    0.00 :   48ab46:       mov    %rbx,-0x260(%rbp)
    0.00 :   48ab4d:       mov    %eax,%ebx
    0.00 :   48ab4f:       mov    %r12,-0x268(%rbp)
    0.00 :   48ab56:       mov    %rcx,%r12
    0.00 :   48ab59:       nopl   0x0(%rax)
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  100.00 :   48ab60:       mov    %r15,%rsi
    0.00 :   48ab63:       mov    %r10,%rdi
    0.00 :   48ab66:       mov    %r12,%rdx
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48ab69:       add    $0x1,%ebx
         :            memcpy():
    0.00 :   48ab6c:       callq  53150 <memcpy@plt>
    0.00 :   48ab71:       add    -0x248(%rbp),%r15
    0.00 :   48ab78:       mov    %rax,%r10
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48ab7b:       add    %r12,%r10
    0.00 :   48ab7e:       cmp    %ebx,-0x24c(%rbp)
    0.00 :   48ab84:       jne    48ab60 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x440>
    0.00 :   48ab86:       mov    -0x22c(%rbp),%edx
    0.00 :   48ab8c:       mov    -0x260(%rbp),%rbx
    0.00 :   48ab93:       mov    -0x268(%rbp),%r12
    0.00 :   48ab9a:       imul   %r14d,%edx
    0.00 :   48ab9e:       movslq %edx,%rdx
    0.00 :   48aba1:       add    %rdx,%r13
    0.00 :   48aba4:       cmp    -0x298(%rbp),%rbx
    0.00 :   48abab:       je     48ac10 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4f0>
    0.00 :   48abad:       mov    -0x210(%rbp),%rax
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   48abb4:       add    $0x1,%rbx
    0.00 :   48abb8:       mov    (%rax,%rbx,8),%rax
    0.00 :   48abbc:       movslq %eax,%rdx
    0.00 :   48abbf:       mov    %eax,%r14d
    0.00 :   48abc2:       cmp    %rdx,%rax
    0.00 :   48abc5:       je     48aa08 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x2e8>
    0.00 :   48abcb:       callq  52a50 <std::terminate()@plt>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48abd0:       xor    %eax,%eax
    0.00 :   48abd2:       jmpq   48aa66 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x346>
    0.00 :   48abd7:       nopw   0x0(%rax,%rax,1)
    0.00 :   48abe0:       imul   %r8d,%edx
         :            memcpy():
    0.00 :   48abe4:       mov    %r15,%rsi
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48abe7:       movslq %edx,%rdx
    0.00 :   48abea:       shl    $0x2,%rdx
         :            memcpy():
    0.00 :   48abee:       callq  53150 <memcpy@plt>
    0.00 :   48abf3:       mov    -0x22c(%rbp),%edx
    0.00 :   48abf9:       imul   %r14d,%edx
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48abfd:       movslq %edx,%rdx
    0.00 :   48ac00:       add    %rdx,%r13
    0.00 :   48ac03:       cmp    -0x298(%rbp),%rbx
    0.00 :   48ac0a:       jne    48abad <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x48d>
    0.00 :   48ac0c:       nopl   0x0(%rax)
    0.00 :   48ac10:       mov    -0x2a0(%rbp),%rax
         :            if (__p)
    0.00 :   48ac17:       cmpq   $0x0,-0x258(%rbp)
    0.00 :   48ac1f:       movq   $0x0,(%rax)
    0.00 :   48ac26:       je     48a8a1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x181>
    0.00 :   48ac2c:       mov    -0x258(%rbp),%rdi
    0.00 :   48ac33:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48ac38:       jmpq   48a8a1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x181>
    0.00 :   48ac3d:       nopl   (%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48ac40:       movq   $0x0,-0x258(%rbp)
    0.00 :   48ac4b:       jmpq   48a98b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x26b>
    0.00 :   48ac50:       mov    $0xa0,%edi
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   48ac55:       lea    -0x1b0(%rbp),%rbx
    0.00 :   48ac5c:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   48ac61:       lea    0x70(%rbx),%rdi
    0.00 :   48ac65:       mov    %rax,%r15
    0.00 :   48ac68:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   48ac6d:       mov    0x79ceb4(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   48ac74:       xor    %esi,%esi
    0.00 :   48ac76:       movq   $0x0,-0x68(%rbp)
    0.00 :   48ac7e:       movq   $0x0,-0x58(%rbp)
    0.00 :   48ac86:       add    $0x10,%rax
    0.00 :   48ac8a:       movq   $0x0,-0x50(%rbp)
    0.00 :   48ac92:       mov    %rax,-0x140(%rbp)
    0.00 :   48ac99:       xor    %eax,%eax
    0.00 :   48ac9b:       mov    %ax,-0x60(%rbp)
    0.00 :   48ac9f:       mov    0x79d0fa(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   48aca6:       movq   $0x0,-0x48(%rbp)
    0.00 :   48acae:       mov    0x8(%rax),%r12
    0.00 :   48acb2:       mov    0x10(%rax),%r13
    0.00 :   48acb6:       movq   $0x0,-0x40(%rbp)
    0.00 :   48acbe:       mov    -0x18(%r12),%rdi
    0.00 :   48acc3:       mov    %r12,-0x1b0(%rbp)
    0.00 :   48acca:       add    %rbx,%rdi
    0.00 :   48accd:       mov    %r13,(%rdi)
    0.00 :   48acd0:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   48acd5:       mov    0x79d084(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   48acdc:       lea    0x40(%rbx),%rdi
    0.00 :   48ace0:       movq   $0x0,-0x1a0(%rbp)
    0.00 :   48aceb:       movq   $0x0,-0x198(%rbp)
    0.00 :   48acf6:       movq   $0x0,-0x190(%rbp)
    0.00 :   48ad01:       add    $0x18,%rax
    0.00 :   48ad05:       mov    %rax,-0x1b0(%rbp)
    0.00 :   48ad0c:       mov    0x79d04d(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   48ad13:       movq   $0x0,-0x188(%rbp)
    0.00 :   48ad1e:       movq   $0x0,-0x180(%rbp)
    0.00 :   48ad29:       add    $0x40,%rax
    0.00 :   48ad2d:       mov    %rax,-0x140(%rbp)
    0.00 :   48ad34:       mov    0x79cf25(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   48ad3b:       movq   $0x0,-0x178(%rbp)
    0.00 :   48ad46:       add    $0x10,%rax
    0.00 :   48ad4a:       mov    %rax,-0x1a8(%rbp)
    0.00 :   48ad51:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   48ad56:       mov    0x79d27b(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   48ad5d:       lea    0x8(%rbx),%rsi
    0.00 :   48ad61:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   48ad65:       movl   $0x10,-0x168(%rbp)
    0.00 :   48ad6f:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   48ad73:       movb   $0x0,-0x150(%rbp)
    0.00 :   48ad7a:       mov    %rax,-0x1a8(%rbp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   48ad81:       lea    0x60(%rbx),%rax
    0.00 :   48ad85:       mov    %rax,-0x160(%rbp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   48ad8c:       movq   $0x0,-0x158(%rbp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   48ad97:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   48ad9c:       mov    $0x16,%edx
    0.00 :   48ada1:       lea    0x39aa49(%rip),%rsi        # 8257f1 <_fini+0x559>
    0.00 :   48ada8:       mov    %rbx,%rdi
    0.00 :   48adab:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   48adb0:       mov    $0x2,%edx
    0.00 :   48adb5:       mov    %rbx,%rdi
    0.00 :   48adb8:       lea    0x39aa49(%rip),%rsi        # 825808 <_fini+0x570>
    0.00 :   48adbf:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   48adc4:       mov    $0x2,%edx
    0.00 :   48adc9:       mov    %rbx,%rdi
    0.00 :   48adcc:       lea    0x39aa38(%rip),%rsi        # 82580b <_fini+0x573>
    0.00 :   48add3:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   48add8:       mov    -0x248(%rbp),%rax
    0.00 :   48addf:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48ade2:       lea    -0x1d0(%rbp),%r14
    0.00 :   48ade9:       mov    0x30(%rax),%rsi
    0.00 :   48aded:       callq  59ce30 <onnxruntime::operator<<(std::ostream&, onnxruntime::DataTypeImpl const*)>
    0.00 :   48adf2:       lea    0x10(%r14),%rax
    0.00 :   48adf6:       movb   $0x0,-0x1c0(%rbp)
    0.00 :   48adfd:       mov    %rax,-0x1d0(%rbp)
         :            if (this->pptr())
    0.00 :   48ae04:       mov    -0x180(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   48ae0b:       movq   $0x0,-0x1c8(%rbp)
    0.00 :   48ae16:       test   %rax,%rax
    0.00 :   48ae19:       je     48b129 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xa09>
         :            if (this->pptr() > this->egptr())
    0.00 :   48ae1f:       mov    -0x190(%rbp),%r8
    0.00 :   48ae26:       mov    -0x188(%rbp),%rcx
    0.00 :   48ae2d:       cmp    %r8,%rax
    0.00 :   48ae30:       jbe    48b115 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9f5>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   48ae36:       sub    %rcx,%rax
    0.00 :   48ae39:       xor    %edx,%edx
    0.00 :   48ae3b:       xor    %esi,%esi
    0.00 :   48ae3d:       mov    %r14,%rdi
    0.00 :   48ae40:       mov    %rax,%r8
    0.00 :   48ae43:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   48ae48:       mov    0x79cf11(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48ae4f:       mov    -0x160(%rbp),%rdi
    0.00 :   48ae56:       add    $0x18,%rax
    0.00 :   48ae5a:       mov    %rax,-0x1b0(%rbp)
    0.00 :   48ae61:       mov    0x79cef8(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   48ae68:       add    $0x40,%rax
    0.00 :   48ae6c:       mov    %rax,-0x140(%rbp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   48ae73:       mov    0x79d15e(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   48ae7a:       add    $0x10,%rax
    0.00 :   48ae7e:       mov    %rax,-0x1a8(%rbp)
         :            if (!_M_is_local())
    0.00 :   48ae85:       lea    0x60(%rbx),%rax
    0.00 :   48ae89:       cmp    %rax,%rdi
    0.00 :   48ae8c:       je     48ae93 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x773>
         :            ::operator delete(__p);
    0.00 :   48ae8e:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   48ae93:       mov    0x79cdc6(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   48ae9a:       lea    0x40(%rbx),%rdi
    0.00 :   48ae9e:       add    $0x10,%rax
    0.00 :   48aea2:       mov    %rax,-0x1a8(%rbp)
    0.00 :   48aea9:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   48aeae:       mov    -0x18(%r12),%rax
    0.00 :   48aeb3:       mov    %r12,-0x1b0(%rbp)
         :            ~basic_ios() { }
    0.00 :   48aeba:       lea    0x70(%rbx),%rdi
    0.00 :   48aebe:       mov    %r13,-0x1b0(%rbp,%rax,1)
    0.00 :   48aec6:       mov    0x79cc5b(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   48aecd:       add    $0x10,%rax
    0.00 :   48aed1:       mov    %rax,-0x140(%rbp)
    0.00 :   48aed8:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   48aedd:       mov    -0x278(%rbp),%rdi
    0.00 :   48aee4:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48aee9:       lea    0x39a95d(%rip),%rdx        # 82584d <_fini+0x5b5>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48aef0:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48aef4:       mov    %rbx,%rdi
    0.00 :   48aef7:       lea    -0x3d(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48aefb:       mov    %rax,-0x1b0(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48af02:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   48af07:       lea    0x3ee728(%rip),%rdx        # 879636 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__+0x36>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48af0e:       lea    0x38(%rbx),%rax
    0.00 :   48af12:       movl   $0x83,-0x190(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48af1c:       lea    0x28(%rbx),%rdi
    0.00 :   48af20:       lea    -0x36(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48af24:       mov    %rax,-0x188(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48af2b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48af30:       mov    -0x1e8(%rbp),%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   48af37:       movq   $0x0,-0x168(%rbp)
    0.00 :   48af42:       movq   $0x0,-0x160(%rbp)
    0.00 :   48af4d:       movq   $0x0,-0x158(%rbp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48af58:       mov    %r13,%rax
    0.00 :   48af5b:       sub    -0x1f0(%rbp),%rax
    0.00 :   48af62:       mov    %rax,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48af65:       sar    $0x5,%rax
    0.00 :   48af69:       mov    %rax,%rdx
    0.00 :   48af6c:       je     48af97 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x877>
         :            if (__n > this->max_size())
    0.00 :   48af6e:       movabs $0x7ffffffffffffff,%rax
    0.00 :   48af78:       cmp    %rax,%rdx
    0.00 :   48af7b:       ja     48b3d9 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcb9>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   48af81:       mov    %r12,%rdi
    0.00 :   48af84:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   48af89:       mov    %rax,-0x2a8(%rbp)
    0.00 :   48af90:       mov    -0x1e8(%rbp),%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   48af97:       mov    -0x2a8(%rbp),%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48af9e:       mov    %r12,%rcx
         :            std::__uninitialized_copy_a(__x.begin(), __x.end(),
    0.00 :   48afa1:       mov    -0x1f0(%rbp),%r12
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48afa8:       add    %rax,%rcx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   48afab:       mov    %rax,-0x168(%rbp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   48afb2:       mov    %rax,-0x160(%rbp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48afb9:       mov    %rcx,-0x158(%rbp)
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   48afc0:       cmp    %r12,%r13
    0.00 :   48afc3:       je     48b3c6 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xca6>
         :            _ForwardIterator __cur = __result;
    0.00 :   48afc9:       mov    %rax,-0x248(%rbp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   48afd0:       mov    -0x248(%rbp),%rcx
    0.00 :   48afd7:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48afdb:       mov    %rcx,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   48afde:       mov    %rax,(%rcx)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   48afe1:       mov    (%r12),%rsi
    0.00 :   48afe5:       mov    0x8(%r12),%rdx
    0.00 :   48afea:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48afed:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   48aff2:       add    $0x20,%r12
    0.00 :   48aff6:       addq   $0x20,-0x248(%rbp)
    0.00 :   48affe:       cmp    %r12,%r13
    0.00 :   48b001:       jne    48afd0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x8b0>
         :            this->_M_impl._M_finish =
    0.00 :   48b003:       mov    -0x248(%rbp),%rax
    0.00 :   48b00a:       mov    %r14,%rcx
    0.00 :   48b00d:       mov    %rbx,%rsi
    0.00 :   48b010:       mov    %r15,%rdi
    0.00 :   48b013:       lea    0x39a836(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   48b01a:       mov    %rax,-0x160(%rbp)
    0.00 :   48b021:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48b026:       mov    -0x168(%rbp),%rax
    0.00 :   48b02d:       mov    -0x160(%rbp),%r12
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   48b034:       mov    %rax,%r13
    0.00 :   48b037:       cmp    %rax,%r12
    0.00 :   48b03a:       je     48b060 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x940>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b03c:       mov    %r13,%rax
    0.00 :   48b03f:       mov    0x0(%r13),%rdi
         :            if (!_M_is_local())
    0.00 :   48b043:       add    $0x10,%rax
    0.00 :   48b047:       cmp    %rax,%rdi
    0.00 :   48b04a:       je     48b051 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x931>
         :            ::operator delete(__p);
    0.00 :   48b04c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b051:       mov    %r13,%rax
    0.00 :   48b054:       add    $0x20,%rax
    0.00 :   48b058:       mov    %rax,%r13
    0.00 :   48b05b:       cmp    %rax,%r12
    0.00 :   48b05e:       jne    48b03c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x91c>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   48b060:       mov    -0x168(%rbp),%rdi
         :            if (__p)
    0.00 :   48b067:       test   %rdi,%rdi
    0.00 :   48b06a:       je     48b071 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x951>
    0.00 :   48b06c:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b071:       mov    -0x188(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b078:       lea    0x38(%rbx),%rax
    0.00 :   48b07c:       cmp    %rax,%rdi
    0.00 :   48b07f:       je     48b086 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x966>
    0.00 :   48b081:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b086:       mov    -0x1b0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b08d:       add    $0x10,%rbx
    0.00 :   48b091:       cmp    %rbx,%rdi
    0.00 :   48b094:       je     48b09b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x97b>
    0.00 :   48b096:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48b09b:       mov    -0x1e8(%rbp),%rax
    0.00 :   48b0a2:       mov    -0x1f0(%rbp),%rbx
    0.00 :   48b0a9:       mov    %rax,%r13
    0.00 :   48b0ac:       cmp    %rbx,%rax
    0.00 :   48b0af:       je     48b0cb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9ab>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b0b1:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   48b0b4:       lea    0x10(%rbx),%rax
    0.00 :   48b0b8:       cmp    %rax,%rdi
    0.00 :   48b0bb:       je     48b0c2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9a2>
    0.00 :   48b0bd:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b0c2:       add    $0x20,%rbx
    0.00 :   48b0c6:       cmp    %rbx,%r13
    0.00 :   48b0c9:       jne    48b0b1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x991>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   48b0cb:       mov    -0x1f0(%rbp),%rdi
         :            if (__p)
    0.00 :   48b0d2:       test   %rdi,%rdi
    0.00 :   48b0d5:       je     48b0dc <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9bc>
    0.00 :   48b0d7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b0dc:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b0e3:       add    $0x10,%r14
    0.00 :   48b0e7:       cmp    %r14,%rdi
    0.00 :   48b0ea:       je     48b0f1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9d1>
    0.00 :   48b0ec:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b0f1:       lea    -0x3919d8(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   48b0f8:       lea    0x786531(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   48b0ff:       mov    %r15,%rdi
    0.00 :   48b102:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   48b107:       nopw   0x0(%rax,%rax,1)
         :            std::__throw_bad_alloc();
    0.00 :   48b110:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   48b115:       sub    %rcx,%r8
    0.00 :   48b118:       xor    %edx,%edx
    0.00 :   48b11a:       xor    %esi,%esi
    0.00 :   48b11c:       mov    %r14,%rdi
    0.00 :   48b11f:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   48b124:       jmpq   48ae48 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x728>
         :            this->_M_assign(__str);
    0.00 :   48b129:       lea    0x50(%rbx),%rsi
    0.00 :   48b12d:       mov    %r14,%rdi
    0.00 :   48b130:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   48b135:       jmpq   48ae48 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x728>
    0.00 :   48b13a:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   48b13f:       mov    $0xa0,%edi
    0.00 :   48b144:       lea    -0x1d0(%rbp),%r14
    0.00 :   48b14b:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   48b150:       mov    -0x278(%rbp),%r15
    0.00 :   48b157:       mov    %r14,%rdi
    0.00 :   48b15a:       lea    -0x220(%rbp),%rcx
    0.00 :   48b161:       mov    %rax,-0x248(%rbp)
    0.00 :   48b168:       mov    %rax,%r12
    0.00 :   48b16b:       lea    0x39a699(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   48b172:       lea    0x30(%r13),%r8
    0.00 :   48b176:       mov    %rax,-0x220(%rbp)
    0.00 :   48b17d:       lea    0x39a684(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   48b184:       lea    -0x218(%rbp),%rdx
    0.00 :   48b18b:       mov    %r15,%rsi
    0.00 :   48b18e:       mov    %rax,-0x218(%rbp)
    0.00 :   48b195:       lea    0x39a655(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   48b19c:       mov    %rax,-0x1f0(%rbp)
    0.00 :   48b1a3:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   48b1a8:       mov    %r15,%rdi
    0.00 :   48b1ab:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   48b1b0:       lea    -0x1b0(%rbp),%rbx
    0.00 :   48b1b7:       mov    %r15,%r8
    0.00 :   48b1ba:       lea    0x3ee47f(%rip),%rcx        # 879640 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   48b1c1:       mov    $0x97,%edx
    0.00 :   48b1c6:       lea    0x39a643(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   48b1cd:       mov    %rbx,%rdi
    0.00 :   48b1d0:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   48b1d5:       mov    %r14,%rcx
    0.00 :   48b1d8:       lea    0x39a671(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   48b1df:       mov    %rbx,%rsi
    0.00 :   48b1e2:       mov    %r12,%rdi
    0.00 :   48b1e5:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   48b1ea:       mov    %rbx,%rdi
         :            if (!_M_is_local())
    0.00 :   48b1ed:       add    $0x10,%r14
    0.00 :   48b1f1:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b1f6:       mov    %r15,%rdi
    0.00 :   48b1f9:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b1fe:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b205:       cmp    %r14,%rdi
    0.00 :   48b208:       je     48b20f <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xaef>
         :            ::operator delete(__p);
    0.00 :   48b20a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b20f:       lea    -0x391af6(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   48b216:       lea    0x786413(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   48b21d:       mov    -0x248(%rbp),%rdi
    0.00 :   48b224:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   48b229:       mov    $0xa0,%edi
    0.00 :   48b22e:       lea    -0x1d0(%rbp),%r14
    0.00 :   48b235:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   48b23a:       lea    0x3eddbf(%rip),%rsi        # 879000 <typeinfo name for onnxruntime::DepthToSpace<float>+0x240>
    0.00 :   48b241:       mov    %r14,%rdi
    0.00 :   48b244:       mov    %rax,%r13
    0.00 :   48b247:       callq  488f70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.122]>
    0.00 :   48b24c:       lea    -0x1f0(%rbp),%rcx
    0.00 :   48b253:       mov    %rcx,%rdi
    0.00 :   48b256:       mov    %rcx,%r15
    0.00 :   48b259:       mov    %rcx,-0x278(%rbp)
    0.00 :   48b260:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   48b265:       lea    -0x1b0(%rbp),%rbx
    0.00 :   48b26c:       mov    %r15,%r8
    0.00 :   48b26f:       lea    0x3ee46a(%rip),%rcx        # 8796e0 <onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const::__PRETTY_FUNCTION__>
    0.00 :   48b276:       mov    $0x91,%edx
    0.00 :   48b27b:       lea    0x3eddae(%rip),%rsi        # 879030 <typeinfo name for onnxruntime::DepthToSpace<float>+0x270>
    0.00 :   48b282:       mov    %rbx,%rdi
    0.00 :   48b285:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   48b28a:       mov    %r14,%rcx
    0.00 :   48b28d:       lea    0x3edde4(%rip),%rdx        # 879078 <typeinfo name for onnxruntime::DepthToSpace<float>+0x2b8>
    0.00 :   48b294:       mov    %rbx,%rsi
    0.00 :   48b297:       mov    %r13,%rdi
    0.00 :   48b29a:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   48b29f:       mov    %rbx,%rdi
    0.00 :   48b2a2:       add    $0x10,%r14
    0.00 :   48b2a6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b2ab:       mov    %r15,%rdi
    0.00 :   48b2ae:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b2b3:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b2ba:       cmp    %r14,%rdi
    0.00 :   48b2bd:       je     48b2c4 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xba4>
    0.00 :   48b2bf:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b2c4:       lea    -0x391bab(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   48b2cb:       lea    0x78635e(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   48b2d2:       mov    %r13,%rdi
    0.00 :   48b2d5:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   48b2da:       mov    $0xa0,%edi
    0.00 :   48b2df:       lea    -0x1d0(%rbp),%r14
    0.00 :   48b2e6:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   48b2eb:       lea    -0x1f0(%rbp),%rsi
    0.00 :   48b2f2:       mov    %r14,%rdi
    0.00 :   48b2f5:       lea    -0x220(%rbp),%rcx
    0.00 :   48b2fc:       mov    %rax,%r13
    0.00 :   48b2ff:       lea    0x39a505(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   48b306:       mov    %rsi,%r15
    0.00 :   48b309:       mov    %rsi,-0x278(%rbp)
    0.00 :   48b310:       mov    %rax,-0x220(%rbp)
    0.00 :   48b317:       lea    0x39a4ea(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   48b31e:       lea    0x30(%r12),%r8
    0.00 :   48b323:       mov    %rax,-0x218(%rbp)
    0.00 :   48b32a:       lea    -0x218(%rbp),%rdx
    0.00 :   48b331:       lea    0x39a4b9(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   48b338:       mov    %rax,-0x1f0(%rbp)
    0.00 :   48b33f:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   48b344:       mov    %r15,%rdi
    0.00 :   48b347:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   48b34c:       lea    -0x1b0(%rbp),%rbx
    0.00 :   48b353:       mov    %r15,%r8
    0.00 :   48b356:       lea    0x3ee323(%rip),%rcx        # 879680 <onnxruntime::Tensor::Data<long>() const::__PRETTY_FUNCTION__>
    0.00 :   48b35d:       mov    $0x97,%edx
    0.00 :   48b362:       lea    0x39a4a7(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   48b369:       mov    %rbx,%rdi
    0.00 :   48b36c:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   48b371:       mov    %r14,%rcx
    0.00 :   48b374:       lea    0x39a4d5(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   48b37b:       mov    %rbx,%rsi
    0.00 :   48b37e:       mov    %r13,%rdi
    0.00 :   48b381:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   48b386:       mov    %rbx,%rdi
    0.00 :   48b389:       add    $0x10,%r14
    0.00 :   48b38d:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b392:       mov    %r15,%rdi
    0.00 :   48b395:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b39a:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b3a1:       cmp    %r14,%rdi
    0.00 :   48b3a4:       je     48b3ab <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xc8b>
    0.00 :   48b3a6:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b3ab:       lea    -0x391c92(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   48b3b2:       lea    0x786277(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   48b3b9:       mov    %r13,%rdi
    0.00 :   48b3bc:       callq  53bc0 <__cxa_throw@plt>
         :            std::__throw_bad_alloc();
    0.00 :   48b3c1:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            _ForwardIterator __cur = __result;
    0.00 :   48b3c6:       mov    -0x2a8(%rbp),%rax
    0.00 :   48b3cd:       mov    %rax,-0x248(%rbp)
    0.00 :   48b3d4:       jmpq   48b003 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x8e3>
    0.00 :   48b3d9:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   48b3de:       mov    %rax,%r13
    0.00 :   48b3e1:       jmp    48b406 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xce6>
    0.00 :   48b3e3:       mov    %rax,%rbx
    0.00 :   48b3e6:       jmpq   48b4b2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd92>
    0.00 :   48b3eb:       jmpq   48b474 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd54>
         :            std::_Construct(std::__addressof(*__cur), *__first);
         :            return __cur;
         :            }
         :            __catch(...)
    0.00 :   48b3f0:       callq  53ad0 <__cxa_end_catch@plt>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   48b3f5:       mov    -0x168(%rbp),%rdi
         :            if (__p)
    0.00 :   48b3fc:       test   %rdi,%rdi
    0.00 :   48b3ff:       je     48b406 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xce6>
         :            ::operator delete(__p);
    0.00 :   48b401:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b406:       mov    -0x188(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b40d:       lea    0x38(%rbx),%rax
    0.00 :   48b411:       cmp    %rax,%rdi
    0.00 :   48b414:       je     48b41b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcfb>
    0.00 :   48b416:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b41b:       mov    -0x1b0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b422:       add    $0x10,%rbx
    0.00 :   48b426:       cmp    %rbx,%rdi
    0.00 :   48b429:       je     48b430 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd10>
    0.00 :   48b42b:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b430:       mov    %r13,%rbx
    0.00 :   48b433:       mov    -0x278(%rbp),%rdi
    0.00 :   48b43a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b43f:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b446:       add    $0x10,%r14
    0.00 :   48b44a:       cmp    %r14,%rdi
    0.00 :   48b44d:       je     48b454 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd34>
         :            ::operator delete(__p);
    0.00 :   48b44f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b454:       mov    %r15,%rdi
    0.00 :   48b457:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   48b45c:       cmpq   $0x0,-0x258(%rbp)
    0.00 :   48b464:       je     48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
    0.00 :   48b466:       mov    -0x258(%rbp),%rdi
    0.00 :   48b46d:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b472:       jmp    48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
    0.00 :   48b474:       mov    %rax,%rdi
    0.00 :   48b477:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   48b47c:       mov    -0x248(%rbp),%rax
    0.00 :   48b483:       mov    -0x2a8(%rbp),%r12
    0.00 :   48b48a:       mov    %rax,%r13
    0.00 :   48b48d:       cmp    %r13,%r12
    0.00 :   48b490:       jne    48b535 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe15>
         :            {
         :            std::_Destroy(__result, __cur);
         :            __throw_exception_again;
    0.00 :   48b496:       callq  53870 <__cxa_rethrow@plt>
    0.00 :   48b49b:       mov    %rbx,%rdi
    0.00 :   48b49e:       mov    %r12,%rbx
    0.00 :   48b4a1:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b4a6:       mov    -0x278(%rbp),%rdi
    0.00 :   48b4ad:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b4b2:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b4b9:       add    $0x10,%r14
    0.00 :   48b4bd:       cmp    %r14,%rdi
    0.00 :   48b4c0:       jne    48b4e3 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdc3>
    0.00 :   48b4c2:       mov    %r13,%rdi
    0.00 :   48b4c5:       callq  52fe0 <__cxa_free_exception@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48b4ca:       mov    -0x210(%rbp),%rdi
         :            if (__p)
    0.00 :   48b4d1:       test   %rdi,%rdi
    0.00 :   48b4d4:       je     48b4db <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdbb>
         :            ::operator delete(__p);
    0.00 :   48b4d6:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b4db:       mov    %rbx,%rdi
    0.00 :   48b4de:       callq  53c30 <_Unwind_Resume@plt>
         :            ::operator delete(__p);
    0.00 :   48b4e3:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b4e8:       jmp    48b4c2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xda2>
    0.00 :   48b4ea:       jmp    48b4ee <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdce>
    0.00 :   48b4ec:       jmp    48b50b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdeb>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   48b4ee:       lea    0x8(%rbx),%rdi
    0.00 :   48b4f2:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   48b4f7:       mov    -0x18(%r12),%rax
    0.00 :   48b4fc:       mov    %r12,-0x1b0(%rbp)
    0.00 :   48b503:       mov    %r13,-0x1b0(%rbp,%rax,1)
    0.00 :   48b50b:       mov    0x79c616(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   48b512:       lea    0x70(%rbx),%rdi
    0.00 :   48b516:       add    $0x10,%rax
    0.00 :   48b51a:       mov    %rax,-0x140(%rbp)
    0.00 :   48b521:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   48b526:       jmpq   48abcb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4ab>
    0.00 :   48b52b:       mov    %rax,%rbx
    0.00 :   48b52e:       jmp    48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
    0.00 :   48b530:       mov    %rax,%rbx
    0.00 :   48b533:       jmp    48b559 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe39>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b535:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   48b539:       lea    0x10(%r12),%rax
    0.00 :   48b53e:       cmp    %rax,%rdi
    0.00 :   48b541:       je     48b548 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe28>
         :            ::operator delete(__p);
    0.00 :   48b543:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b548:       add    $0x20,%r12
    0.00 :   48b54c:       jmpq   48b48d <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd6d>
    0.00 :   48b551:       mov    %rax,%r13
    0.00 :   48b554:       jmpq   48b3f0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcd0>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48b559:       mov    -0x1f0(%rbp),%rdi
         :            if (__p)
    0.00 :   48b560:       test   %rdi,%rdi
    0.00 :   48b563:       je     48b45c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd3c>
    0.00 :   48b569:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b56e:       jmpq   48b45c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd3c>
    0.00 :   48b573:       mov    %rax,%r12
    0.00 :   48b576:       jmpq   48b49b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd7b>
    0.00 :   48b57b:       mov    %rax,%rbx
    0.00 :   48b57e:       jmpq   48b4a6 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd86>
    0.00 :   48b583:       mov    %rax,%r12
    0.00 :   48b586:       jmp    48b590 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe70>
    0.00 :   48b588:       mov    %rax,%rbx
    0.00 :   48b58b:       jmpq   48b45c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd3c>
    0.00 :   48b590:       mov    %rbx,%rdi
    0.00 :   48b593:       mov    %r12,%rbx
    0.00 :   48b596:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b59b:       mov    -0x278(%rbp),%rdi
    0.00 :   48b5a2:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b5a7:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b5ae:       add    $0x10,%r14
    0.00 :   48b5b2:       cmp    %r14,%rdi
    0.00 :   48b5b5:       je     48b5bc <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe9c>
         :            ::operator delete(__p);
    0.00 :   48b5b7:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b5bc:       mov    -0x248(%rbp),%rdi
    0.00 :   48b5c3:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   48b5c8:       jmpq   48b45c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd3c>
    0.00 :   48b5cd:       mov    %rax,%r13
    0.00 :   48b5d0:       jmpq   48b41b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcfb>
    0.00 :   48b5d5:       mov    %rax,%rbx
    0.00 :   48b5d8:       jmpq   48b43f <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd1f>
    0.00 :   48b5dd:       jmp    48b5e7 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xec7>
    0.00 :   48b5df:       mov    %rax,%rbx
    0.00 :   48b5e2:       jmpq   48b433 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd13>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b5e7:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b5ee:       add    $0x10,%r14
    0.00 :   48b5f2:       cmp    %r14,%rdi
    0.00 :   48b5f5:       je     48abcb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4ab>
    0.00 :   48b5fb:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b600:       jmpq   48abcb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4ab>
    0.00 :   48b605:       jmpq   48b573 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe53>
    0.00 :   48b60a:       jmpq   48b57b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe5b>
    0.00 :   48b60f:       jmpq   48b3e3 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcc3>
    0.00 :   48b614:       mov    %rax,%rbx
    0.00 :   48b617:       jmpq   48b4c2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xda2>
    0.00 :   48b61c:       mov    %rax,%rbx
    0.00 :   48b61f:       jmpq   48b59b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe7b>
    0.00 :   48b624:       mov    %rax,%rbx
    0.00 :   48b627:       jmpq   48b5a7 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe87>
    0.00 :   48b62c:       mov    %rax,%r13
    0.00 :   48b62f:       jmp    48b636 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xf16>
    0.00 :   48b631:       mov    %rax,%rbx
    0.00 :   48b634:       jmp    48b643 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xf23>
    0.00 :   48b636:       mov    %rbx,%rdi
    0.00 :   48b639:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b63e:       jmpq   48b430 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd10>
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   48b643:       mov    -0x1f0(%rbp),%rdi
    0.00 :   48b64a:       test   %rdi,%rdi
    0.00 :   48b64d:       je     48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
         :            get_deleter()(__ptr);
    0.00 :   48b653:       callq  98f38 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.119]>
    0.00 :   48b658:       jmpq   48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000461340 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime7Reshape7ComputeEPNS_15OpKernelContextE():
   27.38 :   461340:       push   %r15
    0.00 :   461342:       mov    $0x1,%esi
    0.00 :   461347:       push   %r14
    0.00 :   461349:       push   %r13
    0.00 :   46134b:       push   %r12
    0.00 :   46134d:       mov    %rdi,%r12
    0.00 :   461350:       mov    %rdx,%rdi
    0.00 :   461353:       push   %rbp
    0.00 :   461354:       mov    %rdx,%rbp
    0.00 :   461357:       push   %rbx
    0.00 :   461358:       sub    $0x1f8,%rsp
    0.00 :   46135f:       mov    %fs:0x28,%rax
    0.00 :   461368:       mov    %rax,0x1e8(%rsp)
    0.00 :   461370:       xor    %eax,%eax
    0.00 :   461372:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   461377:       mov    0x18(%rax),%rdx
   72.62 :   46137b:       mov    %rax,%r13
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   46137e:       mov    0x20(%rax),%rax
    0.00 :   461382:       sub    %rdx,%rax
    0.00 :   461385:       cmp    $0x8,%rax
    0.00 :   461389:       jne    4616ed <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x3ad>
    0.00 :   46138f:       mov    0x30(%r13),%rax
    0.00 :   461393:       mov    (%rdx),%rbx
    0.00 :   461396:       cmpl   $0x7,0x8(%rax)
    0.00 :   46139a:       jne    461603 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x2c3>
    0.00 :   4613a0:       shl    $0x3,%rbx
    0.00 :   4613a4:       mov    0x0(%r13),%r14
    0.00 :   4613a8:       mov    0x50(%r13),%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4613ac:       movq   $0x0,0x10(%rsp)
    0.00 :   4613b5:       movq   $0x0,0x18(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4613be:       mov    %rbx,%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4613c1:       movq   $0x0,0x20(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4613ca:       sar    $0x3,%rax
    0.00 :   4613ce:       je     461590 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x250>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   4613d4:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   4613de:       cmp    %rdx,%rax
    0.00 :   4613e1:       ja     46176f <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x42f>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4613e7:       mov    %rbx,%rdi
    0.00 :   4613ea:       callq  53340 <operator new(unsigned long)@plt>
         :            _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
         :            std::forward_iterator_tag)
         :            {
         :            const size_type __n = std::distance(__first, __last);
         :            this->_M_impl._M_start = this->_M_allocate(__n);
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4613ef:       lea    (%rax,%rbx,1),%r15
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4613f3:       mov    %rax,0x10(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4613f8:       mov    %r15,0x20(%rsp)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   4613fd:       test   %rbx,%rbx
    0.00 :   461400:       je     461411 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0xd1>
    0.00 :   461402:       lea    (%r14,%r13,1),%rsi
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   461406:       mov    %rbx,%rdx
    0.00 :   461409:       mov    %rax,%rdi
    0.00 :   46140c:       callq  53aa0 <memmove@plt>
    0.00 :   461411:       xor    %esi,%esi
    0.00 :   461413:       mov    %rbp,%rdi
         :            this->_M_impl._M_finish =
    0.00 :   461416:       mov    %r15,0x18(%rsp)
    0.00 :   46141b:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   461420:       lea    0x18(%rax),%r13
    0.00 :   461424:       lea    0x10(%rsp),%rdx
    0.00 :   461429:       mov    %rax,%rbx
    0.00 :   46142c:       lea    0xf(%rsp),%rdi
    0.00 :   461431:       mov    %r13,%rsi
    0.00 :   461434:       callq  460170 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   461439:       mov    0x18(%rsp),%rax
    0.00 :   46143e:       mov    0x10(%rsp),%rsi
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   461443:       movq   $0x0,0x30(%rsp)
    0.00 :   46144c:       movq   $0x0,0x38(%rsp)
    0.00 :   461455:       movq   $0x0,0x40(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   46145e:       mov    %rax,%r14
    0.00 :   461461:       sub    %rsi,%r14
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   461464:       mov    %r14,%rdx
    0.00 :   461467:       sar    $0x3,%rdx
    0.00 :   46146b:       je     4615a0 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x260>
         :            if (__n > this->max_size())
    0.00 :   461471:       movabs $0x1fffffffffffffff,%rax
    0.00 :   46147b:       cmp    %rax,%rdx
    0.00 :   46147e:       ja     46176a <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x42a>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   461484:       mov    %r14,%rdi
    0.00 :   461487:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   46148c:       mov    %rax,%rcx
    0.00 :   46148f:       mov    0x18(%rsp),%rax
    0.00 :   461494:       mov    0x10(%rsp),%rsi
    0.00 :   461499:       mov    %rax,%r15
    0.00 :   46149c:       sub    %rsi,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   46149f:       add    %rcx,%r14
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4614a2:       mov    %rcx,0x30(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   4614a7:       mov    %rcx,0x38(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4614ac:       mov    %r14,0x40(%rsp)
         :            if (_Num)
    0.00 :   4614b1:       cmp    %rax,%rsi
    0.00 :   4614b4:       je     4614c4 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x184>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   4614b6:       mov    %rcx,%rdi
    0.00 :   4614b9:       mov    %r15,%rdx
    0.00 :   4614bc:       callq  53aa0 <memmove@plt>
    0.00 :   4614c1:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   4614c4:       add    %r15,%rcx
    0.00 :   4614c7:       lea    0x30(%rsp),%rdx
    0.00 :   4614cc:       xor    %esi,%esi
    0.00 :   4614ce:       mov    %rbp,%rdi
    0.00 :   4614d1:       mov    %rcx,0x38(%rsp)
    0.00 :   4614d6:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4614db:       mov    0x30(%rsp),%rdi
    0.00 :   4614e0:       mov    %rax,%r14
         :            if (__p)
    0.00 :   4614e3:       test   %rdi,%rdi
    0.00 :   4614e6:       je     4614ed <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x1ad>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   4614e8:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4614ed:       mov    0x50(%r14),%rbp
    0.00 :   4614f1:       add    (%r14),%rbp
    0.00 :   4614f4:       mov    0x50(%rbx),%r14
    0.00 :   4614f8:       add    (%rbx),%r14
    0.00 :   4614fb:       cmp    %r14,%rbp
    0.00 :   4614fe:       je     461549 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x209>
    0.00 :   461500:       mov    0x30(%rbx),%rax
    0.00 :   461504:       mov    (%rax),%rdx
    0.00 :   461507:       mov    0x68(%rdx),%rdx
    0.00 :   46150b:       cmp    0x7c6a86(%rip),%rdx        # c27f98 <.got+0x4d8>
    0.00 :   461512:       jne    4615f0 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x2b0>
    0.00 :   461518:       cmpl   $0x8,0x8(%rax)
    0.00 :   46151c:       je     4615b0 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x270>
    0.00 :   461522:       mov    %r13,%rdi
    0.00 :   461525:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   46152a:       mov    0x30(%rbx),%rdi
    0.00 :   46152e:       mov    %rax,%r13
    0.00 :   461531:       mov    (%rdi),%rax
    0.00 :   461534:       callq  *0x18(%rax)
    0.00 :   461537:       mov    %r13,%rdx
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   46153a:       mov    %r14,%rsi
    0.00 :   46153d:       mov    %rbp,%rdi
         :            _ZNK11onnxruntime7Reshape7ComputeEPNS_15OpKernelContextE():
    0.00 :   461540:       imul   %rax,%rdx
         :            memcpy():
    0.00 :   461544:       callq  53150 <memcpy@plt>
         :            _ZNK11onnxruntime7Reshape7ComputeEPNS_15OpKernelContextE():
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   461549:       mov    0x10(%rsp),%rdi
    0.00 :   46154e:       movq   $0x0,(%r12)
         :            if (__p)
    0.00 :   461556:       test   %rdi,%rdi
    0.00 :   461559:       je     461560 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x220>
    0.00 :   46155b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   461560:       mov    0x1e8(%rsp),%rcx
    0.00 :   461568:       xor    %fs:0x28,%rcx
    0.00 :   461571:       mov    %r12,%rax
    0.00 :   461574:       jne    461765 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x425>
    0.00 :   46157a:       add    $0x1f8,%rsp
    0.00 :   461581:       pop    %rbx
    0.00 :   461582:       pop    %rbp
    0.00 :   461583:       pop    %r12
    0.00 :   461585:       pop    %r13
    0.00 :   461587:       pop    %r14
    0.00 :   461589:       pop    %r15
    0.00 :   46158b:       retq
    0.00 :   46158c:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   461590:       xor    %eax,%eax
    0.00 :   461592:       jmpq   4613ef <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0xaf>
    0.00 :   461597:       nopw   0x0(%rax,%rax,1)
    0.00 :   4615a0:       mov    %r14,%r15
    0.00 :   4615a3:       xor    %ecx,%ecx
    0.00 :   4615a5:       jmpq   46149f <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x15f>
    0.00 :   4615aa:       nopw   0x0(%rax,%rax,1)
    0.00 :   4615b0:       mov    %r14,%rbx
    0.00 :   4615b3:       xor    %r14d,%r14d
    0.00 :   4615b6:       jmp    4615d7 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x297>
    0.00 :   4615b8:       nopl   0x0(%rax,%rax,1)
         :            *  @return  Reference to this string.
         :            */
         :            basic_string&
         :            assign(const basic_string& __str)
         :            {
         :            this->_M_assign(__str);
    0.00 :   4615c0:       mov    %rbx,%rsi
    0.00 :   4615c3:       mov    %rbp,%rdi
    0.00 :   4615c6:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   4615cb:       add    $0x1,%r14
    0.00 :   4615cf:       add    $0x20,%rbp
    0.00 :   4615d3:       add    $0x20,%rbx
    0.00 :   4615d7:       mov    %r13,%rdi
    0.00 :   4615da:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   4615df:       cmp    %r14,%rax
    0.00 :   4615e2:       jg     4615c0 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x280>
    0.00 :   4615e4:       jmpq   461549 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x209>
    0.00 :   4615e9:       nopl   0x0(%rax)
    0.00 :   4615f0:       mov    %rax,%rdi
    0.00 :   4615f3:       callq  *%rdx
    0.00 :   4615f5:       test   %rax,%rax
    0.00 :   4615f8:       je     461522 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x1e2>
    0.00 :   4615fe:       jmpq   461518 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x1d8>
    0.00 :   461603:       lea    0x70(%rsp),%rbp
    0.00 :   461608:       mov    $0xa0,%edi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   46160d:       lea    0x50(%rsp),%rbx
    0.00 :   461612:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   461617:       mov    $0x10,%esi
    0.00 :   46161c:       mov    %rbp,%rdi
    0.00 :   46161f:       lea    0x30(%rsp),%r14
    0.00 :   461624:       mov    %rax,%r12
    0.00 :   461627:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   46162c:       lea    0x3c41be(%rip),%rsi        # 8257f1 <_fini+0x559>
    0.00 :   461633:       mov    %rbp,%rdi
    0.00 :   461636:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   46163b:       lea    0x3c41c6(%rip),%rsi        # 825808 <_fini+0x570>
    0.00 :   461642:       mov    %rbp,%rdi
    0.00 :   461645:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   46164a:       lea    0x3c41ba(%rip),%rsi        # 82580b <_fini+0x573>
    0.00 :   461651:       mov    %rbp,%rdi
    0.00 :   461654:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   461659:       mov    0x30(%r13),%rsi
    0.00 :   46165d:       mov    %rbp,%rdi
    0.00 :   461660:       callq  59ce30 <onnxruntime::operator<<(std::ostream&, onnxruntime::DataTypeImpl const*)>
    0.00 :   461665:       lea    0x8(%rbp),%rsi
    0.00 :   461669:       mov    %rbx,%rdi
    0.00 :   46166c:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   461671:       mov    %rbp,%rdi
    0.00 :   461674:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   461679:       mov    %r14,%rdi
    0.00 :   46167c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   461681:       mov    %r14,%r8
    0.00 :   461684:       mov    $0x97,%edx
    0.00 :   461689:       mov    %rbp,%rdi
    0.00 :   46168c:       lea    0x41412d(%rip),%rcx        # 8757c0 <onnxruntime::Tensor::Data<long>() const::__PRETTY_FUNCTION__>
    0.00 :   461693:       lea    0x3c4176(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   46169a:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   46169f:       mov    %rbx,%rcx
    0.00 :   4616a2:       lea    0x3c41a7(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4616a9:       mov    %rbp,%rsi
    0.00 :   4616ac:       mov    %r12,%rdi
    0.00 :   4616af:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4616b4:       mov    %rbp,%rdi
         :            if (!_M_is_local())
    0.00 :   4616b7:       add    $0x10,%rbx
    0.00 :   4616bb:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4616c0:       mov    %r14,%rdi
    0.00 :   4616c3:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4616c8:       mov    0x50(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4616cd:       cmp    %rbx,%rdi
    0.00 :   4616d0:       je     4616d7 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x397>
    0.00 :   4616d2:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4616d7:       lea    -0x367fbe(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4616de:       lea    0x7aff4b(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4616e5:       mov    %r12,%rdi
    0.00 :   4616e8:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4616ed:       mov    $0xa0,%edi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4616f2:       lea    0x50(%rsp),%rbx
    0.00 :   4616f7:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4616fc:       lea    0x413f9c(%rip),%rdx        # 87569f <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x2bf>
    0.00 :   461703:       mov    %rbx,%rdi
    0.00 :   461706:       mov    %rax,%r12
    0.00 :   461709:       lea    -0x27(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   46170d:       lea    0x10(%rbx),%rax
    0.00 :   461711:       mov    %rax,0x50(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   461716:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   46171b:       lea    0x30(%rsp),%r14
    0.00 :   461720:       mov    %r14,%rdi
    0.00 :   461723:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   461728:       lea    0x70(%rsp),%rbp
    0.00 :   46172d:       mov    %r14,%r8
    0.00 :   461730:       lea    0x4140c9(%rip),%rcx        # 875800 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const::__PRETTY_FUNCTION__>
    0.00 :   461737:       mov    $0x18,%edx
    0.00 :   46173c:       lea    0x413cdd(%rip),%rsi        # 875420 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x40>
    0.00 :   461743:       mov    %rbp,%rdi
    0.00 :   461746:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   46174b:       mov    %rbx,%rcx
    0.00 :   46174e:       lea    0x413f4b(%rip),%rdx        # 8756a0 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x2c0>
    0.00 :   461755:       mov    %rbp,%rsi
    0.00 :   461758:       mov    %r12,%rdi
    0.00 :   46175b:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   461760:       jmpq   4616b4 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x374>
    0.00 :   461765:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   46176a:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   46176f:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   461774:       mov    %rax,%r13
    0.00 :   461777:       jmp    46177e <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x43e>
    0.00 :   461779:       mov    %rax,%rbp
    0.00 :   46177c:       jmp    461789 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x449>
    0.00 :   46177e:       mov    %rbp,%rdi
    0.00 :   461781:       mov    %r13,%rbp
    0.00 :   461784:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   461789:       mov    %r14,%rdi
    0.00 :   46178c:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   461791:       mov    0x50(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   461796:       add    $0x10,%rbx
    0.00 :   46179a:       cmp    %rbx,%rdi
    0.00 :   46179d:       je     4617a4 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x464>
         :            ::operator delete(__p);
    0.00 :   46179f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4617a4:       mov    %r12,%rdi
    0.00 :   4617a7:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4617ac:       mov    %rbp,%rdi
    0.00 :   4617af:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4617b4:       jmp    461774 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x434>
    0.00 :   4617b6:       jmp    461779 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x439>
    0.00 :   4617b8:       mov    %rax,%rbp
    0.00 :   4617bb:       jmp    461791 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x451>
    0.00 :   4617bd:       mov    %rax,%rbx
    0.00 :   4617c0:       jmp    4617d6 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x496>
    0.00 :   4617c2:       jmp    4617bd <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x47d>
    0.00 :   4617c4:       mov    %rax,%rbx
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4617c7:       mov    0x30(%rsp),%rdi
         :            if (__p)
    0.00 :   4617cc:       test   %rdi,%rdi
    0.00 :   4617cf:       je     4617d6 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x496>
    0.00 :   4617d1:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4617d6:       mov    0x10(%rsp),%rdi
         :            if (__p)
    0.00 :   4617db:       test   %rdi,%rdi
    0.00 :   4617de:       je     4617e5 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x4a5>
    0.00 :   4617e0:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   4617e5:       mov    %rbx,%rdi
    0.00 :   4617e8:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4617ed:       jmp    4617b8 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x478>
    0.00 :   4617ef:       mov    %rax,%rbp
    0.00 :   4617f2:       jmp    4617a4 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x464>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000163a30 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()>:
         :            _ZN11onnxruntime19FeedsFetchesManagerD2Ev():
    0.00 :   163a30:       push   %r12
    0.00 :   163a32:       push   %rbp
    0.00 :   163a33:       push   %rbx
    0.00 :   163a34:       mov    %rdi,%rbx
         :            *  not touched in any way.  Managing the pointer is the user's
         :            *  responsibility.
         :            */
         :            ~vector() _GLIBCXX_NOEXCEPT
         :            {
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   163a37:       mov    0x88(%rdi),%rdi
         :            if (__p)
    0.00 :   163a3e:       test   %rdi,%rdi
    0.00 :   163a41:       je     163a48 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x18>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   163a43:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   163a48:       mov    0x70(%rbx),%rdi
         :            if (__p)
    0.00 :   163a4c:       test   %rdi,%rdi
    0.00 :   163a4f:       je     163a56 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x26>
    0.00 :   163a51:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   163a56:       mov    0x58(%rbx),%rdi
         :            if (__p)
    0.00 :   163a5a:       test   %rdi,%rdi
    0.00 :   163a5d:       je     163a64 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x34>
    0.00 :   163a5f:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   163a64:       mov    0x40(%rbx),%rdi
         :            if (__p)
    0.00 :   163a68:       test   %rdi,%rdi
    0.00 :   163a6b:       je     163a72 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x42>
    0.00 :   163a6d:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   163a72:       mov    0x30(%rbx),%r12
    0.00 :   163a76:       mov    0x28(%rbx),%rbp
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   163a7a:       cmp    %rbp,%r12
    0.00 :   163a7d:       je     163a9f <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x6f>
    0.00 :   163a7f:       nop
         :            traits_type::assign(_M_data()[__n], _CharT());
         :            }
         :
         :            bool
         :            _M_is_local() const
         :            { return _M_data() == _M_local_data(); }
    0.00 :   163a80:       mov    0x0(%rbp),%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
  100.00 :   163a84:       lea    0x10(%rbp),%rax
    0.00 :   163a88:       cmp    %rax,%rdi
    0.00 :   163a8b:       je     163a92 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x62>
    0.00 :   163a8d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   163a92:       add    $0x20,%rbp
    0.00 :   163a96:       cmp    %rbp,%r12
    0.00 :   163a99:       jne    163a80 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x50>
    0.00 :   163a9b:       mov    0x28(%rbx),%rbp
         :            if (__p)
    0.00 :   163a9f:       test   %rbp,%rbp
    0.00 :   163aa2:       je     163aac <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x7c>
    0.00 :   163aa4:       mov    %rbp,%rdi
    0.00 :   163aa7:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   163aac:       mov    0x18(%rbx),%r12
    0.00 :   163ab0:       mov    0x10(%rbx),%rbp
    0.00 :   163ab4:       cmp    %rbp,%r12
    0.00 :   163ab7:       je     163adf <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0xaf>
    0.00 :   163ab9:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   163ac0:       mov    0x0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   163ac4:       lea    0x10(%rbp),%rax
    0.00 :   163ac8:       cmp    %rax,%rdi
    0.00 :   163acb:       je     163ad2 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0xa2>
    0.00 :   163acd:       callq  53300 <operator delete(void*)@plt>
    0.00 :   163ad2:       add    $0x20,%rbp
    0.00 :   163ad6:       cmp    %rbp,%r12
    0.00 :   163ad9:       jne    163ac0 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0x90>
    0.00 :   163adb:       mov    0x10(%rbx),%rbp
         :            if (__p)
    0.00 :   163adf:       test   %rbp,%rbp
    0.00 :   163ae2:       je     163af0 <onnxruntime::FeedsFetchesManager::~FeedsFetchesManager()+0xc0>
    0.00 :   163ae4:       pop    %rbx
    0.00 :   163ae5:       mov    %rbp,%rdi
    0.00 :   163ae8:       pop    %rbp
    0.00 :   163ae9:       pop    %r12
    0.00 :   163aeb:       jmpq   53300 <operator delete(void*)@plt>
    0.00 :   163af0:       pop    %rbx
    0.00 :   163af1:       pop    %rbp
    0.00 :   163af2:       pop    %r12
    0.00 :   163af4:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006cb798 <MlasTanhKernelFma3>:
         :            MlasTanhKernelFma3():
    0.00 :   6cb798:       lea    0x1dbf01(%rip),%rax        # 8a76a0 <MlasTanhConstants>
    0.00 :   6cb79f:       vbroadcastss (%rax),%ymm4
    0.00 :   6cb7a4:       vbroadcastss 0x4(%rax),%ymm5
    0.00 :   6cb7aa:       vbroadcastss 0x8(%rax),%ymm6
    0.00 :   6cb7b0:       vbroadcastss 0xc(%rax),%ymm7
    0.00 :   6cb7b6:       vbroadcastss 0x10(%rax),%ymm8
    0.00 :   6cb7bc:       vbroadcastss 0x14(%rax),%ymm9
    0.00 :   6cb7c2:       vbroadcastss 0x18(%rax),%ymm10
    0.00 :   6cb7c8:       vbroadcastss 0x1c(%rax),%ymm11
    0.00 :   6cb7ce:       vbroadcastss 0x20(%rax),%ymm12
    0.00 :   6cb7d4:       vbroadcastss 0x24(%rax),%ymm13
    0.00 :   6cb7da:       vbroadcastss 0x2c(%rax),%ymm14
    0.00 :   6cb7e0:       vbroadcastss 0x30(%rax),%ymm15
    0.00 :   6cb7e6:       sub    $0x8,%rdx
    0.00 :   6cb7ea:       jb     6cb849 <MlasTanhKernelFma3+0xb1>
    0.00 :   6cb7ec:       vmaxps (%rdi),%ymm4,%ymm0
    0.00 :   6cb7f0:       vmovaps %ymm7,%ymm2
    0.00 :   6cb7f4:       vminps %ymm0,%ymm5,%ymm0
    0.00 :   6cb7f8:       vmulps %ymm0,%ymm0,%ymm1
    0.00 :   6cb7fc:       vbroadcastss 0x28(%rax),%ymm3
    0.00 :   6cb802:       vfmadd231ps %ymm6,%ymm1,%ymm2
    0.00 :   6cb807:       vfmadd213ps %ymm8,%ymm1,%ymm2
    0.00 :   6cb80c:       vfmadd213ps %ymm9,%ymm1,%ymm2
    0.00 :   6cb811:       vfmadd213ps %ymm10,%ymm1,%ymm2
    0.00 :   6cb816:       vfmadd213ps %ymm11,%ymm1,%ymm2
   64.65 :   6cb81b:       vfmadd213ps %ymm12,%ymm1,%ymm2
    0.00 :   6cb820:       vfmadd231ps %ymm13,%ymm1,%ymm3
    0.00 :   6cb825:       vfmadd213ps %ymm14,%ymm1,%ymm3
    0.00 :   6cb82a:       vfmadd213ps %ymm15,%ymm1,%ymm3
    0.00 :   6cb82f:       vmulps %ymm2,%ymm0,%ymm2
    0.00 :   6cb833:       vdivps %ymm3,%ymm2,%ymm0
    0.00 :   6cb837:       add    $0x20,%rdi
    0.00 :   6cb83b:       vmovups %ymm0,(%rsi)
   35.35 :   6cb83f:       add    $0x20,%rsi
    0.00 :   6cb843:       sub    $0x8,%rdx
    0.00 :   6cb847:       jae    6cb7ec <MlasTanhKernelFma3+0x54>
    0.00 :   6cb849:       add    $0x8,%rdx
    0.00 :   6cb84d:       je     6cb8b3 <MlasTanhKernelFma3+0x11b>
    0.00 :   6cb84f:       mov    %edx,-0x8(%rsp)
    0.00 :   6cb853:       vbroadcastss -0x8(%rsp),%ymm2
    0.00 :   6cb85a:       vpcmpgtd 0x1dbbbe(%rip),%ymm2,%ymm2        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6cb862:       vmaskmovps (%rdi),%ymm2,%ymm0
    0.00 :   6cb867:       vmaxps %ymm0,%ymm4,%ymm0
    0.00 :   6cb86b:       vminps %ymm0,%ymm5,%ymm0
    0.00 :   6cb86f:       vmulps %ymm0,%ymm0,%ymm1
    0.00 :   6cb873:       vbroadcastss 0x28(%rax),%ymm3
    0.00 :   6cb879:       vfmadd231ps %ymm6,%ymm1,%ymm7
    0.00 :   6cb87e:       vfmadd213ps %ymm8,%ymm1,%ymm7
    0.00 :   6cb883:       vfmadd213ps %ymm9,%ymm1,%ymm7
    0.00 :   6cb888:       vfmadd213ps %ymm10,%ymm1,%ymm7
    0.00 :   6cb88d:       vfmadd213ps %ymm11,%ymm1,%ymm7
    0.00 :   6cb892:       vfmadd213ps %ymm12,%ymm1,%ymm7
    0.00 :   6cb897:       vfmadd231ps %ymm13,%ymm1,%ymm3
    0.00 :   6cb89c:       vfmadd213ps %ymm14,%ymm1,%ymm3
    0.00 :   6cb8a1:       vfmadd213ps %ymm15,%ymm1,%ymm3
    0.00 :   6cb8a6:       vmulps %ymm7,%ymm0,%ymm7
    0.00 :   6cb8aa:       vdivps %ymm3,%ymm7,%ymm0
    0.00 :   6cb8ae:       vmaskmovps %ymm0,%ymm2,(%rsi)
    0.00 :   6cb8b3:       vzeroupper
    0.00 :   6cb8b6:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005eda40 <onnxruntime::Tensor::ReleaseBuffer()>:
         :            _ZN11onnxruntime6Tensor13ReleaseBufferEv():
    0.00 :   5eda40:       push   %r12
    0.00 :   5eda42:       push   %rbp
    0.00 :   5eda43:       mov    %rdi,%rbp
    0.00 :   5eda46:       push   %rbx
    0.00 :   5eda47:       sub    $0x10,%rsp
    0.00 :   5eda4b:       mov    0x8(%rdi),%rdi
  100.00 :   5eda4f:       test   %rdi,%rdi
    0.00 :   5eda52:       je     5eda78 <onnxruntime::Tensor::ReleaseBuffer()+0x38>
    0.00 :   5eda54:       mov    0x30(%rbp),%rdx
    0.00 :   5eda58:       mov    0x0(%rbp),%rsi
    0.00 :   5eda5c:       cmpl   $0x8,0x8(%rdx)
    0.00 :   5eda60:       je     5eda88 <onnxruntime::Tensor::ReleaseBuffer()+0x48>
    0.00 :   5eda62:       mov    (%rdi),%rax
    0.00 :   5eda65:       mov    0x18(%rax),%rax
    0.00 :   5eda69:       add    $0x10,%rsp
    0.00 :   5eda6d:       pop    %rbx
    0.00 :   5eda6e:       pop    %rbp
    0.00 :   5eda6f:       pop    %r12
    0.00 :   5eda71:       jmpq   *%rax
    0.00 :   5eda73:       nopl   0x0(%rax,%rax,1)
    0.00 :   5eda78:       add    $0x10,%rsp
    0.00 :   5eda7c:       pop    %rbx
    0.00 :   5eda7d:       pop    %rbp
    0.00 :   5eda7e:       pop    %r12
    0.00 :   5eda80:       retq
    0.00 :   5eda81:       nopl   0x0(%rax)
    0.00 :   5eda88:       lea    0x18(%rbp),%rdi
    0.00 :   5eda8c:       mov    %rsi,0x8(%rsp)
    0.00 :   5eda91:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5eda96:       mov    0x8(%rsp),%rsi
    0.00 :   5eda9b:       mov    %rax,%r12
    0.00 :   5eda9e:       shl    $0x5,%r12
    0.00 :   5edaa2:       mov    %rsi,%rbx
    0.00 :   5edaa5:       add    %rsi,%r12
    0.00 :   5edaa8:       test   %rax,%rax
    0.00 :   5edaab:       jle    5edaca <onnxruntime::Tensor::ReleaseBuffer()+0x8a>
    0.00 :   5edaad:       nopl   (%rax)
         :            traits_type::assign(_M_data()[__n], _CharT());
         :            }
         :
         :            bool
         :            _M_is_local() const
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5edab0:       mov    (%rbx),%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5edab3:       lea    0x10(%rbx),%rax
    0.00 :   5edab7:       cmp    %rax,%rdi
    0.00 :   5edaba:       je     5edac1 <onnxruntime::Tensor::ReleaseBuffer()+0x81>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5edabc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5edac1:       add    $0x20,%rbx
    0.00 :   5edac5:       cmp    %r12,%rbx
    0.00 :   5edac8:       jne    5edab0 <onnxruntime::Tensor::ReleaseBuffer()+0x70>
    0.00 :   5edaca:       mov    0x8(%rbp),%rdi
    0.00 :   5edace:       mov    0x0(%rbp),%rsi
    0.00 :   5edad2:       jmp    5eda62 <onnxruntime::Tensor::ReleaseBuffer()+0x22>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000059b170 <onnxruntime::TensorTypeBase::IsTensorType() const>:
         :            _ZNK11onnxruntime14TensorTypeBase12IsTensorTypeEv():
   70.31 :   59b170:       mov    $0x1,%eax
   29.69 :   59b175:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000001abf20 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const>:
         :            _ZNK11onnxruntime5Graph15NodeAtIndexImplEm():
    0.00 :   1abf20:       push   %r14
    0.00 :   1abf22:       push   %r13
    0.00 :   1abf24:       push   %r12
    0.00 :   1abf26:       push   %rbp
    0.00 :   1abf27:       mov    %rsi,%rbp
    0.00 :   1abf2a:       push   %rbx
    0.00 :   1abf2b:       sub    $0x1c0,%rsp
    0.00 :   1abf32:       mov    0x180(%rdi),%rdx
   30.69 :   1abf39:       mov    %fs:0x28,%rax
    0.00 :   1abf42:       mov    %rax,0x1b8(%rsp)
    0.00 :   1abf4a:       xor    %eax,%eax
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   1abf4c:       mov    0x188(%rdi),%rax
    0.00 :   1abf53:       sub    %rdx,%rax
    0.00 :   1abf56:       sar    $0x3,%rax
    0.00 :   1abf5a:       cmp    %rsi,%rax
    0.00 :   1abf5d:       jbe    1abf8a <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x6a>
    0.00 :   1abf5f:       mov    0x1b8(%rsp),%rcx
    0.00 :   1abf67:       xor    %fs:0x28,%rcx
    0.00 :   1abf70:       mov    (%rdx,%rsi,8),%rax
   69.31 :   1abf74:       jne    1ac085 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x165>
    0.00 :   1abf7a:       add    $0x1c0,%rsp
    0.00 :   1abf81:       pop    %rbx
    0.00 :   1abf82:       pop    %rbp
    0.00 :   1abf83:       pop    %r12
    0.00 :   1abf85:       pop    %r13
    0.00 :   1abf87:       pop    %r14
    0.00 :   1abf89:       retq
    0.00 :   1abf8a:       mov    %rdi,%rbx
    0.00 :   1abf8d:       mov    $0xa0,%edi
    0.00 :   1abf92:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   1abf97:       mov    $0x10,%esi
    0.00 :   1abf9c:       mov    %rax,%r12
    0.00 :   1abf9f:       mov    0x188(%rbx),%rax
    0.00 :   1abfa6:       sub    0x180(%rbx),%rax
    0.00 :   1abfad:       lea    0x40(%rsp),%rbx
    0.00 :   1abfb2:       sar    $0x3,%rax
    0.00 :   1abfb6:       mov    %rbx,%rdi
    0.00 :   1abfb9:       mov    %rax,%r13
    0.00 :   1abfbc:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   1abfc1:       lea    0x689740(%rip),%rsi        # 835708 <typeinfo name for onnxruntime::EliminateIdentity+0x28>
    0.00 :   1abfc8:       mov    %rbx,%rdi
    0.00 :   1abfcb:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            operator<<(long __n)
         :            { return _M_insert(__n); }
         :
         :            __ostream_type&
         :            operator<<(unsigned long __n)
         :            { return _M_insert(__n); }
    0.00 :   1abfd0:       mov    %rbp,%rsi
    0.00 :   1abfd3:       mov    %rbx,%rdi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   1abfd6:       lea    0x20(%rsp),%rbp
    0.00 :   1abfdb:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   1abfe0:       lea    0x689841(%rip),%rsi        # 835828 <typeinfo name for onnxruntime::EliminateIdentity+0x148>
    0.00 :   1abfe7:       mov    %rbx,%rdi
    0.00 :   1abfea:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   1abfef:       mov    %r13,%rsi
    0.00 :   1abff2:       mov    %rbx,%rdi
    0.00 :   1abff5:       mov    %rsp,%r13
    0.00 :   1abff8:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   1abffd:       lea    0x8(%rbx),%rsi
    0.00 :   1ac001:       mov    %rbp,%rdi
    0.00 :   1ac004:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   1ac009:       mov    %rbx,%rdi
    0.00 :   1ac00c:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   1ac011:       mov    %r13,%rdi
    0.00 :   1ac014:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   1ac019:       mov    %r13,%r8
    0.00 :   1ac01c:       mov    $0x51d,%edx
    0.00 :   1ac021:       mov    %rbx,%rdi
    0.00 :   1ac024:       lea    0x689cf5(%rip),%rcx        # 835d20 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const::__PRETTY_FUNCTION__>
    0.00 :   1ac02b:       lea    0x68971e(%rip),%rsi        # 835750 <typeinfo name for onnxruntime::EliminateIdentity+0x70>
    0.00 :   1ac032:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   1ac037:       mov    %rbp,%rcx
    0.00 :   1ac03a:       lea    0x6897ed(%rip),%rdx        # 83582e <typeinfo name for onnxruntime::EliminateIdentity+0x14e>
    0.00 :   1ac041:       mov    %rbx,%rsi
    0.00 :   1ac044:       mov    %r12,%rdi
    0.00 :   1ac047:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   1ac04c:       mov    %rbx,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   1ac04f:       add    $0x10,%rbp
    0.00 :   1ac053:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   1ac058:       mov    %r13,%rdi
    0.00 :   1ac05b:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   1ac060:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   1ac065:       cmp    %rbp,%rdi
    0.00 :   1ac068:       je     1ac06f <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x14f>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   1ac06a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   1ac06f:       lea    -0xb2956(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   1ac076:       lea    0xa655b3(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   1ac07d:       mov    %r12,%rdi
    0.00 :   1ac080:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   1ac085:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   1ac08a:       mov    %rax,%rbx
    0.00 :   1ac08d:       jmp    1ac0ac <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x18c>
    0.00 :   1ac08f:       mov    %rax,%r14
    0.00 :   1ac092:       jmp    1ac099 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x179>
    0.00 :   1ac094:       mov    %rax,%rbx
    0.00 :   1ac097:       jmp    1ac0a4 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x184>
    0.00 :   1ac099:       mov    %rbx,%rdi
    0.00 :   1ac09c:       mov    %r14,%rbx
    0.00 :   1ac09f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   1ac0a4:       mov    %r13,%rdi
    0.00 :   1ac0a7:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   1ac0ac:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   1ac0b1:       add    $0x10,%rbp
    0.00 :   1ac0b5:       cmp    %rbp,%rdi
    0.00 :   1ac0b8:       je     1ac0bf <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x19f>
    0.00 :   1ac0ba:       callq  53300 <operator delete(void*)@plt>
    0.00 :   1ac0bf:       mov    %r12,%rdi
    0.00 :   1ac0c2:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   1ac0c7:       mov    %rbx,%rdi
    0.00 :   1ac0ca:       callq  53c30 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>:
         :            _ZNK11onnxruntime15OpKernelContext5InputINS_6TensorEEEPKT_i():
   29.60 :   221800:       push   %r15
    0.00 :   221802:       push   %r14
    0.00 :   221804:       push   %r13
    0.00 :   221806:       push   %r12
    0.00 :   221808:       push   %rbp
    0.00 :   221809:       push   %rbx
    0.00 :   22180a:       sub    $0x208,%rsp
    0.00 :   221811:       mov    %rdi,(%rsp)
    0.00 :   221815:       mov    %esi,0xc(%rsp)
    0.00 :   221819:       mov    %fs:0x28,%rax
    0.00 :   221822:       mov    %rax,0x1f8(%rsp)
    0.00 :   22182a:       xor    %eax,%eax
    0.00 :   22182c:       callq  5c7570 <onnxruntime::OpKernelContext::GetInputMLValue(int) const>
    0.00 :   221831:       mov    %rax,%rbx
    0.00 :   221834:       test   %rax,%rax
    0.00 :   221837:       je     221d03 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x503>
    0.00 :   22183d:       mov    0x10(%rax),%rdi
   70.40 :   221841:       test   %rdi,%rdi
    0.00 :   221844:       je     221854 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x54>
    0.00 :   221846:       mov    (%rdi),%rax
    0.00 :   221849:       callq  *0x30(%rax)
    0.00 :   22184c:       test   %al,%al
    0.00 :   22184e:       jne    221d00 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x500>
    0.00 :   221854:       mov    $0xa0,%edi
    0.00 :   221859:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   22185e:       mov    0x10(%rbx),%rdi
    0.00 :   221862:       mov    %rax,0x10(%rsp)
    0.00 :   221867:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   22186c:       lea    0x80(%rsp),%rbx
    0.00 :   221874:       mov    %rax,%r13
    0.00 :   221877:       lea    0x70(%rbx),%rdi
    0.00 :   22187b:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   221880:       mov    0xa062a1(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   221887:       xor    %esi,%esi
    0.00 :   221889:       movq   $0x0,0x1c8(%rsp)
    0.00 :   221895:       movq   $0x0,0x1d8(%rsp)
    0.00 :   2218a1:       movq   $0x0,0x1e0(%rsp)
    0.00 :   2218ad:       add    $0x10,%rax
    0.00 :   2218b1:       mov    %rax,0xf0(%rsp)
    0.00 :   2218b9:       xor    %eax,%eax
    0.00 :   2218bb:       mov    %ax,0x1d0(%rsp)
    0.00 :   2218c3:       mov    0xa064d6(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2218ca:       movq   $0x0,0x1e8(%rsp)
    0.00 :   2218d6:       mov    0x8(%rax),%rbp
    0.00 :   2218da:       mov    0x10(%rax),%r12
    0.00 :   2218de:       movq   $0x0,0x1f0(%rsp)
    0.00 :   2218ea:       mov    -0x18(%rbp),%rdi
    0.00 :   2218ee:       mov    %rbp,0x80(%rsp)
    0.00 :   2218f6:       add    %rbx,%rdi
    0.00 :   2218f9:       mov    %r12,(%rdi)
    0.00 :   2218fc:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   221901:       mov    0xa06458(%rip),%r14        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   221908:       lea    0x40(%rbx),%rdi
    0.00 :   22190c:       movq   $0x0,0x90(%rsp)
    0.00 :   221918:       movq   $0x0,0x98(%rsp)
    0.00 :   221924:       movq   $0x0,0xa0(%rsp)
    0.00 :   221930:       lea    0x18(%r14),%rax
    0.00 :   221934:       mov    %rax,0x80(%rsp)
    0.00 :   22193c:       lea    0x40(%r14),%rax
    0.00 :   221940:       mov    %rax,0xf0(%rsp)
    0.00 :   221948:       mov    0xa06311(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   22194f:       movq   $0x0,0xa8(%rsp)
    0.00 :   22195b:       movq   $0x0,0xb0(%rsp)
    0.00 :   221967:       add    $0x10,%rax
    0.00 :   22196b:       mov    %rax,0x88(%rsp)
    0.00 :   221973:       movq   $0x0,0xb8(%rsp)
    0.00 :   22197f:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   221984:       mov    0xa0664d(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   22198b:       lea    0x8(%rbx),%rsi
    0.00 :   22198f:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   221993:       movl   $0x10,0xc8(%rsp)
    0.00 :   22199e:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   2219a2:       movb   $0x0,0xe0(%rsp)
    0.00 :   2219aa:       mov    %rax,0x88(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2219b2:       lea    0x60(%rbx),%rax
    0.00 :   2219b6:       mov    %rax,0xd0(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   2219be:       movq   $0x0,0xd8(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2219ca:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   2219cf:       mov    $0x21,%edx
    0.00 :   2219d4:       lea    0x605935(%rip),%rsi        # 827310 <std::piecewise_construct+0x570>
    0.00 :   2219db:       mov    %rbx,%rdi
    0.00 :   2219de:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!__s)
    0.00 :   2219e3:       test   %r13,%r13
    0.00 :   2219e6:       je     221d50 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x550>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   2219ec:       mov    %r13,%rdi
    0.00 :   2219ef:       callq  52c60 <strlen@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2219f4:       mov    %r13,%rsi
    0.00 :   2219f7:       mov    %rbx,%rdi
    0.00 :   2219fa:       mov    %rax,%rdx
    0.00 :   2219fd:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221a02:       lea    0x60(%rsp),%r15
         :            { __c1 = __c2; }
    0.00 :   221a07:       movb   $0x0,0x70(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   221a0c:       movq   $0x0,0x68(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221a15:       lea    0x10(%r15),%rax
    0.00 :   221a19:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   221a1e:       mov    0xb0(%rsp),%rax
    0.00 :   221a26:       test   %rax,%rax
    0.00 :   221a29:       je     221d80 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x580>
         :            if (this->pptr() > this->egptr())
    0.00 :   221a2f:       mov    0xa0(%rsp),%r8
    0.00 :   221a37:       mov    0xa8(%rsp),%rcx
    0.00 :   221a3f:       cmp    %r8,%rax
    0.00 :   221a42:       ja     221d30 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x530>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   221a48:       sub    %rcx,%r8
    0.00 :   221a4b:       xor    %edx,%edx
    0.00 :   221a4d:       xor    %esi,%esi
    0.00 :   221a4f:       mov    %r15,%rdi
    0.00 :   221a52:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   221a57:       lea    0x18(%r14),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221a5b:       mov    0xd0(%rsp),%rdi
    0.00 :   221a63:       mov    %rax,0x80(%rsp)
    0.00 :   221a6b:       lea    0x40(%r14),%rax
    0.00 :   221a6f:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   221a77:       mov    0xa0655a(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   221a7e:       add    $0x10,%rax
    0.00 :   221a82:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   221a8a:       lea    0x60(%rbx),%rax
    0.00 :   221a8e:       cmp    %rax,%rdi
    0.00 :   221a91:       je     221a98 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x298>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   221a93:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   221a98:       mov    0xa061c1(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   221a9f:       lea    0x40(%rbx),%rdi
    0.00 :   221aa3:       add    $0x10,%rax
    0.00 :   221aa7:       mov    %rax,0x88(%rsp)
    0.00 :   221aaf:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   221ab4:       mov    -0x18(%rbp),%rax
         :            ~basic_ios() { }
    0.00 :   221ab8:       lea    0x70(%rbx),%rdi
    0.00 :   221abc:       mov    %rbp,0x80(%rsp)
    0.00 :   221ac4:       mov    %r12,0x80(%rsp,%rax,1)
    0.00 :   221acc:       mov    0xa06055(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   221ad3:       add    $0x10,%rax
    0.00 :   221ad7:       mov    %rax,0xf0(%rsp)
    0.00 :   221adf:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   221ae4:       lea    0x20(%rsp),%rdi
    0.00 :   221ae9:       mov    %rdi,0x18(%rsp)
    0.00 :   221aee:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221af3:       lea    0x60587d(%rip),%rdx        # 827377 <std::piecewise_construct+0x5d7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221afa:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221afe:       mov    %rbx,%rdi
    0.00 :   221b01:       lea    -0x3f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221b05:       mov    %rax,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221b0d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   221b12:       lea    0x61d984(%rip),%rdx        # 83f49d <OrtValue::Get<onnxruntime::Tensor>() const::__PRETTY_FUNCTION__+0x3d>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221b19:       lea    0x38(%rbx),%rax
    0.00 :   221b1d:       movl   $0x57,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221b28:       lea    0x28(%rbx),%rdi
    0.00 :   221b2c:       lea    -0x3d(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221b30:       mov    %rax,0xa8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221b38:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   221b3d:       mov    0x28(%rsp),%r13
    0.00 :   221b42:       mov    0x20(%rsp),%rbp
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   221b47:       movq   $0x0,0xc8(%rsp)
    0.00 :   221b53:       movq   $0x0,0xd0(%rsp)
    0.00 :   221b5f:       movq   $0x0,0xd8(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   221b6b:       mov    %r13,%r12
    0.00 :   221b6e:       sub    %rbp,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   221b71:       mov    %r12,%rax
    0.00 :   221b74:       sar    $0x5,%rax
    0.00 :   221b78:       je     221d70 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x570>
         :            if (__n > this->max_size())
    0.00 :   221b7e:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   221b88:       cmp    %rdx,%rax
    0.00 :   221b8b:       ja     221d96 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x596>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   221b91:       mov    %r12,%rdi
    0.00 :   221b94:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   221b99:       mov    0x28(%rsp),%r13
    0.00 :   221b9e:       mov    0x20(%rsp),%rbp
    0.00 :   221ba3:       mov    %rax,%r14
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   221ba6:       add    %r14,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   221ba9:       mov    %r14,0xc8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   221bb1:       mov    %r12,0xd8(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   221bb9:       mov    %r14,%r12
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   221bbc:       mov    %r14,0xd0(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   221bc4:       cmp    %r13,%rbp
    0.00 :   221bc7:       je     221bf9 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x3f9>
    0.00 :   221bc9:       nopl   0x0(%rax)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221bd0:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221bd5:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221bd8:       mov    %rax,(%r12)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   221bdc:       mov    0x0(%rbp),%rsi
    0.00 :   221be0:       mov    0x8(%rbp),%rdx
    0.00 :   221be4:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221be7:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   221bec:       add    $0x20,%rbp
    0.00 :   221bf0:       add    $0x20,%r12
    0.00 :   221bf4:       cmp    %rbp,%r13
    0.00 :   221bf7:       jne    221bd0 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x3d0>
    0.00 :   221bf9:       mov    0x10(%rsp),%rdi
    0.00 :   221bfe:       mov    %r15,%rcx
    0.00 :   221c01:       lea    0x67136d(%rip),%rdx        # 892f75 <onnxruntime::MemPatternPlanner::TraceAllocation(int, unsigned long)::__PRETTY_FUNCTION__+0x175>
    0.00 :   221c08:       mov    %rbx,%rsi
         :            this->_M_impl._M_finish =
    0.00 :   221c0b:       mov    %r12,0xd0(%rsp)
    0.00 :   221c13:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   221c18:       mov    0xd0(%rsp),%rbp
    0.00 :   221c20:       mov    0xc8(%rsp),%r12
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   221c28:       cmp    %r12,%rbp
    0.00 :   221c2b:       je     221c54 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x454>
    0.00 :   221c2d:       nopl   (%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221c30:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   221c34:       lea    0x10(%r12),%rax
    0.00 :   221c39:       cmp    %rax,%rdi
    0.00 :   221c3c:       je     221c43 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x443>
         :            ::operator delete(__p);
    0.00 :   221c3e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221c43:       add    $0x20,%r12
    0.00 :   221c47:       cmp    %r12,%rbp
    0.00 :   221c4a:       jne    221c30 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x430>
    0.00 :   221c4c:       mov    0xc8(%rsp),%r12
         :            if (__p)
    0.00 :   221c54:       test   %r12,%r12
    0.00 :   221c57:       je     221c61 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x461>
    0.00 :   221c59:       mov    %r12,%rdi
    0.00 :   221c5c:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221c61:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221c69:       lea    0x38(%rbx),%rax
    0.00 :   221c6d:       cmp    %rax,%rdi
    0.00 :   221c70:       je     221c77 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x477>
    0.00 :   221c72:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221c77:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221c7f:       add    $0x10,%rbx
    0.00 :   221c83:       cmp    %rbx,%rdi
    0.00 :   221c86:       je     221c8d <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x48d>
    0.00 :   221c88:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   221c8d:       mov    0x28(%rsp),%rbp
    0.00 :   221c92:       mov    0x20(%rsp),%rbx
    0.00 :   221c97:       cmp    %rbx,%rbp
    0.00 :   221c9a:       je     221cbf <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4bf>
    0.00 :   221c9c:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221ca0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   221ca3:       lea    0x10(%rbx),%rax
    0.00 :   221ca7:       cmp    %rax,%rdi
    0.00 :   221caa:       je     221cb1 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4b1>
    0.00 :   221cac:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221cb1:       add    $0x20,%rbx
    0.00 :   221cb5:       cmp    %rbx,%rbp
    0.00 :   221cb8:       jne    221ca0 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4a0>
    0.00 :   221cba:       mov    0x20(%rsp),%rbx
         :            if (__p)
    0.00 :   221cbf:       test   %rbx,%rbx
    0.00 :   221cc2:       je     221ccc <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4cc>
    0.00 :   221cc4:       mov    %rbx,%rdi
    0.00 :   221cc7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221ccc:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221cd1:       lea    0x10(%r15),%rax
    0.00 :   221cd5:       cmp    %rax,%rdi
    0.00 :   221cd8:       je     221cdf <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4df>
    0.00 :   221cda:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221cdf:       lea    -0x1285c6(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   221ce6:       lea    0x9ef943(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   221ced:       mov    0x10(%rsp),%rdi
    0.00 :   221cf2:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   221cf7:       nopw   0x0(%rax,%rax,1)
    0.00 :   221d00:       mov    (%rbx),%rbx
    0.00 :   221d03:       mov    0x1f8(%rsp),%rcx
    0.00 :   221d0b:       xor    %fs:0x28,%rcx
    0.00 :   221d14:       mov    %rbx,%rax
    0.00 :   221d17:       jne    221d91 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x591>
    0.00 :   221d19:       add    $0x208,%rsp
    0.00 :   221d20:       pop    %rbx
    0.00 :   221d21:       pop    %rbp
    0.00 :   221d22:       pop    %r12
    0.00 :   221d24:       pop    %r13
    0.00 :   221d26:       pop    %r14
    0.00 :   221d28:       pop    %r15
    0.00 :   221d2a:       retq
    0.00 :   221d2b:       nopl   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   221d30:       sub    %rcx,%rax
    0.00 :   221d33:       xor    %edx,%edx
    0.00 :   221d35:       xor    %esi,%esi
    0.00 :   221d37:       mov    %r15,%rdi
    0.00 :   221d3a:       mov    %rax,%r8
    0.00 :   221d3d:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   221d42:       jmpq   221a57 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x257>
    0.00 :   221d47:       nopw   0x0(%rax,%rax,1)
         :            __out.setstate(ios_base::badbit);
    0.00 :   221d50:       mov    0x80(%rsp),%rax
    0.00 :   221d58:       mov    -0x18(%rax),%rdi
    0.00 :   221d5c:       add    %rbx,%rdi
         :            operator&(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
         :
         :            inline _GLIBCXX_CONSTEXPR _Ios_Iostate
         :            operator|(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
    0.00 :   221d5f:       mov    0x20(%rdi),%esi
    0.00 :   221d62:       or     $0x1,%esi
         :            { this->clear(this->rdstate() | __state); }
    0.00 :   221d65:       callq  53b90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   221d6a:       jmpq   221a02 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x202>
    0.00 :   221d6f:       nop
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   221d70:       xor    %r14d,%r14d
    0.00 :   221d73:       jmpq   221ba6 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x3a6>
    0.00 :   221d78:       nopl   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   221d80:       lea    0x50(%rbx),%rsi
    0.00 :   221d84:       mov    %r15,%rdi
    0.00 :   221d87:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   221d8c:       jmpq   221a57 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x257>
    0.00 :   221d91:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   221d96:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   221d9b:       mov    %rax,%rbp
    0.00 :   221d9e:       mov    %rdx,%r12
    0.00 :   221da1:       jmp    221dca <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5ca>
    0.00 :   221da3:       mov    %rax,%r12
    0.00 :   221da6:       mov    %rdx,%rbp
    0.00 :   221da9:       jmpq   221f8b <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x78b>
    0.00 :   221dae:       jmpq   221f9b <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x79b>
         :            std::_Construct(std::__addressof(*__cur), *__first);
         :            return __cur;
         :            }
         :            __catch(...)
    0.00 :   221db3:       callq  53ad0 <__cxa_end_catch@plt>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   221db8:       mov    0xc8(%rsp),%rdi
         :            if (__p)
    0.00 :   221dc0:       test   %rdi,%rdi
    0.00 :   221dc3:       je     221dca <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5ca>
         :            ::operator delete(__p);
    0.00 :   221dc5:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221dca:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221dd2:       lea    0x38(%rbx),%rax
    0.00 :   221dd6:       cmp    %rax,%rdi
    0.00 :   221dd9:       je     221de0 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5e0>
    0.00 :   221ddb:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221de0:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221de8:       add    $0x10,%rbx
    0.00 :   221dec:       cmp    %rbx,%rdi
    0.00 :   221def:       je     221df6 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5f6>
    0.00 :   221df1:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   221df6:       mov    %rbp,%rbx
    0.00 :   221df9:       mov    %r12,%rbp
    0.00 :   221dfc:       mov    0x18(%rsp),%rdi
    0.00 :   221e01:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221e06:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221e0b:       lea    0x10(%r15),%rax
    0.00 :   221e0f:       cmp    %rax,%rdi
    0.00 :   221e12:       je     221e19 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x619>
         :            ::operator delete(__p);
    0.00 :   221e14:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221e19:       mov    0x10(%rsp),%rdi
    0.00 :   221e1e:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   221e23:       mov    %rbx,%rdi
    0.00 :   221e26:       mov    %rbp,%rdx
    0.00 :   221e29:       sub    $0x1,%rdx
    0.00 :   221e2d:       jne    22200f <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x80f>
    0.00 :   221e33:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   221e38:       mov    $0xa0,%edi
    0.00 :   221e3d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   221e42:       movslq 0xc(%rsp),%rbx
    0.00 :   221e47:       mov    %rax,%rbp
    0.00 :   221e4a:       mov    (%rsp),%rax
    0.00 :   221e4e:       mov    0x10(%rax),%rdi
    0.00 :   221e52:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   221e57:       mov    0xa8(%rax),%rax
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221e5e:       lea    0x40(%rsp),%r12
    0.00 :   221e63:       mov    (%rax,%rbx,8),%rdi
    0.00 :   221e67:       callq  63d050 <onnxruntime::NodeArg::Name[abi:cxx11]() const>
    0.00 :   221e6c:       movb   $0x0,0x50(%rsp)
         :            __glibcxx_requires_string(__lhs);
         :            typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
         :            typedef typename __string_type::size_type   __size_type;
         :            const __size_type __len = _Traits::length(__lhs);
         :            __string_type __str;
         :            __str.reserve(__len + __rhs.size());
    0.00 :   221e71:       mov    %r12,%rdi
         :            { _M_string_length = __length; }
    0.00 :   221e74:       movq   $0x0,0x48(%rsp)
    0.00 :   221e7d:       mov    %rax,%rbx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221e80:       lea    0x10(%r12),%rax
    0.00 :   221e85:       mov    %rax,0x40(%rsp)
    0.00 :   221e8a:       mov    0x8(%rbx),%rax
    0.00 :   221e8e:       lea    0xf(%rax),%rsi
    0.00 :   221e92:       callq  539d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@plt>
         :            if (this->max_size() - (this->size() - __n1) < __n2)
    0.00 :   221e97:       movabs $0x7fffffffffffffff,%rax
    0.00 :   221ea1:       sub    0x48(%rsp),%rax
    0.00 :   221ea6:       cmp    $0xe,%rax
    0.00 :   221eaa:       jbe    222014 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x814>
         :            return _M_append(__s, __n);
    0.00 :   221eb0:       mov    $0xf,%edx
    0.00 :   221eb5:       lea    0x61c973(%rip),%rsi        # 83e82f <typeinfo name for std::_Sp_counted_ptr_inplace<onnxruntime::CpuProviderFactory, std::allocator<onnxruntime::CpuProviderFactory>, (__gnu_cxx::_Lock_policy)2>+0x14f>
    0.00 :   221ebc:       mov    %r12,%rdi
    0.00 :   221ebf:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
         :            { return _M_append(__str._M_data(), __str.size()); }
    0.00 :   221ec4:       mov    0x8(%rbx),%rdx
    0.00 :   221ec8:       mov    (%rbx),%rsi
    0.00 :   221ecb:       mov    %r12,%rdi
    0.00 :   221ece:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   221ed3:       mov    0x40(%rsp),%rsi
    0.00 :   221ed8:       mov    0x48(%rsp),%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221edd:       lea    0x60(%rsp),%r15
    0.00 :   221ee2:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221ee6:       mov    %r15,%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   221ee9:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221eec:       mov    %rax,0x60(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221ef1:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   221ef6:       lea    0x20(%rsp),%rdi
    0.00 :   221efb:       mov    %rdi,0x18(%rsp)
    0.00 :   221f00:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   221f05:       lea    0x80(%rsp),%rbx
    0.00 :   221f0d:       mov    0x18(%rsp),%r8
    0.00 :   221f12:       lea    0x61d587(%rip),%rcx        # 83f4a0 <onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const::__PRETTY_FUNCTION__>
    0.00 :   221f19:       mov    $0x24,%edx
    0.00 :   221f1e:       lea    0x61c843(%rip),%rsi        # 83e768 <typeinfo name for std::_Sp_counted_ptr_inplace<onnxruntime::CpuProviderFactory, std::allocator<onnxruntime::CpuProviderFactory>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   221f25:       mov    %rbx,%rdi
    0.00 :   221f28:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   221f2d:       mov    %r15,%rcx
    0.00 :   221f30:       xor    %edx,%edx
    0.00 :   221f32:       mov    %rbx,%rsi
    0.00 :   221f35:       mov    %rbp,%rdi
    0.00 :   221f38:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   221f3d:       mov    %rbx,%rdi
    0.00 :   221f40:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   221f45:       mov    0x18(%rsp),%rdi
    0.00 :   221f4a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221f4f:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221f54:       lea    0x10(%r15),%rax
    0.00 :   221f58:       cmp    %rax,%rdi
    0.00 :   221f5b:       je     221f62 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x762>
    0.00 :   221f5d:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221f62:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221f67:       add    $0x10,%r12
    0.00 :   221f6b:       cmp    %r12,%rdi
    0.00 :   221f6e:       je     221f75 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x775>
    0.00 :   221f70:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221f75:       lea    -0x12885c(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   221f7c:       lea    0x9ef6ad(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   221f83:       mov    %rbp,%rdi
    0.00 :   221f86:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   221f8b:       mov    %rbx,%rdi
    0.00 :   221f8e:       mov    %r12,%rbx
    0.00 :   221f91:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   221f96:       jmpq   221dfc <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5fc>
    0.00 :   221f9b:       mov    %rax,%rdi
    0.00 :   221f9e:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   221fa3:       cmp    %r12,%r14
    0.00 :   221fa6:       jne    221fad <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ad>
         :            {
         :            std::_Destroy(__result, __cur);
         :            __throw_exception_again;
    0.00 :   221fa8:       callq  53870 <__cxa_rethrow@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221fad:       mov    (%r14),%rdi
         :            if (!_M_is_local())
    0.00 :   221fb0:       lea    0x10(%r14),%rax
    0.00 :   221fb4:       cmp    %rax,%rdi
    0.00 :   221fb7:       je     221fbe <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7be>
    0.00 :   221fb9:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221fbe:       add    $0x20,%r14
    0.00 :   221fc2:       jmp    221fa3 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7a3>
    0.00 :   221fc4:       mov    %rax,%rbp
    0.00 :   221fc7:       mov    %rdx,%r12
    0.00 :   221fca:       jmpq   221db3 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5b3>
    0.00 :   221fcf:       mov    0x18(%rsp),%rdi
    0.00 :   221fd4:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221fd9:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221fde:       lea    0x10(%r15),%rdx
    0.00 :   221fe2:       cmp    %rdx,%rdi
    0.00 :   221fe5:       je     221fec <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ec>
    0.00 :   221fe7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221fec:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221ff1:       add    $0x10,%r12
    0.00 :   221ff5:       cmp    %r12,%rdi
    0.00 :   221ff8:       je     221fff <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ff>
    0.00 :   221ffa:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221fff:       mov    %rbp,%rdi
    0.00 :   222002:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   222007:       callq  53ad0 <__cxa_end_catch@plt>
    0.00 :   22200c:       mov    %rbx,%rdi
    0.00 :   22200f:       callq  53c30 <_Unwind_Resume@plt>
         :            __throw_length_error(__N(__s));
    0.00 :   222014:       lea    0x603399(%rip),%rdi        # 8253b4 <_fini+0x11c>
    0.00 :   22201b:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   222020:       mov    %rax,%rbx
    0.00 :   222023:       jmp    221fcf <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7cf>
    0.00 :   222025:       mov    %rax,%rbx
    0.00 :   222028:       jmp    222007 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x807>
    0.00 :   22202a:       mov    %rax,%rbx
    0.00 :   22202d:       jmp    221fd9 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7d9>
    0.00 :   22202f:       mov    %rax,%rbx
    0.00 :   222032:       jmp    221fec <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ec>
    0.00 :   222034:       jmp    22202f <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x82f>
    0.00 :   222036:       mov    %rax,%rbx
    0.00 :   222039:       jmp    221fff <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ff>
    0.00 :   22203b:       mov    %rax,%rdi
    0.00 :   22203e:       jmpq   221e29 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x629>
    0.00 :   222043:       jmp    22206f <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x86f>
    0.00 :   222045:       jmp    222052 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x852>
    0.00 :   222047:       mov    %rax,%rbx
    0.00 :   22204a:       mov    %rdx,%rbp
    0.00 :   22204d:       jmpq   221e19 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x619>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   222052:       lea    0x8(%rbx),%rdi
    0.00 :   222056:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
         :            ~basic_ostream() { }
    0.00 :   22205b:       mov    -0x18(%rbp),%rax
    0.00 :   22205f:       mov    %rbp,0x80(%rsp)
    0.00 :   222067:       mov    %r12,0x80(%rsp,%rax,1)
         :            ~basic_ios() { }
    0.00 :   22206f:       mov    0xa05ab2(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   222076:       lea    0x70(%rbx),%rdi
    0.00 :   22207a:       add    $0x10,%rax
    0.00 :   22207e:       mov    %rax,0xf0(%rsp)
    0.00 :   222086:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   22208b:       callq  52a50 <std::terminate()@plt>
    0.00 :   222090:       mov    %rax,%rbp
    0.00 :   222093:       mov    %rdx,%r12
    0.00 :   222096:       jmpq   221de0 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5e0>
    0.00 :   22209b:       mov    %rax,%rbx
    0.00 :   22209e:       mov    %rdx,%rbp
    0.00 :   2220a1:       jmpq   221dfc <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5fc>
    0.00 :   2220a6:       mov    %rax,%rbx
    0.00 :   2220a9:       mov    %rdx,%rbp
    0.00 :   2220ac:       jmpq   221e06 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x606>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2220b1:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2220b6:       lea    0x10(%r15),%rax
    0.00 :   2220ba:       cmp    %rax,%rdi
    0.00 :   2220bd:       je     22208b <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x88b>
    0.00 :   2220bf:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2220c4:       jmp    22208b <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x88b>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.26 for cache-misses (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000ac4d0 <operator new(unsigned long)>:
         :           _Znwm():
  100.00 :   ac4d0:       push   %rbx
    0.00 :   ac4d1:       test   %rdi,%rdi
    0.00 :   ac4d4:       mov    $0x1,%ebx
    0.00 :   ac4d9:       cmovne %rdi,%rbx
    0.00 :   ac4dd:       mov    %rbx,%rdi
    0.00 :   ac4e0:       callq  a3720 <malloc@plt>
    0.00 :   ac4e5:       test   %rax,%rax
    0.00 :   ac4e8:       jne    ac526 <operator new(unsigned long)+0x56>
    0.00 :   ac4ea:       callq  a3790 <std::get_new_handler()@plt>
    0.00 :   ac4ef:       test   %rax,%rax
    0.00 :   ac4f2:       jne    ac522 <operator new(unsigned long)+0x52>
    0.00 :   ac4f4:       mov    $0x8,%edi
    0.00 :   ac4f9:       callq  a4aa0 <__cxa_allocate_exception@plt>
    0.00 :   ac4fe:       mov    0xc09db(%rip),%rdx        # 16cee0 <std::bad_alloc::~bad_alloc()@@GLIBCXX_3.4+0xc2298>
    0.00 :   ac505:       mov    0xbffe4(%rip),%rsi        # 16c4f0 <typeinfo for std::bad_alloc@@GLIBCXX_3.4+0x80d0>
    0.00 :   ac50c:       mov    %rax,%rdi
    0.00 :   ac50f:       mov    0xc0392(%rip),%rax        # 16c8a8 <vtable for std::bad_alloc@@GLIBCXX_3.4+0x8470>
    0.00 :   ac516:       add    $0x10,%rax
    0.00 :   ac51a:       mov    %rax,(%rdi)
    0.00 :   ac51d:       callq  a5630 <__cxa_throw@plt>
    0.00 :   ac522:       callq  *%rax
    0.00 :   ac524:       jmp    ac4dd <operator new(unsigned long)+0xd>
    0.00 :   ac526:       pop    %rbx
    0.00 :   ac527:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a8bd0 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)>:
         :            _ZN11onnxruntime14ExecutionFrame41AllocateTensorWithPreAllocateBufferHelperER8OrtValuePvPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeE():
  100.00 :   5a8bd0:       push   %r15
    0.00 :   5a8bd2:       mov    %rcx,%r15
    0.00 :   5a8bd5:       push   %r14
    0.00 :   5a8bd7:       mov    %r8,%r14
    0.00 :   5a8bda:       push   %r13
    0.00 :   5a8bdc:       mov    %rdi,%r13
    0.00 :   5a8bdf:       push   %r12
    0.00 :   5a8be1:       push   %rbp
    0.00 :   5a8be2:       push   %rbx
    0.00 :   5a8be3:       mov    %rdx,%rbx
    0.00 :   5a8be6:       sub    $0x18,%rsp
    0.00 :   5a8bea:       mov    %r9,0x8(%rsp)
    0.00 :   5a8bef:       callq  59bf30 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::Tensor>()>
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   5a8bf4:       mov    $0x58,%edi
    0.00 :   5a8bf9:       mov    %rax,%r12
    0.00 :   5a8bfc:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5a8c01:       mov    0x8(%rsp),%r8
    0.00 :   5a8c06:       xor    %r9d,%r9d
    0.00 :   5a8c09:       mov    %r15,%rcx
    0.00 :   5a8c0c:       mov    0x50(%rsp),%rdx
    0.00 :   5a8c11:       mov    %r14,%rsi
    0.00 :   5a8c14:       mov    %rax,%rdi
    0.00 :   5a8c17:       mov    %rax,%rbp
    0.00 :   5a8c1a:       callq  5ee2e0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)>
    0.00 :   5a8c1f:       mov    (%r12),%rax
    0.00 :   5a8c23:       mov    %r12,%rdi
    0.00 :   5a8c26:       callq  *0x20(%rax)
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5a8c29:       mov    $0x20,%edi
    0.00 :   5a8c2e:       mov    %rax,%r14
    0.00 :   5a8c31:       callq  53340 <operator new(unsigned long)@plt>
         :            _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
         :            : _M_impl(__p, std::move(__d), _Alloc()) { }
         :
         :            // __d(__p) must not throw.
         :            _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5a8c36:       lea    0x668b73(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5a8c3d:       mov    %rbp,0x18(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5a8c41:       movabs $0x100000001,%rsi
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   5a8c4b:       mov    %rbp,(%rbx)
         :            }
         :
         :            void
         :            _M_swap(__shared_count& __r) noexcept
         :            {
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5a8c4e:       mov    0x8(%rbx),%rbp
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5a8c52:       add    $0x10,%rdx
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5a8c56:       mov    %rsi,0x8(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5a8c5a:       mov    %rdx,(%rax)
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5a8c5d:       mov    %r14,0x10(%rax)
         :            __r._M_pi = _M_pi;
    0.00 :   5a8c61:       mov    %rax,0x8(%rbx)
         :            if (_M_pi != nullptr)
    0.00 :   5a8c65:       test   %rbp,%rbp
    0.00 :   5a8c68:       je     5a8c85 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)+0xb5>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5a8c6a:       mov    0x67f297(%rip),%r14        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5a8c71:       test   %r14,%r14
    0.00 :   5a8c74:       je     5a8ca8 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)+0xd8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5a8c76:       mov    $0xffffffff,%eax
    0.00 :   5a8c7b:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5a8c80:       cmp    $0x1,%eax
    0.00 :   5a8c83:       je     5a8cb6 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)+0xe6>
    0.00 :   5a8c85:       mov    %r12,0x10(%rbx)
    0.00 :   5a8c89:       mov    %r13,%rax
    0.00 :   5a8c8c:       movq   $0x0,0x0(%r13)
    0.00 :   5a8c94:       add    $0x18,%rsp
    0.00 :   5a8c98:       pop    %rbx
    0.00 :   5a8c99:       pop    %rbp
    0.00 :   5a8c9a:       pop    %r12
    0.00 :   5a8c9c:       pop    %r13
    0.00 :   5a8c9e:       pop    %r14
    0.00 :   5a8ca0:       pop    %r15
    0.00 :   5a8ca2:       retq
    0.00 :   5a8ca3:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5a8ca8:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5a8cab:       lea    -0x1(%rax),%edx
    0.00 :   5a8cae:       mov    %edx,0x8(%rbp)
    0.00 :   5a8cb1:       cmp    $0x1,%eax
    0.00 :   5a8cb4:       jne    5a8c85 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)+0xb5>
         :            _M_dispose();
    0.00 :   5a8cb6:       mov    0x0(%rbp),%rax
    0.00 :   5a8cba:       mov    %rbp,%rdi
    0.00 :   5a8cbd:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5a8cc0:       test   %r14,%r14
    0.00 :   5a8cc3:       je     5a8ce0 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)+0x110>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5a8cc5:       mov    $0xffffffff,%eax
    0.00 :   5a8cca:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5a8ccf:       cmp    $0x1,%eax
    0.00 :   5a8cd2:       jne    5a8c85 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)+0xb5>
         :            _M_destroy();
    0.00 :   5a8cd4:       mov    0x0(%rbp),%rax
    0.00 :   5a8cd8:       mov    %rbp,%rdi
    0.00 :   5a8cdb:       callq  *0x18(%rax)
    0.00 :   5a8cde:       jmp    5a8c85 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)+0xb5>
         :            _Atomic_word __result = *__mem;
    0.00 :   5a8ce0:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5a8ce3:       lea    -0x1(%rax),%edx
    0.00 :   5a8ce6:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5a8ce9:       jmp    5a8ccf <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)+0xff>
    0.00 :   5a8ceb:       mov    %rax,%rbx
    0.00 :   5a8cee:       jmpq   b10a2 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&) [clone .cold.426]>
    0.00 :   5a8cf3:       mov    %rax,%rbx
    0.00 :   5a8cf6:       jmpq   b10b2 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&) [clone .cold.426]+0x10>
    0.00 :   5a8cfb:       jmpq   b10c7 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&) [clone .cold.426]+0x25>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a91d0 <onnxruntime::IExecutionFrame::GetMLValue(int) const>:
         :            _ZNK11onnxruntime15IExecutionFrame10GetMLValueEi():
  100.00 :   5a91d0:       push   %r14
    0.00 :   5a91d2:       push   %r13
    0.00 :   5a91d4:       push   %r12
    0.00 :   5a91d6:       push   %rbp
    0.00 :   5a91d7:       push   %rbx
    0.00 :   5a91d8:       sub    $0xb0,%rsp
    0.00 :   5a91df:       mov    %fs:0x28,%rax
    0.00 :   5a91e8:       mov    %rax,0xa8(%rsp)
    0.00 :   5a91f0:       xor    %eax,%eax
    0.00 :   5a91f2:       test   %esi,%esi
    0.00 :   5a91f4:       js     5a9232 <onnxruntime::IExecutionFrame::GetMLValue(int) const+0x62>
    0.00 :   5a91f6:       movslq %esi,%rsi
    0.00 :   5a91f9:       cmp    0x28(%rdi),%rsi
    0.00 :   5a91fd:       jae    5a9232 <onnxruntime::IExecutionFrame::GetMLValue(int) const+0x62>
    0.00 :   5a91ff:       mov    0xa8(%rsp),%rcx
    0.00 :   5a9207:       xor    %fs:0x28,%rcx
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5a9210:       mov    0x10(%rdi),%rax
    0.00 :   5a9214:       lea    (%rsi,%rsi,4),%rdx
    0.00 :   5a9218:       lea    (%rax,%rdx,8),%rax
    0.00 :   5a921c:       jne    5a92c8 <onnxruntime::IExecutionFrame::GetMLValue(int) const+0xf8>
    0.00 :   5a9222:       add    $0xb0,%rsp
    0.00 :   5a9229:       pop    %rbx
    0.00 :   5a922a:       pop    %rbp
    0.00 :   5a922b:       pop    %r12
    0.00 :   5a922d:       pop    %r13
    0.00 :   5a922f:       pop    %r14
    0.00 :   5a9231:       retq
    0.00 :   5a9232:       mov    $0xa0,%edi
    0.00 :   5a9237:       lea    0x20(%rsp),%rbx
    0.00 :   5a923c:       mov    %rsp,%r13
    0.00 :   5a923f:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5a9244:       mov    %rbx,%rdi
    0.00 :   5a9247:       mov    %rax,%r12
    0.00 :   5a924a:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5a924f:       mov    %r13,%rdi
    0.00 :   5a9252:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5a9257:       lea    0x40(%rsp),%r14
    0.00 :   5a925c:       mov    %r13,%r8
    0.00 :   5a925f:       lea    0x2e759a(%rip),%rcx        # 890800 <onnxruntime::IExecutionFrame::GetMLValue(int) const::__PRETTY_FUNCTION__>
    0.00 :   5a9266:       mov    $0x57,%edx
    0.00 :   5a926b:       lea    0x2e66b6(%rip),%rsi        # 88f928 <std::piecewise_construct+0x4b>
    0.00 :   5a9272:       mov    %r14,%rdi
    0.00 :   5a9275:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5a927a:       mov    %rbx,%rcx
    0.00 :   5a927d:       lea    0x2e66e4(%rip),%rdx        # 88f968 <std::piecewise_construct+0x8b>
    0.00 :   5a9284:       mov    %r14,%rsi
    0.00 :   5a9287:       mov    %r12,%rdi
    0.00 :   5a928a:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5a928f:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5a9292:       add    $0x10,%rbx
    0.00 :   5a9296:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5a929b:       mov    %r13,%rdi
    0.00 :   5a929e:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5a92a3:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5a92a8:       cmp    %rbx,%rdi
    0.00 :   5a92ab:       je     5a92b2 <onnxruntime::IExecutionFrame::GetMLValue(int) const+0xe2>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5a92ad:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5a92b2:       lea    -0x4afb99(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   5a92b9:       lea    0x668370(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   5a92c0:       mov    %r12,%rdi
    0.00 :   5a92c3:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   5a92c8:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5a92cd:       mov    %rax,%rbp
    0.00 :   5a92d0:       jmp    5a92ec <onnxruntime::IExecutionFrame::GetMLValue(int) const+0x11c>
    0.00 :   5a92d2:       mov    %rax,%rbp
    0.00 :   5a92d5:       jmp    5a92dc <onnxruntime::IExecutionFrame::GetMLValue(int) const+0x10c>
    0.00 :   5a92d7:       mov    %rax,%rbp
    0.00 :   5a92da:       jmp    5a92e4 <onnxruntime::IExecutionFrame::GetMLValue(int) const+0x114>
    0.00 :   5a92dc:       mov    %r14,%rdi
    0.00 :   5a92df:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5a92e4:       mov    %r13,%rdi
    0.00 :   5a92e7:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5a92ec:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5a92f1:       add    $0x10,%rbx
    0.00 :   5a92f5:       cmp    %rbx,%rdi
    0.00 :   5a92f8:       je     5a92ff <onnxruntime::IExecutionFrame::GetMLValue(int) const+0x12f>
    0.00 :   5a92fa:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5a92ff:       mov    %r12,%rdi
    0.00 :   5a9302:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   5a9307:       mov    %rbp,%rdi
    0.00 :   5a930a:       callq  53c30 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .plt:
         :
         :           0000000000053300 <operator delete(void*)@plt>:
  100.00 :   53300:       jmpq   *0xbd5242(%rip)        # c28548 <operator delete(void*)@GLIBCXX_3.4>
    0.00 :   53306:       pushq  $0xa6
    0.00 :   5330b:       jmpq   52890 <.plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004893c0 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const>:
         :            _ZNK11onnxruntime9SplitBase17PrepareForComputeERKNS_11TensorShapeEiRlRiS5_S5_RSt6vectorIlSaIlEE():
    0.00 :   4893c0:       push   %r15
    0.00 :   4893c2:       push   %r14
    0.00 :   4893c4:       mov    %rsi,%r14
    0.00 :   4893c7:       push   %r13
    0.00 :   4893c9:       push   %r12
    0.00 :   4893cb:       mov    %rdx,%r12
    0.00 :   4893ce:       push   %rbp
    0.00 :   4893cf:       push   %rbx
    0.00 :   4893d0:       sub    $0x208,%rsp
    0.00 :   4893d7:       mov    0x248(%rsp),%rax
    0.00 :   4893df:       mov    %ecx,0x14(%rsp)
    0.00 :   4893e3:       mov    %rdi,0x8(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4893e8:       mov    0x8(%rdx),%rcx
    0.00 :   4893ec:       mov    %rax,0x28(%rsp)
    0.00 :   4893f1:       mov    0x240(%rsp),%r15
    0.00 :   4893f9:       mov    0x250(%rsp),%rbp
    0.00 :   489401:       mov    %fs:0x28,%rax
    0.00 :   48940a:       mov    %rax,0x1f8(%rsp)
    0.00 :   489412:       xor    %eax,%eax
    0.00 :   489414:       mov    (%rdx),%rax
    0.00 :   489417:       mov    (%rsi),%rdx
    0.00 :   48941a:       sub    %rax,%rcx
    0.00 :   48941d:       sar    $0x3,%rcx
    0.00 :   489421:       mov    %rcx,%rsi
    0.00 :   489424:       mov    %rcx,%r13
    0.00 :   489427:       neg    %rsi
    0.00 :   48942a:       cmp    %rsi,%rdx
    0.00 :   48942d:       jl     489c59 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x899>
    0.00 :   489433:       cmp    %rcx,%rdx
    0.00 :   489436:       jge    489c59 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x899>
    0.00 :   48943c:       lea    (%rdx,%rcx,1),%rsi
    0.00 :   489440:       test   %rdx,%rdx
    0.00 :   489443:       mov    %r12,%rdi
    0.00 :   489446:       mov    %r9,0x20(%rsp)
    0.00 :   48944b:       cmovs  %rsi,%rdx
    0.00 :   48944f:       mov    %r8,%rbx
    0.00 :   489452:       mov    %rdx,(%r8)
    0.00 :   489455:       mov    (%rax,%rdx,8),%rax
    0.00 :   489459:       mov    %rdx,%rsi
    0.00 :   48945c:       mov    %rax,0x18(%rsp)
    0.00 :   489461:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   489466:       mov    0x20(%rsp),%r9
    0.00 :   48946b:       movslq %eax,%rdx
    0.00 :   48946e:       cmp    %rdx,%rax
    0.00 :   489471:       jne    489916 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x556>
    0.00 :   489477:       mov    %eax,(%r9)
    0.00 :   48947a:       mov    (%rbx),%rsi
    0.00 :   48947d:       mov    %r12,%rdi
    0.00 :   489480:       callq  5f2a20 <onnxruntime::TensorShape::SizeFromDimension(unsigned long) const>
    0.00 :   489485:       movslq %eax,%rdx
    0.00 :   489488:       cmp    %rdx,%rax
    0.00 :   48948b:       jne    489916 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x556>
    0.00 :   489491:       mov    (%rbx),%rsi
    0.00 :   489494:       mov    %eax,(%r15)
    0.00 :   489497:       mov    $0x1,%edx
    0.00 :   48949c:       add    $0x1,%rsi
    0.00 :   4894a0:       cmp    %r13,%rsi
    0.00 :   4894a3:       jne    489900 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x540>
    0.00 :   4894a9:       mov    0x28(%rsp),%rax
         :            *  Returns true if the %vector is empty.  (Thus begin() would
         :            *  equal end().)
         :            */
         :            bool
         :            empty() const _GLIBCXX_NOEXCEPT
         :            { return begin() == end(); }
    0.00 :   4894ae:       mov    0x0(%rbp),%rdi
    0.00 :   4894b2:       movslq 0x14(%rsp),%r15
    0.00 :   4894b7:       mov    %edx,(%rax)
    0.00 :   4894b9:       mov    0x8(%rbp),%rdx
    0.00 :   4894bd:       cmp    %rdi,%rdx
    0.00 :   4894c0:       je     489868 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x4a8>
    0.00 :   4894c6:       mov    0x20(%r14),%rbp
    0.00 :   4894ca:       cmp    $0xffffffffffffffff,%rbp
    0.00 :   4894ce:       je     489848 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x488>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4894d4:       sub    %rdi,%rdx
    0.00 :   4894d7:       mov    %rdx,%rax
    0.00 :   4894da:       sar    $0x3,%rax
    0.00 :   4894de:       mov    %rax,0x30(%rsp)
    0.00 :   4894e3:       cmp    %rbp,0x18(%rsp)
    0.00 :   4894e8:       jne    4894f3 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x133>
    0.00 :   4894ea:       cmp    %r15,%rax
    0.00 :   4894ed:       je     4898e7 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x527>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   4894f3:       lea    0x80(%rsp),%rbx
    0.00 :   4894fb:       lea    0x70(%rbx),%rdi
    0.00 :   4894ff:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   489504:       mov    0x79e61d(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   48950b:       xor    %esi,%esi
    0.00 :   48950d:       movq   $0x0,0x1c8(%rsp)
    0.00 :   489519:       movq   $0x0,0x1d8(%rsp)
    0.00 :   489525:       mov    %rax,0x18(%rsp)
    0.00 :   48952a:       add    $0x10,%rax
    0.00 :   48952e:       mov    %rax,0xf0(%rsp)
    0.00 :   489536:       xor    %eax,%eax
    0.00 :   489538:       mov    %ax,0x1d0(%rsp)
    0.00 :   489540:       mov    0x79e859(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   489547:       movq   $0x0,0x1e0(%rsp)
    0.00 :   489553:       movq   $0x0,0x1e8(%rsp)
    0.00 :   48955f:       mov    0x8(%rax),%r15
    0.00 :   489563:       movq   $0x0,0x1f0(%rsp)
    0.00 :   48956f:       mov    0x10(%rax),%rax
    0.00 :   489573:       mov    -0x18(%r15),%rdi
    0.00 :   489577:       mov    %r15,0x80(%rsp)
    0.00 :   48957f:       mov    %rax,0x38(%rsp)
    0.00 :   489584:       add    %rbx,%rdi
    0.00 :   489587:       mov    %rax,(%rdi)
    0.00 :   48958a:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   48958f:       mov    0x79e7ca(%rip),%r13        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   489596:       lea    0x40(%rbx),%rdi
    0.00 :   48959a:       movq   $0x0,0x90(%rsp)
    0.00 :   4895a6:       movq   $0x0,0x98(%rsp)
    0.00 :   4895b2:       movq   $0x0,0xa0(%rsp)
    0.00 :   4895be:       lea    0x18(%r13),%rax
    0.00 :   4895c2:       mov    %rax,0x80(%rsp)
    0.00 :   4895ca:       lea    0x40(%r13),%rax
    0.00 :   4895ce:       mov    %rax,0xf0(%rsp)
    0.00 :   4895d6:       mov    0x79e683(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   4895dd:       movq   $0x0,0xa8(%rsp)
    0.00 :   4895e9:       mov    %rax,0x20(%rsp)
    0.00 :   4895ee:       add    $0x10,%rax
    0.00 :   4895f2:       mov    %rax,0x88(%rsp)
    0.00 :   4895fa:       movq   $0x0,0xb0(%rsp)
    0.00 :   489606:       movq   $0x0,0xb8(%rsp)
    0.00 :   489612:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   489617:       mov    0x79e9ba(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   48961e:       lea    0x8(%rbx),%rsi
    0.00 :   489622:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   489626:       movl   $0x10,0xc8(%rsp)
    0.00 :   489631:       mov    %rax,0x28(%rsp)
    0.00 :   489636:       add    $0x10,%rax
    0.00 :   48963a:       mov    %rax,0x88(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   489642:       lea    0x60(%rbx),%rax
    0.00 :   489646:       mov    %rax,0xd0(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   48964e:       movq   $0x0,0xd8(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   48965a:       movb   $0x0,0xe0(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   489662:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   489667:       mov    $0x35,%edx
    0.00 :   48966c:       lea    0x3ef8cd(%rip),%rsi        # 878f40 <typeinfo name for onnxruntime::DepthToSpace<float>+0x180>
    0.00 :   489673:       mov    %rbx,%rdi
    0.00 :   489676:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   48967b:       mov    (%r14),%rsi
    0.00 :   48967e:       mov    %rbx,%rdi
    0.00 :   489681:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   489686:       mov    $0xd,%edx
    0.00 :   48968b:       lea    0x3ef85c(%rip),%rsi        # 878eee <typeinfo name for onnxruntime::DepthToSpace<float>+0x12e>
    0.00 :   489692:       mov    %rbx,%rdi
    0.00 :   489695:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   48969a:       mov    %r12,%rsi
    0.00 :   48969d:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4896a0:       lea    0x60(%rsp),%r12
    0.00 :   4896a5:       callq  5f25f0 <onnxruntime::operator<<(std::ostream&, onnxruntime::TensorShape const&)>
    0.00 :   4896aa:       mov    $0xc,%edx
    0.00 :   4896af:       lea    0x3ef82b(%rip),%rsi        # 878ee1 <typeinfo name for onnxruntime::DepthToSpace<float>+0x121>
    0.00 :   4896b6:       mov    %rbx,%rdi
    0.00 :   4896b9:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   4896be:       mov    0x14(%rsp),%esi
    0.00 :   4896c2:       mov    %rbx,%rdi
    0.00 :   4896c5:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   4896ca:       mov    $0x3b,%edx
    0.00 :   4896cf:       lea    0x3ef8a2(%rip),%rsi        # 878f78 <typeinfo name for onnxruntime::DepthToSpace<float>+0x1b8>
    0.00 :   4896d6:       mov    %rbx,%rdi
    0.00 :   4896d9:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   4896de:       mov    0x30(%rsp),%rsi
    0.00 :   4896e3:       mov    %rbx,%rdi
    0.00 :   4896e6:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   4896eb:       mov    $0x40,%edx
    0.00 :   4896f0:       lea    0x3ef8c1(%rip),%rsi        # 878fb8 <typeinfo name for onnxruntime::DepthToSpace<float>+0x1f8>
    0.00 :   4896f7:       mov    %rbx,%rdi
    0.00 :   4896fa:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   4896ff:       mov    %rbp,%rsi
    0.00 :   489702:       mov    %rbx,%rdi
    0.00 :   489705:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   48970a:       lea    0x10(%r12),%rax
    0.00 :   48970f:       movb   $0x0,0x70(%rsp)
    0.00 :   489714:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   489719:       mov    0xb0(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   489721:       movq   $0x0,0x68(%rsp)
    0.00 :   48972a:       test   %rax,%rax
    0.00 :   48972d:       je     489c08 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x848>
         :            if (this->pptr() > this->egptr())
    0.00 :   489733:       mov    0xa0(%rsp),%r8
    0.00 :   48973b:       mov    0xa8(%rsp),%rcx
    0.00 :   489743:       cmp    %r8,%rax
    0.00 :   489746:       jbe    489920 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x560>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   48974c:       sub    %rcx,%rax
    0.00 :   48974f:       xor    %edx,%edx
    0.00 :   489751:       xor    %esi,%esi
    0.00 :   489753:       mov    %r12,%rdi
    0.00 :   489756:       mov    %rax,%r8
    0.00 :   489759:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   48975e:       lea    0x18(%r13),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   489762:       mov    0xd0(%rsp),%rdi
    0.00 :   48976a:       mov    %rax,0x80(%rsp)
    0.00 :   489772:       lea    0x40(%r13),%rax
    0.00 :   489776:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   48977e:       mov    0x28(%rsp),%rax
    0.00 :   489783:       add    $0x10,%rax
    0.00 :   489787:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   48978f:       lea    0x60(%rbx),%rax
    0.00 :   489793:       cmp    %rax,%rdi
    0.00 :   489796:       je     48979d <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x3dd>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   489798:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   48979d:       mov    0x20(%rsp),%rax
    0.00 :   4897a2:       lea    0x40(%rbx),%rdi
    0.00 :   4897a6:       add    $0x10,%rax
    0.00 :   4897aa:       mov    %rax,0x88(%rsp)
    0.00 :   4897b2:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   4897b7:       mov    -0x18(%r15),%rax
    0.00 :   4897bb:       mov    0x38(%rsp),%rcx
    0.00 :   4897c0:       mov    %r15,0x80(%rsp)
         :            ~basic_ios() { }
    0.00 :   4897c8:       lea    0x70(%rbx),%rdi
    0.00 :   4897cc:       mov    %rcx,0x80(%rsp,%rax,1)
    0.00 :   4897d4:       mov    0x18(%rsp),%rax
    0.00 :   4897d9:       add    $0x10,%rax
    0.00 :   4897dd:       mov    %rax,0xf0(%rsp)
    0.00 :   4897e5:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   4897ea:       mov    0x8(%rsp),%rdi
    0.00 :   4897ef:       mov    %r12,%rcx
    0.00 :   4897f2:       mov    $0x1,%edx
    0.00 :   4897f7:       mov    $0x2,%esi
    0.00 :   4897fc:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   489801:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   489806:       add    $0x10,%r12
    0.00 :   48980a:       cmp    %r12,%rdi
    0.00 :   48980d:       je     489814 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x454>
    0.00 :   48980f:       callq  53300 <operator delete(void*)@plt>
  100.00 :   489814:       mov    0x1f8(%rsp),%rcx
    0.00 :   48981c:       xor    %fs:0x28,%rcx
    0.00 :   489825:       mov    0x8(%rsp),%rax
    0.00 :   48982a:       jne    489d68 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x9a8>
    0.00 :   489830:       add    $0x208,%rsp
    0.00 :   489837:       pop    %rbx
    0.00 :   489838:       pop    %rbp
    0.00 :   489839:       pop    %r12
    0.00 :   48983b:       pop    %r13
    0.00 :   48983d:       pop    %r14
    0.00 :   48983f:       pop    %r15
    0.00 :   489841:       retq
    0.00 :   489842:       nopw   0x0(%rax,%rax,1)
    0.00 :   489848:       mov    %rdi,%rax
    0.00 :   48984b:       xor    %ebp,%ebp
    0.00 :   48984d:       nopl   (%rax)
         :            // concept requirements
         :            __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
         :            __glibcxx_requires_valid_range(__first, __last);
         :
         :            for (; __first != __last; ++__first)
         :            __init = __init + *__first;
    0.00 :   489850:       add    (%rax),%rbp
         :            for (; __first != __last; ++__first)
    0.00 :   489853:       add    $0x8,%rax
    0.00 :   489857:       cmp    %rax,%rdx
    0.00 :   48985a:       jne    489850 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x490>
    0.00 :   48985c:       jmpq   4894d4 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x114>
    0.00 :   489861:       nopl   0x0(%rax)
    0.00 :   489868:       mov    0x18(%rsp),%rax
    0.00 :   48986d:       xor    %edx,%edx
    0.00 :   48986f:       div    %r15
    0.00 :   489872:       mov    %rdx,%r13
    0.00 :   489875:       test   %rdx,%rdx
    0.00 :   489878:       jne    489938 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x578>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48987e:       test   %r15,%r15
    0.00 :   489881:       je     489c38 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x878>
         :            if (__n > this->max_size())
    0.00 :   489887:       movabs $0x1fffffffffffffff,%rax
    0.00 :   489891:       cmp    %rax,%r15
    0.00 :   489894:       ja     489d6d <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x9ad>
    0.00 :   48989a:       mov    0x18(%rsp),%rax
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   48989f:       lea    0x0(,%r15,8),%r12
    0.00 :   4898a7:       mov    %r12,%rdi
    0.00 :   4898aa:       cqto
    0.00 :   4898ac:       idiv   %r15
    0.00 :   4898af:       mov    %rax,%rbx
    0.00 :   4898b2:       callq  53340 <operator new(unsigned long)@plt>
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4898b7:       lea    (%rax,%r12,1),%rdx
         :            __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :            __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
         :            {
         :            const _Tp __tmp = __value;
         :            for (__decltype(__n + 0) __niter = __n;
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   4898bb:       nopl   0x0(%rax,%rax,1)
         :            *__first = __tmp;
    0.00 :   4898c0:       mov    %rbx,(%rax,%r13,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   4898c4:       add    $0x1,%r13
    0.00 :   4898c8:       cmp    %r13,%r15
    0.00 :   4898cb:       jne    4898c0 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x500>
    0.00 :   4898cd:       mov    0x0(%rbp),%rdi
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   4898d1:       mov    %rax,0x0(%rbp)
    0.00 :   4898d5:       mov    %rdx,0x8(%rbp)
    0.00 :   4898d9:       mov    %rdx,0x10(%rbp)
         :            if (__p)
    0.00 :   4898dd:       test   %rdi,%rdi
    0.00 :   4898e0:       je     4898e7 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x527>
         :            ::operator delete(__p);
    0.00 :   4898e2:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4898e7:       mov    0x8(%rsp),%rax
    0.00 :   4898ec:       movq   $0x0,(%rax)
         :            };
         :
         :            template<std::size_t _Idx, typename _Head>
         :            struct _Head_base<_Idx, _Head, false>
         :            {
         :            constexpr _Head_base()
    0.00 :   4898f3:       jmpq   489814 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x454>
    0.00 :   4898f8:       nopl   0x0(%rax,%rax,1)
    0.00 :   489900:       mov    %r12,%rdi
    0.00 :   489903:       callq  5f2a20 <onnxruntime::TensorShape::SizeFromDimension(unsigned long) const>
    0.00 :   489908:       movslq %eax,%rcx
    0.00 :   48990b:       mov    %eax,%edx
    0.00 :   48990d:       cmp    %rcx,%rax
    0.00 :   489910:       je     4894a9 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0xe9>
    0.00 :   489916:       callq  52a50 <std::terminate()@plt>
    0.00 :   48991b:       nopl   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   489920:       sub    %rcx,%r8
    0.00 :   489923:       xor    %edx,%edx
    0.00 :   489925:       xor    %esi,%esi
    0.00 :   489927:       mov    %r12,%rdi
    0.00 :   48992a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   48992f:       jmpq   48975e <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x39e>
    0.00 :   489934:       nopl   0x0(%rax)
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   489938:       lea    0x80(%rsp),%rbx
    0.00 :   489940:       lea    0x70(%rbx),%rdi
    0.00 :   489944:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   489949:       mov    0x79e1d8(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   489950:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   489952:       xor    %esi,%esi
    0.00 :   489954:       mov    %dx,0x1d0(%rsp)
    0.00 :   48995c:       mov    %rax,0x18(%rsp)
    0.00 :   489961:       add    $0x10,%rax
    0.00 :   489965:       mov    %rax,0xf0(%rsp)
    0.00 :   48996d:       mov    0x79e42c(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   489974:       movq   $0x0,0x1c8(%rsp)
    0.00 :   489980:       mov    0x8(%rax),%rbp
    0.00 :   489984:       mov    0x10(%rax),%r15
    0.00 :   489988:       movq   $0x0,0x1d8(%rsp)
    0.00 :   489994:       movq   $0x0,0x1e0(%rsp)
    0.00 :   4899a0:       mov    -0x18(%rbp),%rdi
    0.00 :   4899a4:       mov    %rbp,0x80(%rsp)
    0.00 :   4899ac:       movq   $0x0,0x1e8(%rsp)
    0.00 :   4899b8:       movq   $0x0,0x1f0(%rsp)
    0.00 :   4899c4:       add    %rbx,%rdi
    0.00 :   4899c7:       mov    %r15,(%rdi)
    0.00 :   4899ca:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   4899cf:       mov    0x79e38a(%rip),%r13        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   4899d6:       lea    0x40(%rbx),%rdi
    0.00 :   4899da:       movq   $0x0,0x90(%rsp)
    0.00 :   4899e6:       movq   $0x0,0x98(%rsp)
    0.00 :   4899f2:       movq   $0x0,0xa0(%rsp)
    0.00 :   4899fe:       lea    0x18(%r13),%rax
    0.00 :   489a02:       mov    %rax,0x80(%rsp)
    0.00 :   489a0a:       lea    0x40(%r13),%rax
    0.00 :   489a0e:       mov    %rax,0xf0(%rsp)
    0.00 :   489a16:       mov    0x79e243(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   489a1d:       movq   $0x0,0xa8(%rsp)
    0.00 :   489a29:       mov    %rax,0x20(%rsp)
    0.00 :   489a2e:       add    $0x10,%rax
    0.00 :   489a32:       mov    %rax,0x88(%rsp)
    0.00 :   489a3a:       movq   $0x0,0xb0(%rsp)
    0.00 :   489a46:       movq   $0x0,0xb8(%rsp)
    0.00 :   489a52:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   489a57:       mov    0x79e57a(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   489a5e:       lea    0x8(%rbx),%rsi
    0.00 :   489a62:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   489a66:       movl   $0x10,0xc8(%rsp)
    0.00 :   489a71:       mov    %rax,0x28(%rsp)
    0.00 :   489a76:       add    $0x10,%rax
    0.00 :   489a7a:       mov    %rax,0x88(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   489a82:       lea    0x60(%rbx),%rax
    0.00 :   489a86:       mov    %rax,0xd0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   489a8e:       movq   $0x0,0xd8(%rsp)
    0.00 :   489a9a:       movb   $0x0,0xe0(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   489aa2:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   489aa7:       mov    $0x3b,%edx
    0.00 :   489aac:       lea    0x3ef44d(%rip),%rsi        # 878f00 <typeinfo name for onnxruntime::DepthToSpace<float>+0x140>
    0.00 :   489ab3:       mov    %rbx,%rdi
    0.00 :   489ab6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   489abb:       mov    %r12,%rsi
    0.00 :   489abe:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   489ac1:       lea    0x60(%rsp),%r12
    0.00 :   489ac6:       callq  5f25f0 <onnxruntime::operator<<(std::ostream&, onnxruntime::TensorShape const&)>
    0.00 :   489acb:       mov    $0x6,%edx
    0.00 :   489ad0:       lea    0x3ef403(%rip),%rsi        # 878eda <typeinfo name for onnxruntime::DepthToSpace<float>+0x11a>
    0.00 :   489ad7:       mov    %rbx,%rdi
    0.00 :   489ada:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   489adf:       mov    (%r14),%rsi
    0.00 :   489ae2:       mov    %rbx,%rdi
    0.00 :   489ae5:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   489aea:       mov    $0xc,%edx
    0.00 :   489aef:       lea    0x3ef3eb(%rip),%rsi        # 878ee1 <typeinfo name for onnxruntime::DepthToSpace<float>+0x121>
    0.00 :   489af6:       mov    %rbx,%rdi
    0.00 :   489af9:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   489afe:       mov    0x14(%rsp),%esi
    0.00 :   489b02:       mov    %rbx,%rdi
    0.00 :   489b05:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   489b0a:       lea    0x10(%r12),%rax
    0.00 :   489b0f:       movb   $0x0,0x70(%rsp)
    0.00 :   489b14:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   489b19:       mov    0xb0(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   489b21:       movq   $0x0,0x68(%rsp)
    0.00 :   489b2a:       test   %rax,%rax
    0.00 :   489b2d:       je     489c48 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x888>
         :            if (this->pptr() > this->egptr())
    0.00 :   489b33:       mov    0xa0(%rsp),%r8
    0.00 :   489b3b:       mov    0xa8(%rsp),%rcx
    0.00 :   489b43:       cmp    %r8,%rax
    0.00 :   489b46:       jbe    489c20 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x860>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   489b4c:       sub    %rcx,%rax
    0.00 :   489b4f:       xor    %edx,%edx
    0.00 :   489b51:       xor    %esi,%esi
    0.00 :   489b53:       mov    %r12,%rdi
    0.00 :   489b56:       mov    %rax,%r8
    0.00 :   489b59:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   489b5e:       lea    0x18(%r13),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   489b62:       mov    0xd0(%rsp),%rdi
    0.00 :   489b6a:       mov    %rax,0x80(%rsp)
    0.00 :   489b72:       lea    0x40(%r13),%rax
    0.00 :   489b76:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   489b7e:       mov    0x28(%rsp),%rax
    0.00 :   489b83:       add    $0x10,%rax
    0.00 :   489b87:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   489b8f:       lea    0x60(%rbx),%rax
    0.00 :   489b93:       cmp    %rax,%rdi
    0.00 :   489b96:       je     489b9d <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x7dd>
    0.00 :   489b98:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   489b9d:       mov    0x20(%rsp),%rax
    0.00 :   489ba2:       lea    0x40(%rbx),%rdi
    0.00 :   489ba6:       add    $0x10,%rax
    0.00 :   489baa:       mov    %rax,0x88(%rsp)
    0.00 :   489bb2:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   489bb7:       mov    -0x18(%rbp),%rax
         :            ~basic_ios() { }
    0.00 :   489bbb:       lea    0x70(%rbx),%rdi
    0.00 :   489bbf:       mov    %rbp,0x80(%rsp)
    0.00 :   489bc7:       mov    %r15,0x80(%rsp,%rax,1)
    0.00 :   489bcf:       mov    0x18(%rsp),%rax
    0.00 :   489bd4:       add    $0x10,%rax
    0.00 :   489bd8:       mov    %rax,0xf0(%rsp)
    0.00 :   489be0:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   489be5:       mov    0x8(%rsp),%rdi
    0.00 :   489bea:       mov    %r12,%rcx
    0.00 :   489bed:       mov    $0x1,%edx
    0.00 :   489bf2:       mov    $0x2,%esi
    0.00 :   489bf7:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   489bfc:       jmpq   489801 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x441>
    0.00 :   489c01:       nopl   0x0(%rax)
         :            this->_M_assign(__str);
    0.00 :   489c08:       lea    0x50(%rbx),%rsi
    0.00 :   489c0c:       mov    %r12,%rdi
    0.00 :   489c0f:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   489c14:       jmpq   48975e <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x39e>
    0.00 :   489c19:       nopl   0x0(%rax)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   489c20:       sub    %rcx,%r8
    0.00 :   489c23:       xor    %edx,%edx
    0.00 :   489c25:       xor    %esi,%esi
    0.00 :   489c27:       mov    %r12,%rdi
    0.00 :   489c2a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   489c2f:       jmpq   489b5e <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x79e>
    0.00 :   489c34:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   489c38:       xor    %eax,%eax
    0.00 :   489c3a:       xor    %edx,%edx
    0.00 :   489c3c:       jmpq   4898d1 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x511>
    0.00 :   489c41:       nopl   0x0(%rax)
         :            this->_M_assign(__str);
    0.00 :   489c48:       lea    0x50(%rbx),%rsi
    0.00 :   489c4c:       mov    %r12,%rdi
    0.00 :   489c4f:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   489c54:       jmpq   489b5e <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const+0x79e>
    0.00 :   489c59:       mov    $0xa0,%edi
    0.00 :   489c5e:       mov    %rdx,0x8(%rsp)
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   489c63:       lea    0x60(%rsp),%r12
    0.00 :   489c68:       lea    0x80(%rsp),%rbx
    0.00 :   489c70:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   489c75:       mov    $0x10,%esi
    0.00 :   489c7a:       mov    %rbx,%rdi
    0.00 :   489c7d:       lea    0x40(%rsp),%r14
    0.00 :   489c82:       mov    %rax,%rbp
    0.00 :   489c85:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   489c8a:       lea    0x3b0d6f(%rip),%rsi        # 83aa00 <typeinfo name for onnxruntime::BiasGeluFusion+0x20>
    0.00 :   489c91:       mov    %rbx,%rdi
    0.00 :   489c94:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            { return _M_insert(__n); }
    0.00 :   489c99:       mov    0x8(%rsp),%rdx
    0.00 :   489c9e:       mov    %rbx,%rdi
    0.00 :   489ca1:       mov    %rdx,%rsi
    0.00 :   489ca4:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   489ca9:       lea    0x3b0d56(%rip),%rsi        # 83aa06 <typeinfo name for onnxruntime::BiasGeluFusion+0x26>
    0.00 :   489cb0:       mov    %rbx,%rdi
    0.00 :   489cb3:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   489cb8:       mov    %r13,%rsi
    0.00 :   489cbb:       mov    %rbx,%rdi
    0.00 :   489cbe:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   489cc3:       lea    0x41c80f(%rip),%rsi        # 8a64d9 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0xbd>
    0.00 :   489cca:       mov    %rbx,%rdi
    0.00 :   489ccd:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   489cd2:       lea    -0x1(%r13),%rsi
    0.00 :   489cd6:       mov    %rbx,%rdi
    0.00 :   489cd9:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   489cde:       lea    0x43e144(%rip),%rsi        # 8c7e29 <typeinfo name for re2::NumCapturesWalker+0x79>
    0.00 :   489ce5:       mov    %rbx,%rdi
    0.00 :   489ce8:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   489ced:       lea    0x8(%rbx),%rsi
    0.00 :   489cf1:       mov    %r12,%rdi
    0.00 :   489cf4:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   489cf9:       mov    %rbx,%rdi
    0.00 :   489cfc:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   489d01:       mov    %r14,%rdi
    0.00 :   489d04:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   489d09:       mov    %r14,%r8
    0.00 :   489d0c:       mov    $0x16,%edx
    0.00 :   489d11:       mov    %rbx,%rdi
    0.00 :   489d14:       lea    0x3efae5(%rip),%rcx        # 879800 <onnxruntime::HandleNegativeAxis(long, long)::__PRETTY_FUNCTION__>
    0.00 :   489d1b:       lea    0x3b0d9e(%rip),%rsi        # 83aac0 <typeinfo name for onnxruntime::BiasGeluFusion+0xe0>
    0.00 :   489d22:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   489d27:       mov    %r12,%rcx
    0.00 :   489d2a:       lea    0x3b0dc7(%rip),%rdx        # 83aaf8 <typeinfo name for onnxruntime::BiasGeluFusion+0x118>
    0.00 :   489d31:       mov    %rbx,%rsi
    0.00 :   489d34:       mov    %rbp,%rdi
    0.00 :   489d37:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   489d3c:       mov    %rbx,%rdi
         :            if (!_M_is_local())
    0.00 :   489d3f:       add    $0x10,%r12
    0.00 :   489d43:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   489d48:       mov    %r14,%rdi
    0.00 :   489d4b:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   489d50:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   489d55:       cmp    %r12,%rdi
    0.00 :   489d58:       je     99304 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0xc8>
    0.00 :   489d5e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   489d63:       jmpq   99304 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0xc8>
    0.00 :   489d68:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   489d6d:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   489d72:       jmpq   9923c <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]>
    0.00 :   489d77:       jmpq   99259 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0x1d>
    0.00 :   489d7c:       mov    %rax,%rbx
    0.00 :   489d7f:       jmpq   99278 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0x3c>
    0.00 :   489d84:       jmpq   99293 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0x57>
    0.00 :   489d89:       jmpq   992d4 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0x98>
    0.00 :   489d8e:       mov    %rax,%rbx
    0.00 :   489d91:       jmpq   992e9 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0xad>
    0.00 :   489d96:       jmpq   992b5 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0x79>
    0.00 :   489d9b:       jmpq   99350 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0x114>
    0.00 :   489da0:       mov    %rax,%rbx
    0.00 :   489da3:       jmpq   99325 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0xe9>
    0.00 :   489da8:       mov    %rax,%rbx
    0.00 :   489dab:       jmpq   9932d <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0xf1>
    0.00 :   489db0:       mov    %rax,%r13
    0.00 :   489db3:       jmpq   9931a <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const [clone .cold.226]+0xde>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000059bf30 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::Tensor>()>:
         :            _ZN11onnxruntime12DataTypeImpl7GetTypeINS_6TensorEEEPKS0_v():
  100.00 :   59bf30:       jmpq   59beb0 <onnxruntime::TensorTypeBase::Type()>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.26 for cache-misses (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000aaf0b <operator delete(void*)>:
         :           _ZdlPv():
  100.00 :   aaf0b:       jmpq   a4990 <free@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000010da70 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, OrtValue>, true> > >::_M_allocate_buckets(unsigned long) [clone .isra.1804]>:
         :            _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ELb1EEEEE19_M_allocate_bucketsEm.isra.1350():
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   10da70:       movabs $0x1fffffffffffffff,%rax
         :            }
         :            }
         :
         :            template<typename _NodeAlloc>
         :            typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
         :            _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n)
    0.00 :   10da7a:       push   %rbx
  100.00 :   10da7b:       cmp    %rax,%rdi
    0.00 :   10da7e:       ja     10da9f <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, OrtValue>, true> > >::_M_allocate_buckets(unsigned long) [clone .isra.1804]+0x2f>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   10da80:       lea    0x0(,%rdi,8),%rbx
    0.00 :   10da88:       mov    %rbx,%rdi
    0.00 :   10da8b:       callq  53340 <operator new(unsigned long)@plt>
         :            {
         :            __bucket_alloc_type __alloc(_M_node_allocator());
         :
         :            auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
         :            __bucket_type* __p = std::__to_address(__ptr);
         :            __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
    0.00 :   10da90:       mov    %rbx,%rdx
    0.00 :   10da93:       xor    %esi,%esi
    0.00 :   10da95:       mov    %rax,%rdi
    0.00 :   10da98:       callq  52db0 <memset@plt>
         :            return __p;
         :            }
    0.00 :   10da9d:       pop    %rbx
    0.00 :   10da9e:       retq
         :            std::__throw_bad_alloc();
    0.00 :   10da9f:       callq  52ba0 <std::__throw_bad_alloc()@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005edfa0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)>:
         :            _ZN11onnxruntime6Tensor4InitEPKNS_12DataTypeImplERKNS_11TensorShapeEPvSt10shared_ptrINS_10IAllocatorEEl():
  100.00 :   5edfa0:       push   %r15
    0.00 :   5edfa2:       mov    %rsi,%r15
    0.00 :   5edfa5:       push   %r14
    0.00 :   5edfa7:       mov    %rdx,%r14
    0.00 :   5edfaa:       push   %r13
    0.00 :   5edfac:       mov    %r8,%r13
    0.00 :   5edfaf:       push   %r12
    0.00 :   5edfb1:       mov    %r9,%r12
    0.00 :   5edfb4:       push   %rbp
    0.00 :   5edfb5:       push   %rbx
    0.00 :   5edfb6:       mov    %rdi,%rbx
    0.00 :   5edfb9:       mov    %rdx,%rdi
    0.00 :   5edfbc:       sub    $0xd8,%rsp
    0.00 :   5edfc3:       mov    %rcx,0x8(%rsp)
    0.00 :   5edfc8:       mov    %fs:0x28,%rax
    0.00 :   5edfd1:       mov    %rax,0xc8(%rsp)
    0.00 :   5edfd9:       xor    %eax,%eax
    0.00 :   5edfdb:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5edfe0:       test   %rax,%rax
    0.00 :   5edfe3:       js     5ee213 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x273>
    0.00 :   5edfe9:       mov    %rax,%rbp
    0.00 :   5edfec:       mov    (%r15),%rax
    0.00 :   5edfef:       mov    %r15,%rdi
    0.00 :   5edff2:       callq  *0x68(%rax)
    0.00 :   5edff5:       mov    %rax,0x30(%rbx)
    0.00 :   5edff9:       test   %rax,%rax
    0.00 :   5edffc:       je     5ee167 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1c7>
    0.00 :   5ee002:       lea    0x18(%rbx),%rdi
    0.00 :   5ee006:       mov    %r14,%rsi
    0.00 :   5ee009:       callq  2452e0 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)>
    0.00 :   5ee00e:       mov    0x8(%rsp),%rax
         :            }
         :
         :            void
         :            _M_swap(__shared_count& __r) noexcept
         :            {
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5ee013:       mov    0x8(%r13),%rdx
         :            __r._M_pi = _M_pi;
    0.00 :   5ee017:       movq   $0x0,0x8(%r13)
    0.00 :   5ee01f:       mov    %rax,(%rbx)
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
         :            { }
         :
         :            __shared_ptr(__shared_ptr&& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5ee022:       mov    0x0(%r13),%rax
         :            {
         :            _M_refcount._M_swap(__r._M_refcount);
         :            __r._M_ptr = 0;
    0.00 :   5ee026:       movq   $0x0,0x0(%r13)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5ee02e:       mov    0x10(%rbx),%r13
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   5ee032:       mov    %rax,0x8(%rbx)
         :            __r._M_pi = _M_pi;
    0.00 :   5ee036:       mov    %rdx,0x10(%rbx)
         :            if (_M_pi != nullptr)
    0.00 :   5ee03a:       test   %r13,%r13
    0.00 :   5ee03d:       je     5ee05f <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbf>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5ee03f:       mov    0x639ec2(%rip),%r14        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ee046:       test   %r14,%r14
    0.00 :   5ee049:       je     5ee0a0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x100>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee04b:       mov    $0xffffffff,%eax
    0.00 :   5ee050:       lock xadd %eax,0x8(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ee056:       cmp    $0x1,%eax
    0.00 :   5ee059:       je     5ee0b0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x110>
    0.00 :   5ee05b:       mov    0x8(%rbx),%rax
    0.00 :   5ee05f:       test   %rax,%rax
    0.00 :   5ee062:       je     5ee072 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xd2>
    0.00 :   5ee064:       mov    0x30(%rbx),%rax
    0.00 :   5ee068:       cmpl   $0x8,0x8(%rax)
    0.00 :   5ee06c:       je     5ee100 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x160>
    0.00 :   5ee072:       mov    %r12,0x50(%rbx)
    0.00 :   5ee076:       mov    0xc8(%rsp),%rax
    0.00 :   5ee07e:       xor    %fs:0x28,%rax
    0.00 :   5ee087:       jne    5ee162 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1c2>
    0.00 :   5ee08d:       add    $0xd8,%rsp
    0.00 :   5ee094:       pop    %rbx
    0.00 :   5ee095:       pop    %rbp
    0.00 :   5ee096:       pop    %r12
    0.00 :   5ee098:       pop    %r13
    0.00 :   5ee09a:       pop    %r14
    0.00 :   5ee09c:       pop    %r15
    0.00 :   5ee09e:       retq
    0.00 :   5ee09f:       nop
         :            _Atomic_word __result = *__mem;
    0.00 :   5ee0a0:       mov    0x8(%r13),%eax
         :            *__mem += __val;
    0.00 :   5ee0a4:       lea    -0x1(%rax),%edx
    0.00 :   5ee0a7:       mov    %edx,0x8(%r13)
    0.00 :   5ee0ab:       cmp    $0x1,%eax
    0.00 :   5ee0ae:       jne    5ee05b <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbb>
         :            _M_dispose();
    0.00 :   5ee0b0:       mov    0x0(%r13),%rax
    0.00 :   5ee0b4:       mov    0x10(%rax),%rax
    0.00 :   5ee0b8:       cmp    0x639aa1(%rip),%rax        # c27b60 <.got+0xa0>
    0.00 :   5ee0bf:       jne    5ee158 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1b8>
         :            if (__gthread_active_p())
    0.00 :   5ee0c5:       test   %r14,%r14
    0.00 :   5ee0c8:       je     5ee140 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1a0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee0ca:       mov    $0xffffffff,%eax
    0.00 :   5ee0cf:       lock xadd %eax,0xc(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ee0d5:       cmp    $0x1,%eax
    0.00 :   5ee0d8:       jne    5ee05b <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbb>
         :            _M_destroy();
    0.00 :   5ee0da:       mov    0x0(%r13),%rax
         :            { delete this; }
    0.00 :   5ee0de:       mov    %r13,%rdi
         :            _M_destroy();
    0.00 :   5ee0e1:       mov    0x18(%rax),%rdx
    0.00 :   5ee0e5:       cmp    0x639ab4(%rip),%rdx        # c27ba0 <.got+0xe0>
    0.00 :   5ee0ec:       jne    5ee14d <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1ad>
         :            { delete this; }
    0.00 :   5ee0ee:       callq  *0x8(%rax)
    0.00 :   5ee0f1:       mov    0x8(%rbx),%rax
    0.00 :   5ee0f5:       jmpq   5ee05f <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbf>
    0.00 :   5ee0fa:       nopw   0x0(%rax,%rax,1)
    0.00 :   5ee100:       mov    (%rbx),%rax
    0.00 :   5ee103:       test   %rbp,%rbp
    0.00 :   5ee106:       je     5ee072 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xd2>
    0.00 :   5ee10c:       xor    %edx,%edx
    0.00 :   5ee10e:       xchg   %ax,%ax
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ee110:       lea    0x10(%rax),%rcx
    0.00 :   5ee114:       add    $0x1,%rdx
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5ee118:       movb   $0x0,0x10(%rax)
    0.00 :   5ee11c:       add    $0x20,%rax
    0.00 :   5ee120:       mov    %rcx,-0x20(%rax)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   5ee124:       movq   $0x0,-0x18(%rax)
    0.00 :   5ee12c:       cmp    %rdx,%rbp
    0.00 :   5ee12f:       jg     5ee110 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x170>
    0.00 :   5ee131:       jmpq   5ee072 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xd2>
    0.00 :   5ee136:       nopw   %cs:0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ee140:       mov    0xc(%r13),%eax
         :            *__mem += __val;
    0.00 :   5ee144:       lea    -0x1(%rax),%edx
    0.00 :   5ee147:       mov    %edx,0xc(%r13)
         :            return __result;
    0.00 :   5ee14b:       jmp    5ee0d5 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x135>
         :            _M_destroy();
    0.00 :   5ee14d:       callq  *%rdx
    0.00 :   5ee14f:       jmpq   5ee05b <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbb>
    0.00 :   5ee154:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5ee158:       mov    %r13,%rdi
    0.00 :   5ee15b:       callq  *%rax
    0.00 :   5ee15d:       jmpq   5ee0c5 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x125>
    0.00 :   5ee162:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5ee167:       mov    $0xa0,%edi
    0.00 :   5ee16c:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5ee171:       mov    %r15,%rdi
    0.00 :   5ee174:       mov    %rax,%r12
    0.00 :   5ee177:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
    0.00 :   5ee17c:       lea    0x20(%rsp),%r13
    0.00 :   5ee181:       lea    0x40(%rsp),%rbx
    0.00 :   5ee186:       mov    %rax,0x18(%rsp)
    0.00 :   5ee18b:       mov    %rbx,%rdi
    0.00 :   5ee18e:       lea    0x18(%rsp),%rdx
    0.00 :   5ee193:       mov    %r13,%rsi
    0.00 :   5ee196:       lea    0x2a707b(%rip),%rax        # 895218 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0x118>
    0.00 :   5ee19d:       mov    %rax,0x20(%rsp)
    0.00 :   5ee1a2:       callq  164da0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*>(char const* const&, char const* const&)>
    0.00 :   5ee1a7:       mov    %r13,%rdi
    0.00 :   5ee1aa:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ee1af:       lea    0x60(%rsp),%r14
    0.00 :   5ee1b4:       mov    %r13,%r8
    0.00 :   5ee1b7:       lea    0x2a70e2(%rip),%rcx        # 8952a0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)::__PRETTY_FUNCTION__>
    0.00 :   5ee1be:       mov    $0x34,%edx
    0.00 :   5ee1c3:       lea    0x2a6fee(%rip),%rsi        # 8951b8 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xb8>
    0.00 :   5ee1ca:       mov    %r14,%rdi
    0.00 :   5ee1cd:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5ee1d2:       mov    %rbx,%rcx
    0.00 :   5ee1d5:       lea    0x2a7029(%rip),%rdx        # 895205 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0x105>
    0.00 :   5ee1dc:       mov    %r14,%rsi
    0.00 :   5ee1df:       mov    %r12,%rdi
    0.00 :   5ee1e2:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5ee1e7:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5ee1ea:       add    $0x10,%rbx
    0.00 :   5ee1ee:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ee1f3:       mov    %r13,%rdi
    0.00 :   5ee1f6:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ee1fb:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ee200:       cmp    %rbx,%rdi
    0.00 :   5ee203:       je     b7400 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5ee209:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ee20e:       jmpq   b7400 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]>
    0.00 :   5ee213:       mov    $0xa0,%edi
    0.00 :   5ee218:       lea    0x40(%rsp),%rbx
    0.00 :   5ee21d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5ee222:       lea    0x2a6fc6(%rip),%rsi        # 8951ef <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xef>
    0.00 :   5ee229:       mov    %rbx,%rdi
    0.00 :   5ee22c:       mov    %rax,%r12
    0.00 :   5ee22f:       callq  5ede30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.69]>
    0.00 :   5ee234:       lea    0x20(%rsp),%r13
    0.00 :   5ee239:       mov    %r13,%rdi
    0.00 :   5ee23c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ee241:       lea    0x60(%rsp),%r14
    0.00 :   5ee246:       mov    %r13,%r8
    0.00 :   5ee249:       lea    0x2a7050(%rip),%rcx        # 8952a0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)::__PRETTY_FUNCTION__>
    0.00 :   5ee250:       mov    $0x31,%edx
    0.00 :   5ee255:       lea    0x2a6f5c(%rip),%rsi        # 8951b8 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xb8>
    0.00 :   5ee25c:       mov    %r14,%rdi
    0.00 :   5ee25f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5ee264:       mov    %rbx,%rcx
    0.00 :   5ee267:       xor    %edx,%edx
    0.00 :   5ee269:       mov    %r14,%rsi
    0.00 :   5ee26c:       mov    %r12,%rdi
    0.00 :   5ee26f:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5ee274:       mov    %r14,%rdi
    0.00 :   5ee277:       add    $0x10,%rbx
    0.00 :   5ee27b:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ee280:       mov    %r13,%rdi
    0.00 :   5ee283:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ee288:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ee28d:       cmp    %rbx,%rdi
    0.00 :   5ee290:       je     b7416 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x16>
    0.00 :   5ee296:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ee29b:       jmpq   b7416 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x16>
    0.00 :   5ee2a0:       mov    %rax,%rbp
    0.00 :   5ee2a3:       jmpq   b742c <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x2c>
    0.00 :   5ee2a8:       mov    %rax,%rbp
    0.00 :   5ee2ab:       jmpq   b7434 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x34>
    0.00 :   5ee2b0:       mov    %rax,%rbp
    0.00 :   5ee2b3:       jmpq   b7447 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x47>
    0.00 :   5ee2b8:       mov    %rax,%rbp
    0.00 :   5ee2bb:       jmpq   b7457 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x57>
    0.00 :   5ee2c0:       mov    %rax,%rbp
    0.00 :   5ee2c3:       jmpq   b745f <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x5f>
    0.00 :   5ee2c8:       mov    %rax,%rbp
    0.00 :   5ee2cb:       jmpq   b7467 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x67>
    0.00 :   5ee2d0:       mov    %rax,%rbp
    0.00 :   5ee2d3:       jmpq   b747a <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x7a>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006e5600 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)>:
         :            _Z19MlasExecuteThreadedPFvPviES_iPN11onnxruntime11concurrency10ThreadPoolE():
    0.00 :   6e5600:       push   %r13
    0.00 :   6e5602:       push   %r12
    0.00 :   6e5604:       push   %rbp
    0.00 :   6e5605:       push   %rbx
    0.00 :   6e5606:       sub    $0x58,%rsp
    0.00 :   6e560a:       mov    %rdi,0x8(%rsp)
    0.00 :   6e560f:       mov    %rsi,(%rsp)
    0.00 :   6e5613:       mov    %fs:0x28,%rax
    0.00 :   6e561c:       mov    %rax,0x48(%rsp)
    0.00 :   6e5621:       xor    %eax,%eax
    0.00 :   6e5623:       cmp    $0x1,%edx
    0.00 :   6e5626:       je     6e5700 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x100>
         :            #endif // __cpp_sized_deallocation
         :            #endif // __cpp_aligned_new
         :
         :            // Default placement versions of operator new.
         :            inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :            { return __p; }
    0.00 :   6e562c:       lea    0x8(%rsp),%rax
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   6e5631:       lea    -0x98(%rip),%rsi        # 6e55a0 <std::_Function_handler<void (long), MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   6e5638:       movslq %edx,%rbx
    0.00 :   6e563b:       mov    %rax,0x20(%rsp)
    0.00 :   6e5640:       mov    %rsp,%rax
    0.00 :   6e5643:       mov    %rax,0x28(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   6e5648:       lea    -0x8f(%rip),%rax        # 6e55c0 <std::_Function_base::_Base_manager<MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)::{lambda(long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)::{lambda(long)#1}> const&, std::_Manager_operation)>
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   6e564f:       mov    %rsi,0x38(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   6e5654:       mov    %rax,0x30(%rsp)
    0.00 :   6e5659:       test   %rcx,%rcx
    0.00 :   6e565c:       je     6e56b0 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0xb0>
    0.00 :   6e565e:       lea    0x20(%rsp),%r12
    0.00 :   6e5663:       mov    %rbx,%rsi
    0.00 :   6e5666:       mov    %rcx,%rdi
    0.00 :   6e5669:       mov    %r12,%rdx
    0.00 :   6e566c:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
    0.00 :   6e5671:       mov    0x30(%rsp),%rax
         :            if (_M_manager)
    0.00 :   6e5676:       test   %rax,%rax
    0.00 :   6e5679:       je     6e5688 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x88>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   6e567b:       mov    $0x3,%edx
    0.00 :   6e5680:       mov    %r12,%rsi
    0.00 :   6e5683:       mov    %r12,%rdi
    0.00 :   6e5686:       callq  *%rax
  100.00 :   6e5688:       mov    0x48(%rsp),%rax
    0.00 :   6e568d:       xor    %fs:0x28,%rax
    0.00 :   6e5696:       jne    6e571a <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x11a>
    0.00 :   6e569c:       add    $0x58,%rsp
    0.00 :   6e56a0:       pop    %rbx
    0.00 :   6e56a1:       pop    %rbp
    0.00 :   6e56a2:       pop    %r12
    0.00 :   6e56a4:       pop    %r13
    0.00 :   6e56a6:       retq
    0.00 :   6e56a7:       nopw   0x0(%rax,%rax,1)
    0.00 :   6e56b0:       test   %rbx,%rbx
    0.00 :   6e56b3:       jle    6e5710 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x110>
    0.00 :   6e56b5:       mov    %rsi,%rax
    0.00 :   6e56b8:       lea    0x20(%rsp),%r12
    0.00 :   6e56bd:       lea    0x18(%rsp),%r13
    0.00 :   6e56c2:       xor    %ebp,%ebp
    0.00 :   6e56c4:       movq   $0x0,0x18(%rsp)
         :            bool _M_empty() const { return !_M_manager; }
    0.00 :   6e56cd:       jmp    6e56d5 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0xd5>
    0.00 :   6e56cf:       nop
    0.00 :   6e56d0:       mov    0x38(%rsp),%rax
         :            function<_Res(_ArgTypes...)>::
         :            operator()(_ArgTypes... __args) const
         :            {
         :            if (_M_empty())
         :            __throw_bad_function_call();
         :            return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    0.00 :   6e56d5:       mov    %r13,%rsi
    0.00 :   6e56d8:       mov    %r12,%rdi
    0.00 :   6e56db:       callq  *%rax
    0.00 :   6e56dd:       add    $0x1,%rbp
    0.00 :   6e56e1:       mov    0x30(%rsp),%rax
    0.00 :   6e56e6:       cmp    %rbp,%rbx
    0.00 :   6e56e9:       je     6e5676 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x76>
    0.00 :   6e56eb:       mov    %rbp,0x18(%rsp)
         :            if (_M_empty())
    0.00 :   6e56f0:       test   %rax,%rax
    0.00 :   6e56f3:       jne    6e56d0 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0xd0>
         :            __throw_bad_function_call();
    0.00 :   6e56f5:       callq  52bd0 <std::__throw_bad_function_call()@plt>
    0.00 :   6e56fa:       nopw   0x0(%rax,%rax,1)
    0.00 :   6e5700:       xor    %esi,%esi
    0.00 :   6e5702:       mov    (%rsp),%rdi
    0.00 :   6e5706:       callq  *0x8(%rsp)
    0.00 :   6e570a:       jmpq   6e5688 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x88>
    0.00 :   6e570f:       nop
    0.00 :   6e5710:       lea    0x20(%rsp),%r12
    0.00 :   6e5715:       jmpq   6e567b <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x7b>
    0.00 :   6e571a:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   6e571f:       mov    %rax,%rbx
    0.00 :   6e5722:       jmpq   cb83b <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*) [clone .cold.8]>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005ac910 <onnxruntime::ExecutionFrame::ReleaseMLValueImpl(int)>:
         :            _ZN11onnxruntime14ExecutionFrame18ReleaseMLValueImplEi():
  100.00 :   5ac910:       push   %r13
    0.00 :   5ac912:       mov    %edx,%r13d
    0.00 :   5ac915:       push   %r12
    0.00 :   5ac917:       mov    %rsi,%r12
    0.00 :   5ac91a:       push   %rbp
    0.00 :   5ac91b:       push   %rbx
    0.00 :   5ac91c:       mov    %rdi,%rbx
    0.00 :   5ac91f:       sub    $0x18,%rsp
    0.00 :   5ac923:       mov    %fs:0x28,%rax
    0.00 :   5ac92c:       mov    %rax,0x8(%rsp)
    0.00 :   5ac931:       xor    %eax,%eax
    0.00 :   5ac933:       mov    %rsp,%rbp
    0.00 :   5ac936:       mov    %rbp,%rdi
    0.00 :   5ac939:       callq  5aa470 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)>
    0.00 :   5ac93e:       cmpq   $0x0,(%rsp)
    0.00 :   5ac943:       je     5ac990 <onnxruntime::ExecutionFrame::ReleaseMLValueImpl(int)+0x80>
    0.00 :   5ac945:       mov    $0x265,%r8d
    0.00 :   5ac94b:       lea    0x2e38ce(%rip),%rcx        # 890220 <onnxruntime::ExecutionFrame::ReleaseMLValueImpl(int)::__FUNCTION__>
    0.00 :   5ac952:       mov    %rbp,%rsi
    0.00 :   5ac955:       xor    %edi,%edi
    0.00 :   5ac957:       lea    0x2e30da(%rip),%rdx        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5ac95e:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5ac963:       mov    (%rsp),%rax
    0.00 :   5ac967:       mov    %rax,(%rbx)
    0.00 :   5ac96a:       mov    0x8(%rsp),%rcx
    0.00 :   5ac96f:       xor    %fs:0x28,%rcx
    0.00 :   5ac978:       mov    %rbx,%rax
    0.00 :   5ac97b:       jne    5ac9a4 <onnxruntime::ExecutionFrame::ReleaseMLValueImpl(int)+0x94>
    0.00 :   5ac97d:       add    $0x18,%rsp
    0.00 :   5ac981:       pop    %rbx
    0.00 :   5ac982:       pop    %rbp
    0.00 :   5ac983:       pop    %r12
    0.00 :   5ac985:       pop    %r13
    0.00 :   5ac987:       retq
    0.00 :   5ac988:       nopl   0x0(%rax,%rax,1)
    0.00 :   5ac990:       mov    %r13d,%esi
    0.00 :   5ac993:       mov    %r12,%rdi
    0.00 :   5ac996:       callq  5ac2b0 <onnxruntime::ExecutionFrame::TraceFree(int)>
    0.00 :   5ac99b:       movq   $0x0,(%rbx)
         :            constexpr _Head_base()
    0.00 :   5ac9a2:       jmp    5ac96a <onnxruntime::ExecutionFrame::ReleaseMLValueImpl(int)+0x5a>
    0.00 :   5ac9a4:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5ac9a9:       mov    %rax,%rbx
    0.00 :   5ac9ac:       jmpq   b1964 <onnxruntime::ExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.435]>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>:
         :            _ZN11onnxruntime15OpKernelContext6OutputEiRKNS_11TensorShapeE():
  100.00 :   5c7e50:       sub    $0x8,%rsp
    0.00 :   5c7e54:       xor    %ecx,%ecx
    0.00 :   5c7e56:       callq  5c79f0 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long)>
    0.00 :   5c7e5b:       test   %rax,%rax
    0.00 :   5c7e5e:       je     5c7e70 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)+0x20>
    0.00 :   5c7e60:       mov    %rax,%rdi
    0.00 :   5c7e63:       add    $0x8,%rsp
    0.00 :   5c7e67:       jmpq   18a620 <onnxruntime::Tensor* OrtValue::GetMutable<onnxruntime::Tensor>()>
    0.00 :   5c7e6c:       nopl   0x0(%rax)
    0.00 :   5c7e70:       xor    %eax,%eax
    0.00 :   5c7e72:       add    $0x8,%rsp
    0.00 :   5c7e76:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000184d80 <onnxruntime::PrimitiveDataTypeBase::AsPrimitiveDataType() const>:
         :            _ZNK11onnxruntime21PrimitiveDataTypeBase19AsPrimitiveDataTypeEv():
  100.00 :   184d80:       mov    %rdi,%rax
    0.00 :   184d83:       retq
 Percent |	Source code & Disassembly of python3.7 for cache-misses (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000001cd050 <_PyEval_EvalFrameDefault>:
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cd050:       push   %r15
    0.00 :   1cd052:       push   %r14
    0.00 :   1cd054:       push   %r13
    0.00 :   1cd056:       mov    %rdi,%r13
    0.00 :   1cd059:       push   %r12
    0.00 :   1cd05b:       push   %rbp
    0.00 :   1cd05c:       push   %rbx
    0.00 :   1cd05d:       sub    $0xf8,%rsp
    0.00 :   1cd064:       mov    %fs:0x28,%rax
    0.00 :   1cd06d:       mov    %rax,0xe8(%rsp)
    0.00 :   1cd075:       xor    %eax,%eax
    0.00 :   1cd077:       mov    %esi,0x48(%rsp)
    0.00 :   1cd07b:       mov    0x17f946(%rip),%r14        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1cd082:       mov    0x17f93f(%rip),%rdx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1cd089:       mov    0x20(%rdx),%eax
    0.00 :   1cd08c:       add    $0x1,%eax
    0.00 :   1cd08f:       cmp    0x13cc27(%rip),%eax        # 309cbc <_Py_CheckRecursionLimit>
    0.00 :   1cd095:       mov    %eax,0x20(%rdx)
    0.00 :   1cd098:       jg     f2698 <_PyEval_EvalFrameDefault.cold.2897+0x212b>
    0.00 :   1cd09e:       mov    0x30(%r14),%ecx
    0.00 :   1cd0a2:       mov    %rdi,0x18(%r14)
    0.00 :   1cd0a6:       test   %ecx,%ecx
    0.00 :   1cd0a8:       jne    1d4141 <_PyEval_EvalFrameDefault+0x70f1>
    0.00 :   1cd0ae:       mov    0x20(%rdi),%rdi
    0.00 :   1cd0b2:       lea    0x168(%r13),%r8
    0.00 :   1cd0b9:       mov    %r8,0x10(%rsp)
    0.00 :   1cd0be:       movslq 0x18(%rdi),%r9
    0.00 :   1cd0c2:       mov    0x28(%rdi),%r11
    0.00 :   1cd0c6:       mov    %rdi,0x30(%rsp)
    0.00 :   1cd0cb:       mov    0x38(%rdi),%rbx
    0.00 :   1cd0cf:       mov    0x30(%rdi),%rbp
    0.00 :   1cd0d3:       lea    (%r8,%r9,8),%r10
    0.00 :   1cd0d7:       movslq 0x68(%r13),%r9
    0.00 :   1cd0db:       mov    %r11,0x8(%rsp)
    0.00 :   1cd0e0:       lea    0x20(%r11),%r12
    0.00 :   1cd0e4:       mov    %rbx,0x18(%rsp)
    0.00 :   1cd0e9:       mov    %rbp,0x28(%rsp)
    0.00 :   1cd0ee:       mov    %r10,0x38(%rsp)
    0.00 :   1cd0f3:       test   %r9d,%r9d
    0.00 :   1cd0f6:       jns    1d1d59 <_PyEval_EvalFrameDefault+0x4d09>
    0.00 :   1cd0fc:       mov    0x48(%r13),%rbp
    0.00 :   1cd100:       movb   $0x1,0x74(%r13)
    0.00 :   1cd105:       movq   $0x0,0x48(%r13)
    0.00 :   1cd10d:       mov    %r12,0x8(%rsp)
    0.00 :   1cd112:       test   %esi,%esi
    0.00 :   1cd114:       jne    1d35ed <_PyEval_EvalFrameDefault+0x659d>
    0.00 :   1cd11a:       movq   $0x0,0x20(%rsp)
    0.00 :   1cd123:       mov    $0xffffffff,%esi
    0.00 :   1cd128:       mov    %esi,0x68(%rsp)
    0.00 :   1cd12c:       mov    %esi,0x4c(%rsp)
    0.00 :   1cd130:       mov    0x17f592(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cd136:       test   %edi,%edi
    0.00 :   1cd138:       jne    1d3e92 <_PyEval_EvalFrameDefault+0x6e42>
    0.00 :   1cd13e:       mov    0x17f580(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd144:       mov    %r12,%rsi
    0.00 :   1cd147:       sub    0x8(%rsp),%rsi
    0.00 :   1cd14c:       mov    %esi,%r9d
    0.00 :   1cd14f:       mov    %esi,0x68(%r13)
    0.00 :   1cd153:       test   %eax,%eax
    0.00 :   1cd155:       je     1d1700 <_PyEval_EvalFrameDefault+0x46b0>
    0.00 :   1cd15b:       mov    0x40(%r14),%r15
    0.00 :   1cd15f:       test   %r15,%r15
    0.00 :   1cd162:       jne    1d1680 <_PyEval_EvalFrameDefault+0x4630>
    0.00 :   1cd168:       movzwl (%r12),%eax
    0.00 :   1cd16d:       add    $0x2,%r12
    0.00 :   1cd171:       movzbl %ah,%ecx
    0.00 :   1cd174:       movzbl %al,%r8d
    0.00 :   1cd178:       movslq %ecx,%r9
    0.00 :   1cd17b:       cmp    $0xa1,%r8d
    0.00 :   1cd182:       ja     1d4aad <_PyEval_EvalFrameDefault+0x7a5d>
    0.00 :   1cd188:       lea    0x7d571(%rip),%r10        # 24a700 <_IO_stdin_used+0x11700>
    0.00 :   1cd18f:       mov    %r8d,%edi
    0.00 :   1cd192:       movslq (%r10,%rdi,4),%rdx
    0.00 :   1cd196:       add    %r10,%rdx
    0.00 :   1cd199:       jmpq   *%rdx
    0.00 :   1cd19b:       nopl   0x0(%rax,%rax,1)
    0.00 :   1cd1a0:       mov    0x10(%rsp),%rax
    0.00 :   1cd1a5:       mov    (%rax,%r9,8),%r8
    0.00 :   1cd1a9:       test   %r8,%r8
    0.00 :   1cd1ac:       je     f1999 <_PyEval_EvalFrameDefault.cold.2897+0x142c>
    0.00 :   1cd1b2:       mov    0x17f50c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd1b8:       addq   $0x1,(%r8)
    0.00 :   1cd1bc:       lea    0x8(%rbp),%rcx
    0.00 :   1cd1c0:       mov    %r8,0x0(%rbp)
    0.00 :   1cd1c4:       mov    %r12,%rbp
    0.00 :   1cd1c7:       sub    0x8(%rsp),%rbp
    0.00 :   1cd1cc:       test   %eax,%eax
    0.00 :   1cd1ce:       jne    1d1720 <_PyEval_EvalFrameDefault+0x46d0>
    0.00 :   1cd1d4:       movzwl (%r12),%ebx
    0.00 :   1cd1d9:       lea    0x1154e0(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd1e0:       mov    %ebp,0x68(%r13)
    0.00 :   1cd1e4:       add    $0x2,%r12
    0.00 :   1cd1e8:       mov    %rcx,%rbp
    0.00 :   1cd1eb:       movzbl %bl,%edx
    0.00 :   1cd1ee:       movzbl %bh,%edi
    0.00 :   1cd1f1:       mov    (%r10,%rdx,8),%r11
    0.00 :   1cd1f5:       mov    %rdx,%r8
    0.00 :   1cd1f8:       movslq %edi,%r9
    0.00 :   1cd1fb:       jmpq   *%r11
    0.00 :   1cd1fe:       xchg   %ax,%ax
    0.00 :   1cd200:       mov    0x18(%rsp),%rdx
    0.00 :   1cd205:       mov    0x30(%r13),%rdi
    0.00 :   1cd209:       movslq %r9d,%r9
    0.00 :   1cd20c:       lea    0x17d0ed(%rip),%r15        # 34a300 <PyDict_Type>
    0.00 :   1cd213:       mov    0x18(%rdx,%r9,8),%rbx
    0.00 :   1cd218:       cmp    %r15,0x8(%rdi)
    0.00 :   1cd21c:       jne    f07b2 <_PyEval_EvalFrameDefault.cold.2897+0x245>
    0.00 :   1cd222:       mov    0x28(%r13),%rsi
    0.00 :   1cd226:       cmp    %r15,0x8(%rsi)
    0.00 :   1cd22a:       jne    f07b2 <_PyEval_EvalFrameDefault.cold.2897+0x245>
    0.00 :   1cd230:       mov    %rbx,%rdx
    0.00 :   1cd233:       addr32 callq 1461d0 <_PyDict_LoadGlobal>
    0.00 :   1cd239:       test   %rax,%rax
    0.00 :   1cd23c:       je     1d3444 <_PyEval_EvalFrameDefault+0x63f4>
    0.00 :   1cd242:       addq   $0x1,(%rax)
    0.00 :   1cd246:       lea    0x8(%rbp),%r15
    0.00 :   1cd24a:       mov    %rax,0x0(%rbp)
    0.00 :   1cd24e:       mov    0x17f474(%rip),%ebp        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cd254:       test   %ebp,%ebp
    0.00 :   1cd256:       jne    1d3613 <_PyEval_EvalFrameDefault+0x65c3>
    0.00 :   1cd25c:       mov    0x17f462(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd262:       mov    %r12,%r9
    0.00 :   1cd265:       sub    0x8(%rsp),%r9
    0.00 :   1cd26a:       test   %eax,%eax
    0.00 :   1cd26c:       jne    1d1cd4 <_PyEval_EvalFrameDefault+0x4c84>
    0.00 :   1cd272:       movzwl (%r12),%ebx
    0.00 :   1cd277:       mov    %r9d,0x68(%r13)
    0.00 :   1cd27b:       add    $0x2,%r12
    0.00 :   1cd27f:       mov    %r15,%rbp
    0.00 :   1cd282:       lea    0x115437(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd289:       movzbl %bl,%edx
    0.00 :   1cd28c:       movzbl %bh,%ecx
    0.00 :   1cd28f:       mov    (%r11,%rdx,8),%r10
    0.00 :   1cd293:       mov    %rdx,%r8
    0.00 :   1cd296:       movslq %ecx,%r9
    0.00 :   1cd299:       jmpq   *%r10
    0.00 :   1cd29c:       nopl   0x0(%rax)
    0.00 :   1cd2a0:       sub    $0x8,%rbp
    0.00 :   1cd2a4:       mov    0x0(%rbp),%r15
    0.00 :   1cd2a8:       lea    0x17efb1(%rip),%r8        # 34c260 <_Py_TrueStruct>
    0.00 :   1cd2af:       cmp    %r8,%r15
    0.00 :   1cd2b2:       je     1d1930 <_PyEval_EvalFrameDefault+0x48e0>
    0.00 :   1cd2b8:       lea    0x17ef81(%rip),%rax        # 34c240 <_Py_FalseStruct>
    0.00 :   1cd2bf:       cmp    %rax,%r15
    0.00 :   1cd2c2:       jne    1d1ce4 <_PyEval_EvalFrameDefault+0x4c94>
    0.00 :   1cd2c8:       subq   $0x1,(%r15)
    0.00 :   1cd2cc:       je     f0ffa <_PyEval_EvalFrameDefault.cold.2897+0xa8d>
    0.00 :   1cd2d2:       mov    0x8(%rsp),%rax
    0.00 :   1cd2d7:       movslq %r9d,%r9
    0.00 :   1cd2da:       and    $0xfffffffffffffffe,%r9
    0.00 :   1cd2de:       lea    (%rax,%r9,1),%r12
    0.00 :   1cd2e2:       mov    0x17f3dc(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd2e8:       test   %eax,%eax
    0.00 :   1cd2ea:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cd2f0:       movzwl (%r12),%ebx
    0.00 :   1cd2f5:       lea    0x1153c4(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd2fc:       mov    %r9d,0x68(%r13)
    0.00 :   1cd300:       add    $0x2,%r12
    0.00 :   1cd304:       movzbl %bl,%r11d
    0.00 :   1cd308:       movzbl %bh,%edx
    0.00 :   1cd30b:       mov    %r11,%r8
    0.00 :   1cd30e:       movslq %edx,%r9
    0.00 :   1cd311:       jmpq   *(%r15,%r11,8)
    0.00 :   1cd315:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1cd320:       mov    0x17f39e(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd326:       mov    0x28(%rsp),%rsi
    0.00 :   1cd32b:       movslq %r9d,%r9
    0.00 :   1cd32e:       lea    0x8(%rbp),%rcx
    0.00 :   1cd332:       mov    0x18(%rsi,%r9,8),%r15
    0.00 :   1cd337:       addq   $0x1,(%r15)
    0.00 :   1cd33b:       mov    %r15,0x0(%rbp)
    0.00 :   1cd33f:       test   %eax,%eax
    0.00 :   1cd341:       jne    1d1c50 <_PyEval_EvalFrameDefault+0x4c00>
    0.00 :   1cd347:       movzwl (%r12),%ebx
    0.00 :   1cd34c:       lea    0x11536d(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd353:       mov    %r12,%r8
    0.00 :   1cd356:       sub    0x8(%rsp),%r8
    0.00 :   1cd35b:       mov    %r8d,0x68(%r13)
    0.00 :   1cd35f:       add    $0x2,%r12
    0.00 :   1cd363:       movzbl %bl,%ebp
    0.00 :   1cd366:       movzbl %bh,%edx
    0.00 :   1cd369:       mov    (%rdi,%rbp,8),%r10
    0.00 :   1cd36d:       mov    %rbp,%r8
    0.00 :   1cd370:       movslq %edx,%r9
    0.00 :   1cd373:       mov    %rcx,%rbp
    0.00 :   1cd376:       jmpq   *%r10
    0.00 :   1cd379:       nopl   0x0(%rax)
    0.00 :   1cd380:       mov    0x10(%rsp),%rax
    0.00 :   1cd385:       movslq %r9d,%r9
    0.00 :   1cd388:       sub    $0x8,%rbp
    0.00 :   1cd38c:       mov    0x0(%rbp),%r11
    0.00 :   1cd390:       lea    (%rax,%r9,8),%rsi
    0.00 :   1cd394:       mov    (%rsi),%rdi
    0.00 :   1cd397:       mov    %r11,(%rsi)
    0.00 :   1cd39a:       test   %rdi,%rdi
    0.00 :   1cd39d:       je     1cd3a9 <_PyEval_EvalFrameDefault+0x359>
    0.00 :   1cd39f:       subq   $0x1,(%rdi)
    0.00 :   1cd3a3:       je     1d1990 <_PyEval_EvalFrameDefault+0x4940>
    0.00 :   1cd3a9:       mov    0x17f315(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd3af:       mov    %r12,%r8
    0.00 :   1cd3b2:       sub    0x8(%rsp),%r8
    0.00 :   1cd3b7:       test   %eax,%eax
    0.00 :   1cd3b9:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cd3bf:       movzwl (%r12),%ecx
    0.00 :   1cd3c4:       lea    0x1152f5(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd3cb:       mov    %r8d,0x68(%r13)
    0.00 :   1cd3cf:       add    $0x2,%r12
    0.00 :   1cd3d3:       movzbl %cl,%r11d
    0.00 :   1cd3d7:       movzbl %ch,%esi
    0.00 :   1cd3da:       mov    %r11,%r8
  100.00 :   1cd3dd:       movslq %esi,%r9
    0.00 :   1cd3e0:       jmpq   *(%r15,%r11,8)
    0.00 :   1cd3e4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1cd3ef:       nop
    0.00 :   1cd3f0:       movslq %r9d,%rbx
         :            call_function():
    0.00 :   1cd3f3:       mov    %rbp,%r8
    0.00 :   1cd3f6:       lea    0x17bee3(%rip),%rdx        # 3492e0 <PyCFunction_Type>
    0.00 :   1cd3fd:       lea    0x0(,%rbx,8),%r15
    0.00 :   1cd405:       sub    %r15,%r8
    0.00 :   1cd408:       lea    -0x8(%r8),%r15
    0.00 :   1cd40c:       mov    (%r15),%r9
    0.00 :   1cd40f:       mov    0x8(%r9),%rax
    0.00 :   1cd413:       cmp    %rdx,%rax
    0.00 :   1cd416:       je     1d1730 <_PyEval_EvalFrameDefault+0x46e0>
    0.00 :   1cd41c:       lea    0x170d5d(%rip),%r10        # 33e180 <PyMethodDescr_Type>
    0.00 :   1cd423:       cmp    %r10,%rax
    0.00 :   1cd426:       je     1d18f0 <_PyEval_EvalFrameDefault+0x48a0>
    0.00 :   1cd42c:       lea    0x1718ad(%rip),%rdi        # 33ece0 <PyMethod_Type>
    0.00 :   1cd433:       cmp    %rdi,%rax
    0.00 :   1cd436:       je     1d1de5 <_PyEval_EvalFrameDefault+0x4d95>
    0.00 :   1cd43c:       lea    0x17dc5d(%rip),%rcx        # 34b0a0 <PyFunction_Type>
    0.00 :   1cd443:       addq   $0x1,(%r9)
    0.00 :   1cd447:       cmp    %rcx,%rax
    0.00 :   1cd44a:       jne    1d1a30 <_PyEval_EvalFrameDefault+0x49e0>
    0.00 :   1cd450:       xor    %ecx,%ecx
    0.00 :   1cd452:       mov    %rbx,%rdx
    0.00 :   1cd455:       mov    %r9,%rdi
    0.00 :   1cd458:       mov    %r9,0x40(%rsp)
    0.00 :   1cd45d:       mov    %r8,%rsi
    0.00 :   1cd460:       addr32 callq 164d30 <_PyFunction_FastCallKeywords>
    0.00 :   1cd466:       mov    0x40(%rsp),%r9
    0.00 :   1cd46b:       mov    %rax,%rbx
    0.00 :   1cd46e:       subq   $0x1,(%r9)
    0.00 :   1cd472:       je     f26da <_PyEval_EvalFrameDefault.cold.2897+0x216d>
    0.00 :   1cd478:       cmp    %rbp,%r15
    0.00 :   1cd47b:       jae    1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1cd481:       mov    -0x8(%rbp),%rdi
    0.00 :   1cd485:       lea    -0x8(%rbp),%r10
    0.00 :   1cd489:       subq   $0x1,(%rdi)
    0.00 :   1cd48d:       je     1d1fbe <_PyEval_EvalFrameDefault+0x4f6e>
    0.00 :   1cd493:       cmp    %r15,%r10
    0.00 :   1cd496:       jbe    1d1980 <_PyEval_EvalFrameDefault+0x4930>
    0.00 :   1cd49c:       mov    -0x10(%rbp),%rdi
    0.00 :   1cd4a0:       lea    -0x10(%rbp),%r11
    0.00 :   1cd4a4:       subq   $0x1,(%rdi)
    0.00 :   1cd4a8:       je     1d2250 <_PyEval_EvalFrameDefault+0x5200>
    0.00 :   1cd4ae:       cmp    %r11,%r15
    0.00 :   1cd4b1:       jae    1d1a20 <_PyEval_EvalFrameDefault+0x49d0>
    0.00 :   1cd4b7:       mov    -0x18(%rbp),%rdi
    0.00 :   1cd4bb:       lea    -0x18(%rbp),%rcx
    0.00 :   1cd4bf:       subq   $0x1,(%rdi)
    0.00 :   1cd4c3:       je     1d22b5 <_PyEval_EvalFrameDefault+0x5265>
    0.00 :   1cd4c9:       cmp    %rcx,%r15
    0.00 :   1cd4cc:       jae    1d1ccc <_PyEval_EvalFrameDefault+0x4c7c>
    0.00 :   1cd4d2:       mov    -0x20(%rbp),%rdi
    0.00 :   1cd4d6:       lea    -0x20(%rbp),%rdx
    0.00 :   1cd4da:       subq   $0x1,(%rdi)
    0.00 :   1cd4de:       je     1d22e7 <_PyEval_EvalFrameDefault+0x5297>
    0.00 :   1cd4e4:       cmp    %rdx,%r15
    0.00 :   1cd4e7:       jae    1d1da4 <_PyEval_EvalFrameDefault+0x4d54>
    0.00 :   1cd4ed:       mov    -0x28(%rbp),%rdi
    0.00 :   1cd4f1:       lea    -0x28(%rbp),%rax
    0.00 :   1cd4f5:       subq   $0x1,(%rdi)
    0.00 :   1cd4f9:       je     1d2433 <_PyEval_EvalFrameDefault+0x53e3>
    0.00 :   1cd4ff:       cmp    %rax,%r15
    0.00 :   1cd502:       jae    1d1e2e <_PyEval_EvalFrameDefault+0x4dde>
    0.00 :   1cd508:       mov    -0x30(%rbp),%rdi
    0.00 :   1cd50c:       lea    -0x30(%rbp),%r8
    0.00 :   1cd510:       mov    %r8,%rbp
    0.00 :   1cd513:       subq   $0x1,(%rdi)
    0.00 :   1cd517:       je     1cd532 <_PyEval_EvalFrameDefault+0x4e2>
    0.00 :   1cd519:       cmp    %r8,%r15
    0.00 :   1cd51c:       jae    1d1f0c <_PyEval_EvalFrameDefault+0x4ebc>
    0.00 :   1cd522:       sub    $0x8,%r8
    0.00 :   1cd526:       mov    (%r8),%rdi
    0.00 :   1cd529:       subq   $0x1,(%rdi)
    0.00 :   1cd52d:       jne    1cd519 <_PyEval_EvalFrameDefault+0x4c9>
    0.00 :   1cd52f:       mov    %r8,%rbp
    0.00 :   1cd532:       mov    0x8(%rdi),%rsi
    0.00 :   1cd536:       callq  *0x30(%rsi)
    0.00 :   1cd539:       cmp    %r15,%rbp
    0.00 :   1cd53c:       ja     1cd481 <_PyEval_EvalFrameDefault+0x431>
    0.00 :   1cd542:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1cd54d:       nopl   (%rax)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cd550:       lea    0x8(%rbp),%r15
    0.00 :   1cd554:       mov    %rbx,0x0(%rbp)
    0.00 :   1cd558:       test   %rbx,%rbx
    0.00 :   1cd55b:       je     1d2be6 <_PyEval_EvalFrameDefault+0x5b96>
    0.00 :   1cd561:       mov    0x17f161(%rip),%ebp        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cd567:       test   %ebp,%ebp
    0.00 :   1cd569:       jne    1d4432 <_PyEval_EvalFrameDefault+0x73e2>
    0.00 :   1cd56f:       mov    0x17f14f(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd575:       mov    %r12,%rdi
    0.00 :   1cd578:       sub    0x8(%rsp),%rdi
    0.00 :   1cd57d:       test   %eax,%eax
    0.00 :   1cd57f:       jne    1d1d51 <_PyEval_EvalFrameDefault+0x4d01>
    0.00 :   1cd585:       movzwl (%r12),%ebx
    0.00 :   1cd58a:       mov    %edi,0x68(%r13)
    0.00 :   1cd58e:       add    $0x2,%r12
    0.00 :   1cd592:       mov    %r15,%rbp
    0.00 :   1cd595:       lea    0x115124(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd59c:       movzbl %bl,%r10d
    0.00 :   1cd5a0:       movzbl %bh,%ecx
    0.00 :   1cd5a3:       mov    (%r11,%r10,8),%rdx
    0.00 :   1cd5a7:       mov    %r10,%r8
    0.00 :   1cd5aa:       movslq %ecx,%r9
    0.00 :   1cd5ad:       jmpq   *%rdx
    0.00 :   1cd5af:       nop
    0.00 :   1cd5b0:       mov    -0x8(%rbp),%rbx
    0.00 :   1cd5b4:       mov    0x18(%rsp),%r8
    0.00 :   1cd5b9:       movslq %r9d,%r15
    0.00 :   1cd5bc:       lea    0x80(%rsp),%rdx
    0.00 :   1cd5c4:       movq   $0x0,0x80(%rsp)
    0.00 :   1cd5d0:       mov    0x18(%r8,%r15,8),%rsi
    0.00 :   1cd5d5:       mov    %rbx,%rdi
    0.00 :   1cd5d8:       addr32 callq 1c3f50 <_PyObject_GetMethod>
    0.00 :   1cd5de:       mov    0x80(%rsp),%rdx
    0.00 :   1cd5e6:       test   %rdx,%rdx
    0.00 :   1cd5e9:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cd5ef:       test   %eax,%eax
    0.00 :   1cd5f1:       je     1d1c60 <_PyEval_EvalFrameDefault+0x4c10>
    0.00 :   1cd5f7:       mov    %rdx,-0x8(%rbp)
    0.00 :   1cd5fb:       lea    0x8(%rbp),%r10
    0.00 :   1cd5ff:       mov    %rbx,0x0(%rbp)
    0.00 :   1cd603:       mov    0x17f0be(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cd60a:       test   %r8d,%r8d
    0.00 :   1cd60d:       jne    1d361b <_PyEval_EvalFrameDefault+0x65cb>
    0.00 :   1cd613:       mov    0x17f0ab(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd619:       mov    %r12,%rdx
    0.00 :   1cd61c:       sub    0x8(%rsp),%rdx
    0.00 :   1cd621:       test   %eax,%eax
    0.00 :   1cd623:       jne    1d1cdc <_PyEval_EvalFrameDefault+0x4c8c>
    0.00 :   1cd629:       movzwl (%r12),%ecx
    0.00 :   1cd62e:       lea    0x11508b(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd635:       mov    %edx,0x68(%r13)
    0.00 :   1cd639:       add    $0x2,%r12
    0.00 :   1cd63d:       movzbl %cl,%ebp
    0.00 :   1cd640:       movzbl %ch,%ebx
    0.00 :   1cd643:       mov    (%rdi,%rbp,8),%rsi
    0.00 :   1cd647:       mov    %rbp,%r8
    0.00 :   1cd64a:       movslq %ebx,%r9
    0.00 :   1cd64d:       mov    %r10,%rbp
    0.00 :   1cd650:       jmpq   *%rsi
    0.00 :   1cd652:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1cd65d:       nopl   (%rax)
    0.00 :   1cd660:       mov    $0xfffffffe,%eax
    0.00 :   1cd665:       sub    %r9d,%eax
    0.00 :   1cd668:       cltq
    0.00 :   1cd66a:       cmpq   $0x0,0x0(%rbp,%rax,8)
    0.00 :   1cd670:       je     1d1a70 <_PyEval_EvalFrameDefault+0x4a20>
    0.00 :   1cd676:       lea    0x1(%r9),%r10d
         :            call_function():
    0.00 :   1cd67a:       mov    %rbp,%r8
    0.00 :   1cd67d:       lea    0x17bc5c(%rip),%r11        # 3492e0 <PyCFunction_Type>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cd684:       movslq %r10d,%rbx
         :            call_function():
    0.00 :   1cd687:       lea    0x0(,%rbx,8),%r9
    0.00 :   1cd68f:       sub    %r9,%r8
    0.00 :   1cd692:       lea    -0x8(%r8),%r15
    0.00 :   1cd696:       mov    (%r15),%r9
    0.00 :   1cd699:       mov    0x8(%r9),%rax
    0.00 :   1cd69d:       cmp    %r11,%rax
    0.00 :   1cd6a0:       je     1d19e0 <_PyEval_EvalFrameDefault+0x4990>
    0.00 :   1cd6a6:       lea    0x170ad3(%rip),%rdx        # 33e180 <PyMethodDescr_Type>
    0.00 :   1cd6ad:       cmp    %rdx,%rax
    0.00 :   1cd6b0:       je     1d1c10 <_PyEval_EvalFrameDefault+0x4bc0>
    0.00 :   1cd6b6:       lea    0x171623(%rip),%rcx        # 33ece0 <PyMethod_Type>
    0.00 :   1cd6bd:       cmp    %rcx,%rax
    0.00 :   1cd6c0:       je     1d2125 <_PyEval_EvalFrameDefault+0x50d5>
    0.00 :   1cd6c6:       lea    0x17d9d3(%rip),%rdi        # 34b0a0 <PyFunction_Type>
    0.00 :   1cd6cd:       addq   $0x1,(%r9)
    0.00 :   1cd6d1:       cmp    %rdi,%rax
    0.00 :   1cd6d4:       jne    1d1dac <_PyEval_EvalFrameDefault+0x4d5c>
    0.00 :   1cd6da:       xor    %ecx,%ecx
    0.00 :   1cd6dc:       mov    %rbx,%rdx
    0.00 :   1cd6df:       mov    %r9,%rdi
    0.00 :   1cd6e2:       mov    %r9,0x40(%rsp)
    0.00 :   1cd6e7:       mov    %r8,%rsi
    0.00 :   1cd6ea:       addr32 callq 164d30 <_PyFunction_FastCallKeywords>
    0.00 :   1cd6f0:       mov    0x40(%rsp),%r9
    0.00 :   1cd6f5:       mov    %rax,%rbx
    0.00 :   1cd6f8:       subq   $0x1,(%r9)
    0.00 :   1cd6fc:       je     f1cdb <_PyEval_EvalFrameDefault.cold.2897+0x176e>
    0.00 :   1cd702:       mov    %rbp,%r9
    0.00 :   1cd705:       cmp    %rbp,%r15
    0.00 :   1cd708:       jae    1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1cd70e:       mov    -0x8(%rbp),%rdi
    0.00 :   1cd712:       lea    -0x8(%rbp),%r9
    0.00 :   1cd716:       subq   $0x1,(%rdi)
    0.00 :   1cd71a:       je     1d2293 <_PyEval_EvalFrameDefault+0x5243>
    0.00 :   1cd720:       cmp    %r15,%r9
    0.00 :   1cd723:       jbe    1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1cd729:       mov    -0x10(%rbp),%rdi
    0.00 :   1cd72d:       lea    -0x10(%rbp),%r9
    0.00 :   1cd731:       subq   $0x1,(%rdi)
    0.00 :   1cd735:       je     1d22c5 <_PyEval_EvalFrameDefault+0x5275>
    0.00 :   1cd73b:       cmp    %r9,%r15
    0.00 :   1cd73e:       jae    1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1cd744:       mov    -0x18(%rbp),%rdi
    0.00 :   1cd748:       lea    -0x18(%rbp),%r9
    0.00 :   1cd74c:       subq   $0x1,(%rdi)
    0.00 :   1cd750:       je     1d2362 <_PyEval_EvalFrameDefault+0x5312>
    0.00 :   1cd756:       cmp    %r9,%r15
    0.00 :   1cd759:       jae    1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1cd75b:       mov    -0x20(%rbp),%rdi
    0.00 :   1cd75f:       lea    -0x20(%rbp),%r9
    0.00 :   1cd763:       subq   $0x1,(%rdi)
    0.00 :   1cd767:       je     1d25b5 <_PyEval_EvalFrameDefault+0x5565>
    0.00 :   1cd76d:       cmp    %r9,%r15
    0.00 :   1cd770:       jae    1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1cd772:       mov    -0x28(%rbp),%rdi
    0.00 :   1cd776:       lea    -0x28(%rbp),%r9
    0.00 :   1cd77a:       subq   $0x1,(%rdi)
    0.00 :   1cd77e:       je     1d2671 <_PyEval_EvalFrameDefault+0x5621>
    0.00 :   1cd784:       cmp    %r9,%r15
    0.00 :   1cd787:       jae    1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1cd789:       mov    -0x30(%rbp),%rdi
    0.00 :   1cd78d:       lea    -0x30(%rbp),%r9
    0.00 :   1cd791:       mov    %r9,%rbp
    0.00 :   1cd794:       subq   $0x1,(%rdi)
    0.00 :   1cd798:       je     1cd7af <_PyEval_EvalFrameDefault+0x75f>
    0.00 :   1cd79a:       cmp    %r9,%r15
    0.00 :   1cd79d:       jae    1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1cd79f:       sub    $0x8,%r9
    0.00 :   1cd7a3:       mov    (%r9),%rdi
    0.00 :   1cd7a6:       subq   $0x1,(%rdi)
    0.00 :   1cd7aa:       jne    1cd79a <_PyEval_EvalFrameDefault+0x74a>
    0.00 :   1cd7ac:       mov    %r9,%rbp
    0.00 :   1cd7af:       mov    0x8(%rdi),%r8
    0.00 :   1cd7b3:       mov    %r9,0x40(%rsp)
    0.00 :   1cd7b8:       callq  *0x30(%r8)
    0.00 :   1cd7bc:       mov    0x40(%rsp),%r9
    0.00 :   1cd7c1:       cmp    %r9,%r15
    0.00 :   1cd7c4:       jb     1cd70e <_PyEval_EvalFrameDefault+0x6be>
    0.00 :   1cd7ca:       nopw   0x0(%rax,%rax,1)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cd7d0:       lea    0x8(%r9),%rbp
    0.00 :   1cd7d4:       mov    %rbx,(%r9)
    0.00 :   1cd7d7:       test   %rbx,%rbx
    0.00 :   1cd7da:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cd7e0:       mov    0x17eee2(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cd7e6:       test   %edi,%edi
    0.00 :   1cd7e8:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cd7ee:       mov    0x17eed0(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd7f4:       mov    %r12,%rdx
    0.00 :   1cd7f7:       sub    0x8(%rsp),%rdx
    0.00 :   1cd7fc:       test   %eax,%eax
    0.00 :   1cd7fe:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cd804:       movzwl (%r12),%ecx
    0.00 :   1cd809:       lea    0x114eb0(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd810:       mov    %edx,0x68(%r13)
    0.00 :   1cd814:       add    $0x2,%r12
    0.00 :   1cd818:       movzbl %cl,%r10d
    0.00 :   1cd81c:       movzbl %ch,%esi
    0.00 :   1cd81f:       mov    %r10,%r8
    0.00 :   1cd822:       movslq %esi,%r9
    0.00 :   1cd825:       jmpq   *(%r11,%r10,8)
    0.00 :   1cd829:       nopl   0x0(%rax)
    0.00 :   1cd830:       sub    $0x8,%rbp
    0.00 :   1cd834:       mov    0x0(%rbp),%rdi
    0.00 :   1cd838:       subq   $0x1,(%rdi)
    0.00 :   1cd83c:       je     1d28d8 <_PyEval_EvalFrameDefault+0x5888>
    0.00 :   1cd842:       mov    0x17ee7c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd848:       mov    %r12,%rsi
    0.00 :   1cd84b:       sub    0x8(%rsp),%rsi
    0.00 :   1cd850:       test   %eax,%eax
    0.00 :   1cd852:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cd858:       movzwl (%r12),%ecx
    0.00 :   1cd85d:       lea    0x114e5c(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd864:       mov    %esi,0x68(%r13)
    0.00 :   1cd868:       add    $0x2,%r12
    0.00 :   1cd86c:       movzbl %cl,%edi
    0.00 :   1cd86f:       movzbl %ch,%edx
    0.00 :   1cd872:       mov    %rdi,%r8
    0.00 :   1cd875:       movslq %edx,%r9
    0.00 :   1cd878:       jmpq   *(%r10,%rdi,8)
    0.00 :   1cd87c:       nopl   0x0(%rax)
    0.00 :   1cd880:       sub    $0x8,%rbp
         :            cmp_outcome():
    0.00 :   1cd884:       lea    -0x6(%r9),%eax
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cd888:       mov    0x0(%rbp),%rbx
    0.00 :   1cd88c:       mov    -0x8(%rbp),%r15
         :            cmp_outcome():
    0.00 :   1cd890:       cmp    $0x4,%eax
    0.00 :   1cd893:       jbe    1d1770 <_PyEval_EvalFrameDefault+0x4720>
    0.00 :   1cd899:       mov    %r9d,%edx
    0.00 :   1cd89c:       mov    %rbx,%rsi
    0.00 :   1cd89f:       mov    %r15,%rdi
    0.00 :   1cd8a2:       addr32 callq 129ae0 <PyObject_RichCompare>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cd8a8:       subq   $0x1,(%r15)
    0.00 :   1cd8ac:       je     1d2229 <_PyEval_EvalFrameDefault+0x51d9>
    0.00 :   1cd8b2:       subq   $0x1,(%rbx)
    0.00 :   1cd8b6:       je     1d21bd <_PyEval_EvalFrameDefault+0x516d>
    0.00 :   1cd8bc:       mov    %rax,-0x8(%rbp)
    0.00 :   1cd8c0:       test   %rax,%rax
    0.00 :   1cd8c3:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cd8c9:       mov    0x17edf9(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cd8cf:       test   %eax,%eax
    0.00 :   1cd8d1:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cd8d7:       mov    0x17ede7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd8dd:       mov    %r12,%r8
    0.00 :   1cd8e0:       sub    0x8(%rsp),%r8
    0.00 :   1cd8e5:       test   %eax,%eax
    0.00 :   1cd8e7:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cd8ed:       movzwl (%r12),%ecx
    0.00 :   1cd8f2:       lea    0x114dc7(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd8f9:       mov    %r8d,0x68(%r13)
    0.00 :   1cd8fd:       add    $0x2,%r12
    0.00 :   1cd901:       movzbl %cl,%r11d
    0.00 :   1cd905:       movzbl %ch,%edi
    0.00 :   1cd908:       mov    %r11,%r8
    0.00 :   1cd90b:       movslq %edi,%r9
    0.00 :   1cd90e:       jmpq   *(%r10,%r11,8)
    0.00 :   1cd912:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1cd91d:       nopl   (%rax)
    0.00 :   1cd920:       mov    -0x8(%rbp),%r15
    0.00 :   1cd924:       movslq %r9d,%r8
    0.00 :   1cd927:       mov    0x18(%rsp),%r9
    0.00 :   1cd92c:       mov    %r15,%rdi
    0.00 :   1cd92f:       mov    0x18(%r9,%r8,8),%rsi
    0.00 :   1cd934:       addr32 callq 16e8c0 <PyObject_GetAttr>
    0.00 :   1cd93a:       subq   $0x1,(%r15)
    0.00 :   1cd93e:       je     1d2dc8 <_PyEval_EvalFrameDefault+0x5d78>
    0.00 :   1cd944:       mov    %rax,-0x8(%rbp)
    0.00 :   1cd948:       test   %rax,%rax
    0.00 :   1cd94b:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cd951:       mov    0x17ed70(%rip),%r15d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cd958:       test   %r15d,%r15d
    0.00 :   1cd95b:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cd961:       mov    0x17ed5d(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cd967:       mov    %r12,%r8
    0.00 :   1cd96a:       sub    0x8(%rsp),%r8
    0.00 :   1cd96f:       test   %eax,%eax
    0.00 :   1cd971:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cd977:       movzwl (%r12),%ecx
    0.00 :   1cd97c:       lea    0x114d3d(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cd983:       mov    %r8d,0x68(%r13)
    0.00 :   1cd987:       add    $0x2,%r12
    0.00 :   1cd98b:       movzbl %cl,%esi
    0.00 :   1cd98e:       movzbl %ch,%edx
    0.00 :   1cd991:       mov    %rsi,%r8
    0.00 :   1cd994:       movslq %edx,%r9
    0.00 :   1cd997:       jmpq   *(%r11,%rsi,8)
    0.00 :   1cd99b:       nopl   0x0(%rax,%rax,1)
    0.00 :   1cd9a0:       sub    $0x8,%rbp
    0.00 :   1cd9a4:       mov    0x0(%rbp),%rdx
    0.00 :   1cd9a8:       mov    $0x8,%ebx
    0.00 :   1cd9ad:       mov    %rdx,0x20(%rsp)
    0.00 :   1cd9b2:       mov    0x70(%r13),%esi
    0.00 :   1cd9b6:       test   %esi,%esi
    0.00 :   1cd9b8:       jg     1d204c <_PyEval_EvalFrameDefault+0x4ffc>
    0.00 :   1cd9be:       mov    0x40(%r13),%rdx
    0.00 :   1cd9c2:       mov    %rbp,%rsi
    0.00 :   1cd9c5:       sub    %rdx,%rsi
    0.00 :   1cd9c8:       sar    $0x3,%rsi
    0.00 :   1cd9cc:       test   %esi,%esi
    0.00 :   1cd9ce:       jne    1d31df <_PyEval_EvalFrameDefault+0x618f>
    0.00 :   1cd9d4:       cmp    $0x8,%ebx
    0.00 :   1cd9d7:       jne    1d2b7a <_PyEval_EvalFrameDefault+0x5b2a>
    0.00 :   1cd9dd:       mov    0x30(%r14),%r15d
    0.00 :   1cd9e1:       test   %r15d,%r15d
    0.00 :   1cd9e4:       jne    1d4122 <_PyEval_EvalFrameDefault+0x70d2>
    0.00 :   1cd9ea:       mov    0x17efd7(%rip),%r12        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1cd9f1:       mov    0x13c2c4(%rip),%r8d        # 309cbc <_Py_CheckRecursionLimit>
    0.00 :   1cd9f8:       mov    0x20(%r12),%edx
    0.00 :   1cd9fd:       lea    -0x1(%rdx),%edx
    0.00 :   1cda00:       mov    %edx,0x20(%r12)
    0.00 :   1cda05:       cmp    $0xc8,%r8d
    0.00 :   1cda0c:       jle    1d3561 <_PyEval_EvalFrameDefault+0x6511>
    0.00 :   1cda12:       sub    $0x32,%r8d
    0.00 :   1cda16:       cmp    %edx,%r8d
    0.00 :   1cda19:       jle    1ce162 <_PyEval_EvalFrameDefault+0x1112>
    0.00 :   1cda1f:       mov    0x17efa2(%rip),%rax        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1cda26:       lea    0x72d69(%rip),%rdx        # 240796 <_IO_stdin_used+0x7796>
    0.00 :   1cda2d:       xor    %edi,%edi
    0.00 :   1cda2f:       mov    0x20(%rsp),%rsi
    0.00 :   1cda34:       movb   $0x0,0x24(%rax)
    0.00 :   1cda38:       movb   $0x0,0x74(%r13)
    0.00 :   1cda3d:       mov    0x18(%r13),%r13
    0.00 :   1cda41:       mov    %r13,0x18(%r14)
    0.00 :   1cda45:       addr32 callq 127300 <_Py_CheckFunctionResult>
    0.00 :   1cda4b:       mov    0xe8(%rsp),%rcx
    0.00 :   1cda53:       xor    %fs:0x28,%rcx
    0.00 :   1cda5c:       jne    1d27ec <_PyEval_EvalFrameDefault+0x579c>
    0.00 :   1cda62:       add    $0xf8,%rsp
    0.00 :   1cda69:       pop    %rbx
    0.00 :   1cda6a:       pop    %rbp
    0.00 :   1cda6b:       pop    %r12
    0.00 :   1cda6d:       pop    %r13
    0.00 :   1cda6f:       pop    %r14
    0.00 :   1cda71:       pop    %r15
    0.00 :   1cda73:       retq
    0.00 :   1cda74:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1cda7f:       nop
    0.00 :   1cda80:       mov    -0x8(%rbp),%r15
    0.00 :   1cda84:       mov    %r9d,0x40(%rsp)
    0.00 :   1cda89:       mov    0x8(%r15),%rax
    0.00 :   1cda8d:       mov    %r15,%rdi
    0.00 :   1cda90:       callq  *0xe0(%rax)
    0.00 :   1cda96:       mov    0x40(%rsp),%r8d
    0.00 :   1cda9b:       test   %rax,%rax
    0.00 :   1cda9e:       je     1d1fc6 <_PyEval_EvalFrameDefault+0x4f76>
    0.00 :   1cdaa4:       lea    0x8(%rbp),%r15
    0.00 :   1cdaa8:       mov    %rax,0x0(%rbp)
    0.00 :   1cdaac:       mov    0x17ec16(%rip),%ebp        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cdab2:       test   %ebp,%ebp
    0.00 :   1cdab4:       jne    1d3559 <_PyEval_EvalFrameDefault+0x6509>
    0.00 :   1cdaba:       mov    0x17ec04(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cdac0:       mov    %r12,%r8
    0.00 :   1cdac3:       sub    0x8(%rsp),%r8
    0.00 :   1cdac8:       test   %eax,%eax
    0.00 :   1cdaca:       jne    1d21b3 <_PyEval_EvalFrameDefault+0x5163>
    0.00 :   1cdad0:       movzwl (%r12),%ebx
    0.00 :   1cdad5:       mov    %r8d,0x68(%r13)
    0.00 :   1cdad9:       add    $0x2,%r12
    0.00 :   1cdadd:       mov    %r15,%rbp
    0.00 :   1cdae0:       lea    0x114bd9(%rip),%rcx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cdae7:       movzbl %bl,%r11d
    0.00 :   1cdaeb:       movzbl %bh,%edi
    0.00 :   1cdaee:       mov    (%rcx,%r11,8),%rdx
    0.00 :   1cdaf2:       mov    %r11,%r8
    0.00 :   1cdaf5:       movslq %edi,%r9
    0.00 :   1cdaf8:       jmpq   *%rdx
    0.00 :   1cdafa:       nopw   0x0(%rax,%rax,1)
    0.00 :   1cdb00:       mov    0x8(%rsp),%r12
    0.00 :   1cdb05:       movslq %r9d,%r8
    0.00 :   1cdb08:       mov    0x17ebba(%rip),%ecx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cdb0e:       and    $0xfffffffffffffffe,%r8
    0.00 :   1cdb12:       lea    (%r12,%r8,1),%r12
    0.00 :   1cdb16:       test   %ecx,%ecx
    0.00 :   1cdb18:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cdb1e:       mov    0x17eba0(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cdb24:       test   %eax,%eax
    0.00 :   1cdb26:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cdb2c:       movzwl (%r12),%ebx
    0.00 :   1cdb31:       lea    0x114b88(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cdb38:       mov    %r8d,0x68(%r13)
    0.00 :   1cdb3c:       add    $0x2,%r12
    0.00 :   1cdb40:       movzbl %bl,%r10d
    0.00 :   1cdb44:       movzbl %bh,%esi
    0.00 :   1cdb47:       mov    %r10,%r8
    0.00 :   1cdb4a:       movslq %esi,%r9
    0.00 :   1cdb4d:       jmpq   *(%rdi,%r10,8)
    0.00 :   1cdb51:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1cdb5c:       nopl   0x0(%rax)
    0.00 :   1cdb60:       sub    $0x8,%rbp
    0.00 :   1cdb64:       mov    0x0(%rbp),%rbx
    0.00 :   1cdb68:       lea    0x17e6d1(%rip),%rax        # 34c240 <_Py_FalseStruct>
    0.00 :   1cdb6f:       cmp    %rax,%rbx
    0.00 :   1cdb72:       je     1d216e <_PyEval_EvalFrameDefault+0x511e>
    0.00 :   1cdb78:       lea    0x17e6e1(%rip),%r8        # 34c260 <_Py_TrueStruct>
    0.00 :   1cdb7f:       cmp    %r8,%rbx
    0.00 :   1cdb82:       jne    1d1f44 <_PyEval_EvalFrameDefault+0x4ef4>
    0.00 :   1cdb88:       subq   $0x1,(%rbx)
    0.00 :   1cdb8c:       je     f1164 <_PyEval_EvalFrameDefault.cold.2897+0xbf7>
    0.00 :   1cdb92:       mov    0x8(%rsp),%rbx
    0.00 :   1cdb97:       mov    0x17eb27(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cdb9d:       and    $0xfffffffffffffffe,%r9
    0.00 :   1cdba1:       lea    (%rbx,%r9,1),%r12
    0.00 :   1cdba5:       test   %eax,%eax
    0.00 :   1cdba7:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cdbad:       movzwl (%r12),%ecx
    0.00 :   1cdbb2:       lea    0x114b07(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cdbb9:       mov    %r9d,0x68(%r13)
    0.00 :   1cdbbd:       add    $0x2,%r12
    0.00 :   1cdbc1:       movzbl %cl,%r10d
    0.00 :   1cdbc5:       movzbl %ch,%esi
    0.00 :   1cdbc8:       mov    %r10,%r8
    0.00 :   1cdbcb:       movslq %esi,%r9
    0.00 :   1cdbce:       jmpq   *(%rdi,%r10,8)
    0.00 :   1cdbd2:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1cdbdd:       nopl   (%rax)
    0.00 :   1cdbe0:       mov    %r12,%r15
    0.00 :   1cdbe3:       sub    0x8(%rsp),%r15
    0.00 :   1cdbe8:       mov    %rbp,%rcx
    0.00 :   1cdbeb:       sub    0x40(%r13),%rcx
    0.00 :   1cdbef:       mov    %r15,%rax
    0.00 :   1cdbf2:       sar    $0x3,%rcx
    0.00 :   1cdbf6:       mov    %r8d,%esi
    0.00 :   1cdbf9:       mov    %r13,%rdi
    0.00 :   1cdbfc:       sar    %rax
    0.00 :   1cdbff:       lea    (%r9,%rax,2),%edx
    0.00 :   1cdc03:       addr32 callq 119d60 <PyFrame_BlockSetup>
    0.00 :   1cdc09:       mov    0x17eab8(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cdc10:       test   %r9d,%r9d
    0.00 :   1cdc13:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cdc19:       mov    0x17eaa5(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cdc1f:       test   %eax,%eax
    0.00 :   1cdc21:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cdc27:       movzwl (%r12),%ebx
    0.00 :   1cdc2c:       lea    0x114a8d(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cdc33:       mov    %r15d,0x68(%r13)
    0.00 :   1cdc37:       add    $0x2,%r12
    0.00 :   1cdc3b:       movzbl %bl,%esi
    0.00 :   1cdc3e:       movzbl %bh,%edi
    0.00 :   1cdc41:       mov    %rsi,%r8
    0.00 :   1cdc44:       movslq %edi,%r9
    0.00 :   1cdc47:       jmpq   *(%r10,%rsi,8)
    0.00 :   1cdc4b:       movzwl (%r12),%eax
    0.00 :   1cdc50:       shl    $0x8,%r9d
    0.00 :   1cdc54:       add    $0x2,%r12
    0.00 :   1cdc58:       movzbl %ah,%ecx
    0.00 :   1cdc5b:       movzbl %al,%r8d
    0.00 :   1cdc5f:       or     %ecx,%r9d
    0.00 :   1cdc62:       movslq %r9d,%r9
    0.00 :   1cdc65:       jmpq   1cd17b <_PyEval_EvalFrameDefault+0x12b>
    0.00 :   1cdc6a:       sub    $0x8,%rbp
    0.00 :   1cdc6e:       mov    -0x8(%rbp),%rbx
    0.00 :   1cdc72:       mov    0x0(%rbp),%r15
    0.00 :   1cdc76:       mov    %rbx,%rdi
    0.00 :   1cdc79:       mov    %r15,%rsi
    0.00 :   1cdc7c:       addr32 callq 131df0 <PyObject_GetItem>
    0.00 :   1cdc82:       subq   $0x1,(%rbx)
    0.00 :   1cdc86:       je     1d1e79 <_PyEval_EvalFrameDefault+0x4e29>
    0.00 :   1cdc8c:       subq   $0x1,(%r15)
    0.00 :   1cdc90:       je     1d1e94 <_PyEval_EvalFrameDefault+0x4e44>
    0.00 :   1cdc96:       mov    %rax,-0x8(%rbp)
    0.00 :   1cdc9a:       test   %rax,%rax
    0.00 :   1cdc9d:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cdca3:       mov    0x17ea1e(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cdcaa:       test   %r9d,%r9d
    0.00 :   1cdcad:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cdcb3:       mov    0x17ea0b(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cdcb9:       mov    %r12,%r15
    0.00 :   1cdcbc:       sub    0x8(%rsp),%r15
    0.00 :   1cdcc1:       test   %eax,%eax
    0.00 :   1cdcc3:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cdcc9:       movzwl (%r12),%ebx
    0.00 :   1cdcce:       lea    0x1149eb(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cdcd5:       mov    %r15d,0x68(%r13)
    0.00 :   1cdcd9:       add    $0x2,%r12
    0.00 :   1cdcdd:       movzbl %bl,%r10d
    0.00 :   1cdce1:       movzbl %bh,%ecx
    0.00 :   1cdce4:       mov    %r10,%r8
    0.00 :   1cdce7:       movslq %ecx,%r9
    0.00 :   1cdcea:       jmpq   *(%r11,%r10,8)
    0.00 :   1cdcee:       sub    $0x8,%rbp
    0.00 :   1cdcf2:       mov    0x0(%rbp),%r15
    0.00 :   1cdcf6:       lea    0x179a23(%rip),%r10        # 347720 <PyTuple_Type>
    0.00 :   1cdcfd:       mov    0x8(%r15),%rbx
    0.00 :   1cdd01:       cmp    %r10,%rbx
    0.00 :   1cdd04:       jne    1d2723 <_PyEval_EvalFrameDefault+0x56d3>
    0.00 :   1cdd0a:       movslq %r9d,%r11
    0.00 :   1cdd0d:       cmp    %r11,0x10(%r15)
    0.00 :   1cdd11:       jne    1d2c70 <_PyEval_EvalFrameDefault+0x5c20>
    0.00 :   1cdd17:       test   %r9d,%r9d
    0.00 :   1cdd1a:       je     1cddae <_PyEval_EvalFrameDefault+0xd5e>
    0.00 :   1cdd20:       lea    -0x1(%r9),%r10d
    0.00 :   1cdd24:       lea    0x18(%r15),%rcx
    0.00 :   1cdd28:       movslq %r10d,%rsi
    0.00 :   1cdd2b:       lea    -0x2(%r9),%eax
    0.00 :   1cdd2f:       mov    (%rcx,%rsi,8),%rdi
    0.00 :   1cdd33:       addq   $0x1,(%rdi)
    0.00 :   1cdd37:       mov    %rdi,0x0(%rbp)
    0.00 :   1cdd3b:       test   %r10d,%r10d
    0.00 :   1cdd3e:       je     1cdda6 <_PyEval_EvalFrameDefault+0xd56>
    0.00 :   1cdd40:       movslq %eax,%r11
    0.00 :   1cdd43:       lea    -0x3(%r9),%ebx
    0.00 :   1cdd47:       mov    (%rcx,%r11,8),%r8
    0.00 :   1cdd4b:       addq   $0x1,(%r8)
    0.00 :   1cdd4f:       mov    %r8,0x8(%rbp)
    0.00 :   1cdd53:       test   %eax,%eax
    0.00 :   1cdd55:       je     1cdda6 <_PyEval_EvalFrameDefault+0xd56>
    0.00 :   1cdd57:       movslq %ebx,%rdx
    0.00 :   1cdd5a:       lea    -0x4(%r9),%eax
    0.00 :   1cdd5e:       mov    (%rcx,%rdx,8),%rsi
    0.00 :   1cdd62:       addq   $0x1,(%rsi)
    0.00 :   1cdd66:       mov    %rsi,0x10(%rbp)
    0.00 :   1cdd6a:       test   %ebx,%ebx
    0.00 :   1cdd6c:       je     1cdda6 <_PyEval_EvalFrameDefault+0xd56>
    0.00 :   1cdd6e:       movslq %eax,%rdi
    0.00 :   1cdd71:       lea    0x20(%rbp),%r8
    0.00 :   1cdd75:       lea    -0x5(%r9),%r9d
    0.00 :   1cdd79:       mov    (%rcx,%rdi,8),%r11
    0.00 :   1cdd7d:       addq   $0x1,(%r11)
    0.00 :   1cdd81:       mov    %r11,0x18(%rbp)
    0.00 :   1cdd85:       test   %eax,%eax
    0.00 :   1cdd87:       je     1cdda6 <_PyEval_EvalFrameDefault+0xd56>
    0.00 :   1cdd89:       movslq %r9d,%rbx
    0.00 :   1cdd8c:       add    $0x8,%r8
    0.00 :   1cdd90:       sub    $0x1,%r9d
    0.00 :   1cdd94:       mov    (%rcx,%rbx,8),%rdx
    0.00 :   1cdd98:       addq   $0x1,(%rdx)
    0.00 :   1cdd9c:       mov    %rdx,-0x8(%r8)
    0.00 :   1cdda0:       cmp    $0xffffffff,%r9d
    0.00 :   1cdda4:       jne    1cdd89 <_PyEval_EvalFrameDefault+0xd39>
    0.00 :   1cdda6:       mov    %r10d,%r10d
    0.00 :   1cdda9:       lea    0x8(%rbp,%r10,8),%rbp
    0.00 :   1cddae:       subq   $0x1,(%r15)
    0.00 :   1cddb2:       je     1d1efd <_PyEval_EvalFrameDefault+0x4ead>
    0.00 :   1cddb8:       mov    0x17e909(%rip),%r15d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cddbf:       test   %r15d,%r15d
    0.00 :   1cddc2:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cddc8:       mov    0x17e8f6(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cddce:       mov    %r12,%rsi
    0.00 :   1cddd1:       sub    0x8(%rsp),%rsi
    0.00 :   1cddd6:       test   %eax,%eax
    0.00 :   1cddd8:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cddde:       movzwl (%r12),%ebx
    0.00 :   1cdde3:       lea    0x1148d6(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cddea:       mov    %esi,0x68(%r13)
    0.00 :   1cddee:       add    $0x2,%r12
    0.00 :   1cddf2:       movzbl %bl,%edi
    0.00 :   1cddf5:       movzbl %bh,%edx
    0.00 :   1cddf8:       mov    %rdi,%r8
    0.00 :   1cddfb:       movslq %edx,%r9
    0.00 :   1cddfe:       jmpq   *(%r11,%rdi,8)
    0.00 :   1cde02:       mov    -0x8(%rbp),%r15
    0.00 :   1cde06:       mov    -0x10(%rbp),%rbx
    0.00 :   1cde0a:       sub    $0x10,%rbp
    0.00 :   1cde0e:       mov    0x18(%rsp),%rax
    0.00 :   1cde13:       mov    %rbx,%rdx
    0.00 :   1cde16:       mov    %r15,%rdi
    0.00 :   1cde19:       mov    0x18(%rax,%r9,8),%rsi
    0.00 :   1cde1e:       addr32 callq 1c5150 <PyObject_SetAttr>
    0.00 :   1cde24:       subq   $0x1,(%rbx)
    0.00 :   1cde28:       je     1d3f36 <_PyEval_EvalFrameDefault+0x6ee6>
    0.00 :   1cde2e:       subq   $0x1,(%r15)
    0.00 :   1cde32:       je     f21c7 <_PyEval_EvalFrameDefault.cold.2897+0x1c5a>
    0.00 :   1cde38:       test   %eax,%eax
    0.00 :   1cde3a:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cde40:       mov    0x17e881(%rip),%r10d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cde47:       test   %r10d,%r10d
    0.00 :   1cde4a:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cde50:       mov    0x17e86e(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cde56:       mov    %r12,%rcx
    0.00 :   1cde59:       sub    0x8(%rsp),%rcx
    0.00 :   1cde5e:       test   %eax,%eax
    0.00 :   1cde60:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cde66:       movzwl (%r12),%ebx
    0.00 :   1cde6b:       lea    0x11484e(%rip),%rdx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cde72:       mov    %ecx,0x68(%r13)
    0.00 :   1cde76:       add    $0x2,%r12
    0.00 :   1cde7a:       movzbl %bl,%edi
    0.00 :   1cde7d:       movzbl %bh,%esi
    0.00 :   1cde80:       mov    %rdi,%r8
    0.00 :   1cde83:       movslq %esi,%r9
    0.00 :   1cde86:       jmpq   *(%rdx,%rdi,8)
    0.00 :   1cde89:       movslq %r9d,%rdi
    0.00 :   1cde8c:       mov    %r9d,0x40(%rsp)
    0.00 :   1cde91:       addr32 callq 1250b0 <PyTuple_New>
    0.00 :   1cde97:       test   %rax,%rax
    0.00 :   1cde9a:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cdea0:       mov    0x40(%rsp),%r8d
    0.00 :   1cdea5:       mov    %rbp,%rcx
    0.00 :   1cdea8:       mov    %r8d,%r11d
    0.00 :   1cdeab:       sub    $0x1,%r11d
    0.00 :   1cdeaf:       js     1cdf35 <_PyEval_EvalFrameDefault+0xee5>
    0.00 :   1cdeb5:       mov    -0x8(%rbp),%rsi
    0.00 :   1cdeb9:       movslq %r11d,%r15
    0.00 :   1cdebc:       lea    -0x2(%r8),%r10d
    0.00 :   1cdec0:       sub    $0x8,%rcx
    0.00 :   1cdec4:       mov    %rsi,0x18(%rax,%r15,8)
    0.00 :   1cdec9:       cmp    $0xffffffff,%r10d
    0.00 :   1cdecd:       je     1cdf35 <_PyEval_EvalFrameDefault+0xee5>
    0.00 :   1cdecf:       mov    -0x10(%rbp),%r9
    0.00 :   1cded3:       movslq %r10d,%rbx
    0.00 :   1cded6:       lea    -0x3(%r8),%edx
    0.00 :   1cdeda:       lea    -0x10(%rbp),%rcx
    0.00 :   1cdede:       mov    %r9,0x18(%rax,%rbx,8)
    0.00 :   1cdee3:       cmp    $0xffffffff,%edx
    0.00 :   1cdee6:       je     1cdf35 <_PyEval_EvalFrameDefault+0xee5>
    0.00 :   1cdee8:       mov    -0x18(%rbp),%rdi
    0.00 :   1cdeec:       movslq %edx,%r11
    0.00 :   1cdeef:       lea    -0x4(%r8),%r15d
    0.00 :   1cdef3:       lea    -0x18(%rbp),%rcx
    0.00 :   1cdef7:       mov    %rdi,0x18(%rax,%r11,8)
    0.00 :   1cdefc:       cmp    $0xffffffff,%r15d
    0.00 :   1cdf00:       je     1cdf35 <_PyEval_EvalFrameDefault+0xee5>
    0.00 :   1cdf02:       lea    -0x20(%rbp),%rcx
    0.00 :   1cdf06:       mov    -0x20(%rbp),%rbp
    0.00 :   1cdf0a:       movslq %r15d,%rsi
    0.00 :   1cdf0d:       lea    -0x5(%r8),%r8d
    0.00 :   1cdf11:       mov    %rbp,0x18(%rax,%rsi,8)
    0.00 :   1cdf16:       cmp    $0xffffffff,%r8d
    0.00 :   1cdf1a:       je     1cdf35 <_PyEval_EvalFrameDefault+0xee5>
    0.00 :   1cdf1c:       sub    $0x8,%rcx
    0.00 :   1cdf20:       mov    (%rcx),%r10
    0.00 :   1cdf23:       movslq %r8d,%r9
    0.00 :   1cdf26:       sub    $0x1,%r8d
    0.00 :   1cdf2a:       mov    %r10,0x18(%rax,%r9,8)
    0.00 :   1cdf2f:       cmp    $0xffffffff,%r8d
    0.00 :   1cdf33:       jne    1cdf1c <_PyEval_EvalFrameDefault+0xecc>
    0.00 :   1cdf35:       mov    %rax,(%rcx)
    0.00 :   1cdf38:       mov    0x17e78a(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cdf3e:       lea    0x8(%rcx),%rbp
    0.00 :   1cdf42:       test   %eax,%eax
    0.00 :   1cdf44:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cdf4a:       mov    0x17e774(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cdf50:       mov    %r12,%rbx
    0.00 :   1cdf53:       sub    0x8(%rsp),%rbx
    0.00 :   1cdf58:       test   %eax,%eax
    0.00 :   1cdf5a:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cdf60:       movzwl (%r12),%ecx
    0.00 :   1cdf65:       lea    0x114754(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cdf6c:       mov    %ebx,0x68(%r13)
    0.00 :   1cdf70:       add    $0x2,%r12
    0.00 :   1cdf74:       movzbl %cl,%edx
    0.00 :   1cdf77:       movzbl %ch,%edi
    0.00 :   1cdf7a:       mov    %rdx,%r8
    0.00 :   1cdf7d:       movslq %edi,%r9
    0.00 :   1cdf80:       jmpq   *(%r11,%rdx,8)
    0.00 :   1cdf84:       mov    %r13,%rdi
    0.00 :   1cdf87:       addr32 callq 119d30 <PyFrame_BlockPop>
    0.00 :   1cdf8d:       mov    %rbp,%r9
    0.00 :   1cdf90:       sub    0x40(%r13),%r9
    0.00 :   1cdf94:       sar    $0x3,%r9
    0.00 :   1cdf98:       cmp    %r9d,0x8(%rax)
    0.00 :   1cdf9c:       jl     1d4eee <_PyEval_EvalFrameDefault+0x7e9e>
    0.00 :   1cdfa2:       mov    0x17e71f(%rip),%r10d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cdfa9:       test   %r10d,%r10d
    0.00 :   1cdfac:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cdfb2:       mov    0x17e70c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cdfb8:       mov    %r12,%rdi
    0.00 :   1cdfbb:       sub    0x8(%rsp),%rdi
    0.00 :   1cdfc0:       test   %eax,%eax
    0.00 :   1cdfc2:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cdfc8:       movzwl (%r12),%ecx
    0.00 :   1cdfcd:       lea    0x1146ec(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cdfd4:       mov    %edi,0x68(%r13)
    0.00 :   1cdfd8:       add    $0x2,%r12
    0.00 :   1cdfdc:       movzbl %cl,%r11d
    0.00 :   1cdfe0:       movzbl %ch,%esi
    0.00 :   1cdfe3:       mov    %r11,%r8
    0.00 :   1cdfe6:       movslq %esi,%r9
    0.00 :   1cdfe9:       jmpq   *(%r15,%r11,8)
    0.00 :   1cdfed:       mov    0x38(%rsp),%rsi
    0.00 :   1cdff2:       movslq %r9d,%r8
    0.00 :   1cdff5:       mov    (%rsi,%r8,8),%r11
    0.00 :   1cdff9:       mov    0x10(%r11),%r10
    0.00 :   1cdffd:       test   %r10,%r10
    0.00 :   1ce000:       je     f06e7 <_PyEval_EvalFrameDefault.cold.2897+0x17a>
    0.00 :   1ce006:       addq   $0x1,(%r10)
    0.00 :   1ce00a:       lea    0x8(%rbp),%r15
    0.00 :   1ce00e:       mov    %r10,0x0(%rbp)
    0.00 :   1ce012:       mov    0x17e6b0(%rip),%ebp        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce018:       test   %ebp,%ebp
    0.00 :   1ce01a:       jne    1d3e69 <_PyEval_EvalFrameDefault+0x6e19>
    0.00 :   1ce020:       mov    0x17e69e(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce026:       mov    %r12,%r9
    0.00 :   1ce029:       sub    0x8(%rsp),%r9
    0.00 :   1ce02e:       test   %eax,%eax
    0.00 :   1ce030:       jne    1d22cd <_PyEval_EvalFrameDefault+0x527d>
    0.00 :   1ce036:       movzwl (%r12),%ebx
    0.00 :   1ce03b:       mov    %r9d,0x68(%r13)
    0.00 :   1ce03f:       add    $0x2,%r12
    0.00 :   1ce043:       mov    %r15,%rbp
    0.00 :   1ce046:       lea    0x114673(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce04d:       movzbl %bl,%edx
    0.00 :   1ce050:       movzbl %bh,%ecx
    0.00 :   1ce053:       mov    (%rdi,%rdx,8),%rsi
    0.00 :   1ce057:       mov    %rdx,%r8
    0.00 :   1ce05a:       movslq %ecx,%r9
    0.00 :   1ce05d:       jmpq   *%rsi
    0.00 :   1ce05f:       sub    $0x8,%rbp
    0.00 :   1ce063:       mov    -0x8(%rbp),%r15
    0.00 :   1ce067:       mov    0x0(%rbp),%rbx
    0.00 :   1ce06b:       lea    0x17902e(%rip),%r11        # 3470a0 <PyUnicode_Type>
    0.00 :   1ce072:       cmp    %r11,0x8(%r15)
    0.00 :   1ce076:       je     1d2258 <_PyEval_EvalFrameDefault+0x5208>
    0.00 :   1ce07c:       mov    %rbx,%rsi
    0.00 :   1ce07f:       mov    %r15,%rdi
    0.00 :   1ce082:       addr32 callq 12bbd0 <PyNumber_Add>
    0.00 :   1ce088:       subq   $0x1,(%r15)
    0.00 :   1ce08c:       je     1d25c7 <_PyEval_EvalFrameDefault+0x5577>
    0.00 :   1ce092:       subq   $0x1,(%rbx)
    0.00 :   1ce096:       je     1d229b <_PyEval_EvalFrameDefault+0x524b>
    0.00 :   1ce09c:       mov    %rax,-0x8(%rbp)
    0.00 :   1ce0a0:       test   %rax,%rax
    0.00 :   1ce0a3:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce0a9:       mov    0x17e618(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce0b0:       test   %r9d,%r9d
    0.00 :   1ce0b3:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce0b9:       mov    0x17e605(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce0bf:       test   %eax,%eax
    0.00 :   1ce0c1:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce0c7:       movzwl (%r12),%ecx
    0.00 :   1ce0cc:       mov    %r12,%rdi
    0.00 :   1ce0cf:       lea    0x1145ea(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce0d6:       add    $0x2,%r12
    0.00 :   1ce0da:       sub    0x8(%rsp),%rdi
    0.00 :   1ce0df:       movzbl %cl,%edx
    0.00 :   1ce0e2:       movzbl %ch,%esi
    0.00 :   1ce0e5:       mov    %edi,0x68(%r13)
    0.00 :   1ce0e9:       mov    %rdx,%r8
    0.00 :   1ce0ec:       movslq %esi,%r9
    0.00 :   1ce0ef:       jmpq   *(%r10,%rdx,8)
    0.00 :   1ce0f3:       sub    $0x8,%rbp
    0.00 :   1ce0f7:       mov    0x0(%rbp),%rdi
    0.00 :   1ce0fb:       mov    0x30(%rsp),%r11
    0.00 :   1ce100:       mov    %rdi,0x20(%rsp)
    0.00 :   1ce105:       testb  $0x2,0x21(%r11)
    0.00 :   1ce10a:       jne    1d3c15 <_PyEval_EvalFrameDefault+0x6bc5>
    0.00 :   1ce110:       mov    %rbp,0x48(%r13)
    0.00 :   1ce114:       mov    $0x40,%ebx
    0.00 :   1ce119:       mov    0x30(%r14),%r12d
    0.00 :   1ce11d:       test   %r12d,%r12d
    0.00 :   1ce120:       jne    1d3aad <_PyEval_EvalFrameDefault+0x6a5d>
    0.00 :   1ce126:       mov    0x17e89b(%rip),%r12        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1ce12d:       mov    0x13bb88(%rip),%r8d        # 309cbc <_Py_CheckRecursionLimit>
    0.00 :   1ce134:       mov    0x20(%r12),%ebp
    0.00 :   1ce139:       lea    -0x1(%rbp),%edx
    0.00 :   1ce13c:       mov    %edx,0x20(%r12)
    0.00 :   1ce141:       cmp    $0xc8,%r8d
    0.00 :   1ce148:       jle    1d3561 <_PyEval_EvalFrameDefault+0x6511>
    0.00 :   1ce14e:       sub    $0x32,%r8d
    0.00 :   1ce152:       cmp    %r8d,%edx
    0.00 :   1ce155:       jge    1ce162 <_PyEval_EvalFrameDefault+0x1112>
    0.00 :   1ce157:       mov    0x17e86a(%rip),%rcx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1ce15e:       movb   $0x0,0x24(%rcx)
    0.00 :   1ce162:       movb   $0x0,0x74(%r13)
    0.00 :   1ce167:       mov    0x18(%r13),%r13
    0.00 :   1ce16b:       lea    0x72624(%rip),%rdx        # 240796 <_IO_stdin_used+0x7796>
    0.00 :   1ce172:       xor    %edi,%edi
    0.00 :   1ce174:       mov    0x20(%rsp),%rsi
    0.00 :   1ce179:       mov    %r13,0x18(%r14)
    0.00 :   1ce17d:       addr32 callq 127300 <_Py_CheckFunctionResult>
    0.00 :   1ce183:       jmpq   1cda4b <_PyEval_EvalFrameDefault+0x9fb>
    0.00 :   1ce188:       mov    0x17e536(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce18e:       and    $0xfffffffffffffffe,%r9
    0.00 :   1ce192:       add    %r9,%r12
    0.00 :   1ce195:       test   %eax,%eax
    0.00 :   1ce197:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce19d:       movzwl (%r12),%ebx
    0.00 :   1ce1a2:       mov    %r12,%r9
    0.00 :   1ce1a5:       lea    0x114514(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce1ac:       add    $0x2,%r12
    0.00 :   1ce1b0:       sub    0x8(%rsp),%r9
    0.00 :   1ce1b5:       movzbl %bl,%edi
    0.00 :   1ce1b8:       movzbl %bh,%ecx
    0.00 :   1ce1bb:       mov    %r9d,0x68(%r13)
    0.00 :   1ce1bf:       mov    %rdi,%r8
    0.00 :   1ce1c2:       movslq %ecx,%r9
    0.00 :   1ce1c5:       jmpq   *(%r11,%rdi,8)
    0.00 :   1ce1c9:       mov    -0x8(%rbp),%r15
    0.00 :   1ce1cd:       mov    %r15,%rdi
    0.00 :   1ce1d0:       addr32 callq 114240 <PyObject_GetIter>
    0.00 :   1ce1d6:       subq   $0x1,(%r15)
    0.00 :   1ce1da:       je     1d2b0e <_PyEval_EvalFrameDefault+0x5abe>
    0.00 :   1ce1e0:       mov    %rax,-0x8(%rbp)
    0.00 :   1ce1e4:       test   %rax,%rax
    0.00 :   1ce1e7:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce1ed:       mov    0x17e4d4(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce1f4:       test   %r9d,%r9d
    0.00 :   1ce1f7:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce1fd:       mov    0x17e4c1(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce203:       mov    %r12,%r11
    0.00 :   1ce206:       sub    0x8(%rsp),%r11
    0.00 :   1ce20b:       test   %eax,%eax
    0.00 :   1ce20d:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce213:       movzwl (%r12),%ecx
    0.00 :   1ce218:       lea    0x1144a1(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce21f:       mov    %r11d,0x68(%r13)
    0.00 :   1ce223:       add    $0x2,%r12
    0.00 :   1ce227:       movzbl %cl,%edx
    0.00 :   1ce22a:       movzbl %ch,%ebx
    0.00 :   1ce22d:       mov    %rdx,%r8
    0.00 :   1ce230:       movslq %ebx,%r9
    0.00 :   1ce233:       jmpq   *(%r10,%rdx,8)
    0.00 :   1ce237:       mov    -0x18(%rbp),%r9
    0.00 :   1ce23b:       mov    -0x8(%rbp),%rbx
    0.00 :   1ce23f:       sub    $0x18,%rbp
    0.00 :   1ce243:       mov    0x8(%rbp),%r15
    0.00 :   1ce247:       mov    %r9,%rdx
    0.00 :   1ce24a:       mov    %r9,0x40(%rsp)
    0.00 :   1ce24f:       mov    %rbx,%rsi
    0.00 :   1ce252:       mov    %r15,%rdi
    0.00 :   1ce255:       addr32 callq 132ba0 <PyObject_SetItem>
    0.00 :   1ce25b:       mov    0x40(%rsp),%r11
    0.00 :   1ce260:       subq   $0x1,(%r11)
    0.00 :   1ce264:       je     1d33b7 <_PyEval_EvalFrameDefault+0x6367>
    0.00 :   1ce26a:       subq   $0x1,(%r15)
    0.00 :   1ce26e:       je     1d339f <_PyEval_EvalFrameDefault+0x634f>
    0.00 :   1ce274:       subq   $0x1,(%rbx)
    0.00 :   1ce278:       je     1d30f7 <_PyEval_EvalFrameDefault+0x60a7>
    0.00 :   1ce27e:       test   %eax,%eax
    0.00 :   1ce280:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce286:       mov    0x17e43c(%rip),%ecx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce28c:       test   %ecx,%ecx
    0.00 :   1ce28e:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce294:       mov    0x17e42a(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce29a:       mov    %r12,%rdi
    0.00 :   1ce29d:       sub    0x8(%rsp),%rdi
    0.00 :   1ce2a2:       test   %eax,%eax
    0.00 :   1ce2a4:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce2aa:       movzwl (%r12),%ebx
    0.00 :   1ce2af:       lea    0x11440a(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce2b6:       mov    %edi,0x68(%r13)
    0.00 :   1ce2ba:       add    $0x2,%r12
    0.00 :   1ce2be:       movzbl %bl,%esi
    0.00 :   1ce2c1:       movzbl %bh,%edx
    0.00 :   1ce2c4:       mov    %rsi,%r8
    0.00 :   1ce2c7:       movslq %edx,%r9
    0.00 :   1ce2ca:       jmpq   *(%r10,%rsi,8)
    0.00 :   1ce2ce:       sub    $0x8,%rbp
    0.00 :   1ce2d2:       mov    0x0(%rbp),%r15
    0.00 :   1ce2d6:       mov    -0x8(%rbp),%rbx
    0.00 :   1ce2da:       mov    %r15,%rsi
    0.00 :   1ce2dd:       mov    %rbx,%rdi
    0.00 :   1ce2e0:       addr32 callq 12cde0 <PyNumber_Subtract>
    0.00 :   1ce2e6:       subq   $0x1,(%r15)
    0.00 :   1ce2ea:       je     1d31b5 <_PyEval_EvalFrameDefault+0x6165>
    0.00 :   1ce2f0:       subq   $0x1,(%rbx)
    0.00 :   1ce2f4:       je     1d2b27 <_PyEval_EvalFrameDefault+0x5ad7>
    0.00 :   1ce2fa:       mov    %rax,-0x8(%rbp)
    0.00 :   1ce2fe:       test   %rax,%rax
    0.00 :   1ce301:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce307:       mov    0x17e3ba(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce30e:       test   %r8d,%r8d
    0.00 :   1ce311:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce317:       mov    0x17e3a7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce31d:       mov    %r12,%r9
    0.00 :   1ce320:       sub    0x8(%rsp),%r9
    0.00 :   1ce325:       test   %eax,%eax
    0.00 :   1ce327:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce32d:       movzwl (%r12),%ecx
    0.00 :   1ce332:       lea    0x114387(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce339:       mov    %r9d,0x68(%r13)
    0.00 :   1ce33d:       add    $0x2,%r12
    0.00 :   1ce341:       movzbl %cl,%edi
    0.00 :   1ce344:       movzbl %ch,%edx
    0.00 :   1ce347:       mov    %rdi,%r8
    0.00 :   1ce34a:       movslq %edx,%r9
    0.00 :   1ce34d:       jmpq   *(%rsi,%rdi,8)
    0.00 :   1ce350:       jmpq   1cdbe0 <_PyEval_EvalFrameDefault+0xb90>
    0.00 :   1ce355:       xor    %ebx,%ebx
    0.00 :   1ce357:       cmp    $0x3,%r9d
    0.00 :   1ce35b:       je     1d2fa4 <_PyEval_EvalFrameDefault+0x5f54>
    0.00 :   1ce361:       mov    -0x10(%rbp),%r9
    0.00 :   1ce365:       mov    -0x8(%rbp),%r15
    0.00 :   1ce369:       lea    -0x8(%rbp),%r8
    0.00 :   1ce36d:       mov    %rbx,%rdx
    0.00 :   1ce370:       mov    %r8,0x40(%rsp)
    0.00 :   1ce375:       mov    %r9,%rdi
    0.00 :   1ce378:       mov    %r15,%rsi
    0.00 :   1ce37b:       mov    %r9,0x50(%rsp)
    0.00 :   1ce380:       addr32 callq 124b10 <PySlice_New>
    0.00 :   1ce386:       mov    0x50(%rsp),%rdi
    0.00 :   1ce38b:       subq   $0x1,(%rdi)
    0.00 :   1ce38f:       je     f098e <_PyEval_EvalFrameDefault.cold.2897+0x421>
    0.00 :   1ce395:       subq   $0x1,(%r15)
    0.00 :   1ce399:       je     f10d3 <_PyEval_EvalFrameDefault.cold.2897+0xb66>
    0.00 :   1ce39f:       test   %rbx,%rbx
    0.00 :   1ce3a2:       jne    1d2f95 <_PyEval_EvalFrameDefault+0x5f45>
    0.00 :   1ce3a8:       mov    %rax,-0x10(%rbp)
    0.00 :   1ce3ac:       test   %rax,%rax
    0.00 :   1ce3af:       je     f1284 <_PyEval_EvalFrameDefault.cold.2897+0xd17>
    0.00 :   1ce3b5:       mov    0x17e30d(%rip),%ebp        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce3bb:       test   %ebp,%ebp
    0.00 :   1ce3bd:       jne    f127a <_PyEval_EvalFrameDefault.cold.2897+0xd0d>
    0.00 :   1ce3c3:       mov    0x17e2fb(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce3c9:       mov    %r12,%rcx
    0.00 :   1ce3cc:       sub    0x8(%rsp),%rcx
    0.00 :   1ce3d1:       test   %eax,%eax
    0.00 :   1ce3d3:       jne    1d25bd <_PyEval_EvalFrameDefault+0x556d>
    0.00 :   1ce3d9:       movzwl (%r12),%ebx
    0.00 :   1ce3de:       lea    0x1142db(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce3e5:       mov    %ecx,0x68(%r13)
    0.00 :   1ce3e9:       add    $0x2,%r12
    0.00 :   1ce3ed:       mov    0x40(%rsp),%rbp
    0.00 :   1ce3f2:       movzbl %bl,%r10d
    0.00 :   1ce3f6:       movzbl %bh,%edx
    0.00 :   1ce3f9:       mov    (%r15,%r10,8),%rdi
    0.00 :   1ce3fd:       mov    %r10,%r8
    0.00 :   1ce400:       movslq %edx,%r9
    0.00 :   1ce403:       jmpq   *%rdi
    0.00 :   1ce405:       sub    $0x8,%rbp
    0.00 :   1ce409:       mov    -0x8(%rbp),%r15
    0.00 :   1ce40d:       mov    0x0(%rbp),%rbx
    0.00 :   1ce411:       lea    0x178c88(%rip),%r9        # 3470a0 <PyUnicode_Type>
    0.00 :   1ce418:       cmp    %r9,0x8(%r15)
    0.00 :   1ce41c:       je     1d236a <_PyEval_EvalFrameDefault+0x531a>
    0.00 :   1ce422:       mov    %rbx,%rsi
    0.00 :   1ce425:       mov    %r15,%rdi
    0.00 :   1ce428:       addr32 callq 147be0 <PyNumber_InPlaceAdd>
    0.00 :   1ce42e:       subq   $0x1,(%r15)
    0.00 :   1ce432:       je     1d3d2d <_PyEval_EvalFrameDefault+0x6cdd>
    0.00 :   1ce438:       subq   $0x1,(%rbx)
    0.00 :   1ce43c:       je     1d27f2 <_PyEval_EvalFrameDefault+0x57a2>
    0.00 :   1ce442:       mov    %rax,-0x8(%rbp)
    0.00 :   1ce446:       test   %rax,%rax
    0.00 :   1ce449:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce44f:       mov    0x17e272(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce456:       test   %r8d,%r8d
    0.00 :   1ce459:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce45f:       mov    0x17e25f(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce465:       mov    %r12,%rdx
    0.00 :   1ce468:       sub    0x8(%rsp),%rdx
    0.00 :   1ce46d:       test   %eax,%eax
    0.00 :   1ce46f:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce475:       movzwl (%r12),%ecx
    0.00 :   1ce47a:       lea    0x11423f(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce481:       mov    %edx,0x68(%r13)
    0.00 :   1ce485:       add    $0x2,%r12
    0.00 :   1ce489:       movzbl %cl,%edi
    0.00 :   1ce48c:       movzbl %ch,%esi
    0.00 :   1ce48f:       mov    %rdi,%r8
    0.00 :   1ce492:       movslq %esi,%r9
    0.00 :   1ce495:       jmpq   *(%r10,%rdi,8)
    0.00 :   1ce499:       lea    -0x8(%rbp),%r15
    0.00 :   1ce49d:       movslq %r9d,%rbx
    0.00 :   1ce4a0:       mov    -0x8(%rbp),%r8
         :            call_function():
    0.00 :   1ce4a4:       xor    %ebp,%ebp
    0.00 :   1ce4a6:       lea    0x0(,%rbx,8),%rax
    0.00 :   1ce4ae:       mov    %r15,%r9
    0.00 :   1ce4b1:       sub    %rax,%r9
         :            _PyEval_EvalFrameDefault():
    0.00 :   1ce4b4:       mov    %r8,0x40(%rsp)
         :            call_function():
    0.00 :   1ce4b9:       lea    -0x8(%r9),%rsi
    0.00 :   1ce4bd:       mov    -0x8(%r9),%r9
    0.00 :   1ce4c1:       mov    %rsi,0x58(%rsp)
    0.00 :   1ce4c6:       test   %r8,%r8
    0.00 :   1ce4c9:       jne    1d2cd0 <_PyEval_EvalFrameDefault+0x5c80>
    0.00 :   1ce4cf:       add    %rbp,%rax
    0.00 :   1ce4d2:       mov    %r15,%r8
    0.00 :   1ce4d5:       lea    0x17ae04(%rip),%r10        # 3492e0 <PyCFunction_Type>
    0.00 :   1ce4dc:       sub    %rax,%r8
    0.00 :   1ce4df:       mov    0x8(%r9),%rax
    0.00 :   1ce4e3:       cmp    %r10,%rax
    0.00 :   1ce4e6:       je     1d2334 <_PyEval_EvalFrameDefault+0x52e4>
    0.00 :   1ce4ec:       lea    0x16fc8d(%rip),%rcx        # 33e180 <PyMethodDescr_Type>
    0.00 :   1ce4f3:       cmp    %rcx,%rax
    0.00 :   1ce4f6:       je     1d2443 <_PyEval_EvalFrameDefault+0x53f3>
    0.00 :   1ce4fc:       lea    0x1707dd(%rip),%r11        # 33ece0 <PyMethod_Type>
    0.00 :   1ce503:       cmp    %r11,%rax
    0.00 :   1ce506:       je     1d30a0 <_PyEval_EvalFrameDefault+0x6050>
    0.00 :   1ce50c:       addq   $0x1,(%r9)
    0.00 :   1ce510:       mov    0x40(%rsp),%rcx
    0.00 :   1ce515:       mov    %rbx,%rdx
    0.00 :   1ce518:       mov    %r8,%rsi
    0.00 :   1ce51b:       mov    %r9,0x50(%rsp)
    0.00 :   1ce520:       lea    0x17cb79(%rip),%rdi        # 34b0a0 <PyFunction_Type>
    0.00 :   1ce527:       cmp    %rdi,%rax
    0.00 :   1ce52a:       mov    %r9,%rdi
    0.00 :   1ce52d:       jne    1d25e0 <_PyEval_EvalFrameDefault+0x5590>
    0.00 :   1ce533:       addr32 callq 164d30 <_PyFunction_FastCallKeywords>
    0.00 :   1ce539:       mov    0x50(%rsp),%r9
    0.00 :   1ce53e:       mov    %rax,%rbx
    0.00 :   1ce541:       subq   $0x1,(%r9)
    0.00 :   1ce545:       je     f09db <_PyEval_EvalFrameDefault.cold.2897+0x46e>
    0.00 :   1ce54b:       mov    0x58(%rsp),%rbp
    0.00 :   1ce550:       cmp    %rbp,%r15
    0.00 :   1ce553:       jbe    1ce61a <_PyEval_EvalFrameDefault+0x15ca>
    0.00 :   1ce559:       mov    -0x8(%r15),%rdi
    0.00 :   1ce55d:       lea    -0x8(%r15),%rdx
    0.00 :   1ce561:       subq   $0x1,(%rdi)
    0.00 :   1ce565:       je     1d2dc0 <_PyEval_EvalFrameDefault+0x5d70>
    0.00 :   1ce56b:       cmp    %rbp,%rdx
    0.00 :   1ce56e:       jbe    1d2478 <_PyEval_EvalFrameDefault+0x5428>
    0.00 :   1ce574:       mov    -0x10(%r15),%rdi
    0.00 :   1ce578:       lea    -0x10(%r15),%rsi
    0.00 :   1ce57c:       subq   $0x1,(%rdi)
    0.00 :   1ce580:       je     1d2cf0 <_PyEval_EvalFrameDefault+0x5ca0>
    0.00 :   1ce586:       cmp    %rsi,%rbp
    0.00 :   1ce589:       jae    1d262e <_PyEval_EvalFrameDefault+0x55de>
    0.00 :   1ce58f:       mov    -0x18(%r15),%rdi
    0.00 :   1ce593:       lea    -0x18(%r15),%r8
    0.00 :   1ce597:       subq   $0x1,(%rdi)
    0.00 :   1ce59b:       je     1d3809 <_PyEval_EvalFrameDefault+0x67b9>
    0.00 :   1ce5a1:       cmp    %r8,%rbp
    0.00 :   1ce5a4:       jae    1d2b06 <_PyEval_EvalFrameDefault+0x5ab6>
    0.00 :   1ce5aa:       mov    -0x20(%r15),%rdi
    0.00 :   1ce5ae:       lea    -0x20(%r15),%r9
    0.00 :   1ce5b2:       subq   $0x1,(%rdi)
    0.00 :   1ce5b6:       je     1d3551 <_PyEval_EvalFrameDefault+0x6501>
    0.00 :   1ce5bc:       cmp    %r9,%rbp
    0.00 :   1ce5bf:       jae    1d2b62 <_PyEval_EvalFrameDefault+0x5b12>
    0.00 :   1ce5c5:       mov    -0x28(%r15),%rdi
    0.00 :   1ce5c9:       lea    -0x28(%r15),%r10
    0.00 :   1ce5cd:       subq   $0x1,(%rdi)
    0.00 :   1ce5d1:       je     1d351d <_PyEval_EvalFrameDefault+0x64cd>
    0.00 :   1ce5d7:       cmp    %r10,%rbp
    0.00 :   1ce5da:       jae    1d31cf <_PyEval_EvalFrameDefault+0x617f>
    0.00 :   1ce5e0:       mov    -0x30(%r15),%rdi
    0.00 :   1ce5e4:       lea    -0x30(%r15),%rax
    0.00 :   1ce5e8:       mov    %rax,%r15
    0.00 :   1ce5eb:       subq   $0x1,(%rdi)
    0.00 :   1ce5ef:       je     1ce60a <_PyEval_EvalFrameDefault+0x15ba>
    0.00 :   1ce5f1:       cmp    %rax,%rbp
    0.00 :   1ce5f4:       jae    1d31d7 <_PyEval_EvalFrameDefault+0x6187>
    0.00 :   1ce5fa:       sub    $0x8,%rax
    0.00 :   1ce5fe:       mov    (%rax),%rdi
    0.00 :   1ce601:       subq   $0x1,(%rdi)
    0.00 :   1ce605:       jne    1ce5f1 <_PyEval_EvalFrameDefault+0x15a1>
    0.00 :   1ce607:       mov    %rax,%r15
    0.00 :   1ce60a:       mov    0x8(%rdi),%rcx
    0.00 :   1ce60e:       callq  *0x30(%rcx)
    0.00 :   1ce611:       cmp    %r15,%rbp
    0.00 :   1ce614:       jb     1ce559 <_PyEval_EvalFrameDefault+0x1509>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1ce61a:       mov    0x40(%rsp),%rdi
    0.00 :   1ce61f:       mov    %rbx,(%r15)
    0.00 :   1ce622:       lea    0x8(%r15),%rbp
    0.00 :   1ce626:       mov    (%rdi),%r11
    0.00 :   1ce629:       mov    %r11,0x50(%rsp)
    0.00 :   1ce62e:       sub    $0x1,%r11
    0.00 :   1ce632:       mov    %r11,(%rdi)
    0.00 :   1ce635:       test   %r11,%r11
    0.00 :   1ce638:       je     f1cca <_PyEval_EvalFrameDefault.cold.2897+0x175d>
    0.00 :   1ce63e:       test   %rbx,%rbx
    0.00 :   1ce641:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce647:       mov    0x17e07b(%rip),%ebx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce64d:       test   %ebx,%ebx
    0.00 :   1ce64f:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce655:       mov    0x17e069(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce65b:       mov    %r12,%rsi
    0.00 :   1ce65e:       sub    0x8(%rsp),%rsi
    0.00 :   1ce663:       test   %eax,%eax
    0.00 :   1ce665:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce66b:       movzwl (%r12),%ecx
    0.00 :   1ce670:       lea    0x114049(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce677:       mov    %esi,0x68(%r13)
    0.00 :   1ce67b:       add    $0x2,%r12
    0.00 :   1ce67f:       movzbl %cl,%r10d
    0.00 :   1ce683:       movzbl %ch,%edi
    0.00 :   1ce686:       mov    %r10,%r8
    0.00 :   1ce689:       movslq %edi,%r9
    0.00 :   1ce68c:       jmpq   *(%r15,%r10,8)
    0.00 :   1ce690:       mov    0x17e02e(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce696:       mov    -0x8(%rbp),%rsi
    0.00 :   1ce69a:       lea    0x8(%rbp),%r10
    0.00 :   1ce69e:       addq   $0x1,(%rsi)
    0.00 :   1ce6a2:       mov    %rsi,0x0(%rbp)
    0.00 :   1ce6a6:       test   %eax,%eax
    0.00 :   1ce6a8:       jne    1d3280 <_PyEval_EvalFrameDefault+0x6230>
    0.00 :   1ce6ae:       movzwl (%r12),%ebx
    0.00 :   1ce6b3:       lea    0x114006(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce6ba:       mov    %r12,%rbp
    0.00 :   1ce6bd:       sub    0x8(%rsp),%rbp
    0.00 :   1ce6c2:       mov    %ebp,0x68(%r13)
    0.00 :   1ce6c6:       add    $0x2,%r12
    0.00 :   1ce6ca:       mov    %r10,%rbp
    0.00 :   1ce6cd:       movzbl %bl,%r11d
    0.00 :   1ce6d1:       movzbl %bh,%edx
    0.00 :   1ce6d4:       mov    (%r15,%r11,8),%rcx
    0.00 :   1ce6d8:       mov    %r11,%r8
    0.00 :   1ce6db:       movslq %edx,%r9
    0.00 :   1ce6de:       jmpq   *%rcx
    0.00 :   1ce6e0:       movslq %r9d,%rdi
    0.00 :   1ce6e3:       mov    %r9d,0x40(%rsp)
    0.00 :   1ce6e8:       addr32 callq 137580 <PyList_New>
    0.00 :   1ce6ee:       test   %rax,%rax
    0.00 :   1ce6f1:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce6f7:       mov    0x40(%rsp),%r15d
    0.00 :   1ce6fc:       mov    %r15d,%r8d
    0.00 :   1ce6ff:       sub    $0x1,%r8d
    0.00 :   1ce703:       jns    1d22ef <_PyEval_EvalFrameDefault+0x529f>
    0.00 :   1ce709:       mov    %rax,0x0(%rbp)
    0.00 :   1ce70d:       mov    0x17dfb5(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce713:       lea    0x8(%rbp),%r10
    0.00 :   1ce717:       test   %eax,%eax
    0.00 :   1ce719:       jne    f181f <_PyEval_EvalFrameDefault.cold.2897+0x12b2>
    0.00 :   1ce71f:       mov    0x17df9f(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce725:       mov    %r12,%r8
    0.00 :   1ce728:       sub    0x8(%rsp),%r8
    0.00 :   1ce72d:       test   %eax,%eax
    0.00 :   1ce72f:       jne    1d2ce8 <_PyEval_EvalFrameDefault+0x5c98>
    0.00 :   1ce735:       movzwl (%r12),%ebx
    0.00 :   1ce73a:       lea    0x113f7f(%rip),%rbp        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce741:       mov    %r8d,0x68(%r13)
    0.00 :   1ce745:       add    $0x2,%r12
    0.00 :   1ce749:       movzbl %bl,%edx
    0.00 :   1ce74c:       movzbl %bh,%esi
    0.00 :   1ce74f:       mov    0x0(%rbp,%rdx,8),%rcx
    0.00 :   1ce754:       mov    %rdx,%r8
    0.00 :   1ce757:       movslq %esi,%r9
    0.00 :   1ce75a:       mov    %r10,%rbp
    0.00 :   1ce75d:       jmpq   *%rcx
    0.00 :   1ce75f:       mov    0x17df5f(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce765:       mov    -0x8(%rbp),%r9
    0.00 :   1ce769:       mov    -0x10(%rbp),%rbx
    0.00 :   1ce76d:       mov    %r9,-0x10(%rbp)
    0.00 :   1ce771:       mov    %rbx,-0x8(%rbp)
    0.00 :   1ce775:       test   %eax,%eax
    0.00 :   1ce777:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce77d:       movzwl (%r12),%ecx
    0.00 :   1ce782:       mov    %r12,%rdx
    0.00 :   1ce785:       lea    0x113f34(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce78c:       add    $0x2,%r12
    0.00 :   1ce790:       sub    0x8(%rsp),%rdx
    0.00 :   1ce795:       movzbl %cl,%edi
    0.00 :   1ce798:       movzbl %ch,%esi
    0.00 :   1ce79b:       mov    %edx,0x68(%r13)
    0.00 :   1ce79f:       mov    %rdi,%r8
    0.00 :   1ce7a2:       movslq %esi,%r9
    0.00 :   1ce7a5:       jmpq   *(%r10,%rdi,8)
    0.00 :   1ce7a9:       sub    $0x8,%rbp
    0.00 :   1ce7ad:       mov    0x0(%rbp),%r15
    0.00 :   1ce7b1:       neg    %r9d
    0.00 :   1ce7b4:       movslq %r9d,%rax
    0.00 :   1ce7b7:       mov    0x0(%rbp,%rax,8),%rdi
    0.00 :   1ce7bc:       mov    %r15,%rsi
    0.00 :   1ce7bf:       addr32 callq 139cd0 <PyList_Append>
    0.00 :   1ce7c5:       subq   $0x1,(%r15)
    0.00 :   1ce7c9:       mov    %eax,%ebx
    0.00 :   1ce7cb:       je     f25b2 <_PyEval_EvalFrameDefault.cold.2897+0x2045>
    0.00 :   1ce7d1:       test   %ebx,%ebx
    0.00 :   1ce7d3:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce7d9:       mov    0x17dee9(%rip),%edx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce7df:       test   %edx,%edx
    0.00 :   1ce7e1:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce7e7:       mov    0x17ded7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce7ed:       mov    %r12,%rsi
    0.00 :   1ce7f0:       sub    0x8(%rsp),%rsi
    0.00 :   1ce7f5:       test   %eax,%eax
    0.00 :   1ce7f7:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce7fd:       movzwl (%r12),%ecx
    0.00 :   1ce802:       lea    0x113eb7(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce809:       mov    %esi,0x68(%r13)
    0.00 :   1ce80d:       add    $0x2,%r12
    0.00 :   1ce811:       movzbl %cl,%edi
    0.00 :   1ce814:       movzbl %ch,%ebx
    0.00 :   1ce817:       mov    %rdi,%r8
    0.00 :   1ce81a:       movslq %ebx,%r9
    0.00 :   1ce81d:       jmpq   *(%r10,%rdi,8)
    0.00 :   1ce821:       sub    $0x8,%rbp
    0.00 :   1ce825:       mov    -0x8(%rbp),%rbx
    0.00 :   1ce829:       mov    0x0(%rbp),%r15
    0.00 :   1ce82d:       mov    %rbx,%rdi
    0.00 :   1ce830:       mov    %rbx,0x40(%rsp)
    0.00 :   1ce835:       mov    %r15,%rsi
    0.00 :   1ce838:       addr32 callq 131810 <PyNumber_Multiply>
    0.00 :   1ce83e:       mov    0x40(%rsp),%r11
    0.00 :   1ce843:       mov    %rax,%rbx
    0.00 :   1ce846:       subq   $0x1,(%r11)
    0.00 :   1ce84a:       je     1d2695 <_PyEval_EvalFrameDefault+0x5645>
    0.00 :   1ce850:       subq   $0x1,(%r15)
    0.00 :   1ce854:       je     1d2b6a <_PyEval_EvalFrameDefault+0x5b1a>
    0.00 :   1ce85a:       mov    %rbx,-0x8(%rbp)
    0.00 :   1ce85e:       test   %rbx,%rbx
    0.00 :   1ce861:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce867:       mov    0x17de5b(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce86d:       test   %edi,%edi
    0.00 :   1ce86f:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce875:       mov    0x17de49(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce87b:       mov    %r12,%r9
    0.00 :   1ce87e:       sub    0x8(%rsp),%r9
    0.00 :   1ce883:       test   %eax,%eax
    0.00 :   1ce885:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce88b:       movzwl (%r12),%ecx
    0.00 :   1ce890:       lea    0x113e29(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce897:       mov    %r9d,0x68(%r13)
    0.00 :   1ce89b:       add    $0x2,%r12
    0.00 :   1ce89f:       movzbl %cl,%edx
    0.00 :   1ce8a2:       movzbl %ch,%esi
    0.00 :   1ce8a5:       mov    %rdx,%r8
    0.00 :   1ce8a8:       movslq %esi,%r9
    0.00 :   1ce8ab:       jmpq   *(%r10,%rdx,8)
    0.00 :   1ce8af:       sub    $0x8,%rbp
    0.00 :   1ce8b3:       mov    -0x8(%rbp),%rax
    0.00 :   1ce8b7:       mov    0x0(%rbp),%r15
    0.00 :   1ce8bb:       mov    %rax,%rdi
    0.00 :   1ce8be:       mov    %r15,%rsi
    0.00 :   1ce8c1:       mov    %rax,0x40(%rsp)
    0.00 :   1ce8c6:       addr32 callq 12cfd0 <PyNumber_And>
    0.00 :   1ce8cc:       mov    0x40(%rsp),%r8
    0.00 :   1ce8d1:       mov    %rax,%rbx
    0.00 :   1ce8d4:       subq   $0x1,(%r8)
    0.00 :   1ce8d8:       je     1d3e83 <_PyEval_EvalFrameDefault+0x6e33>
    0.00 :   1ce8de:       subq   $0x1,(%r15)
    0.00 :   1ce8e2:       je     1d26a4 <_PyEval_EvalFrameDefault+0x5654>
    0.00 :   1ce8e8:       mov    %rbx,-0x8(%rbp)
    0.00 :   1ce8ec:       test   %rbx,%rbx
    0.00 :   1ce8ef:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce8f5:       mov    0x17ddcd(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce8fb:       test   %edi,%edi
    0.00 :   1ce8fd:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce903:       mov    0x17ddbb(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce909:       mov    %r12,%r9
    0.00 :   1ce90c:       sub    0x8(%rsp),%r9
    0.00 :   1ce911:       test   %eax,%eax
    0.00 :   1ce913:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce919:       movzwl (%r12),%ecx
    0.00 :   1ce91e:       lea    0x113d9b(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce925:       mov    %r9d,0x68(%r13)
    0.00 :   1ce929:       add    $0x2,%r12
    0.00 :   1ce92d:       movzbl %cl,%r10d
    0.00 :   1ce931:       movzbl %ch,%ebx
    0.00 :   1ce934:       mov    %r10,%r8
    0.00 :   1ce937:       movslq %ebx,%r9
    0.00 :   1ce93a:       jmpq   *(%r11,%r10,8)
    0.00 :   1ce93e:       mov    0x18(%rsp),%rax
    0.00 :   1ce943:       mov    0x38(%r13),%rdi
    0.00 :   1ce947:       movslq %r9d,%rcx
    0.00 :   1ce94a:       sub    $0x8,%rbp
    0.00 :   1ce94e:       mov    0x0(%rbp),%rbx
    0.00 :   1ce952:       mov    0x18(%rax,%rcx,8),%rsi
    0.00 :   1ce957:       test   %rdi,%rdi
    0.00 :   1ce95a:       je     f228d <_PyEval_EvalFrameDefault.cold.2897+0x1d20>
    0.00 :   1ce960:       lea    0x17b999(%rip),%r11        # 34a300 <PyDict_Type>
    0.00 :   1ce967:       mov    %rbx,%rdx
    0.00 :   1ce96a:       cmp    %r11,0x8(%rdi)
    0.00 :   1ce96e:       jne    1d41d0 <_PyEval_EvalFrameDefault+0x7180>
    0.00 :   1ce974:       addr32 callq 1638a0 <PyDict_SetItem>
    0.00 :   1ce97a:       mov    %eax,%r15d
    0.00 :   1ce97d:       subq   $0x1,(%rbx)
    0.00 :   1ce981:       je     1d3407 <_PyEval_EvalFrameDefault+0x63b7>
    0.00 :   1ce987:       test   %r15d,%r15d
    0.00 :   1ce98a:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ce990:       mov    0x17dd32(%rip),%esi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ce996:       test   %esi,%esi
    0.00 :   1ce998:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ce99e:       mov    0x17dd20(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ce9a4:       mov    %r12,%rdx
    0.00 :   1ce9a7:       sub    0x8(%rsp),%rdx
    0.00 :   1ce9ac:       test   %eax,%eax
    0.00 :   1ce9ae:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ce9b4:       movzwl (%r12),%ecx
    0.00 :   1ce9b9:       lea    0x113d00(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ce9c0:       mov    %edx,0x68(%r13)
    0.00 :   1ce9c4:       add    $0x2,%r12
    0.00 :   1ce9c8:       movzbl %cl,%edi
    0.00 :   1ce9cb:       movzbl %ch,%ebx
    0.00 :   1ce9ce:       mov    %rdi,%r8
    0.00 :   1ce9d1:       movslq %ebx,%r9
    0.00 :   1ce9d4:       jmpq   *(%r10,%rdi,8)
    0.00 :   1ce9d8:       lea    -0x8(%rbp),%rax
    0.00 :   1ce9dc:       mov    -0x8(%rbp),%r15
    0.00 :   1ce9e0:       lea    -0x10(%rbp),%rbx
    0.00 :   1ce9e4:       mov    -0x10(%rbp),%rbp
    0.00 :   1ce9e8:       mov    %r9d,0x50(%rsp)
    0.00 :   1ce9ed:       mov    0x30(%r13),%rsi
    0.00 :   1ce9f1:       mov    %rax,0x40(%rsp)
    0.00 :   1ce9f6:       mov    %r15,%rdx
    0.00 :   1ce9f9:       mov    %rbp,%rdi
    0.00 :   1ce9fc:       addr32 callq 163540 <PyFunction_NewWithQualName>
    0.00 :   1cea02:       subq   $0x1,0x0(%rbp)
    0.00 :   1cea07:       mov    0x50(%rsp),%r9d
    0.00 :   1cea0c:       je     f1140 <_PyEval_EvalFrameDefault.cold.2897+0xbd3>
    0.00 :   1cea12:       subq   $0x1,(%r15)
    0.00 :   1cea16:       je     f111c <_PyEval_EvalFrameDefault.cold.2897+0xbaf>
    0.00 :   1cea1c:       test   %rax,%rax
    0.00 :   1cea1f:       je     f09d3 <_PyEval_EvalFrameDefault.cold.2897+0x466>
    0.00 :   1cea25:       test   $0x8,%r9b
    0.00 :   1cea29:       jne    1d29a5 <_PyEval_EvalFrameDefault+0x5955>
    0.00 :   1cea2f:       test   $0x4,%r9b
    0.00 :   1cea33:       jne    1d4323 <_PyEval_EvalFrameDefault+0x72d3>
    0.00 :   1cea39:       test   $0x2,%r9b
    0.00 :   1cea3d:       jne    1d4312 <_PyEval_EvalFrameDefault+0x72c2>
    0.00 :   1cea43:       and    $0x1,%r9d
    0.00 :   1cea47:       jne    1d2c3e <_PyEval_EvalFrameDefault+0x5bee>
    0.00 :   1cea4d:       mov    %rax,(%rbx)
    0.00 :   1cea50:       mov    0x17dc72(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cea56:       lea    0x8(%rbx),%rbp
    0.00 :   1cea5a:       test   %eax,%eax
    0.00 :   1cea5c:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cea62:       mov    0x17dc5c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cea68:       mov    %r12,%r15
    0.00 :   1cea6b:       sub    0x8(%rsp),%r15
    0.00 :   1cea70:       test   %eax,%eax
    0.00 :   1cea72:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cea78:       movzwl (%r12),%ecx
    0.00 :   1cea7d:       lea    0x113c3c(%rip),%rdx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cea84:       mov    %r15d,0x68(%r13)
    0.00 :   1cea88:       add    $0x2,%r12
    0.00 :   1cea8c:       movzbl %cl,%r10d
    0.00 :   1cea90:       movzbl %ch,%ebx
    0.00 :   1cea93:       mov    %r10,%r8
    0.00 :   1cea96:       movslq %ebx,%r9
    0.00 :   1cea99:       jmpq   *(%rdx,%r10,8)
    0.00 :   1cea9d:       sub    $0x8,%rbp
    0.00 :   1ceaa1:       mov    -0x8(%rbp),%rbx
    0.00 :   1ceaa5:       lea    0x16e1b4(%rip),%r9        # 33cc60 <PyGen_Type>
    0.00 :   1ceaac:       mov    0x0(%rbp),%r15
    0.00 :   1ceab0:       mov    0x8(%rbx),%rax
    0.00 :   1ceab4:       cmp    %r9,%rax
    0.00 :   1ceab7:       je     1ceac9 <_PyEval_EvalFrameDefault+0x1a79>
    0.00 :   1ceab9:       lea    0x16e340(%rip),%r8        # 33ce00 <PyCoro_Type>
    0.00 :   1ceac0:       cmp    %r8,%rax
    0.00 :   1ceac3:       jne    1d2700 <_PyEval_EvalFrameDefault+0x56b0>
    0.00 :   1ceac9:       mov    %r15,%rsi
    0.00 :   1ceacc:       mov    %rbx,%rdi
    0.00 :   1ceacf:       addr32 callq 16d6b0 <_PyGen_Send>
    0.00 :   1cead5:       mov    %rax,0x20(%rsp)
    0.00 :   1ceada:       subq   $0x1,(%r15)
    0.00 :   1ceade:       je     f09c4 <_PyEval_EvalFrameDefault.cold.2897+0x457>
    0.00 :   1ceae4:       cmpq   $0x0,0x20(%rsp)
    0.00 :   1ceaea:       je     1d3020 <_PyEval_EvalFrameDefault+0x5fd0>
    0.00 :   1ceaf0:       mov    %rbp,0x48(%r13)
    0.00 :   1ceaf4:       mov    $0x40,%ebx
    0.00 :   1ceaf9:       subl   $0x2,0x68(%r13)
    0.00 :   1ceafe:       jmpq   1ce119 <_PyEval_EvalFrameDefault+0x10c9>
    0.00 :   1ceb03:       mov    0x17dbbb(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ceb09:       mov    -0x8(%rbp),%r8
    0.00 :   1ceb0d:       mov    -0x10(%rbp),%r11
    0.00 :   1ceb11:       mov    -0x18(%rbp),%r15
    0.00 :   1ceb15:       mov    %r11,-0x8(%rbp)
    0.00 :   1ceb19:       mov    %r15,-0x10(%rbp)
    0.00 :   1ceb1d:       mov    %r8,-0x18(%rbp)
    0.00 :   1ceb21:       test   %eax,%eax
    0.00 :   1ceb23:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ceb29:       movzwl (%r12),%ebx
    0.00 :   1ceb2e:       mov    %r12,%r9
    0.00 :   1ceb31:       lea    0x113b88(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ceb38:       add    $0x2,%r12
    0.00 :   1ceb3c:       sub    0x8(%rsp),%r9
    0.00 :   1ceb41:       movzbl %bl,%edx
    0.00 :   1ceb44:       movzbl %bh,%ecx
    0.00 :   1ceb47:       mov    %r9d,0x68(%r13)
    0.00 :   1ceb4b:       mov    %rdx,%r8
    0.00 :   1ceb4e:       movslq %ecx,%r9
    0.00 :   1ceb51:       jmpq   *(%rdi,%rdx,8)
    0.00 :   1ceb54:       mov    -0x8(%rbp),%rbx
    0.00 :   1ceb58:       mov    %r9d,0x40(%rsp)
         :            special_lookup():
    0.00 :   1ceb5d:       lea    0x15e37c(%rip),%rsi        # 32cee0 <PyId___enter__.14448>
    0.00 :   1ceb64:       mov    %rbx,%rdi
    0.00 :   1ceb67:       addr32 callq 162ba0 <_PyObject_LookupSpecial>
    0.00 :   1ceb6d:       mov    %rax,%r15
    0.00 :   1ceb70:       test   %rax,%rax
    0.00 :   1ceb73:       je     f1e07 <_PyEval_EvalFrameDefault.cold.2897+0x189a>
    0.00 :   1ceb79:       lea    0x15e340(%rip),%rsi        # 32cec0 <PyId___exit__.14447>
    0.00 :   1ceb80:       mov    %rbx,%rdi
    0.00 :   1ceb83:       addr32 callq 162ba0 <_PyObject_LookupSpecial>
    0.00 :   1ceb89:       mov    0x40(%rsp),%r9d
    0.00 :   1ceb8e:       test   %rax,%rax
    0.00 :   1ceb91:       je     1d4db0 <_PyEval_EvalFrameDefault+0x7d60>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1ceb97:       mov    %rax,-0x8(%rbp)
    0.00 :   1ceb9b:       subq   $0x1,(%rbx)
    0.00 :   1ceb9f:       je     1d4dab <_PyEval_EvalFrameDefault+0x7d5b>
    0.00 :   1ceba5:       xor    %ecx,%ecx
    0.00 :   1ceba7:       xor    %edx,%edx
    0.00 :   1ceba9:       xor    %esi,%esi
    0.00 :   1cebab:       mov    %r15,%rdi
    0.00 :   1cebae:       mov    %r9d,0x40(%rsp)
    0.00 :   1cebb3:       addr32 callq 116150 <_PyObject_FastCallDict>
    0.00 :   1cebb9:       subq   $0x1,(%r15)
    0.00 :   1cebbd:       mov    0x40(%rsp),%edi
    0.00 :   1cebc1:       mov    %rax,%rbx
    0.00 :   1cebc4:       jne    1cebd4 <_PyEval_EvalFrameDefault+0x1b84>
    0.00 :   1cebc6:       mov    0x8(%r15),%rax
    0.00 :   1cebca:       mov    %r15,%rdi
    0.00 :   1cebcd:       callq  *0x30(%rax)
    0.00 :   1cebd0:       mov    0x40(%rsp),%edi
    0.00 :   1cebd4:       test   %rbx,%rbx
    0.00 :   1cebd7:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cebdd:       mov    %r12,%r15
    0.00 :   1cebe0:       sub    0x8(%rsp),%r15
    0.00 :   1cebe5:       mov    %rbp,%rcx
    0.00 :   1cebe8:       sub    0x40(%r13),%rcx
    0.00 :   1cebec:       mov    %r15,%r8
    0.00 :   1cebef:       sar    $0x3,%rcx
    0.00 :   1cebf3:       mov    $0x7a,%esi
    0.00 :   1cebf8:       sar    %r8
    0.00 :   1cebfb:       lea    (%rdi,%r8,2),%edx
    0.00 :   1cebff:       mov    %r13,%rdi
    0.00 :   1cec02:       addr32 callq 119d60 <PyFrame_BlockSetup>
    0.00 :   1cec08:       mov    %rbp,%rcx
    0.00 :   1cec0b:       add    $0x8,%rbp
    0.00 :   1cec0f:       mov    %rbx,(%rcx)
    0.00 :   1cec12:       mov    0x17daaf(%rip),%r11d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cec19:       test   %r11d,%r11d
    0.00 :   1cec1c:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cec22:       mov    0x17da9c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cec28:       test   %eax,%eax
    0.00 :   1cec2a:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cec30:       movzwl (%r12),%ebx
    0.00 :   1cec35:       lea    0x113a84(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cec3c:       mov    %r15d,0x68(%r13)
    0.00 :   1cec40:       add    $0x2,%r12
    0.00 :   1cec44:       movzbl %bl,%edx
    0.00 :   1cec47:       movzbl %bh,%esi
    0.00 :   1cec4a:       mov    %rdx,%r8
    0.00 :   1cec4d:       movslq %esi,%r9
    0.00 :   1cec50:       jmpq   *(%r10,%rdx,8)
    0.00 :   1cec54:       sub    $0x8,%rbp
    0.00 :   1cec58:       mov    0x0(%rbp),%r15
    0.00 :   1cec5c:       mov    0x8(%r15),%rdx
    0.00 :   1cec60:       mov    0xa8(%rdx),%rax
    0.00 :   1cec67:       test   $0x1000000,%eax
    0.00 :   1cec6c:       jne    1d26bb <_PyEval_EvalFrameDefault+0x566b>
    0.00 :   1cec72:       test   $0x80000000,%eax
    0.00 :   1cec77:       jne    1d453e <_PyEval_EvalFrameDefault+0x74ee>
    0.00 :   1cec7d:       lea    0x17a2ec(%rip),%r9        # 348f70 <_Py_NoneStruct>
    0.00 :   1cec84:       cmp    %r9,%r15
    0.00 :   1cec87:       jne    f0687 <_PyEval_EvalFrameDefault.cold.2897+0x11a>
    0.00 :   1cec8d:       lea    0x17a2dc(%rip),%rbx        # 348f70 <_Py_NoneStruct>
    0.00 :   1cec94:       mov    (%rbx),%r8
    0.00 :   1cec97:       mov    %r8,0x40(%rsp)
    0.00 :   1cec9c:       sub    $0x1,%r8
    0.00 :   1ceca0:       mov    %r8,(%rbx)
    0.00 :   1ceca3:       test   %r8,%r8
    0.00 :   1ceca6:       je     f0678 <_PyEval_EvalFrameDefault.cold.2897+0x10b>
    0.00 :   1cecac:       mov    0x17da15(%rip),%r10d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cecb3:       test   %r10d,%r10d
    0.00 :   1cecb6:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cecbc:       mov    0x17da02(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cecc2:       mov    %r12,%rdi
    0.00 :   1cecc5:       sub    0x8(%rsp),%rdi
    0.00 :   1cecca:       test   %eax,%eax
    0.00 :   1ceccc:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cecd2:       movzwl (%r12),%ecx
    0.00 :   1cecd7:       lea    0x1139e2(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cecde:       mov    %edi,0x68(%r13)
    0.00 :   1cece2:       add    $0x2,%r12
    0.00 :   1cece6:       movzbl %cl,%r11d
    0.00 :   1cecea:       movzbl %ch,%esi
    0.00 :   1ceced:       mov    %r11,%r8
    0.00 :   1cecf0:       movslq %esi,%r9
    0.00 :   1cecf3:       jmpq   *(%r15,%r11,8)
    0.00 :   1cecf7:       movslq %r9d,%rbx
    0.00 :   1cecfa:       mov    %r9d,0x40(%rsp)
    0.00 :   1cecff:       mov    %rbx,%rdi
    0.00 :   1ced02:       addr32 callq 15f9e0 <_PyDict_NewPresized>
    0.00 :   1ced08:       mov    %rax,%r15
    0.00 :   1ced0b:       test   %rax,%rax
    0.00 :   1ced0e:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1ced14:       test   %rbx,%rbx
    0.00 :   1ced17:       mov    0x40(%rsp),%eax
    0.00 :   1ced1b:       jg     1d2d37 <_PyEval_EvalFrameDefault+0x5ce7>
    0.00 :   1ced21:       mov    %r13,0x50(%rsp)
    0.00 :   1ced26:       mov    %rbp,%rbx
    0.00 :   1ced29:       mov    %r12,0x40(%rsp)
    0.00 :   1ced2e:       mov    %eax,%r12d
    0.00 :   1ced31:       test   %r12d,%r12d
    0.00 :   1ced34:       jne    1d2cf8 <_PyEval_EvalFrameDefault+0x5ca8>
    0.00 :   1ced3a:       mov    0x40(%rsp),%r12
    0.00 :   1ced3f:       mov    0x50(%rsp),%r13
    0.00 :   1ced44:       mov    %r15,(%rbx)
    0.00 :   1ced47:       mov    0x17d97b(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ced4d:       lea    0x8(%rbx),%rbp
    0.00 :   1ced51:       test   %edi,%edi
    0.00 :   1ced53:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1ced59:       mov    0x17d965(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1ced5f:       mov    %r12,%rcx
    0.00 :   1ced62:       sub    0x8(%rsp),%rcx
    0.00 :   1ced67:       test   %eax,%eax
    0.00 :   1ced69:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1ced6f:       movzwl (%r12),%ebx
    0.00 :   1ced74:       lea    0x113945(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1ced7b:       mov    %ecx,0x68(%r13)
    0.00 :   1ced7f:       add    $0x2,%r12
    0.00 :   1ced83:       movzbl %bl,%edx
    0.00 :   1ced86:       movzbl %bh,%esi
    0.00 :   1ced89:       mov    %rdx,%r8
    0.00 :   1ced8c:       movslq %esi,%r9
    0.00 :   1ced8f:       jmpq   *(%r11,%rdx,8)
    0.00 :   1ced93:       mov    0x18(%rsp),%rdx
    0.00 :   1ced98:       mov    0x38(%r13),%rdi
    0.00 :   1ced9c:       movslq %r9d,%r9
    0.00 :   1ced9f:       mov    0x18(%rdx,%r9,8),%rbx
    0.00 :   1ceda4:       test   %rdi,%rdi
    0.00 :   1ceda7:       je     f290e <_PyEval_EvalFrameDefault.cold.2897+0x23a1>
    0.00 :   1cedad:       lea    0x17b54c(%rip),%r15        # 34a300 <PyDict_Type>
    0.00 :   1cedb4:       mov    %rbx,%rsi
    0.00 :   1cedb7:       cmp    %r15,0x8(%rdi)
    0.00 :   1cedbb:       jne    1d2853 <_PyEval_EvalFrameDefault+0x5803>
    0.00 :   1cedc1:       addr32 callq 1197b0 <PyDict_GetItem>
    0.00 :   1cedc7:       test   %rax,%rax
    0.00 :   1cedca:       je     1d287d <_PyEval_EvalFrameDefault+0x582d>
    0.00 :   1cedd0:       addq   $0x1,(%rax)
    0.00 :   1cedd4:       mov    %rbp,%r11
    0.00 :   1cedd7:       add    $0x8,%rbp
    0.00 :   1ceddb:       mov    %rax,(%r11)
    0.00 :   1cedde:       mov    0x17d8e4(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cede4:       test   %eax,%eax
    0.00 :   1cede6:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cedec:       mov    0x17d8d2(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cedf2:       mov    %r12,%r8
    0.00 :   1cedf5:       sub    0x8(%rsp),%r8
    0.00 :   1cedfa:       test   %eax,%eax
    0.00 :   1cedfc:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cee02:       movzwl (%r12),%ecx
    0.00 :   1cee07:       lea    0x1138b2(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cee0e:       mov    %r8d,0x68(%r13)
    0.00 :   1cee12:       add    $0x2,%r12
    0.00 :   1cee16:       movzbl %cl,%r10d
    0.00 :   1cee1a:       movzbl %ch,%edi
    0.00 :   1cee1d:       mov    %r10,%r8
    0.00 :   1cee20:       movslq %edi,%r9
    0.00 :   1cee23:       jmpq   *(%rsi,%r10,8)
    0.00 :   1cee27:       xor    %r15d,%r15d
    0.00 :   1cee2a:       and    $0x1,%r9d
    0.00 :   1cee2e:       je     1cee49 <_PyEval_EvalFrameDefault+0x1df9>
    0.00 :   1cee30:       sub    $0x8,%rbp
    0.00 :   1cee34:       mov    0x0(%rbp),%r15
    0.00 :   1cee38:       lea    0x17b4c1(%rip),%r8        # 34a300 <PyDict_Type>
    0.00 :   1cee3f:       cmp    %r8,0x8(%r15)
    0.00 :   1cee43:       jne    f1b0d <_PyEval_EvalFrameDefault.cold.2897+0x15a0>
    0.00 :   1cee49:       mov    -0x10(%rbp),%r11
    0.00 :   1cee4d:       mov    -0x8(%rbp),%r10
    0.00 :   1cee51:       lea    -0x8(%rbp),%rax
    0.00 :   1cee55:       lea    0x1788c4(%rip),%rdx        # 347720 <PyTuple_Type>
    0.00 :   1cee5c:       mov    %rax,0x50(%rsp)
    0.00 :   1cee61:       mov    %r11,0x40(%rsp)
    0.00 :   1cee66:       cmp    %rdx,0x8(%r10)
    0.00 :   1cee6a:       jne    1d3230 <_PyEval_EvalFrameDefault+0x61e0>
         :            do_call_core():
    0.00 :   1cee70:       mov    0x40(%rsp),%rdi
    0.00 :   1cee75:       lea    0x17a464(%rip),%r8        # 3492e0 <PyCFunction_Type>
    0.00 :   1cee7c:       cmp    %r8,0x8(%rdi)
    0.00 :   1cee80:       je     1d2bb1 <_PyEval_EvalFrameDefault+0x5b61>
    0.00 :   1cee86:       mov    %r10,%rsi
    0.00 :   1cee89:       mov    %r10,0x58(%rsp)
    0.00 :   1cee8e:       mov    %r15,%rdx
    0.00 :   1cee91:       addr32 callq 127340 <PyObject_Call>
    0.00 :   1cee97:       mov    0x58(%rsp),%r10
    0.00 :   1cee9c:       mov    %rax,%r9
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cee9f:       mov    0x40(%rsp),%rdi
    0.00 :   1ceea4:       mov    (%rdi),%rcx
    0.00 :   1ceea7:       mov    %rcx,0x58(%rsp)
    0.00 :   1ceeac:       sub    $0x1,%rcx
    0.00 :   1ceeb0:       mov    %rcx,(%rdi)
    0.00 :   1ceeb3:       test   %rcx,%rcx
    0.00 :   1ceeb6:       je     1d2c4f <_PyEval_EvalFrameDefault+0x5bff>
    0.00 :   1ceebc:       subq   $0x1,(%r10)
    0.00 :   1ceec0:       jne    1ceed7 <_PyEval_EvalFrameDefault+0x1e87>
    0.00 :   1ceec2:       mov    0x8(%r10),%r8
    0.00 :   1ceec6:       mov    %r9,0x40(%rsp)
    0.00 :   1ceecb:       mov    %r10,%rdi
    0.00 :   1ceece:       callq  *0x30(%r8)
    0.00 :   1ceed2:       mov    0x40(%rsp),%r9
    0.00 :   1ceed7:       test   %r15,%r15
    0.00 :   1ceeda:       je     1ceee6 <_PyEval_EvalFrameDefault+0x1e96>
    0.00 :   1ceedc:       subq   $0x1,(%r15)
    0.00 :   1ceee0:       je     1d43bb <_PyEval_EvalFrameDefault+0x736b>
    0.00 :   1ceee6:       mov    %r9,-0x10(%rbp)
    0.00 :   1ceeea:       test   %r9,%r9
    0.00 :   1ceeed:       je     1d3a99 <_PyEval_EvalFrameDefault+0x6a49>
    0.00 :   1ceef3:       mov    0x17d7cf(%rip),%ebp        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1ceef9:       test   %ebp,%ebp
    0.00 :   1ceefb:       jne    1d3a8f <_PyEval_EvalFrameDefault+0x6a3f>
    0.00 :   1cef01:       mov    0x17d7bd(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cef07:       mov    %r12,%r15
    0.00 :   1cef0a:       sub    0x8(%rsp),%r15
    0.00 :   1cef0f:       test   %eax,%eax
    0.00 :   1cef11:       jne    1d2f58 <_PyEval_EvalFrameDefault+0x5f08>
    0.00 :   1cef17:       movzwl (%r12),%ecx
    0.00 :   1cef1c:       lea    0x11379d(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cef23:       mov    %r15d,0x68(%r13)
    0.00 :   1cef27:       add    $0x2,%r12
    0.00 :   1cef2b:       mov    0x50(%rsp),%rbp
    0.00 :   1cef30:       movzbl %cl,%edx
    0.00 :   1cef33:       movzbl %ch,%edi
    0.00 :   1cef36:       mov    (%rsi,%rdx,8),%r11
    0.00 :   1cef3a:       mov    %rdx,%r8
    0.00 :   1cef3d:       movslq %edi,%r9
    0.00 :   1cef40:       jmpq   *%r11
    0.00 :   1cef43:       sub    $0x8,%rbp
    0.00 :   1cef47:       mov    -0x8(%rbp),%r15
    0.00 :   1cef4b:       mov    0x0(%rbp),%rbx
    0.00 :   1cef4f:       lea    0x17814a(%rip),%r11        # 3470a0 <PyUnicode_Type>
    0.00 :   1cef56:       cmp    %r11,0x8(%r15)
    0.00 :   1cef5a:       jne    1d27db <_PyEval_EvalFrameDefault+0x578b>
    0.00 :   1cef60:       mov    0x8(%rbx),%rax
    0.00 :   1cef64:       testb  $0x10,0xab(%rax)
    0.00 :   1cef6b:       je     1cef76 <_PyEval_EvalFrameDefault+0x1f26>
    0.00 :   1cef6d:       cmp    %r11,%rax
    0.00 :   1cef70:       jne    1d27db <_PyEval_EvalFrameDefault+0x578b>
    0.00 :   1cef76:       mov    %rbx,%rsi
    0.00 :   1cef79:       mov    %r15,%rdi
    0.00 :   1cef7c:       addr32 callq 1896c0 <PyUnicode_Format>
    0.00 :   1cef82:       subq   $0x1,(%rbx)
    0.00 :   1cef86:       je     1d2b48 <_PyEval_EvalFrameDefault+0x5af8>
    0.00 :   1cef8c:       subq   $0x1,(%r15)
    0.00 :   1cef90:       je     1d3006 <_PyEval_EvalFrameDefault+0x5fb6>
    0.00 :   1cef96:       mov    %rax,-0x8(%rbp)
    0.00 :   1cef9a:       test   %rax,%rax
    0.00 :   1cef9d:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cefa3:       mov    0x17d71f(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cefa9:       test   %edi,%edi
    0.00 :   1cefab:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cefb1:       mov    0x17d70d(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cefb7:       test   %eax,%eax
    0.00 :   1cefb9:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cefbf:       movzwl (%r12),%ebx
    0.00 :   1cefc4:       mov    %r12,%rcx
    0.00 :   1cefc7:       lea    0x1136f2(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cefce:       add    $0x2,%r12
    0.00 :   1cefd2:       sub    0x8(%rsp),%rcx
    0.00 :   1cefd7:       movzbl %bl,%edx
    0.00 :   1cefda:       movzbl %bh,%esi
    0.00 :   1cefdd:       mov    %ecx,0x68(%r13)
    0.00 :   1cefe1:       mov    %rdx,%r8
    0.00 :   1cefe4:       movslq %esi,%r9
    0.00 :   1cefe7:       jmpq   *(%r10,%rdx,8)
    0.00 :   1cefeb:       mov    -0x8(%rbp),%rbx
    0.00 :   1cefef:       lea    0x17d26a(%rip),%rcx        # 34c260 <_Py_TrueStruct>
    0.00 :   1ceff6:       cmp    %rcx,%rbx
    0.00 :   1ceff9:       jne    1d2a15 <_PyEval_EvalFrameDefault+0x59c5>
    0.00 :   1cefff:       sub    $0x8,%rbp
    0.00 :   1cf003:       subq   $0x1,(%rbx)
    0.00 :   1cf007:       je     f18b1 <_PyEval_EvalFrameDefault.cold.2897+0x1344>
    0.00 :   1cf00d:       mov    0x17d6b1(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf013:       mov    %r12,%r8
    0.00 :   1cf016:       sub    0x8(%rsp),%r8
    0.00 :   1cf01b:       test   %eax,%eax
    0.00 :   1cf01d:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf023:       movzwl (%r12),%ecx
    0.00 :   1cf028:       lea    0x113691(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf02f:       mov    %r8d,0x68(%r13)
    0.00 :   1cf033:       add    $0x2,%r12
    0.00 :   1cf037:       movzbl %cl,%r11d
    0.00 :   1cf03b:       movzbl %ch,%edx
    0.00 :   1cf03e:       mov    %r11,%r8
    0.00 :   1cf041:       movslq %edx,%r9
    0.00 :   1cf044:       jmpq   *(%r15,%r11,8)
    0.00 :   1cf048:       mov    $0x10,%ebx
    0.00 :   1cf04d:       jmpq   1cd9b2 <_PyEval_EvalFrameDefault+0x962>
    0.00 :   1cf052:       lea    -0x8(%rbp),%rbx
    0.00 :   1cf056:       mov    -0x8(%rbx),%r15
    0.00 :   1cf05a:       mov    -0x8(%rbp),%rsi
    0.00 :   1cf05e:       sub    $0x10,%rbp
    0.00 :   1cf062:       lea    0x179f07(%rip),%r8        # 348f70 <_Py_NoneStruct>
    0.00 :   1cf069:       movl   $0x0,0x40(%rsp)
    0.00 :   1cf071:       cmp    %r8,%r15
    0.00 :   1cf074:       jne    1d2f79 <_PyEval_EvalFrameDefault+0x5f29>
    0.00 :   1cf07a:       subq   $0x1,(%rsi)
    0.00 :   1cf07e:       je     f18d0 <_PyEval_EvalFrameDefault.cold.2897+0x1363>
    0.00 :   1cf084:       subq   $0x1,(%r15)
    0.00 :   1cf088:       je     f18c1 <_PyEval_EvalFrameDefault.cold.2897+0x1354>
    0.00 :   1cf08e:       mov    0x40(%rsp),%r10d
    0.00 :   1cf093:       test   %r10d,%r10d
    0.00 :   1cf096:       js     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf09c:       jne    1d2f62 <_PyEval_EvalFrameDefault+0x5f12>
    0.00 :   1cf0a2:       mov    0x17d61f(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf0a9:       test   %r9d,%r9d
    0.00 :   1cf0ac:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf0b2:       mov    0x17d60c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf0b8:       mov    %r12,%rcx
    0.00 :   1cf0bb:       sub    0x8(%rsp),%rcx
    0.00 :   1cf0c0:       test   %eax,%eax
    0.00 :   1cf0c2:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf0c8:       movzwl (%r12),%ebx
    0.00 :   1cf0cd:       lea    0x1135ec(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf0d4:       mov    %ecx,0x68(%r13)
    0.00 :   1cf0d8:       add    $0x2,%r12
    0.00 :   1cf0dc:       movzbl %bl,%edi
    0.00 :   1cf0df:       movzbl %bh,%esi
    0.00 :   1cf0e2:       mov    %rdi,%r8
    0.00 :   1cf0e5:       movslq %esi,%r9
    0.00 :   1cf0e8:       jmpq   *(%r11,%rdi,8)
    0.00 :   1cf0ec:       mov    -0x8(%rbp),%r15
    0.00 :   1cf0f0:       lea    0x179e79(%rip),%r9        # 348f70 <_Py_NoneStruct>
    0.00 :   1cf0f7:       cmp    %r9,%r15
    0.00 :   1cf0fa:       jne    1d2bee <_PyEval_EvalFrameDefault+0x5b9e>
    0.00 :   1cf100:       lea    -0x8(%rbp),%rbx
    0.00 :   1cf104:       mov    -0x8(%rbx),%r8
    0.00 :   1cf108:       mov    %r9,%rcx
    0.00 :   1cf10b:       mov    %r9,%rdi
    0.00 :   1cf10e:       mov    %r9,-0x8(%rbx)
    0.00 :   1cf112:       movq   %rdi,%xmm4
    0.00 :   1cf117:       movq   %r15,%xmm3
    0.00 :   1cf11c:       mov    %r8,%rdi
    0.00 :   1cf11f:       mov    %rcx,0xb0(%rsp)
    0.00 :   1cf127:       punpcklqdq %xmm4,%xmm3
    0.00 :   1cf12b:       xor    %ecx,%ecx
    0.00 :   1cf12d:       mov    $0x3,%edx
    0.00 :   1cf132:       mov    %r8,0x40(%rsp)
    0.00 :   1cf137:       lea    0xa0(%rsp),%rsi
    0.00 :   1cf13f:       movaps %xmm3,0xa0(%rsp)
    0.00 :   1cf147:       addr32 callq 116150 <_PyObject_FastCallDict>
    0.00 :   1cf14d:       mov    0x40(%rsp),%rsi
    0.00 :   1cf152:       subq   $0x1,(%rsi)
    0.00 :   1cf156:       jne    1cf16c <_PyEval_EvalFrameDefault+0x211c>
    0.00 :   1cf158:       mov    0x8(%rsi),%rdx
    0.00 :   1cf15c:       mov    %rax,0x40(%rsp)
    0.00 :   1cf161:       mov    %rsi,%rdi
    0.00 :   1cf164:       callq  *0x30(%rdx)
    0.00 :   1cf167:       mov    0x40(%rsp),%rax
    0.00 :   1cf16c:       test   %rax,%rax
    0.00 :   1cf16f:       je     1d42a6 <_PyEval_EvalFrameDefault+0x7256>
    0.00 :   1cf175:       addq   $0x1,(%r15)
    0.00 :   1cf179:       lea    0x10(%rbx),%rbp
    0.00 :   1cf17d:       mov    %r15,(%rbx)
    0.00 :   1cf180:       mov    %rax,0x8(%rbx)
    0.00 :   1cf184:       mov    0x17d53d(%rip),%r10d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf18b:       test   %r10d,%r10d
    0.00 :   1cf18e:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf194:       mov    0x17d52a(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf19a:       mov    %r12,%r9
    0.00 :   1cf19d:       sub    0x8(%rsp),%r9
    0.00 :   1cf1a2:       test   %eax,%eax
    0.00 :   1cf1a4:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf1aa:       movzwl (%r12),%ecx
    0.00 :   1cf1af:       lea    0x11350a(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf1b6:       mov    %r9d,0x68(%r13)
    0.00 :   1cf1ba:       add    $0x2,%r12
    0.00 :   1cf1be:       movzbl %cl,%edi
    0.00 :   1cf1c1:       movzbl %ch,%ebx
    0.00 :   1cf1c4:       mov    %rdi,%r8
    0.00 :   1cf1c7:       movslq %ebx,%r9
    0.00 :   1cf1ca:       jmpq   *(%r11,%rdi,8)
    0.00 :   1cf1ce:       mov    -0x8(%rbp),%rbx
    0.00 :   1cf1d2:       lea    0x17d067(%rip),%rax        # 34c240 <_Py_FalseStruct>
    0.00 :   1cf1d9:       cmp    %rax,%rbx
    0.00 :   1cf1dc:       je     1d2e74 <_PyEval_EvalFrameDefault+0x5e24>
    0.00 :   1cf1e2:       lea    0x17d077(%rip),%r10        # 34c260 <_Py_TrueStruct>
    0.00 :   1cf1e9:       cmp    %r10,%rbx
    0.00 :   1cf1ec:       je     1d43ef <_PyEval_EvalFrameDefault+0x739f>
    0.00 :   1cf1f2:       mov    %r9d,0x40(%rsp)
    0.00 :   1cf1f7:       mov    %rbx,%rdi
    0.00 :   1cf1fa:       addr32 callq fd680 <PyObject_IsTrue>
    0.00 :   1cf200:       cmp    $0x0,%eax
    0.00 :   1cf203:       jle    1d2ebd <_PyEval_EvalFrameDefault+0x5e6d>
    0.00 :   1cf209:       movslq 0x40(%rsp),%rdi
    0.00 :   1cf20e:       mov    0x8(%rsp),%r12
    0.00 :   1cf213:       and    $0xfffffffffffffffe,%rdi
    0.00 :   1cf217:       add    %rdi,%r12
    0.00 :   1cf21a:       mov    0x17d4a7(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf221:       test   %r9d,%r9d
    0.00 :   1cf224:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf22a:       mov    0x17d494(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf230:       mov    %r12,%r8
    0.00 :   1cf233:       sub    0x8(%rsp),%r8
    0.00 :   1cf238:       test   %eax,%eax
    0.00 :   1cf23a:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf240:       movzwl (%r12),%ecx
    0.00 :   1cf245:       lea    0x113474(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf24c:       mov    %r8d,0x68(%r13)
    0.00 :   1cf250:       add    $0x2,%r12
    0.00 :   1cf254:       movzbl %cl,%r11d
    0.00 :   1cf258:       movzbl %ch,%edx
    0.00 :   1cf25b:       mov    %r11,%r8
    0.00 :   1cf25e:       movslq %edx,%r9
    0.00 :   1cf261:       jmpq   *(%r15,%r11,8)
    0.00 :   1cf265:       mov    0x38(%rsp),%rax
    0.00 :   1cf26a:       movslq %r9d,%r10
    0.00 :   1cf26d:       lea    0x8(%rbp),%r15
    0.00 :   1cf271:       mov    (%rax,%r10,8),%r8
    0.00 :   1cf275:       addq   $0x1,(%r8)
    0.00 :   1cf279:       mov    %r8,0x0(%rbp)
    0.00 :   1cf27d:       mov    0x17d445(%rip),%ebp        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf283:       test   %ebp,%ebp
    0.00 :   1cf285:       jne    f2219 <_PyEval_EvalFrameDefault.cold.2897+0x1cac>
    0.00 :   1cf28b:       mov    0x17d433(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf291:       mov    %r12,%rdi
    0.00 :   1cf294:       sub    0x8(%rsp),%rdi
    0.00 :   1cf299:       test   %eax,%eax
    0.00 :   1cf29b:       jne    1d30ef <_PyEval_EvalFrameDefault+0x609f>
    0.00 :   1cf2a1:       movzwl (%r12),%ebx
    0.00 :   1cf2a6:       mov    %edi,0x68(%r13)
    0.00 :   1cf2aa:       add    $0x2,%r12
    0.00 :   1cf2ae:       mov    %r15,%rbp
    0.00 :   1cf2b1:       lea    0x113408(%rip),%rcx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf2b8:       movzbl %bl,%edx
    0.00 :   1cf2bb:       movzbl %bh,%esi
    0.00 :   1cf2be:       mov    (%rcx,%rdx,8),%r11
    0.00 :   1cf2c2:       mov    %rdx,%r8
    0.00 :   1cf2c5:       movslq %esi,%r9
    0.00 :   1cf2c8:       jmpq   *%r11
    0.00 :   1cf2cb:       sub    $0x8,%rbp
    0.00 :   1cf2cf:       mov    0x0(%rbp),%r15
    0.00 :   1cf2d3:       neg    %r9d
    0.00 :   1cf2d6:       movslq %r9d,%r11
    0.00 :   1cf2d9:       mov    0x0(%rbp,%r11,8),%rdi
    0.00 :   1cf2de:       mov    %r15,%rsi
    0.00 :   1cf2e1:       addr32 callq 146c70 <PySet_Add>
    0.00 :   1cf2e7:       subq   $0x1,(%r15)
    0.00 :   1cf2eb:       mov    %eax,%ebx
    0.00 :   1cf2ed:       je     1d30e0 <_PyEval_EvalFrameDefault+0x6090>
    0.00 :   1cf2f3:       test   %ebx,%ebx
    0.00 :   1cf2f5:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf2fb:       mov    0x17d3c6(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf302:       test   %r8d,%r8d
    0.00 :   1cf305:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf30b:       mov    0x17d3b3(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf311:       mov    %r12,%rdx
    0.00 :   1cf314:       sub    0x8(%rsp),%rdx
    0.00 :   1cf319:       test   %eax,%eax
    0.00 :   1cf31b:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf321:       movzwl (%r12),%ecx
    0.00 :   1cf326:       lea    0x113393(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf32d:       mov    %edx,0x68(%r13)
    0.00 :   1cf331:       add    $0x2,%r12
    0.00 :   1cf335:       movzbl %cl,%esi
    0.00 :   1cf338:       movzbl %ch,%edi
    0.00 :   1cf33b:       mov    %rsi,%r8
    0.00 :   1cf33e:       movslq %edi,%r9
    0.00 :   1cf341:       jmpq   *(%r10,%rsi,8)
    0.00 :   1cf345:       sub    $0x8,%rbp
    0.00 :   1cf349:       mov    -0x8(%rbp),%rax
    0.00 :   1cf34d:       mov    0x0(%rbp),%r15
    0.00 :   1cf351:       mov    %rax,%rdi
    0.00 :   1cf354:       mov    %r15,%rsi
    0.00 :   1cf357:       mov    %rax,0x40(%rsp)
    0.00 :   1cf35c:       addr32 callq 12d4d0 <PyNumber_Rshift>
    0.00 :   1cf362:       mov    0x40(%rsp),%r8
    0.00 :   1cf367:       mov    %rax,%rbx
    0.00 :   1cf36a:       subq   $0x1,(%r8)
    0.00 :   1cf36e:       je     1d3a80 <_PyEval_EvalFrameDefault+0x6a30>
    0.00 :   1cf374:       subq   $0x1,(%r15)
    0.00 :   1cf378:       je     f0efd <_PyEval_EvalFrameDefault.cold.2897+0x990>
    0.00 :   1cf37e:       mov    %rbx,-0x8(%rbp)
    0.00 :   1cf382:       test   %rbx,%rbx
    0.00 :   1cf385:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf38b:       mov    0x17d337(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf391:       test   %edi,%edi
    0.00 :   1cf393:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf399:       mov    0x17d325(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf39f:       mov    %r12,%r9
    0.00 :   1cf3a2:       sub    0x8(%rsp),%r9
    0.00 :   1cf3a7:       test   %eax,%eax
    0.00 :   1cf3a9:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf3af:       movzwl (%r12),%ecx
    0.00 :   1cf3b4:       lea    0x113305(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf3bb:       mov    %r9d,0x68(%r13)
    0.00 :   1cf3bf:       add    $0x2,%r12
    0.00 :   1cf3c3:       movzbl %cl,%r10d
    0.00 :   1cf3c7:       movzbl %ch,%ebx
    0.00 :   1cf3ca:       mov    %r10,%r8
    0.00 :   1cf3cd:       movslq %ebx,%r9
    0.00 :   1cf3d0:       jmpq   *(%r11,%r10,8)
    0.00 :   1cf3d4:       sub    $0x8,%rbp
    0.00 :   1cf3d8:       mov    -0x8(%rbp),%r15
    0.00 :   1cf3dc:       mov    0x0(%rbp),%rbx
    0.00 :   1cf3e0:       lea    0x179b89(%rip),%rdx        # 348f70 <_Py_NoneStruct>
    0.00 :   1cf3e7:       mov    %rbx,%rsi
    0.00 :   1cf3ea:       mov    %r15,%rdi
    0.00 :   1cf3ed:       addr32 callq 12d5f0 <PyNumber_Power>
    0.00 :   1cf3f3:       subq   $0x1,(%r15)
    0.00 :   1cf3f7:       mov    %rax,0x40(%rsp)
    0.00 :   1cf3fc:       je     1d31a5 <_PyEval_EvalFrameDefault+0x6155>
    0.00 :   1cf402:       subq   $0x1,(%rbx)
    0.00 :   1cf406:       je     1d42c0 <_PyEval_EvalFrameDefault+0x7270>
    0.00 :   1cf40c:       mov    0x40(%rsp),%rdi
    0.00 :   1cf411:       mov    %rdi,-0x8(%rbp)
    0.00 :   1cf415:       test   %rdi,%rdi
    0.00 :   1cf418:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf41e:       mov    0x17d2a3(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf425:       test   %r8d,%r8d
    0.00 :   1cf428:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf42e:       mov    0x17d290(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf434:       mov    %r12,%r9
    0.00 :   1cf437:       sub    0x8(%rsp),%r9
    0.00 :   1cf43c:       test   %eax,%eax
    0.00 :   1cf43e:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf444:       movzwl (%r12),%ecx
    0.00 :   1cf449:       lea    0x113270(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf450:       mov    %r9d,0x68(%r13)
    0.00 :   1cf454:       add    $0x2,%r12
    0.00 :   1cf458:       movzbl %cl,%esi
    0.00 :   1cf45b:       movzbl %ch,%edx
    0.00 :   1cf45e:       mov    %rsi,%r8
    0.00 :   1cf461:       movslq %edx,%r9
    0.00 :   1cf464:       jmpq   *(%r10,%rsi,8)
    0.00 :   1cf468:       sub    $0x8,%rbp
    0.00 :   1cf46c:       mov    -0x8(%rbp),%rbx
    0.00 :   1cf470:       mov    0x0(%rbp),%r15
    0.00 :   1cf474:       mov    %rbx,%rdi
    0.00 :   1cf477:       mov    %rbx,0x40(%rsp)
    0.00 :   1cf47c:       mov    %r15,%rsi
    0.00 :   1cf47f:       addr32 callq 12d130 <PyNumber_FloorDivide>
    0.00 :   1cf485:       mov    0x40(%rsp),%r11
    0.00 :   1cf48a:       mov    %rax,%rbx
    0.00 :   1cf48d:       subq   $0x1,(%r11)
    0.00 :   1cf491:       je     1d41fd <_PyEval_EvalFrameDefault+0x71ad>
    0.00 :   1cf497:       subq   $0x1,(%r15)
    0.00 :   1cf49b:       je     1d41ed <_PyEval_EvalFrameDefault+0x719d>
    0.00 :   1cf4a1:       mov    %rbx,-0x8(%rbp)
    0.00 :   1cf4a5:       test   %rbx,%rbx
    0.00 :   1cf4a8:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf4ae:       mov    0x17d214(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf4b4:       test   %edi,%edi
    0.00 :   1cf4b6:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf4bc:       mov    0x17d202(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf4c2:       mov    %r12,%r9
    0.00 :   1cf4c5:       sub    0x8(%rsp),%r9
    0.00 :   1cf4ca:       test   %eax,%eax
    0.00 :   1cf4cc:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf4d2:       movzwl (%r12),%ecx
    0.00 :   1cf4d7:       lea    0x1131e2(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf4de:       mov    %r9d,0x68(%r13)
    0.00 :   1cf4e2:       add    $0x2,%r12
    0.00 :   1cf4e6:       movzbl %cl,%edx
    0.00 :   1cf4e9:       movzbl %ch,%esi
    0.00 :   1cf4ec:       mov    %rdx,%r8
    0.00 :   1cf4ef:       movslq %esi,%r9
    0.00 :   1cf4f2:       jmpq   *(%r10,%rdx,8)
    0.00 :   1cf4f6:       mov    -0x10(%rbp),%r9
    0.00 :   1cf4fa:       mov    -0x8(%rbp),%r15
    0.00 :   1cf4fe:       sub    $0x10,%rbp
    0.00 :   1cf502:       mov    %r15,%rsi
    0.00 :   1cf505:       mov    %r9,%rdi
    0.00 :   1cf508:       mov    %r9,0x40(%rsp)
    0.00 :   1cf50d:       addr32 callq 16a530 <PyObject_DelItem>
    0.00 :   1cf513:       mov    0x40(%rsp),%r11
    0.00 :   1cf518:       mov    %eax,%ebx
    0.00 :   1cf51a:       subq   $0x1,(%r11)
    0.00 :   1cf51e:       je     f1311 <_PyEval_EvalFrameDefault.cold.2897+0xda4>
    0.00 :   1cf524:       subq   $0x1,(%r15)
    0.00 :   1cf528:       jne    1cf535 <_PyEval_EvalFrameDefault+0x24e5>
    0.00 :   1cf52a:       mov    0x8(%r15),%r8
    0.00 :   1cf52e:       mov    %r15,%rdi
    0.00 :   1cf531:       callq  *0x30(%r8)
    0.00 :   1cf535:       test   %ebx,%ebx
    0.00 :   1cf537:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf53d:       mov    0x17d185(%rip),%ecx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf543:       test   %ecx,%ecx
    0.00 :   1cf545:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf54b:       mov    0x17d173(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf551:       test   %eax,%eax
    0.00 :   1cf553:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf559:       movzwl (%r12),%ebx
    0.00 :   1cf55e:       mov    %r12,%rdi
    0.00 :   1cf561:       lea    0x113158(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf568:       add    $0x2,%r12
    0.00 :   1cf56c:       sub    0x8(%rsp),%rdi
    0.00 :   1cf571:       movzbl %bl,%esi
    0.00 :   1cf574:       movzbl %bh,%edx
    0.00 :   1cf577:       mov    %edi,0x68(%r13)
    0.00 :   1cf57b:       mov    %rsi,%r8
    0.00 :   1cf57e:       movslq %edx,%r9
    0.00 :   1cf581:       jmpq   *(%r10,%rsi,8)
    0.00 :   1cf585:       sub    $0x8,%rbp
    0.00 :   1cf589:       mov    0x0(%rbp),%r15
    0.00 :   1cf58d:       mov    0x18(%rsp),%rax
    0.00 :   1cf592:       movslq %r9d,%r11
    0.00 :   1cf595:       xor    %edx,%edx
    0.00 :   1cf597:       mov    0x18(%rax,%r11,8),%rsi
    0.00 :   1cf59c:       mov    %r15,%rdi
    0.00 :   1cf59f:       addr32 callq 1c5150 <PyObject_SetAttr>
    0.00 :   1cf5a5:       subq   $0x1,(%r15)
    0.00 :   1cf5a9:       mov    %eax,%ebx
    0.00 :   1cf5ab:       je     f1ab5 <_PyEval_EvalFrameDefault.cold.2897+0x1548>
    0.00 :   1cf5b1:       test   %ebx,%ebx
    0.00 :   1cf5b3:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf5b9:       mov    0x17d108(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf5c0:       test   %r9d,%r9d
    0.00 :   1cf5c3:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf5c9:       mov    0x17d0f5(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf5cf:       mov    %r12,%r10
    0.00 :   1cf5d2:       sub    0x8(%rsp),%r10
    0.00 :   1cf5d7:       test   %eax,%eax
    0.00 :   1cf5d9:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf5df:       movzwl (%r12),%ecx
    0.00 :   1cf5e4:       lea    0x1130d5(%rip),%rdx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf5eb:       mov    %r10d,0x68(%r13)
    0.00 :   1cf5ef:       add    $0x2,%r12
    0.00 :   1cf5f3:       movzbl %cl,%edi
    0.00 :   1cf5f6:       movzbl %ch,%esi
    0.00 :   1cf5f9:       mov    %rdi,%r8
    0.00 :   1cf5fc:       movslq %esi,%r9
    0.00 :   1cf5ff:       jmpq   *(%rdx,%rdi,8)
    0.00 :   1cf602:       sub    $0x8,%rbp
    0.00 :   1cf606:       mov    -0x8(%rbp),%rax
    0.00 :   1cf60a:       mov    0x0(%rbp),%r15
    0.00 :   1cf60e:       mov    %rax,%rdi
    0.00 :   1cf611:       mov    %r15,%rsi
    0.00 :   1cf614:       mov    %rax,0x40(%rsp)
    0.00 :   1cf619:       addr32 callq 12d3c0 <PyNumber_Or>
    0.00 :   1cf61f:       mov    0x40(%rsp),%r8
    0.00 :   1cf624:       mov    %rax,%rbx
    0.00 :   1cf627:       subq   $0x1,(%r8)
    0.00 :   1cf62b:       jne    1cf637 <_PyEval_EvalFrameDefault+0x25e7>
    0.00 :   1cf62d:       mov    0x8(%r8),%rdx
    0.00 :   1cf631:       mov    %r8,%rdi
    0.00 :   1cf634:       callq  *0x30(%rdx)
    0.00 :   1cf637:       subq   $0x1,(%r15)
    0.00 :   1cf63b:       je     1d4303 <_PyEval_EvalFrameDefault+0x72b3>
    0.00 :   1cf641:       mov    %rbx,-0x8(%rbp)
    0.00 :   1cf645:       test   %rbx,%rbx
    0.00 :   1cf648:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf64e:       mov    0x17d074(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf654:       test   %edi,%edi
    0.00 :   1cf656:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf65c:       mov    0x17d062(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf662:       mov    %r12,%r9
    0.00 :   1cf665:       sub    0x8(%rsp),%r9
    0.00 :   1cf66a:       test   %eax,%eax
    0.00 :   1cf66c:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf672:       movzwl (%r12),%ecx
    0.00 :   1cf677:       lea    0x113042(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf67e:       mov    %r9d,0x68(%r13)
    0.00 :   1cf682:       add    $0x2,%r12
    0.00 :   1cf686:       movzbl %cl,%r10d
    0.00 :   1cf68a:       movzbl %ch,%ebx
    0.00 :   1cf68d:       mov    %r10,%r8
    0.00 :   1cf690:       movslq %ebx,%r9
    0.00 :   1cf693:       jmpq   *(%r11,%r10,8)
    0.00 :   1cf697:       mov    -0x8(%rbp),%rbx
    0.00 :   1cf69b:       mov    %rbx,%rdi
    0.00 :   1cf69e:       addr32 callq 13c330 <PyNumber_Invert>
    0.00 :   1cf6a4:       subq   $0x1,(%rbx)
    0.00 :   1cf6a8:       mov    %rax,%r15
    0.00 :   1cf6ab:       je     1d41de <_PyEval_EvalFrameDefault+0x718e>
    0.00 :   1cf6b1:       mov    %r15,-0x8(%rbp)
    0.00 :   1cf6b5:       test   %r15,%r15
    0.00 :   1cf6b8:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf6be:       mov    0x17d003(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf6c5:       test   %r8d,%r8d
    0.00 :   1cf6c8:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf6ce:       mov    0x17cff0(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf6d4:       mov    %r12,%r9
    0.00 :   1cf6d7:       sub    0x8(%rsp),%r9
    0.00 :   1cf6dc:       test   %eax,%eax
    0.00 :   1cf6de:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf6e4:       movzwl (%r12),%ecx
    0.00 :   1cf6e9:       lea    0x112fd0(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf6f0:       mov    %r9d,0x68(%r13)
    0.00 :   1cf6f4:       add    $0x2,%r12
    0.00 :   1cf6f8:       movzbl %cl,%esi
    0.00 :   1cf6fb:       movzbl %ch,%edx
    0.00 :   1cf6fe:       mov    %rsi,%r8
    0.00 :   1cf701:       movslq %edx,%r9
    0.00 :   1cf704:       jmpq   *(%r10,%rsi,8)
    0.00 :   1cf708:       sub    $0x8,%rbp
    0.00 :   1cf70c:       mov    -0x8(%rbp),%rax
    0.00 :   1cf710:       mov    0x0(%rbp),%r15
    0.00 :   1cf714:       mov    %rax,%rdi
    0.00 :   1cf717:       mov    %r15,%rsi
    0.00 :   1cf71a:       mov    %rax,0x40(%rsp)
    0.00 :   1cf71f:       addr32 callq 12d430 <PyNumber_Lshift>
    0.00 :   1cf725:       mov    0x40(%rsp),%r8
    0.00 :   1cf72a:       mov    %rax,%rbx
    0.00 :   1cf72d:       subq   $0x1,(%r8)
    0.00 :   1cf731:       je     1d42f4 <_PyEval_EvalFrameDefault+0x72a4>
    0.00 :   1cf737:       subq   $0x1,(%r15)
    0.00 :   1cf73b:       je     1d37a3 <_PyEval_EvalFrameDefault+0x6753>
    0.00 :   1cf741:       mov    %rbx,-0x8(%rbp)
    0.00 :   1cf745:       test   %rbx,%rbx
    0.00 :   1cf748:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf74e:       mov    0x17cf74(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf754:       test   %edi,%edi
    0.00 :   1cf756:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf75c:       mov    0x17cf62(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf762:       mov    %r12,%r9
    0.00 :   1cf765:       sub    0x8(%rsp),%r9
    0.00 :   1cf76a:       test   %eax,%eax
    0.00 :   1cf76c:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf772:       movzwl (%r12),%ecx
    0.00 :   1cf777:       lea    0x112f42(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf77e:       mov    %r9d,0x68(%r13)
    0.00 :   1cf782:       add    $0x2,%r12
    0.00 :   1cf786:       movzbl %cl,%r10d
    0.00 :   1cf78a:       movzbl %ch,%ebx
    0.00 :   1cf78d:       mov    %r10,%r8
    0.00 :   1cf790:       movslq %ebx,%r9
    0.00 :   1cf793:       jmpq   *(%r11,%r10,8)
    0.00 :   1cf797:       sub    $0x8,%rbp
    0.00 :   1cf79b:       mov    -0x8(%rbp),%rbx
    0.00 :   1cf79f:       mov    0x0(%rbp),%r15
    0.00 :   1cf7a3:       mov    %rbx,%rdi
    0.00 :   1cf7a6:       mov    %rbx,0x40(%rsp)
    0.00 :   1cf7ab:       mov    %r15,%rsi
    0.00 :   1cf7ae:       addr32 callq 12d3f0 <PyNumber_InPlaceLshift>
    0.00 :   1cf7b4:       mov    0x40(%rsp),%r9
    0.00 :   1cf7b9:       mov    %rax,%rbx
    0.00 :   1cf7bc:       subq   $0x1,(%r9)
    0.00 :   1cf7c0:       je     f141d <_PyEval_EvalFrameDefault.cold.2897+0xeb0>
    0.00 :   1cf7c6:       subq   $0x1,(%r15)
    0.00 :   1cf7ca:       je     1d4113 <_PyEval_EvalFrameDefault+0x70c3>
    0.00 :   1cf7d0:       mov    %rbx,-0x8(%rbp)
    0.00 :   1cf7d4:       test   %rbx,%rbx
    0.00 :   1cf7d7:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cf7dd:       mov    0x17cee4(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf7e4:       test   %r8d,%r8d
    0.00 :   1cf7e7:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf7ed:       mov    0x17ced1(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf7f3:       mov    %r12,%rdx
    0.00 :   1cf7f6:       sub    0x8(%rsp),%rdx
    0.00 :   1cf7fb:       test   %eax,%eax
    0.00 :   1cf7fd:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf803:       movzwl (%r12),%ecx
    0.00 :   1cf808:       lea    0x112eb1(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf80f:       mov    %edx,0x68(%r13)
    0.00 :   1cf813:       add    $0x2,%r12
    0.00 :   1cf817:       movzbl %cl,%edi
    0.00 :   1cf81a:       movzbl %ch,%esi
    0.00 :   1cf81d:       mov    %rdi,%r8
    0.00 :   1cf820:       movslq %esi,%r9
    0.00 :   1cf823:       jmpq   *(%r10,%rdi,8)
    0.00 :   1cf827:       mov    0x38(%rsp),%rax
    0.00 :   1cf82c:       movslq %r9d,%r11
    0.00 :   1cf82f:       sub    $0x8,%rbp
    0.00 :   1cf833:       mov    0x0(%rbp),%r8
    0.00 :   1cf837:       mov    (%rax,%r11,8),%r10
    0.00 :   1cf83b:       mov    0x10(%r10),%rdi
    0.00 :   1cf83f:       mov    %r8,0x10(%r10)
    0.00 :   1cf843:       test   %rdi,%rdi
    0.00 :   1cf846:       jne    1d2ee0 <_PyEval_EvalFrameDefault+0x5e90>
    0.00 :   1cf84c:       mov    0x17ce75(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf853:       test   %r9d,%r9d
    0.00 :   1cf856:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf85c:       mov    0x17ce62(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf862:       mov    %r12,%rbx
    0.00 :   1cf865:       sub    0x8(%rsp),%rbx
    0.00 :   1cf86a:       test   %eax,%eax
    0.00 :   1cf86c:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf872:       movzwl (%r12),%ecx
    0.00 :   1cf877:       lea    0x112e42(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf87e:       mov    %ebx,0x68(%r13)
    0.00 :   1cf882:       add    $0x2,%r12
    0.00 :   1cf886:       movzbl %cl,%edx
    0.00 :   1cf889:       movzbl %ch,%edi
    0.00 :   1cf88c:       mov    %rdx,%r8
    0.00 :   1cf88f:       movslq %edi,%r9
    0.00 :   1cf892:       jmpq   *(%rsi,%rdx,8)
    0.00 :   1cf895:       mov    0x10(%rsp),%rax
    0.00 :   1cf89a:       movslq %r9d,%rsi
    0.00 :   1cf89d:       lea    (%rax,%rsi,8),%r8
    0.00 :   1cf8a1:       mov    (%r8),%rdi
    0.00 :   1cf8a4:       test   %rdi,%rdi
    0.00 :   1cf8a7:       je     f0788 <_PyEval_EvalFrameDefault.cold.2897+0x21b>
    0.00 :   1cf8ad:       movq   $0x0,(%r8)
    0.00 :   1cf8b4:       subq   $0x1,(%rdi)
    0.00 :   1cf8b8:       je     1d3d21 <_PyEval_EvalFrameDefault+0x6cd1>
    0.00 :   1cf8be:       mov    0x17ce03(%rip),%r15d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf8c5:       test   %r15d,%r15d
    0.00 :   1cf8c8:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf8ce:       mov    0x17cdf0(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf8d4:       test   %eax,%eax
    0.00 :   1cf8d6:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf8dc:       movzwl (%r12),%ebx
    0.00 :   1cf8e1:       mov    %r12,%r9
    0.00 :   1cf8e4:       lea    0x112dd5(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf8eb:       add    $0x2,%r12
    0.00 :   1cf8ef:       sub    0x8(%rsp),%r9
    0.00 :   1cf8f4:       movzbl %bl,%edx
    0.00 :   1cf8f7:       movzbl %bh,%ecx
    0.00 :   1cf8fa:       mov    %r9d,0x68(%r13)
    0.00 :   1cf8fe:       mov    %rdx,%r8
    0.00 :   1cf901:       movslq %ecx,%r9
    0.00 :   1cf904:       jmpq   *(%r11,%rdx,8)
    0.00 :   1cf908:       nopl   0x0(%rax,%rax,1)
    0.00 :   1cf910:       mov    -0x8(%rbp),%r15
    0.00 :   1cf914:       mov    %r15,%rdi
    0.00 :   1cf917:       addr32 callq fd680 <PyObject_IsTrue>
    0.00 :   1cf91d:       subq   $0x1,(%r15)
    0.00 :   1cf921:       mov    %eax,%ebx
    0.00 :   1cf923:       je     1d3657 <_PyEval_EvalFrameDefault+0x6607>
    0.00 :   1cf929:       lea    -0x8(%rbp),%r10
    0.00 :   1cf92d:       cmp    $0x0,%ebx
    0.00 :   1cf930:       jne    1d2ef7 <_PyEval_EvalFrameDefault+0x5ea7>
    0.00 :   1cf936:       lea    0x17c923(%rip),%r15        # 34c260 <_Py_TrueStruct>
    0.00 :   1cf93d:       addq   $0x1,0x17c91b(%rip)        # 34c260 <_Py_TrueStruct>
    0.00 :   1cf945:       mov    %r15,-0x8(%rbp)
    0.00 :   1cf949:       mov    0x17cd79(%rip),%ebx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cf94f:       test   %ebx,%ebx
    0.00 :   1cf951:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cf957:       mov    0x17cd67(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cf95d:       mov    %r12,%r10
    0.00 :   1cf960:       sub    0x8(%rsp),%r10
    0.00 :   1cf965:       test   %eax,%eax
    0.00 :   1cf967:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cf96d:       movzwl (%r12),%ecx
    0.00 :   1cf972:       lea    0x112d47(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cf979:       mov    %r10d,0x68(%r13)
    0.00 :   1cf97d:       add    $0x2,%r12
    0.00 :   1cf981:       movzbl %cl,%r11d
    0.00 :   1cf985:       movzbl %ch,%edx
    0.00 :   1cf988:       mov    %r11,%r8
    0.00 :   1cf98b:       movslq %edx,%r9
    0.00 :   1cf98e:       jmpq   *(%rdi,%r11,8)
    0.00 :   1cf992:       mov    %r13,%rdi
    0.00 :   1cf995:       addr32 callq 119d30 <PyFrame_BlockPop>
    0.00 :   1cf99b:       cmpl   $0x101,(%rax)
    0.00 :   1cf9a1:       mov    %rax,%rbx
    0.00 :   1cf9a4:       jne    f26f7 <_PyEval_EvalFrameDefault.cold.2897+0x218a>
    0.00 :   1cf9aa:       mov    0x8(%rax),%r10d
    0.00 :   1cf9ae:       mov    %rbp,%r9
    0.00 :   1cf9b1:       sub    0x40(%r13),%r9
    0.00 :   1cf9b5:       sar    $0x3,%r9
    0.00 :   1cf9b9:       lea    0x3(%r10),%r8d
    0.00 :   1cf9bd:       cmp    %r9d,%r8d
    0.00 :   1cf9c0:       jl     1d4e55 <_PyEval_EvalFrameDefault+0x7e05>
    0.00 :   1cf9c6:       mov    0x90(%r14),%r11
    0.00 :   1cf9cd:       mov    -0x8(%rbp),%rsi
    0.00 :   1cf9d1:       lea    -0x18(%rbp),%r9
    0.00 :   1cf9d5:       mov    %r9,0x40(%rsp)
    0.00 :   1cf9da:       mov    (%r11),%rdi
    0.00 :   1cf9dd:       mov    0x8(%r11),%rbx
    0.00 :   1cf9e1:       mov    %rsi,(%r11)
    0.00 :   1cf9e4:       mov    -0x10(%rbp),%rdx
    0.00 :   1cf9e8:       mov    0x10(%r11),%r15
    0.00 :   1cf9ec:       mov    %rdx,0x8(%r11)
    0.00 :   1cf9f0:       mov    -0x18(%rbp),%rbp
    0.00 :   1cf9f4:       mov    %rbp,0x10(%r11)
    0.00 :   1cf9f8:       test   %rdi,%rdi
    0.00 :   1cf9fb:       je     1cfa07 <_PyEval_EvalFrameDefault+0x29b7>
    0.00 :   1cf9fd:       subq   $0x1,(%rdi)
    0.00 :   1cfa01:       je     f26ea <_PyEval_EvalFrameDefault.cold.2897+0x217d>
    0.00 :   1cfa07:       test   %rbx,%rbx
    0.00 :   1cfa0a:       je     1cfa1c <_PyEval_EvalFrameDefault+0x29cc>
    0.00 :   1cfa0c:       subq   $0x1,(%rbx)
    0.00 :   1cfa10:       jne    1cfa1c <_PyEval_EvalFrameDefault+0x29cc>
    0.00 :   1cfa12:       mov    0x8(%rbx),%rax
    0.00 :   1cfa16:       mov    %rbx,%rdi
    0.00 :   1cfa19:       callq  *0x30(%rax)
    0.00 :   1cfa1c:       test   %r15,%r15
    0.00 :   1cfa1f:       je     1cfa32 <_PyEval_EvalFrameDefault+0x29e2>
    0.00 :   1cfa21:       subq   $0x1,(%r15)
    0.00 :   1cfa25:       jne    1cfa32 <_PyEval_EvalFrameDefault+0x29e2>
    0.00 :   1cfa27:       mov    0x8(%r15),%r10
    0.00 :   1cfa2b:       mov    %r15,%rdi
    0.00 :   1cfa2e:       callq  *0x30(%r10)
    0.00 :   1cfa32:       mov    0x17cc90(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cfa38:       test   %edi,%edi
    0.00 :   1cfa3a:       jne    f0e13 <_PyEval_EvalFrameDefault.cold.2897+0x8a6>
    0.00 :   1cfa40:       mov    0x17cc7e(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cfa46:       mov    %r12,%rcx
    0.00 :   1cfa49:       sub    0x8(%rsp),%rcx
    0.00 :   1cfa4e:       test   %eax,%eax
    0.00 :   1cfa50:       jne    1d3aa3 <_PyEval_EvalFrameDefault+0x6a53>
    0.00 :   1cfa56:       movzwl (%r12),%ebx
    0.00 :   1cfa5b:       lea    0x112c5e(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cfa62:       mov    %ecx,0x68(%r13)
    0.00 :   1cfa66:       add    $0x2,%r12
    0.00 :   1cfa6a:       mov    0x40(%rsp),%rbp
    0.00 :   1cfa6f:       movzbl %bl,%r11d
    0.00 :   1cfa73:       movzbl %bh,%esi
    0.00 :   1cfa76:       mov    (%r15,%r11,8),%rdx
    0.00 :   1cfa7a:       mov    %r11,%r8
    0.00 :   1cfa7d:       movslq %esi,%r9
    0.00 :   1cfa80:       jmpq   *%rdx
    0.00 :   1cfa82:       sub    $0x8,%rbp
    0.00 :   1cfa86:       mov    -0x8(%rbp),%rbx
    0.00 :   1cfa8a:       mov    0x0(%rbp),%r15
    0.00 :   1cfa8e:       mov    %rbx,%rdi
    0.00 :   1cfa91:       mov    %rbx,0x40(%rsp)
    0.00 :   1cfa96:       mov    %r15,%rsi
    0.00 :   1cfa99:       addr32 callq 12d460 <PyNumber_TrueDivide>
    0.00 :   1cfa9f:       mov    0x40(%rsp),%r11
    0.00 :   1cfaa4:       mov    %rax,%rbx
    0.00 :   1cfaa7:       subq   $0x1,(%r11)
    0.00 :   1cfaab:       jne    1cfab7 <_PyEval_EvalFrameDefault+0x2a67>
    0.00 :   1cfaad:       mov    0x8(%r11),%rax
    0.00 :   1cfab1:       mov    %r11,%rdi
    0.00 :   1cfab4:       callq  *0x30(%rax)
    0.00 :   1cfab7:       subq   $0x1,(%r15)
    0.00 :   1cfabb:       jne    1cfac8 <_PyEval_EvalFrameDefault+0x2a78>
    0.00 :   1cfabd:       mov    0x8(%r15),%r8
    0.00 :   1cfac1:       mov    %r15,%rdi
    0.00 :   1cfac4:       callq  *0x30(%r8)
    0.00 :   1cfac8:       mov    %rbx,-0x8(%rbp)
    0.00 :   1cfacc:       test   %rbx,%rbx
    0.00 :   1cfacf:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cfad5:       mov    0x17cbed(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cfadb:       test   %edi,%edi
    0.00 :   1cfadd:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cfae3:       mov    0x17cbdb(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cfae9:       mov    %r12,%r9
    0.00 :   1cfaec:       sub    0x8(%rsp),%r9
    0.00 :   1cfaf1:       test   %eax,%eax
    0.00 :   1cfaf3:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cfaf9:       movzwl (%r12),%ecx
    0.00 :   1cfafe:       lea    0x112bbb(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cfb05:       mov    %r9d,0x68(%r13)
    0.00 :   1cfb09:       add    $0x2,%r12
    0.00 :   1cfb0d:       movzbl %cl,%edx
    0.00 :   1cfb10:       movzbl %ch,%esi
    0.00 :   1cfb13:       mov    %rdx,%r8
    0.00 :   1cfb16:       movslq %esi,%r9
    0.00 :   1cfb19:       jmpq   *(%r10,%rdx,8)
    0.00 :   1cfb1d:       mov    -0x8(%rbp),%rbx
    0.00 :   1cfb21:       mov    %rbx,%rdi
    0.00 :   1cfb24:       addr32 callq 13bc00 <PyNumber_Negative>
    0.00 :   1cfb2a:       subq   $0x1,(%rbx)
    0.00 :   1cfb2e:       mov    %rax,%r15
    0.00 :   1cfb31:       je     1d4680 <_PyEval_EvalFrameDefault+0x7630>
    0.00 :   1cfb37:       mov    %r15,-0x8(%rbp)
    0.00 :   1cfb3b:       test   %r15,%r15
    0.00 :   1cfb3e:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cfb44:       mov    0x17cb7d(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cfb4b:       test   %r9d,%r9d
    0.00 :   1cfb4e:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cfb54:       mov    0x17cb6a(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cfb5a:       mov    %r12,%r11
    0.00 :   1cfb5d:       sub    0x8(%rsp),%r11
    0.00 :   1cfb62:       test   %eax,%eax
    0.00 :   1cfb64:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cfb6a:       movzwl (%r12),%ecx
    0.00 :   1cfb6f:       lea    0x112b4a(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cfb76:       mov    %r11d,0x68(%r13)
    0.00 :   1cfb7a:       add    $0x2,%r12
    0.00 :   1cfb7e:       movzbl %cl,%edx
    0.00 :   1cfb81:       movzbl %ch,%edi
    0.00 :   1cfb84:       mov    %rdx,%r8
    0.00 :   1cfb87:       movslq %edi,%r9
    0.00 :   1cfb8a:       jmpq   *(%rsi,%rdx,8)
    0.00 :   1cfb8d:       mov    -0x8(%rbp),%r8
    0.00 :   1cfb91:       lea    0x177b88(%rip),%rax        # 347720 <PyTuple_Type>
    0.00 :   1cfb98:       cmp    %rax,0x8(%r8)
    0.00 :   1cfb9c:       jne    f09ea <_PyEval_EvalFrameDefault.cold.2897+0x47d>
    0.00 :   1cfba2:       mov    0x10(%r8),%rbx
    0.00 :   1cfba6:       movslq %r9d,%r15
    0.00 :   1cfba9:       cmp    %r15,%rbx
    0.00 :   1cfbac:       jne    f09ea <_PyEval_EvalFrameDefault.cold.2897+0x47d>
    0.00 :   1cfbb2:       mov    %r8,0x50(%rsp)
    0.00 :   1cfbb7:       mov    %rbx,%rdi
    0.00 :   1cfbba:       mov    %r9d,0x40(%rsp)
    0.00 :   1cfbbf:       addr32 callq 15f9e0 <_PyDict_NewPresized>
    0.00 :   1cfbc5:       mov    %rax,%r15
    0.00 :   1cfbc8:       test   %rax,%rax
    0.00 :   1cfbcb:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cfbd1:       test   %rbx,%rbx
    0.00 :   1cfbd4:       mov    0x40(%rsp),%r9d
    0.00 :   1cfbd9:       jle    1cfc31 <_PyEval_EvalFrameDefault+0x2be1>
    0.00 :   1cfbdb:       mov    %rbx,%rcx
    0.00 :   1cfbde:       mov    0x50(%rsp),%r10
    0.00 :   1cfbe3:       not    %rcx
    0.00 :   1cfbe6:       shl    $0x3,%rcx
    0.00 :   1cfbea:       lea    (%r10,%rbx,8),%rdi
    0.00 :   1cfbee:       mov    0x20(%rdi,%rcx,1),%rsi
    0.00 :   1cfbf3:       mov    0x0(%rbp,%rcx,1),%rdx
    0.00 :   1cfbf8:       mov    %rdi,0x40(%rsp)
    0.00 :   1cfbfd:       mov    %r15,%rdi
    0.00 :   1cfc00:       mov    %r9d,0x58(%rsp)
    0.00 :   1cfc05:       mov    %rcx,0x50(%rsp)
    0.00 :   1cfc0a:       addr32 callq 1638a0 <PyDict_SetItem>
    0.00 :   1cfc10:       test   %eax,%eax
    0.00 :   1cfc12:       jne    f1897 <_PyEval_EvalFrameDefault.cold.2897+0x132a>
    0.00 :   1cfc18:       mov    0x50(%rsp),%rcx
    0.00 :   1cfc1d:       mov    0x40(%rsp),%rdi
    0.00 :   1cfc22:       mov    0x58(%rsp),%r9d
    0.00 :   1cfc27:       add    $0x8,%rcx
    0.00 :   1cfc2b:       sub    $0x1,%rbx
    0.00 :   1cfc2f:       jne    1cfbee <_PyEval_EvalFrameDefault+0x2b9e>
    0.00 :   1cfc31:       mov    -0x8(%rbp),%rdi
    0.00 :   1cfc35:       lea    -0x8(%rbp),%rbx
    0.00 :   1cfc39:       subq   $0x1,(%rdi)
    0.00 :   1cfc3d:       je     f12f4 <_PyEval_EvalFrameDefault.cold.2897+0xd87>
    0.00 :   1cfc43:       lea    -0x1(%r9),%ebp
    0.00 :   1cfc47:       test   %r9d,%r9d
    0.00 :   1cfc4a:       je     1d2fb1 <_PyEval_EvalFrameDefault+0x5f61>
    0.00 :   1cfc50:       mov    -0x8(%rbx),%rdi
    0.00 :   1cfc54:       lea    -0x8(%rbx),%rsi
    0.00 :   1cfc58:       subq   $0x1,(%rdi)
    0.00 :   1cfc5c:       je     1cfd77 <_PyEval_EvalFrameDefault+0x2d27>
    0.00 :   1cfc62:       lea    -0x2(%r9),%edx
    0.00 :   1cfc66:       test   %ebp,%ebp
    0.00 :   1cfc68:       je     1d37b7 <_PyEval_EvalFrameDefault+0x6767>
    0.00 :   1cfc6e:       mov    -0x10(%rbx),%rdi
    0.00 :   1cfc72:       lea    -0x10(%rbx),%rsi
    0.00 :   1cfc76:       subq   $0x1,(%rdi)
    0.00 :   1cfc7a:       je     f10ed <_PyEval_EvalFrameDefault.cold.2897+0xb80>
    0.00 :   1cfc80:       lea    -0x3(%r9),%ebp
    0.00 :   1cfc84:       test   %edx,%edx
    0.00 :   1cfc86:       je     1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
    0.00 :   1cfc8c:       mov    -0x18(%rbx),%rdi
    0.00 :   1cfc90:       lea    -0x18(%rbx),%rsi
    0.00 :   1cfc94:       subq   $0x1,(%rdi)
    0.00 :   1cfc98:       je     1cfd77 <_PyEval_EvalFrameDefault+0x2d27>
    0.00 :   1cfc9e:       lea    -0x4(%r9),%r11d
    0.00 :   1cfca2:       test   %ebp,%ebp
    0.00 :   1cfca4:       je     1d37b2 <_PyEval_EvalFrameDefault+0x6762>
    0.00 :   1cfcaa:       mov    -0x20(%rbx),%rdi
    0.00 :   1cfcae:       lea    -0x20(%rbx),%rsi
    0.00 :   1cfcb2:       subq   $0x1,(%rdi)
    0.00 :   1cfcb6:       je     f12ec <_PyEval_EvalFrameDefault.cold.2897+0xd7f>
    0.00 :   1cfcbc:       lea    -0x5(%r9),%ebp
    0.00 :   1cfcc0:       test   %r11d,%r11d
    0.00 :   1cfcc3:       je     1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
    0.00 :   1cfcc9:       mov    -0x28(%rbx),%rdi
    0.00 :   1cfccd:       lea    -0x28(%rbx),%rsi
    0.00 :   1cfcd1:       subq   $0x1,(%rdi)
    0.00 :   1cfcd5:       je     1cfd77 <_PyEval_EvalFrameDefault+0x2d27>
    0.00 :   1cfcdb:       lea    -0x6(%r9),%r8d
    0.00 :   1cfcdf:       test   %ebp,%ebp
    0.00 :   1cfce1:       je     1d37c1 <_PyEval_EvalFrameDefault+0x6771>
    0.00 :   1cfce7:       mov    -0x30(%rbx),%rdi
    0.00 :   1cfceb:       lea    -0x30(%rbx),%rsi
    0.00 :   1cfcef:       subq   $0x1,(%rdi)
    0.00 :   1cfcf3:       je     f1259 <_PyEval_EvalFrameDefault.cold.2897+0xcec>
    0.00 :   1cfcf9:       lea    -0x7(%r9),%ebp
    0.00 :   1cfcfd:       test   %r8d,%r8d
    0.00 :   1cfd00:       je     1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
    0.00 :   1cfd06:       mov    -0x38(%rbx),%rdi
    0.00 :   1cfd0a:       lea    -0x38(%rbx),%rsi
    0.00 :   1cfd0e:       subq   $0x1,(%rdi)
    0.00 :   1cfd12:       je     1cfd77 <_PyEval_EvalFrameDefault+0x2d27>
    0.00 :   1cfd14:       lea    -0x8(%r9),%eax
    0.00 :   1cfd18:       test   %ebp,%ebp
    0.00 :   1cfd1a:       je     1d37bc <_PyEval_EvalFrameDefault+0x676c>
    0.00 :   1cfd20:       mov    -0x40(%rbx),%rdi
    0.00 :   1cfd24:       lea    -0x40(%rbx),%rsi
    0.00 :   1cfd28:       subq   $0x1,(%rdi)
    0.00 :   1cfd2c:       je     f130a <_PyEval_EvalFrameDefault.cold.2897+0xd9d>
    0.00 :   1cfd32:       lea    -0x9(%r9),%ebp
    0.00 :   1cfd36:       test   %eax,%eax
    0.00 :   1cfd38:       je     1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
    0.00 :   1cfd3e:       mov    -0x48(%rbx),%rdi
    0.00 :   1cfd42:       lea    -0x48(%rbx),%rsi
    0.00 :   1cfd46:       subq   $0x1,(%rdi)
    0.00 :   1cfd4a:       je     1cfd77 <_PyEval_EvalFrameDefault+0x2d27>
    0.00 :   1cfd4c:       sub    $0xa,%r9d
    0.00 :   1cfd50:       mov    %r9d,%ebp
    0.00 :   1cfd53:       cmp    $0xffffffff,%r9d
    0.00 :   1cfd57:       je     1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
    0.00 :   1cfd5d:       sub    $0x8,%rsi
    0.00 :   1cfd61:       mov    (%rsi),%rdi
    0.00 :   1cfd64:       sub    $0x1,%r9d
    0.00 :   1cfd68:       mov    (%rdi),%r11
    0.00 :   1cfd6b:       lea    -0x1(%r11),%rax
    0.00 :   1cfd6f:       mov    %rax,(%rdi)
    0.00 :   1cfd72:       test   %rax,%rax
    0.00 :   1cfd75:       jne    1cfd50 <_PyEval_EvalFrameDefault+0x2d00>
    0.00 :   1cfd77:       mov    %rsi,0x40(%rsp)
    0.00 :   1cfd7c:       mov    0x8(%rdi),%rsi
    0.00 :   1cfd80:       callq  *0x30(%rsi)
    0.00 :   1cfd83:       mov    %ebp,%r9d
    0.00 :   1cfd86:       mov    0x40(%rsp),%rbx
    0.00 :   1cfd8b:       jmpq   1cfc43 <_PyEval_EvalFrameDefault+0x2bf3>
    0.00 :   1cfd90:       mov    %r9d,%r8d
    0.00 :   1cfd93:       xor    %r15d,%r15d
    0.00 :   1cfd96:       mov    %rbp,0x40(%rsp)
    0.00 :   1cfd9b:       and    $0x3,%r8d
    0.00 :   1cfd9f:       and    $0x4,%r9d
    0.00 :   1cfda3:       jne    1d3ca6 <_PyEval_EvalFrameDefault+0x6c56>
    0.00 :   1cfda9:       mov    0x40(%rsp),%rsi
    0.00 :   1cfdae:       lea    -0x8(%rsi),%rbp
    0.00 :   1cfdb2:       mov    -0x8(%rsi),%rbx
    0.00 :   1cfdb6:       cmp    $0x2,%r8d
    0.00 :   1cfdba:       je     1d3c7f <_PyEval_EvalFrameDefault+0x6c2f>
    0.00 :   1cfdc0:       cmp    $0x3,%r8d
    0.00 :   1cfdc4:       je     f0fc5 <_PyEval_EvalFrameDefault.cold.2897+0xa58>
    0.00 :   1cfdca:       cmp    $0x1,%r8d
    0.00 :   1cfdce:       je     f0fb9 <_PyEval_EvalFrameDefault.cold.2897+0xa4c>
    0.00 :   1cfdd4:       lea    0x1772c5(%rip),%rcx        # 3470a0 <PyUnicode_Type>
    0.00 :   1cfddb:       cmp    %rcx,0x8(%rbx)
    0.00 :   1cfddf:       jne    1d3d0d <_PyEval_EvalFrameDefault+0x6cbd>
    0.00 :   1cfde5:       test   %r15,%r15
    0.00 :   1cfde8:       jne    1d3cb9 <_PyEval_EvalFrameDefault+0x6c69>
    0.00 :   1cfdee:       mov    %rbx,%rax
    0.00 :   1cfdf1:       mov    0x40(%rsp),%rbp
    0.00 :   1cfdf6:       mov    %rax,-0x8(%rbp)
    0.00 :   1cfdfa:       mov    0x17c8c8(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cfe00:       test   %edi,%edi
    0.00 :   1cfe02:       jne    f0f87 <_PyEval_EvalFrameDefault.cold.2897+0xa1a>
    0.00 :   1cfe08:       mov    0x17c8b6(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cfe0e:       mov    %r12,%r8
    0.00 :   1cfe11:       sub    0x8(%rsp),%r8
    0.00 :   1cfe16:       test   %eax,%eax
    0.00 :   1cfe18:       jne    1d3a76 <_PyEval_EvalFrameDefault+0x6a26>
    0.00 :   1cfe1e:       movzwl (%r12),%ebx
    0.00 :   1cfe23:       lea    0x112896(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cfe2a:       mov    %r8d,0x68(%r13)
    0.00 :   1cfe2e:       add    $0x2,%r12
    0.00 :   1cfe32:       movzbl %bl,%r15d
    0.00 :   1cfe36:       movzbl %bh,%esi
    0.00 :   1cfe39:       mov    %r15,%r8
    0.00 :   1cfe3c:       movslq %esi,%r9
    0.00 :   1cfe3f:       jmpq   *(%r11,%r15,8)
    0.00 :   1cfe43:       mov    0x18(%rsp),%rbx
    0.00 :   1cfe48:       movslq %r9d,%r9
    0.00 :   1cfe4b:       sub    $0x8,%rbp
    0.00 :   1cfe4f:       mov    0x0(%rbp),%r15
         :            import_name():
    0.00 :   1cfe53:       mov    0x28(%r13),%rdi
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cfe57:       mov    0x18(%rbx,%r9,8),%rsi
    0.00 :   1cfe5c:       mov    -0x8(%rbp),%rbx
    0.00 :   1cfe60:       mov    %rsi,0x40(%rsp)
         :            import_name():
    0.00 :   1cfe65:       lea    0x15d1b4(%rip),%rsi        # 32d020 <PyId___import__.15174>
    0.00 :   1cfe6c:       addr32 callq 162610 <_PyDict_GetItemId>
    0.00 :   1cfe72:       mov    %rax,%r8
    0.00 :   1cfe75:       test   %rax,%rax
    0.00 :   1cfe78:       je     f1dd2 <_PyEval_EvalFrameDefault.cold.2897+0x1865>
    0.00 :   1cfe7e:       mov    0x17cb43(%rip),%rdx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1cfe85:       mov    0x10(%rdx),%rax
    0.00 :   1cfe89:       cmp    0x1c8(%rax),%r8
    0.00 :   1cfe90:       jne    f1d40 <_PyEval_EvalFrameDefault.cold.2897+0x17d3>
    0.00 :   1cfe96:       mov    %rbx,%rdi
    0.00 :   1cfe99:       addr32 callq 12f0c0 <_PyLong_AsInt>
    0.00 :   1cfe9f:       mov    %eax,%r8d
    0.00 :   1cfea2:       cmp    $0xffffffff,%eax
    0.00 :   1cfea5:       je     f1d21 <_PyEval_EvalFrameDefault.cold.2897+0x17b4>
    0.00 :   1cfeab:       mov    0x38(%r13),%rax
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cfeaf:       lea    0x1790ba(%rip),%rdx        # 348f70 <_Py_NoneStruct>
         :            import_name():
    0.00 :   1cfeb6:       mov    0x30(%r13),%rsi
    0.00 :   1cfeba:       mov    %r15,%rcx
    0.00 :   1cfebd:       mov    0x40(%rsp),%rdi
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cfec2:       test   %rax,%rax
    0.00 :   1cfec5:       cmovne %rax,%rdx
         :            import_name():
    0.00 :   1cfec9:       addr32 callq 11e1f0 <PyImport_ImportModuleLevelObject>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1cfecf:       subq   $0x1,(%rbx)
    0.00 :   1cfed3:       je     f1d07 <_PyEval_EvalFrameDefault.cold.2897+0x179a>
    0.00 :   1cfed9:       subq   $0x1,(%r15)
    0.00 :   1cfedd:       je     f1bf3 <_PyEval_EvalFrameDefault.cold.2897+0x1686>
    0.00 :   1cfee3:       mov    %rax,-0x8(%rbp)
    0.00 :   1cfee7:       test   %rax,%rax
    0.00 :   1cfeea:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1cfef0:       mov    0x17c7d1(%rip),%r15d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cfef7:       test   %r15d,%r15d
    0.00 :   1cfefa:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1cff00:       mov    0x17c7be(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cff06:       mov    %r12,%rdx
    0.00 :   1cff09:       sub    0x8(%rsp),%rdx
    0.00 :   1cff0e:       test   %eax,%eax
    0.00 :   1cff10:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1cff16:       movzwl (%r12),%ecx
    0.00 :   1cff1b:       lea    0x11279e(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cff22:       mov    %edx,0x68(%r13)
    0.00 :   1cff26:       add    $0x2,%r12
    0.00 :   1cff2a:       movzbl %cl,%r11d
    0.00 :   1cff2e:       movzbl %ch,%edi
    0.00 :   1cff31:       mov    %r11,%r8
    0.00 :   1cff34:       movslq %edi,%r9
    0.00 :   1cff37:       jmpq   *(%r10,%r11,8)
    0.00 :   1cff3b:       mov    %r9d,%edx
    0.00 :   1cff3e:       movzbl %r9b,%esi
    0.00 :   1cff42:       sub    $0x8,%rbp
    0.00 :   1cff46:       mov    0x0(%rbp),%rbx
    0.00 :   1cff4a:       sar    $0x8,%edx
    0.00 :   1cff4d:       lea    0x1(%rsi,%rdx,1),%eax
    0.00 :   1cff51:       mov    %rbx,%rdi
    0.00 :   1cff54:       cltq
    0.00 :   1cff56:       lea    0x0(%rbp,%rax,8),%r15
    0.00 :   1cff5b:       mov    %r15,%rcx
    0.00 :   1cff5e:       callq  1b29d0 <unpack_iterable>
    0.00 :   1cff63:       mov    (%rbx),%r8
    0.00 :   1cff66:       test   %eax,%eax
    0.00 :   1cff68:       je     f10fc <_PyEval_EvalFrameDefault.cold.2897+0xb8f>
    0.00 :   1cff6e:       sub    $0x1,%r8
    0.00 :   1cff72:       mov    %r8,(%rbx)
    0.00 :   1cff75:       test   %r8,%r8
    0.00 :   1cff78:       je     1d3819 <_PyEval_EvalFrameDefault+0x67c9>
    0.00 :   1cff7e:       mov    0x17c743(%rip),%r10d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1cff85:       test   %r10d,%r10d
    0.00 :   1cff88:       jne    f10f4 <_PyEval_EvalFrameDefault.cold.2897+0xb87>
    0.00 :   1cff8e:       mov    0x17c730(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1cff94:       mov    %r12,%rcx
    0.00 :   1cff97:       sub    0x8(%rsp),%rcx
    0.00 :   1cff9c:       test   %eax,%eax
    0.00 :   1cff9e:       jne    1d3811 <_PyEval_EvalFrameDefault+0x67c1>
    0.00 :   1cffa4:       movzwl (%r12),%ebx
    0.00 :   1cffa9:       mov    %ecx,0x68(%r13)
    0.00 :   1cffad:       add    $0x2,%r12
    0.00 :   1cffb1:       mov    %r15,%rbp
    0.00 :   1cffb4:       lea    0x112705(%rip),%rdx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1cffbb:       movzbl %bl,%esi
    0.00 :   1cffbe:       movzbl %bh,%edi
    0.00 :   1cffc1:       mov    (%rdx,%rsi,8),%r11
    0.00 :   1cffc5:       mov    %rsi,%r8
    0.00 :   1cffc8:       movslq %edi,%r9
    0.00 :   1cffcb:       jmpq   *%r11
    0.00 :   1cffce:       mov    0x28(%r13),%rdi
    0.00 :   1cffd2:       lea    0x17a327(%rip),%r8        # 34a300 <PyDict_Type>
    0.00 :   1cffd9:       cmp    %r8,0x8(%rdi)
    0.00 :   1cffdd:       jne    f216d <_PyEval_EvalFrameDefault.cold.2897+0x1c00>
    0.00 :   1cffe3:       lea    0x15cf76(%rip),%rsi        # 32cf60 <PyId___build_class__.13935>
    0.00 :   1cffea:       addr32 callq 162610 <_PyDict_GetItemId>
    0.00 :   1cfff0:       test   %rax,%rax
    0.00 :   1cfff3:       je     f2154 <_PyEval_EvalFrameDefault.cold.2897+0x1be7>
    0.00 :   1cfff9:       addq   $0x1,(%rax)
    0.00 :   1cfffd:       mov    %rbp,%rsi
    0.00 :   1d0000:       add    $0x8,%rbp
    0.00 :   1d0004:       mov    %rax,(%rsi)
    0.00 :   1d0007:       mov    0x17c6bb(%rip),%edx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d000d:       test   %edx,%edx
    0.00 :   1d000f:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d0015:       mov    0x17c6a9(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d001b:       mov    %r12,%r9
    0.00 :   1d001e:       sub    0x8(%rsp),%r9
    0.00 :   1d0023:       test   %eax,%eax
    0.00 :   1d0025:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d002b:       movzwl (%r12),%ebx
    0.00 :   1d0030:       lea    0x112689(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0037:       mov    %r9d,0x68(%r13)
    0.00 :   1d003b:       add    $0x2,%r12
    0.00 :   1d003f:       movzbl %bl,%r15d
    0.00 :   1d0043:       movzbl %bh,%edi
    0.00 :   1d0046:       mov    %r15,%r8
    0.00 :   1d0049:       movslq %edi,%r9
    0.00 :   1d004c:       jmpq   *(%r10,%r15,8)
    0.00 :   1d0050:       mov    -0x8(%rbp),%rbx
    0.00 :   1d0054:       lea    0x16cda5(%rip),%rsi        # 33ce00 <PyCoro_Type>
    0.00 :   1d005b:       mov    0x8(%rbx),%r8
    0.00 :   1d005f:       cmp    %rsi,%r8
    0.00 :   1d0062:       je     1d3e51 <_PyEval_EvalFrameDefault+0x6e01>
    0.00 :   1d0068:       lea    0x16cbf1(%rip),%rdi        # 33cc60 <PyGen_Type>
    0.00 :   1d006f:       cmp    %rdi,%r8
    0.00 :   1d0072:       jne    1d3c51 <_PyEval_EvalFrameDefault+0x6c01>
    0.00 :   1d0078:       mov    0x17c649(%rip),%r11d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d007f:       test   %r11d,%r11d
    0.00 :   1d0082:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d0088:       mov    0x17c636(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d008e:       mov    %r12,%rcx
    0.00 :   1d0091:       sub    0x8(%rsp),%rcx
    0.00 :   1d0096:       test   %eax,%eax
    0.00 :   1d0098:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d009e:       movzwl (%r12),%ebx
    0.00 :   1d00a3:       lea    0x112616(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d00aa:       mov    %ecx,0x68(%r13)
    0.00 :   1d00ae:       add    $0x2,%r12
    0.00 :   1d00b2:       movzbl %bl,%edx
    0.00 :   1d00b5:       movzbl %bh,%esi
    0.00 :   1d00b8:       mov    %rdx,%r8
    0.00 :   1d00bb:       movslq %esi,%r9
    0.00 :   1d00be:       jmpq   *(%r10,%rdx,8)
    0.00 :   1d00c2:       sub    $0x8,%rbp
    0.00 :   1d00c6:       mov    -0x8(%rbp),%rbx
    0.00 :   1d00ca:       mov    0x0(%rbp),%r15
    0.00 :   1d00ce:       mov    %rbx,%rdi
    0.00 :   1d00d1:       mov    %rbx,0x40(%rsp)
    0.00 :   1d00d6:       mov    %r15,%rsi
    0.00 :   1d00d9:       addr32 callq 12d580 <PyNumber_InPlaceXor>
    0.00 :   1d00df:       mov    0x40(%rsp),%r9
    0.00 :   1d00e4:       mov    %rax,%rbx
    0.00 :   1d00e7:       subq   $0x1,(%r9)
    0.00 :   1d00eb:       je     f289a <_PyEval_EvalFrameDefault.cold.2897+0x232d>
    0.00 :   1d00f1:       subq   $0x1,(%r15)
    0.00 :   1d00f5:       jne    1d0101 <_PyEval_EvalFrameDefault+0x30b1>
    0.00 :   1d00f7:       mov    0x8(%r15),%rax
    0.00 :   1d00fb:       mov    %r15,%rdi
    0.00 :   1d00fe:       callq  *0x30(%rax)
    0.00 :   1d0101:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d0105:       test   %rbx,%rbx
    0.00 :   1d0108:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d010e:       mov    0x17c5b3(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d0115:       test   %r8d,%r8d
    0.00 :   1d0118:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d011e:       mov    0x17c5a0(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d0124:       mov    %r12,%rdx
    0.00 :   1d0127:       sub    0x8(%rsp),%rdx
    0.00 :   1d012c:       test   %eax,%eax
    0.00 :   1d012e:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d0134:       movzwl (%r12),%ecx
    0.00 :   1d0139:       lea    0x112580(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0140:       mov    %edx,0x68(%r13)
    0.00 :   1d0144:       add    $0x2,%r12
    0.00 :   1d0148:       movzbl %cl,%edi
    0.00 :   1d014b:       movzbl %ch,%esi
    0.00 :   1d014e:       mov    %rdi,%r8
    0.00 :   1d0151:       movslq %esi,%r9
    0.00 :   1d0154:       jmpq   *(%r10,%rdi,8)
    0.00 :   1d0158:       sub    $0x8,%rbp
    0.00 :   1d015c:       mov    -0x8(%rbp),%rbx
    0.00 :   1d0160:       mov    0x0(%rbp),%r15
    0.00 :   1d0164:       mov    %rbx,%rdi
    0.00 :   1d0167:       mov    %rbx,0x40(%rsp)
    0.00 :   1d016c:       mov    %r15,%rsi
    0.00 :   1d016f:       addr32 callq 12d160 <PyNumber_InPlaceOr>
    0.00 :   1d0175:       mov    0x40(%rsp),%r9
    0.00 :   1d017a:       mov    %rax,%rbx
    0.00 :   1d017d:       subq   $0x1,(%r9)
    0.00 :   1d0181:       je     f14eb <_PyEval_EvalFrameDefault.cold.2897+0xf7e>
    0.00 :   1d0187:       subq   $0x1,(%r15)
    0.00 :   1d018b:       je     1d4225 <_PyEval_EvalFrameDefault+0x71d5>
    0.00 :   1d0191:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d0195:       test   %rbx,%rbx
    0.00 :   1d0198:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d019e:       mov    0x17c523(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d01a5:       test   %r8d,%r8d
    0.00 :   1d01a8:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d01ae:       mov    0x17c510(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d01b4:       mov    %r12,%rdx
    0.00 :   1d01b7:       sub    0x8(%rsp),%rdx
    0.00 :   1d01bc:       test   %eax,%eax
    0.00 :   1d01be:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d01c4:       movzwl (%r12),%ecx
    0.00 :   1d01c9:       lea    0x1124f0(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d01d0:       mov    %edx,0x68(%r13)
    0.00 :   1d01d4:       add    $0x2,%r12
    0.00 :   1d01d8:       movzbl %cl,%edi
    0.00 :   1d01db:       movzbl %ch,%esi
    0.00 :   1d01de:       mov    %rdi,%r8
    0.00 :   1d01e1:       movslq %esi,%r9
    0.00 :   1d01e4:       jmpq   *(%r10,%rdi,8)
    0.00 :   1d01e8:       sub    $0x8,%rbp
    0.00 :   1d01ec:       mov    -0x8(%rbp),%rbx
    0.00 :   1d01f0:       mov    0x0(%rbp),%r15
    0.00 :   1d01f4:       mov    %rbx,%rdi
    0.00 :   1d01f7:       mov    %rbx,0x40(%rsp)
    0.00 :   1d01fc:       mov    %r15,%rsi
    0.00 :   1d01ff:       addr32 callq 12d510 <PyNumber_InPlaceFloorDivide>
    0.00 :   1d0205:       mov    0x40(%rsp),%r9
    0.00 :   1d020a:       mov    %rax,%rbx
    0.00 :   1d020d:       subq   $0x1,(%r9)
    0.00 :   1d0211:       je     f2144 <_PyEval_EvalFrameDefault.cold.2897+0x1bd7>
    0.00 :   1d0217:       subq   $0x1,(%r15)
    0.00 :   1d021b:       je     f2135 <_PyEval_EvalFrameDefault.cold.2897+0x1bc8>
    0.00 :   1d0221:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d0225:       test   %rbx,%rbx
    0.00 :   1d0228:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d022e:       mov    0x17c493(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d0235:       test   %r8d,%r8d
    0.00 :   1d0238:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d023e:       mov    0x17c480(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d0244:       mov    %r12,%rdx
    0.00 :   1d0247:       sub    0x8(%rsp),%rdx
    0.00 :   1d024c:       test   %eax,%eax
    0.00 :   1d024e:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d0254:       movzwl (%r12),%ecx
    0.00 :   1d0259:       lea    0x112460(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0260:       mov    %edx,0x68(%r13)
    0.00 :   1d0264:       add    $0x2,%r12
    0.00 :   1d0268:       movzbl %cl,%edi
    0.00 :   1d026b:       movzbl %ch,%esi
    0.00 :   1d026e:       mov    %rdi,%r8
    0.00 :   1d0271:       movslq %esi,%r9
    0.00 :   1d0274:       jmpq   *(%r10,%rdi,8)
    0.00 :   1d0278:       cmp    $0x95,%r8d
    0.00 :   1d027f:       mov    %r9d,0x40(%rsp)
    0.00 :   1d0284:       setne  0x58(%rsp)
    0.00 :   1d0289:       xor    %edi,%edi
    0.00 :   1d028b:       mov    %r8d,0x6c(%rsp)
    0.00 :   1d0290:       addr32 callq 137580 <PyList_New>
    0.00 :   1d0296:       mov    %rax,%r15
    0.00 :   1d0299:       test   %rax,%rax
    0.00 :   1d029c:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d02a2:       movslq 0x40(%rsp),%r11
    0.00 :   1d02a7:       mov    %r11,%r9
    0.00 :   1d02aa:       mov    %r11,0x40(%rsp)
    0.00 :   1d02af:       test   %r11,%r11
    0.00 :   1d02b2:       jle    1d0430 <_PyEval_EvalFrameDefault+0x33e0>
    0.00 :   1d02b8:       mov    %r11d,0x60(%rsp)
    0.00 :   1d02bd:       neg    %r11
    0.00 :   1d02c0:       mov    %rax,%rdi
    0.00 :   1d02c3:       shl    $0x3,%r11
    0.00 :   1d02c7:       lea    0x0(%rbp,%r11,1),%rbx
    0.00 :   1d02cc:       mov    %r11,0x50(%rsp)
    0.00 :   1d02d1:       mov    (%rbx),%rsi
    0.00 :   1d02d4:       addr32 callq 1142e0 <_PyList_Extend>
    0.00 :   1d02da:       mov    0x60(%rsp),%r9d
    0.00 :   1d02df:       mov    0x6c(%rsp),%r10d
    0.00 :   1d02e4:       test   %rax,%rax
    0.00 :   1d02e7:       je     f261e <_PyEval_EvalFrameDefault.cold.2897+0x20b1>
    0.00 :   1d02ed:       subq   $0x1,(%rax)
    0.00 :   1d02f1:       je     f0a30 <_PyEval_EvalFrameDefault.cold.2897+0x4c3>
    0.00 :   1d02f7:       cmpq   $0x1,0x40(%rsp)
    0.00 :   1d02fd:       mov    %r10d,0x6c(%rsp)
    0.00 :   1d0302:       je     1d0430 <_PyEval_EvalFrameDefault+0x33e0>
    0.00 :   1d0308:       mov    0x50(%rsp),%rdi
    0.00 :   1d030d:       mov    %r9d,0x60(%rsp)
    0.00 :   1d0312:       lea    0x8(%rbp,%rdi,1),%rbx
    0.00 :   1d0317:       mov    %r15,%rdi
    0.00 :   1d031a:       mov    (%rbx),%rsi
    0.00 :   1d031d:       addr32 callq 1142e0 <_PyList_Extend>
    0.00 :   1d0323:       mov    0x60(%rsp),%r9d
    0.00 :   1d0328:       mov    0x6c(%rsp),%r10d
    0.00 :   1d032d:       test   %rax,%rax
    0.00 :   1d0330:       je     f261e <_PyEval_EvalFrameDefault.cold.2897+0x20b1>
    0.00 :   1d0336:       subq   $0x1,(%rax)
    0.00 :   1d033a:       je     f0a0c <_PyEval_EvalFrameDefault.cold.2897+0x49f>
    0.00 :   1d0340:       cmpq   $0x2,0x40(%rsp)
    0.00 :   1d0346:       mov    %r10d,0x6c(%rsp)
    0.00 :   1d034b:       je     1d0430 <_PyEval_EvalFrameDefault+0x33e0>
    0.00 :   1d0351:       mov    0x50(%rsp),%rax
    0.00 :   1d0356:       mov    %r9d,0x60(%rsp)
    0.00 :   1d035b:       mov    %r15,%rdi
    0.00 :   1d035e:       lea    0x10(%rbp,%rax,1),%rbx
    0.00 :   1d0363:       mov    (%rbx),%rsi
    0.00 :   1d0366:       addr32 callq 1142e0 <_PyList_Extend>
    0.00 :   1d036c:       mov    0x60(%rsp),%r9d
    0.00 :   1d0371:       mov    0x6c(%rsp),%r10d
    0.00 :   1d0376:       test   %rax,%rax
    0.00 :   1d0379:       je     f261e <_PyEval_EvalFrameDefault.cold.2897+0x20b1>
    0.00 :   1d037f:       subq   $0x1,(%rax)
    0.00 :   1d0383:       je     f0a87 <_PyEval_EvalFrameDefault.cold.2897+0x51a>
    0.00 :   1d0389:       cmpq   $0x3,0x40(%rsp)
    0.00 :   1d038f:       mov    %r10d,0x6c(%rsp)
    0.00 :   1d0394:       je     1d0430 <_PyEval_EvalFrameDefault+0x33e0>
    0.00 :   1d039a:       mov    0x50(%rsp),%rbx
    0.00 :   1d039f:       mov    %r9d,0x60(%rsp)
    0.00 :   1d03a4:       mov    %r15,%rdi
    0.00 :   1d03a7:       lea    0x18(%rbp,%rbx,1),%rbx
    0.00 :   1d03ac:       mov    (%rbx),%rsi
    0.00 :   1d03af:       addr32 callq 1142e0 <_PyList_Extend>
    0.00 :   1d03b5:       mov    0x60(%rsp),%r9d
    0.00 :   1d03ba:       mov    0x6c(%rsp),%r10d
    0.00 :   1d03bf:       test   %rax,%rax
    0.00 :   1d03c2:       je     f261e <_PyEval_EvalFrameDefault.cold.2897+0x20b1>
    0.00 :   1d03c8:       subq   $0x1,(%rax)
    0.00 :   1d03cc:       je     f0a64 <_PyEval_EvalFrameDefault.cold.2897+0x4f7>
    0.00 :   1d03d2:       mov    0x40(%rsp),%rsi
    0.00 :   1d03d7:       cmp    $0x4,%rsi
    0.00 :   1d03db:       je     1d0430 <_PyEval_EvalFrameDefault+0x33e0>
    0.00 :   1d03dd:       sub    $0x4,%rsi
    0.00 :   1d03e1:       mov    %r10d,0x50(%rsp)
    0.00 :   1d03e6:       mov    %r9d,%ebx
    0.00 :   1d03e9:       imul   $0xfffffffffffffff8,%rsi,%rcx
    0.00 :   1d03ed:       mov    %rcx,0x40(%rsp)
    0.00 :   1d03f2:       mov    0x40(%rsp),%r11
    0.00 :   1d03f7:       mov    %r15,%rdi
    0.00 :   1d03fa:       lea    0x0(%rbp,%r11,1),%r9
    0.00 :   1d03ff:       mov    (%r9),%rsi
    0.00 :   1d0402:       mov    %r9,0x60(%rsp)
    0.00 :   1d0407:       addr32 callq 1142e0 <_PyList_Extend>
    0.00 :   1d040d:       mov    0x60(%rsp),%rdi
    0.00 :   1d0412:       test   %rax,%rax
    0.00 :   1d0415:       je     1d4891 <_PyEval_EvalFrameDefault+0x7841>
    0.00 :   1d041b:       subq   $0x1,(%rax)
    0.00 :   1d041f:       je     f0a54 <_PyEval_EvalFrameDefault.cold.2897+0x4e7>
    0.00 :   1d0425:       addq   $0x8,0x40(%rsp)
    0.00 :   1d042b:       jne    1d03f2 <_PyEval_EvalFrameDefault+0x33a2>
    0.00 :   1d042d:       mov    %ebx,%r9d
    0.00 :   1d0430:       cmpb   $0x0,0x58(%rsp)
    0.00 :   1d0435:       je     1d046e <_PyEval_EvalFrameDefault+0x341e>
    0.00 :   1d0437:       mov    %r9d,0x40(%rsp)
    0.00 :   1d043c:       mov    %r15,%rdi
    0.00 :   1d043f:       addr32 callq 127870 <PyList_AsTuple>
    0.00 :   1d0445:       subq   $0x1,(%r15)
    0.00 :   1d0449:       mov    0x40(%rsp),%r9d
    0.00 :   1d044e:       mov    %rax,%rbx
    0.00 :   1d0451:       jne    1d0462 <_PyEval_EvalFrameDefault+0x3412>
    0.00 :   1d0453:       mov    0x8(%r15),%rax
    0.00 :   1d0457:       mov    %r15,%rdi
    0.00 :   1d045a:       callq  *0x30(%rax)
    0.00 :   1d045d:       mov    0x40(%rsp),%r9d
    0.00 :   1d0462:       test   %rbx,%rbx
    0.00 :   1d0465:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d046b:       mov    %rbx,%r15
    0.00 :   1d046e:       test   %r9d,%r9d
    0.00 :   1d0471:       je     1d0544 <_PyEval_EvalFrameDefault+0x34f4>
    0.00 :   1d0477:       mov    -0x8(%rbp),%rdi
    0.00 :   1d047b:       subq   $0x1,(%rdi)
    0.00 :   1d047f:       jne    1d0493 <_PyEval_EvalFrameDefault+0x3443>
    0.00 :   1d0481:       mov    0x8(%rdi),%r8
    0.00 :   1d0485:       mov    %r9d,0x40(%rsp)
    0.00 :   1d048a:       callq  *0x30(%r8)
    0.00 :   1d048e:       mov    0x40(%rsp),%r9d
    0.00 :   1d0493:       mov    %r9d,%ebx
    0.00 :   1d0496:       sub    $0x1,%ebx
    0.00 :   1d0499:       je     1d0544 <_PyEval_EvalFrameDefault+0x34f4>
    0.00 :   1d049f:       mov    -0x10(%rbp),%rdi
    0.00 :   1d04a3:       subq   $0x1,(%rdi)
    0.00 :   1d04a7:       jne    1d04ba <_PyEval_EvalFrameDefault+0x346a>
    0.00 :   1d04a9:       mov    0x8(%rdi),%rdx
    0.00 :   1d04ad:       mov    %r9d,0x40(%rsp)
    0.00 :   1d04b2:       callq  *0x30(%rdx)
    0.00 :   1d04b5:       mov    0x40(%rsp),%r9d
    0.00 :   1d04ba:       sub    $0x1,%ebx
    0.00 :   1d04bd:       je     1d0544 <_PyEval_EvalFrameDefault+0x34f4>
    0.00 :   1d04c3:       mov    -0x18(%rbp),%rdi
    0.00 :   1d04c7:       subq   $0x1,(%rdi)
    0.00 :   1d04cb:       jne    1d04de <_PyEval_EvalFrameDefault+0x348e>
    0.00 :   1d04cd:       mov    0x8(%rdi),%rsi
    0.00 :   1d04d1:       mov    %r9d,0x40(%rsp)
    0.00 :   1d04d6:       callq  *0x30(%rsi)
    0.00 :   1d04d9:       mov    0x40(%rsp),%r9d
    0.00 :   1d04de:       sub    $0x1,%ebx
    0.00 :   1d04e1:       mov    %ebx,0x40(%rsp)
    0.00 :   1d04e5:       je     1d0544 <_PyEval_EvalFrameDefault+0x34f4>
    0.00 :   1d04e7:       mov    -0x20(%rbp),%rdi
    0.00 :   1d04eb:       lea    -0x20(%rbp),%rbx
    0.00 :   1d04ef:       subq   $0x1,(%rdi)
    0.00 :   1d04f3:       jne    1d0506 <_PyEval_EvalFrameDefault+0x34b6>
    0.00 :   1d04f5:       mov    0x8(%rdi),%rcx
    0.00 :   1d04f9:       mov    %r9d,0x50(%rsp)
    0.00 :   1d04fe:       callq  *0x30(%rcx)
    0.00 :   1d0501:       mov    0x50(%rsp),%r9d
    0.00 :   1d0506:       cmpl   $0x1,0x40(%rsp)
    0.00 :   1d050b:       je     1d0544 <_PyEval_EvalFrameDefault+0x34f4>
    0.00 :   1d050d:       lea    -0x5(%r9),%r11d
    0.00 :   1d0511:       imul   $0xfffffffffffffff8,%r11,%rdi
    0.00 :   1d0515:       lea    -0x28(%rbp,%rdi,1),%r10
    0.00 :   1d051a:       mov    %r10,0x40(%rsp)
    0.00 :   1d051f:       sub    $0x8,%rbx
    0.00 :   1d0523:       mov    (%rbx),%rdi
    0.00 :   1d0526:       subq   $0x1,(%rdi)
    0.00 :   1d052a:       jne    1d053d <_PyEval_EvalFrameDefault+0x34ed>
    0.00 :   1d052c:       mov    0x8(%rdi),%rax
    0.00 :   1d0530:       mov    %r9d,0x50(%rsp)
    0.00 :   1d0535:       callq  *0x30(%rax)
    0.00 :   1d0538:       mov    0x50(%rsp),%r9d
    0.00 :   1d053d:       cmp    0x40(%rsp),%rbx
    0.00 :   1d0542:       jne    1d051f <_PyEval_EvalFrameDefault+0x34cf>
    0.00 :   1d0544:       mov    %r9d,%eax
    0.00 :   1d0547:       mov    %rax,%r9
    0.00 :   1d054a:       neg    %r9
    0.00 :   1d054d:       lea    0x0(%rbp,%r9,8),%r8
    0.00 :   1d0552:       mov    %r15,(%r8)
    0.00 :   1d0555:       mov    0x17c16c(%rip),%r15d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d055c:       lea    0x8(%r8),%rbp
    0.00 :   1d0560:       test   %r15d,%r15d
    0.00 :   1d0563:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d0569:       mov    0x17c155(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d056f:       mov    %r12,%rdx
    0.00 :   1d0572:       sub    0x8(%rsp),%rdx
    0.00 :   1d0577:       test   %eax,%eax
    0.00 :   1d0579:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d057f:       movzwl (%r12),%ebx
    0.00 :   1d0584:       lea    0x112135(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d058b:       mov    %edx,0x68(%r13)
    0.00 :   1d058f:       add    $0x2,%r12
    0.00 :   1d0593:       movzbl %bl,%esi
    0.00 :   1d0596:       movzbl %bh,%ecx
    0.00 :   1d0599:       mov    %rsi,%r8
    0.00 :   1d059c:       movslq %ecx,%r9
    0.00 :   1d059f:       jmpq   *(%r11,%rsi,8)
    0.00 :   1d05a3:       sub    $0x8,%rbp
    0.00 :   1d05a7:       mov    -0x8(%rbp),%rax
    0.00 :   1d05ab:       mov    0x0(%rbp),%r15
    0.00 :   1d05af:       mov    %rax,%rdi
    0.00 :   1d05b2:       mov    %r15,%rsi
    0.00 :   1d05b5:       mov    %rax,0x40(%rsp)
    0.00 :   1d05ba:       addr32 callq 12d550 <PyNumber_Xor>
    0.00 :   1d05c0:       mov    0x40(%rsp),%r8
    0.00 :   1d05c5:       mov    %rax,%rbx
    0.00 :   1d05c8:       subq   $0x1,(%r8)
    0.00 :   1d05cc:       je     1d3426 <_PyEval_EvalFrameDefault+0x63d6>
    0.00 :   1d05d2:       subq   $0x1,(%r15)
    0.00 :   1d05d6:       je     1d3417 <_PyEval_EvalFrameDefault+0x63c7>
    0.00 :   1d05dc:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d05e0:       test   %rbx,%rbx
    0.00 :   1d05e3:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d05e9:       mov    0x17c0d9(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d05ef:       test   %edi,%edi
    0.00 :   1d05f1:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d05f7:       mov    0x17c0c7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d05fd:       mov    %r12,%r9
    0.00 :   1d0600:       sub    0x8(%rsp),%r9
    0.00 :   1d0605:       test   %eax,%eax
    0.00 :   1d0607:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d060d:       movzwl (%r12),%ecx
    0.00 :   1d0612:       lea    0x1120a7(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0619:       mov    %r9d,0x68(%r13)
    0.00 :   1d061d:       add    $0x2,%r12
    0.00 :   1d0621:       movzbl %cl,%r10d
    0.00 :   1d0625:       movzbl %ch,%ebx
    0.00 :   1d0628:       mov    %r10,%r8
    0.00 :   1d062b:       movslq %ebx,%r9
    0.00 :   1d062e:       jmpq   *(%r11,%r10,8)
    0.00 :   1d0632:       mov    0x18(%rsp),%rax
    0.00 :   1d0637:       movslq %r9d,%r8
    0.00 :   1d063a:       mov    -0x8(%rbp),%rdi
         :            import_from():
    0.00 :   1d063e:       lea    0x98(%rsp),%rdx
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d0646:       mov    0x18(%rax,%r8,8),%r15
    0.00 :   1d064b:       mov    %rdi,0x40(%rsp)
         :            import_from():
    0.00 :   1d0650:       mov    %r15,%rsi
    0.00 :   1d0653:       addr32 callq 126dd0 <_PyObject_LookupAttr>
    0.00 :   1d0659:       test   %eax,%eax
    0.00 :   1d065b:       je     1d46cb <_PyEval_EvalFrameDefault+0x767b>
    0.00 :   1d0661:       mov    0x98(%rsp),%rbx
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d0669:       mov    %rbp,%rdi
    0.00 :   1d066c:       add    $0x8,%rbp
    0.00 :   1d0670:       mov    %rbx,(%rdi)
    0.00 :   1d0673:       test   %rbx,%rbx
    0.00 :   1d0676:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d067c:       mov    0x17c045(%rip),%r11d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d0683:       test   %r11d,%r11d
    0.00 :   1d0686:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d068c:       mov    0x17c032(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d0692:       mov    %r12,%r10
    0.00 :   1d0695:       sub    0x8(%rsp),%r10
    0.00 :   1d069a:       test   %eax,%eax
    0.00 :   1d069c:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d06a2:       movzwl (%r12),%ecx
    0.00 :   1d06a7:       lea    0x112012(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d06ae:       mov    %r10d,0x68(%r13)
    0.00 :   1d06b2:       add    $0x2,%r12
    0.00 :   1d06b6:       movzbl %cl,%r15d
    0.00 :   1d06ba:       movzbl %ch,%edx
    0.00 :   1d06bd:       mov    %r15,%r8
    0.00 :   1d06c0:       movslq %edx,%r9
    0.00 :   1d06c3:       jmpq   *(%rsi,%r15,8)
    0.00 :   1d06c7:       sub    $0x8,%rbp
    0.00 :   1d06cb:       mov    -0x8(%rbp),%rbx
    0.00 :   1d06cf:       mov    0x0(%rbp),%r15
    0.00 :   1d06d3:       mov    %rbx,%rdi
    0.00 :   1d06d6:       mov    %rbx,0x40(%rsp)
    0.00 :   1d06db:       mov    %r15,%rsi
    0.00 :   1d06de:       addr32 callq 12d490 <PyNumber_InPlaceSubtract>
    0.00 :   1d06e4:       mov    0x40(%rsp),%r9
    0.00 :   1d06e9:       mov    %rax,%rbx
    0.00 :   1d06ec:       subq   $0x1,(%r9)
    0.00 :   1d06f0:       je     f0fd1 <_PyEval_EvalFrameDefault.cold.2897+0xa64>
    0.00 :   1d06f6:       subq   $0x1,(%r15)
    0.00 :   1d06fa:       je     1d3828 <_PyEval_EvalFrameDefault+0x67d8>
    0.00 :   1d0700:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d0704:       test   %rbx,%rbx
    0.00 :   1d0707:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d070d:       mov    0x17bfb4(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d0714:       test   %r8d,%r8d
    0.00 :   1d0717:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d071d:       mov    0x17bfa1(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d0723:       mov    %r12,%rdx
    0.00 :   1d0726:       sub    0x8(%rsp),%rdx
    0.00 :   1d072b:       test   %eax,%eax
    0.00 :   1d072d:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d0733:       movzwl (%r12),%ecx
    0.00 :   1d0738:       lea    0x111f81(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d073f:       mov    %edx,0x68(%r13)
    0.00 :   1d0743:       add    $0x2,%r12
    0.00 :   1d0747:       movzbl %cl,%esi
    0.00 :   1d074a:       movzbl %ch,%edi
    0.00 :   1d074d:       mov    %rsi,%r8
    0.00 :   1d0750:       movslq %edi,%r9
    0.00 :   1d0753:       jmpq   *(%r10,%rsi,8)
    0.00 :   1d0757:       mov    -0x10(%rbp),%r8
    0.00 :   1d075b:       mov    -0x8(%rbp),%r15
    0.00 :   1d075f:       neg    %r9d
    0.00 :   1d0762:       sub    $0x10,%rbp
    0.00 :   1d0766:       movslq %r9d,%rax
    0.00 :   1d0769:       mov    0x0(%rbp,%rax,8),%rdi
    0.00 :   1d076e:       mov    %r8,%rdx
    0.00 :   1d0771:       mov    %r8,0x40(%rsp)
    0.00 :   1d0776:       mov    %r15,%rsi
    0.00 :   1d0779:       addr32 callq 1638a0 <PyDict_SetItem>
    0.00 :   1d077f:       mov    0x40(%rsp),%rdi
    0.00 :   1d0784:       mov    %eax,%ebx
    0.00 :   1d0786:       subq   $0x1,(%rdi)
    0.00 :   1d078a:       je     f1a24 <_PyEval_EvalFrameDefault.cold.2897+0x14b7>
    0.00 :   1d0790:       subq   $0x1,(%r15)
    0.00 :   1d0794:       je     f1a15 <_PyEval_EvalFrameDefault.cold.2897+0x14a8>
    0.00 :   1d079a:       test   %ebx,%ebx
    0.00 :   1d079c:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d07a2:       mov    0x17bf1f(%rip),%r11d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d07a9:       test   %r11d,%r11d
    0.00 :   1d07ac:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d07b2:       mov    0x17bf0c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d07b8:       mov    %r12,%rcx
    0.00 :   1d07bb:       sub    0x8(%rsp),%rcx
    0.00 :   1d07c0:       test   %eax,%eax
    0.00 :   1d07c2:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d07c8:       movzwl (%r12),%ebx
    0.00 :   1d07cd:       lea    0x111eec(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d07d4:       mov    %ecx,0x68(%r13)
    0.00 :   1d07d8:       add    $0x2,%r12
    0.00 :   1d07dc:       movzbl %bl,%r10d
    0.00 :   1d07e0:       movzbl %bh,%edi
    0.00 :   1d07e3:       mov    %r10,%r8
    0.00 :   1d07e6:       movslq %edi,%r9
    0.00 :   1d07e9:       jmpq   *(%r15,%r10,8)
    0.00 :   1d07ed:       jmpq   1d0278 <_PyEval_EvalFrameDefault+0x3228>
    0.00 :   1d07f2:       mov    %rbp,%r8
    0.00 :   1d07f5:       xor    %r15d,%r15d
    0.00 :   1d07f8:       cmp    $0x1,%r9d
    0.00 :   1d07fc:       jne    1d4527 <_PyEval_EvalFrameDefault+0x74d7>
    0.00 :   1d0802:       mov    -0x8(%r8),%rbx
    0.00 :   1d0806:       lea    -0x8(%r8),%rbp
         :            do_raise():
    0.00 :   1d080a:       test   %rbx,%rbx
    0.00 :   1d080d:       je     1d44d0 <_PyEval_EvalFrameDefault+0x7480>
    0.00 :   1d0813:       mov    0x8(%rbx),%rcx
    0.00 :   1d0817:       mov    0xa8(%rcx),%r11
    0.00 :   1d081e:       test   $0x80000000,%r11d
    0.00 :   1d0825:       jne    1d4492 <_PyEval_EvalFrameDefault+0x7442>
    0.00 :   1d082b:       test   $0x40000000,%r11d
    0.00 :   1d0832:       je     f2590 <_PyEval_EvalFrameDefault.cold.2897+0x2023>
    0.00 :   1d0838:       addq   $0x1,(%rcx)
    0.00 :   1d083c:       mov    %rbx,%rdx
    0.00 :   1d083f:       mov    %rcx,%rbx
    0.00 :   1d0842:       test   %r15,%r15
    0.00 :   1d0845:       jne    1d443a <_PyEval_EvalFrameDefault+0x73ea>
    0.00 :   1d084b:       mov    %rdx,%rsi
    0.00 :   1d084e:       mov    %rdx,0x40(%rsp)
    0.00 :   1d0853:       mov    %rbx,%rdi
    0.00 :   1d0856:       addr32 callq 127450 <PyErr_SetObject>
    0.00 :   1d085c:       mov    0x40(%rsp),%r15
    0.00 :   1d0861:       subq   $0x1,(%r15)
    0.00 :   1d0865:       je     f255b <_PyEval_EvalFrameDefault.cold.2897+0x1fee>
    0.00 :   1d086b:       subq   $0x1,(%rbx)
    0.00 :   1d086f:       je     1d4e46 <_PyEval_EvalFrameDefault+0x7df6>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d0875:       addr32 callq 105c60 <PyErr_Occurred>
    0.00 :   1d087b:       test   %rax,%rax
    0.00 :   1d087e:       je     f1a9c <_PyEval_EvalFrameDefault.cold.2897+0x152f>
    0.00 :   1d0884:       mov    %r13,%rdi
    0.00 :   1d0887:       addr32 callq 16daf0 <PyTraceBack_Here>
    0.00 :   1d088d:       mov    0x40(%r14),%rdi
    0.00 :   1d0891:       test   %rdi,%rdi
    0.00 :   1d0894:       jne    1d461f <_PyEval_EvalFrameDefault+0x75cf>
    0.00 :   1d089a:       mov    $0x2,%ebx
    0.00 :   1d089f:       jmpq   1cd9b2 <_PyEval_EvalFrameDefault+0x962>
    0.00 :   1d08a4:       mov    0x18(%rsp),%rax
    0.00 :   1d08a9:       mov    0x38(%r13),%rdi
    0.00 :   1d08ad:       movslq %r9d,%r9
    0.00 :   1d08b0:       mov    0x18(%rax,%r9,8),%r15
    0.00 :   1d08b5:       test   %rdi,%rdi
    0.00 :   1d08b8:       je     f23bc <_PyEval_EvalFrameDefault.cold.2897+0x1e4f>
    0.00 :   1d08be:       mov    %r15,%rsi
    0.00 :   1d08c1:       addr32 callq 16a530 <PyObject_DelItem>
    0.00 :   1d08c7:       test   %eax,%eax
    0.00 :   1d08c9:       jne    f23a1 <_PyEval_EvalFrameDefault.cold.2897+0x1e34>
    0.00 :   1d08cf:       mov    0x17bdf2(%rip),%r11d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d08d6:       test   %r11d,%r11d
    0.00 :   1d08d9:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d08df:       mov    0x17bddf(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d08e5:       mov    %r12,%r8
    0.00 :   1d08e8:       sub    0x8(%rsp),%r8
    0.00 :   1d08ed:       test   %eax,%eax
    0.00 :   1d08ef:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d08f5:       movzwl (%r12),%ecx
    0.00 :   1d08fa:       lea    0x111dbf(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0901:       mov    %r8d,0x68(%r13)
    0.00 :   1d0905:       add    $0x2,%r12
    0.00 :   1d0909:       movzbl %cl,%esi
    0.00 :   1d090c:       movzbl %ch,%edx
    0.00 :   1d090f:       mov    %rsi,%r8
    0.00 :   1d0912:       movslq %edx,%r9
    0.00 :   1d0915:       jmpq   *(%rdi,%rsi,8)
    0.00 :   1d0918:       movslq %r9d,%rdi
    0.00 :   1d091b:       mov    $0x20,%ebx
    0.00 :   1d0920:       addr32 callq 13af10 <PyLong_FromLong>
    0.00 :   1d0926:       mov    %rax,0x20(%rsp)
    0.00 :   1d092b:       test   %rax,%rax
    0.00 :   1d092e:       jne    1cd9b2 <_PyEval_EvalFrameDefault+0x962>
    0.00 :   1d0934:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d0939:       sub    $0x8,%rbp
    0.00 :   1d093d:       mov    0x0(%rbp),%rbx
    0.00 :   1d0941:       mov    %r13,%rdi
    0.00 :   1d0944:       addr32 callq 16a6d0 <PyFrame_FastToLocalsWithError>
    0.00 :   1d094a:       test   %eax,%eax
    0.00 :   1d094c:       js     f22bf <_PyEval_EvalFrameDefault.cold.2897+0x1d52>
    0.00 :   1d0952:       mov    0x38(%r13),%r9
    0.00 :   1d0956:       mov    %r9,0x50(%rsp)
    0.00 :   1d095b:       test   %r9,%r9
    0.00 :   1d095e:       je     f22e1 <_PyEval_EvalFrameDefault.cold.2897+0x1d74>
         :            import_all_from():
    0.00 :   1d0964:       lea    0x90(%rsp),%rdx
    0.00 :   1d096c:       lea    0x15c68d(%rip),%rsi        # 32d000 <PyId___all__.15212>
    0.00 :   1d0973:       mov    %rbx,%rdi
    0.00 :   1d0976:       addr32 callq 126e80 <_PyObject_LookupAttrId>
    0.00 :   1d097c:       test   %eax,%eax
    0.00 :   1d097e:       js     f22d8 <_PyEval_EvalFrameDefault.cold.2897+0x1d6b>
    0.00 :   1d0984:       cmpq   $0x0,0x90(%rsp)
    0.00 :   1d098d:       jne    1d4612 <_PyEval_EvalFrameDefault+0x75c2>
    0.00 :   1d0993:       lea    0x98(%rsp),%rdx
    0.00 :   1d099b:       lea    0x15c63e(%rip),%rsi        # 32cfe0 <PyId___dict__.15213>
    0.00 :   1d09a2:       mov    %rbx,%rdi
    0.00 :   1d09a5:       addr32 callq 126e80 <_PyObject_LookupAttrId>
    0.00 :   1d09ab:       test   %eax,%eax
    0.00 :   1d09ad:       js     f22d8 <_PyEval_EvalFrameDefault.cold.2897+0x1d6b>
    0.00 :   1d09b3:       mov    0x98(%rsp),%rdi
    0.00 :   1d09bb:       test   %rdi,%rdi
    0.00 :   1d09be:       je     f2402 <_PyEval_EvalFrameDefault.cold.2897+0x1e95>
    0.00 :   1d09c4:       addr32 callq 217c50 <PyMapping_Keys>
    0.00 :   1d09ca:       mov    0x98(%rsp),%rdi
    0.00 :   1d09d2:       mov    %rax,0x90(%rsp)
    0.00 :   1d09da:       subq   $0x1,(%rdi)
    0.00 :   1d09de:       je     f241f <_PyEval_EvalFrameDefault.cold.2897+0x1eb2>
    0.00 :   1d09e4:       cmpq   $0x0,0x90(%rsp)
    0.00 :   1d09ed:       je     f22d8 <_PyEval_EvalFrameDefault.cold.2897+0x1d6b>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d09f3:       movl   $0x1,0x60(%rsp)
    0.00 :   1d09fb:       movl   $0x0,0x58(%rsp)
         :            import_all_from():
    0.00 :   1d0a03:       mov    %rbp,0x40(%rsp)
    0.00 :   1d0a08:       jmp    1d0a6f <_PyEval_EvalFrameDefault+0x3a1f>
    0.00 :   1d0a0a:       nopw   0x0(%rax,%rax,1)
    0.00 :   1d0a10:       mov    %r15,%rsi
    0.00 :   1d0a13:       mov    %rbx,%rdi
    0.00 :   1d0a16:       addr32 callq 16e8c0 <PyObject_GetAttr>
    0.00 :   1d0a1c:       mov    %rax,%rbp
    0.00 :   1d0a1f:       test   %rax,%rax
    0.00 :   1d0a22:       je     f1a74 <_PyEval_EvalFrameDefault.cold.2897+0x1507>
    0.00 :   1d0a28:       mov    0x50(%rsp),%r9
    0.00 :   1d0a2d:       lea    0x1798cc(%rip),%rax        # 34a300 <PyDict_Type>
    0.00 :   1d0a34:       mov    %rbp,%rdx
    0.00 :   1d0a37:       mov    %r15,%rsi
    0.00 :   1d0a3a:       cmp    %rax,0x8(%r9)
    0.00 :   1d0a3e:       jne    f1a48 <_PyEval_EvalFrameDefault.cold.2897+0x14db>
    0.00 :   1d0a44:       mov    %r9,%rdi
    0.00 :   1d0a47:       addr32 callq 1638a0 <PyDict_SetItem>
    0.00 :   1d0a4d:       subq   $0x1,(%r15)
    0.00 :   1d0a51:       je     1d4c40 <_PyEval_EvalFrameDefault+0x7bf0>
    0.00 :   1d0a57:       subq   $0x1,0x0(%rbp)
    0.00 :   1d0a5c:       je     f1a30 <_PyEval_EvalFrameDefault.cold.2897+0x14c3>
    0.00 :   1d0a62:       test   %eax,%eax
    0.00 :   1d0a64:       jne    1d4d9e <_PyEval_EvalFrameDefault+0x7d4e>
    0.00 :   1d0a6a:       addl   $0x1,0x58(%rsp)
    0.00 :   1d0a6f:       movslq 0x58(%rsp),%rsi
    0.00 :   1d0a74:       mov    0x90(%rsp),%rdi
    0.00 :   1d0a7c:       addr32 callq 131d70 <PySequence_GetItem>
    0.00 :   1d0a82:       mov    %rax,%r15
    0.00 :   1d0a85:       test   %rax,%rax
    0.00 :   1d0a88:       je     1d4575 <_PyEval_EvalFrameDefault+0x7525>
    0.00 :   1d0a8e:       mov    0x60(%rsp),%ebp
    0.00 :   1d0a92:       test   %ebp,%ebp
    0.00 :   1d0a94:       je     1d0a10 <_PyEval_EvalFrameDefault+0x39c0>
    0.00 :   1d0a9a:       mov    0x8(%rax),%rax
    0.00 :   1d0a9e:       testb  $0x10,0xab(%rax)
    0.00 :   1d0aa5:       je     1d0a10 <_PyEval_EvalFrameDefault+0x39c0>
    0.00 :   1d0aab:       movzbl 0x20(%r15),%eax
    0.00 :   1d0ab0:       test   %al,%al
    0.00 :   1d0ab2:       jns    f236c <_PyEval_EvalFrameDefault.cold.2897+0x1dff>
    0.00 :   1d0ab8:       mov    %eax,%r8d
    0.00 :   1d0abb:       mov    %eax,%edx
    0.00 :   1d0abd:       and    $0x1c,%r8d
    0.00 :   1d0ac1:       and    $0x20,%edx
    0.00 :   1d0ac4:       cmp    $0x4,%r8b
    0.00 :   1d0ac8:       jne    f2321 <_PyEval_EvalFrameDefault.cold.2897+0x1db4>
    0.00 :   1d0ace:       test   %dl,%dl
    0.00 :   1d0ad0:       je     f2318 <_PyEval_EvalFrameDefault.cold.2897+0x1dab>
    0.00 :   1d0ad6:       test   $0x40,%al
    0.00 :   1d0ad8:       je     f230f <_PyEval_EvalFrameDefault.cold.2897+0x1da2>
    0.00 :   1d0ade:       lea    0x30(%r15),%r10
    0.00 :   1d0ae2:       cmpb   $0x5f,(%r10)
    0.00 :   1d0ae6:       sete   %r11b
    0.00 :   1d0aea:       test   %r11b,%r11b
    0.00 :   1d0aed:       je     1d0a10 <_PyEval_EvalFrameDefault+0x39c0>
    0.00 :   1d0af3:       subq   $0x1,(%r15)
    0.00 :   1d0af7:       je     f06b4 <_PyEval_EvalFrameDefault.cold.2897+0x147>
    0.00 :   1d0afd:       jmpq   1d0a6a <_PyEval_EvalFrameDefault+0x3a1a>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d0b02:       sub    $0x8,%rbp
    0.00 :   1d0b06:       mov    -0x8(%rbp),%rbx
    0.00 :   1d0b0a:       mov    0x0(%rbp),%r15
    0.00 :   1d0b0e:       mov    %rbx,%rdi
    0.00 :   1d0b11:       mov    %rbx,0x40(%rsp)
    0.00 :   1d0b16:       mov    %r15,%rsi
    0.00 :   1d0b19:       addr32 callq 1ecb80 <PyNumber_InPlaceRshift>
    0.00 :   1d0b1f:       mov    0x40(%rsp),%r9
    0.00 :   1d0b24:       mov    %rax,%rbx
    0.00 :   1d0b27:       subq   $0x1,(%r9)
    0.00 :   1d0b2b:       je     f0ec7 <_PyEval_EvalFrameDefault.cold.2897+0x95a>
    0.00 :   1d0b31:       subq   $0x1,(%r15)
    0.00 :   1d0b35:       je     f0eb8 <_PyEval_EvalFrameDefault.cold.2897+0x94b>
    0.00 :   1d0b3b:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d0b3f:       test   %rbx,%rbx
    0.00 :   1d0b42:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d0b48:       mov    0x17bb79(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d0b4f:       test   %r8d,%r8d
    0.00 :   1d0b52:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d0b58:       mov    0x17bb66(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d0b5e:       mov    %r12,%rdx
    0.00 :   1d0b61:       sub    0x8(%rsp),%rdx
    0.00 :   1d0b66:       test   %eax,%eax
    0.00 :   1d0b68:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d0b6e:       movzwl (%r12),%ecx
    0.00 :   1d0b73:       lea    0x111b46(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0b7a:       mov    %edx,0x68(%r13)
    0.00 :   1d0b7e:       add    $0x2,%r12
    0.00 :   1d0b82:       movzbl %cl,%edi
    0.00 :   1d0b85:       movzbl %ch,%esi
    0.00 :   1d0b88:       mov    %rdi,%r8
    0.00 :   1d0b8b:       movslq %esi,%r9
    0.00 :   1d0b8e:       jmpq   *(%r10,%rdi,8)
    0.00 :   1d0b92:       mov    %r9d,0x40(%rsp)
    0.00 :   1d0b97:       xor    %edi,%edi
    0.00 :   1d0b99:       addr32 callq 147ed0 <PySet_New>
    0.00 :   1d0b9f:       mov    %rax,%r15
    0.00 :   1d0ba2:       test   %rax,%rax
    0.00 :   1d0ba5:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d0bab:       mov    0x40(%rsp),%edi
    0.00 :   1d0baf:       mov    %edi,%eax
    0.00 :   1d0bb1:       mov    %edi,0x58(%rsp)
    0.00 :   1d0bb5:       neg    %eax
    0.00 :   1d0bb7:       test   %edi,%edi
    0.00 :   1d0bb9:       cltq
    0.00 :   1d0bbb:       lea    0x0(%rbp,%rax,8),%r10
    0.00 :   1d0bc0:       mov    %r10,0x40(%rsp)
    0.00 :   1d0bc5:       jle    1d0d9e <_PyEval_EvalFrameDefault+0x3d4e>
    0.00 :   1d0bcb:       mov    0x0(%rbp,%rax,8),%r9
    0.00 :   1d0bd0:       mov    %r15,%rdi
    0.00 :   1d0bd3:       mov    %r9,%rsi
    0.00 :   1d0bd6:       mov    %r9,0x50(%rsp)
    0.00 :   1d0bdb:       addr32 callq 146c70 <PySet_Add>
    0.00 :   1d0be1:       mov    0x50(%rsp),%r8
    0.00 :   1d0be6:       mov    0x58(%rsp),%r9d
    0.00 :   1d0beb:       mov    %eax,%ebx
    0.00 :   1d0bed:       subq   $0x1,(%r8)
    0.00 :   1d0bf1:       je     f177a <_PyEval_EvalFrameDefault.cold.2897+0x120d>
    0.00 :   1d0bf7:       mov    %r9d,%esi
    0.00 :   1d0bfa:       sub    $0x1,%esi
    0.00 :   1d0bfd:       mov    %esi,0x50(%rsp)
    0.00 :   1d0c01:       je     1d0d96 <_PyEval_EvalFrameDefault+0x3d46>
    0.00 :   1d0c07:       neg    %esi
    0.00 :   1d0c09:       movslq %esi,%rcx
    0.00 :   1d0c0c:       mov    0x0(%rbp,%rcx,8),%r11
    0.00 :   1d0c11:       test   %ebx,%ebx
    0.00 :   1d0c13:       jne    1d0c37 <_PyEval_EvalFrameDefault+0x3be7>
    0.00 :   1d0c15:       mov    %r9d,0x60(%rsp)
    0.00 :   1d0c1a:       mov    %r11,%rsi
    0.00 :   1d0c1d:       mov    %r15,%rdi
    0.00 :   1d0c20:       mov    %r11,0x58(%rsp)
    0.00 :   1d0c25:       addr32 callq 146c70 <PySet_Add>
    0.00 :   1d0c2b:       mov    0x60(%rsp),%r9d
    0.00 :   1d0c30:       mov    0x58(%rsp),%r11
    0.00 :   1d0c35:       mov    %eax,%ebx
    0.00 :   1d0c37:       subq   $0x1,(%r11)
    0.00 :   1d0c3b:       jne    1d0c51 <_PyEval_EvalFrameDefault+0x3c01>
    0.00 :   1d0c3d:       mov    0x8(%r11),%rax
    0.00 :   1d0c41:       mov    %r9d,0x58(%rsp)
    0.00 :   1d0c46:       mov    %r11,%rdi
    0.00 :   1d0c49:       callq  *0x30(%rax)
    0.00 :   1d0c4c:       mov    0x58(%rsp),%r9d
    0.00 :   1d0c51:       mov    0x50(%rsp),%edi
    0.00 :   1d0c55:       mov    %edi,%r10d
    0.00 :   1d0c58:       sub    $0x1,%r10d
    0.00 :   1d0c5c:       mov    %r10d,0x50(%rsp)
    0.00 :   1d0c61:       je     1d0d96 <_PyEval_EvalFrameDefault+0x3d46>
    0.00 :   1d0c67:       mov    $0x1,%r8d
    0.00 :   1d0c6d:       sub    %edi,%r8d
    0.00 :   1d0c70:       movslq %r8d,%rdx
    0.00 :   1d0c73:       mov    0x0(%rbp,%rdx,8),%r11
    0.00 :   1d0c78:       test   %ebx,%ebx
    0.00 :   1d0c7a:       jne    1d0c9e <_PyEval_EvalFrameDefault+0x3c4e>
    0.00 :   1d0c7c:       mov    %r9d,0x60(%rsp)
    0.00 :   1d0c81:       mov    %r11,%rsi
    0.00 :   1d0c84:       mov    %r15,%rdi
    0.00 :   1d0c87:       mov    %r11,0x58(%rsp)
    0.00 :   1d0c8c:       addr32 callq 146c70 <PySet_Add>
    0.00 :   1d0c92:       mov    0x60(%rsp),%r9d
    0.00 :   1d0c97:       mov    0x58(%rsp),%r11
    0.00 :   1d0c9c:       mov    %eax,%ebx
    0.00 :   1d0c9e:       subq   $0x1,(%r11)
    0.00 :   1d0ca2:       jne    1d0cb9 <_PyEval_EvalFrameDefault+0x3c69>
    0.00 :   1d0ca4:       mov    %r9d,0x58(%rsp)
    0.00 :   1d0ca9:       mov    0x8(%r11),%r9
    0.00 :   1d0cad:       mov    %r11,%rdi
    0.00 :   1d0cb0:       callq  *0x30(%r9)
    0.00 :   1d0cb4:       mov    0x58(%rsp),%r9d
    0.00 :   1d0cb9:       mov    0x50(%rsp),%esi
    0.00 :   1d0cbd:       mov    %esi,%ecx
    0.00 :   1d0cbf:       sub    $0x1,%ecx
    0.00 :   1d0cc2:       mov    %ecx,0x50(%rsp)
    0.00 :   1d0cc6:       je     1d0d96 <_PyEval_EvalFrameDefault+0x3d46>
    0.00 :   1d0ccc:       mov    $0x1,%eax
    0.00 :   1d0cd1:       sub    %esi,%eax
    0.00 :   1d0cd3:       movslq %eax,%rdi
    0.00 :   1d0cd6:       mov    0x0(%rbp,%rdi,8),%r10
    0.00 :   1d0cdb:       test   %ebx,%ebx
    0.00 :   1d0cdd:       jne    1d0d01 <_PyEval_EvalFrameDefault+0x3cb1>
    0.00 :   1d0cdf:       mov    %r9d,0x60(%rsp)
    0.00 :   1d0ce4:       mov    %r10,%rsi
    0.00 :   1d0ce7:       mov    %r15,%rdi
    0.00 :   1d0cea:       mov    %r10,0x58(%rsp)
    0.00 :   1d0cef:       addr32 callq 146c70 <PySet_Add>
    0.00 :   1d0cf5:       mov    0x60(%rsp),%r9d
    0.00 :   1d0cfa:       mov    0x58(%rsp),%r10
    0.00 :   1d0cff:       mov    %eax,%ebx
    0.00 :   1d0d01:       subq   $0x1,(%r10)
    0.00 :   1d0d05:       jne    1d0d1c <_PyEval_EvalFrameDefault+0x3ccc>
    0.00 :   1d0d07:       mov    0x8(%r10),%r8
    0.00 :   1d0d0b:       mov    %r9d,0x58(%rsp)
    0.00 :   1d0d10:       mov    %r10,%rdi
    0.00 :   1d0d13:       callq  *0x30(%r8)
    0.00 :   1d0d17:       mov    0x58(%rsp),%r9d
    0.00 :   1d0d1c:       cmpl   $0x1,0x50(%rsp)
    0.00 :   1d0d21:       je     1d0d96 <_PyEval_EvalFrameDefault+0x3d46>
    0.00 :   1d0d23:       mov    $0x4,%edx
    0.00 :   1d0d28:       lea    -0x5(%r9),%esi
    0.00 :   1d0d2c:       mov    %r12,0x58(%rsp)
    0.00 :   1d0d31:       sub    %r9d,%edx
    0.00 :   1d0d34:       movslq %edx,%r11
    0.00 :   1d0d37:       lea    0x1(%r11,%rsi,1),%rax
    0.00 :   1d0d3c:       lea    0x0(,%r11,8),%rcx
    0.00 :   1d0d44:       lea    0x0(,%rax,8),%rdi
    0.00 :   1d0d4c:       mov    %rcx,%r12
    0.00 :   1d0d4f:       mov    %ebx,%eax
    0.00 :   1d0d51:       mov    %rdi,0x50(%rsp)
    0.00 :   1d0d56:       mov    0x0(%rbp,%r12,1),%rbx
    0.00 :   1d0d5b:       test   %eax,%eax
    0.00 :   1d0d5d:       jne    1d0d6b <_PyEval_EvalFrameDefault+0x3d1b>
    0.00 :   1d0d5f:       mov    %rbx,%rsi
    0.00 :   1d0d62:       mov    %r15,%rdi
    0.00 :   1d0d65:       addr32 callq 146c70 <PySet_Add>
    0.00 :   1d0d6b:       subq   $0x1,(%rbx)
    0.00 :   1d0d6f:       jne    1d0d84 <_PyEval_EvalFrameDefault+0x3d34>
    0.00 :   1d0d71:       mov    0x8(%rbx),%r10
    0.00 :   1d0d75:       mov    %eax,0x60(%rsp)
    0.00 :   1d0d79:       mov    %rbx,%rdi
    0.00 :   1d0d7c:       callq  *0x30(%r10)
    0.00 :   1d0d80:       mov    0x60(%rsp),%eax
    0.00 :   1d0d84:       add    $0x8,%r12
    0.00 :   1d0d88:       cmp    %r12,0x50(%rsp)
    0.00 :   1d0d8d:       jne    1d0d56 <_PyEval_EvalFrameDefault+0x3d06>
    0.00 :   1d0d8f:       mov    0x58(%rsp),%r12
    0.00 :   1d0d94:       mov    %eax,%ebx
    0.00 :   1d0d96:       test   %ebx,%ebx
    0.00 :   1d0d98:       jne    f1753 <_PyEval_EvalFrameDefault.cold.2897+0x11e6>
    0.00 :   1d0d9e:       mov    0x40(%rsp),%r8
    0.00 :   1d0da3:       mov    %r15,(%r8)
    0.00 :   1d0da6:       mov    0x17b91b(%rip),%r15d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d0dad:       lea    0x8(%r8),%rbp
    0.00 :   1d0db1:       test   %r15d,%r15d
    0.00 :   1d0db4:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d0dba:       mov    0x17b904(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d0dc0:       mov    %r12,%r9
    0.00 :   1d0dc3:       sub    0x8(%rsp),%r9
    0.00 :   1d0dc8:       test   %eax,%eax
    0.00 :   1d0dca:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d0dd0:       movzwl (%r12),%ecx
    0.00 :   1d0dd5:       lea    0x1118e4(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0ddc:       mov    %r9d,0x68(%r13)
    0.00 :   1d0de0:       add    $0x2,%r12
    0.00 :   1d0de4:       movzbl %cl,%edx
    0.00 :   1d0de7:       movzbl %ch,%esi
    0.00 :   1d0dea:       mov    %rdx,%r8
    0.00 :   1d0ded:       movslq %esi,%r9
    0.00 :   1d0df0:       jmpq   *(%r11,%rdx,8)
    0.00 :   1d0df4:       mov    -0x8(%rbp),%r8
    0.00 :   1d0df8:       mov    -0x10(%rbp),%r9
    0.00 :   1d0dfc:       add    $0x10,%rbp
    0.00 :   1d0e00:       addq   $0x1,(%r8)
    0.00 :   1d0e04:       addq   $0x1,(%r9)
    0.00 :   1d0e08:       mov    %r8,-0x8(%rbp)
    0.00 :   1d0e0c:       mov    %r9,-0x10(%rbp)
    0.00 :   1d0e10:       test   %eax,%eax
    0.00 :   1d0e12:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d0e18:       movzwl (%r12),%ebx
    0.00 :   1d0e1d:       mov    %r12,%rdi
    0.00 :   1d0e20:       lea    0x111899(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0e27:       add    $0x2,%r12
    0.00 :   1d0e2b:       sub    0x8(%rsp),%rdi
    0.00 :   1d0e30:       movzbl %bl,%r10d
    0.00 :   1d0e34:       movzbl %bh,%esi
    0.00 :   1d0e37:       mov    %edi,0x68(%r13)
    0.00 :   1d0e3b:       mov    %r10,%r8
    0.00 :   1d0e3e:       movslq %esi,%r9
    0.00 :   1d0e41:       jmpq   *(%r11,%r10,8)
    0.00 :   1d0e45:       mov    -0x8(%rbp),%rbx
    0.00 :   1d0e49:       lea    0x15c0d0(%rip),%rsi        # 32cf20 <PyId___aexit__.14428>
    0.00 :   1d0e50:       mov    %rbx,%rdi
    0.00 :   1d0e53:       callq  2009c0 <special_lookup>
    0.00 :   1d0e58:       test   %rax,%rax
    0.00 :   1d0e5b:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d0e61:       mov    %rax,-0x8(%rbp)
    0.00 :   1d0e65:       lea    0x15c094(%rip),%rsi        # 32cf00 <PyId___aenter__.14429>
    0.00 :   1d0e6c:       mov    %rbx,%rdi
    0.00 :   1d0e6f:       callq  2009c0 <special_lookup>
    0.00 :   1d0e74:       subq   $0x1,(%rbx)
    0.00 :   1d0e78:       mov    %rax,%r15
    0.00 :   1d0e7b:       je     f18df <_PyEval_EvalFrameDefault.cold.2897+0x1372>
    0.00 :   1d0e81:       test   %r15,%r15
    0.00 :   1d0e84:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d0e8a:       xor    %ecx,%ecx
    0.00 :   1d0e8c:       xor    %edx,%edx
    0.00 :   1d0e8e:       xor    %esi,%esi
    0.00 :   1d0e90:       mov    %r15,%rdi
    0.00 :   1d0e93:       addr32 callq 116150 <_PyObject_FastCallDict>
    0.00 :   1d0e99:       subq   $0x1,(%r15)
    0.00 :   1d0e9d:       mov    %rax,%rbx
    0.00 :   1d0ea0:       jne    1d0ead <_PyEval_EvalFrameDefault+0x3e5d>
    0.00 :   1d0ea2:       mov    0x8(%r15),%r11
    0.00 :   1d0ea6:       mov    %r15,%rdi
    0.00 :   1d0ea9:       callq  *0x30(%r11)
    0.00 :   1d0ead:       test   %rbx,%rbx
    0.00 :   1d0eb0:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d0eb6:       mov    %rbp,%rcx
    0.00 :   1d0eb9:       add    $0x8,%rbp
    0.00 :   1d0ebd:       mov    %rbx,(%rcx)
    0.00 :   1d0ec0:       mov    0x17b802(%rip),%edx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d0ec6:       test   %edx,%edx
    0.00 :   1d0ec8:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d0ece:       mov    0x17b7f0(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d0ed4:       mov    %r12,%r9
    0.00 :   1d0ed7:       sub    0x8(%rsp),%r9
    0.00 :   1d0edc:       test   %eax,%eax
    0.00 :   1d0ede:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d0ee4:       movzwl (%r12),%ebx
    0.00 :   1d0ee9:       lea    0x1117d0(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0ef0:       mov    %r9d,0x68(%r13)
    0.00 :   1d0ef4:       add    $0x2,%r12
    0.00 :   1d0ef8:       movzbl %bl,%esi
    0.00 :   1d0efb:       movzbl %bh,%edi
    0.00 :   1d0efe:       mov    %rsi,%r8
    0.00 :   1d0f01:       movslq %edi,%r9
    0.00 :   1d0f04:       jmpq   *(%r10,%rsi,8)
    0.00 :   1d0f08:       mov    -0x8(%rbp),%rdi
    0.00 :   1d0f0c:       lea    0x16c70d(%rip),%r11        # 33d620 <PyAsyncGen_Type>
    0.00 :   1d0f13:       mov    0x8(%rdi),%r9
    0.00 :   1d0f17:       cmp    %r11,%r9
    0.00 :   1d0f1a:       je     1d3688 <_PyEval_EvalFrameDefault+0x6638>
    0.00 :   1d0f20:       mov    0x50(%r9),%r15
    0.00 :   1d0f24:       test   %r15,%r15
    0.00 :   1d0f27:       je     f1793 <_PyEval_EvalFrameDefault.cold.2897+0x1226>
    0.00 :   1d0f2d:       mov    0x10(%r15),%rax
    0.00 :   1d0f31:       test   %rax,%rax
    0.00 :   1d0f34:       je     f1793 <_PyEval_EvalFrameDefault.cold.2897+0x1226>
    0.00 :   1d0f3a:       callq  *%rax
    0.00 :   1d0f3c:       mov    %rax,%rbx
    0.00 :   1d0f3f:       test   %rax,%rax
    0.00 :   1d0f42:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d0f48:       mov    %rax,%rdi
    0.00 :   1d0f4b:       addr32 callq 1f0540 <_PyCoro_GetAwaitableIter>
    0.00 :   1d0f51:       mov    %rax,%r15
    0.00 :   1d0f54:       test   %rax,%rax
    0.00 :   1d0f57:       je     f17c2 <_PyEval_EvalFrameDefault.cold.2897+0x1255>
    0.00 :   1d0f5d:       subq   $0x1,(%rbx)
    0.00 :   1d0f61:       je     f17b2 <_PyEval_EvalFrameDefault.cold.2897+0x1245>
    0.00 :   1d0f67:       mov    %rbp,%rdx
    0.00 :   1d0f6a:       add    $0x8,%rbp
    0.00 :   1d0f6e:       mov    %r15,(%rdx)
    0.00 :   1d0f71:       mov    0x17b751(%rip),%ecx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d0f77:       test   %ecx,%ecx
    0.00 :   1d0f79:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d0f7f:       mov    0x17b73f(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d0f85:       mov    %r12,%r10
    0.00 :   1d0f88:       sub    0x8(%rsp),%r10
    0.00 :   1d0f8d:       test   %eax,%eax
    0.00 :   1d0f8f:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d0f95:       movzwl (%r12),%ebx
    0.00 :   1d0f9a:       lea    0x11171f(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d0fa1:       mov    %r10d,0x68(%r13)
    0.00 :   1d0fa5:       add    $0x2,%r12
    0.00 :   1d0fa9:       movzbl %bl,%r11d
    0.00 :   1d0fad:       movzbl %bh,%edi
    0.00 :   1d0fb0:       mov    %r11,%r8
    0.00 :   1d0fb3:       movslq %edi,%r9
    0.00 :   1d0fb6:       jmpq   *(%r15,%r11,8)
    0.00 :   1d0fba:       mov    0x30(%rsp),%r10
    0.00 :   1d0fbf:       mov    0x38(%r13),%rdi
    0.00 :   1d0fc3:       movslq %r9d,%r15
    0.00 :   1d0fc6:       lea    0x179333(%rip),%rcx        # 34a300 <PyDict_Type>
    0.00 :   1d0fcd:       mov    %r15,%rdx
    0.00 :   1d0fd0:       mov    %r9d,0x40(%rsp)
    0.00 :   1d0fd5:       mov    0x50(%r10),%r8
    0.00 :   1d0fd9:       mov    0x48(%r10),%rax
    0.00 :   1d0fdd:       sub    0x10(%r8),%rdx
    0.00 :   1d0fe1:       cmp    %rcx,0x8(%rdi)
    0.00 :   1d0fe5:       mov    0x18(%rax,%rdx,8),%rsi
    0.00 :   1d0fea:       jne    f1343 <_PyEval_EvalFrameDefault.cold.2897+0xdd6>
    0.00 :   1d0ff0:       addr32 callq 1197b0 <PyDict_GetItem>
    0.00 :   1d0ff6:       test   %rax,%rax
    0.00 :   1d0ff9:       jne    f133a <_PyEval_EvalFrameDefault.cold.2897+0xdcd>
    0.00 :   1d0fff:       mov    0x40(%rsp),%r9d
    0.00 :   1d1004:       mov    0x38(%rsp),%rdi
    0.00 :   1d1009:       mov    (%rdi,%r15,8),%rsi
    0.00 :   1d100d:       mov    0x10(%rsi),%rax
    0.00 :   1d1011:       test   %rax,%rax
    0.00 :   1d1014:       je     f1320 <_PyEval_EvalFrameDefault.cold.2897+0xdb3>
    0.00 :   1d101a:       addq   $0x1,(%rax)
    0.00 :   1d101e:       mov    %rbp,%r10
    0.00 :   1d1021:       add    $0x8,%rbp
    0.00 :   1d1025:       mov    %rax,(%r10)
    0.00 :   1d1028:       mov    0x17b69a(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d102e:       test   %eax,%eax
    0.00 :   1d1030:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d1036:       mov    0x17b688(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d103c:       mov    %r12,%r15
    0.00 :   1d103f:       sub    0x8(%rsp),%r15
    0.00 :   1d1044:       test   %eax,%eax
    0.00 :   1d1046:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d104c:       movzwl (%r12),%ebx
    0.00 :   1d1051:       lea    0x111668(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1058:       mov    %r15d,0x68(%r13)
    0.00 :   1d105c:       add    $0x2,%r12
    0.00 :   1d1060:       movzbl %bl,%edx
    0.00 :   1d1063:       movzbl %bh,%ecx
    0.00 :   1d1066:       mov    %rdx,%r8
    0.00 :   1d1069:       movslq %ecx,%r9
    0.00 :   1d106c:       jmpq   *(%rdi,%rdx,8)
    0.00 :   1d106f:       sub    $0x8,%rbp
    0.00 :   1d1073:       mov    0x0(%rbp),%r15
    0.00 :   1d1077:       mov    0x18(%rsp),%rax
    0.00 :   1d107c:       movslq %r9d,%r11
    0.00 :   1d107f:       mov    0x30(%r13),%rdi
    0.00 :   1d1083:       mov    0x18(%rax,%r11,8),%rsi
    0.00 :   1d1088:       mov    %r15,%rdx
    0.00 :   1d108b:       addr32 callq 1638a0 <PyDict_SetItem>
    0.00 :   1d1091:       subq   $0x1,(%r15)
    0.00 :   1d1095:       mov    %eax,%ebx
    0.00 :   1d1097:       je     f128e <_PyEval_EvalFrameDefault.cold.2897+0xd21>
    0.00 :   1d109d:       test   %ebx,%ebx
    0.00 :   1d109f:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d10a5:       mov    0x17b61c(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d10ac:       test   %r9d,%r9d
    0.00 :   1d10af:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d10b5:       mov    0x17b609(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d10bb:       mov    %r12,%r10
    0.00 :   1d10be:       sub    0x8(%rsp),%r10
    0.00 :   1d10c3:       test   %eax,%eax
    0.00 :   1d10c5:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d10cb:       movzwl (%r12),%ecx
    0.00 :   1d10d0:       lea    0x1115e9(%rip),%rdx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d10d7:       mov    %r10d,0x68(%r13)
    0.00 :   1d10db:       add    $0x2,%r12
    0.00 :   1d10df:       movzbl %cl,%edi
    0.00 :   1d10e2:       movzbl %ch,%esi
    0.00 :   1d10e5:       mov    %rdi,%r8
    0.00 :   1d10e8:       movslq %esi,%r9
    0.00 :   1d10eb:       jmpq   *(%rdx,%rdi,8)
    0.00 :   1d10ee:       mov    %r9d,0x40(%rsp)
    0.00 :   1d10f3:       addr32 callq 15d7d0 <PyDict_New>
    0.00 :   1d10f9:       mov    %rax,%r15
    0.00 :   1d10fc:       test   %rax,%rax
    0.00 :   1d10ff:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d1105:       movslq 0x40(%rsp),%rbx
    0.00 :   1d110a:       imul   $0xfffffffffffffff8,%rbx,%r9
    0.00 :   1d110e:       mov    %rbx,%rdi
    0.00 :   1d1111:       test   %rbx,%rbx
    0.00 :   1d1114:       jle    1d4234 <_PyEval_EvalFrameDefault+0x71e4>
    0.00 :   1d111a:       mov    0x0(%rbp,%r9,1),%rsi
    0.00 :   1d111f:       mov    %edi,0x58(%rsp)
    0.00 :   1d1123:       mov    $0x2,%edx
    0.00 :   1d1128:       mov    %r15,%rdi
    0.00 :   1d112b:       mov    %r9,0x50(%rsp)
    0.00 :   1d1130:       mov    %rsi,0x40(%rsp)
    0.00 :   1d1135:       addr32 callq 226190 <_PyDict_MergeEx>
    0.00 :   1d113b:       mov    0x50(%rsp),%r9
    0.00 :   1d1140:       mov    0x58(%rsp),%edi
    0.00 :   1d1144:       add    $0x8,%r9
    0.00 :   1d1148:       test   %eax,%eax
    0.00 :   1d114a:       js     f14fb <_PyEval_EvalFrameDefault.cold.2897+0xf8e>
    0.00 :   1d1150:       sub    $0x1,%rbx
    0.00 :   1d1154:       jmp    1d1111 <_PyEval_EvalFrameDefault+0x40c1>
    0.00 :   1d1156:       sub    $0x8,%rbp
    0.00 :   1d115a:       mov    0x0(%rbp),%r15
    0.00 :   1d115e:       lea    0x15be3b(%rip),%rdi        # 32cfa0 <PyId_displayhook.13793>
    0.00 :   1d1165:       addr32 callq 1fd730 <_PySys_GetObjectId>
    0.00 :   1d116b:       test   %rax,%rax
    0.00 :   1d116e:       je     f12be <_PyEval_EvalFrameDefault.cold.2897+0xd51>
    0.00 :   1d1174:       xor    %edx,%edx
    0.00 :   1d1176:       mov    %rax,%rdi
    0.00 :   1d1179:       mov    %r15,%rsi
    0.00 :   1d117c:       xor    %eax,%eax
    0.00 :   1d117e:       addr32 callq 134b50 <PyObject_CallFunctionObjArgs>
    0.00 :   1d1184:       subq   $0x1,(%r15)
    0.00 :   1d1188:       mov    %rax,%rbx
    0.00 :   1d118b:       je     f12ae <_PyEval_EvalFrameDefault.cold.2897+0xd41>
    0.00 :   1d1191:       test   %rbx,%rbx
    0.00 :   1d1194:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d119a:       subq   $0x1,(%rbx)
    0.00 :   1d119e:       je     f129e <_PyEval_EvalFrameDefault.cold.2897+0xd31>
    0.00 :   1d11a4:       mov    0x17b51e(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d11aa:       test   %eax,%eax
    0.00 :   1d11ac:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d11b2:       mov    0x17b50c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d11b8:       mov    %r12,%r8
    0.00 :   1d11bb:       sub    0x8(%rsp),%r8
    0.00 :   1d11c0:       test   %eax,%eax
    0.00 :   1d11c2:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d11c8:       movzwl (%r12),%ecx
    0.00 :   1d11cd:       lea    0x1114ec(%rip),%rdx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d11d4:       mov    %r8d,0x68(%r13)
    0.00 :   1d11d8:       add    $0x2,%r12
    0.00 :   1d11dc:       movzbl %cl,%edi
    0.00 :   1d11df:       movzbl %ch,%esi
    0.00 :   1d11e2:       mov    %rdi,%r8
    0.00 :   1d11e5:       movslq %esi,%r9
    0.00 :   1d11e8:       jmpq   *(%rdx,%rdi,8)
    0.00 :   1d11eb:       mov    %r9d,0x40(%rsp)
    0.00 :   1d11f0:       xor    %esi,%esi
    0.00 :   1d11f2:       xor    %edi,%edi
    0.00 :   1d11f4:       addr32 callq 149d00 <PyUnicode_New>
    0.00 :   1d11fa:       mov    %rax,%r15
    0.00 :   1d11fd:       test   %rax,%rax
    0.00 :   1d1200:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d1206:       movslq 0x40(%rsp),%rdx
    0.00 :   1d120b:       mov    %rbp,%rsi
    0.00 :   1d120e:       mov    %rax,%rdi
    0.00 :   1d1211:       lea    0x0(,%rdx,8),%r8
    0.00 :   1d1219:       sub    %r8,%rsi
    0.00 :   1d121c:       addr32 callq 14e190 <_PyUnicode_JoinArray>
    0.00 :   1d1222:       subq   $0x1,(%r15)
    0.00 :   1d1226:       mov    0x40(%rsp),%edx
    0.00 :   1d122a:       mov    %rax,%rbx
    0.00 :   1d122d:       je     f1ee2 <_PyEval_EvalFrameDefault.cold.2897+0x1975>
    0.00 :   1d1233:       test   %rbx,%rbx
    0.00 :   1d1236:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d123c:       mov    %edx,%r15d
    0.00 :   1d123f:       sub    $0x1,%r15d
    0.00 :   1d1243:       js     1d4de9 <_PyEval_EvalFrameDefault+0x7d99>
    0.00 :   1d1249:       mov    -0x8(%rbp),%rdi
    0.00 :   1d124d:       lea    -0x8(%rbp),%rax
    0.00 :   1d1251:       subq   $0x1,(%rdi)
    0.00 :   1d1255:       jne    f1e4e <_PyEval_EvalFrameDefault.cold.2897+0x18e1>
    0.00 :   1d125b:       mov    0x8(%rdi),%rbp
    0.00 :   1d125f:       mov    %rax,0x40(%rsp)
    0.00 :   1d1264:       callq  *0x30(%rbp)
    0.00 :   1d1267:       mov    %r15d,%edx
    0.00 :   1d126a:       mov    0x40(%rsp),%rbp
    0.00 :   1d126f:       jmp    1d123c <_PyEval_EvalFrameDefault+0x41ec>
    0.00 :   1d1271:       mov    0x38(%r13),%rdi
    0.00 :   1d1275:       test   %rdi,%rdi
    0.00 :   1d1278:       je     f210a <_PyEval_EvalFrameDefault.cold.2897+0x1b9d>
    0.00 :   1d127e:       lea    0x17907b(%rip),%r8        # 34a300 <PyDict_Type>
    0.00 :   1d1285:       cmp    %r8,0x8(%rdi)
    0.00 :   1d1289:       jne    f144a <_PyEval_EvalFrameDefault.cold.2897+0xedd>
    0.00 :   1d128f:       lea    0x15bcaa(%rip),%rsi        # 32cf40 <PyId___annotations__.14198>
    0.00 :   1d1296:       addr32 callq 162610 <_PyDict_GetItemId>
    0.00 :   1d129c:       test   %rax,%rax
    0.00 :   1d129f:       jne    1d12dd <_PyEval_EvalFrameDefault+0x428d>
    0.00 :   1d12a1:       addr32 callq 15d7d0 <PyDict_New>
    0.00 :   1d12a7:       mov    %rax,%rbx
    0.00 :   1d12aa:       test   %rax,%rax
    0.00 :   1d12ad:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d12b3:       mov    0x38(%r13),%rdi
    0.00 :   1d12b7:       mov    %rax,%rdx
    0.00 :   1d12ba:       lea    0x15bc7f(%rip),%rsi        # 32cf40 <PyId___annotations__.14198>
    0.00 :   1d12c1:       addr32 callq 1645d0 <_PyDict_SetItemId>
    0.00 :   1d12c7:       subq   $0x1,(%rbx)
    0.00 :   1d12cb:       mov    %eax,%r15d
    0.00 :   1d12ce:       je     f2125 <_PyEval_EvalFrameDefault.cold.2897+0x1bb8>
    0.00 :   1d12d4:       test   %r15d,%r15d
    0.00 :   1d12d7:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d12dd:       mov    0x17b3e5(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d12e3:       test   %edi,%edi
    0.00 :   1d12e5:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d12eb:       mov    0x17b3d3(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d12f1:       mov    %r12,%rcx
    0.00 :   1d12f4:       sub    0x8(%rsp),%rcx
    0.00 :   1d12f9:       test   %eax,%eax
    0.00 :   1d12fb:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1301:       movzwl (%r12),%ebx
    0.00 :   1d1306:       lea    0x1113b3(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d130d:       mov    %ecx,0x68(%r13)
    0.00 :   1d1311:       add    $0x2,%r12
    0.00 :   1d1315:       movzbl %bl,%edx
    0.00 :   1d1318:       movzbl %bh,%esi
    0.00 :   1d131b:       mov    %rdx,%r8
    0.00 :   1d131e:       movslq %esi,%r9
    0.00 :   1d1321:       jmpq   *(%r11,%rdx,8)
    0.00 :   1d1325:       sub    $0x8,%rbp
    0.00 :   1d1329:       mov    -0x8(%rbp),%rbx
    0.00 :   1d132d:       mov    0x0(%rbp),%r15
    0.00 :   1d1331:       mov    %rbx,%rdi
    0.00 :   1d1334:       mov    %rbx,0x40(%rsp)
    0.00 :   1d1339:       mov    %r15,%rsi
    0.00 :   1d133c:       addr32 callq 1ecb60 <PyNumber_InPlaceAnd>
    0.00 :   1d1342:       mov    0x40(%rsp),%r9
    0.00 :   1d1347:       mov    %rax,%rbx
    0.00 :   1d134a:       subq   $0x1,(%r9)
    0.00 :   1d134e:       je     f143a <_PyEval_EvalFrameDefault.cold.2897+0xecd>
    0.00 :   1d1354:       subq   $0x1,(%r15)
    0.00 :   1d1358:       jne    1d1364 <_PyEval_EvalFrameDefault+0x4314>
    0.00 :   1d135a:       mov    0x8(%r15),%rax
    0.00 :   1d135e:       mov    %r15,%rdi
    0.00 :   1d1361:       callq  *0x30(%rax)
    0.00 :   1d1364:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d1368:       test   %rbx,%rbx
    0.00 :   1d136b:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d1371:       mov    0x17b350(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1378:       test   %r8d,%r8d
    0.00 :   1d137b:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d1381:       mov    0x17b33d(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1387:       mov    %r12,%rdx
    0.00 :   1d138a:       sub    0x8(%rsp),%rdx
    0.00 :   1d138f:       test   %eax,%eax
    0.00 :   1d1391:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1397:       movzwl (%r12),%ecx
    0.00 :   1d139c:       lea    0x11131d(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d13a3:       mov    %edx,0x68(%r13)
    0.00 :   1d13a7:       add    $0x2,%r12
    0.00 :   1d13ab:       movzbl %cl,%esi
    0.00 :   1d13ae:       movzbl %ch,%edi
    0.00 :   1d13b1:       mov    %rsi,%r8
    0.00 :   1d13b4:       movslq %edi,%r9
    0.00 :   1d13b7:       jmpq   *(%r10,%rsi,8)
    0.00 :   1d13bb:       mov    -0x8(%rbp),%rbx
    0.00 :   1d13bf:       mov    %rbx,%rdi
    0.00 :   1d13c2:       addr32 callq 1f0540 <_PyCoro_GetAwaitableIter>
    0.00 :   1d13c8:       mov    %rax,%r15
    0.00 :   1d13cb:       test   %rax,%rax
    0.00 :   1d13ce:       je     f2055 <_PyEval_EvalFrameDefault.cold.2897+0x1ae8>
    0.00 :   1d13d4:       subq   $0x1,(%rbx)
    0.00 :   1d13d8:       je     1d4a3e <_PyEval_EvalFrameDefault+0x79ee>
    0.00 :   1d13de:       lea    0x16ba1b(%rip),%r8        # 33ce00 <PyCoro_Type>
    0.00 :   1d13e5:       cmp    %r8,0x8(%r15)
    0.00 :   1d13e9:       jne    1d13fd <_PyEval_EvalFrameDefault+0x43ad>
    0.00 :   1d13eb:       mov    %r15,%rdi
    0.00 :   1d13ee:       addr32 callq 113f10 <_PyGen_yf>
    0.00 :   1d13f4:       test   %rax,%rax
    0.00 :   1d13f7:       jne    f20d3 <_PyEval_EvalFrameDefault.cold.2897+0x1b66>
    0.00 :   1d13fd:       mov    %r15,-0x8(%rbp)
    0.00 :   1d1401:       mov    0x17b2c1(%rip),%esi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1407:       test   %esi,%esi
    0.00 :   1d1409:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d140f:       mov    0x17b2af(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1415:       mov    %r12,%rdx
    0.00 :   1d1418:       sub    0x8(%rsp),%rdx
    0.00 :   1d141d:       test   %eax,%eax
    0.00 :   1d141f:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1425:       movzwl (%r12),%ecx
    0.00 :   1d142a:       lea    0x11128f(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1431:       mov    %edx,0x68(%r13)
    0.00 :   1d1435:       add    $0x2,%r12
    0.00 :   1d1439:       movzbl %cl,%r10d
    0.00 :   1d143d:       movzbl %ch,%edi
    0.00 :   1d1440:       mov    %r10,%r8
    0.00 :   1d1443:       movslq %edi,%r9
    0.00 :   1d1446:       jmpq   *(%r11,%r10,8)
    0.00 :   1d144a:       mov    %r12,%rbx
    0.00 :   1d144d:       sub    0x8(%rsp),%rbx
    0.00 :   1d1452:       mov    -0x8(%rbp),%r15
    0.00 :   1d1456:       lea    -0x8(%rbp),%rcx
    0.00 :   1d145a:       mov    %rbx,%rax
    0.00 :   1d145d:       sub    0x40(%r13),%rcx
    0.00 :   1d1461:       mov    $0x7a,%esi
    0.00 :   1d1466:       mov    %r13,%rdi
    0.00 :   1d1469:       sar    %rax
    0.00 :   1d146c:       sar    $0x3,%rcx
    0.00 :   1d1470:       lea    (%r9,%rax,2),%edx
    0.00 :   1d1474:       addr32 callq 119d60 <PyFrame_BlockSetup>
    0.00 :   1d147a:       mov    %r15,-0x8(%rbp)
    0.00 :   1d147e:       mov    0x17b243(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1485:       test   %r8d,%r8d
    0.00 :   1d1488:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d148e:       mov    0x17b230(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1494:       test   %eax,%eax
    0.00 :   1d1496:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d149c:       movzwl (%r12),%ecx
    0.00 :   1d14a1:       lea    0x111218(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d14a8:       mov    %ebx,0x68(%r13)
    0.00 :   1d14ac:       add    $0x2,%r12
    0.00 :   1d14b0:       movzbl %cl,%r11d
    0.00 :   1d14b4:       movzbl %ch,%edx
    0.00 :   1d14b7:       mov    %r11,%r8
    0.00 :   1d14ba:       movslq %edx,%r9
    0.00 :   1d14bd:       jmpq   *(%rsi,%r11,8)
    0.00 :   1d14c1:       sub    $0x8,%rbp
    0.00 :   1d14c5:       mov    -0x8(%rbp),%rbx
    0.00 :   1d14c9:       mov    0x0(%rbp),%r15
    0.00 :   1d14cd:       mov    %rbx,%rdi
    0.00 :   1d14d0:       mov    %rbx,0x40(%rsp)
    0.00 :   1d14d5:       mov    %r15,%rsi
    0.00 :   1d14d8:       addr32 callq 1ecba0 <PyNumber_InPlaceTrueDivide>
    0.00 :   1d14de:       mov    0x40(%rsp),%r9
    0.00 :   1d14e3:       mov    %rax,%rbx
    0.00 :   1d14e6:       subq   $0x1,(%r9)
    0.00 :   1d14ea:       je     f0737 <_PyEval_EvalFrameDefault.cold.2897+0x1ca>
    0.00 :   1d14f0:       subq   $0x1,(%r15)
    0.00 :   1d14f4:       je     f0728 <_PyEval_EvalFrameDefault.cold.2897+0x1bb>
    0.00 :   1d14fa:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d14fe:       test   %rbx,%rbx
    0.00 :   1d1501:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d1507:       mov    0x17b1ba(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d150e:       test   %r8d,%r8d
    0.00 :   1d1511:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d1517:       mov    0x17b1a7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d151d:       mov    %r12,%rdx
    0.00 :   1d1520:       sub    0x8(%rsp),%rdx
    0.00 :   1d1525:       test   %eax,%eax
    0.00 :   1d1527:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d152d:       movzwl (%r12),%ecx
    0.00 :   1d1532:       lea    0x111187(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1539:       mov    %edx,0x68(%r13)
    0.00 :   1d153d:       add    $0x2,%r12
    0.00 :   1d1541:       movzbl %cl,%esi
    0.00 :   1d1544:       movzbl %ch,%edi
    0.00 :   1d1547:       mov    %rsi,%r8
    0.00 :   1d154a:       movslq %edi,%r9
    0.00 :   1d154d:       jmpq   *(%r10,%rsi,8)
    0.00 :   1d1551:       sub    $0x8,%rbp
    0.00 :   1d1555:       mov    -0x8(%rbp),%rbx
    0.00 :   1d1559:       mov    0x0(%rbp),%r15
    0.00 :   1d155d:       mov    %rbx,%rdi
    0.00 :   1d1560:       mov    %rbx,0x40(%rsp)
    0.00 :   1d1565:       mov    %r15,%rsi
    0.00 :   1d1568:       addr32 callq 1312a0 <PyNumber_InPlaceMultiply>
    0.00 :   1d156e:       mov    0x40(%rsp),%r9
    0.00 :   1d1573:       mov    %rax,%rbx
    0.00 :   1d1576:       subq   $0x1,(%r9)
    0.00 :   1d157a:       je     f1887 <_PyEval_EvalFrameDefault.cold.2897+0x131a>
    0.00 :   1d1580:       subq   $0x1,(%r15)
    0.00 :   1d1584:       jne    1d1590 <_PyEval_EvalFrameDefault+0x4540>
    0.00 :   1d1586:       mov    0x8(%r15),%rax
    0.00 :   1d158a:       mov    %r15,%rdi
    0.00 :   1d158d:       callq  *0x30(%rax)
    0.00 :   1d1590:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d1594:       test   %rbx,%rbx
    0.00 :   1d1597:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d159d:       mov    0x17b124(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d15a4:       test   %r8d,%r8d
    0.00 :   1d15a7:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d15ad:       mov    0x17b111(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d15b3:       mov    %r12,%rdx
    0.00 :   1d15b6:       sub    0x8(%rsp),%rdx
    0.00 :   1d15bb:       test   %eax,%eax
    0.00 :   1d15bd:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d15c3:       movzwl (%r12),%ecx
    0.00 :   1d15c8:       lea    0x1110f1(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d15cf:       mov    %edx,0x68(%r13)
    0.00 :   1d15d3:       add    $0x2,%r12
    0.00 :   1d15d7:       movzbl %cl,%edi
    0.00 :   1d15da:       movzbl %ch,%esi
    0.00 :   1d15dd:       mov    %rdi,%r8
    0.00 :   1d15e0:       movslq %esi,%r9
    0.00 :   1d15e3:       jmpq   *(%r10,%rdi,8)
    0.00 :   1d15e7:       sub    $0x8,%rbp
    0.00 :   1d15eb:       mov    -0x8(%rbp),%rbx
    0.00 :   1d15ef:       mov    0x0(%rbp),%r15
    0.00 :   1d15f3:       mov    %rbx,%rdi
    0.00 :   1d15f6:       mov    %rbx,0x40(%rsp)
    0.00 :   1d15fb:       mov    %r15,%rsi
    0.00 :   1d15fe:       addr32 callq 1ecbc0 <PyNumber_InPlaceRemainder>
    0.00 :   1d1604:       mov    0x40(%rsp),%r9
    0.00 :   1d1609:       mov    %rax,%rbx
    0.00 :   1d160c:       subq   $0x1,(%r9)
    0.00 :   1d1610:       je     f1e3e <_PyEval_EvalFrameDefault.cold.2897+0x18d1>
    0.00 :   1d1616:       subq   $0x1,(%r15)
    0.00 :   1d161a:       jne    1d1626 <_PyEval_EvalFrameDefault+0x45d6>
    0.00 :   1d161c:       mov    0x8(%r15),%rax
    0.00 :   1d1620:       mov    %r15,%rdi
    0.00 :   1d1623:       callq  *0x30(%rax)
    0.00 :   1d1626:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d162a:       test   %rbx,%rbx
    0.00 :   1d162d:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d1633:       mov    0x17b08e(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d163a:       test   %r8d,%r8d
    0.00 :   1d163d:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d1643:       mov    0x17b07b(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1649:       mov    %r12,%rdx
    0.00 :   1d164c:       sub    0x8(%rsp),%rdx
    0.00 :   1d1651:       test   %eax,%eax
    0.00 :   1d1653:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1659:       movzwl (%r12),%ecx
    0.00 :   1d165e:       lea    0x11105b(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1665:       mov    %edx,0x68(%r13)
    0.00 :   1d1669:       add    $0x2,%r12
    0.00 :   1d166d:       movzbl %cl,%edi
    0.00 :   1d1670:       movzbl %ch,%esi
    0.00 :   1d1673:       mov    %rdi,%r8
    0.00 :   1d1676:       movslq %esi,%r9
    0.00 :   1d1679:       jmpq   *(%r10,%rdi,8)
    0.00 :   1d167d:       nopl   (%rax)
    0.00 :   1d1680:       mov    0x2c(%r14),%r10d
    0.00 :   1d1684:       test   %r10d,%r10d
    0.00 :   1d1687:       jne    1d1700 <_PyEval_EvalFrameDefault+0x46b0>
    0.00 :   1d1689:       mov    %rbp,0x48(%r13)
    0.00 :   1d168d:       mov    0x50(%r14),%r12
         :            maybe_call_line_trace():
    0.00 :   1d1691:       cmp    %esi,0x48(%rsp)
    0.00 :   1d1695:       jg     1d25f3 <_PyEval_EvalFrameDefault+0x55a3>
    0.00 :   1d169b:       cmp    %esi,0x68(%rsp)
    0.00 :   1d169f:       jle    1d25f3 <_PyEval_EvalFrameDefault+0x55a3>
    0.00 :   1d16a5:       mov    0x6c(%r13),%eax
    0.00 :   1d16a9:       cmp    %r9d,0x48(%rsp)
    0.00 :   1d16ae:       je     1d29bb <_PyEval_EvalFrameDefault+0x596b>
    0.00 :   1d16b4:       cmp    %r9d,0x4c(%rsp)
    0.00 :   1d16b9:       jg     1d29bb <_PyEval_EvalFrameDefault+0x596b>
    0.00 :   1d16bf:       cmpb   $0x0,0x59(%r13)
    0.00 :   1d16c4:       jne    1d40ca <_PyEval_EvalFrameDefault+0x707a>
    0.00 :   1d16ca:       movslq 0x68(%r13),%r12
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d16ce:       mov    0x48(%r13),%r15
         :            maybe_call_line_trace():
    0.00 :   1d16d2:       mov    %r12d,0x4c(%rsp)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d16d7:       and    $0xfffffffffffffffe,%r12
    0.00 :   1d16db:       add    0x8(%rsp),%r12
    0.00 :   1d16e0:       test   %r15,%r15
    0.00 :   1d16e3:       je     1d16f0 <_PyEval_EvalFrameDefault+0x46a0>
    0.00 :   1d16e5:       movq   $0x0,0x48(%r13)
    0.00 :   1d16ed:       mov    %r15,%rbp
    0.00 :   1d16f0:       test   %r10d,%r10d
    0.00 :   1d16f3:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d16f9:       nopl   0x0(%rax)
    0.00 :   1d1700:       movzwl (%r12),%ebx
    0.00 :   1d1705:       add    $0x2,%r12
    0.00 :   1d1709:       movzbl %bh,%esi
    0.00 :   1d170c:       movzbl %bl,%r8d
    0.00 :   1d1710:       movslq %esi,%r9
    0.00 :   1d1713:       jmpq   1cd17b <_PyEval_EvalFrameDefault+0x12b>
    0.00 :   1d1718:       nopl   0x0(%rax,%rax,1)
    0.00 :   1d1720:       mov    %rcx,%rbp
    0.00 :   1d1723:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1728:       nopl   0x0(%rax,%rax,1)
         :            call_function():
    0.00 :   1d1730:       mov    0x17b291(%rip),%rcx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d1737:       mov    0x30(%rcx),%r11d
    0.00 :   1d173b:       test   %r11d,%r11d
    0.00 :   1d173e:       jne    1d2c98 <_PyEval_EvalFrameDefault+0x5c48>
    0.00 :   1d1744:       mov    %rbx,%rdx
    0.00 :   1d1747:       xor    %ecx,%ecx
    0.00 :   1d1749:       mov    %r8,%rsi
    0.00 :   1d174c:       mov    %r9,%rdi
    0.00 :   1d174f:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d1755:       mov    %rax,%rbx
    0.00 :   1d1758:       cmp    %rbp,%r15
    0.00 :   1d175b:       jb     1cd481 <_PyEval_EvalFrameDefault+0x431>
    0.00 :   1d1761:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d1766:       nopw   %cs:0x0(%rax,%rax,1)
         :            cmp_outcome():
    0.00 :   1d1770:       lea    0x79211(%rip),%r9        # 24a988 <_IO_stdin_used+0x11988>
    0.00 :   1d1777:       movslq (%r9,%rax,4),%rdi
    0.00 :   1d177b:       add    %r9,%rdi
    0.00 :   1d177e:       jmpq   *%rdi
    0.00 :   1d1780:       cmp    %r15,%rbx
    0.00 :   1d1783:       je     1d17fa <_PyEval_EvalFrameDefault+0x47aa>
    0.00 :   1d1785:       addq   $0x1,0x17aab3(%rip)        # 34c240 <_Py_FalseStruct>
    0.00 :   1d178d:       lea    0x17aaac(%rip),%rax        # 34c240 <_Py_FalseStruct>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1794:       subq   $0x1,(%r15)
    0.00 :   1d1798:       je     1d2229 <_PyEval_EvalFrameDefault+0x51d9>
    0.00 :   1d179e:       subq   $0x1,(%rbx)
    0.00 :   1d17a2:       je     1d21bd <_PyEval_EvalFrameDefault+0x516d>
    0.00 :   1d17a8:       mov    %rax,-0x8(%rbp)
    0.00 :   1d17ac:       mov    0x17af16(%rip),%ebx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d17b2:       test   %ebx,%ebx
    0.00 :   1d17b4:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d17ba:       mov    0x17af04(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d17c0:       mov    %r12,%r15
    0.00 :   1d17c3:       sub    0x8(%rsp),%r15
    0.00 :   1d17c8:       test   %eax,%eax
    0.00 :   1d17ca:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d17d0:       movzwl (%r12),%ecx
    0.00 :   1d17d5:       lea    0x110ee4(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d17dc:       mov    %r15d,0x68(%r13)
    0.00 :   1d17e0:       add    $0x2,%r12
    0.00 :   1d17e4:       movzbl %cl,%r11d
    0.00 :   1d17e8:       movzbl %ch,%edi
    0.00 :   1d17eb:       mov    %r11,%r8
    0.00 :   1d17ee:       movslq %edi,%r9
    0.00 :   1d17f1:       jmpq   *(%r10,%r11,8)
         :            cmp_outcome():
    0.00 :   1d17f5:       cmp    %r15,%rbx
    0.00 :   1d17f8:       je     1d1785 <_PyEval_EvalFrameDefault+0x4735>
    0.00 :   1d17fa:       addq   $0x1,0x17aa5e(%rip)        # 34c260 <_Py_TrueStruct>
    0.00 :   1d1802:       lea    0x17aa57(%rip),%rax        # 34c260 <_Py_TrueStruct>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1809:       subq   $0x1,(%r15)
    0.00 :   1d180d:       je     1d2229 <_PyEval_EvalFrameDefault+0x51d9>
    0.00 :   1d1813:       subq   $0x1,(%rbx)
    0.00 :   1d1817:       je     1d21bd <_PyEval_EvalFrameDefault+0x516d>
    0.00 :   1d181d:       mov    %rax,-0x8(%rbp)
    0.00 :   1d1821:       mov    0x17aea1(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1827:       test   %eax,%eax
    0.00 :   1d1829:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d182f:       mov    0x17ae8f(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1835:       mov    %r12,%r9
    0.00 :   1d1838:       sub    0x8(%rsp),%r9
    0.00 :   1d183d:       test   %eax,%eax
    0.00 :   1d183f:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1845:       movzwl (%r12),%ebx
    0.00 :   1d184a:       lea    0x110e6f(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1851:       mov    %r9d,0x68(%r13)
    0.00 :   1d1855:       add    $0x2,%r12
    0.00 :   1d1859:       movzbl %bl,%esi
    0.00 :   1d185c:       movzbl %bh,%edx
    0.00 :   1d185f:       mov    %rsi,%r8
    0.00 :   1d1862:       movslq %edx,%r9
    0.00 :   1d1865:       jmpq   *(%r15,%rsi,8)
         :            cmp_outcome():
    0.00 :   1d1869:       mov    %r15,%rsi
    0.00 :   1d186c:       mov    %rbx,%rdi
    0.00 :   1d186f:       addr32 callq 132d30 <PySequence_Contains>
    0.00 :   1d1875:       test   %eax,%eax
    0.00 :   1d1877:       js     1d35cc <_PyEval_EvalFrameDefault+0x657c>
    0.00 :   1d187d:       test   %eax,%eax
    0.00 :   1d187f:       je     1d1785 <_PyEval_EvalFrameDefault+0x4735>
    0.00 :   1d1885:       jmpq   1d17fa <_PyEval_EvalFrameDefault+0x47aa>
    0.00 :   1d188a:       mov    %r15,%rsi
    0.00 :   1d188d:       mov    %rbx,%rdi
    0.00 :   1d1890:       addr32 callq 132d30 <PySequence_Contains>
    0.00 :   1d1896:       test   %eax,%eax
    0.00 :   1d1898:       js     1d35cc <_PyEval_EvalFrameDefault+0x657c>
    0.00 :   1d189e:       sete   %r10b
    0.00 :   1d18a2:       movzbl %r10b,%eax
    0.00 :   1d18a6:       jmp    1d187d <_PyEval_EvalFrameDefault+0x482d>
    0.00 :   1d18a8:       mov    0x8(%rbx),%r8
    0.00 :   1d18ac:       mov    0xa8(%r8),%rax
    0.00 :   1d18b3:       test   $0x4000000,%eax
    0.00 :   1d18b8:       jne    1d37c6 <_PyEval_EvalFrameDefault+0x6776>
    0.00 :   1d18be:       test   $0x80000000,%eax
    0.00 :   1d18c3:       je     f1261 <_PyEval_EvalFrameDefault.cold.2897+0xcf4>
    0.00 :   1d18c9:       testb  $0x40,0xab(%rbx)
    0.00 :   1d18d0:       je     f1261 <_PyEval_EvalFrameDefault.cold.2897+0xcf4>
    0.00 :   1d18d6:       mov    %rbx,%rsi
    0.00 :   1d18d9:       mov    %r15,%rdi
    0.00 :   1d18dc:       addr32 callq 128170 <PyErr_GivenExceptionMatches>
    0.00 :   1d18e2:       jmp    1d187d <_PyEval_EvalFrameDefault+0x482d>
    0.00 :   1d18e4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1d18ef:       nop
         :            call_function():
    0.00 :   1d18f0:       mov    0x17b0d1(%rip),%r10        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d18f7:       test   %rbx,%rbx
    0.00 :   1d18fa:       jle    f0fe1 <_PyEval_EvalFrameDefault.cold.2897+0xa74>
    0.00 :   1d1900:       mov    0x30(%r10),%edi
    0.00 :   1d1904:       test   %edi,%edi
    0.00 :   1d1906:       jne    1d3837 <_PyEval_EvalFrameDefault+0x67e7>
    0.00 :   1d190c:       mov    %rbx,%rdx
    0.00 :   1d190f:       xor    %ecx,%ecx
    0.00 :   1d1911:       mov    %r8,%rsi
    0.00 :   1d1914:       mov    %r9,%rdi
    0.00 :   1d1917:       addr32 callq 16c730 <_PyMethodDescr_FastCallKeywords>
    0.00 :   1d191d:       mov    %rax,%rbx
    0.00 :   1d1920:       cmp    %rbp,%r15
    0.00 :   1d1923:       jb     1cd481 <_PyEval_EvalFrameDefault+0x431>
    0.00 :   1d1929:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d192e:       xchg   %ax,%ax
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1930:       subq   $0x1,(%r15)
    0.00 :   1d1934:       je     f1830 <_PyEval_EvalFrameDefault.cold.2897+0x12c3>
    0.00 :   1d193a:       mov    0x17ad84(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1940:       mov    %r12,%r9
    0.00 :   1d1943:       sub    0x8(%rsp),%r9
    0.00 :   1d1948:       test   %eax,%eax
    0.00 :   1d194a:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1950:       movzwl (%r12),%ecx
    0.00 :   1d1955:       lea    0x110d64(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d195c:       mov    %r9d,0x68(%r13)
    0.00 :   1d1960:       add    $0x2,%r12
    0.00 :   1d1964:       movzbl %cl,%r11d
    0.00 :   1d1968:       movzbl %ch,%edx
    0.00 :   1d196b:       mov    %r11,%r8
    0.00 :   1d196e:       movslq %edx,%r9
    0.00 :   1d1971:       jmpq   *(%r15,%r11,8)
    0.00 :   1d1975:       data16 nopw %cs:0x0(%rax,%rax,1)
         :            call_function():
    0.00 :   1d1980:       mov    %r10,%rbp
    0.00 :   1d1983:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d1988:       nopl   0x0(%rax,%rax,1)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1990:       mov    0x8(%rdi),%r15
    0.00 :   1d1994:       callq  *0x30(%r15)
    0.00 :   1d1998:       mov    0x17ad26(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d199e:       mov    %r12,%rcx
    0.00 :   1d19a1:       sub    0x8(%rsp),%rcx
    0.00 :   1d19a6:       test   %eax,%eax
    0.00 :   1d19a8:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d19ae:       movzwl (%r12),%ebx
    0.00 :   1d19b3:       lea    0x110d06(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d19ba:       mov    %ecx,0x68(%r13)
    0.00 :   1d19be:       add    $0x2,%r12
    0.00 :   1d19c2:       movzbl %bl,%edx
    0.00 :   1d19c5:       movzbl %bh,%edi
    0.00 :   1d19c8:       mov    %rdx,%r8
    0.00 :   1d19cb:       movslq %edi,%r9
    0.00 :   1d19ce:       jmpq   *(%r10,%rdx,8)
    0.00 :   1d19d2:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1d19dd:       nopl   (%rax)
         :            call_function():
    0.00 :   1d19e0:       mov    0x17afe1(%rip),%rcx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d19e7:       mov    0x30(%rcx),%edi
    0.00 :   1d19ea:       test   %edi,%edi
    0.00 :   1d19ec:       jne    1d3666 <_PyEval_EvalFrameDefault+0x6616>
    0.00 :   1d19f2:       mov    %rbx,%rdx
    0.00 :   1d19f5:       mov    %r9,%rdi
    0.00 :   1d19f8:       xor    %ecx,%ecx
    0.00 :   1d19fa:       mov    %r8,%rsi
    0.00 :   1d19fd:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d1a03:       mov    %rbp,%r9
    0.00 :   1d1a06:       mov    %rax,%rbx
    0.00 :   1d1a09:       cmp    %rbp,%r15
    0.00 :   1d1a0c:       jb     1cd70e <_PyEval_EvalFrameDefault+0x6be>
    0.00 :   1d1a12:       jmpq   1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1d1a17:       nopw   0x0(%rax,%rax,1)
    0.00 :   1d1a20:       mov    %r11,%rbp
    0.00 :   1d1a23:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d1a28:       nopl   0x0(%rax,%rax,1)
    0.00 :   1d1a30:       xor    %ecx,%ecx
    0.00 :   1d1a32:       mov    %rbx,%rdx
    0.00 :   1d1a35:       mov    %r9,%rdi
    0.00 :   1d1a38:       mov    %r9,0x40(%rsp)
    0.00 :   1d1a3d:       mov    %r8,%rsi
    0.00 :   1d1a40:       addr32 callq 16c810 <_PyObject_FastCallKeywords>
    0.00 :   1d1a46:       mov    0x40(%rsp),%r9
    0.00 :   1d1a4b:       mov    %rax,%rbx
    0.00 :   1d1a4e:       subq   $0x1,(%r9)
    0.00 :   1d1a52:       je     f26da <_PyEval_EvalFrameDefault.cold.2897+0x216d>
    0.00 :   1d1a58:       cmp    %rbp,%r15
    0.00 :   1d1a5b:       jb     1cd481 <_PyEval_EvalFrameDefault+0x431>
    0.00 :   1d1a61:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d1a66:       nopw   %cs:0x0(%rax,%rax,1)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1a70:       movslq %r9d,%r15
         :            call_function():
    0.00 :   1d1a73:       mov    %rbp,%r8
    0.00 :   1d1a76:       lea    0x177863(%rip),%rdi        # 3492e0 <PyCFunction_Type>
    0.00 :   1d1a7d:       lea    0x0(,%r15,8),%rax
    0.00 :   1d1a85:       sub    %rax,%r8
    0.00 :   1d1a88:       lea    -0x8(%r8),%rbx
    0.00 :   1d1a8c:       mov    (%rbx),%r9
    0.00 :   1d1a8f:       mov    0x8(%r9),%rcx
    0.00 :   1d1a93:       cmp    %rdi,%rcx
    0.00 :   1d1a96:       je     1d1e36 <_PyEval_EvalFrameDefault+0x4de6>
    0.00 :   1d1a9c:       lea    0x16c6dd(%rip),%rdx        # 33e180 <PyMethodDescr_Type>
    0.00 :   1d1aa3:       cmp    %rdx,%rcx
    0.00 :   1d1aa6:       je     1d1f14 <_PyEval_EvalFrameDefault+0x4ec4>
    0.00 :   1d1aac:       lea    0x16d22d(%rip),%r10        # 33ece0 <PyMethod_Type>
    0.00 :   1d1ab3:       cmp    %r10,%rcx
    0.00 :   1d1ab6:       je     1d23e8 <_PyEval_EvalFrameDefault+0x5398>
    0.00 :   1d1abc:       addq   $0x1,(%r9)
    0.00 :   1d1ac0:       lea    0x1795d9(%rip),%rax        # 34b0a0 <PyFunction_Type>
    0.00 :   1d1ac7:       mov    %r15,%rdx
    0.00 :   1d1aca:       mov    %r8,%rsi
    0.00 :   1d1acd:       mov    %r9,%rdi
    0.00 :   1d1ad0:       cmp    %rax,%rcx
    0.00 :   1d1ad3:       mov    %r9,0x40(%rsp)
    0.00 :   1d1ad8:       mov    $0x0,%ecx
    0.00 :   1d1add:       jne    1d2278 <_PyEval_EvalFrameDefault+0x5228>
    0.00 :   1d1ae3:       addr32 callq 164d30 <_PyFunction_FastCallKeywords>
    0.00 :   1d1ae9:       mov    0x40(%rsp),%r9
    0.00 :   1d1aee:       mov    %rax,%r15
    0.00 :   1d1af1:       subq   $0x1,(%r9)
    0.00 :   1d1af5:       je     f1cba <_PyEval_EvalFrameDefault.cold.2897+0x174d>
    0.00 :   1d1afb:       lea    -0x8(%rbp),%r11
    0.00 :   1d1aff:       cmp    %rbp,%rbx
    0.00 :   1d1b02:       jae    1d1bb0 <_PyEval_EvalFrameDefault+0x4b60>
    0.00 :   1d1b08:       mov    -0x8(%rbp),%rdi
    0.00 :   1d1b0c:       subq   $0x1,(%rdi)
    0.00 :   1d1b10:       je     1d26b3 <_PyEval_EvalFrameDefault+0x5663>
    0.00 :   1d1b16:       lea    -0x8(%r11),%rbp
    0.00 :   1d1b1a:       cmp    %r11,%rbx
    0.00 :   1d1b1d:       jae    1d211d <_PyEval_EvalFrameDefault+0x50cd>
    0.00 :   1d1b23:       mov    -0x8(%r11),%rdi
    0.00 :   1d1b27:       subq   $0x1,(%rdi)
    0.00 :   1d1b2b:       je     1d1b95 <_PyEval_EvalFrameDefault+0x4b45>
    0.00 :   1d1b2d:       lea    -0x10(%r11),%r9
    0.00 :   1d1b31:       cmp    %rbp,%rbx
    0.00 :   1d1b34:       jae    1d228b <_PyEval_EvalFrameDefault+0x523b>
    0.00 :   1d1b3a:       mov    -0x10(%r11),%rdi
    0.00 :   1d1b3e:       subq   $0x1,(%rdi)
    0.00 :   1d1b42:       je     1d2b40 <_PyEval_EvalFrameDefault+0x5af0>
    0.00 :   1d1b48:       lea    -0x18(%r11),%r8
    0.00 :   1d1b4c:       cmp    %r9,%rbx
    0.00 :   1d1b4f:       jae    1d22bd <_PyEval_EvalFrameDefault+0x526d>
    0.00 :   1d1b55:       mov    -0x18(%r11),%rdi
    0.00 :   1d1b59:       subq   $0x1,(%rdi)
    0.00 :   1d1b5d:       je     1d3123 <_PyEval_EvalFrameDefault+0x60d3>
    0.00 :   1d1b63:       lea    -0x20(%r11),%rbp
    0.00 :   1d1b67:       cmp    %r8,%rbx
    0.00 :   1d1b6a:       jae    1d2317 <_PyEval_EvalFrameDefault+0x52c7>
    0.00 :   1d1b70:       mov    -0x20(%r11),%rdi
    0.00 :   1d1b74:       subq   $0x1,(%rdi)
    0.00 :   1d1b78:       je     1d1b95 <_PyEval_EvalFrameDefault+0x4b45>
    0.00 :   1d1b7a:       sub    $0x8,%rbp
    0.00 :   1d1b7e:       lea    0x8(%rbp),%rdx
    0.00 :   1d1b82:       cmp    %rdx,%rbx
    0.00 :   1d1b85:       jae    1d243b <_PyEval_EvalFrameDefault+0x53eb>
    0.00 :   1d1b8b:       mov    0x0(%rbp),%rdi
    0.00 :   1d1b8f:       subq   $0x1,(%rdi)
    0.00 :   1d1b93:       jne    1d1b7a <_PyEval_EvalFrameDefault+0x4b2a>
    0.00 :   1d1b95:       mov    0x8(%rdi),%r10
    0.00 :   1d1b99:       callq  *0x30(%r10)
    0.00 :   1d1b9d:       lea    -0x8(%rbp),%r11
    0.00 :   1d1ba1:       cmp    %rbx,%rbp
    0.00 :   1d1ba4:       ja     1d1b08 <_PyEval_EvalFrameDefault+0x4ab8>
    0.00 :   1d1baa:       nopw   0x0(%rax,%rax,1)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1bb0:       lea    0x8(%r11),%rbp
    0.00 :   1d1bb4:       mov    %r15,(%r11)
    0.00 :   1d1bb7:       test   %r15,%r15
    0.00 :   1d1bba:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d1bc0:       mov    0x17ab02(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1bc6:       test   %eax,%eax
    0.00 :   1d1bc8:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d1bce:       mov    0x17aaf0(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1bd4:       mov    %r12,%rdi
    0.00 :   1d1bd7:       sub    0x8(%rsp),%rdi
    0.00 :   1d1bdc:       test   %eax,%eax
    0.00 :   1d1bde:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1be4:       movzwl (%r12),%ecx
    0.00 :   1d1be9:       lea    0x110ad0(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1bf0:       mov    %edi,0x68(%r13)
    0.00 :   1d1bf4:       add    $0x2,%r12
    0.00 :   1d1bf8:       movzbl %cl,%esi
    0.00 :   1d1bfb:       movzbl %ch,%ebx
    0.00 :   1d1bfe:       mov    %rsi,%r8
    0.00 :   1d1c01:       movslq %ebx,%r9
    0.00 :   1d1c04:       jmpq   *(%r11,%rsi,8)
    0.00 :   1d1c08:       nopl   0x0(%rax,%rax,1)
         :            call_function():
    0.00 :   1d1c10:       mov    0x17adb1(%rip),%rdx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d1c17:       test   %rbx,%rbx
    0.00 :   1d1c1a:       jle    f1383 <_PyEval_EvalFrameDefault.cold.2897+0xe16>
    0.00 :   1d1c20:       mov    0x30(%rdx),%ecx
    0.00 :   1d1c23:       test   %ecx,%ecx
    0.00 :   1d1c25:       jne    1d3f4e <_PyEval_EvalFrameDefault+0x6efe>
    0.00 :   1d1c2b:       mov    %rbx,%rdx
    0.00 :   1d1c2e:       mov    %r9,%rdi
    0.00 :   1d1c31:       xor    %ecx,%ecx
    0.00 :   1d1c33:       mov    %r8,%rsi
    0.00 :   1d1c36:       addr32 callq 16c730 <_PyMethodDescr_FastCallKeywords>
    0.00 :   1d1c3c:       mov    %rbp,%r9
    0.00 :   1d1c3f:       mov    %rax,%rbx
    0.00 :   1d1c42:       cmp    %rbp,%r15
    0.00 :   1d1c45:       jb     1cd70e <_PyEval_EvalFrameDefault+0x6be>
    0.00 :   1d1c4b:       jmpq   1cd7d0 <_PyEval_EvalFrameDefault+0x780>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1c50:       mov    %rcx,%rbp
    0.00 :   1d1c53:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1c58:       nopl   0x0(%rax,%rax,1)
    0.00 :   1d1c60:       movq   $0x0,-0x8(%rbp)
    0.00 :   1d1c68:       subq   $0x1,(%rbx)
    0.00 :   1d1c6c:       je     1d238a <_PyEval_EvalFrameDefault+0x533a>
    0.00 :   1d1c72:       mov    0x80(%rsp),%r9
    0.00 :   1d1c7a:       lea    0x8(%rbp),%r10
    0.00 :   1d1c7e:       mov    %r9,0x0(%rbp)
    0.00 :   1d1c82:       mov    0x17aa40(%rip),%ebp        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1c88:       test   %ebp,%ebp
    0.00 :   1d1c8a:       jne    1d361b <_PyEval_EvalFrameDefault+0x65cb>
    0.00 :   1d1c90:       mov    0x17aa2e(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1c96:       mov    %r12,%rcx
    0.00 :   1d1c99:       sub    0x8(%rsp),%rcx
    0.00 :   1d1c9e:       test   %eax,%eax
    0.00 :   1d1ca0:       jne    1d1cdc <_PyEval_EvalFrameDefault+0x4c8c>
    0.00 :   1d1ca2:       movzwl (%r12),%ebx
    0.00 :   1d1ca7:       mov    %ecx,0x68(%r13)
    0.00 :   1d1cab:       add    $0x2,%r12
    0.00 :   1d1caf:       mov    %r10,%rbp
    0.00 :   1d1cb2:       lea    0x110a07(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1cb9:       movzbl %bl,%edi
    0.00 :   1d1cbc:       movzbl %bh,%esi
    0.00 :   1d1cbf:       mov    (%r11,%rdi,8),%r15
    0.00 :   1d1cc3:       mov    %rdi,%r8
    0.00 :   1d1cc6:       movslq %esi,%r9
    0.00 :   1d1cc9:       jmpq   *%r15
         :            call_function():
    0.00 :   1d1ccc:       mov    %rcx,%rbp
    0.00 :   1d1ccf:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1cd4:       mov    %r15,%rbp
    0.00 :   1d1cd7:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1cdc:       mov    %r10,%rbp
    0.00 :   1d1cdf:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1ce4:       mov    %r9d,0x40(%rsp)
    0.00 :   1d1ce9:       mov    %r15,%rdi
    0.00 :   1d1cec:       addr32 callq fd680 <PyObject_IsTrue>
    0.00 :   1d1cf2:       subq   $0x1,(%r15)
    0.00 :   1d1cf6:       mov    0x40(%rsp),%edx
    0.00 :   1d1cfa:       je     1d2679 <_PyEval_EvalFrameDefault+0x5629>
    0.00 :   1d1d00:       cmp    $0x0,%eax
    0.00 :   1d1d03:       jle    1d1e62 <_PyEval_EvalFrameDefault+0x4e12>
    0.00 :   1d1d09:       mov    0x17a9b9(%rip),%esi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1d0f:       test   %esi,%esi
    0.00 :   1d1d11:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d1d17:       mov    0x17a9a7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1d1d:       mov    %r12,%r9
    0.00 :   1d1d20:       sub    0x8(%rsp),%r9
    0.00 :   1d1d25:       test   %eax,%eax
    0.00 :   1d1d27:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1d2d:       movzwl (%r12),%ebx
    0.00 :   1d1d32:       lea    0x110987(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1d39:       mov    %r9d,0x68(%r13)
    0.00 :   1d1d3d:       add    $0x2,%r12
    0.00 :   1d1d41:       movzbl %bl,%edi
    0.00 :   1d1d44:       movzbl %bh,%ecx
    0.00 :   1d1d47:       mov    %rdi,%r8
    0.00 :   1d1d4a:       movslq %ecx,%r9
    0.00 :   1d1d4d:       jmpq   *(%r11,%rdi,8)
    0.00 :   1d1d51:       mov    %r15,%rbp
    0.00 :   1d1d54:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1d59:       and    $0xfffffffffffffffe,%r9
    0.00 :   1d1d5d:       mov    %r12,0x8(%rsp)
    0.00 :   1d1d62:       lea    0x2(%r12,%r9,1),%r12
    0.00 :   1d1d67:       mov    0x48(%rsp),%r11d
    0.00 :   1d1d6c:       mov    $0xffffffff,%r10d
    0.00 :   1d1d72:       mov    0x48(%r13),%rbp
    0.00 :   1d1d76:       movb   $0x1,0x74(%r13)
    0.00 :   1d1d7b:       movq   $0x0,0x48(%r13)
    0.00 :   1d1d83:       test   %r11d,%r11d
    0.00 :   1d1d86:       mov    %r10d,0x68(%rsp)
    0.00 :   1d1d8b:       jne    1d356e <_PyEval_EvalFrameDefault+0x651e>
    0.00 :   1d1d91:       mov    %r10d,0x4c(%rsp)
    0.00 :   1d1d96:       movq   $0x0,0x20(%rsp)
    0.00 :   1d1d9f:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
         :            call_function():
    0.00 :   1d1da4:       mov    %rdx,%rbp
    0.00 :   1d1da7:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d1dac:       xor    %ecx,%ecx
    0.00 :   1d1dae:       mov    %rbx,%rdx
    0.00 :   1d1db1:       mov    %r9,%rdi
    0.00 :   1d1db4:       mov    %r9,0x40(%rsp)
    0.00 :   1d1db9:       mov    %r8,%rsi
    0.00 :   1d1dbc:       addr32 callq 16c810 <_PyObject_FastCallKeywords>
    0.00 :   1d1dc2:       mov    0x40(%rsp),%r9
    0.00 :   1d1dc7:       mov    %rax,%rbx
    0.00 :   1d1dca:       subq   $0x1,(%r9)
    0.00 :   1d1dce:       je     f1cdb <_PyEval_EvalFrameDefault.cold.2897+0x176e>
    0.00 :   1d1dd4:       mov    %rbp,%r9
    0.00 :   1d1dd7:       cmp    %rbp,%r15
    0.00 :   1d1dda:       jb     1cd70e <_PyEval_EvalFrameDefault+0x6be>
    0.00 :   1d1de0:       jmpq   1cd7d0 <_PyEval_EvalFrameDefault+0x780>
    0.00 :   1d1de5:       mov    0x18(%r9),%rsi
    0.00 :   1d1de9:       test   %rsi,%rsi
    0.00 :   1d1dec:       je     f1827 <_PyEval_EvalFrameDefault.cold.2897+0x12ba>
    0.00 :   1d1df2:       mov    0x10(%r9),%r11
    0.00 :   1d1df6:       addq   $0x1,(%rsi)
    0.00 :   1d1dfa:       addq   $0x1,(%r11)
    0.00 :   1d1dfe:       mov    %rsi,(%r15)
    0.00 :   1d1e01:       subq   $0x1,(%r9)
    0.00 :   1d1e05:       je     1d231f <_PyEval_EvalFrameDefault+0x52cf>
    0.00 :   1d1e0b:       mov    0x8(%r11),%rax
    0.00 :   1d1e0f:       add    $0x1,%rbx
    0.00 :   1d1e13:       mov    %r15,%r8
    0.00 :   1d1e16:       mov    %r11,%r9
    0.00 :   1d1e19:       lea    0x179280(%rip),%rdx        # 34b0a0 <PyFunction_Type>
    0.00 :   1d1e20:       cmp    %rdx,%rax
    0.00 :   1d1e23:       je     1cd450 <_PyEval_EvalFrameDefault+0x400>
    0.00 :   1d1e29:       jmpq   1d1a30 <_PyEval_EvalFrameDefault+0x49e0>
    0.00 :   1d1e2e:       mov    %rax,%rbp
    0.00 :   1d1e31:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d1e36:       mov    0x17ab8b(%rip),%r11        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d1e3d:       mov    0x30(%r11),%esi
    0.00 :   1d1e41:       test   %esi,%esi
    0.00 :   1d1e43:       jne    1d33e0 <_PyEval_EvalFrameDefault+0x6390>
    0.00 :   1d1e49:       mov    %r15,%rdx
    0.00 :   1d1e4c:       xor    %ecx,%ecx
    0.00 :   1d1e4e:       mov    %r8,%rsi
    0.00 :   1d1e51:       mov    %r9,%rdi
    0.00 :   1d1e54:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d1e5a:       mov    %rax,%r15
    0.00 :   1d1e5d:       jmpq   1d1afb <_PyEval_EvalFrameDefault+0x4aab>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1e62:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d1e68:       movslq %edx,%r12
    0.00 :   1d1e6b:       and    $0xfffffffffffffffe,%r12
    0.00 :   1d1e6f:       add    0x8(%rsp),%r12
    0.00 :   1d1e74:       jmpq   1d1d09 <_PyEval_EvalFrameDefault+0x4cb9>
    0.00 :   1d1e79:       mov    0x8(%rbx),%r10
    0.00 :   1d1e7d:       mov    %rax,0x40(%rsp)
    0.00 :   1d1e82:       mov    %rbx,%rdi
    0.00 :   1d1e85:       callq  *0x30(%r10)
    0.00 :   1d1e89:       subq   $0x1,(%r15)
    0.00 :   1d1e8d:       mov    0x40(%rsp),%rax
    0.00 :   1d1e92:       jne    1d1ea9 <_PyEval_EvalFrameDefault+0x4e59>
    0.00 :   1d1e94:       mov    0x8(%r15),%r11
    0.00 :   1d1e98:       mov    %rax,0x40(%rsp)
    0.00 :   1d1e9d:       mov    %r15,%rdi
    0.00 :   1d1ea0:       callq  *0x30(%r11)
    0.00 :   1d1ea4:       mov    0x40(%rsp),%rax
    0.00 :   1d1ea9:       mov    %rax,-0x8(%rbp)
    0.00 :   1d1ead:       test   %rax,%rax
    0.00 :   1d1eb0:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d1eb6:       mov    0x17a80c(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1ebc:       test   %eax,%eax
    0.00 :   1d1ebe:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d1ec4:       mov    0x17a7fa(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1eca:       mov    %r12,%r8
    0.00 :   1d1ecd:       sub    0x8(%rsp),%r8
    0.00 :   1d1ed2:       test   %eax,%eax
    0.00 :   1d1ed4:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1eda:       movzwl (%r12),%ecx
    0.00 :   1d1edf:       lea    0x1107da(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1ee6:       mov    %r8d,0x68(%r13)
    0.00 :   1d1eea:       add    $0x2,%r12
    0.00 :   1d1eee:       movzbl %cl,%edi
    0.00 :   1d1ef1:       movzbl %ch,%edx
    0.00 :   1d1ef4:       mov    %rdi,%r8
    0.00 :   1d1ef7:       movslq %edx,%r9
    0.00 :   1d1efa:       jmpq   *(%rsi,%rdi,8)
    0.00 :   1d1efd:       mov    0x8(%r15),%rcx
    0.00 :   1d1f01:       mov    %r15,%rdi
    0.00 :   1d1f04:       callq  *0x30(%rcx)
    0.00 :   1d1f07:       jmpq   1cddb8 <_PyEval_EvalFrameDefault+0xd68>
         :            call_function():
    0.00 :   1d1f0c:       mov    %r8,%rbp
    0.00 :   1d1f0f:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d1f14:       mov    0x17aaad(%rip),%rdi        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d1f1b:       test   %r15,%r15
    0.00 :   1d1f1e:       jle    1d1f2b <_PyEval_EvalFrameDefault+0x4edb>
    0.00 :   1d1f20:       mov    0x30(%rdi),%edx
    0.00 :   1d1f23:       test   %edx,%edx
    0.00 :   1d1f25:       jne    1d4334 <_PyEval_EvalFrameDefault+0x72e4>
    0.00 :   1d1f2b:       mov    %r15,%rdx
    0.00 :   1d1f2e:       xor    %ecx,%ecx
    0.00 :   1d1f30:       mov    %r8,%rsi
    0.00 :   1d1f33:       mov    %r9,%rdi
    0.00 :   1d1f36:       addr32 callq 16c730 <_PyMethodDescr_FastCallKeywords>
    0.00 :   1d1f3c:       mov    %rax,%r15
    0.00 :   1d1f3f:       jmpq   1d1afb <_PyEval_EvalFrameDefault+0x4aab>
    0.00 :   1d1f44:       mov    %r9d,0x40(%rsp)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1f49:       mov    %rbx,%rdi
    0.00 :   1d1f4c:       addr32 callq fd680 <PyObject_IsTrue>
    0.00 :   1d1f52:       subq   $0x1,(%rbx)
    0.00 :   1d1f56:       mov    0x40(%rsp),%esi
    0.00 :   1d1f5a:       je     1d3623 <_PyEval_EvalFrameDefault+0x65d3>
    0.00 :   1d1f60:       cmp    $0x0,%eax
    0.00 :   1d1f63:       jle    1d2594 <_PyEval_EvalFrameDefault+0x5544>
    0.00 :   1d1f69:       movslq %esi,%r12
    0.00 :   1d1f6c:       and    $0xfffffffffffffffe,%r12
    0.00 :   1d1f70:       add    0x8(%rsp),%r12
    0.00 :   1d1f75:       mov    0x17a74d(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d1f7b:       test   %edi,%edi
    0.00 :   1d1f7d:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d1f83:       mov    0x17a73b(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d1f89:       mov    %r12,%r9
    0.00 :   1d1f8c:       sub    0x8(%rsp),%r9
    0.00 :   1d1f91:       test   %eax,%eax
    0.00 :   1d1f93:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d1f99:       movzwl (%r12),%ecx
    0.00 :   1d1f9e:       lea    0x11071b(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d1fa5:       mov    %r9d,0x68(%r13)
    0.00 :   1d1fa9:       add    $0x2,%r12
    0.00 :   1d1fad:       movzbl %cl,%r11d
    0.00 :   1d1fb1:       movzbl %ch,%edx
    0.00 :   1d1fb4:       mov    %r11,%r8
    0.00 :   1d1fb7:       movslq %edx,%r9
    0.00 :   1d1fba:       jmpq   *(%r15,%r11,8)
         :            call_function():
    0.00 :   1d1fbe:       mov    %r10,%rbp
    0.00 :   1d1fc1:       jmpq   1cd532 <_PyEval_EvalFrameDefault+0x4e2>
    0.00 :   1d1fc6:       mov    %r8d,0x40(%rsp)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d1fcb:       addr32 callq 105c60 <PyErr_Occurred>
    0.00 :   1d1fd1:       movslq 0x40(%rsp),%rdi
    0.00 :   1d1fd6:       test   %rax,%rax
    0.00 :   1d1fd9:       jne    1d289c <_PyEval_EvalFrameDefault+0x584c>
    0.00 :   1d1fdf:       sub    $0x8,%rbp
    0.00 :   1d1fe3:       subq   $0x1,(%r15)
    0.00 :   1d1fe7:       jne    1d1ffd <_PyEval_EvalFrameDefault+0x4fad>
    0.00 :   1d1fe9:       mov    0x8(%r15),%r11
    0.00 :   1d1fed:       mov    %edi,0x40(%rsp)
    0.00 :   1d1ff1:       mov    %r15,%rdi
    0.00 :   1d1ff4:       callq  *0x30(%r11)
    0.00 :   1d1ff8:       movslq 0x40(%rsp),%rdi
    0.00 :   1d1ffd:       mov    0x17a6c5(%rip),%ecx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d2003:       and    $0xfffffffffffffffe,%rdi
    0.00 :   1d2007:       add    %rdi,%r12
    0.00 :   1d200a:       test   %ecx,%ecx
    0.00 :   1d200c:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d2012:       mov    0x17a6ac(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d2018:       mov    %r12,%rbx
    0.00 :   1d201b:       sub    0x8(%rsp),%rbx
    0.00 :   1d2020:       test   %eax,%eax
    0.00 :   1d2022:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d2028:       movzwl (%r12),%ecx
    0.00 :   1d202d:       lea    0x11068c(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d2034:       mov    %ebx,0x68(%r13)
    0.00 :   1d2038:       add    $0x2,%r12
    0.00 :   1d203c:       movzbl %cl,%edx
    0.00 :   1d203f:       movzbl %ch,%esi
    0.00 :   1d2042:       mov    %rdx,%r8
    0.00 :   1d2045:       movslq %esi,%r9
    0.00 :   1d2048:       jmpq   *(%r10,%rdx,8)
    0.00 :   1d204c:       mov    %r12,0x40(%rsp)
    0.00 :   1d2051:       sub    $0x1,%esi
    0.00 :   1d2054:       movslq %esi,%r15
    0.00 :   1d2057:       lea    (%r15,%r15,2),%rcx
    0.00 :   1d205b:       lea    0x0(%r13,%rcx,4),%rdi
    0.00 :   1d2060:       mov    0x78(%rdi),%r8d
    0.00 :   1d2064:       cmp    $0x78,%r8d
    0.00 :   1d2068:       je     1d22d5 <_PyEval_EvalFrameDefault+0x5285>
    0.00 :   1d206e:       mov    %esi,0x70(%r13)
    0.00 :   1d2072:       cmp    $0x101,%r8d
    0.00 :   1d2079:       je     1d2a68 <_PyEval_EvalFrameDefault+0x5a18>
    0.00 :   1d207f:       mov    0x40(%r13),%rdx
    0.00 :   1d2083:       lea    (%r15,%r15,2),%rdi
    0.00 :   1d2087:       mov    %rbp,%rcx
    0.00 :   1d208a:       lea    0x0(%r13,%rdi,4),%r12
    0.00 :   1d208f:       sub    %rdx,%rcx
    0.00 :   1d2092:       mov    0x80(%r12),%r8d
    0.00 :   1d209a:       sar    $0x3,%rcx
    0.00 :   1d209e:       mov    %ecx,%esi
    0.00 :   1d20a0:       cmp    %r8d,%ecx
    0.00 :   1d20a3:       jg     1d2399 <_PyEval_EvalFrameDefault+0x5349>
    0.00 :   1d20a9:       lea    (%r15,%r15,2),%r8
    0.00 :   1d20ad:       lea    0x0(%r13,%r8,4),%r10
    0.00 :   1d20b2:       mov    0x78(%r10),%r11d
    0.00 :   1d20b6:       cmp    $0x10,%ebx
    0.00 :   1d20b9:       jne    1d20c5 <_PyEval_EvalFrameDefault+0x5075>
    0.00 :   1d20bb:       cmp    $0x78,%r11d
    0.00 :   1d20bf:       je     1d2421 <_PyEval_EvalFrameDefault+0x53d1>
    0.00 :   1d20c5:       cmp    $0x2,%ebx
    0.00 :   1d20c8:       je     1d2480 <_PyEval_EvalFrameDefault+0x5430>
    0.00 :   1d20ce:       cmp    $0x7a,%r11d
    0.00 :   1d20d2:       je     1d280b <_PyEval_EvalFrameDefault+0x57bb>
    0.00 :   1d20d8:       cmp    $0x1,%ebx
    0.00 :   1d20db:       je     1d487b <_PyEval_EvalFrameDefault+0x782b>
    0.00 :   1d20e1:       mov    0x70(%r13),%esi
    0.00 :   1d20e5:       test   %esi,%esi
    0.00 :   1d20e7:       jg     1d2051 <_PyEval_EvalFrameDefault+0x5001>
    0.00 :   1d20ed:       mov    0x40(%r13),%rdx
    0.00 :   1d20f1:       mov    %rbp,%r15
    0.00 :   1d20f4:       sub    %rdx,%r15
    0.00 :   1d20f7:       sar    $0x3,%r15
    0.00 :   1d20fb:       test   %r15d,%r15d
    0.00 :   1d20fe:       jne    1d31df <_PyEval_EvalFrameDefault+0x618f>
    0.00 :   1d2104:       cmp    $0x8,%ebx
    0.00 :   1d2107:       mov    $0x0,%r8d
    0.00 :   1d210d:       cmove  0x20(%rsp),%r8
    0.00 :   1d2113:       mov    %r8,0x20(%rsp)
    0.00 :   1d2118:       jmpq   1ce119 <_PyEval_EvalFrameDefault+0x10c9>
         :            call_function():
    0.00 :   1d211d:       mov    %rbp,%r11
    0.00 :   1d2120:       jmpq   1d1bb0 <_PyEval_EvalFrameDefault+0x4b60>
    0.00 :   1d2125:       mov    0x18(%r9),%rsi
    0.00 :   1d2129:       test   %rsi,%rsi
    0.00 :   1d212c:       je     f0a03 <_PyEval_EvalFrameDefault.cold.2897+0x496>
    0.00 :   1d2132:       mov    0x10(%r9),%r10
    0.00 :   1d2136:       addq   $0x1,(%rsi)
    0.00 :   1d213a:       addq   $0x1,(%r10)
    0.00 :   1d213e:       mov    %rsi,(%r15)
    0.00 :   1d2141:       subq   $0x1,(%r9)
    0.00 :   1d2145:       je     1d25a0 <_PyEval_EvalFrameDefault+0x5550>
    0.00 :   1d214b:       mov    0x8(%r10),%rax
    0.00 :   1d214f:       add    $0x1,%rbx
    0.00 :   1d2153:       mov    %r15,%r8
    0.00 :   1d2156:       mov    %r10,%r9
    0.00 :   1d2159:       lea    0x178f40(%rip),%r11        # 34b0a0 <PyFunction_Type>
    0.00 :   1d2160:       cmp    %r11,%rax
    0.00 :   1d2163:       je     1cd6da <_PyEval_EvalFrameDefault+0x68a>
    0.00 :   1d2169:       jmpq   1d1dac <_PyEval_EvalFrameDefault+0x4d5c>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d216e:       subq   $0x1,(%rbx)
    0.00 :   1d2172:       je     f1e2f <_PyEval_EvalFrameDefault.cold.2897+0x18c2>
    0.00 :   1d2178:       mov    0x17a546(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d217e:       mov    %r12,%r8
    0.00 :   1d2181:       sub    0x8(%rsp),%r8
    0.00 :   1d2186:       test   %eax,%eax
    0.00 :   1d2188:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d218e:       movzwl (%r12),%ebx
    0.00 :   1d2193:       lea    0x110526(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d219a:       mov    %r8d,0x68(%r13)
    0.00 :   1d219e:       add    $0x2,%r12
    0.00 :   1d21a2:       movzbl %bl,%r11d
    0.00 :   1d21a6:       movzbl %bh,%edx
    0.00 :   1d21a9:       mov    %r11,%r8
    0.00 :   1d21ac:       movslq %edx,%r9
    0.00 :   1d21af:       jmpq   *(%r15,%r11,8)
    0.00 :   1d21b3:       mov    %r15,%rbp
    0.00 :   1d21b6:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d21bb:       xor    %eax,%eax
    0.00 :   1d21bd:       mov    0x8(%rbx),%r10
    0.00 :   1d21c1:       mov    %rax,0x40(%rsp)
    0.00 :   1d21c6:       mov    %rbx,%rdi
    0.00 :   1d21c9:       callq  *0x30(%r10)
    0.00 :   1d21cd:       mov    0x40(%rsp),%rax
    0.00 :   1d21d2:       mov    %rax,-0x8(%rbp)
    0.00 :   1d21d6:       test   %rax,%rax
    0.00 :   1d21d9:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d21df:       mov    0x17a4e3(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d21e5:       test   %edi,%edi
    0.00 :   1d21e7:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d21ed:       mov    0x17a4d1(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d21f3:       mov    %r12,%r9
    0.00 :   1d21f6:       sub    0x8(%rsp),%r9
    0.00 :   1d21fb:       test   %eax,%eax
    0.00 :   1d21fd:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d2203:       movzwl (%r12),%ebx
    0.00 :   1d2208:       lea    0x1104b1(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d220f:       mov    %r9d,0x68(%r13)
    0.00 :   1d2213:       add    $0x2,%r12
    0.00 :   1d2217:       movzbl %bl,%esi
    0.00 :   1d221a:       movzbl %bh,%edx
    0.00 :   1d221d:       mov    %rsi,%r8
    0.00 :   1d2220:       movslq %edx,%r9
    0.00 :   1d2223:       jmpq   *(%r15,%rsi,8)
    0.00 :   1d2227:       xor    %eax,%eax
    0.00 :   1d2229:       mov    0x8(%r15),%r11
    0.00 :   1d222d:       mov    %rax,0x40(%rsp)
    0.00 :   1d2232:       mov    %r15,%rdi
    0.00 :   1d2235:       callq  *0x30(%r11)
    0.00 :   1d2239:       subq   $0x1,(%rbx)
    0.00 :   1d223d:       mov    0x40(%rsp),%rax
    0.00 :   1d2242:       jne    1d21d2 <_PyEval_EvalFrameDefault+0x5182>
    0.00 :   1d2244:       jmpq   1d21bd <_PyEval_EvalFrameDefault+0x516d>
    0.00 :   1d2249:       nopl   0x0(%rax)
         :            call_function():
    0.00 :   1d2250:       mov    %r11,%rbp
    0.00 :   1d2253:       jmpq   1cd532 <_PyEval_EvalFrameDefault+0x4e2>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2258:       cmp    %r11,0x8(%rbx)
    0.00 :   1d225c:       jne    1ce07c <_PyEval_EvalFrameDefault+0x102c>
    0.00 :   1d2262:       mov    %r12,%rcx
    0.00 :   1d2265:       mov    %r13,%rdx
    0.00 :   1d2268:       mov    %rbx,%rsi
    0.00 :   1d226b:       mov    %r15,%rdi
    0.00 :   1d226e:       callq  16a370 <unicode_concatenate>
    0.00 :   1d2273:       jmpq   1ce092 <_PyEval_EvalFrameDefault+0x1042>
         :            call_function():
    0.00 :   1d2278:       addr32 callq 16c810 <_PyObject_FastCallKeywords>
    0.00 :   1d227e:       mov    0x40(%rsp),%r9
    0.00 :   1d2283:       mov    %rax,%r15
    0.00 :   1d2286:       jmpq   1d1af1 <_PyEval_EvalFrameDefault+0x4aa1>
    0.00 :   1d228b:       mov    %r9,%r11
    0.00 :   1d228e:       jmpq   1d1bb0 <_PyEval_EvalFrameDefault+0x4b60>
    0.00 :   1d2293:       mov    %r9,%rbp
    0.00 :   1d2296:       jmpq   1cd7af <_PyEval_EvalFrameDefault+0x75f>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d229b:       mov    0x8(%rbx),%r8
    0.00 :   1d229f:       mov    %rax,0x40(%rsp)
    0.00 :   1d22a4:       mov    %rbx,%rdi
    0.00 :   1d22a7:       callq  *0x30(%r8)
    0.00 :   1d22ab:       mov    0x40(%rsp),%rax
    0.00 :   1d22b0:       jmpq   1ce09c <_PyEval_EvalFrameDefault+0x104c>
         :            call_function():
    0.00 :   1d22b5:       mov    %rcx,%rbp
    0.00 :   1d22b8:       jmpq   1cd532 <_PyEval_EvalFrameDefault+0x4e2>
    0.00 :   1d22bd:       mov    %r8,%r11
    0.00 :   1d22c0:       jmpq   1d1bb0 <_PyEval_EvalFrameDefault+0x4b60>
    0.00 :   1d22c5:       mov    %r9,%rbp
    0.00 :   1d22c8:       jmpq   1cd7af <_PyEval_EvalFrameDefault+0x75f>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d22cd:       mov    %r15,%rbp
    0.00 :   1d22d0:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d22d5:       cmp    $0x20,%ebx
    0.00 :   1d22d8:       je     1d3589 <_PyEval_EvalFrameDefault+0x6539>
    0.00 :   1d22de:       mov    %esi,0x70(%r13)
    0.00 :   1d22e2:       jmpq   1d207f <_PyEval_EvalFrameDefault+0x502f>
         :            call_function():
    0.00 :   1d22e7:       mov    %rdx,%rbp
    0.00 :   1d22ea:       jmpq   1cd532 <_PyEval_EvalFrameDefault+0x4e2>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d22ef:       mov    0x18(%rax),%rsi
    0.00 :   1d22f3:       mov    -0x8(%rbp),%r10
    0.00 :   1d22f7:       movslq %r8d,%r9
    0.00 :   1d22fa:       lea    -0x2(%r15),%ebx
    0.00 :   1d22fe:       lea    -0x8(%rbp),%rdx
    0.00 :   1d2302:       mov    %r10,(%rsi,%r9,8)
    0.00 :   1d2306:       cmp    $0xffffffff,%ebx
    0.00 :   1d2309:       jne    1d2636 <_PyEval_EvalFrameDefault+0x55e6>
    0.00 :   1d230f:       mov    %rdx,%rbp
    0.00 :   1d2312:       jmpq   1ce709 <_PyEval_EvalFrameDefault+0x16b9>
         :            call_function():
    0.00 :   1d2317:       mov    %rbp,%r11
    0.00 :   1d231a:       jmpq   1d1bb0 <_PyEval_EvalFrameDefault+0x4b60>
    0.00 :   1d231f:       mov    %r11,0x40(%rsp)
    0.00 :   1d2324:       mov    %r9,%rdi
    0.00 :   1d2327:       callq  *0x30(%rax)
    0.00 :   1d232a:       mov    0x40(%rsp),%r11
    0.00 :   1d232f:       jmpq   1d1e0b <_PyEval_EvalFrameDefault+0x4dbb>
    0.00 :   1d2334:       mov    0x17a68d(%rip),%rbp        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d233b:       mov    0x30(%rbp),%edi
    0.00 :   1d233e:       test   %edi,%edi
    0.00 :   1d2340:       jne    1d33ce <_PyEval_EvalFrameDefault+0x637e>
    0.00 :   1d2346:       mov    %rbx,%rdx
    0.00 :   1d2349:       mov    0x40(%rsp),%rcx
    0.00 :   1d234e:       mov    %r8,%rsi
    0.00 :   1d2351:       mov    %r9,%rdi
    0.00 :   1d2354:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d235a:       mov    %rax,%rbx
    0.00 :   1d235d:       jmpq   1ce54b <_PyEval_EvalFrameDefault+0x14fb>
    0.00 :   1d2362:       mov    %r9,%rbp
    0.00 :   1d2365:       jmpq   1cd7af <_PyEval_EvalFrameDefault+0x75f>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d236a:       cmp    %r9,0x8(%rbx)
    0.00 :   1d236e:       jne    1ce422 <_PyEval_EvalFrameDefault+0x13d2>
    0.00 :   1d2374:       mov    %r12,%rcx
    0.00 :   1d2377:       mov    %r13,%rdx
    0.00 :   1d237a:       mov    %rbx,%rsi
    0.00 :   1d237d:       mov    %r15,%rdi
    0.00 :   1d2380:       callq  16a370 <unicode_concatenate>
    0.00 :   1d2385:       jmpq   1ce438 <_PyEval_EvalFrameDefault+0x13e8>
    0.00 :   1d238a:       mov    0x8(%rbx),%rax
    0.00 :   1d238e:       mov    %rbx,%rdi
    0.00 :   1d2391:       callq  *0x30(%rax)
    0.00 :   1d2394:       jmpq   1d1c72 <_PyEval_EvalFrameDefault+0x4c22>
    0.00 :   1d2399:       mov    -0x8(%rbp),%rdi
    0.00 :   1d239d:       lea    -0x8(%rbp),%r10
    0.00 :   1d23a1:       test   %rdi,%rdi
    0.00 :   1d23a4:       je     1d23ca <_PyEval_EvalFrameDefault+0x537a>
    0.00 :   1d23a6:       subq   $0x1,(%rdi)
    0.00 :   1d23aa:       jne    1d23ca <_PyEval_EvalFrameDefault+0x537a>
    0.00 :   1d23ac:       mov    0x8(%rdi),%r9
    0.00 :   1d23b0:       mov    %r10,0x50(%rsp)
    0.00 :   1d23b5:       callq  *0x30(%r9)
    0.00 :   1d23b9:       mov    0x40(%r13),%rdx
    0.00 :   1d23bd:       mov    0x50(%rsp),%r10
    0.00 :   1d23c2:       mov    0x80(%r12),%r8d
    0.00 :   1d23ca:       mov    %r10,%r11
    0.00 :   1d23cd:       sub    %rdx,%r11
    0.00 :   1d23d0:       sar    $0x3,%r11
    0.00 :   1d23d4:       mov    %r11d,%esi
    0.00 :   1d23d7:       cmp    %r8d,%r11d
    0.00 :   1d23da:       jg     1d291b <_PyEval_EvalFrameDefault+0x58cb>
    0.00 :   1d23e0:       mov    %r10,%rbp
    0.00 :   1d23e3:       jmpq   1d20a9 <_PyEval_EvalFrameDefault+0x5059>
         :            call_function():
    0.00 :   1d23e8:       mov    0x18(%r9),%rsi
    0.00 :   1d23ec:       test   %rsi,%rsi
    0.00 :   1d23ef:       je     1d1abc <_PyEval_EvalFrameDefault+0x4a6c>
    0.00 :   1d23f5:       mov    0x10(%r9),%r11
    0.00 :   1d23f9:       addq   $0x1,(%rsi)
    0.00 :   1d23fd:       addq   $0x1,(%r11)
    0.00 :   1d2401:       mov    %rsi,(%rbx)
    0.00 :   1d2404:       subq   $0x1,(%r9)
    0.00 :   1d2408:       je     1d310e <_PyEval_EvalFrameDefault+0x60be>
    0.00 :   1d240e:       add    $0x1,%r15
    0.00 :   1d2412:       mov    0x8(%r11),%rcx
    0.00 :   1d2416:       mov    %rbx,%r8
    0.00 :   1d2419:       mov    %r11,%r9
    0.00 :   1d241c:       jmpq   1d1ac0 <_PyEval_EvalFrameDefault+0x4a70>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2421:       movslq 0x7c(%r10),%r12
    0.00 :   1d2425:       and    $0xfffffffffffffffe,%r12
    0.00 :   1d2429:       add    0x8(%rsp),%r12
    0.00 :   1d242e:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
         :            call_function():
    0.00 :   1d2433:       mov    %rax,%rbp
    0.00 :   1d2436:       jmpq   1cd532 <_PyEval_EvalFrameDefault+0x4e2>
    0.00 :   1d243b:       mov    %rbp,%r11
    0.00 :   1d243e:       jmpq   1d1bb0 <_PyEval_EvalFrameDefault+0x4b60>
    0.00 :   1d2443:       mov    0x17a57e(%rip),%rbp        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d244a:       test   %rbx,%rbx
    0.00 :   1d244d:       jle    1d245c <_PyEval_EvalFrameDefault+0x540c>
    0.00 :   1d244f:       mov    0x30(%rbp),%r10d
    0.00 :   1d2453:       test   %r10d,%r10d
    0.00 :   1d2456:       jne    1d349e <_PyEval_EvalFrameDefault+0x644e>
    0.00 :   1d245c:       mov    %rbx,%rdx
    0.00 :   1d245f:       mov    0x40(%rsp),%rcx
    0.00 :   1d2464:       mov    %r8,%rsi
    0.00 :   1d2467:       mov    %r9,%rdi
    0.00 :   1d246a:       addr32 callq 16c730 <_PyMethodDescr_FastCallKeywords>
    0.00 :   1d2470:       mov    %rax,%rbx
    0.00 :   1d2473:       jmpq   1ce54b <_PyEval_EvalFrameDefault+0x14fb>
    0.00 :   1d2478:       mov    %rdx,%r15
    0.00 :   1d247b:       jmpq   1ce61a <_PyEval_EvalFrameDefault+0x15ca>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2480:       lea    -0x79(%r11),%r12d
    0.00 :   1d2484:       cmp    $0x1,%r12d
    0.00 :   1d2488:       ja     1d20ce <_PyEval_EvalFrameDefault+0x507e>
    0.00 :   1d248e:       lea    (%r15,%r15,2),%rax
    0.00 :   1d2492:       mov    0x90(%r14),%r12
    0.00 :   1d2499:       mov    $0xffffffff,%edx
    0.00 :   1d249e:       mov    %r13,%rdi
    0.00 :   1d24a1:       mov    0x7c(%r13,%rax,4),%ecx
    0.00 :   1d24a6:       mov    %ecx,0x40(%rsp)
    0.00 :   1d24aa:       mov    %esi,%ecx
    0.00 :   1d24ac:       mov    $0x101,%esi
    0.00 :   1d24b1:       addr32 callq 119d60 <PyFrame_BlockSetup>
    0.00 :   1d24b7:       mov    0x10(%r12),%rsi
    0.00 :   1d24bc:       mov    %rsi,0x0(%rbp)
    0.00 :   1d24c0:       mov    0x8(%r12),%rdi
    0.00 :   1d24c5:       mov    %rdi,0x8(%rbp)
    0.00 :   1d24c9:       mov    (%r12),%rdx
    0.00 :   1d24cd:       test   %rdx,%rdx
    0.00 :   1d24d0:       je     1d363f <_PyEval_EvalFrameDefault+0x65ef>
    0.00 :   1d24d6:       mov    %rdx,0x10(%rbp)
    0.00 :   1d24da:       lea    0x98(%rsp),%r8
    0.00 :   1d24e2:       lea    0x90(%rsp),%rbx
    0.00 :   1d24ea:       lea    0x88(%rsp),%r15
    0.00 :   1d24f2:       mov    %r8,%rdx
    0.00 :   1d24f5:       mov    %r8,0x50(%rsp)
    0.00 :   1d24fa:       mov    %rbx,%rsi
    0.00 :   1d24fd:       mov    %r15,%rdi
    0.00 :   1d2500:       addr32 callq 105c80 <PyErr_Fetch>
    0.00 :   1d2506:       mov    %rbx,%rsi
    0.00 :   1d2509:       mov    0x50(%rsp),%rdx
    0.00 :   1d250e:       mov    %r15,%rdi
    0.00 :   1d2511:       addr32 callq 127190 <PyErr_NormalizeException>
    0.00 :   1d2517:       mov    0x98(%rsp),%rsi
    0.00 :   1d251f:       test   %rsi,%rsi
    0.00 :   1d2522:       je     f1805 <_PyEval_EvalFrameDefault.cold.2897+0x1298>
    0.00 :   1d2528:       mov    0x90(%rsp),%rdi
    0.00 :   1d2530:       addr32 callq 134420 <PyException_SetTraceback>
    0.00 :   1d2536:       mov    0x88(%rsp),%r10
    0.00 :   1d253e:       addq   $0x1,(%r10)
    0.00 :   1d2542:       mov    %r10,(%r12)
    0.00 :   1d2546:       mov    0x90(%rsp),%r11
    0.00 :   1d254e:       addq   $0x1,(%r11)
    0.00 :   1d2552:       mov    %r11,0x8(%r12)
    0.00 :   1d2557:       mov    0x98(%rsp),%rax
    0.00 :   1d255f:       mov    %rax,0x10(%r12)
    0.00 :   1d2564:       test   %rax,%rax
    0.00 :   1d2567:       je     f17f9 <_PyEval_EvalFrameDefault.cold.2897+0x128c>
    0.00 :   1d256d:       movslq 0x40(%rsp),%r12
    0.00 :   1d2572:       addq   $0x1,(%rax)
    0.00 :   1d2576:       add    $0x30,%rbp
    0.00 :   1d257a:       mov    %rax,-0x18(%rbp)
    0.00 :   1d257e:       mov    %r11,-0x10(%rbp)
    0.00 :   1d2582:       and    $0xfffffffffffffffe,%r12
    0.00 :   1d2586:       add    0x8(%rsp),%r12
    0.00 :   1d258b:       mov    %r10,-0x8(%rbp)
    0.00 :   1d258f:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d2594:       je     1d1f75 <_PyEval_EvalFrameDefault+0x4f25>
    0.00 :   1d259a:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d259f:       nop
    0.00 :   1d25a0:       mov    %r10,0x40(%rsp)
         :            call_function():
    0.00 :   1d25a5:       mov    %r9,%rdi
    0.00 :   1d25a8:       callq  *0x30(%rax)
    0.00 :   1d25ab:       mov    0x40(%rsp),%r10
    0.00 :   1d25b0:       jmpq   1d214b <_PyEval_EvalFrameDefault+0x50fb>
    0.00 :   1d25b5:       mov    %r9,%rbp
    0.00 :   1d25b8:       jmpq   1cd7af <_PyEval_EvalFrameDefault+0x75f>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d25bd:       mov    0x40(%rsp),%rbp
    0.00 :   1d25c2:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d25c7:       mov    %rax,0x40(%rsp)
    0.00 :   1d25cc:       mov    0x8(%r15),%rax
    0.00 :   1d25d0:       mov    %r15,%rdi
    0.00 :   1d25d3:       callq  *0x30(%rax)
    0.00 :   1d25d6:       mov    0x40(%rsp),%rax
    0.00 :   1d25db:       jmpq   1ce092 <_PyEval_EvalFrameDefault+0x1042>
         :            call_function():
    0.00 :   1d25e0:       addr32 callq 16c810 <_PyObject_FastCallKeywords>
    0.00 :   1d25e6:       mov    0x50(%rsp),%r9
    0.00 :   1d25eb:       mov    %rax,%rbx
    0.00 :   1d25ee:       jmpq   1ce541 <_PyEval_EvalFrameDefault+0x14f1>
    0.00 :   1d25f3:       mov    %r10d,0x40(%rsp)
         :            maybe_call_line_trace():
    0.00 :   1d25f8:       mov    0x20(%r13),%rdi
    0.00 :   1d25fc:       lea    0x98(%rsp),%rdx
    0.00 :   1d2604:       addr32 callq 113c40 <_PyCode_CheckLineNumber>
    0.00 :   1d260a:       mov    0x98(%rsp),%esi
    0.00 :   1d2611:       mov    0x68(%r13),%r9d
    0.00 :   1d2615:       mov    0x9c(%rsp),%edi
    0.00 :   1d261c:       mov    0x40(%rsp),%r10d
    0.00 :   1d2621:       mov    %esi,0x48(%rsp)
    0.00 :   1d2625:       mov    %edi,0x68(%rsp)
    0.00 :   1d2629:       jmpq   1d16a9 <_PyEval_EvalFrameDefault+0x4659>
         :            call_function():
    0.00 :   1d262e:       mov    %rsi,%r15
    0.00 :   1d2631:       jmpq   1ce61a <_PyEval_EvalFrameDefault+0x15ca>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2636:       lea    -0x10(%rbp),%rdx
    0.00 :   1d263a:       mov    -0x10(%rbp),%rbp
    0.00 :   1d263e:       movslq %ebx,%rcx
    0.00 :   1d2641:       lea    -0x3(%r15),%r11d
    0.00 :   1d2645:       mov    %rbp,(%rsi,%rcx,8)
    0.00 :   1d2649:       cmp    $0xffffffff,%r11d
    0.00 :   1d264d:       je     1d230f <_PyEval_EvalFrameDefault+0x52bf>
    0.00 :   1d2653:       sub    $0x8,%rdx
    0.00 :   1d2657:       mov    (%rdx),%rdi
    0.00 :   1d265a:       movslq %r11d,%r15
    0.00 :   1d265d:       sub    $0x1,%r11d
    0.00 :   1d2661:       mov    %rdi,(%rsi,%r15,8)
    0.00 :   1d2665:       cmp    $0xffffffff,%r11d
    0.00 :   1d2669:       je     1d230f <_PyEval_EvalFrameDefault+0x52bf>
    0.00 :   1d266f:       jmp    1d2653 <_PyEval_EvalFrameDefault+0x5603>
         :            call_function():
    0.00 :   1d2671:       mov    %r9,%rbp
    0.00 :   1d2674:       jmpq   1cd7af <_PyEval_EvalFrameDefault+0x75f>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2679:       mov    0x8(%r15),%r10
    0.00 :   1d267d:       mov    %eax,0x50(%rsp)
    0.00 :   1d2681:       mov    %r15,%rdi
    0.00 :   1d2684:       callq  *0x30(%r10)
    0.00 :   1d2688:       mov    0x50(%rsp),%eax
    0.00 :   1d268c:       mov    0x40(%rsp),%edx
    0.00 :   1d2690:       jmpq   1d1d00 <_PyEval_EvalFrameDefault+0x4cb0>
    0.00 :   1d2695:       mov    0x8(%r11),%rax
    0.00 :   1d2699:       mov    %r11,%rdi
    0.00 :   1d269c:       callq  *0x30(%rax)
    0.00 :   1d269f:       jmpq   1ce850 <_PyEval_EvalFrameDefault+0x1800>
    0.00 :   1d26a4:       mov    0x8(%r15),%rsi
    0.00 :   1d26a8:       mov    %r15,%rdi
    0.00 :   1d26ab:       callq  *0x30(%rsi)
    0.00 :   1d26ae:       jmpq   1ce8e8 <_PyEval_EvalFrameDefault+0x1898>
         :            call_function():
    0.00 :   1d26b3:       mov    %r11,%rbp
    0.00 :   1d26b6:       jmpq   1d1b95 <_PyEval_EvalFrameDefault+0x4b45>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d26bb:       mov    %r15,%rdi
    0.00 :   1d26be:       addr32 callq 12f120 <PyLong_AsLong>
    0.00 :   1d26c4:       mov    %eax,%ebx
    0.00 :   1d26c6:       cmp    $0x8,%eax
    0.00 :   1d26c9:       je     1d26d0 <_PyEval_EvalFrameDefault+0x5680>
    0.00 :   1d26cb:       cmp    $0x20,%eax
    0.00 :   1d26ce:       jne    1d26dd <_PyEval_EvalFrameDefault+0x568d>
    0.00 :   1d26d0:       mov    -0x8(%rbp),%r9
    0.00 :   1d26d4:       sub    $0x8,%rbp
    0.00 :   1d26d8:       mov    %r9,0x20(%rsp)
    0.00 :   1d26dd:       cmp    $0x80,%eax
    0.00 :   1d26e2:       je     1d3288 <_PyEval_EvalFrameDefault+0x6238>
    0.00 :   1d26e8:       subq   $0x1,(%r15)
    0.00 :   1d26ec:       je     f0ad1 <_PyEval_EvalFrameDefault.cold.2897+0x564>
    0.00 :   1d26f2:       cmp    $0x1,%ebx
    0.00 :   1d26f5:       jne    1cd9b2 <_PyEval_EvalFrameDefault+0x962>
    0.00 :   1d26fb:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d2700:       lea    0x176869(%rip),%rsi        # 348f70 <_Py_NoneStruct>
    0.00 :   1d2707:       cmp    %rsi,%r15
    0.00 :   1d270a:       jne    f1b62 <_PyEval_EvalFrameDefault.cold.2897+0x15f5>
    0.00 :   1d2710:       mov    %rbx,%rdi
    0.00 :   1d2713:       callq  *0xe0(%rax)
    0.00 :   1d2719:       mov    %rax,0x20(%rsp)
    0.00 :   1d271e:       jmpq   1ceada <_PyEval_EvalFrameDefault+0x1a8a>
    0.00 :   1d2723:       lea    0x178256(%rip),%rax        # 34a980 <PyList_Type>
    0.00 :   1d272a:       movslq %r9d,%r11
    0.00 :   1d272d:       cmp    %rax,%rbx
    0.00 :   1d2730:       jne    1d2c70 <_PyEval_EvalFrameDefault+0x5c20>
    0.00 :   1d2736:       cmp    %r11,0x10(%r15)
    0.00 :   1d273a:       jne    1d2c70 <_PyEval_EvalFrameDefault+0x5c20>
    0.00 :   1d2740:       mov    0x18(%r15),%r8
    0.00 :   1d2744:       test   %r9d,%r9d
    0.00 :   1d2747:       je     1cddae <_PyEval_EvalFrameDefault+0xd5e>
    0.00 :   1d274d:       lea    -0x1(%r9),%edx
    0.00 :   1d2751:       lea    -0x2(%r9),%ebx
    0.00 :   1d2755:       movslq %edx,%rcx
    0.00 :   1d2758:       mov    (%r8,%rcx,8),%rsi
    0.00 :   1d275c:       addq   $0x1,(%rsi)
    0.00 :   1d2760:       mov    %rsi,0x0(%rbp)
    0.00 :   1d2764:       test   %edx,%edx
    0.00 :   1d2766:       je     1d27ce <_PyEval_EvalFrameDefault+0x577e>
    0.00 :   1d2768:       movslq %ebx,%rdi
    0.00 :   1d276b:       lea    -0x3(%r9),%eax
    0.00 :   1d276f:       mov    (%r8,%rdi,8),%r10
    0.00 :   1d2773:       addq   $0x1,(%r10)
    0.00 :   1d2777:       mov    %r10,0x8(%rbp)
    0.00 :   1d277b:       test   %ebx,%ebx
    0.00 :   1d277d:       je     1d27ce <_PyEval_EvalFrameDefault+0x577e>
    0.00 :   1d277f:       movslq %eax,%r11
    0.00 :   1d2782:       lea    -0x4(%r9),%esi
    0.00 :   1d2786:       mov    (%r8,%r11,8),%rcx
    0.00 :   1d278a:       addq   $0x1,(%rcx)
    0.00 :   1d278e:       mov    %rcx,0x10(%rbp)
    0.00 :   1d2792:       test   %eax,%eax
    0.00 :   1d2794:       je     1d27ce <_PyEval_EvalFrameDefault+0x577e>
    0.00 :   1d2796:       movslq %esi,%rbx
    0.00 :   1d2799:       lea    0x20(%rbp),%r10
    0.00 :   1d279d:       lea    -0x5(%r9),%r9d
    0.00 :   1d27a1:       mov    (%r8,%rbx,8),%rdi
    0.00 :   1d27a5:       addq   $0x1,(%rdi)
    0.00 :   1d27a9:       mov    %rdi,0x18(%rbp)
    0.00 :   1d27ad:       test   %esi,%esi
    0.00 :   1d27af:       je     1d27ce <_PyEval_EvalFrameDefault+0x577e>
    0.00 :   1d27b1:       movslq %r9d,%rax
    0.00 :   1d27b4:       add    $0x8,%r10
    0.00 :   1d27b8:       sub    $0x1,%r9d
    0.00 :   1d27bc:       mov    (%r8,%rax,8),%r11
    0.00 :   1d27c0:       addq   $0x1,(%r11)
    0.00 :   1d27c4:       mov    %r11,-0x8(%r10)
    0.00 :   1d27c8:       cmp    $0xffffffff,%r9d
    0.00 :   1d27cc:       jne    1d27b1 <_PyEval_EvalFrameDefault+0x5761>
    0.00 :   1d27ce:       mov    %edx,%r8d
    0.00 :   1d27d1:       lea    0x8(%rbp,%r8,8),%rbp
    0.00 :   1d27d6:       jmpq   1cddae <_PyEval_EvalFrameDefault+0xd5e>
    0.00 :   1d27db:       mov    %rbx,%rsi
    0.00 :   1d27de:       mov    %r15,%rdi
    0.00 :   1d27e1:       addr32 callq 12d390 <PyNumber_Remainder>
    0.00 :   1d27e7:       jmpq   1cef82 <_PyEval_EvalFrameDefault+0x1f32>
    0.00 :   1d27ec:       callq  *0x110f96(%rip)        # 2e3788 <__stack_chk_fail@GLIBC_2.4>
    0.00 :   1d27f2:       mov    %rax,0x40(%rsp)
    0.00 :   1d27f7:       mov    0x8(%rbx),%rax
    0.00 :   1d27fb:       mov    %rbx,%rdi
    0.00 :   1d27fe:       callq  *0x30(%rax)
    0.00 :   1d2801:       mov    0x40(%rsp),%rax
    0.00 :   1d2806:       jmpq   1ce442 <_PyEval_EvalFrameDefault+0x13f2>
    0.00 :   1d280b:       lea    0x8(%rbp),%r12
    0.00 :   1d280f:       test   $0x28,%bl
    0.00 :   1d2812:       je     1d42ec <_PyEval_EvalFrameDefault+0x729c>
    0.00 :   1d2818:       mov    0x20(%rsp),%r10
    0.00 :   1d281d:       mov    %r10,0x0(%rbp)
    0.00 :   1d2821:       mov    %ebx,%edi
    0.00 :   1d2823:       mov    %r15,0x40(%rsp)
    0.00 :   1d2828:       lea    0x8(%r12),%rbp
    0.00 :   1d282d:       addr32 callq 13af10 <PyLong_FromLong>
    0.00 :   1d2833:       mov    0x40(%rsp),%rbx
    0.00 :   1d2838:       mov    %rax,(%r12)
    0.00 :   1d283c:       lea    (%rbx,%rbx,2),%r11
    0.00 :   1d2840:       movslq 0x7c(%r13,%r11,4),%r12
    0.00 :   1d2845:       and    $0xfffffffffffffffe,%r12
    0.00 :   1d2849:       add    0x8(%rsp),%r12
    0.00 :   1d284e:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d2853:       addr32 callq 131df0 <PyObject_GetItem>
    0.00 :   1d2859:       test   %rax,%rax
    0.00 :   1d285c:       jne    1cedd4 <_PyEval_EvalFrameDefault+0x1d84>
    0.00 :   1d2862:       mov    0x166647(%rip),%rdi        # 338eb0 <PyExc_KeyError>
    0.00 :   1d2869:       addr32 callq 128250 <PyErr_ExceptionMatches>
    0.00 :   1d286f:       test   %eax,%eax
    0.00 :   1d2871:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d2877:       addr32 callq 105cc0 <PyErr_Clear>
    0.00 :   1d287d:       mov    0x30(%r13),%rdi
    0.00 :   1d2881:       mov    %rbx,%rsi
    0.00 :   1d2884:       addr32 callq 1197b0 <PyDict_GetItem>
    0.00 :   1d288a:       test   %rax,%rax
    0.00 :   1d288d:       je     1d2b88 <_PyEval_EvalFrameDefault+0x5b38>
    0.00 :   1d2893:       addq   $0x1,(%rax)
    0.00 :   1d2897:       jmpq   1cedd4 <_PyEval_EvalFrameDefault+0x1d84>
    0.00 :   1d289c:       mov    0x1684ed(%rip),%rdi        # 33ad90 <PyExc_StopIteration>
    0.00 :   1d28a3:       addr32 callq 128250 <PyErr_ExceptionMatches>
    0.00 :   1d28a9:       test   %eax,%eax
    0.00 :   1d28ab:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d28b1:       mov    0x40(%r14),%rdi
    0.00 :   1d28b5:       mov    0x40(%rsp),%r9d
    0.00 :   1d28ba:       test   %rdi,%rdi
    0.00 :   1d28bd:       jne    1d4690 <_PyEval_EvalFrameDefault+0x7640>
    0.00 :   1d28c3:       mov    %r9d,0x40(%rsp)
    0.00 :   1d28c8:       addr32 callq 105cc0 <PyErr_Clear>
    0.00 :   1d28ce:       movslq 0x40(%rsp),%rdi
    0.00 :   1d28d3:       jmpq   1d1fdf <_PyEval_EvalFrameDefault+0x4f8f>
    0.00 :   1d28d8:       mov    0x8(%rdi),%r9
    0.00 :   1d28dc:       callq  *0x30(%r9)
    0.00 :   1d28e0:       mov    0x179dde(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d28e6:       mov    %r12,%r8
    0.00 :   1d28e9:       sub    0x8(%rsp),%r8
    0.00 :   1d28ee:       test   %eax,%eax
    0.00 :   1d28f0:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d28f6:       movzwl (%r12),%ecx
    0.00 :   1d28fb:       lea    0x10fdbe(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d2902:       mov    %r8d,0x68(%r13)
    0.00 :   1d2906:       add    $0x2,%r12
    0.00 :   1d290a:       movzbl %cl,%r11d
    0.00 :   1d290e:       movzbl %ch,%ebx
    0.00 :   1d2911:       mov    %r11,%r8
    0.00 :   1d2914:       movslq %ebx,%r9
    0.00 :   1d2917:       jmpq   *(%r15,%r11,8)
    0.00 :   1d291b:       mov    -0x10(%rbp),%rdi
    0.00 :   1d291f:       lea    -0x10(%rbp),%r12
    0.00 :   1d2923:       test   %rdi,%rdi
    0.00 :   1d2926:       je     1d2945 <_PyEval_EvalFrameDefault+0x58f5>
    0.00 :   1d2928:       subq   $0x1,(%rdi)
    0.00 :   1d292c:       jne    1d2945 <_PyEval_EvalFrameDefault+0x58f5>
    0.00 :   1d292e:       mov    0x8(%rdi),%rbp
    0.00 :   1d2932:       callq  *0x30(%rbp)
    0.00 :   1d2935:       lea    (%r15,%r15,2),%rax
    0.00 :   1d2939:       mov    0x40(%r13),%rdx
    0.00 :   1d293d:       mov    0x80(%r13,%rax,4),%r8d
    0.00 :   1d2945:       mov    %r12,%rdi
    0.00 :   1d2948:       mov    %r12,%rbp
    0.00 :   1d294b:       sub    %rdx,%rdi
    0.00 :   1d294e:       sar    $0x3,%rdi
    0.00 :   1d2952:       mov    %edi,%esi
    0.00 :   1d2954:       cmp    %r8d,%edi
    0.00 :   1d2957:       jle    1d20a9 <_PyEval_EvalFrameDefault+0x5059>
    0.00 :   1d295d:       lea    (%r15,%r15,2),%rcx
    0.00 :   1d2961:       lea    0x0(%r13,%rcx,4),%rbp
    0.00 :   1d2966:       sub    $0x8,%r12
    0.00 :   1d296a:       mov    (%r12),%rdi
    0.00 :   1d296e:       test   %rdi,%rdi
    0.00 :   1d2971:       je     1d298b <_PyEval_EvalFrameDefault+0x593b>
    0.00 :   1d2973:       subq   $0x1,(%rdi)
    0.00 :   1d2977:       jne    1d298b <_PyEval_EvalFrameDefault+0x593b>
    0.00 :   1d2979:       mov    0x8(%rdi),%rdx
    0.00 :   1d297d:       callq  *0x30(%rdx)
    0.00 :   1d2980:       mov    0x40(%r13),%rdx
    0.00 :   1d2984:       mov    0x80(%rbp),%r8d
    0.00 :   1d298b:       mov    %r12,%r9
    0.00 :   1d298e:       sub    %rdx,%r9
    0.00 :   1d2991:       sar    $0x3,%r9
    0.00 :   1d2995:       mov    %r9d,%esi
    0.00 :   1d2998:       cmp    %r8d,%r9d
    0.00 :   1d299b:       jg     1d2966 <_PyEval_EvalFrameDefault+0x5916>
    0.00 :   1d299d:       mov    %r12,%rbp
    0.00 :   1d29a0:       jmpq   1d20a9 <_PyEval_EvalFrameDefault+0x5059>
    0.00 :   1d29a5:       mov    0x40(%rsp),%rcx
    0.00 :   1d29aa:       mov    -0x10(%rcx),%rdx
    0.00 :   1d29ae:       lea    -0x10(%rcx),%rbx
    0.00 :   1d29b2:       mov    %rdx,0x30(%rax)
    0.00 :   1d29b6:       jmpq   1cea2f <_PyEval_EvalFrameDefault+0x19df>
         :            maybe_call_line_trace():
    0.00 :   1d29bb:       cmpb   $0x0,0x58(%r13)
    0.00 :   1d29c0:       mov    %eax,0x6c(%r13)
    0.00 :   1d29c4:       je     1d16bf <_PyEval_EvalFrameDefault+0x466f>
         :            call_trace():
    0.00 :   1d29ca:       mov    0x2c(%r14),%r8d
    0.00 :   1d29ce:       test   %r8d,%r8d
    0.00 :   1d29d1:       jne    1d16bf <_PyEval_EvalFrameDefault+0x466f>
    0.00 :   1d29d7:       movq   $0x1,0x2c(%r14)
    0.00 :   1d29df:       lea    0x17658a(%rip),%rcx        # 348f70 <_Py_NoneStruct>
    0.00 :   1d29e6:       mov    %r13,%rsi
    0.00 :   1d29e9:       mov    %r12,%rdi
    0.00 :   1d29ec:       mov    $0x2,%edx
    0.00 :   1d29f1:       callq  *%r15
    0.00 :   1d29f4:       cmpq   $0x0,0x40(%r14)
    0.00 :   1d29f9:       mov    %eax,%r10d
    0.00 :   1d29fc:       je     1d3435 <_PyEval_EvalFrameDefault+0x63e5>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2a02:       mov    $0x1,%ebx
         :            call_trace():
    0.00 :   1d2a07:       mov    %ebx,0x30(%r14)
    0.00 :   1d2a0b:       subl   $0x1,0x2c(%r14)
    0.00 :   1d2a10:       jmpq   1d16bf <_PyEval_EvalFrameDefault+0x466f>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2a15:       lea    0x179824(%rip),%r10        # 34c240 <_Py_FalseStruct>
    0.00 :   1d2a1c:       cmp    %r10,%rbx
    0.00 :   1d2a1f:       jne    1d312b <_PyEval_EvalFrameDefault+0x60db>
    0.00 :   1d2a25:       movslq %r9d,%rdx
    0.00 :   1d2a28:       mov    0x8(%rsp),%r12
    0.00 :   1d2a2d:       mov    0x179c91(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d2a33:       and    $0xfffffffffffffffe,%rdx
    0.00 :   1d2a37:       lea    (%r12,%rdx,1),%r12
    0.00 :   1d2a3b:       test   %eax,%eax
    0.00 :   1d2a3d:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d2a43:       movzwl (%r12),%ebx
    0.00 :   1d2a48:       lea    0x10fc71(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d2a4f:       mov    %edx,0x68(%r13)
    0.00 :   1d2a53:       add    $0x2,%r12
    0.00 :   1d2a57:       movzbl %bl,%r10d
    0.00 :   1d2a5b:       movzbl %bh,%esi
    0.00 :   1d2a5e:       mov    %r10,%r8
    0.00 :   1d2a61:       movslq %esi,%r9
    0.00 :   1d2a64:       jmpq   *(%rdi,%r10,8)
    0.00 :   1d2a68:       mov    %rdi,%r15
    0.00 :   1d2a6b:       mov    0x80(%r15),%eax
    0.00 :   1d2a72:       mov    0x40(%r13),%r12
    0.00 :   1d2a76:       mov    %rbp,%r11
    0.00 :   1d2a79:       add    $0x3,%eax
    0.00 :   1d2a7c:       mov    %rbp,%r9
    0.00 :   1d2a7f:       sub    %r12,%r9
    0.00 :   1d2a82:       sar    $0x3,%r9
    0.00 :   1d2a86:       cmp    %r9d,%eax
    0.00 :   1d2a89:       jl     1d3525 <_PyEval_EvalFrameDefault+0x64d5>
    0.00 :   1d2a8f:       mov    0x90(%r14),%rax
    0.00 :   1d2a96:       mov    -0x8(%rbp),%rdx
    0.00 :   1d2a9a:       sub    $0x18,%rbp
    0.00 :   1d2a9e:       mov    (%rax),%rdi
    0.00 :   1d2aa1:       mov    0x8(%rax),%r12
    0.00 :   1d2aa5:       mov    %rdx,(%rax)
    0.00 :   1d2aa8:       mov    0x8(%rbp),%rcx
    0.00 :   1d2aac:       mov    0x10(%rax),%r15
    0.00 :   1d2ab0:       mov    %rcx,0x8(%rax)
    0.00 :   1d2ab4:       mov    -0x18(%r11),%r8
    0.00 :   1d2ab8:       mov    %r8,0x10(%rax)
    0.00 :   1d2abc:       test   %rdi,%rdi
    0.00 :   1d2abf:       je     1d2acb <_PyEval_EvalFrameDefault+0x5a7b>
    0.00 :   1d2ac1:       subq   $0x1,(%rdi)
    0.00 :   1d2ac5:       je     f187a <_PyEval_EvalFrameDefault.cold.2897+0x130d>
    0.00 :   1d2acb:       test   %r12,%r12
    0.00 :   1d2ace:       je     1d2ae3 <_PyEval_EvalFrameDefault+0x5a93>
    0.00 :   1d2ad0:       subq   $0x1,(%r12)
    0.00 :   1d2ad5:       jne    1d2ae3 <_PyEval_EvalFrameDefault+0x5a93>
    0.00 :   1d2ad7:       mov    0x8(%r12),%r10
    0.00 :   1d2adc:       mov    %r12,%rdi
    0.00 :   1d2adf:       callq  *0x30(%r10)
    0.00 :   1d2ae3:       test   %r15,%r15
    0.00 :   1d2ae6:       je     1d20d8 <_PyEval_EvalFrameDefault+0x5088>
    0.00 :   1d2aec:       subq   $0x1,(%r15)
    0.00 :   1d2af0:       jne    1d20d8 <_PyEval_EvalFrameDefault+0x5088>
    0.00 :   1d2af6:       mov    0x8(%r15),%r11
    0.00 :   1d2afa:       mov    %r15,%rdi
    0.00 :   1d2afd:       callq  *0x30(%r11)
    0.00 :   1d2b01:       jmpq   1d20d8 <_PyEval_EvalFrameDefault+0x5088>
         :            call_function():
    0.00 :   1d2b06:       mov    %r8,%r15
    0.00 :   1d2b09:       jmpq   1ce61a <_PyEval_EvalFrameDefault+0x15ca>
    0.00 :   1d2b0e:       mov    %rax,0x40(%rsp)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2b13:       mov    0x8(%r15),%rax
    0.00 :   1d2b17:       mov    %r15,%rdi
    0.00 :   1d2b1a:       callq  *0x30(%rax)
    0.00 :   1d2b1d:       mov    0x40(%rsp),%rax
    0.00 :   1d2b22:       jmpq   1ce1e0 <_PyEval_EvalFrameDefault+0x1190>
    0.00 :   1d2b27:       mov    %rax,0x40(%rsp)
    0.00 :   1d2b2c:       mov    0x8(%rbx),%rax
    0.00 :   1d2b30:       mov    %rbx,%rdi
    0.00 :   1d2b33:       callq  *0x30(%rax)
    0.00 :   1d2b36:       mov    0x40(%rsp),%rax
    0.00 :   1d2b3b:       jmpq   1ce2fa <_PyEval_EvalFrameDefault+0x12aa>
         :            call_function():
    0.00 :   1d2b40:       mov    %r9,%rbp
    0.00 :   1d2b43:       jmpq   1d1b95 <_PyEval_EvalFrameDefault+0x4b45>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2b48:       mov    0x8(%rbx),%r8
    0.00 :   1d2b4c:       mov    %rax,0x40(%rsp)
    0.00 :   1d2b51:       mov    %rbx,%rdi
    0.00 :   1d2b54:       callq  *0x30(%r8)
    0.00 :   1d2b58:       mov    0x40(%rsp),%rax
    0.00 :   1d2b5d:       jmpq   1cef8c <_PyEval_EvalFrameDefault+0x1f3c>
         :            call_function():
    0.00 :   1d2b62:       mov    %r9,%r15
    0.00 :   1d2b65:       jmpq   1ce61a <_PyEval_EvalFrameDefault+0x15ca>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2b6a:       mov    0x8(%r15),%r8
    0.00 :   1d2b6e:       mov    %r15,%rdi
    0.00 :   1d2b71:       callq  *0x30(%r8)
    0.00 :   1d2b75:       jmpq   1ce85a <_PyEval_EvalFrameDefault+0x180a>
    0.00 :   1d2b7a:       movq   $0x0,0x20(%rsp)
    0.00 :   1d2b83:       jmpq   1ce119 <_PyEval_EvalFrameDefault+0x10c9>
    0.00 :   1d2b88:       mov    0x28(%r13),%rdi
    0.00 :   1d2b8c:       cmp    %r15,0x8(%rdi)
    0.00 :   1d2b90:       jne    1d4e41 <_PyEval_EvalFrameDefault+0x7df1>
    0.00 :   1d2b96:       mov    %rbx,%rsi
    0.00 :   1d2b99:       addr32 callq 1197b0 <PyDict_GetItem>
    0.00 :   1d2b9f:       test   %rax,%rax
    0.00 :   1d2ba2:       je     1d43d4 <_PyEval_EvalFrameDefault+0x7384>
    0.00 :   1d2ba8:       addq   $0x1,(%rax)
    0.00 :   1d2bac:       jmpq   1cedd4 <_PyEval_EvalFrameDefault+0x1d84>
         :            do_call_core():
    0.00 :   1d2bb1:       mov    0x179e10(%rip),%rbx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d2bb8:       mov    0x30(%rbx),%edi
    0.00 :   1d2bbb:       test   %edi,%edi
    0.00 :   1d2bbd:       jne    1d42ae <_PyEval_EvalFrameDefault+0x725e>
    0.00 :   1d2bc3:       mov    %r10,%rsi
    0.00 :   1d2bc6:       mov    %r10,0x58(%rsp)
    0.00 :   1d2bcb:       mov    %r15,%rdx
    0.00 :   1d2bce:       mov    0x40(%rsp),%rdi
    0.00 :   1d2bd3:       addr32 callq 1367e0 <PyCFunction_Call>
    0.00 :   1d2bd9:       mov    0x58(%rsp),%r10
    0.00 :   1d2bde:       mov    %rax,%r9
    0.00 :   1d2be1:       jmpq   1cee9f <_PyEval_EvalFrameDefault+0x1e4f>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2be6:       mov    %r15,%rbp
    0.00 :   1d2be9:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d2bee:       mov    0x8(%r15),%rax
    0.00 :   1d2bf2:       testb  $0x1,0xab(%rax)
    0.00 :   1d2bf9:       je     1d2e31 <_PyEval_EvalFrameDefault+0x5de1>
    0.00 :   1d2bff:       lea    -0x8(%rbp),%rbx
    0.00 :   1d2c03:       mov    %r15,%rdi
    0.00 :   1d2c06:       addr32 callq 12f120 <PyLong_AsLong>
    0.00 :   1d2c0c:       cmp    $0x8,%rax
    0.00 :   1d2c10:       je     1d2c1c <_PyEval_EvalFrameDefault+0x5bcc>
    0.00 :   1d2c12:       cmp    $0x20,%rax
    0.00 :   1d2c16:       jne    f25c2 <_PyEval_EvalFrameDefault.cold.2897+0x2055>
    0.00 :   1d2c1c:       mov    -0x8(%rbx),%rbp
    0.00 :   1d2c20:       lea    0x176349(%rip),%rcx        # 348f70 <_Py_NoneStruct>
    0.00 :   1d2c27:       mov    -0x10(%rbx),%r8
    0.00 :   1d2c2b:       mov    %r15,-0x8(%rbx)
    0.00 :   1d2c2f:       mov    %rcx,%rdi
    0.00 :   1d2c32:       mov    %rcx,%r15
    0.00 :   1d2c35:       mov    %rbp,-0x10(%rbx)
    0.00 :   1d2c39:       jmpq   1cf112 <_PyEval_EvalFrameDefault+0x20c2>
    0.00 :   1d2c3e:       mov    -0x8(%rbx),%r11
    0.00 :   1d2c42:       sub    $0x8,%rbx
    0.00 :   1d2c46:       mov    %r11,0x20(%rax)
    0.00 :   1d2c4a:       jmpq   1cea4d <_PyEval_EvalFrameDefault+0x19fd>
    0.00 :   1d2c4f:       mov    0x8(%rdi),%r11
    0.00 :   1d2c53:       mov    %r9,0x60(%rsp)
    0.00 :   1d2c58:       mov    %r10,0x58(%rsp)
    0.00 :   1d2c5d:       callq  *0x30(%r11)
    0.00 :   1d2c61:       mov    0x60(%rsp),%r9
    0.00 :   1d2c66:       mov    0x58(%rsp),%r10
    0.00 :   1d2c6b:       jmpq   1ceebc <_PyEval_EvalFrameDefault+0x1e6c>
    0.00 :   1d2c70:       lea    0x0(%rbp,%r11,8),%rbx
    0.00 :   1d2c75:       mov    $0xffffffff,%edx
    0.00 :   1d2c7a:       mov    %r9d,%esi
    0.00 :   1d2c7d:       mov    %r15,%rdi
    0.00 :   1d2c80:       mov    %rbx,%rcx
    0.00 :   1d2c83:       callq  1b29d0 <unpack_iterable>
    0.00 :   1d2c88:       test   %eax,%eax
    0.00 :   1d2c8a:       je     1d420c <_PyEval_EvalFrameDefault+0x71bc>
    0.00 :   1d2c90:       mov    %rbx,%rbp
    0.00 :   1d2c93:       jmpq   1cddae <_PyEval_EvalFrameDefault+0xd5e>
         :            call_function():
    0.00 :   1d2c98:       mov    0x38(%rcx),%rax
    0.00 :   1d2c9c:       test   %rax,%rax
    0.00 :   1d2c9f:       jne    1d3d47 <_PyEval_EvalFrameDefault+0x6cf7>
    0.00 :   1d2ca5:       mov    %rbx,%rdx
    0.00 :   1d2ca8:       xor    %ecx,%ecx
    0.00 :   1d2caa:       mov    %r8,%rsi
    0.00 :   1d2cad:       mov    %r9,%rdi
    0.00 :   1d2cb0:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d2cb6:       mov    %rax,%rbx
    0.00 :   1d2cb9:       cmp    %rbp,%r15
    0.00 :   1d2cbc:       jb     1cd481 <_PyEval_EvalFrameDefault+0x431>
    0.00 :   1d2cc2:       jmpq   1cd550 <_PyEval_EvalFrameDefault+0x500>
    0.00 :   1d2cc7:       nopw   0x0(%rax,%rax,1)
    0.00 :   1d2cd0:       mov    0x10(%r8),%rbp
    0.00 :   1d2cd4:       sub    %rbp,%rbx
    0.00 :   1d2cd7:       shl    $0x3,%rbp
    0.00 :   1d2cdb:       lea    0x0(,%rbx,8),%rax
    0.00 :   1d2ce3:       jmpq   1ce4cf <_PyEval_EvalFrameDefault+0x147f>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2ce8:       mov    %r10,%rbp
    0.00 :   1d2ceb:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
         :            call_function():
    0.00 :   1d2cf0:       mov    %rsi,%r15
    0.00 :   1d2cf3:       jmpq   1ce60a <_PyEval_EvalFrameDefault+0x15ba>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2cf8:       mov    -0x8(%rbx),%rdi
    0.00 :   1d2cfc:       subq   $0x1,(%rdi)
    0.00 :   1d2d00:       je     f1b97 <_PyEval_EvalFrameDefault.cold.2897+0x162a>
    0.00 :   1d2d06:       mov    -0x10(%rbx),%rdi
    0.00 :   1d2d0a:       lea    -0x1(%r12),%ebp
    0.00 :   1d2d0f:       lea    -0x10(%rbx),%r13
    0.00 :   1d2d13:       subq   $0x1,(%rdi)
    0.00 :   1d2d17:       je     f1b83 <_PyEval_EvalFrameDefault.cold.2897+0x1616>
    0.00 :   1d2d1d:       test   %ebp,%ebp
    0.00 :   1d2d1f:       jne    1d4d5f <_PyEval_EvalFrameDefault+0x7d0f>
    0.00 :   1d2d25:       mov    %r13,%rbx
    0.00 :   1d2d28:       mov    0x40(%rsp),%r12
    0.00 :   1d2d2d:       mov    0x50(%rsp),%r13
    0.00 :   1d2d32:       jmpq   1ced44 <_PyEval_EvalFrameDefault+0x1cf4>
    0.00 :   1d2d37:       mov    %rbx,%r8
    0.00 :   1d2d3a:       lea    -0x1(%rbx,%rbx,1),%r9
    0.00 :   1d2d3f:       mov    %eax,0x50(%rsp)
    0.00 :   1d2d43:       mov    %r15,%rdi
    0.00 :   1d2d46:       neg    %r8
    0.00 :   1d2d49:       neg    %r9
    0.00 :   1d2d4c:       shl    $0x4,%r8
    0.00 :   1d2d50:       mov    0x0(%rbp,%r9,8),%rdx
    0.00 :   1d2d55:       mov    0x0(%rbp,%r8,1),%rsi
    0.00 :   1d2d5a:       mov    %r8,0x40(%rsp)
    0.00 :   1d2d5f:       addr32 callq 1638a0 <PyDict_SetItem>
    0.00 :   1d2d65:       test   %eax,%eax
    0.00 :   1d2d67:       jne    f13df <_PyEval_EvalFrameDefault.cold.2897+0xe72>
    0.00 :   1d2d6d:       mov    %rbx,%rdx
    0.00 :   1d2d70:       mov    0x40(%rsp),%rsi
    0.00 :   1d2d75:       mov    0x50(%rsp),%eax
    0.00 :   1d2d79:       sub    $0x1,%rdx
    0.00 :   1d2d7d:       je     1ced21 <_PyEval_EvalFrameDefault+0x1cd1>
    0.00 :   1d2d83:       add    %rdx,%rdx
    0.00 :   1d2d86:       mov    %eax,0x40(%rsp)
    0.00 :   1d2d8a:       mov    0x10(%rbp,%rsi,1),%rsi
    0.00 :   1d2d8f:       mov    %r15,%rdi
    0.00 :   1d2d92:       sub    $0x1,%rdx
    0.00 :   1d2d96:       imul   $0xfffffffffffffff8,%rdx,%r11
    0.00 :   1d2d9a:       mov    0x0(%rbp,%r11,1),%rdx
    0.00 :   1d2d9f:       addr32 callq 1638a0 <PyDict_SetItem>
    0.00 :   1d2da5:       test   %eax,%eax
    0.00 :   1d2da7:       jne    f13df <_PyEval_EvalFrameDefault.cold.2897+0xe72>
    0.00 :   1d2dad:       cmp    $0x2,%rbx
    0.00 :   1d2db1:       mov    0x40(%rsp),%eax
    0.00 :   1d2db5:       jne    f13ad <_PyEval_EvalFrameDefault.cold.2897+0xe40>
    0.00 :   1d2dbb:       jmpq   1ced21 <_PyEval_EvalFrameDefault+0x1cd1>
         :            call_function():
    0.00 :   1d2dc0:       mov    %rdx,%r15
    0.00 :   1d2dc3:       jmpq   1ce60a <_PyEval_EvalFrameDefault+0x15ba>
    0.00 :   1d2dc8:       mov    %rax,0x40(%rsp)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d2dcd:       mov    0x8(%r15),%rax
    0.00 :   1d2dd1:       mov    %r15,%rdi
    0.00 :   1d2dd4:       callq  *0x30(%rax)
    0.00 :   1d2dd7:       mov    0x40(%rsp),%rsi
    0.00 :   1d2ddc:       mov    %rsi,-0x8(%rbp)
    0.00 :   1d2de0:       test   %rsi,%rsi
    0.00 :   1d2de3:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d2de9:       mov    0x1798d9(%rip),%edx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d2def:       test   %edx,%edx
    0.00 :   1d2df1:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d2df7:       mov    0x1798c7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d2dfd:       mov    %r12,%r11
    0.00 :   1d2e00:       sub    0x8(%rsp),%r11
    0.00 :   1d2e05:       test   %eax,%eax
    0.00 :   1d2e07:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d2e0d:       movzwl (%r12),%ecx
    0.00 :   1d2e12:       lea    0x10f8a7(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d2e19:       mov    %r11d,0x68(%r13)
    0.00 :   1d2e1d:       add    $0x2,%r12
    0.00 :   1d2e21:       movzbl %cl,%ebx
    0.00 :   1d2e24:       movzbl %ch,%edi
    0.00 :   1d2e27:       mov    %rbx,%r8
    0.00 :   1d2e2a:       movslq %edi,%r9
    0.00 :   1d2e2d:       jmpq   *(%r10,%rbx,8)
    0.00 :   1d2e31:       mov    0x70(%r13),%eax
    0.00 :   1d2e35:       mov    -0x20(%rbp),%r11
    0.00 :   1d2e39:       movq   $0x0,-0x20(%rbp)
    0.00 :   1d2e41:       movdqu -0x30(%rbp),%xmm2
    0.00 :   1d2e46:       mov    -0x38(%rbp),%r8
    0.00 :   1d2e4a:       sub    $0x1,%eax
    0.00 :   1d2e4d:       mov    -0x10(%rbp),%rdi
    0.00 :   1d2e51:       mov    -0x18(%rbp),%rcx
    0.00 :   1d2e55:       mov    %r11,-0x28(%rbp)
    0.00 :   1d2e59:       cltq
    0.00 :   1d2e5b:       movups %xmm2,-0x38(%rbp)
    0.00 :   1d2e5f:       lea    (%rax,%rax,2),%rbx
    0.00 :   1d2e63:       subl   $0x1,0x80(%r13,%rbx,4)
    0.00 :   1d2e6c:       mov    %rbp,%rbx
    0.00 :   1d2e6f:       jmpq   1cf112 <_PyEval_EvalFrameDefault+0x20c2>
    0.00 :   1d2e74:       sub    $0x8,%rbp
    0.00 :   1d2e78:       subq   $0x1,(%rbx)
    0.00 :   1d2e7c:       je     f28aa <_PyEval_EvalFrameDefault.cold.2897+0x233d>
    0.00 :   1d2e82:       mov    0x17983c(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d2e88:       mov    %r12,%r9
    0.00 :   1d2e8b:       sub    0x8(%rsp),%r9
    0.00 :   1d2e90:       test   %eax,%eax
    0.00 :   1d2e92:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d2e98:       movzwl (%r12),%ebx
    0.00 :   1d2e9d:       lea    0x10f81c(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d2ea4:       mov    %r9d,0x68(%r13)
    0.00 :   1d2ea8:       add    $0x2,%r12
    0.00 :   1d2eac:       movzbl %bl,%r11d
    0.00 :   1d2eb0:       movzbl %bh,%edx
    0.00 :   1d2eb3:       mov    %r11,%r8
    0.00 :   1d2eb6:       movslq %edx,%r9
    0.00 :   1d2eb9:       jmpq   *(%r15,%r11,8)
    0.00 :   1d2ebd:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d2ec3:       sub    $0x8,%rbp
    0.00 :   1d2ec7:       subq   $0x1,(%rbx)
    0.00 :   1d2ecb:       jne    1cf21a <_PyEval_EvalFrameDefault+0x21ca>
    0.00 :   1d2ed1:       mov    0x8(%rbx),%rsi
    0.00 :   1d2ed5:       mov    %rbx,%rdi
    0.00 :   1d2ed8:       callq  *0x30(%rsi)
    0.00 :   1d2edb:       jmpq   1cf21a <_PyEval_EvalFrameDefault+0x21ca>
    0.00 :   1d2ee0:       subq   $0x1,(%rdi)
    0.00 :   1d2ee4:       jne    1cf84c <_PyEval_EvalFrameDefault+0x27fc>
    0.00 :   1d2eea:       mov    0x8(%rdi),%r15
    0.00 :   1d2eee:       callq  *0x30(%r15)
    0.00 :   1d2ef2:       jmpq   1cf84c <_PyEval_EvalFrameDefault+0x27fc>
    0.00 :   1d2ef7:       jle    f18ef <_PyEval_EvalFrameDefault.cold.2897+0x1382>
    0.00 :   1d2efd:       lea    0x17933c(%rip),%r8        # 34c240 <_Py_FalseStruct>
    0.00 :   1d2f04:       addq   $0x1,0x179334(%rip)        # 34c240 <_Py_FalseStruct>
    0.00 :   1d2f0c:       mov    %r8,(%r10)
    0.00 :   1d2f0f:       mov    0x1797b2(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d2f16:       test   %r9d,%r9d
    0.00 :   1d2f19:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d2f1f:       mov    0x17979f(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d2f25:       mov    %r12,%r11
    0.00 :   1d2f28:       sub    0x8(%rsp),%r11
    0.00 :   1d2f2d:       test   %eax,%eax
    0.00 :   1d2f2f:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d2f35:       movzwl (%r12),%ecx
    0.00 :   1d2f3a:       lea    0x10f77f(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d2f41:       mov    %r11d,0x68(%r13)
    0.00 :   1d2f45:       add    $0x2,%r12
    0.00 :   1d2f49:       movzbl %cl,%edx
    0.00 :   1d2f4c:       movzbl %ch,%edi
    0.00 :   1d2f4f:       mov    %rdx,%r8
    0.00 :   1d2f52:       movslq %edi,%r9
    0.00 :   1d2f55:       jmpq   *(%rsi,%rdx,8)
    0.00 :   1d2f58:       mov    0x50(%rsp),%rbp
    0.00 :   1d2f5d:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d2f62:       mov    $0x80,%edi
    0.00 :   1d2f67:       mov    %rbx,%rbp
    0.00 :   1d2f6a:       addr32 callq 13af10 <PyLong_FromLong>
    0.00 :   1d2f70:       mov    %rax,-0x8(%rbx)
    0.00 :   1d2f74:       jmpq   1cf0a2 <_PyEval_EvalFrameDefault+0x2052>
    0.00 :   1d2f79:       mov    %rsi,%rdi
    0.00 :   1d2f7c:       mov    %rsi,0x50(%rsp)
    0.00 :   1d2f81:       addr32 callq fd680 <PyObject_IsTrue>
    0.00 :   1d2f87:       mov    0x50(%rsp),%rsi
    0.00 :   1d2f8c:       mov    %eax,0x40(%rsp)
    0.00 :   1d2f90:       jmpq   1cf07a <_PyEval_EvalFrameDefault+0x202a>
    0.00 :   1d2f95:       subq   $0x1,(%rbx)
    0.00 :   1d2f99:       je     f09a4 <_PyEval_EvalFrameDefault.cold.2897+0x437>
    0.00 :   1d2f9f:       jmpq   1ce3a8 <_PyEval_EvalFrameDefault+0x1358>
    0.00 :   1d2fa4:       sub    $0x8,%rbp
    0.00 :   1d2fa8:       mov    0x0(%rbp),%rbx
    0.00 :   1d2fac:       jmpq   1ce361 <_PyEval_EvalFrameDefault+0x1311>
    0.00 :   1d2fb1:       mov    %rbx,%rsi
    0.00 :   1d2fb4:       mov    %r15,(%rsi)
    0.00 :   1d2fb7:       mov    0x17970a(%rip),%r9d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d2fbe:       lea    0x8(%rsi),%rbp
    0.00 :   1d2fc2:       test   %r9d,%r9d
    0.00 :   1d2fc5:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d2fcb:       mov    0x1796f3(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d2fd1:       mov    %r12,%rbx
    0.00 :   1d2fd4:       sub    0x8(%rsp),%rbx
    0.00 :   1d2fd9:       test   %eax,%eax
    0.00 :   1d2fdb:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d2fe1:       movzwl (%r12),%ecx
    0.00 :   1d2fe6:       lea    0x10f6d3(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d2fed:       mov    %ebx,0x68(%r13)
    0.00 :   1d2ff1:       add    $0x2,%r12
    0.00 :   1d2ff5:       movzbl %cl,%r10d
    0.00 :   1d2ff9:       movzbl %ch,%edi
    0.00 :   1d2ffc:       mov    %r10,%r8
    0.00 :   1d2fff:       movslq %edi,%r9
    0.00 :   1d3002:       jmpq   *(%rsi,%r10,8)
    0.00 :   1d3006:       mov    0x8(%r15),%r9
    0.00 :   1d300a:       mov    %rax,0x40(%rsp)
    0.00 :   1d300f:       mov    %r15,%rdi
    0.00 :   1d3012:       callq  *0x30(%r9)
    0.00 :   1d3016:       mov    0x40(%rsp),%rax
    0.00 :   1d301b:       jmpq   1cef96 <_PyEval_EvalFrameDefault+0x1f46>
    0.00 :   1d3020:       cmpq   $0x0,0x40(%r14)
    0.00 :   1d3025:       jne    1d3471 <_PyEval_EvalFrameDefault+0x6421>
    0.00 :   1d302b:       lea    0x78(%rsp),%rdi
    0.00 :   1d3030:       addr32 callq 16dde0 <_PyGen_FetchStopIterationValue>
    0.00 :   1d3036:       test   %eax,%eax
    0.00 :   1d3038:       js     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d303e:       subq   $0x1,(%rbx)
    0.00 :   1d3042:       jne    1d304e <_PyEval_EvalFrameDefault+0x5ffe>
    0.00 :   1d3044:       mov    0x8(%rbx),%rcx
    0.00 :   1d3048:       mov    %rbx,%rdi
    0.00 :   1d304b:       callq  *0x30(%rcx)
    0.00 :   1d304e:       mov    0x78(%rsp),%r10
    0.00 :   1d3053:       mov    %r10,-0x8(%rbp)
    0.00 :   1d3057:       mov    0x17966b(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d305d:       test   %edi,%edi
    0.00 :   1d305f:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d3065:       mov    0x179659(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d306b:       mov    %r12,%r11
    0.00 :   1d306e:       sub    0x8(%rsp),%r11
    0.00 :   1d3073:       test   %eax,%eax
    0.00 :   1d3075:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d307b:       movzwl (%r12),%ebx
    0.00 :   1d3080:       lea    0x10f639(%rip),%rdx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d3087:       mov    %r11d,0x68(%r13)
    0.00 :   1d308b:       add    $0x2,%r12
    0.00 :   1d308f:       movzbl %bl,%r15d
    0.00 :   1d3093:       movzbl %bh,%esi
    0.00 :   1d3096:       mov    %r15,%r8
    0.00 :   1d3099:       movslq %esi,%r9
    0.00 :   1d309c:       jmpq   *(%rdx,%r15,8)
         :            call_function():
    0.00 :   1d30a0:       mov    0x18(%r9),%rdx
    0.00 :   1d30a4:       test   %rdx,%rdx
    0.00 :   1d30a7:       je     1ce50c <_PyEval_EvalFrameDefault+0x14bc>
    0.00 :   1d30ad:       mov    0x10(%r9),%rbp
    0.00 :   1d30b1:       mov    0x58(%rsp),%rsi
    0.00 :   1d30b6:       addq   $0x1,(%rdx)
    0.00 :   1d30ba:       addq   $0x1,0x0(%rbp)
    0.00 :   1d30bf:       mov    %rdx,(%rsi)
    0.00 :   1d30c2:       subq   $0x1,(%r9)
    0.00 :   1d30c6:       je     1d33f2 <_PyEval_EvalFrameDefault+0x63a2>
    0.00 :   1d30cc:       add    $0x1,%rbx
    0.00 :   1d30d0:       sub    $0x8,%r8
    0.00 :   1d30d4:       mov    0x8(%rbp),%rax
    0.00 :   1d30d8:       mov    %rbp,%r9
    0.00 :   1d30db:       jmpq   1ce510 <_PyEval_EvalFrameDefault+0x14c0>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d30e0:       mov    0x8(%r15),%rax
    0.00 :   1d30e4:       mov    %r15,%rdi
    0.00 :   1d30e7:       callq  *0x30(%rax)
    0.00 :   1d30ea:       jmpq   1cf2f3 <_PyEval_EvalFrameDefault+0x22a3>
    0.00 :   1d30ef:       mov    %r15,%rbp
    0.00 :   1d30f2:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d30f7:       mov    0x8(%rbx),%rdx
    0.00 :   1d30fb:       mov    %eax,0x40(%rsp)
    0.00 :   1d30ff:       mov    %rbx,%rdi
    0.00 :   1d3102:       callq  *0x30(%rdx)
    0.00 :   1d3105:       mov    0x40(%rsp),%eax
    0.00 :   1d3109:       jmpq   1ce27e <_PyEval_EvalFrameDefault+0x122e>
    0.00 :   1d310e:       mov    %r11,0x40(%rsp)
         :            call_function():
    0.00 :   1d3113:       mov    %r9,%rdi
    0.00 :   1d3116:       callq  *0x30(%rcx)
    0.00 :   1d3119:       mov    0x40(%rsp),%r11
    0.00 :   1d311e:       jmpq   1d240e <_PyEval_EvalFrameDefault+0x53be>
    0.00 :   1d3123:       mov    %r8,%rbp
    0.00 :   1d3126:       jmpq   1d1b95 <_PyEval_EvalFrameDefault+0x4b45>
    0.00 :   1d312b:       mov    %r9d,0x40(%rsp)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3130:       mov    %rbx,%rdi
    0.00 :   1d3133:       addr32 callq fd680 <PyObject_IsTrue>
    0.00 :   1d3139:       mov    0x40(%rsp),%r9d
    0.00 :   1d313e:       cmp    $0x0,%eax
    0.00 :   1d3141:       jg     1d42cf <_PyEval_EvalFrameDefault+0x727f>
    0.00 :   1d3147:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d314d:       movslq %r9d,%rsi
    0.00 :   1d3150:       mov    0x8(%rsp),%r12
    0.00 :   1d3155:       and    $0xfffffffffffffffe,%rsi
    0.00 :   1d3159:       add    %rsi,%r12
    0.00 :   1d315c:       mov    0x179566(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d3162:       test   %edi,%edi
    0.00 :   1d3164:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d316a:       mov    0x179554(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d3170:       mov    %r12,%r8
    0.00 :   1d3173:       sub    0x8(%rsp),%r8
    0.00 :   1d3178:       test   %eax,%eax
    0.00 :   1d317a:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d3180:       movzwl (%r12),%ebx
    0.00 :   1d3185:       lea    0x10f534(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d318c:       mov    %r8d,0x68(%r13)
    0.00 :   1d3190:       add    $0x2,%r12
    0.00 :   1d3194:       movzbl %bl,%r11d
    0.00 :   1d3198:       movzbl %bh,%edx
    0.00 :   1d319b:       mov    %r11,%r8
    0.00 :   1d319e:       movslq %edx,%r9
    0.00 :   1d31a1:       jmpq   *(%r15,%r11,8)
    0.00 :   1d31a5:       mov    0x8(%r15),%r11
    0.00 :   1d31a9:       mov    %r15,%rdi
    0.00 :   1d31ac:       callq  *0x30(%r11)
    0.00 :   1d31b0:       jmpq   1cf402 <_PyEval_EvalFrameDefault+0x23b2>
    0.00 :   1d31b5:       mov    0x8(%r15),%r11
    0.00 :   1d31b9:       mov    %rax,0x40(%rsp)
    0.00 :   1d31be:       mov    %r15,%rdi
    0.00 :   1d31c1:       callq  *0x30(%r11)
    0.00 :   1d31c5:       mov    0x40(%rsp),%rax
    0.00 :   1d31ca:       jmpq   1ce2f0 <_PyEval_EvalFrameDefault+0x12a0>
         :            call_function():
    0.00 :   1d31cf:       mov    %r10,%r15
    0.00 :   1d31d2:       jmpq   1ce61a <_PyEval_EvalFrameDefault+0x15ca>
    0.00 :   1d31d7:       mov    %rax,%r15
    0.00 :   1d31da:       jmpq   1ce61a <_PyEval_EvalFrameDefault+0x15ca>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d31df:       mov    -0x8(%rbp),%rdi
    0.00 :   1d31e3:       lea    -0x8(%rbp),%r12
    0.00 :   1d31e7:       test   %rdi,%rdi
    0.00 :   1d31ea:       jne    1d4638 <_PyEval_EvalFrameDefault+0x75e8>
    0.00 :   1d31f0:       sub    %rdx,%r12
    0.00 :   1d31f3:       sar    $0x3,%r12
    0.00 :   1d31f7:       test   %r12d,%r12d
    0.00 :   1d31fa:       je     1d2104 <_PyEval_EvalFrameDefault+0x50b4>
    0.00 :   1d3200:       mov    -0x10(%rbp),%rdi
    0.00 :   1d3204:       lea    -0x10(%rbp),%r15
    0.00 :   1d3208:       test   %rdi,%rdi
    0.00 :   1d320b:       jne    f246f <_PyEval_EvalFrameDefault.cold.2897+0x1f02>
    0.00 :   1d3211:       mov    %r15,%rdi
    0.00 :   1d3214:       sub    %rdx,%rdi
    0.00 :   1d3217:       sar    $0x3,%rdi
    0.00 :   1d321b:       test   %edi,%edi
    0.00 :   1d321d:       je     1d2104 <_PyEval_EvalFrameDefault+0x50b4>
    0.00 :   1d3223:       jmpq   f266c <_PyEval_EvalFrameDefault.cold.2897+0x20ff>
    0.00 :   1d3228:       nopl   0x0(%rax,%rax,1)
    0.00 :   1d3230:       mov    0x40(%rsp),%rdi
    0.00 :   1d3235:       mov    %r10,%rsi
    0.00 :   1d3238:       mov    %r10,0x58(%rsp)
    0.00 :   1d323d:       callq  16f4c0 <check_args_iterable>
    0.00 :   1d3242:       mov    0x58(%rsp),%rsi
    0.00 :   1d3247:       test   %eax,%eax
    0.00 :   1d3249:       js     f23da <_PyEval_EvalFrameDefault.cold.2897+0x1e6d>
    0.00 :   1d324f:       mov    %rsi,%rdi
    0.00 :   1d3252:       mov    %rsi,0x58(%rsp)
    0.00 :   1d3257:       addr32 callq 18fe40 <PySequence_Tuple>
    0.00 :   1d325d:       mov    0x58(%rsp),%rcx
    0.00 :   1d3262:       mov    %rax,%rbx
    0.00 :   1d3265:       subq   $0x1,(%rcx)
    0.00 :   1d3269:       je     1d4866 <_PyEval_EvalFrameDefault+0x7816>
    0.00 :   1d326f:       test   %rbx,%rbx
    0.00 :   1d3272:       je     f0647 <_PyEval_EvalFrameDefault.cold.2897+0xda>
    0.00 :   1d3278:       mov    %rbx,%r10
    0.00 :   1d327b:       jmpq   1cee70 <_PyEval_EvalFrameDefault+0x1e20>
    0.00 :   1d3280:       mov    %r10,%rbp
    0.00 :   1d3283:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d3288:       mov    %r13,%rdi
    0.00 :   1d328b:       addr32 callq 119d30 <PyFrame_BlockPop>
    0.00 :   1d3291:       mov    0x40(%r13),%rsi
    0.00 :   1d3295:       mov    %rbp,%rdi
    0.00 :   1d3298:       mov    0x8(%rax),%r10d
    0.00 :   1d329c:       mov    %rax,%rbx
    0.00 :   1d329f:       sub    %rsi,%rdi
    0.00 :   1d32a2:       lea    0x3(%r10),%edx
    0.00 :   1d32a6:       sar    $0x3,%rdi
    0.00 :   1d32aa:       cmp    %edi,%edx
    0.00 :   1d32ac:       jge    1d3397 <_PyEval_EvalFrameDefault+0x6347>
    0.00 :   1d32b2:       sub    $0x8,%rbp
    0.00 :   1d32b6:       mov    0x0(%rbp),%rdi
    0.00 :   1d32ba:       test   %rdi,%rdi
    0.00 :   1d32bd:       je     1d32c9 <_PyEval_EvalFrameDefault+0x6279>
    0.00 :   1d32bf:       subq   $0x1,(%rdi)
    0.00 :   1d32c3:       je     f0ae1 <_PyEval_EvalFrameDefault.cold.2897+0x574>
    0.00 :   1d32c9:       mov    %rbp,%rax
    0.00 :   1d32cc:       sub    %rsi,%rax
    0.00 :   1d32cf:       sar    $0x3,%rax
    0.00 :   1d32d3:       cmp    %eax,%edx
    0.00 :   1d32d5:       jl     1d32b2 <_PyEval_EvalFrameDefault+0x6262>
    0.00 :   1d32d7:       mov    %rbp,%r11
    0.00 :   1d32da:       mov    0x90(%r14),%r9
    0.00 :   1d32e1:       mov    -0x8(%rbp),%r8
    0.00 :   1d32e5:       sub    $0x18,%rbp
    0.00 :   1d32e9:       mov    (%r9),%rdi
    0.00 :   1d32ec:       mov    0x8(%r9),%rsi
    0.00 :   1d32f0:       mov    %r8,(%r9)
    0.00 :   1d32f3:       mov    0x8(%rbp),%r10
    0.00 :   1d32f7:       mov    0x10(%r9),%rbx
    0.00 :   1d32fb:       mov    %r10,0x8(%r9)
    0.00 :   1d32ff:       mov    -0x18(%r11),%r11
    0.00 :   1d3303:       mov    %r11,0x10(%r9)
    0.00 :   1d3307:       test   %rdi,%rdi
    0.00 :   1d330a:       je     1d3316 <_PyEval_EvalFrameDefault+0x62c6>
    0.00 :   1d330c:       subq   $0x1,(%rdi)
    0.00 :   1d3310:       je     f0abb <_PyEval_EvalFrameDefault.cold.2897+0x54e>
    0.00 :   1d3316:       test   %rsi,%rsi
    0.00 :   1d3319:       je     1d3321 <_PyEval_EvalFrameDefault+0x62d1>
    0.00 :   1d331b:       subq   $0x1,(%rsi)
    0.00 :   1d331f:       je     1d338b <_PyEval_EvalFrameDefault+0x633b>
    0.00 :   1d3321:       test   %rbx,%rbx
    0.00 :   1d3324:       je     1d3336 <_PyEval_EvalFrameDefault+0x62e6>
    0.00 :   1d3326:       subq   $0x1,(%rbx)
    0.00 :   1d332a:       jne    1d3336 <_PyEval_EvalFrameDefault+0x62e6>
    0.00 :   1d332c:       mov    0x8(%rbx),%rax
    0.00 :   1d3330:       mov    %rbx,%rdi
    0.00 :   1d3333:       callq  *0x30(%rax)
    0.00 :   1d3336:       subq   $0x1,(%r15)
    0.00 :   1d333a:       je     f0aab <_PyEval_EvalFrameDefault.cold.2897+0x53e>
    0.00 :   1d3340:       mov    0x179381(%rip),%r15d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d3347:       test   %r15d,%r15d
    0.00 :   1d334a:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d3350:       mov    0x17936e(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d3356:       mov    %r12,%rdi
    0.00 :   1d3359:       sub    0x8(%rsp),%rdi
    0.00 :   1d335e:       test   %eax,%eax
    0.00 :   1d3360:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d3366:       movzwl (%r12),%ebx
    0.00 :   1d336b:       lea    0x10f34e(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d3372:       mov    %edi,0x68(%r13)
    0.00 :   1d3376:       add    $0x2,%r12
    0.00 :   1d337a:       movzbl %bl,%r10d
    0.00 :   1d337e:       movzbl %bh,%ecx
    0.00 :   1d3381:       mov    %r10,%r8
    0.00 :   1d3384:       movslq %ecx,%r9
    0.00 :   1d3387:       jmpq   *(%r11,%r10,8)
    0.00 :   1d338b:       mov    0x8(%rsi),%rdx
    0.00 :   1d338f:       mov    %rsi,%rdi
    0.00 :   1d3392:       callq  *0x30(%rdx)
    0.00 :   1d3395:       jmp    1d3321 <_PyEval_EvalFrameDefault+0x62d1>
    0.00 :   1d3397:       mov    %rbp,%r11
    0.00 :   1d339a:       jmpq   1d32da <_PyEval_EvalFrameDefault+0x628a>
    0.00 :   1d339f:       mov    0x8(%r15),%r8
    0.00 :   1d33a3:       mov    %eax,0x40(%rsp)
    0.00 :   1d33a7:       mov    %r15,%rdi
    0.00 :   1d33aa:       callq  *0x30(%r8)
    0.00 :   1d33ae:       mov    0x40(%rsp),%eax
    0.00 :   1d33b2:       jmpq   1ce274 <_PyEval_EvalFrameDefault+0x1224>
    0.00 :   1d33b7:       mov    %eax,0x40(%rsp)
    0.00 :   1d33bb:       mov    0x8(%r11),%rax
    0.00 :   1d33bf:       mov    %r11,%rdi
    0.00 :   1d33c2:       callq  *0x30(%rax)
    0.00 :   1d33c5:       mov    0x40(%rsp),%eax
    0.00 :   1d33c9:       jmpq   1ce26a <_PyEval_EvalFrameDefault+0x121a>
         :            call_function():
    0.00 :   1d33ce:       mov    0x38(%rbp),%rax
    0.00 :   1d33d2:       test   %rax,%rax
    0.00 :   1d33d5:       jne    f0b0d <_PyEval_EvalFrameDefault.cold.2897+0x5a0>
    0.00 :   1d33db:       jmpq   1d2346 <_PyEval_EvalFrameDefault+0x52f6>
    0.00 :   1d33e0:       mov    0x38(%r11),%rax
    0.00 :   1d33e4:       test   %rax,%rax
    0.00 :   1d33e7:       jne    f0c23 <_PyEval_EvalFrameDefault.cold.2897+0x6b6>
    0.00 :   1d33ed:       jmpq   1d1e49 <_PyEval_EvalFrameDefault+0x4df9>
    0.00 :   1d33f2:       mov    %r8,0x50(%rsp)
    0.00 :   1d33f7:       mov    %r9,%rdi
    0.00 :   1d33fa:       callq  *0x30(%rax)
    0.00 :   1d33fd:       mov    0x50(%rsp),%r8
    0.00 :   1d3402:       jmpq   1d30cc <_PyEval_EvalFrameDefault+0x607c>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3407:       mov    0x8(%rbx),%r8
    0.00 :   1d340b:       mov    %rbx,%rdi
    0.00 :   1d340e:       callq  *0x30(%r8)
    0.00 :   1d3412:       jmpq   1ce987 <_PyEval_EvalFrameDefault+0x1937>
    0.00 :   1d3417:       mov    0x8(%r15),%rsi
    0.00 :   1d341b:       mov    %r15,%rdi
    0.00 :   1d341e:       callq  *0x30(%rsi)
    0.00 :   1d3421:       jmpq   1d05dc <_PyEval_EvalFrameDefault+0x358c>
    0.00 :   1d3426:       mov    0x8(%r8),%rdx
    0.00 :   1d342a:       mov    %r8,%rdi
    0.00 :   1d342d:       callq  *0x30(%rdx)
    0.00 :   1d3430:       jmpq   1d05d2 <_PyEval_EvalFrameDefault+0x3582>
         :            call_trace():
    0.00 :   1d3435:       xor    %ebx,%ebx
    0.00 :   1d3437:       cmpq   $0x0,0x38(%r14)
    0.00 :   1d343c:       setne  %bl
    0.00 :   1d343f:       jmpq   1d2a07 <_PyEval_EvalFrameDefault+0x59b7>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3444:       mov    0x17957d(%rip),%r8        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d344b:       cmpq   $0x0,0x58(%r8)
    0.00 :   1d3450:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3456:       mov    0x166753(%rip),%rdi        # 339bb0 <PyExc_NameError>
    0.00 :   1d345d:       mov    %rbx,%rdx
    0.00 :   1d3460:       lea    0x6d2cd(%rip),%rsi        # 240734 <_IO_stdin_used+0x7734>
    0.00 :   1d3467:       callq  203600 <format_exc_check_arg>
    0.00 :   1d346c:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3471:       mov    0x167918(%rip),%rdi        # 33ad90 <PyExc_StopIteration>
    0.00 :   1d3478:       addr32 callq 128250 <PyErr_ExceptionMatches>
    0.00 :   1d347e:       test   %eax,%eax
    0.00 :   1d3480:       je     1d302b <_PyEval_EvalFrameDefault+0x5fdb>
    0.00 :   1d3486:       mov    0x50(%r14),%rsi
    0.00 :   1d348a:       mov    0x40(%r14),%rdi
    0.00 :   1d348e:       mov    %r13,%rcx
    0.00 :   1d3491:       mov    %r14,%rdx
    0.00 :   1d3494:       callq  201630 <call_exc_trace>
    0.00 :   1d3499:       jmpq   1d302b <_PyEval_EvalFrameDefault+0x5fdb>
         :            call_function():
    0.00 :   1d349e:       mov    (%r8),%rsi
    0.00 :   1d34a1:       mov    %r8,0x60(%rsp)
    0.00 :   1d34a6:       mov    %r9,%rdi
    0.00 :   1d34a9:       mov    0x8(%rsi),%rdx
    0.00 :   1d34ad:       callq  *0x110(%rax)
    0.00 :   1d34b3:       mov    %rax,0x50(%rsp)
    0.00 :   1d34b8:       test   %rax,%rax
    0.00 :   1d34bb:       je     f09bd <_PyEval_EvalFrameDefault.cold.2897+0x450>
    0.00 :   1d34c1:       cmpl   $0x0,0x30(%rbp)
    0.00 :   1d34c5:       mov    0x60(%rsp),%rcx
    0.00 :   1d34ca:       je     1d34d9 <_PyEval_EvalFrameDefault+0x6489>
    0.00 :   1d34cc:       mov    0x38(%rbp),%rax
    0.00 :   1d34d0:       test   %rax,%rax
    0.00 :   1d34d3:       jne    f081c <_PyEval_EvalFrameDefault.cold.2897+0x2af>
    0.00 :   1d34d9:       lea    -0x1(%rbx),%rdx
    0.00 :   1d34dd:       lea    0x8(%rcx),%rsi
    0.00 :   1d34e1:       mov    0x50(%rsp),%rdi
    0.00 :   1d34e6:       mov    0x40(%rsp),%rcx
    0.00 :   1d34eb:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d34f1:       mov    %rax,%rbx
    0.00 :   1d34f4:       mov    0x50(%rsp),%rdi
    0.00 :   1d34f9:       mov    (%rdi),%r9
    0.00 :   1d34fc:       mov    %r9,0x50(%rsp)
    0.00 :   1d3501:       sub    $0x1,%r9
    0.00 :   1d3505:       mov    %r9,(%rdi)
    0.00 :   1d3508:       test   %r9,%r9
    0.00 :   1d350b:       jne    1ce54b <_PyEval_EvalFrameDefault+0x14fb>
    0.00 :   1d3511:       mov    0x8(%rdi),%rbp
    0.00 :   1d3515:       callq  *0x30(%rbp)
    0.00 :   1d3518:       jmpq   1ce54b <_PyEval_EvalFrameDefault+0x14fb>
    0.00 :   1d351d:       mov    %r10,%r15
    0.00 :   1d3520:       jmpq   1ce60a <_PyEval_EvalFrameDefault+0x15ba>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3525:       mov    -0x8(%r11),%rdi
    0.00 :   1d3529:       sub    $0x8,%rbp
    0.00 :   1d352d:       test   %rdi,%rdi
    0.00 :   1d3530:       jne    1d3e71 <_PyEval_EvalFrameDefault+0x6e21>
    0.00 :   1d3536:       mov    %rbp,%r10
    0.00 :   1d3539:       sub    %r12,%r10
    0.00 :   1d353c:       sar    $0x3,%r10
    0.00 :   1d3540:       cmp    %r10d,%eax
    0.00 :   1d3543:       jl     f0701 <_PyEval_EvalFrameDefault.cold.2897+0x194>
    0.00 :   1d3549:       mov    %rbp,%r11
    0.00 :   1d354c:       jmpq   1d2a8f <_PyEval_EvalFrameDefault+0x5a3f>
         :            call_function():
    0.00 :   1d3551:       mov    %r9,%r15
    0.00 :   1d3554:       jmpq   1ce60a <_PyEval_EvalFrameDefault+0x15ba>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3559:       mov    %r15,%rbp
    0.00 :   1d355c:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d3561:       sar    $0x2,%r8d
    0.00 :   1d3565:       lea    (%r8,%r8,2),%r8d
    0.00 :   1d3569:       jmpq   1ce152 <_PyEval_EvalFrameDefault+0x1102>
    0.00 :   1d356e:       movl   $0x0,0x48(%rsp)
    0.00 :   1d3576:       mov    %r10d,0x4c(%rsp)
    0.00 :   1d357b:       movq   $0x0,0x20(%rsp)
    0.00 :   1d3584:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3589:       mov    0x20(%rsp),%rbx
    0.00 :   1d358e:       mov    %rbx,%rdi
    0.00 :   1d3591:       addr32 callq 12f120 <PyLong_AsLong>
    0.00 :   1d3597:       mov    (%rbx),%rcx
    0.00 :   1d359a:       mov    0x8(%rsp),%r12
    0.00 :   1d359f:       and    $0xfffffffffffffffe,%rax
    0.00 :   1d35a3:       mov    %rcx,0x40(%rsp)
    0.00 :   1d35a8:       sub    $0x1,%rcx
    0.00 :   1d35ac:       add    %rax,%r12
    0.00 :   1d35af:       mov    %rcx,(%rbx)
    0.00 :   1d35b2:       test   %rcx,%rcx
    0.00 :   1d35b5:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d35bb:       mov    0x20(%rsp),%rdi
    0.00 :   1d35c0:       mov    0x8(%rdi),%rsi
    0.00 :   1d35c4:       callq  *0x30(%rsi)
    0.00 :   1d35c7:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d35cc:       subq   $0x1,(%r15)
    0.00 :   1d35d0:       je     1d2227 <_PyEval_EvalFrameDefault+0x51d7>
    0.00 :   1d35d6:       subq   $0x1,(%rbx)
    0.00 :   1d35da:       je     1d21bb <_PyEval_EvalFrameDefault+0x516b>
    0.00 :   1d35e0:       movq   $0x0,-0x8(%rbp)
    0.00 :   1d35e8:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d35ed:       mov    $0xffffffff,%r15d
    0.00 :   1d35f3:       movl   $0x0,0x48(%rsp)
    0.00 :   1d35fb:       mov    %r15d,0x68(%rsp)
    0.00 :   1d3600:       mov    %r15d,0x4c(%rsp)
    0.00 :   1d3605:       movq   $0x0,0x20(%rsp)
    0.00 :   1d360e:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3613:       mov    %r15,%rbp
    0.00 :   1d3616:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d361b:       mov    %r10,%rbp
    0.00 :   1d361e:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d3623:       mov    0x8(%rbx),%r10
    0.00 :   1d3627:       mov    %eax,0x50(%rsp)
    0.00 :   1d362b:       mov    %rbx,%rdi
    0.00 :   1d362e:       callq  *0x30(%r10)
    0.00 :   1d3632:       mov    0x50(%rsp),%eax
    0.00 :   1d3636:       mov    0x40(%rsp),%esi
    0.00 :   1d363a:       jmpq   1d1f60 <_PyEval_EvalFrameDefault+0x4f10>
    0.00 :   1d363f:       lea    0x17592a(%rip),%r9        # 348f70 <_Py_NoneStruct>
    0.00 :   1d3646:       addq   $0x1,0x175922(%rip)        # 348f70 <_Py_NoneStruct>
    0.00 :   1d364e:       mov    %r9,0x10(%rbp)
    0.00 :   1d3652:       jmpq   1d24da <_PyEval_EvalFrameDefault+0x548a>
    0.00 :   1d3657:       mov    0x8(%r15),%rax
    0.00 :   1d365b:       mov    %r15,%rdi
    0.00 :   1d365e:       callq  *0x30(%rax)
    0.00 :   1d3661:       jmpq   1cf929 <_PyEval_EvalFrameDefault+0x28d9>
         :            call_function():
    0.00 :   1d3666:       mov    0x38(%rcx),%rax
    0.00 :   1d366a:       test   %rax,%rax
    0.00 :   1d366d:       jne    1d36a0 <_PyEval_EvalFrameDefault+0x6650>
    0.00 :   1d366f:       mov    %rbx,%rdx
    0.00 :   1d3672:       xor    %ecx,%ecx
    0.00 :   1d3674:       mov    %r8,%rsi
    0.00 :   1d3677:       mov    %r9,%rdi
    0.00 :   1d367a:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d3680:       mov    %rax,%rbx
    0.00 :   1d3683:       jmpq   1d1dd4 <_PyEval_EvalFrameDefault+0x4d84>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3688:       mov    0x50(%r9),%rax
    0.00 :   1d368c:       callq  *0x10(%rax)
    0.00 :   1d368f:       mov    %rax,%r15
    0.00 :   1d3692:       test   %rax,%rax
    0.00 :   1d3695:       jne    1d0f67 <_PyEval_EvalFrameDefault+0x3f17>
    0.00 :   1d369b:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
         :            call_trace():
    0.00 :   1d36a0:       cmpl   $0x0,0x2c(%rcx)
         :            call_function():
    0.00 :   1d36a4:       mov    0x18(%rcx),%rsi
    0.00 :   1d36a8:       mov    0x48(%rcx),%rdi
         :            call_trace():
    0.00 :   1d36ac:       jne    1d3703 <_PyEval_EvalFrameDefault+0x66b3>
    0.00 :   1d36ae:       mov    %r8,0x58(%rsp)
    0.00 :   1d36b3:       mov    $0x4,%edx
    0.00 :   1d36b8:       movq   $0x1,0x2c(%rcx)
    0.00 :   1d36c0:       mov    %rcx,0x50(%rsp)
    0.00 :   1d36c5:       mov    %r9,%rcx
    0.00 :   1d36c8:       mov    %r9,0x40(%rsp)
    0.00 :   1d36cd:       callq  *%rax
    0.00 :   1d36cf:       mov    0x50(%rsp),%rcx
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d36d4:       mov    $0x1,%edx
         :            call_trace():
    0.00 :   1d36d9:       mov    0x40(%rsp),%r9
    0.00 :   1d36de:       mov    0x58(%rsp),%r8
    0.00 :   1d36e3:       cmpq   $0x0,0x40(%rcx)
    0.00 :   1d36e8:       jne    1d36f4 <_PyEval_EvalFrameDefault+0x66a4>
    0.00 :   1d36ea:       xor    %edx,%edx
    0.00 :   1d36ec:       cmpq   $0x0,0x38(%rcx)
    0.00 :   1d36f1:       setne  %dl
    0.00 :   1d36f4:       mov    %edx,0x30(%rcx)
    0.00 :   1d36f7:       subl   $0x1,0x2c(%rcx)
         :            call_function():
    0.00 :   1d36fb:       test   %eax,%eax
    0.00 :   1d36fd:       jne    1d4aa8 <_PyEval_EvalFrameDefault+0x7a58>
    0.00 :   1d3703:       mov    %rcx,0x50(%rsp)
    0.00 :   1d3708:       mov    %rbx,%rdx
    0.00 :   1d370b:       xor    %ecx,%ecx
    0.00 :   1d370d:       mov    %r9,%rdi
    0.00 :   1d3710:       mov    %r9,0x40(%rsp)
    0.00 :   1d3715:       mov    %r8,%rsi
    0.00 :   1d3718:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d371e:       mov    0x50(%rsp),%r10
    0.00 :   1d3723:       mov    0x40(%rsp),%r9
    0.00 :   1d3728:       mov    %rax,%rbx
    0.00 :   1d372b:       mov    0x38(%r10),%rax
    0.00 :   1d372f:       test   %rax,%rax
    0.00 :   1d3732:       je     1d4aa3 <_PyEval_EvalFrameDefault+0x7a53>
    0.00 :   1d3738:       mov    0x18(%r10),%rsi
    0.00 :   1d373c:       mov    0x48(%r10),%rdi
    0.00 :   1d3740:       test   %rbx,%rbx
    0.00 :   1d3743:       je     f1070 <_PyEval_EvalFrameDefault.cold.2897+0xb03>
         :            call_trace():
    0.00 :   1d3749:       cmpl   $0x0,0x2c(%r10)
    0.00 :   1d374e:       jne    1d3795 <_PyEval_EvalFrameDefault+0x6745>
    0.00 :   1d3750:       movq   $0x1,0x2c(%r10)
    0.00 :   1d3758:       mov    %r9,%rcx
    0.00 :   1d375b:       mov    $0x6,%edx
    0.00 :   1d3760:       mov    %r10,0x40(%rsp)
    0.00 :   1d3765:       callq  *%rax
    0.00 :   1d3767:       mov    0x40(%rsp),%rsi
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d376c:       mov    $0x1,%r11d
         :            call_trace():
    0.00 :   1d3772:       cmpq   $0x0,0x40(%rsi)
    0.00 :   1d3777:       jne    1d3785 <_PyEval_EvalFrameDefault+0x6735>
    0.00 :   1d3779:       xor    %r11d,%r11d
    0.00 :   1d377c:       cmpq   $0x0,0x38(%rsi)
    0.00 :   1d3781:       setne  %r11b
    0.00 :   1d3785:       mov    %r11d,0x30(%rsi)
    0.00 :   1d3789:       subl   $0x1,0x2c(%rsi)
         :            call_function():
    0.00 :   1d378d:       test   %eax,%eax
    0.00 :   1d378f:       jne    f1091 <_PyEval_EvalFrameDefault.cold.2897+0xb24>
    0.00 :   1d3795:       cmp    %rbp,%r15
    0.00 :   1d3798:       jb     1cd70e <_PyEval_EvalFrameDefault+0x6be>
    0.00 :   1d379e:       jmpq   f142d <_PyEval_EvalFrameDefault.cold.2897+0xec0>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d37a3:       mov    0x8(%r15),%rsi
    0.00 :   1d37a7:       mov    %r15,%rdi
    0.00 :   1d37aa:       callq  *0x30(%rsi)
    0.00 :   1d37ad:       jmpq   1cf741 <_PyEval_EvalFrameDefault+0x26f1>
    0.00 :   1d37b2:       jmpq   1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
    0.00 :   1d37b7:       jmpq   1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
    0.00 :   1d37bc:       jmpq   1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
    0.00 :   1d37c1:       jmpq   1d2fb4 <_PyEval_EvalFrameDefault+0x5f64>
         :            cmp_outcome():
    0.00 :   1d37c6:       mov    %rbx,%rdi
    0.00 :   1d37c9:       addr32 callq 128150 <PyTuple_Size>
    0.00 :   1d37cf:       test   %rax,%rax
    0.00 :   1d37d2:       jle    1d18d6 <_PyEval_EvalFrameDefault+0x4886>
    0.00 :   1d37d8:       mov    0x18(%rbx),%rsi
    0.00 :   1d37dc:       mov    0x8(%rsi),%rcx
    0.00 :   1d37e0:       testb  $0x80,0xab(%rcx)
    0.00 :   1d37e7:       je     f123b <_PyEval_EvalFrameDefault.cold.2897+0xcce>
    0.00 :   1d37ed:       testb  $0x40,0xab(%rsi)
    0.00 :   1d37f4:       je     1d4a34 <_PyEval_EvalFrameDefault+0x79e4>
    0.00 :   1d37fa:       cmp    $0x1,%rax
    0.00 :   1d37fe:       jne    f117f <_PyEval_EvalFrameDefault.cold.2897+0xc12>
    0.00 :   1d3804:       jmpq   1d18d6 <_PyEval_EvalFrameDefault+0x4886>
         :            call_function():
    0.00 :   1d3809:       mov    %r8,%r15
    0.00 :   1d380c:       jmpq   1ce60a <_PyEval_EvalFrameDefault+0x15ba>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3811:       mov    %r15,%rbp
    0.00 :   1d3814:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d3819:       mov    0x8(%rbx),%rbp
    0.00 :   1d381d:       mov    %rbx,%rdi
    0.00 :   1d3820:       callq  *0x30(%rbp)
    0.00 :   1d3823:       jmpq   1cff7e <_PyEval_EvalFrameDefault+0x2f2e>
    0.00 :   1d3828:       mov    0x8(%r15),%rax
    0.00 :   1d382c:       mov    %r15,%rdi
    0.00 :   1d382f:       callq  *0x30(%rax)
    0.00 :   1d3832:       jmpq   1d0700 <_PyEval_EvalFrameDefault+0x36b0>
         :            call_function():
    0.00 :   1d3837:       mov    (%r8),%rcx
    0.00 :   1d383a:       mov    0x110(%rax),%rax
    0.00 :   1d3841:       lea    -0xa78f8(%rip),%rsi        # 12bf50 <method_get>
    0.00 :   1d3848:       mov    0x8(%rcx),%rdx
    0.00 :   1d384c:       cmp    %rsi,%rax
    0.00 :   1d384f:       jne    f0e83 <_PyEval_EvalFrameDefault.cold.2897+0x916>
         :            descr_check():
    0.00 :   1d3855:       mov    0x10(%r9),%rsi
    0.00 :   1d3859:       cmp    %rsi,%rdx
    0.00 :   1d385c:       jne    1d38e0 <_PyEval_EvalFrameDefault+0x6890>
    0.00 :   1d3862:       mov    %r10,0x50(%rsp)
         :            method_get():
    0.00 :   1d3867:       mov    0x28(%r9),%rdi
    0.00 :   1d386b:       xor    %edx,%edx
    0.00 :   1d386d:       mov    %rcx,%rsi
    0.00 :   1d3870:       mov    %r8,0x40(%rsp)
    0.00 :   1d3875:       addr32 callq 124920 <PyCFunction_NewEx>
    0.00 :   1d387b:       mov    0x40(%rsp),%r8
    0.00 :   1d3880:       mov    0x50(%rsp),%r10
    0.00 :   1d3885:       mov    %rax,%r11
         :            call_function():
    0.00 :   1d3888:       test   %r11,%r11
    0.00 :   1d388b:       je     f0e77 <_PyEval_EvalFrameDefault.cold.2897+0x90a>
    0.00 :   1d3891:       mov    0x30(%r10),%edx
    0.00 :   1d3895:       test   %edx,%edx
    0.00 :   1d3897:       je     1d38a6 <_PyEval_EvalFrameDefault+0x6856>
    0.00 :   1d3899:       mov    0x38(%r10),%rax
    0.00 :   1d389d:       test   %rax,%rax
    0.00 :   1d38a0:       jne    1d3969 <_PyEval_EvalFrameDefault+0x6919>
    0.00 :   1d38a6:       lea    -0x1(%rbx),%rdx
    0.00 :   1d38aa:       mov    %r11,%rdi
    0.00 :   1d38ad:       mov    %r11,0x40(%rsp)
    0.00 :   1d38b2:       lea    0x8(%r8),%rsi
    0.00 :   1d38b6:       xor    %ecx,%ecx
    0.00 :   1d38b8:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d38be:       mov    0x40(%rsp),%r11
    0.00 :   1d38c3:       mov    %rax,%rbx
    0.00 :   1d38c6:       subq   $0x1,(%r11)
    0.00 :   1d38ca:       jne    1d2cb9 <_PyEval_EvalFrameDefault+0x5c69>
    0.00 :   1d38d0:       mov    0x8(%r11),%r10
    0.00 :   1d38d4:       mov    %r11,%rdi
    0.00 :   1d38d7:       callq  *0x30(%r10)
    0.00 :   1d38db:       jmpq   1d2cb9 <_PyEval_EvalFrameDefault+0x5c69>
    0.00 :   1d38e0:       mov    %rcx,0x60(%rsp)
         :            descr_check():
    0.00 :   1d38e5:       mov    %rdx,%rdi
    0.00 :   1d38e8:       mov    %r10,0x58(%rsp)
    0.00 :   1d38ed:       mov    %r9,0x50(%rsp)
    0.00 :   1d38f2:       mov    %r8,0x40(%rsp)
    0.00 :   1d38f7:       addr32 callq fe9d0 <PyType_IsSubtype>
    0.00 :   1d38fd:       mov    0x40(%rsp),%r8
    0.00 :   1d3902:       mov    0x50(%rsp),%r9
    0.00 :   1d3907:       test   %eax,%eax
    0.00 :   1d3909:       mov    0x58(%rsp),%r10
    0.00 :   1d390e:       mov    0x60(%rsp),%rcx
    0.00 :   1d3913:       jne    1d3862 <_PyEval_EvalFrameDefault+0x6812>
    0.00 :   1d3919:       mov    %rcx,%rsi
    0.00 :   1d391c:       mov    %r9,%rdi
    0.00 :   1d391f:       mov    %r10,0x60(%rsp)
    0.00 :   1d3924:       lea    0x98(%rsp),%rdx
    0.00 :   1d392c:       mov    %r8,0x58(%rsp)
    0.00 :   1d3931:       mov    %rcx,0x50(%rsp)
    0.00 :   1d3936:       mov    %r9,0x40(%rsp)
    0.00 :   1d393b:       callq  1ecbe0 <descr_check.part.6>
         :            method_get():
    0.00 :   1d3940:       mov    0x40(%rsp),%r9
    0.00 :   1d3945:       mov    0x50(%rsp),%rcx
    0.00 :   1d394a:       test   %eax,%eax
    0.00 :   1d394c:       mov    0x58(%rsp),%r8
    0.00 :   1d3951:       mov    0x60(%rsp),%r10
    0.00 :   1d3956:       mov    0x98(%rsp),%r11
    0.00 :   1d395e:       je     1d3862 <_PyEval_EvalFrameDefault+0x6812>
    0.00 :   1d3964:       jmpq   1d3888 <_PyEval_EvalFrameDefault+0x6838>
         :            call_trace():
    0.00 :   1d3969:       cmpl   $0x0,0x2c(%r10)
         :            call_function():
    0.00 :   1d396e:       mov    0x18(%r10),%rsi
    0.00 :   1d3972:       mov    0x48(%r10),%rdi
         :            call_trace():
    0.00 :   1d3976:       jne    1d39d0 <_PyEval_EvalFrameDefault+0x6980>
    0.00 :   1d3978:       mov    %r8,0x58(%rsp)
    0.00 :   1d397d:       mov    %r11,%rcx
    0.00 :   1d3980:       mov    $0x4,%edx
    0.00 :   1d3985:       movq   $0x1,0x2c(%r10)
    0.00 :   1d398d:       mov    %r10,0x50(%rsp)
    0.00 :   1d3992:       mov    %r11,0x40(%rsp)
    0.00 :   1d3997:       callq  *%rax
    0.00 :   1d3999:       mov    0x50(%rsp),%r10
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d399e:       mov    $0x1,%edi
         :            call_trace():
    0.00 :   1d39a3:       mov    0x40(%rsp),%r11
    0.00 :   1d39a8:       mov    0x58(%rsp),%r8
    0.00 :   1d39ad:       cmpq   $0x0,0x40(%r10)
    0.00 :   1d39b2:       jne    1d39bf <_PyEval_EvalFrameDefault+0x696f>
    0.00 :   1d39b4:       xor    %edi,%edi
    0.00 :   1d39b6:       cmpq   $0x0,0x38(%r10)
    0.00 :   1d39bb:       setne  %dil
    0.00 :   1d39bf:       mov    %edi,0x30(%r10)
    0.00 :   1d39c3:       subl   $0x1,0x2c(%r10)
         :            call_function():
    0.00 :   1d39c8:       test   %eax,%eax
    0.00 :   1d39ca:       jne    f0fb2 <_PyEval_EvalFrameDefault.cold.2897+0xa45>
    0.00 :   1d39d0:       lea    -0x1(%rbx),%rdx
    0.00 :   1d39d4:       xor    %ecx,%ecx
    0.00 :   1d39d6:       mov    %r11,%rdi
    0.00 :   1d39d9:       mov    %r11,0x40(%rsp)
    0.00 :   1d39de:       mov    %r10,0x50(%rsp)
    0.00 :   1d39e3:       lea    0x8(%r8),%rsi
    0.00 :   1d39e7:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d39ed:       mov    0x50(%rsp),%rdx
    0.00 :   1d39f2:       mov    0x40(%rsp),%r11
    0.00 :   1d39f7:       mov    %rax,%rbx
    0.00 :   1d39fa:       mov    0x38(%rdx),%rax
    0.00 :   1d39fe:       test   %rax,%rax
    0.00 :   1d3a01:       je     1d49c4 <_PyEval_EvalFrameDefault+0x7974>
    0.00 :   1d3a07:       mov    0x18(%rdx),%rsi
    0.00 :   1d3a0b:       mov    0x48(%rdx),%rdi
    0.00 :   1d3a0f:       test   %rbx,%rbx
    0.00 :   1d3a12:       je     f0ed7 <_PyEval_EvalFrameDefault.cold.2897+0x96a>
         :            call_trace():
    0.00 :   1d3a18:       cmpl   $0x0,0x2c(%rdx)
    0.00 :   1d3a1c:       jne    1d38c6 <_PyEval_EvalFrameDefault+0x6876>
    0.00 :   1d3a22:       movq   $0x1,0x2c(%rdx)
    0.00 :   1d3a2a:       mov    %r11,%rcx
    0.00 :   1d3a2d:       mov    %rdx,0x50(%rsp)
    0.00 :   1d3a32:       mov    $0x6,%edx
    0.00 :   1d3a37:       mov    %r11,0x40(%rsp)
    0.00 :   1d3a3c:       callq  *%rax
    0.00 :   1d3a3e:       mov    0x50(%rsp),%rsi
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3a43:       mov    $0x1,%r9d
         :            call_trace():
    0.00 :   1d3a49:       mov    0x40(%rsp),%r11
    0.00 :   1d3a4e:       cmpq   $0x0,0x40(%rsi)
    0.00 :   1d3a53:       jne    1d3a61 <_PyEval_EvalFrameDefault+0x6a11>
    0.00 :   1d3a55:       xor    %r9d,%r9d
    0.00 :   1d3a58:       cmpq   $0x0,0x38(%rsi)
    0.00 :   1d3a5d:       setne  %r9b
    0.00 :   1d3a61:       mov    %r9d,0x30(%rsi)
    0.00 :   1d3a65:       subl   $0x1,0x2c(%rsi)
         :            call_function():
    0.00 :   1d3a69:       test   %eax,%eax
    0.00 :   1d3a6b:       jne    f0f91 <_PyEval_EvalFrameDefault.cold.2897+0xa24>
    0.00 :   1d3a71:       jmpq   1d38c6 <_PyEval_EvalFrameDefault+0x6876>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3a76:       mov    0x40(%rsp),%rbp
    0.00 :   1d3a7b:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d3a80:       mov    0x8(%r8),%rdx
    0.00 :   1d3a84:       mov    %r8,%rdi
    0.00 :   1d3a87:       callq  *0x30(%rdx)
    0.00 :   1d3a8a:       jmpq   1cf374 <_PyEval_EvalFrameDefault+0x2324>
    0.00 :   1d3a8f:       mov    0x50(%rsp),%rbp
    0.00 :   1d3a94:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d3a99:       mov    0x50(%rsp),%rbp
    0.00 :   1d3a9e:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3aa3:       mov    0x40(%rsp),%rbp
    0.00 :   1d3aa8:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d3aad:       mov    0x40(%r14),%rbp
    0.00 :   1d3ab1:       test   %rbp,%rbp
    0.00 :   1d3ab4:       je     1d3b09 <_PyEval_EvalFrameDefault+0x6ab9>
    0.00 :   1d3ab6:       cmp    $0x8,%ebx
    0.00 :   1d3ab9:       je     1d3ac4 <_PyEval_EvalFrameDefault+0x6a74>
    0.00 :   1d3abb:       cmp    $0x40,%ebx
    0.00 :   1d3abe:       jne    1d3b72 <_PyEval_EvalFrameDefault+0x6b22>
         :            call_trace():
    0.00 :   1d3ac4:       mov    0x2c(%r14),%eax
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3ac8:       mov    0x50(%r14),%rdi
         :            call_trace():
    0.00 :   1d3acc:       test   %eax,%eax
    0.00 :   1d3ace:       jne    1d3b09 <_PyEval_EvalFrameDefault+0x6ab9>
    0.00 :   1d3ad0:       movq   $0x1,0x2c(%r14)
    0.00 :   1d3ad8:       mov    0x20(%rsp),%rcx
    0.00 :   1d3add:       mov    $0x3,%edx
    0.00 :   1d3ae2:       mov    %r13,%rsi
    0.00 :   1d3ae5:       callq  *%rbp
    0.00 :   1d3ae7:       cmpq   $0x0,0x40(%r14)
    0.00 :   1d3aec:       je     1d3c04 <_PyEval_EvalFrameDefault+0x6bb4>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3af2:       mov    $0x1,%r9d
         :            call_trace():
    0.00 :   1d3af8:       mov    %r9d,0x30(%r14)
    0.00 :   1d3afc:       subl   $0x1,0x2c(%r14)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3b01:       test   %eax,%eax
    0.00 :   1d3b03:       jne    1d3bc3 <_PyEval_EvalFrameDefault+0x6b73>
    0.00 :   1d3b09:       mov    0x38(%r14),%r15
    0.00 :   1d3b0d:       test   %r15,%r15
    0.00 :   1d3b10:       je     1ce126 <_PyEval_EvalFrameDefault+0x10d6>
    0.00 :   1d3b16:       cmp    $0x2,%ebx
    0.00 :   1d3b19:       je     1d3ba3 <_PyEval_EvalFrameDefault+0x6b53>
         :            call_trace():
    0.00 :   1d3b1f:       cmpl   $0x0,0x2c(%r14)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3b24:       mov    0x48(%r14),%rdi
         :            call_trace():
    0.00 :   1d3b28:       jne    1ce126 <_PyEval_EvalFrameDefault+0x10d6>
    0.00 :   1d3b2e:       mov    0x20(%rsp),%rcx
    0.00 :   1d3b33:       movq   $0x1,0x2c(%r14)
    0.00 :   1d3b3b:       mov    $0x3,%edx
    0.00 :   1d3b40:       mov    %r13,%rsi
    0.00 :   1d3b43:       callq  *%r15
    0.00 :   1d3b46:       cmpq   $0x0,0x40(%r14)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3b4b:       mov    $0x1,%ecx
         :            call_trace():
    0.00 :   1d3b50:       jne    1d3b5c <_PyEval_EvalFrameDefault+0x6b0c>
    0.00 :   1d3b52:       xor    %ecx,%ecx
    0.00 :   1d3b54:       cmpq   $0x0,0x38(%r14)
    0.00 :   1d3b59:       setne  %cl
    0.00 :   1d3b5c:       mov    %ecx,0x30(%r14)
    0.00 :   1d3b60:       subl   $0x1,0x2c(%r14)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3b65:       test   %eax,%eax
    0.00 :   1d3b67:       jne    f0dd7 <_PyEval_EvalFrameDefault.cold.2897+0x86a>
    0.00 :   1d3b6d:       jmpq   1ce126 <_PyEval_EvalFrameDefault+0x10d6>
    0.00 :   1d3b72:       cmp    $0x2,%ebx
    0.00 :   1d3b75:       jne    f0e1d <_PyEval_EvalFrameDefault.cold.2897+0x8b0>
    0.00 :   1d3b7b:       mov    0x50(%r14),%rsi
    0.00 :   1d3b7f:       xor    %r9d,%r9d
    0.00 :   1d3b82:       mov    $0x3,%r8d
    0.00 :   1d3b88:       mov    %r13,%rcx
    0.00 :   1d3b8b:       mov    %r14,%rdx
    0.00 :   1d3b8e:       mov    %rbp,%rdi
    0.00 :   1d3b91:       callq  1aff90 <call_trace_protected>
    0.00 :   1d3b96:       mov    0x38(%r14),%r15
    0.00 :   1d3b9a:       test   %r15,%r15
    0.00 :   1d3b9d:       je     1ce126 <_PyEval_EvalFrameDefault+0x10d6>
    0.00 :   1d3ba3:       mov    0x48(%r14),%rsi
    0.00 :   1d3ba7:       xor    %r9d,%r9d
    0.00 :   1d3baa:       mov    $0x3,%r8d
    0.00 :   1d3bb0:       mov    %r13,%rcx
    0.00 :   1d3bb3:       mov    %r14,%rdx
    0.00 :   1d3bb6:       mov    %r15,%rdi
    0.00 :   1d3bb9:       callq  1aff90 <call_trace_protected>
    0.00 :   1d3bbe:       jmpq   1ce126 <_PyEval_EvalFrameDefault+0x10d6>
    0.00 :   1d3bc3:       mov    0x20(%rsp),%rdx
    0.00 :   1d3bc8:       test   %rdx,%rdx
    0.00 :   1d3bcb:       je     f0e57 <_PyEval_EvalFrameDefault.cold.2897+0x8ea>
    0.00 :   1d3bd1:       mov    (%rdx),%rbp
    0.00 :   1d3bd4:       mov    %rbp,0x8(%rsp)
    0.00 :   1d3bd9:       sub    $0x1,%rbp
    0.00 :   1d3bdd:       mov    %rbp,(%rdx)
    0.00 :   1d3be0:       test   %rbp,%rbp
    0.00 :   1d3be3:       je     f0e2f <_PyEval_EvalFrameDefault.cold.2897+0x8c2>
    0.00 :   1d3be9:       mov    0x38(%r14),%r15
    0.00 :   1d3bed:       test   %r15,%r15
    0.00 :   1d3bf0:       jne    1d48a1 <_PyEval_EvalFrameDefault+0x7851>
    0.00 :   1d3bf6:       movq   $0x0,0x20(%rsp)
    0.00 :   1d3bff:       jmpq   1ce126 <_PyEval_EvalFrameDefault+0x10d6>
         :            call_trace():
    0.00 :   1d3c04:       xor    %r9d,%r9d
    0.00 :   1d3c07:       cmpq   $0x0,0x38(%r14)
    0.00 :   1d3c0c:       setne  %r9b
    0.00 :   1d3c10:       jmpq   1d3af8 <_PyEval_EvalFrameDefault+0x6aa8>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3c15:       mov    0x20(%rsp),%r15
    0.00 :   1d3c1a:       mov    %r15,%rdi
    0.00 :   1d3c1d:       addr32 callq 1eaa20 <_PyAsyncGenValueWrapperNew>
    0.00 :   1d3c23:       mov    (%r15),%rsi
    0.00 :   1d3c26:       mov    %rax,%rbx
    0.00 :   1d3c29:       mov    %rsi,0x40(%rsp)
    0.00 :   1d3c2e:       sub    $0x1,%rsi
    0.00 :   1d3c32:       mov    %rsi,(%r15)
    0.00 :   1d3c35:       test   %rsi,%rsi
    0.00 :   1d3c38:       je     f0db4 <_PyEval_EvalFrameDefault.cold.2897+0x847>
    0.00 :   1d3c3e:       mov    %rbx,0x20(%rsp)
    0.00 :   1d3c43:       test   %rbx,%rbx
    0.00 :   1d3c46:       jne    1ce110 <_PyEval_EvalFrameDefault+0x10c0>
    0.00 :   1d3c4c:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3c51:       mov    %rbx,%rdi
    0.00 :   1d3c54:       addr32 callq 114240 <PyObject_GetIter>
    0.00 :   1d3c5a:       subq   $0x1,(%rbx)
    0.00 :   1d3c5e:       mov    %rax,%r15
    0.00 :   1d3c61:       jne    1d3c6d <_PyEval_EvalFrameDefault+0x6c1d>
    0.00 :   1d3c63:       mov    0x8(%rbx),%rax
    0.00 :   1d3c67:       mov    %rbx,%rdi
    0.00 :   1d3c6a:       callq  *0x30(%rax)
    0.00 :   1d3c6d:       mov    %r15,-0x8(%rbp)
    0.00 :   1d3c71:       test   %r15,%r15
    0.00 :   1d3c74:       jne    1d0078 <_PyEval_EvalFrameDefault+0x3028>
    0.00 :   1d3c7a:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3c7f:       lea    -0x4c736(%rip),%rax        # 187550 <PyObject_Repr>
    0.00 :   1d3c86:       mov    %rbx,%rdi
    0.00 :   1d3c89:       callq  *%rax
    0.00 :   1d3c8b:       subq   $0x1,(%rbx)
    0.00 :   1d3c8f:       je     f0f6d <_PyEval_EvalFrameDefault.cold.2897+0xa00>
    0.00 :   1d3c95:       test   %rax,%rax
    0.00 :   1d3c98:       je     f0f4a <_PyEval_EvalFrameDefault.cold.2897+0x9dd>
    0.00 :   1d3c9e:       mov    %rax,%rbx
    0.00 :   1d3ca1:       jmpq   1cfdd4 <_PyEval_EvalFrameDefault+0x2d84>
    0.00 :   1d3ca6:       subq   $0x8,0x40(%rsp)
    0.00 :   1d3cac:       mov    0x40(%rsp),%r9
    0.00 :   1d3cb1:       mov    (%r9),%r15
    0.00 :   1d3cb4:       jmpq   1cfda9 <_PyEval_EvalFrameDefault+0x2d59>
    0.00 :   1d3cb9:       mov    %r15,%rsi
    0.00 :   1d3cbc:       mov    %rbx,%rdi
    0.00 :   1d3cbf:       addr32 callq 1923c0 <PyObject_Format>
    0.00 :   1d3cc5:       subq   $0x1,(%rbx)
    0.00 :   1d3cc9:       jne    1d3ce5 <_PyEval_EvalFrameDefault+0x6c95>
    0.00 :   1d3ccb:       mov    0x8(%rbx),%r10
    0.00 :   1d3ccf:       mov    %rax,0x50(%rsp)
    0.00 :   1d3cd4:       mov    %rbx,%rdi
    0.00 :   1d3cd7:       callq  *0x30(%r10)
    0.00 :   1d3cdb:       mov    0x50(%rsp),%rax
    0.00 :   1d3ce0:       test   %r15,%r15
    0.00 :   1d3ce3:       je     1d3cff <_PyEval_EvalFrameDefault+0x6caf>
    0.00 :   1d3ce5:       subq   $0x1,(%r15)
    0.00 :   1d3ce9:       jne    1d3cff <_PyEval_EvalFrameDefault+0x6caf>
    0.00 :   1d3ceb:       mov    0x8(%r15),%rdx
    0.00 :   1d3cef:       mov    %rax,0x50(%rsp)
    0.00 :   1d3cf4:       mov    %r15,%rdi
    0.00 :   1d3cf7:       callq  *0x30(%rdx)
    0.00 :   1d3cfa:       mov    0x50(%rsp),%rax
    0.00 :   1d3cff:       test   %rax,%rax
    0.00 :   1d3d02:       jne    1cfdf1 <_PyEval_EvalFrameDefault+0x2da1>
    0.00 :   1d3d08:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3d0d:       mov    %r15,%rsi
    0.00 :   1d3d10:       mov    %rbx,%rdi
    0.00 :   1d3d13:       addr32 callq 1923c0 <PyObject_Format>
    0.00 :   1d3d19:       subq   $0x1,(%rbx)
    0.00 :   1d3d1d:       je     1d3ccb <_PyEval_EvalFrameDefault+0x6c7b>
    0.00 :   1d3d1f:       jmp    1d3ce0 <_PyEval_EvalFrameDefault+0x6c90>
    0.00 :   1d3d21:       mov    0x8(%rdi),%rsi
    0.00 :   1d3d25:       callq  *0x30(%rsi)
    0.00 :   1d3d28:       jmpq   1cf8be <_PyEval_EvalFrameDefault+0x286e>
    0.00 :   1d3d2d:       mov    0x8(%r15),%r11
    0.00 :   1d3d31:       mov    %rax,0x40(%rsp)
    0.00 :   1d3d36:       mov    %r15,%rdi
    0.00 :   1d3d39:       callq  *0x30(%r11)
    0.00 :   1d3d3d:       mov    0x40(%rsp),%rax
    0.00 :   1d3d42:       jmpq   1ce438 <_PyEval_EvalFrameDefault+0x13e8>
         :            call_trace():
    0.00 :   1d3d47:       cmpl   $0x0,0x2c(%rcx)
         :            call_function():
    0.00 :   1d3d4b:       mov    0x18(%rcx),%rsi
    0.00 :   1d3d4f:       mov    0x48(%rcx),%rdi
         :            call_trace():
    0.00 :   1d3d53:       jne    1d3dab <_PyEval_EvalFrameDefault+0x6d5b>
    0.00 :   1d3d55:       mov    %r8,0x58(%rsp)
    0.00 :   1d3d5a:       mov    $0x4,%edx
    0.00 :   1d3d5f:       movq   $0x1,0x2c(%rcx)
    0.00 :   1d3d67:       mov    %rcx,0x50(%rsp)
    0.00 :   1d3d6c:       mov    %r9,%rcx
    0.00 :   1d3d6f:       mov    %r9,0x40(%rsp)
    0.00 :   1d3d74:       callq  *%rax
    0.00 :   1d3d76:       mov    0x50(%rsp),%rcx
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3d7b:       mov    $0x1,%edi
         :            call_trace():
    0.00 :   1d3d80:       mov    0x40(%rsp),%r9
    0.00 :   1d3d85:       mov    0x58(%rsp),%r8
    0.00 :   1d3d8a:       cmpq   $0x0,0x40(%rcx)
    0.00 :   1d3d8f:       jne    1d3d9c <_PyEval_EvalFrameDefault+0x6d4c>
    0.00 :   1d3d91:       xor    %edi,%edi
    0.00 :   1d3d93:       cmpq   $0x0,0x38(%rcx)
    0.00 :   1d3d98:       setne  %dil
    0.00 :   1d3d9c:       mov    %edi,0x30(%rcx)
    0.00 :   1d3d9f:       subl   $0x1,0x2c(%rcx)
         :            call_function():
    0.00 :   1d3da3:       test   %eax,%eax
    0.00 :   1d3da5:       jne    1d488a <_PyEval_EvalFrameDefault+0x783a>
    0.00 :   1d3dab:       mov    %rbx,%rdx
    0.00 :   1d3dae:       mov    %rcx,0x50(%rsp)
    0.00 :   1d3db3:       mov    %r9,%rdi
    0.00 :   1d3db6:       xor    %ecx,%ecx
    0.00 :   1d3db8:       mov    %r9,0x40(%rsp)
    0.00 :   1d3dbd:       mov    %r8,%rsi
    0.00 :   1d3dc0:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d3dc6:       mov    0x50(%rsp),%rdx
    0.00 :   1d3dcb:       mov    0x40(%rsp),%r9
    0.00 :   1d3dd0:       mov    %rax,%rbx
    0.00 :   1d3dd3:       mov    0x38(%rdx),%rax
    0.00 :   1d3dd7:       test   %rax,%rax
    0.00 :   1d3dda:       je     1d4885 <_PyEval_EvalFrameDefault+0x7835>
    0.00 :   1d3de0:       mov    0x18(%rdx),%rsi
    0.00 :   1d3de4:       mov    0x48(%rdx),%rdi
    0.00 :   1d3de8:       test   %rbx,%rbx
    0.00 :   1d3deb:       je     f0759 <_PyEval_EvalFrameDefault.cold.2897+0x1ec>
         :            call_trace():
    0.00 :   1d3df1:       cmpl   $0x0,0x2c(%rdx)
    0.00 :   1d3df5:       jne    1d3e3b <_PyEval_EvalFrameDefault+0x6deb>
    0.00 :   1d3df7:       movq   $0x1,0x2c(%rdx)
    0.00 :   1d3dff:       mov    %r9,%rcx
    0.00 :   1d3e02:       mov    %rdx,0x40(%rsp)
    0.00 :   1d3e07:       mov    $0x6,%edx
    0.00 :   1d3e0c:       callq  *%rax
    0.00 :   1d3e0e:       mov    0x40(%rsp),%r8
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3e13:       mov    $0x1,%esi
         :            call_trace():
    0.00 :   1d3e18:       cmpq   $0x0,0x40(%r8)
    0.00 :   1d3e1d:       jne    1d3e2a <_PyEval_EvalFrameDefault+0x6dda>
    0.00 :   1d3e1f:       xor    %esi,%esi
    0.00 :   1d3e21:       cmpq   $0x0,0x38(%r8)
    0.00 :   1d3e26:       setne  %sil
    0.00 :   1d3e2a:       mov    %esi,0x30(%r8)
    0.00 :   1d3e2e:       subl   $0x1,0x2c(%r8)
         :            call_function():
    0.00 :   1d3e33:       test   %eax,%eax
    0.00 :   1d3e35:       jne    f0d93 <_PyEval_EvalFrameDefault.cold.2897+0x826>
    0.00 :   1d3e3b:       cmp    %rbp,%r15
    0.00 :   1d3e3e:       jb     1cd481 <_PyEval_EvalFrameDefault+0x431>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d3e44:       lea    0x8(%rbp),%r15
    0.00 :   1d3e48:       mov    %rbx,0x0(%rbp)
    0.00 :   1d3e4c:       jmpq   1cd561 <_PyEval_EvalFrameDefault+0x511>
    0.00 :   1d3e51:       mov    0x30(%rsp),%r9
    0.00 :   1d3e56:       testl  $0x180,0x20(%r9)
    0.00 :   1d3e5e:       jne    1d0078 <_PyEval_EvalFrameDefault+0x3028>
    0.00 :   1d3e64:       jmpq   f2221 <_PyEval_EvalFrameDefault.cold.2897+0x1cb4>
    0.00 :   1d3e69:       mov    %r15,%rbp
    0.00 :   1d3e6c:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d3e71:       subq   $0x1,(%rdi)
    0.00 :   1d3e75:       je     f268c <_PyEval_EvalFrameDefault.cold.2897+0x211f>
    0.00 :   1d3e7b:       mov    %rbp,%r11
    0.00 :   1d3e7e:       jmpq   1d2a7c <_PyEval_EvalFrameDefault+0x5a2c>
    0.00 :   1d3e83:       mov    0x8(%r8),%rdx
    0.00 :   1d3e87:       mov    %r8,%rdi
    0.00 :   1d3e8a:       callq  *0x30(%rdx)
    0.00 :   1d3e8d:       jmpq   1ce8de <_PyEval_EvalFrameDefault+0x188e>
    0.00 :   1d3e92:       movzbl (%r12),%r9d
    0.00 :   1d3e97:       cmp    $0x7a,%r9d
    0.00 :   1d3e9b:       je     1d3ee8 <_PyEval_EvalFrameDefault+0x6e98>
    0.00 :   1d3e9d:       cmp    $0x8f,%r9d
    0.00 :   1d3ea4:       je     1d3ee8 <_PyEval_EvalFrameDefault+0x6e98>
    0.00 :   1d3ea6:       cmp    $0x34,%r9d
    0.00 :   1d3eaa:       je     1d3ee8 <_PyEval_EvalFrameDefault+0x6e98>
    0.00 :   1d3eac:       cmp    $0x48,%r9d
    0.00 :   1d3eb0:       je     1d3ee8 <_PyEval_EvalFrameDefault+0x6e98>
    0.00 :   1d3eb2:       mov    0x178827(%rip),%r8d        # 34c6e0 <_PyRuntime+0x2e0>
    0.00 :   1d3eb9:       test   %r8d,%r8d
    0.00 :   1d3ebc:       je     1d3ecc <_PyEval_EvalFrameDefault+0x6e7c>
    0.00 :   1d3ebe:       addr32 callq 20a6f0 <Py_MakePendingCalls>
    0.00 :   1d3ec4:       test   %eax,%eax
    0.00 :   1d3ec6:       js     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d3ecc:       mov    0x1787f9(%rip),%r15d        # 34c6cc <_PyRuntime+0x2cc>
    0.00 :   1d3ed3:       test   %r15d,%r15d
    0.00 :   1d3ed6:       jne    1d3ef3 <_PyEval_EvalFrameDefault+0x6ea3>
    0.00 :   1d3ed8:       mov    0xa8(%r14),%rbx
    0.00 :   1d3edf:       test   %rbx,%rbx
    0.00 :   1d3ee2:       jne    f19c6 <_PyEval_EvalFrameDefault.cold.2897+0x1459>
    0.00 :   1d3ee8:       mov    0x1787d6(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d3eee:       jmpq   1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d3ef3:       xor    %edi,%edi
    0.00 :   1d3ef5:       addr32 callq 1086d0 <PyThreadState_Swap>
    0.00 :   1d3efb:       cmp    %r14,%rax
    0.00 :   1d3efe:       jne    f220c <_PyEval_EvalFrameDefault.cold.2897+0x1c9f>
    0.00 :   1d3f04:       mov    %r14,%rdi
    0.00 :   1d3f07:       callq  1e7c90 <drop_gil>
    0.00 :   1d3f0c:       mov    %r14,%rdi
    0.00 :   1d3f0f:       callq  1e7a60 <take_gil>
    0.00 :   1d3f14:       addr32 callq 1085c0 <_Py_IsFinalizing>
    0.00 :   1d3f1a:       test   %eax,%eax
    0.00 :   1d3f1c:       jne    f21ec <_PyEval_EvalFrameDefault.cold.2897+0x1c7f>
    0.00 :   1d3f22:       mov    %r14,%rdi
    0.00 :   1d3f25:       addr32 callq 1086d0 <PyThreadState_Swap>
    0.00 :   1d3f2b:       test   %rax,%rax
    0.00 :   1d3f2e:       jne    f21df <_PyEval_EvalFrameDefault.cold.2897+0x1c72>
    0.00 :   1d3f34:       jmp    1d3ed8 <_PyEval_EvalFrameDefault+0x6e88>
    0.00 :   1d3f36:       mov    0x8(%rbx),%r8
    0.00 :   1d3f3a:       mov    %eax,0x40(%rsp)
    0.00 :   1d3f3e:       mov    %rbx,%rdi
    0.00 :   1d3f41:       callq  *0x30(%r8)
    0.00 :   1d3f45:       mov    0x40(%rsp),%eax
    0.00 :   1d3f49:       jmpq   1cde2e <_PyEval_EvalFrameDefault+0xdde>
         :            call_function():
    0.00 :   1d3f4e:       mov    (%r8),%rsi
    0.00 :   1d3f51:       mov    %rdx,0x58(%rsp)
    0.00 :   1d3f56:       mov    %r9,%rdi
    0.00 :   1d3f59:       mov    %r8,0x50(%rsp)
    0.00 :   1d3f5e:       mov    0x8(%rsi),%rdx
    0.00 :   1d3f62:       callq  *0x110(%rax)
    0.00 :   1d3f68:       mov    %rax,0x40(%rsp)
    0.00 :   1d3f6d:       test   %rax,%rax
    0.00 :   1d3f70:       je     f1377 <_PyEval_EvalFrameDefault.cold.2897+0xe0a>
    0.00 :   1d3f76:       mov    0x58(%rsp),%r10
    0.00 :   1d3f7b:       mov    0x50(%rsp),%r11
    0.00 :   1d3f80:       cmpl   $0x0,0x30(%r10)
    0.00 :   1d3f85:       je     1d3f90 <_PyEval_EvalFrameDefault+0x6f40>
    0.00 :   1d3f87:       mov    0x38(%r10),%rax
    0.00 :   1d3f8b:       test   %rax,%rax
    0.00 :   1d3f8e:       jne    1d3fd5 <_PyEval_EvalFrameDefault+0x6f85>
    0.00 :   1d3f90:       lea    -0x1(%rbx),%rdx
    0.00 :   1d3f94:       lea    0x8(%r11),%rsi
    0.00 :   1d3f98:       xor    %ecx,%ecx
    0.00 :   1d3f9a:       mov    0x40(%rsp),%rdi
    0.00 :   1d3f9f:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d3fa5:       mov    %rax,%rbx
    0.00 :   1d3fa8:       mov    0x40(%rsp),%rcx
    0.00 :   1d3fad:       mov    (%rcx),%r10
    0.00 :   1d3fb0:       mov    %r10,0x40(%rsp)
    0.00 :   1d3fb5:       sub    $0x1,%r10
    0.00 :   1d3fb9:       mov    %r10,(%rcx)
    0.00 :   1d3fbc:       test   %r10,%r10
    0.00 :   1d3fbf:       jne    1d1dd4 <_PyEval_EvalFrameDefault+0x4d84>
    0.00 :   1d3fc5:       mov    0x8(%rcx),%r11
    0.00 :   1d3fc9:       mov    %rcx,%rdi
    0.00 :   1d3fcc:       callq  *0x30(%r11)
    0.00 :   1d3fd0:       jmpq   1d1dd4 <_PyEval_EvalFrameDefault+0x4d84>
         :            call_trace():
    0.00 :   1d3fd5:       cmpl   $0x0,0x2c(%r10)
         :            call_function():
    0.00 :   1d3fda:       mov    0x18(%r10),%rsi
    0.00 :   1d3fde:       mov    0x48(%r10),%rdi
         :            call_trace():
    0.00 :   1d3fe2:       jne    1d4034 <_PyEval_EvalFrameDefault+0x6fe4>
    0.00 :   1d3fe4:       mov    %r11,0x58(%rsp)
    0.00 :   1d3fe9:       mov    0x40(%rsp),%rcx
    0.00 :   1d3fee:       mov    $0x4,%edx
    0.00 :   1d3ff3:       movq   $0x1,0x2c(%r10)
    0.00 :   1d3ffb:       mov    %r10,0x50(%rsp)
    0.00 :   1d4000:       callq  *%rax
    0.00 :   1d4002:       mov    0x50(%rsp),%r10
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d4007:       mov    $0x1,%edi
         :            call_trace():
    0.00 :   1d400c:       mov    0x58(%rsp),%r11
    0.00 :   1d4011:       cmpq   $0x0,0x40(%r10)
    0.00 :   1d4016:       jne    1d4023 <_PyEval_EvalFrameDefault+0x6fd3>
    0.00 :   1d4018:       xor    %edi,%edi
    0.00 :   1d401a:       cmpq   $0x0,0x38(%r10)
    0.00 :   1d401f:       setne  %dil
    0.00 :   1d4023:       mov    %edi,0x30(%r10)
    0.00 :   1d4027:       subl   $0x1,0x2c(%r10)
         :            call_function():
    0.00 :   1d402c:       test   %eax,%eax
    0.00 :   1d402e:       jne    f13f8 <_PyEval_EvalFrameDefault.cold.2897+0xe8b>
    0.00 :   1d4034:       lea    -0x1(%rbx),%rdx
    0.00 :   1d4038:       mov    %r10,0x50(%rsp)
    0.00 :   1d403d:       lea    0x8(%r11),%rsi
    0.00 :   1d4041:       xor    %ecx,%ecx
    0.00 :   1d4043:       mov    0x40(%rsp),%rdi
    0.00 :   1d4048:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d404e:       mov    0x50(%rsp),%rdx
    0.00 :   1d4053:       mov    %rax,%rbx
    0.00 :   1d4056:       mov    0x38(%rdx),%rax
    0.00 :   1d405a:       test   %rax,%rax
    0.00 :   1d405d:       je     1d4a39 <_PyEval_EvalFrameDefault+0x79e9>
    0.00 :   1d4063:       mov    0x18(%rdx),%rsi
    0.00 :   1d4067:       mov    0x48(%rdx),%rdi
    0.00 :   1d406b:       test   %rbx,%rbx
    0.00 :   1d406e:       je     f13ff <_PyEval_EvalFrameDefault.cold.2897+0xe92>
         :            call_trace():
    0.00 :   1d4074:       cmpl   $0x0,0x2c(%rdx)
    0.00 :   1d4078:       jne    1d3fa8 <_PyEval_EvalFrameDefault+0x6f58>
    0.00 :   1d407e:       movq   $0x1,0x2c(%rdx)
    0.00 :   1d4086:       mov    0x40(%rsp),%rcx
    0.00 :   1d408b:       mov    %rdx,0x50(%rsp)
    0.00 :   1d4090:       mov    $0x6,%edx
    0.00 :   1d4095:       callq  *%rax
    0.00 :   1d4097:       mov    0x50(%rsp),%rsi
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d409c:       mov    $0x1,%r9d
         :            call_trace():
    0.00 :   1d40a2:       cmpq   $0x0,0x40(%rsi)
    0.00 :   1d40a7:       jne    1d40b5 <_PyEval_EvalFrameDefault+0x7065>
    0.00 :   1d40a9:       xor    %r9d,%r9d
    0.00 :   1d40ac:       cmpq   $0x0,0x38(%rsi)
    0.00 :   1d40b1:       setne  %r9b
    0.00 :   1d40b5:       mov    %r9d,0x30(%rsi)
    0.00 :   1d40b9:       subl   $0x1,0x2c(%rsi)
         :            call_function():
    0.00 :   1d40bd:       test   %eax,%eax
    0.00 :   1d40bf:       jne    f1ceb <_PyEval_EvalFrameDefault.cold.2897+0x177e>
    0.00 :   1d40c5:       jmpq   1d3fa8 <_PyEval_EvalFrameDefault+0x6f58>
         :            call_trace():
    0.00 :   1d40ca:       cmpl   $0x0,0x2c(%r14)
    0.00 :   1d40cf:       jne    f225e <_PyEval_EvalFrameDefault.cold.2897+0x1cf1>
    0.00 :   1d40d5:       mov    $0x7,%edx
    0.00 :   1d40da:       lea    0x174e8f(%rip),%rcx        # 348f70 <_Py_NoneStruct>
    0.00 :   1d40e1:       mov    %r13,%rsi
    0.00 :   1d40e4:       mov    %r12,%rdi
    0.00 :   1d40e7:       movq   $0x1,0x2c(%r14)
    0.00 :   1d40ef:       callq  *%r15
    0.00 :   1d40f2:       cmpq   $0x0,0x40(%r14)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d40f7:       mov    $0x1,%edx
         :            call_trace():
    0.00 :   1d40fc:       mov    %eax,%r10d
    0.00 :   1d40ff:       je     f224f <_PyEval_EvalFrameDefault.cold.2897+0x1ce2>
    0.00 :   1d4105:       mov    %edx,0x30(%r14)
    0.00 :   1d4109:       subl   $0x1,0x2c(%r14)
    0.00 :   1d410e:       jmpq   1d16ca <_PyEval_EvalFrameDefault+0x467a>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d4113:       mov    0x8(%r15),%rax
    0.00 :   1d4117:       mov    %r15,%rdi
    0.00 :   1d411a:       callq  *0x30(%rax)
    0.00 :   1d411d:       jmpq   1cf7d0 <_PyEval_EvalFrameDefault+0x2780>
    0.00 :   1d4122:       mov    0x40(%r14),%rbp
    0.00 :   1d4126:       test   %rbp,%rbp
    0.00 :   1d4129:       jne    1d3ac4 <_PyEval_EvalFrameDefault+0x6a74>
    0.00 :   1d412f:       mov    0x38(%r14),%r15
    0.00 :   1d4133:       test   %r15,%r15
    0.00 :   1d4136:       je     1ce126 <_PyEval_EvalFrameDefault+0x10d6>
    0.00 :   1d413c:       jmpq   1d3b1f <_PyEval_EvalFrameDefault+0x6acf>
    0.00 :   1d4141:       mov    0x40(%r14),%rdi
    0.00 :   1d4145:       test   %rdi,%rdi
    0.00 :   1d4148:       je     1d416b <_PyEval_EvalFrameDefault+0x711b>
    0.00 :   1d414a:       mov    0x50(%r14),%rsi
    0.00 :   1d414e:       xor    %r8d,%r8d
    0.00 :   1d4151:       mov    %r13,%rcx
    0.00 :   1d4154:       mov    %r14,%rdx
    0.00 :   1d4157:       lea    0x174e12(%rip),%r9        # 348f70 <_Py_NoneStruct>
    0.00 :   1d415e:       callq  1aff90 <call_trace_protected>
    0.00 :   1d4163:       test   %eax,%eax
    0.00 :   1d4165:       jne    1d3bf6 <_PyEval_EvalFrameDefault+0x6ba6>
    0.00 :   1d416b:       mov    0x38(%r14),%rdi
    0.00 :   1d416f:       test   %rdi,%rdi
    0.00 :   1d4172:       jne    1d465a <_PyEval_EvalFrameDefault+0x760a>
    0.00 :   1d4178:       mov    0x20(%r13),%rdx
    0.00 :   1d417c:       lea    0x168(%r13),%rdi
    0.00 :   1d4183:       movslq 0x68(%r13),%r9
    0.00 :   1d4187:       mov    %rdi,0x10(%rsp)
    0.00 :   1d418c:       movslq 0x18(%rdx),%rbx
    0.00 :   1d4190:       mov    0x28(%rdx),%r8
    0.00 :   1d4194:       mov    %rdx,0x30(%rsp)
    0.00 :   1d4199:       mov    0x38(%rdx),%rax
    0.00 :   1d419d:       mov    0x30(%rdx),%rcx
    0.00 :   1d41a1:       lea    (%rdi,%rbx,8),%rbp
    0.00 :   1d41a5:       mov    %r8,0x8(%rsp)
    0.00 :   1d41aa:       lea    0x20(%r8),%r12
    0.00 :   1d41ae:       mov    %rax,0x18(%rsp)
    0.00 :   1d41b3:       mov    %rcx,0x28(%rsp)
    0.00 :   1d41b8:       mov    %rbp,0x38(%rsp)
    0.00 :   1d41bd:       test   %r9d,%r9d
    0.00 :   1d41c0:       jns    1d1d59 <_PyEval_EvalFrameDefault+0x4d09>
    0.00 :   1d41c6:       mov    %r12,0x8(%rsp)
    0.00 :   1d41cb:       jmpq   1d1d67 <_PyEval_EvalFrameDefault+0x4d17>
    0.00 :   1d41d0:       addr32 callq 132ba0 <PyObject_SetItem>
    0.00 :   1d41d6:       mov    %eax,%r15d
    0.00 :   1d41d9:       jmpq   1ce97d <_PyEval_EvalFrameDefault+0x192d>
    0.00 :   1d41de:       mov    0x8(%rbx),%rax
    0.00 :   1d41e2:       mov    %rbx,%rdi
    0.00 :   1d41e5:       callq  *0x30(%rax)
    0.00 :   1d41e8:       jmpq   1cf6b1 <_PyEval_EvalFrameDefault+0x2661>
    0.00 :   1d41ed:       mov    0x8(%r15),%r8
    0.00 :   1d41f1:       mov    %r15,%rdi
    0.00 :   1d41f4:       callq  *0x30(%r8)
    0.00 :   1d41f8:       jmpq   1cf4a1 <_PyEval_EvalFrameDefault+0x2451>
    0.00 :   1d41fd:       mov    0x8(%r11),%rax
    0.00 :   1d4201:       mov    %r11,%rdi
    0.00 :   1d4204:       callq  *0x30(%rax)
    0.00 :   1d4207:       jmpq   1cf497 <_PyEval_EvalFrameDefault+0x2447>
    0.00 :   1d420c:       subq   $0x1,(%r15)
    0.00 :   1d4210:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4216:       mov    0x8(%r15),%rdx
    0.00 :   1d421a:       mov    %r15,%rdi
    0.00 :   1d421d:       callq  *0x30(%rdx)
    0.00 :   1d4220:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4225:       mov    0x8(%r15),%rax
    0.00 :   1d4229:       mov    %r15,%rdi
    0.00 :   1d422c:       callq  *0x30(%rax)
    0.00 :   1d422f:       jmpq   1d0191 <_PyEval_EvalFrameDefault+0x3141>
    0.00 :   1d4234:       mov    %rbp,%rbx
    0.00 :   1d4237:       lea    -0x1(%rdi),%ebp
    0.00 :   1d423a:       test   %edi,%edi
    0.00 :   1d423c:       je     1d4256 <_PyEval_EvalFrameDefault+0x7206>
    0.00 :   1d423e:       sub    $0x8,%rbx
    0.00 :   1d4242:       mov    (%rbx),%rdi
    0.00 :   1d4245:       subq   $0x1,(%rdi)
    0.00 :   1d4249:       jne    1d4252 <_PyEval_EvalFrameDefault+0x7202>
    0.00 :   1d424b:       mov    0x8(%rdi),%rcx
    0.00 :   1d424f:       callq  *0x30(%rcx)
    0.00 :   1d4252:       mov    %ebp,%edi
    0.00 :   1d4254:       jmp    1d4237 <_PyEval_EvalFrameDefault+0x71e7>
    0.00 :   1d4256:       mov    %r15,(%rbx)
    0.00 :   1d4259:       mov    0x178469(%rip),%edx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d425f:       lea    0x8(%rbx),%rbp
    0.00 :   1d4263:       test   %edx,%edx
    0.00 :   1d4265:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d426b:       mov    0x178453(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d4271:       mov    %r12,%r11
    0.00 :   1d4274:       sub    0x8(%rsp),%r11
    0.00 :   1d4279:       test   %eax,%eax
    0.00 :   1d427b:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4281:       movzwl (%r12),%ebx
    0.00 :   1d4286:       lea    0x10e433(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d428d:       mov    %r11d,0x68(%r13)
    0.00 :   1d4291:       add    $0x2,%r12
    0.00 :   1d4295:       movzbl %bl,%r15d
    0.00 :   1d4299:       movzbl %bh,%ecx
    0.00 :   1d429c:       mov    %r15,%r8
    0.00 :   1d429f:       movslq %ecx,%r9
    0.00 :   1d42a2:       jmpq   *(%r10,%r15,8)
    0.00 :   1d42a6:       mov    %rbx,%rbp
    0.00 :   1d42a9:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
         :            do_call_core():
    0.00 :   1d42ae:       mov    0x38(%rbx),%rax
    0.00 :   1d42b2:       test   %rax,%rax
    0.00 :   1d42b5:       jne    f2756 <_PyEval_EvalFrameDefault.cold.2897+0x21e9>
    0.00 :   1d42bb:       jmpq   1d2bc3 <_PyEval_EvalFrameDefault+0x5b73>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d42c0:       mov    0x8(%rbx),%rax
    0.00 :   1d42c4:       mov    %rbx,%rdi
    0.00 :   1d42c7:       callq  *0x30(%rax)
    0.00 :   1d42ca:       jmpq   1cf40c <_PyEval_EvalFrameDefault+0x23bc>
    0.00 :   1d42cf:       sub    $0x8,%rbp
    0.00 :   1d42d3:       subq   $0x1,(%rbx)
    0.00 :   1d42d7:       jne    1d315c <_PyEval_EvalFrameDefault+0x610c>
    0.00 :   1d42dd:       mov    0x8(%rbx),%rax
    0.00 :   1d42e1:       mov    %rbx,%rdi
    0.00 :   1d42e4:       callq  *0x30(%rax)
    0.00 :   1d42e7:       jmpq   1d315c <_PyEval_EvalFrameDefault+0x610c>
    0.00 :   1d42ec:       mov    %rbp,%r12
    0.00 :   1d42ef:       jmpq   1d2821 <_PyEval_EvalFrameDefault+0x57d1>
    0.00 :   1d42f4:       mov    0x8(%r8),%rdx
    0.00 :   1d42f8:       mov    %r8,%rdi
    0.00 :   1d42fb:       callq  *0x30(%rdx)
    0.00 :   1d42fe:       jmpq   1cf737 <_PyEval_EvalFrameDefault+0x26e7>
    0.00 :   1d4303:       mov    0x8(%r15),%rsi
    0.00 :   1d4307:       mov    %r15,%rdi
    0.00 :   1d430a:       callq  *0x30(%rsi)
    0.00 :   1d430d:       jmpq   1cf641 <_PyEval_EvalFrameDefault+0x25f1>
    0.00 :   1d4312:       mov    -0x8(%rbx),%rsi
    0.00 :   1d4316:       sub    $0x8,%rbx
    0.00 :   1d431a:       mov    %rsi,0x28(%rax)
    0.00 :   1d431e:       jmpq   1cea43 <_PyEval_EvalFrameDefault+0x19f3>
    0.00 :   1d4323:       mov    -0x8(%rbx),%rdi
    0.00 :   1d4327:       sub    $0x8,%rbx
    0.00 :   1d432b:       mov    %rdi,0x60(%rax)
    0.00 :   1d432f:       jmpq   1cea39 <_PyEval_EvalFrameDefault+0x19e9>
         :            call_function():
    0.00 :   1d4334:       mov    (%r8),%rsi
    0.00 :   1d4337:       mov    %rdi,0x58(%rsp)
    0.00 :   1d433c:       mov    %r9,%rdi
    0.00 :   1d433f:       mov    %r8,0x50(%rsp)
    0.00 :   1d4344:       mov    0x8(%rsi),%rdx
    0.00 :   1d4348:       callq  *0x110(%rcx)
    0.00 :   1d434e:       mov    %rax,0x40(%rsp)
    0.00 :   1d4353:       test   %rax,%rax
    0.00 :   1d4356:       je     f1f13 <_PyEval_EvalFrameDefault.cold.2897+0x19a6>
    0.00 :   1d435c:       mov    0x58(%rsp),%rcx
    0.00 :   1d4361:       mov    0x50(%rsp),%r10
    0.00 :   1d4366:       cmpl   $0x0,0x30(%rcx)
    0.00 :   1d436a:       je     1d4379 <_PyEval_EvalFrameDefault+0x7329>
    0.00 :   1d436c:       mov    0x38(%rcx),%rax
    0.00 :   1d4370:       test   %rax,%rax
    0.00 :   1d4373:       jne    f1f28 <_PyEval_EvalFrameDefault.cold.2897+0x19bb>
    0.00 :   1d4379:       lea    -0x1(%r15),%rdx
    0.00 :   1d437d:       lea    0x8(%r10),%rsi
    0.00 :   1d4381:       xor    %ecx,%ecx
    0.00 :   1d4383:       mov    0x40(%rsp),%rdi
    0.00 :   1d4388:       addr32 callq 1659b0 <_PyCFunction_FastCallKeywords>
    0.00 :   1d438e:       mov    %rax,%r15
    0.00 :   1d4391:       mov    0x40(%rsp),%rdi
    0.00 :   1d4396:       mov    (%rdi),%rcx
    0.00 :   1d4399:       mov    %rcx,0x40(%rsp)
    0.00 :   1d439e:       sub    $0x1,%rcx
    0.00 :   1d43a2:       mov    %rcx,(%rdi)
    0.00 :   1d43a5:       test   %rcx,%rcx
    0.00 :   1d43a8:       jne    1d1afb <_PyEval_EvalFrameDefault+0x4aab>
    0.00 :   1d43ae:       mov    0x8(%rdi),%r10
    0.00 :   1d43b2:       callq  *0x30(%r10)
    0.00 :   1d43b6:       jmpq   1d1afb <_PyEval_EvalFrameDefault+0x4aab>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d43bb:       mov    0x8(%r15),%rbx
    0.00 :   1d43bf:       mov    %r9,0x40(%rsp)
    0.00 :   1d43c4:       mov    %r15,%rdi
    0.00 :   1d43c7:       callq  *0x30(%rbx)
    0.00 :   1d43ca:       mov    0x40(%rsp),%r9
    0.00 :   1d43cf:       jmpq   1ceee6 <_PyEval_EvalFrameDefault+0x1e96>
    0.00 :   1d43d4:       mov    0x1657d5(%rip),%rdi        # 339bb0 <PyExc_NameError>
    0.00 :   1d43db:       mov    %rbx,%rdx
    0.00 :   1d43de:       lea    0x6c34f(%rip),%rsi        # 240734 <_IO_stdin_used+0x7734>
    0.00 :   1d43e5:       callq  203600 <format_exc_check_arg>
    0.00 :   1d43ea:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d43ef:       movslq %r9d,%rdx
    0.00 :   1d43f2:       mov    0x8(%rsp),%r12
    0.00 :   1d43f7:       mov    0x1782c7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d43fd:       and    $0xfffffffffffffffe,%rdx
    0.00 :   1d4401:       lea    (%r12,%rdx,1),%r12
    0.00 :   1d4405:       test   %eax,%eax
    0.00 :   1d4407:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d440d:       movzwl (%r12),%ecx
    0.00 :   1d4412:       lea    0x10e2a7(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d4419:       mov    %edx,0x68(%r13)
    0.00 :   1d441d:       add    $0x2,%r12
    0.00 :   1d4421:       movzbl %cl,%r10d
    0.00 :   1d4425:       movzbl %ch,%esi
    0.00 :   1d4428:       mov    %r10,%r8
    0.00 :   1d442b:       movslq %esi,%r9
    0.00 :   1d442e:       jmpq   *(%rdi,%r10,8)
    0.00 :   1d4432:       mov    %r15,%rbp
    0.00 :   1d4435:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
         :            do_raise():
    0.00 :   1d443a:       mov    0x8(%r15),%rsi
    0.00 :   1d443e:       mov    0xa8(%rsi),%rax
    0.00 :   1d4445:       test   $0x80000000,%eax
    0.00 :   1d444a:       jne    f2489 <_PyEval_EvalFrameDefault.cold.2897+0x1f1c>
    0.00 :   1d4450:       test   $0x40000000,%eax
    0.00 :   1d4455:       jne    1d4652 <_PyEval_EvalFrameDefault+0x7602>
    0.00 :   1d445b:       lea    0x174b0e(%rip),%r10        # 348f70 <_Py_NoneStruct>
    0.00 :   1d4462:       cmp    %r10,%r15
    0.00 :   1d4465:       jne    f24fa <_PyEval_EvalFrameDefault.cold.2897+0x1f8d>
    0.00 :   1d446b:       subq   $0x1,(%r15)
    0.00 :   1d446f:       je     f24e3 <_PyEval_EvalFrameDefault.cold.2897+0x1f76>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d4475:       xor    %eax,%eax
         :            do_raise():
    0.00 :   1d4477:       mov    %rdx,%rdi
    0.00 :   1d447a:       mov    %rdx,0x40(%rsp)
    0.00 :   1d447f:       mov    %rax,%rsi
    0.00 :   1d4482:       addr32 callq fc850 <PyException_SetCause>
    0.00 :   1d4488:       mov    0x40(%rsp),%rdx
    0.00 :   1d448d:       jmpq   1d084b <_PyEval_EvalFrameDefault+0x37fb>
    0.00 :   1d4492:       testb  $0x40,0xab(%rbx)
    0.00 :   1d4499:       je     1d082b <_PyEval_EvalFrameDefault+0x37db>
    0.00 :   1d449f:       xor    %edx,%edx
    0.00 :   1d44a1:       xor    %ecx,%ecx
    0.00 :   1d44a3:       xor    %esi,%esi
    0.00 :   1d44a5:       mov    %rbx,%rdi
    0.00 :   1d44a8:       addr32 callq 116150 <_PyObject_FastCallDict>
    0.00 :   1d44ae:       mov    %rax,%rdx
    0.00 :   1d44b1:       test   %rax,%rax
    0.00 :   1d44b4:       je     f2529 <_PyEval_EvalFrameDefault.cold.2897+0x1fbc>
    0.00 :   1d44ba:       mov    0x8(%rax),%rcx
    0.00 :   1d44be:       testb  $0x40,0xab(%rcx)
    0.00 :   1d44c5:       je     f256b <_PyEval_EvalFrameDefault.cold.2897+0x1ffe>
    0.00 :   1d44cb:       jmpq   1d0842 <_PyEval_EvalFrameDefault+0x37f2>
    0.00 :   1d44d0:       mov    0x1784f1(%rip),%rdi        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1d44d7:       addr32 callq 105bd0 <_PyErr_GetTopmostException>
    0.00 :   1d44dd:       lea    0x174a8c(%rip),%r10        # 348f70 <_Py_NoneStruct>
    0.00 :   1d44e4:       mov    (%rax),%rdi
    0.00 :   1d44e7:       mov    0x8(%rax),%rsi
    0.00 :   1d44eb:       mov    0x10(%rax),%rdx
    0.00 :   1d44ef:       cmp    %r10,%rdi
    0.00 :   1d44f2:       je     f2388 <_PyEval_EvalFrameDefault.cold.2897+0x1e1b>
    0.00 :   1d44f8:       test   %rdi,%rdi
    0.00 :   1d44fb:       je     f2388 <_PyEval_EvalFrameDefault.cold.2897+0x1e1b>
    0.00 :   1d4501:       addq   $0x1,(%rdi)
    0.00 :   1d4505:       test   %rsi,%rsi
    0.00 :   1d4508:       je     1d450e <_PyEval_EvalFrameDefault+0x74be>
    0.00 :   1d450a:       addq   $0x1,(%rsi)
    0.00 :   1d450e:       test   %rdx,%rdx
    0.00 :   1d4511:       je     1d4517 <_PyEval_EvalFrameDefault+0x74c7>
    0.00 :   1d4513:       addq   $0x1,(%rdx)
    0.00 :   1d4517:       addr32 callq 105ac0 <PyErr_Restore>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d451d:       mov    $0x2,%ebx
    0.00 :   1d4522:       jmpq   1cd9b2 <_PyEval_EvalFrameDefault+0x962>
    0.00 :   1d4527:       cmp    $0x2,%r9d
    0.00 :   1d452b:       jne    1d46a9 <_PyEval_EvalFrameDefault+0x7659>
    0.00 :   1d4531:       sub    $0x8,%r8
    0.00 :   1d4535:       mov    -0x8(%rbp),%r15
    0.00 :   1d4539:       jmpq   1d0802 <_PyEval_EvalFrameDefault+0x37b2>
    0.00 :   1d453e:       testb  $0x40,0xab(%r15)
    0.00 :   1d4546:       je     1cec7d <_PyEval_EvalFrameDefault+0x1c2d>
    0.00 :   1d454c:       lea    -0x10(%rbp),%rax
    0.00 :   1d4550:       mov    -0x10(%rbp),%rdx
    0.00 :   1d4554:       mov    -0x8(%rbp),%rsi
    0.00 :   1d4558:       mov    %r15,%rdi
    0.00 :   1d455b:       mov    %rax,0x40(%rsp)
    0.00 :   1d4560:       mov    $0x2,%ebx
    0.00 :   1d4565:       addr32 callq 105ac0 <PyErr_Restore>
    0.00 :   1d456b:       mov    0x40(%rsp),%rbp
    0.00 :   1d4570:       jmpq   1cd9b2 <_PyEval_EvalFrameDefault+0x962>
    0.00 :   1d4575:       mov    0x40(%rsp),%rbp
         :            import_all_from():
    0.00 :   1d457a:       mov    0x166eb7(%rip),%rdi        # 33b438 <PyExc_IndexError>
    0.00 :   1d4581:       addr32 callq 128250 <PyErr_ExceptionMatches>
    0.00 :   1d4587:       test   %eax,%eax
    0.00 :   1d4589:       je     f1a7f <_PyEval_EvalFrameDefault.cold.2897+0x1512>
    0.00 :   1d458f:       addr32 callq 105cc0 <PyErr_Clear>
    0.00 :   1d4595:       mov    0x90(%rsp),%rdi
    0.00 :   1d459d:       subq   $0x1,(%rdi)
    0.00 :   1d45a1:       jne    1d45ab <_PyEval_EvalFrameDefault+0x755b>
    0.00 :   1d45a3:       mov    0x8(%rdi),%r10
    0.00 :   1d45a7:       callq  *0x30(%r10)
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d45ab:       xor    %esi,%esi
    0.00 :   1d45ad:       mov    %r13,%rdi
    0.00 :   1d45b0:       addr32 callq 131ff0 <PyFrame_LocalsToFast>
    0.00 :   1d45b6:       subq   $0x1,(%rbx)
    0.00 :   1d45ba:       je     f2450 <_PyEval_EvalFrameDefault.cold.2897+0x1ee3>
    0.00 :   1d45c0:       test   %r15d,%r15d
    0.00 :   1d45c3:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d45c9:       mov    0x1780f9(%rip),%ebx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d45cf:       test   %ebx,%ebx
    0.00 :   1d45d1:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d45d7:       mov    0x1780e7(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d45dd:       mov    %r12,%rdi
    0.00 :   1d45e0:       sub    0x8(%rsp),%rdi
    0.00 :   1d45e5:       test   %eax,%eax
    0.00 :   1d45e7:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d45ed:       movzwl (%r12),%ecx
    0.00 :   1d45f2:       lea    0x10e0c7(%rip),%rdx        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d45f9:       mov    %edi,0x68(%r13)
    0.00 :   1d45fd:       add    $0x2,%r12
    0.00 :   1d4601:       movzbl %cl,%r15d
    0.00 :   1d4605:       movzbl %ch,%esi
    0.00 :   1d4608:       mov    %r15,%r8
    0.00 :   1d460b:       movslq %esi,%r9
    0.00 :   1d460e:       jmpq   *(%rdx,%r15,8)
    0.00 :   1d4612:       movl   $0x0,0x60(%rsp)
    0.00 :   1d461a:       jmpq   1d09fb <_PyEval_EvalFrameDefault+0x39ab>
    0.00 :   1d461f:       mov    0x50(%r14),%rsi
    0.00 :   1d4623:       mov    %r13,%rcx
    0.00 :   1d4626:       mov    %r14,%rdx
    0.00 :   1d4629:       mov    $0x2,%ebx
    0.00 :   1d462e:       callq  201630 <call_exc_trace>
    0.00 :   1d4633:       jmpq   1cd9b2 <_PyEval_EvalFrameDefault+0x962>
    0.00 :   1d4638:       subq   $0x1,(%rdi)
    0.00 :   1d463c:       jne    1d31f0 <_PyEval_EvalFrameDefault+0x61a0>
    0.00 :   1d4642:       mov    0x8(%rdi),%rax
    0.00 :   1d4646:       callq  *0x30(%rax)
    0.00 :   1d4649:       mov    0x40(%r13),%rdx
    0.00 :   1d464d:       jmpq   1d31f0 <_PyEval_EvalFrameDefault+0x61a0>
         :            do_raise():
    0.00 :   1d4652:       mov    %r15,%rax
    0.00 :   1d4655:       jmpq   1d4477 <_PyEval_EvalFrameDefault+0x7427>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d465a:       mov    0x48(%r14),%rsi
    0.00 :   1d465e:       xor    %r8d,%r8d
    0.00 :   1d4661:       mov    %r13,%rcx
    0.00 :   1d4664:       mov    %r14,%rdx
    0.00 :   1d4667:       lea    0x174902(%rip),%r9        # 348f70 <_Py_NoneStruct>
    0.00 :   1d466e:       callq  1aff90 <call_trace_protected>
    0.00 :   1d4673:       test   %eax,%eax
    0.00 :   1d4675:       je     1d4178 <_PyEval_EvalFrameDefault+0x7128>
    0.00 :   1d467b:       jmpq   1d3bf6 <_PyEval_EvalFrameDefault+0x6ba6>
    0.00 :   1d4680:       mov    0x8(%rbx),%r8
    0.00 :   1d4684:       mov    %rbx,%rdi
    0.00 :   1d4687:       callq  *0x30(%r8)
    0.00 :   1d468b:       jmpq   1cfb37 <_PyEval_EvalFrameDefault+0x2ae7>
    0.00 :   1d4690:       mov    0x50(%r14),%rsi
    0.00 :   1d4694:       mov    %r13,%rcx
    0.00 :   1d4697:       mov    %r14,%rdx
    0.00 :   1d469a:       callq  201630 <call_exc_trace>
    0.00 :   1d469f:       mov    0x40(%rsp),%r9d
    0.00 :   1d46a4:       jmpq   1d28c3 <_PyEval_EvalFrameDefault+0x5873>
    0.00 :   1d46a9:       test   %r9d,%r9d
    0.00 :   1d46ac:       je     1d44d0 <_PyEval_EvalFrameDefault+0x7480>
    0.00 :   1d46b2:       lea    0x6c011(%rip),%rsi        # 2406ca <_IO_stdin_used+0x76ca>
    0.00 :   1d46b9:       mov    0x163610(%rip),%rdi        # 337cd0 <PyExc_SystemError>
    0.00 :   1d46c0:       addr32 callq 12d7c0 <PyErr_SetString>
    0.00 :   1d46c6:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
         :            import_from():
    0.00 :   1d46cb:       lea    0x1588ee(%rip),%rsi        # 32cfc0 <PyId___name__.15188>
    0.00 :   1d46d2:       mov    0x40(%rsp),%rdi
    0.00 :   1d46d7:       addr32 callq 16e920 <_PyObject_GetAttrId>
    0.00 :   1d46dd:       mov    %rax,%rbx
    0.00 :   1d46e0:       test   %rax,%rax
    0.00 :   1d46e3:       je     f05f6 <_PyEval_EvalFrameDefault.cold.2897+0x89>
    0.00 :   1d46e9:       mov    0x8(%rax),%r11
    0.00 :   1d46ed:       testb  $0x10,0xab(%r11)
    0.00 :   1d46f5:       je     f05e9 <_PyEval_EvalFrameDefault.cold.2897+0x7c>
    0.00 :   1d46fb:       mov    %rax,%rsi
    0.00 :   1d46fe:       mov    %r15,%rdx
    0.00 :   1d4701:       lea    0x655c7(%rip),%rdi        # 239ccf <_IO_stdin_used+0xccf>
    0.00 :   1d4708:       xor    %eax,%eax
    0.00 :   1d470a:       addr32 callq 1234d0 <PyUnicode_FromFormat>
    0.00 :   1d4710:       test   %rax,%rax
    0.00 :   1d4713:       je     f05bc <_PyEval_EvalFrameDefault.cold.2897+0x4f>
    0.00 :   1d4719:       mov    %rax,%rdi
    0.00 :   1d471c:       mov    %rax,0x50(%rsp)
    0.00 :   1d4721:       addr32 callq 131f60 <PyImport_GetModule>
    0.00 :   1d4727:       mov    0x50(%rsp),%r9
    0.00 :   1d472c:       mov    %rax,0x98(%rsp)
    0.00 :   1d4734:       subq   $0x1,(%r9)
    0.00 :   1d4738:       jne    1d4744 <_PyEval_EvalFrameDefault+0x76f4>
    0.00 :   1d473a:       mov    0x8(%r9),%rcx
    0.00 :   1d473e:       mov    %r9,%rdi
    0.00 :   1d4741:       callq  *0x30(%rcx)
    0.00 :   1d4744:       cmpq   $0x0,0x98(%rsp)
    0.00 :   1d474d:       jne    1d484f <_PyEval_EvalFrameDefault+0x77ff>
    0.00 :   1d4753:       addr32 callq 105c60 <PyErr_Occurred>
    0.00 :   1d4759:       test   %rax,%rax
    0.00 :   1d475c:       jne    1d484f <_PyEval_EvalFrameDefault+0x77ff>
    0.00 :   1d4762:       mov    0x40(%rsp),%rdi
    0.00 :   1d4767:       addr32 callq 1fcde0 <PyModule_GetFilenameObject>
    0.00 :   1d476d:       lea    0x8(%rbp),%rdx
    0.00 :   1d4771:       mov    %rbx,0x50(%rsp)
    0.00 :   1d4776:       mov    %rdx,0x40(%rsp)
    0.00 :   1d477b:       mov    %rax,%r10
    0.00 :   1d477e:       test   %r10,%r10
    0.00 :   1d4781:       jne    1d47eb <_PyEval_EvalFrameDefault+0x779b>
    0.00 :   1d4783:       mov    %r10,0x58(%rsp)
    0.00 :   1d4788:       addr32 callq 105cc0 <PyErr_Clear>
    0.00 :   1d478e:       mov    %r15,%rsi
    0.00 :   1d4791:       mov    %rbx,%rdx
    0.00 :   1d4794:       xor    %eax,%eax
    0.00 :   1d4796:       lea    0xb80e3(%rip),%rdi        # 28c880 <usage_line+0x13fa0>
    0.00 :   1d479d:       addr32 callq 1234d0 <PyUnicode_FromFormat>
    0.00 :   1d47a3:       mov    0x50(%rsp),%rsi
    0.00 :   1d47a8:       xor    %edx,%edx
    0.00 :   1d47aa:       mov    %rax,%r15
    0.00 :   1d47ad:       mov    %rax,%rdi
    0.00 :   1d47b0:       addr32 callq 201970 <PyErr_SetImportError>
    0.00 :   1d47b6:       mov    0x58(%rsp),%rsi
    0.00 :   1d47bb:       test   %r15,%r15
    0.00 :   1d47be:       je     1d47ca <_PyEval_EvalFrameDefault+0x777a>
    0.00 :   1d47c0:       subq   $0x1,(%r15)
    0.00 :   1d47c4:       je     f056d <_PyEval_EvalFrameDefault.cold.2897>
    0.00 :   1d47ca:       subq   $0x1,(%rbx)
    0.00 :   1d47ce:       je     1d4876 <_PyEval_EvalFrameDefault+0x7826>
    0.00 :   1d47d4:       test   %rsi,%rsi
    0.00 :   1d47d7:       jne    1d4833 <_PyEval_EvalFrameDefault+0x77e3>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d47d9:       movq   $0x0,0x0(%rbp)
    0.00 :   1d47e1:       mov    0x40(%rsp),%rbp
    0.00 :   1d47e6:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
         :            import_from():
    0.00 :   1d47eb:       mov    0x8(%r10),%r9
    0.00 :   1d47ef:       testb  $0x10,0xab(%r9)
    0.00 :   1d47f7:       je     1d4783 <_PyEval_EvalFrameDefault+0x7733>
    0.00 :   1d47f9:       mov    %r15,%rsi
    0.00 :   1d47fc:       mov    %r10,%rcx
    0.00 :   1d47ff:       mov    %r10,0x58(%rsp)
    0.00 :   1d4804:       mov    %rbx,%rdx
    0.00 :   1d4807:       lea    0xb80aa(%rip),%rdi        # 28c8b8 <usage_line+0x13fd8>
    0.00 :   1d480e:       xor    %eax,%eax
    0.00 :   1d4810:       addr32 callq 1234d0 <PyUnicode_FromFormat>
    0.00 :   1d4816:       mov    0x50(%rsp),%rsi
    0.00 :   1d481b:       mov    0x58(%rsp),%rdx
    0.00 :   1d4820:       mov    %rax,%r15
    0.00 :   1d4823:       mov    %rax,%rdi
    0.00 :   1d4826:       addr32 callq 201970 <PyErr_SetImportError>
    0.00 :   1d482c:       mov    0x58(%rsp),%rsi
    0.00 :   1d4831:       jmp    1d47bb <_PyEval_EvalFrameDefault+0x776b>
    0.00 :   1d4833:       subq   $0x1,(%rsi)
    0.00 :   1d4837:       je     f0586 <_PyEval_EvalFrameDefault.cold.2897+0x19>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d483d:       movq   $0x0,0x0(%rbp)
    0.00 :   1d4845:       mov    0x40(%rsp),%rbp
    0.00 :   1d484a:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
         :            import_from():
    0.00 :   1d484f:       subq   $0x1,(%rbx)
    0.00 :   1d4853:       je     1d4e3c <_PyEval_EvalFrameDefault+0x7dec>
    0.00 :   1d4859:       mov    0x98(%rsp),%rbx
    0.00 :   1d4861:       jmpq   1d0669 <_PyEval_EvalFrameDefault+0x3619>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d4866:       mov    0x8(%rcx),%r10
    0.00 :   1d486a:       mov    %rcx,%rdi
    0.00 :   1d486d:       callq  *0x30(%r10)
    0.00 :   1d4871:       jmpq   1d326f <_PyEval_EvalFrameDefault+0x621f>
    0.00 :   1d4876:       jmpq   f05a2 <_PyEval_EvalFrameDefault.cold.2897+0x35>
    0.00 :   1d487b:       mov    0x40(%rsp),%r12
    0.00 :   1d4880:       jmpq   1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d4885:       jmpq   1d2cb9 <_PyEval_EvalFrameDefault+0x5c69>
    0.00 :   1d488a:       jmpq   f0e77 <_PyEval_EvalFrameDefault.cold.2897+0x90a>
    0.00 :   1d488f:       jmpq   *%rcx
    0.00 :   1d4891:       mov    %ebx,%r9d
    0.00 :   1d4894:       mov    0x50(%rsp),%r10d
    0.00 :   1d4899:       mov    %rdi,%rbx
    0.00 :   1d489c:       jmpq   f261e <_PyEval_EvalFrameDefault.cold.2897+0x20b1>
    0.00 :   1d48a1:       jmpq   f0e69 <_PyEval_EvalFrameDefault.cold.2897+0x8fc>
    0.00 :   1d48a6:       sub    $0x8,%rbp
    0.00 :   1d48aa:       mov    -0x8(%rbp),%rbx
    0.00 :   1d48ae:       mov    0x0(%rbp),%r15
    0.00 :   1d48b2:       mov    %rbx,%rdi
    0.00 :   1d48b5:       mov    %rbx,0x40(%rsp)
    0.00 :   1d48ba:       mov    %r15,%rsi
    0.00 :   1d48bd:       addr32 callq 74093 <PyNumber_InPlaceMatrixMultiply>
    0.00 :   1d48c3:       mov    0x40(%rsp),%r9
    0.00 :   1d48c8:       mov    %rax,%rbx
    0.00 :   1d48cb:       subq   $0x1,(%r9)
    0.00 :   1d48cf:       je     f0f1b <_PyEval_EvalFrameDefault.cold.2897+0x9ae>
    0.00 :   1d48d5:       subq   $0x1,(%r15)
    0.00 :   1d48d9:       je     f0f0c <_PyEval_EvalFrameDefault.cold.2897+0x99f>
    0.00 :   1d48df:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d48e3:       test   %rbx,%rbx
    0.00 :   1d48e6:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d48ec:       mov    0x177dd5(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d48f3:       test   %r8d,%r8d
    0.00 :   1d48f6:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d48fc:       mov    0x177dc2(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d4902:       mov    %r12,%rdx
    0.00 :   1d4905:       sub    0x8(%rsp),%rdx
    0.00 :   1d490a:       test   %eax,%eax
    0.00 :   1d490c:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4912:       movzwl (%r12),%ecx
    0.00 :   1d4917:       lea    0x10dda2(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d491e:       mov    %edx,0x68(%r13)
    0.00 :   1d4922:       add    $0x2,%r12
    0.00 :   1d4926:       movzbl %cl,%edi
    0.00 :   1d4929:       movzbl %ch,%esi
    0.00 :   1d492c:       mov    %rdi,%r8
    0.00 :   1d492f:       movslq %esi,%r9
    0.00 :   1d4932:       jmpq   *(%r10,%rdi,8)
    0.00 :   1d4936:       sub    $0x8,%rbp
    0.00 :   1d493a:       mov    -0x8(%rbp),%rbx
    0.00 :   1d493e:       mov    0x0(%rbp),%r15
    0.00 :   1d4942:       mov    %rbx,%rdi
    0.00 :   1d4945:       mov    %rbx,0x40(%rsp)
    0.00 :   1d494a:       mov    %r15,%rsi
    0.00 :   1d494d:       addr32 callq 73fd9 <PyNumber_MatrixMultiply>
    0.00 :   1d4953:       mov    0x40(%rsp),%r11
    0.00 :   1d4958:       mov    %rax,%rbx
    0.00 :   1d495b:       subq   $0x1,(%r11)
    0.00 :   1d495f:       je     f0f3b <_PyEval_EvalFrameDefault.cold.2897+0x9ce>
    0.00 :   1d4965:       subq   $0x1,(%r15)
    0.00 :   1d4969:       je     f0f2b <_PyEval_EvalFrameDefault.cold.2897+0x9be>
    0.00 :   1d496f:       mov    %rbx,-0x8(%rbp)
    0.00 :   1d4973:       test   %rbx,%rbx
    0.00 :   1d4976:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d497c:       mov    0x177d46(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d4982:       test   %edi,%edi
    0.00 :   1d4984:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d498a:       mov    0x177d34(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d4990:       mov    %r12,%r9
    0.00 :   1d4993:       sub    0x8(%rsp),%r9
    0.00 :   1d4998:       test   %eax,%eax
    0.00 :   1d499a:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d49a0:       movzwl (%r12),%ecx
    0.00 :   1d49a5:       lea    0x10dd14(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d49ac:       mov    %r9d,0x68(%r13)
    0.00 :   1d49b0:       add    $0x2,%r12
    0.00 :   1d49b4:       movzbl %cl,%edx
    0.00 :   1d49b7:       movzbl %ch,%esi
    0.00 :   1d49ba:       mov    %rdx,%r8
    0.00 :   1d49bd:       movslq %esi,%r9
    0.00 :   1d49c0:       jmpq   *(%r10,%rdx,8)
    0.00 :   1d49c4:       jmpq   1d38c6 <_PyEval_EvalFrameDefault+0x6876>
    0.00 :   1d49c9:       mov    0x18(%rsp),%r11
    0.00 :   1d49ce:       movslq %r9d,%r15
    0.00 :   1d49d1:       mov    0x30(%r13),%rdi
    0.00 :   1d49d5:       mov    0x18(%r11,%r15,8),%rbx
    0.00 :   1d49da:       mov    %rbx,%rsi
    0.00 :   1d49dd:       addr32 callq 169c70 <PyDict_DelItem>
    0.00 :   1d49e3:       test   %eax,%eax
    0.00 :   1d49e5:       jne    f1055 <_PyEval_EvalFrameDefault.cold.2897+0xae8>
    0.00 :   1d49eb:       mov    0x177cd7(%rip),%eax        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d49f1:       test   %eax,%eax
    0.00 :   1d49f3:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d49f9:       mov    0x177cc5(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d49ff:       mov    %r12,%r8
    0.00 :   1d4a02:       sub    0x8(%rsp),%r8
    0.00 :   1d4a07:       test   %eax,%eax
    0.00 :   1d4a09:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4a0f:       movzwl (%r12),%ecx
    0.00 :   1d4a14:       lea    0x10dca5(%rip),%rsi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d4a1b:       mov    %r8d,0x68(%r13)
    0.00 :   1d4a1f:       add    $0x2,%r12
    0.00 :   1d4a23:       movzbl %cl,%r10d
    0.00 :   1d4a27:       movzbl %ch,%edi
    0.00 :   1d4a2a:       mov    %r10,%r8
    0.00 :   1d4a2d:       movslq %edi,%r9
    0.00 :   1d4a30:       jmpq   *(%rsi,%r10,8)
    0.00 :   1d4a34:       jmpq   f123b <_PyEval_EvalFrameDefault.cold.2897+0xcce>
    0.00 :   1d4a39:       jmpq   1d3fa8 <_PyEval_EvalFrameDefault+0x6f58>
    0.00 :   1d4a3e:       jmpq   f1685 <_PyEval_EvalFrameDefault.cold.2897+0x1118>
    0.00 :   1d4a43:       mov    %r9d,0x40(%rsp)
    0.00 :   1d4a48:       xor    %edi,%edi
    0.00 :   1d4a4a:       addr32 callq 147ed0 <PySet_New>
    0.00 :   1d4a50:       mov    %rax,%r15
    0.00 :   1d4a53:       test   %rax,%rax
    0.00 :   1d4a56:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4a5c:       movslq 0x40(%rsp),%rbx
    0.00 :   1d4a61:       imul   $0xfffffffffffffff8,%rbx,%rcx
    0.00 :   1d4a65:       mov    %rbx,%rdi
    0.00 :   1d4a68:       test   %rbx,%rbx
    0.00 :   1d4a6b:       jle    f16af <_PyEval_EvalFrameDefault.cold.2897+0x1142>
    0.00 :   1d4a71:       mov    %edi,0x50(%rsp)
    0.00 :   1d4a75:       mov    0x0(%rbp,%rcx,1),%rsi
    0.00 :   1d4a7a:       mov    %r15,%rdi
    0.00 :   1d4a7d:       mov    %rcx,0x40(%rsp)
    0.00 :   1d4a82:       addr32 callq 86ea7 <_PySet_Update>
    0.00 :   1d4a88:       mov    0x40(%rsp),%rcx
    0.00 :   1d4a8d:       add    $0x8,%rcx
    0.00 :   1d4a91:       test   %eax,%eax
    0.00 :   1d4a93:       js     f1695 <_PyEval_EvalFrameDefault.cold.2897+0x1128>
    0.00 :   1d4a99:       mov    0x50(%rsp),%edi
    0.00 :   1d4a9d:       sub    $0x1,%rbx
    0.00 :   1d4aa1:       jmp    1d4a68 <_PyEval_EvalFrameDefault+0x7a18>
    0.00 :   1d4aa3:       jmpq   1d1dd4 <_PyEval_EvalFrameDefault+0x4d84>
    0.00 :   1d4aa8:       jmpq   f1377 <_PyEval_EvalFrameDefault.cold.2897+0xe0a>
    0.00 :   1d4aad:       mov    %r8d,0x40(%rsp)
    0.00 :   1d4ab2:       mov    %r13,%rdi
    0.00 :   1d4ab5:       addr32 callq 128ca0 <PyFrame_GetLineNumber>
         :            fprintf():
    0.00 :   1d4abb:       mov    0x40(%rsp),%r8d
    0.00 :   1d4ac0:       lea    0x6bca4(%rip),%rdx        # 24076b <_IO_stdin_used+0x776b>
    0.00 :   1d4ac7:       mov    $0x1,%esi
    0.00 :   1d4acc:       mov    %eax,%ecx
    0.00 :   1d4ace:       mov    0x1777cb(%rip),%rdi        # 34c2a0 <stderr@@GLIBC_2.2.5>
    0.00 :   1d4ad5:       xor    %eax,%eax
    0.00 :   1d4ad7:       callq  *0x10f3eb(%rip)        # 2e3ec8 <__fprintf_chk@GLIBC_2.3.4>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d4add:       lea    0x6bca3(%rip),%rsi        # 240787 <_IO_stdin_used+0x7787>
    0.00 :   1d4ae4:       mov    0x1631e5(%rip),%rdi        # 337cd0 <PyExc_SystemError>
    0.00 :   1d4aeb:       addr32 callq 12d7c0 <PyErr_SetString>
    0.00 :   1d4af1:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4af6:       test   %eax,%eax
    0.00 :   1d4af8:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4afe:       movzwl (%r12),%ebx
    0.00 :   1d4b03:       mov    %r12,%r9
    0.00 :   1d4b06:       lea    0x10dbb3(%rip),%r15        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d4b0d:       add    $0x2,%r12
    0.00 :   1d4b11:       sub    0x8(%rsp),%r9
    0.00 :   1d4b16:       movzbl %bl,%r11d
    0.00 :   1d4b1a:       movzbl %bh,%esi
    0.00 :   1d4b1d:       mov    %r9d,0x68(%r13)
    0.00 :   1d4b21:       mov    %r11,%r8
    0.00 :   1d4b24:       movslq %esi,%r9
    0.00 :   1d4b27:       jmpq   *(%r15,%r11,8)
    0.00 :   1d4b2b:       mov    -0x8(%rbp),%rbx
    0.00 :   1d4b2f:       mov    0x8(%rbx),%r10
    0.00 :   1d4b33:       mov    0x50(%r10),%r15
    0.00 :   1d4b37:       test   %r15,%r15
    0.00 :   1d4b3a:       je     f195d <_PyEval_EvalFrameDefault.cold.2897+0x13f0>
    0.00 :   1d4b40:       mov    0x8(%r15),%r9
    0.00 :   1d4b44:       test   %r9,%r9
    0.00 :   1d4b47:       je     f195d <_PyEval_EvalFrameDefault.cold.2897+0x13f0>
    0.00 :   1d4b4d:       mov    %rbx,%rdi
    0.00 :   1d4b50:       callq  *%r9
    0.00 :   1d4b53:       subq   $0x1,(%rbx)
    0.00 :   1d4b57:       mov    %rax,%r15
    0.00 :   1d4b5a:       je     f194e <_PyEval_EvalFrameDefault.cold.2897+0x13e1>
    0.00 :   1d4b60:       test   %r15,%r15
    0.00 :   1d4b63:       je     f1941 <_PyEval_EvalFrameDefault.cold.2897+0x13d4>
    0.00 :   1d4b69:       mov    0x8(%r15),%r8
    0.00 :   1d4b6d:       mov    0x50(%r8),%rcx
    0.00 :   1d4b71:       test   %rcx,%rcx
    0.00 :   1d4b74:       je     f1906 <_PyEval_EvalFrameDefault.cold.2897+0x1399>
    0.00 :   1d4b7a:       cmpq   $0x0,0x10(%rcx)
    0.00 :   1d4b7f:       je     f1906 <_PyEval_EvalFrameDefault.cold.2897+0x1399>
    0.00 :   1d4b85:       mov    %r15,-0x8(%rbp)
    0.00 :   1d4b89:       mov    0x177b39(%rip),%edi        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d4b8f:       test   %edi,%edi
    0.00 :   1d4b91:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d4b97:       mov    0x177b27(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d4b9d:       mov    %r12,%rsi
    0.00 :   1d4ba0:       sub    0x8(%rsp),%rsi
    0.00 :   1d4ba5:       test   %eax,%eax
    0.00 :   1d4ba7:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4bad:       movzwl (%r12),%ebx
    0.00 :   1d4bb2:       lea    0x10db07(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d4bb9:       mov    %esi,0x68(%r13)
    0.00 :   1d4bbd:       add    $0x2,%r12
    0.00 :   1d4bc1:       movzbl %bl,%edx
    0.00 :   1d4bc4:       movzbl %bh,%ecx
    0.00 :   1d4bc7:       mov    %rdx,%r8
    0.00 :   1d4bca:       movslq %ecx,%r9
    0.00 :   1d4bcd:       jmpq   *(%r10,%rdx,8)
    0.00 :   1d4bd1:       mov    -0x8(%rbp),%rbx
    0.00 :   1d4bd5:       mov    %rbx,%rdi
    0.00 :   1d4bd8:       addr32 callq 1efa60 <PyNumber_Positive>
    0.00 :   1d4bde:       subq   $0x1,(%rbx)
    0.00 :   1d4be2:       mov    %rax,%r15
    0.00 :   1d4be5:       je     f18f7 <_PyEval_EvalFrameDefault.cold.2897+0x138a>
    0.00 :   1d4beb:       mov    %r15,-0x8(%rbp)
    0.00 :   1d4bef:       test   %r15,%r15
    0.00 :   1d4bf2:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4bf8:       mov    0x177aca(%rip),%edx        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d4bfe:       test   %edx,%edx
    0.00 :   1d4c00:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d4c06:       mov    0x177ab8(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d4c0c:       mov    %r12,%rcx
    0.00 :   1d4c0f:       sub    0x8(%rsp),%rcx
    0.00 :   1d4c14:       test   %eax,%eax
    0.00 :   1d4c16:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4c1c:       movzwl (%r12),%ebx
    0.00 :   1d4c21:       lea    0x10da98(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d4c28:       mov    %ecx,0x68(%r13)
    0.00 :   1d4c2c:       add    $0x2,%r12
    0.00 :   1d4c30:       movzbl %bl,%edi
    0.00 :   1d4c33:       movzbl %bh,%esi
    0.00 :   1d4c36:       mov    %rdi,%r8
    0.00 :   1d4c39:       movslq %esi,%r9
    0.00 :   1d4c3c:       jmpq   *(%r10,%rdi,8)
    0.00 :   1d4c40:       jmpq   f1a5d <_PyEval_EvalFrameDefault.cold.2897+0x14f0>
    0.00 :   1d4c45:       mov    %r9d,0x40(%rsp)
    0.00 :   1d4c4a:       addr32 callq 15d7d0 <PyDict_New>
    0.00 :   1d4c50:       mov    %rax,%r15
    0.00 :   1d4c53:       test   %rax,%rax
    0.00 :   1d4c56:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4c5c:       movslq 0x40(%rsp),%rdx
    0.00 :   1d4c61:       imul   $0xfffffffffffffff8,%rdx,%r10
    0.00 :   1d4c65:       mov    %rdx,%r8
    0.00 :   1d4c68:       test   %rdx,%rdx
    0.00 :   1d4c6b:       jle    1d4cae <_PyEval_EvalFrameDefault+0x7c5e>
    0.00 :   1d4c6d:       mov    0x0(%rbp,%r10,1),%rbx
    0.00 :   1d4c72:       mov    %r10,0x40(%rsp)
    0.00 :   1d4c77:       mov    %r15,%rdi
    0.00 :   1d4c7a:       mov    %rdx,0x58(%rsp)
    0.00 :   1d4c7f:       mov    %r8d,0x50(%rsp)
    0.00 :   1d4c84:       mov    %rbx,%rsi
    0.00 :   1d4c87:       addr32 callq 224da0 <PyDict_Update>
    0.00 :   1d4c8d:       mov    0x40(%rsp),%r10
    0.00 :   1d4c92:       add    $0x8,%r10
    0.00 :   1d4c96:       test   %eax,%eax
    0.00 :   1d4c98:       js     f1ac5 <_PyEval_EvalFrameDefault.cold.2897+0x1558>
    0.00 :   1d4c9e:       mov    0x58(%rsp),%rdx
    0.00 :   1d4ca3:       mov    0x50(%rsp),%r8d
    0.00 :   1d4ca8:       sub    $0x1,%rdx
    0.00 :   1d4cac:       jmp    1d4c68 <_PyEval_EvalFrameDefault+0x7c18>
    0.00 :   1d4cae:       lea    -0x1(%r8),%ebx
    0.00 :   1d4cb2:       mov    %rbp,%r10
    0.00 :   1d4cb5:       mov    %ebx,%r8d
    0.00 :   1d4cb8:       cmp    $0xffffffff,%ebx
    0.00 :   1d4cbb:       je     f1c0c <_PyEval_EvalFrameDefault.cold.2897+0x169f>
    0.00 :   1d4cc1:       sub    $0x8,%rbp
    0.00 :   1d4cc5:       mov    0x0(%rbp),%rdi
    0.00 :   1d4cc9:       sub    $0x1,%ebx
    0.00 :   1d4ccc:       mov    (%rdi),%r9
    0.00 :   1d4ccf:       sub    $0x1,%r9
    0.00 :   1d4cd3:       mov    %r9,(%rdi)
    0.00 :   1d4cd6:       test   %r9,%r9
    0.00 :   1d4cd9:       jne    1d4cae <_PyEval_EvalFrameDefault+0x7c5e>
    0.00 :   1d4cdb:       mov    0x8(%rdi),%rax
    0.00 :   1d4cdf:       callq  *0x30(%rax)
    0.00 :   1d4ce2:       mov    %rbp,%r10
    0.00 :   1d4ce5:       jmp    1d4cb5 <_PyEval_EvalFrameDefault+0x7c65>
    0.00 :   1d4ce7:       mov    0x38(%rsp),%rax
    0.00 :   1d4cec:       movslq %r9d,%r10
    0.00 :   1d4cef:       mov    (%rax,%r10,8),%r8
    0.00 :   1d4cf3:       mov    0x10(%r8),%rdi
    0.00 :   1d4cf7:       test   %rdi,%rdi
    0.00 :   1d4cfa:       je     f1b48 <_PyEval_EvalFrameDefault.cold.2897+0x15db>
    0.00 :   1d4d00:       movq   $0x0,0x10(%r8)
    0.00 :   1d4d08:       subq   $0x1,(%rdi)
    0.00 :   1d4d0c:       jne    1d4d15 <_PyEval_EvalFrameDefault+0x7cc5>
    0.00 :   1d4d0e:       mov    0x8(%rdi),%rsi
    0.00 :   1d4d12:       callq  *0x30(%rsi)
    0.00 :   1d4d15:       mov    0x1779ac(%rip),%r15d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d4d1c:       test   %r15d,%r15d
    0.00 :   1d4d1f:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d4d25:       mov    0x177999(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d4d2b:       mov    %r12,%r9
    0.00 :   1d4d2e:       sub    0x8(%rsp),%r9
    0.00 :   1d4d33:       test   %eax,%eax
    0.00 :   1d4d35:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4d3b:       movzwl (%r12),%ebx
    0.00 :   1d4d40:       lea    0x10d979(%rip),%r11        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d4d47:       mov    %r9d,0x68(%r13)
    0.00 :   1d4d4b:       add    $0x2,%r12
    0.00 :   1d4d4f:       movzbl %bl,%edx
    0.00 :   1d4d52:       movzbl %bh,%ecx
    0.00 :   1d4d55:       mov    %rdx,%r8
    0.00 :   1d4d58:       movslq %ecx,%r9
    0.00 :   1d4d5b:       jmpq   *(%r11,%rdx,8)
    0.00 :   1d4d5f:       mov    -0x18(%rbx),%rdi
    0.00 :   1d4d63:       subq   $0x1,(%rdi)
    0.00 :   1d4d67:       je     f1cae <_PyEval_EvalFrameDefault.cold.2897+0x1741>
    0.00 :   1d4d6d:       mov    -0x20(%rbx),%rdi
    0.00 :   1d4d71:       lea    -0x2(%r12),%ebp
    0.00 :   1d4d76:       lea    -0x20(%rbx),%r13
    0.00 :   1d4d7a:       subq   $0x1,(%rdi)
    0.00 :   1d4d7e:       je     f1b83 <_PyEval_EvalFrameDefault.cold.2897+0x1616>
    0.00 :   1d4d84:       test   %ebp,%ebp
    0.00 :   1d4d86:       jne    f1c63 <_PyEval_EvalFrameDefault.cold.2897+0x16f6>
    0.00 :   1d4d8c:       mov    %r13,%rbx
    0.00 :   1d4d8f:       mov    0x40(%rsp),%r12
    0.00 :   1d4d94:       mov    0x50(%rsp),%r13
    0.00 :   1d4d99:       jmpq   1ced44 <_PyEval_EvalFrameDefault+0x1cf4>
    0.00 :   1d4d9e:       mov    0x40(%rsp),%rbp
    0.00 :   1d4da3:       mov    %eax,%r15d
    0.00 :   1d4da6:       jmpq   1d4595 <_PyEval_EvalFrameDefault+0x7545>
    0.00 :   1d4dab:       jmpq   f1ded <_PyEval_EvalFrameDefault.cold.2897+0x1880>
         :            special_lookup():
    0.00 :   1d4db0:       addr32 callq 105c60 <PyErr_Occurred>
    0.00 :   1d4db6:       test   %rax,%rax
    0.00 :   1d4db9:       jne    1d4dcf <_PyEval_EvalFrameDefault+0x7d7f>
    0.00 :   1d4dbb:       mov    0x15810e(%rip),%rsi        # 32ced0 <PyId___exit__.14447+0x10>
    0.00 :   1d4dc2:       mov    0x166687(%rip),%rdi        # 33b450 <PyExc_AttributeError>
    0.00 :   1d4dc9:       addr32 callq 127450 <PyErr_SetObject>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d4dcf:       subq   $0x1,(%r15)
    0.00 :   1d4dd3:       jne    1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4dd9:       mov    0x8(%r15),%r11
    0.00 :   1d4ddd:       mov    %r15,%rdi
    0.00 :   1d4de0:       callq  *0x30(%r11)
    0.00 :   1d4de4:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4de9:       mov    %rbp,%rax
    0.00 :   1d4dec:       mov    %rbx,(%rax)
    0.00 :   1d4def:       mov    0x1778d2(%rip),%r10d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d4df6:       lea    0x8(%rax),%rbp
    0.00 :   1d4dfa:       test   %r10d,%r10d
    0.00 :   1d4dfd:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d4e03:       mov    0x1778bb(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d4e09:       mov    %r12,%r9
    0.00 :   1d4e0c:       sub    0x8(%rsp),%r9
    0.00 :   1d4e11:       test   %eax,%eax
    0.00 :   1d4e13:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4e19:       movzwl (%r12),%ebx
    0.00 :   1d4e1e:       lea    0x10d89b(%rip),%rdi        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d4e25:       mov    %r9d,0x68(%r13)
    0.00 :   1d4e29:       add    $0x2,%r12
    0.00 :   1d4e2d:       movzbl %bl,%edx
    0.00 :   1d4e30:       movzbl %bh,%ecx
    0.00 :   1d4e33:       mov    %rdx,%r8
    0.00 :   1d4e36:       movslq %ecx,%r9
    0.00 :   1d4e39:       jmpq   *(%rdi,%rdx,8)
    0.00 :   1d4e3c:       jmpq   f2460 <_PyEval_EvalFrameDefault.cold.2897+0x1ef3>
    0.00 :   1d4e41:       jmpq   f25dc <_PyEval_EvalFrameDefault.cold.2897+0x206f>
         :            do_raise():
    0.00 :   1d4e46:       mov    0x8(%rbx),%rcx
    0.00 :   1d4e4a:       mov    %rbx,%rdi
    0.00 :   1d4e4d:       callq  *0x30(%rcx)
    0.00 :   1d4e50:       jmpq   1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4e55:       jmpq   f2710 <_PyEval_EvalFrameDefault.cold.2897+0x21a3>
         :            _PyEval_EvalFrameDefault():
    0.00 :   1d4e5a:       sub    $0x8,%rbp
    0.00 :   1d4e5e:       mov    -0x8(%rbp),%r15
    0.00 :   1d4e62:       mov    0x0(%rbp),%rbx
    0.00 :   1d4e66:       lea    0x174103(%rip),%rdx        # 348f70 <_Py_NoneStruct>
    0.00 :   1d4e6d:       mov    %rbx,%rsi
    0.00 :   1d4e70:       mov    %r15,%rdi
    0.00 :   1d4e73:       addr32 callq 73fae <PyNumber_InPlacePower>
    0.00 :   1d4e79:       subq   $0x1,(%r15)
    0.00 :   1d4e7d:       mov    %rax,0x40(%rsp)
    0.00 :   1d4e82:       je     f28b9 <_PyEval_EvalFrameDefault.cold.2897+0x234c>
    0.00 :   1d4e88:       subq   $0x1,(%rbx)
    0.00 :   1d4e8c:       je     f2746 <_PyEval_EvalFrameDefault.cold.2897+0x21d9>
    0.00 :   1d4e92:       mov    0x40(%rsp),%rax
    0.00 :   1d4e97:       mov    %rax,-0x8(%rbp)
    0.00 :   1d4e9b:       test   %rax,%rax
    0.00 :   1d4e9e:       je     1d0875 <_PyEval_EvalFrameDefault+0x3825>
    0.00 :   1d4ea4:       mov    0x17781d(%rip),%r8d        # 34c6c8 <_PyRuntime+0x2c8>
    0.00 :   1d4eab:       test   %r8d,%r8d
    0.00 :   1d4eae:       jne    1cd130 <_PyEval_EvalFrameDefault+0xe0>
    0.00 :   1d4eb4:       mov    0x17780a(%rip),%eax        # 34c6c4 <_PyRuntime+0x2c4>
    0.00 :   1d4eba:       mov    %r12,%rdx
    0.00 :   1d4ebd:       sub    0x8(%rsp),%rdx
    0.00 :   1d4ec2:       test   %eax,%eax
    0.00 :   1d4ec4:       jne    1cd144 <_PyEval_EvalFrameDefault+0xf4>
    0.00 :   1d4eca:       movzwl (%r12),%ecx
    0.00 :   1d4ecf:       lea    0x10d7ea(%rip),%r10        # 2e26c0 <opcode_targets.13259>
    0.00 :   1d4ed6:       mov    %edx,0x68(%r13)
    0.00 :   1d4eda:       add    $0x2,%r12
    0.00 :   1d4ede:       movzbl %cl,%esi
    0.00 :   1d4ee1:       movzbl %ch,%edi
    0.00 :   1d4ee4:       mov    %rsi,%r8
    0.00 :   1d4ee7:       movslq %edi,%r9
    0.00 :   1d4eea:       jmpq   *(%r10,%rsi,8)
    0.00 :   1d4eee:       mov    %rax,%rbx
    0.00 :   1d4ef1:       jmpq   f28c9 <_PyEval_EvalFrameDefault.cold.2897+0x235c>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           000000000008d0f0 <_IO_file_underflow@@GLIBC_2.2.5>:
    0.00 :   8d0f0:       mov    (%rdi),%eax
    0.00 :   8d0f2:       test   $0x4,%al
    0.00 :   8d0f4:       jne    8d340 <_IO_file_underflow@@GLIBC_2.2.5+0x250>
    0.00 :   8d0fa:       mov    0x8(%rdi),%rdx
    0.00 :   8d0fe:       cmp    0x10(%rdi),%rdx
    0.00 :   8d102:       jb     8d250 <_IO_file_underflow@@GLIBC_2.2.5+0x160>
    0.00 :   8d108:       push   %r14
    0.00 :   8d10a:       push   %r13
    0.00 :   8d10c:       push   %r12
    0.00 :   8d10e:       push   %rbp
    0.00 :   8d10f:       push   %rbx
    0.00 :   8d110:       cmpq   $0x0,0x38(%rdi)
    0.00 :   8d115:       mov    %rdi,%rbx
    0.00 :   8d118:       je     8d308 <_IO_file_underflow@@GLIBC_2.2.5+0x218>
    0.00 :   8d11e:       lea    0x35a63b(%rip),%r12        # 3e7760 <h_nerr@@GLIBC_2.2.5+0x22acb0>
    0.00 :   8d125:       lea    0x35b39c(%rip),%rbp        # 3e84c8 <_IO_file_jumps@@GLIBC_2.2.5+0x228>
    0.00 :   8d12c:       sub    %r12,%rbp
    0.00 :   8d12f:       test   $0x202,%eax
    0.00 :   8d134:       je     8d1d0 <_IO_file_underflow@@GLIBC_2.2.5+0xe0>
    0.00 :   8d13a:       mov    0x35f707(%rip),%r13        # 3ec848 <_IO_2_1_stdout_@@GLIBC_2.2.5+0xe8>
    0.00 :   8d141:       mov    0x0(%r13),%edx
    0.00 :   8d145:       mov    %edx,%eax
    0.00 :   8d147:       and    $0x8000,%eax
    0.00 :   8d14c:       je     8d288 <_IO_file_underflow@@GLIBC_2.2.5+0x198>
    0.00 :   8d152:       and    $0x288,%edx
    0.00 :   8d158:       cmp    $0x280,%edx
    0.00 :   8d15e:       jne    8d1d0 <_IO_file_underflow@@GLIBC_2.2.5+0xe0>
    0.00 :   8d160:       mov    %r13,%rdi
    0.00 :   8d163:       mov    0xd8(%rdi),%r14
    0.00 :   8d16a:       mov    %r14,%rax
    0.00 :   8d16d:       sub    %r12,%rax
    0.00 :   8d170:       cmp    %rbp,%rax
    0.00 :   8d173:       jae    8d360 <_IO_file_underflow@@GLIBC_2.2.5+0x270>
    0.00 :   8d179:       mov    $0xffffffff,%esi
    0.00 :   8d17e:       callq  *0x18(%r14)
    0.00 :   8d182:       testl  $0x8000,0x0(%r13)
    0.00 :   8d18a:       jne    8d1d0 <_IO_file_underflow@@GLIBC_2.2.5+0xe0>
    0.00 :   8d18c:       mov    0x88(%r13),%rdx
    0.00 :   8d193:       subl   $0x1,0x4(%rdx)
    0.00 :   8d197:       jne    8d1d0 <_IO_file_underflow@@GLIBC_2.2.5+0xe0>
    0.00 :   8d199:       movq   $0x0,0x8(%rdx)
    0.00 :   8d1a1:       cmpl   $0x0,0x363830(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   8d1a8:       je     8d1b1 <_IO_file_underflow@@GLIBC_2.2.5+0xc1>
    0.00 :   8d1aa:       lock decl (%rdx)
    0.00 :   8d1ad:       jne    8d1b5 <_IO_file_underflow@@GLIBC_2.2.5+0xc5>
    0.00 :   8d1af:       jmp    8d1cb <_IO_file_underflow@@GLIBC_2.2.5+0xdb>
    0.00 :   8d1b1:       decl   (%rdx)
    0.00 :   8d1b3:       je     8d1cb <_IO_file_underflow@@GLIBC_2.2.5+0xdb>
    0.00 :   8d1b5:       lea    (%rdx),%rdi
    0.00 :   8d1b8:       sub    $0x80,%rsp
    0.00 :   8d1bf:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   8d1c4:       add    $0x80,%rsp
    0.00 :   8d1cb:       nopl   0x0(%rax,%rax,1)
    0.00 :   8d1d0:       mov    %rbx,%rdi
    0.00 :   8d1d3:       callq  8de80 <_IO_switch_to_get_mode@@GLIBC_2.2.5>
    0.00 :   8d1d8:       mov    0xd8(%rbx),%r13
    0.00 :   8d1df:       mov    0x38(%rbx),%rsi
    0.00 :   8d1e3:       mov    %r13,%rax
    0.00 :   8d1e6:       mov    %rsi,0x8(%rbx)
    0.00 :   8d1ea:       mov    %rsi,0x18(%rbx)
    0.00 :   8d1ee:       sub    %r12,%rax
    0.00 :   8d1f1:       mov    %rsi,0x10(%rbx)
    0.00 :   8d1f5:       mov    %rsi,0x30(%rbx)
    0.00 :   8d1f9:       cmp    %rbp,%rax
    0.00 :   8d1fc:       mov    %rsi,0x28(%rbx)
    0.00 :   8d200:       mov    %rsi,0x20(%rbx)
    0.00 :   8d204:       jae    8d330 <_IO_file_underflow@@GLIBC_2.2.5+0x240>
    0.00 :   8d20a:       mov    0x40(%rbx),%rdx
    0.00 :   8d20e:       mov    %rbx,%rdi
    0.00 :   8d211:       sub    %rsi,%rdx
    0.00 :   8d214:       callq  *0x70(%r13)
    0.00 :   8d218:       test   %rax,%rax
    0.00 :   8d21b:       jle    8d258 <_IO_file_underflow@@GLIBC_2.2.5+0x168>
    0.00 :   8d21d:       mov    0x90(%rbx),%rdx
  100.00 :   8d224:       add    %rax,0x10(%rbx)
    0.00 :   8d228:       cmp    $0xffffffffffffffff,%rdx
    0.00 :   8d22c:       je     8d238 <_IO_file_underflow@@GLIBC_2.2.5+0x148>
    0.00 :   8d22e:       add    %rdx,%rax
    0.00 :   8d231:       mov    %rax,0x90(%rbx)
    0.00 :   8d238:       mov    0x8(%rbx),%rax
    0.00 :   8d23c:       pop    %rbx
    0.00 :   8d23d:       pop    %rbp
    0.00 :   8d23e:       movzbl (%rax),%eax
    0.00 :   8d241:       pop    %r12
    0.00 :   8d243:       pop    %r13
    0.00 :   8d245:       pop    %r14
    0.00 :   8d247:       retq
    0.00 :   8d248:       nopl   0x0(%rax,%rax,1)
    0.00 :   8d250:       movzbl (%rdx),%eax
    0.00 :   8d253:       retq
    0.00 :   8d254:       nopl   0x0(%rax)
    0.00 :   8d258:       mov    (%rbx),%edx
    0.00 :   8d25a:       mov    %edx,%ecx
    0.00 :   8d25c:       or     $0x20,%edx
    0.00 :   8d25f:       or     $0x10,%ecx
    0.00 :   8d262:       test   %rax,%rax
    0.00 :   8d265:       mov    $0xffffffffffffffff,%rax
    0.00 :   8d26c:       cmove  %ecx,%edx
    0.00 :   8d26f:       mov    %rax,0x90(%rbx)
    0.00 :   8d276:       mov    %edx,(%rbx)
    0.00 :   8d278:       pop    %rbx
    0.00 :   8d279:       pop    %rbp
    0.00 :   8d27a:       pop    %r12
    0.00 :   8d27c:       pop    %r13
    0.00 :   8d27e:       pop    %r14
    0.00 :   8d280:       retq
    0.00 :   8d281:       nopl   0x0(%rax)
    0.00 :   8d288:       mov    0x88(%r13),%r8
    0.00 :   8d28f:       mov    %r13,%rdi
    0.00 :   8d292:       mov    %fs:0x10,%r9
    0.00 :   8d29b:       cmp    %r9,0x8(%r8)
    0.00 :   8d29f:       je     8d2e8 <_IO_file_underflow@@GLIBC_2.2.5+0x1f8>
    0.00 :   8d2a1:       mov    $0x1,%esi
    0.00 :   8d2a6:       cmpl   $0x0,0x36372b(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   8d2ad:       je     8d2b8 <_IO_file_underflow@@GLIBC_2.2.5+0x1c8>
    0.00 :   8d2af:       lock cmpxchg %esi,(%r8)
    0.00 :   8d2b4:       jne    8d2be <_IO_file_underflow@@GLIBC_2.2.5+0x1ce>
    0.00 :   8d2b6:       jmp    8d2d4 <_IO_file_underflow@@GLIBC_2.2.5+0x1e4>
    0.00 :   8d2b8:       cmpxchg %esi,(%r8)
    0.00 :   8d2bc:       je     8d2d4 <_IO_file_underflow@@GLIBC_2.2.5+0x1e4>
    0.00 :   8d2be:       lea    (%r8),%rdi
    0.00 :   8d2c1:       sub    $0x80,%rsp
    0.00 :   8d2c8:       callq  130520 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   8d2cd:       add    $0x80,%rsp
    0.00 :   8d2d4:       mov    0x35f56d(%rip),%rdi        # 3ec848 <_IO_2_1_stdout_@@GLIBC_2.2.5+0xe8>
    0.00 :   8d2db:       mov    0x88(%r13),%r8
    0.00 :   8d2e2:       mov    (%rdi),%edx
    0.00 :   8d2e4:       mov    %r9,0x8(%r8)
    0.00 :   8d2e8:       and    $0x288,%edx
    0.00 :   8d2ee:       addl   $0x1,0x4(%r8)
    0.00 :   8d2f3:       cmp    $0x280,%edx
    0.00 :   8d2f9:       jne    8d182 <_IO_file_underflow@@GLIBC_2.2.5+0x92>
    0.00 :   8d2ff:       jmpq   8d163 <_IO_file_underflow@@GLIBC_2.2.5+0x73>
    0.00 :   8d304:       nopl   0x0(%rax)
    0.00 :   8d308:       mov    0x48(%rdi),%rdi
    0.00 :   8d30c:       test   %rdi,%rdi
    0.00 :   8d30f:       je     8d31c <_IO_file_underflow@@GLIBC_2.2.5+0x22c>
    0.00 :   8d311:       callq  212c8 <free@plt>
    0.00 :   8d316:       andl   $0xfffffeff,(%rbx)
    0.00 :   8d31c:       mov    %rbx,%rdi
    0.00 :   8d31f:       callq  8e3d0 <_IO_doallocbuf@@GLIBC_2.2.5>
    0.00 :   8d324:       mov    (%rbx),%eax
    0.00 :   8d326:       jmpq   8d11e <_IO_file_underflow@@GLIBC_2.2.5+0x2e>
    0.00 :   8d32b:       nopl   0x0(%rax,%rax,1)
    0.00 :   8d330:       callq  8a220 <fmemopen@GLIBC_2.2.5+0x230>
    0.00 :   8d335:       mov    0x38(%rbx),%rsi
    0.00 :   8d339:       jmpq   8d20a <_IO_file_underflow@@GLIBC_2.2.5+0x11a>
    0.00 :   8d33e:       xchg   %ax,%ax
    0.00 :   8d340:       or     $0x20,%eax
    0.00 :   8d343:       mov    %eax,(%rdi)
    0.00 :   8d345:       mov    0x35db1c(%rip),%rax        # 3eae68 <h_errlist@@GLIBC_2.2.5+0xdc8>
    0.00 :   8d34c:       movl   $0x9,%fs:(%rax)
    0.00 :   8d353:       mov    $0xffffffff,%eax
    0.00 :   8d358:       retq
    0.00 :   8d359:       nopl   0x0(%rax)
    0.00 :   8d360:       callq  8a220 <fmemopen@GLIBC_2.2.5+0x230>
    0.00 :   8d365:       mov    0x35f4dc(%rip),%rdi        # 3ec848 <_IO_2_1_stdout_@@GLIBC_2.2.5+0xe8>
    0.00 :   8d36c:       jmpq   8d179 <_IO_file_underflow@@GLIBC_2.2.5+0x89>
    0.00 :   8d371:       testl  $0x8000,0x0(%r13)
    0.00 :   8d379:       mov    %rax,%rsi
    0.00 :   8d37c:       jne    8d3bd <_IO_file_underflow@@GLIBC_2.2.5+0x2cd>
    0.00 :   8d37e:       mov    0x88(%r13),%rdx
    0.00 :   8d385:       subl   $0x1,0x4(%rdx)
    0.00 :   8d389:       jne    8d3bd <_IO_file_underflow@@GLIBC_2.2.5+0x2cd>
    0.00 :   8d38b:       movq   $0x0,0x8(%rdx)
    0.00 :   8d393:       cmpl   $0x0,0x36363e(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   8d39a:       je     8d3a3 <_IO_file_underflow@@GLIBC_2.2.5+0x2b3>
    0.00 :   8d39c:       lock decl (%rdx)
    0.00 :   8d39f:       jne    8d3a7 <_IO_file_underflow@@GLIBC_2.2.5+0x2b7>
    0.00 :   8d3a1:       jmp    8d3bd <_IO_file_underflow@@GLIBC_2.2.5+0x2cd>
    0.00 :   8d3a3:       decl   (%rdx)
    0.00 :   8d3a5:       je     8d3bd <_IO_file_underflow@@GLIBC_2.2.5+0x2cd>
    0.00 :   8d3a7:       lea    (%rdx),%rdi
    0.00 :   8d3aa:       sub    $0x80,%rsp
    0.00 :   8d3b1:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   8d3b6:       add    $0x80,%rsp
    0.00 :   8d3bd:       mov    %rsi,%rdi
    0.00 :   8d3c0:       callq  21ed0 <gnu_get_libc_version@@GLIBC_2.2.5+0x1d0>
