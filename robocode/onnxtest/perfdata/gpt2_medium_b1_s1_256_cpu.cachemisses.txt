# ========
# captured on    : Mon Apr 26 14:16:22 2021
# header version : 1
# data offset    : 296
# data size      : 3876864
# feat offset    : 3877160
# hostname : lisa-msi
# os release : 5.4.0-72-generic
# perf version : 5.4.101
# arch : x86_64
# nrcpus online : 8
# nrcpus avail : 8
# cpudesc : Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz
# cpuid : GenuineIntel,6,158,9
# total memory : 32765148 kB
# cmdline : /usr/lib/linux-hwe-5.4-tools-5.4.0-72/perf record -p 19520 -e cache-misses -g 
# event : name = cache-misses, , id = { 500, 501, 502, 503, 504, 505, 506, 507 }, size = 112, config = 0x3, { sample_period, sample_freq } = 4000, sample_type = IP|TID|TIME|CALLCHAIN|PERIOD, read_format = ID, disabled = 1, inherit = 1, mmap = 1, comm = 1, freq = 1, task = 1, sample_id_all = 1, exclude_guest = 1, mmap2 = 1, comm_exec = 1, ksymbol = 1, bpf_event = 1
# sibling sockets : 0-7
# sibling dies    : 0-7
# sibling threads : 0,4
# sibling threads : 1,5
# sibling threads : 2,6
# sibling threads : 3,7
# CPU 0: Core ID 0, Die ID 0, Socket ID 0
# CPU 1: Core ID 1, Die ID 0, Socket ID 0
# CPU 2: Core ID 2, Die ID 0, Socket ID 0
# CPU 3: Core ID 3, Die ID 0, Socket ID 0
# CPU 4: Core ID 0, Die ID 0, Socket ID 0
# CPU 5: Core ID 1, Die ID 0, Socket ID 0
# CPU 6: Core ID 2, Die ID 0, Socket ID 0
# CPU 7: Core ID 3, Die ID 0, Socket ID 0
# node0 meminfo  : total = 32765148 kB, free = 736108 kB
# node0 cpu list : 0-7
# pmu mappings: intel_pt = 8, software = 1, power = 19, uprobe = 7, uncore_imc = 10, cpu = 4, cstate_core = 17, uncore_cbox_2 = 13, breakpoint = 5, uncore_cbox_0 = 11, tracepoint = 2, cstate_pkg = 18, uncore_arb = 15, kprobe = 6, i915 = 16, msr = 9, uncore_cbox_3 = 14, uncore_cbox_1 = 12
# CPU cache info:
#  L1 Data                 32K [0,4]
#  L1 Instruction          32K [0,4]
#  L1 Data                 32K [1,5]
#  L1 Instruction          32K [1,5]
#  L1 Data                 32K [2,6]
#  L1 Instruction          32K [2,6]
#  L1 Data                 32K [3,7]
#  L1 Instruction          32K [3,7]
#  L2 Unified             256K [0,4]
#  L2 Unified             256K [1,5]
#  L2 Unified             256K [2,6]
#  L2 Unified             256K [3,7]
#  L3 Unified            6144K [0-7]
# time of first sample : 11934.073635
# time of last sample : 11953.228447
# sample duration :  19154.811 ms
# memory nodes (nr 1, block size 0x8000000):
#    0 [32G]: 0-13,32-273
# bpf_prog_info 2: bpf_prog_7be49e3934a125ba addr 0xffffffffc0219886 size 200
# bpf_prog_info 3: bpf_prog_2a142ef67aaad174 addr 0xffffffffc025347c size 200
# bpf_prog_info 4: bpf_prog_7be49e3934a125ba addr 0xffffffffc02ef153 size 200
# bpf_prog_info 5: bpf_prog_2a142ef67aaad174 addr 0xffffffffc02f148e size 200
# bpf_prog_info 6: bpf_prog_7be49e3934a125ba addr 0xffffffffc0444b5d size 200
# bpf_prog_info 7: bpf_prog_2a142ef67aaad174 addr 0xffffffffc0446888 size 200
# missing features: TRACING_DATA BRANCH_STACK GROUP_DESC AUXTRACE STAT CLOCKID DIR_FORMAT COMPRESSED 
# ========
#
#
# Total Lost Samples: 0
#
# Samples: 56K of event 'cache-misses'
# Event count (approx.): 1195631077
#
# Children      Self  Command  Shared Object                                      Symbol                                                                                                                                                                                                                                                                                                                                                                                                                    
# ........  ........  .......  .................................................  ..........................................................................................................................................................................................................................................................................................................................................................................................................................
#
    69.00%    68.63%  python   onnxruntime_pybind11_state.so                      [.] MlasGemmFloatKernelFma3
            |          
             --68.99%--MlasGemmFloatKernelFma3

     7.05%     7.02%  python   libc-2.27.so                                       [.] __memmove_avx_unaligned_erms
            |          
            |--2.07%--0x8b4807894810c083
            |          onnxruntime::OpKernelContextInternal::~OpKernelContextInternal
            |          0x7fff74565250
            |          |          
            |           --2.07%--onnxruntime::Split::Compute
            |                     __memmove_avx_unaligned_erms
            |          
             --1.62%--0x7f8902738f80
                       0xd5c4dea70b45e500
                       onnxruntime::python::AddTensorAsPyObj
                       __memmove_avx_unaligned_erms

     4.87%     4.86%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::GemmBroadcastBias<float>
     3.86%     0.00%  python   [unknown]                                          [.] 0x4848778b48078b48
            |
            ---0x4848778b48078b48
               onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               |          
                --3.73%--onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     3.86%     0.13%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
            |          
             --3.73%--onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
                       onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     3.73%     3.72%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN
            |          
             --3.72%--0x4848778b48078b48
                       onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
                       onnxruntime::ProcessBroadcastSpanFuncs onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     3.70%     0.00%  python   [unknown]                                          [.] 0x00002825048b4864
            |
            ---0x2825048b4864
               std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     3.70%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
            |
            ---std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     3.70%     3.69%  python   onnxruntime_pybind11_state.so                      [.] std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN
            |          
             --3.69%--0x2825048b4864
                       std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
                       std::enable_if<std::is_arithmetic<float>::value, onnxruntime::ProcessBroadcastSpanFuncs>::type onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN

     3.36%     0.00%  python   [unknown]                                          [.] 0x00007f881cf06840
            |
            ---0x7f881cf06840
               0x7fff74564cc0
               |          
                --3.35%--onnxruntime::contrib::BiasGelu<float, true>::Compute

     3.36%     0.00%  python   [JIT] tid 19520                                    [.] 0x00007fff74564cc0
            |
            ---0x7fff74564cc0
               |          
                --3.35%--onnxruntime::contrib::BiasGelu<float, true>::Compute

     3.35%     3.34%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::contrib::BiasGelu<float, true>::Compute
            |          
             --3.34%--0x7f881cf06840
                       0x7fff74564cc0
                       onnxruntime::contrib::BiasGelu<float, true>::Compute

     2.14%     0.00%  python   [unknown]                                          [.] 0x8b4807894810c083
            |
            ---0x8b4807894810c083
               onnxruntime::OpKernelContextInternal::~OpKernelContextInternal
               0x7fff74565250
               |          
                --2.09%--onnxruntime::Split::Compute
                          |          
                           --2.08%--__memmove_avx_unaligned_erms

     2.14%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OpKernelContextInternal::~OpKernelContextInternal
            |
            ---onnxruntime::OpKernelContextInternal::~OpKernelContextInternal
               0x7fff74565250
               |          
                --2.09%--onnxruntime::Split::Compute
                          |          
                           --2.08%--__memmove_avx_unaligned_erms

     2.14%     0.00%  python   [JIT] tid 19520                                    [.] 0x00007fff74565250
            |
            ---0x7fff74565250
               |          
                --2.09%--onnxruntime::Split::Compute
                          |          
                           --2.08%--__memmove_avx_unaligned_erms

     2.09%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Split::Compute
            |
            ---onnxruntime::Split::Compute
               |          
                --2.08%--__memmove_avx_unaligned_erms

     2.00%     0.00%  python   [unknown]                                          [.] 0x00e0908b4830488b
            |
            ---0xe0908b4830488b
               onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               |          
                --2.00%--Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >

     2.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
            |
            ---onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
               |          
                --2.00%--Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >

     2.00%     2.00%  python   onnxruntime_pybind11_state.so                      [.] Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >
            |          
             --2.00%--0xe0908b4830488b
                       onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN
                       Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >

     1.77%     1.76%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::contrib::LayerNorm<float, false>::Compute
     1.62%     0.00%  python   [unknown]                                          [.] 0x00007f8902738f80
            |
            ---0x7f8902738f80
               0xd5c4dea70b45e500
               onnxruntime::python::AddTensorAsPyObj
               |          
                --1.62%--__memmove_avx_unaligned_erms

     1.62%     0.00%  python   [unknown]                                          [.] 0xd5c4dea70b45e500
            |
            ---0xd5c4dea70b45e500
               onnxruntime::python::AddTensorAsPyObj
               |          
                --1.62%--__memmove_avx_unaligned_erms

     1.62%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::python::AddTensorAsPyObj
            |
            ---onnxruntime::python::AddTensorAsPyObj
               |          
                --1.62%--__memmove_avx_unaligned_erms

     0.96%     0.96%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::TransposeSingleAxisInwards
     0.89%     0.89%  python   onnxruntime_pybind11_state.so                      [.] MlasSgemmCopyPackB
     0.74%     0.74%  python   onnxruntime_pybind11_state.so                      [.] MlasReduceMaximumF32KernelAvx
     0.66%     0.65%  python   onnxruntime_pybind11_state.so                      [.] MlasComputeSumExpF32KernelFma3
     0.35%     0.35%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::TransposeSingleAxisOutwards
     0.26%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401c6f
     0.23%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab4027af
     0.20%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935d47
     0.18%     0.17%  python   onnxruntime_pybind11_state.so                      [.] MlasSgemmPackedOperation
     0.17%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa93555f
     0.12%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab400a0f
     0.12%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa94650c
     0.12%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa946265
     0.09%     0.00%  python   [unknown]                                          [.] 0xbe0b4ad2bdb5a610
     0.09%     0.00%  python   [unknown]                                          [.] 0xbcce3e323df5b274
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd32a744bdb71c5e
     0.09%     0.00%  python   [unknown]                                          [.] 0x3c722953be0e9145
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd7a07263d165cce
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd95d3603d4e7d4f
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd9a3711be02f934
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd8b2538bdee5b70
     0.09%     0.00%  python   [unknown]                                          [.] 0x3cf3d97abe00d201
     0.09%     0.00%  python   [unknown]                                          [.] 0xbdc91f213be4acf1
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd5c88e1bded1d11
     0.09%     0.00%  python   [unknown]                                          [.] 0xbe065841bd84932a
     0.09%     0.00%  python   [unknown]                                          [.] 0xbe0b650abc17937f
     0.09%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401e74
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd56a5d5bdf84387
     0.09%     0.00%  python   [unknown]                                          [.] 0xbe101499bd4d1f29
     0.09%     0.00%  python   [unknown]                                          [.] 0xbdbee3e0bde62de1
     0.09%     0.00%  python   [unknown]                                          [.] 0xbc3c3302b98dd6f5
     0.09%     0.00%  python   [unknown]                                          [.] 0xbcb41218baf13e90
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd4018d3bdb230fd
     0.09%     0.00%  python   [unknown]                                          [.] 0xbc0b59dbbdbe986d
     0.09%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa934800
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd09ccedbe1235c0
     0.09%     0.00%  python   [unknown]                                          [.] 0xbd154406bdf9800d
     0.08%     0.00%  python   [unknown]                                          [.] 0x3d63a3b9be0663a7
     0.08%     0.00%  python   [unknown]                                          [.] 0xbd650fa9bdb99a4c
     0.08%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa918453
     0.08%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa913fcb
     0.07%     0.00%  python   [unknown]                                          [.] 0x3bceedae3e010537
     0.07%     0.00%  python   [unknown]                                          [.] 0xbd2305003ccb0526
     0.07%     0.00%  python   [unknown]                                          [.] 0x08ec834800000138
     0.07%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ExecutionFrame::~ExecutionFrame
     0.07%     0.00%  python   [unknown]                                          [.] 0x000055c75d8affc0
     0.07%     0.00%  python   [unknown]                                          [.] 0x3d58911abd6d1ed1
     0.07%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa913f42
     0.07%     0.00%  python   [unknown]                                          [.] 0x3ea575d3bdee1c71
     0.07%     0.00%  python   [unknown]                                          [.] 0xbdd889c3bf04ee92
     0.07%     0.00%  python   [unknown]                                          [.] 0x3dcabb67bdbf814d
     0.07%     0.00%  python   [unknown]                                          [.] 0x3ede5f413e1dd23c
     0.07%     0.00%  python   [unknown]                                          [.] 0x3e5ed193bd656727
     0.07%     0.00%  python   [unknown]                                          [.] 0x3dae99463cc0e14d
     0.07%     0.00%  python   [unknown]                                          [.] 0x3e7eb401bd283deb
     0.07%     0.00%  python   [unknown]                                          [.] 0xbe3f31e03dc96156
     0.07%     0.00%  python   [unknown]                                          [.] 0x3d0016a73dc0f601
     0.07%     0.00%  python   [unknown]                                          [.] 0x3d8ce765bd6fb715
     0.07%     0.00%  python   [unknown]                                          [.] 0x3e196cc9bc01bfcc
     0.07%     0.00%  python   [unknown]                                          [.] 0xbdca48363bdccb94
     0.07%     0.00%  python   [unknown]                                          [.] 0x3cb52c37bd43ccbb
     0.07%     0.00%  python   [unknown]                                          [.] 0x3cca80d1bd9f919f
     0.07%     0.00%  python   [unknown]                                          [.] 0x3d38d9e03ca33612
     0.06%     0.00%  python   [unknown]                                          [.] 0xbcccab0e3c8039e8
     0.06%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa913db4
     0.06%     0.00%  python   [unknown]                                          [.] 0x3b0eff673d2a17d9
     0.06%     0.00%  python   [unknown]                                          [.] 0xbc909f633f069c38
     0.06%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d9708
     0.06%     0.03%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::SequentialExecutor::Execute
     0.06%     0.00%  python   [unknown]                                          [.] 0xbd50ab85bddcb4d3
     0.06%     0.00%  python   [unknown]                                          [.] 0xbc9fe1a53c952c8e
     0.05%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab0504b5
     0.05%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9464fc
     0.05%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9464c8
     0.05%     0.05%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::contrib::SkipLayerNorm<float>::Compute
     0.05%     0.00%  python   [unknown]                                          [.] 0x3e3caef7be5f4d39
     0.05%     0.05%  python   onnxruntime_pybind11_state.so                      [.] memcpy@plt
     0.05%     0.01%  python   [psmouse]                                          [k] psmouse_interrupt
     0.05%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa94642b
     0.05%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa938b70
     0.05%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab04ed7c
     0.04%     0.00%  python   [psmouse]                                          [k] psmouse_handle_byte
     0.04%     0.01%  python   [psmouse]                                          [k] elantech_process_byte
     0.04%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8a69be
     0.04%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab6000e4
     0.04%     0.04%  python   onnxruntime_pybind11_state.so                      [.] MlasComputeSoftmaxThreaded
     0.04%     0.00%  python   [unknown]                                          [k] 0000000000000000
     0.03%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab055f63
     0.03%     0.00%  python   onnxruntime_pybind11_state.so                      [.] MlasSgemmThreaded
     0.03%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa938006
     0.03%     0.03%  python   libc-2.27.so                                       [.] cfree@GLIBC_2.2.5
     0.03%     0.00%  python   [unknown]                                          [.] 0x3c0d2b0abcd9a6b0
     0.03%     0.00%  python   [unknown]                                          [k] 0x8b4c53fd89485554
     0.03%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::BFCArena::~BFCArena
     0.03%     0.00%  python   onnxruntime_pybind11_state.so                      [.] 0x00007f8903118058
     0.03%     0.00%  python   [unknown]                                          [.] 0x3e81350ebd0c2640
     0.03%     0.00%  python   [unknown]                                          [.] 0xbd9920003d47f292
     0.03%     0.00%  python   [unknown]                                          [.] 0xbd34a3a93d196910
     0.03%     0.00%  python   [unknown]                                          [.] 0x3dce7a653dbf2e14
     0.03%     0.03%  python   libc-2.27.so                                       [.] malloc
     0.03%     0.00%  python   [unknown]                                          [.] 0x3d73ee45b9cc8f5e
     0.03%     0.00%  python   [unknown]                                          [.] 0x3df029c2bd71d991
     0.03%     0.00%  python   [unknown]                                          [.] 0xbd24b025bc404021
     0.03%     0.00%  python   [unknown]                                          [.] 0x3bade49b3dbace8c
     0.03%     0.00%  python   [unknown]                                          [.] 0xbb7a81e9bbae99b6
     0.03%     0.00%  python   [psmouse]                                          [k] elantech_input_sync_v4
     0.03%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab055a7e
     0.03%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab053988
     0.03%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab052647
     0.03%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab059574
     0.03%     0.00%  python   [unknown]                                          [.] 0x3d5dcd433d9868f2
     0.03%     0.00%  python   [unknown]                                          [.] 0x3cad73a83dc365ed
     0.03%     0.00%  python   [unknown]                                          [.] 0x3e412b96bd2a96c4
     0.03%     0.00%  python   [unknown]                                          [.] 0x3e901f2d3d988bb1
     0.02%     0.00%  python   [unknown]                                          [.] 0x3dbff3f13d9573ee
     0.02%     0.00%  python   [unknown]                                          [.] 0xbd0708013d8828f2
     0.02%     0.00%  python   [unknown]                                          [.] 0x3d6322ccbc285eea
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401e79
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1316c0
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e2f2b09bca80e36
     0.02%     0.00%  python   [unknown]                                          [.] 0xb979e9783d5ee04b
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab0594ce
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f2913
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f28be
     0.02%     0.00%  python   [unknown]                                          [.] 0x3d506ee0bb025f49
     0.02%     0.00%  python   [unknown]                                          [.] 0xbc867b4d3c89e013
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e03f3f8bd65a60a
     0.02%     0.00%  python   [unknown]                                          [.] 0xbe9179e33db3b9b3
     0.02%     0.00%  python   [unknown]                                          [.] 0xbd9513d93dd3e1bc
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e4977103ce70b15
     0.02%     0.00%  python   [unknown]                                          [.] 0x3dfcdf21bd651634
     0.02%     0.02%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan
     0.02%     0.00%  python   [unknown]                                          [.] 0xbddcd33cbc342592
     0.02%     0.00%  python   [unknown]                                          [.] 0x3dcf9cce3e024790
     0.02%     0.00%  python   [unknown]                                          [.] 0x3dc5c6163b940ecd
     0.02%     0.00%  python   [unknown]                                          [.] 0x3dd162b73bc1c7ab
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e35387dbadefeb8
     0.02%     0.00%  python   [unknown]                                          [.] 0x3dd254c8bdf47dda
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e3e3f
     0.02%     0.00%  python   [ath10k_pci]                                       [k] ath10k_pci_napi_poll
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e5c97edbd296311
     0.02%     0.00%  python   [unknown]                                          [.] 0x3df198883c177b14
     0.02%     0.00%  python   [unknown]                                          [.] 0x3d46548dbcfde739
     0.02%     0.00%  python   [unknown]                                          [.] 0xbc6994c73d9b614f
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f2793
     0.02%     0.00%  python   [unknown]                                          [.] 0x0000000000000001
     0.02%     0.00%  python   [unknown]                                          [.] 0xbe738c6c3da1d167
     0.02%     0.02%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OpKernelContext::OpKernelContext
     0.02%     0.02%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Reshape::Compute
     0.02%     0.00%  python   [unknown]                                          [.] 0x3d7aabb13e164d8d
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e340dacbc97aa12
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e0987f93d81a384
     0.02%     0.00%  python   [unknown]                                          [.] 0x3d72038b3c1783e6
     0.02%     0.02%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e445ff23d35eeed
     0.02%     0.00%  python   [unknown]                                          [.] 0x3db9e7a43d34e93a
     0.02%     0.00%  python   [unknown]                                          [.] 0xbcafc76a3df915ed
     0.02%     0.02%  python   onnxruntime_pybind11_state.so                      [.] MlasSgemmOperation
     0.02%     0.00%  python   [unknown]                                          [.] 0x3d77e9de3df20bdb
     0.02%     0.00%  python   [unknown]                                          [.] 0x3e01fc5d3c645cd1
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab4027b9
     0.02%     0.00%  python   [ath10k_core]                                      [k] ath10k_ce_per_engine_service_any
     0.02%     0.00%  python   [ath10k_core]                                      [k] ath10k_ce_per_engine_service
     0.02%     0.00%  python   [ath10k_pci]                                       [k] ath10k_pci_process_rx_cb
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935ce4
     0.02%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401cef
     0.02%     0.02%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::TensorShape::Size
     0.02%     0.00%  python   [unknown]                                          [.] 0xbd240fa83dbf6e22
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaab326c6
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f2e42
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9347dc
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dc1bd
     0.01%     0.00%  python   [unknown]                                          [.] 0xbc068b893de73829
     0.01%     0.01%  python   libc-2.27.so                                       [.] _int_malloc
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d9724
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::BFCArena::FindChunkPtr
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue
     0.01%     0.00%  python   [ath10k_pci]                                       [k] ath10k_pci_htc_rx_cb
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d8312
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Split::ComputeImpl<float>
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9371d5
     0.01%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e05f7
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Graph::NodeAtIndexImpl
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab400a34
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8caf46
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::TensorShape::SizeHelper
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d7e94
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d6db9
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaab32707
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e3e93
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab4022bf
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::BFCArena::SplitChunk
     0.01%     0.00%  python   [unknown]                                          [.] 0xbefa1d08bf832bbd
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d7dc0
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa94703b
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401c60
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::MatMul<float>::Compute
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d8ea276bc4b2b25
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa91843f
     0.01%     0.00%  python   [ath10k_pci]                                       [k] ath10k_pci_rx_post_pipe
     0.01%     0.01%  python   libc-2.27.so                                       [.] __strcmp_sse2_unaligned
     0.01%     0.00%  python   [unknown]                                          [.] 0x000055c75d19b960
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::IExecutionProvider::GetAllocator
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401ce0
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::MatMulComputeHelper::Compute
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dbd85
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d9266
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Gemm<float>::ComputeActivation
     0.01%     0.00%  python   [unknown]                                          [.] 0x0000441f0f000000
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] MlasTanhKernelFma3
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa938c6d
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ca9476abd6dc148
     0.01%     0.01%  python   python3.7                                          [.] _PyObject_Free
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e05d0
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd39c5d9bdd3b5f9
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d8275
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2bd3f6
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa92c20d
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa92c03e
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa92d914
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935541
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa934fac
     0.01%     0.01%  python   [kvm]                                              [k] pvclock_gtod_notify
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935c60
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::python::GetPyObjFromTensor
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx
     0.01%     0.00%  python   [unknown]                                          [.] 0x3edbf51a3fa07936
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935d7a
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa945ce4
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e3e37
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8777fe
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa852062
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf6730f63d5702e0
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9347e8
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8040aa
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf31adfebf33cef6
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e5a47a13d076a3b
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ec2f4363e571166
     0.01%     0.00%  python   [unknown]                                          [.] 0x3dcbac71bf10e50a
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf3c1e2abee265a8
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab402797
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fbc93b1bfea9ad0
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ebf39c83f481c1a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f3c3f8f3f471fde
     0.01%     0.00%  python   [unknown]                                          [.] 0x401cd82a40087bb2
     0.01%     0.00%  python   [unknown]                                          [.] 0xc09797aac0ae030c
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe32358c3f117154
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fac031a400c5a0e
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fd66c4a3f9c709a
     0.01%     0.00%  python   [unknown]                                          [.] 0x4042bd5e3f9eca63
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf9da0d8bf533ddd
     0.01%     0.00%  python   [unknown]                                          [k] 0x3e758b443e17f742
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f1f0a543f4fd5ce
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ff0c6763fc7bfbc
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf1b5ce5bf0a754a
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd91c5e83fb067f9
     0.01%     0.00%  python   [unknown]                                          [.] 0x3c97de30403629b2
     0.01%     0.00%  python   [unknown]                                          [.] 0xbee1a890bf922fb8
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f8834633fae3e59
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfbb3c6cbff91bd8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf8a03efbe8e78e6
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfccedaac00a7fd3
     0.01%     0.00%  python   [unknown]                                          [.] 0xbedf2836bf9cd87e
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf94984fbfc60c3d
     0.01%     0.00%  python   [unknown]                                          [.] 0x4036f23b402ad0a0
     0.01%     0.00%  python   [unknown]                                          [.] 0x40121d81404d529c
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f2d1e763f92f0de
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ffdc2963f8ef253
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe8dfcf53ec3537b
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf2485c63f75a158
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf12c3763fcd3c91
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f15f5f03f0b3df8
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e987be83f0cb431
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e8cb8a43eac7b02
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f284009bda74140
     0.01%     0.00%  python   [unknown]                                          [.] 0x3db79dc03c024748
     0.01%     0.00%  python   [unknown]                                          [.] 0xc03d814a3eb61904
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf67f158bd88c7d0
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf50b144bfa993a8
     0.01%     0.00%  python   [unknown]                                          [.] 0x401097423f3a71ec
     0.01%     0.00%  python   [unknown]                                          [.] 0x408e1bae408ec9cb
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f8a30603ef8f5dc
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf899a29bf806164
     0.01%     0.00%  python   [unknown]                                          [.] 0x3dcf568e3f08ef65
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfda3378bfb73ac2
     0.01%     0.00%  python   [unknown]                                          [.] 0xbed25a013c105728
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f3a79013fb08610
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf5a47f3bf70df94
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfbca670bf84471d
     0.01%     0.00%  python   [unknown]                                          [.] 0xbea6e67cbed7817c
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf0ee4eebf3577a2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ffd52de3e01e970
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f943be83fe988d7
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f20815e3fced336
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e9f1a90be0a2b60
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf1415533f52c5f3
     0.01%     0.00%  python   [unknown]                                          [.] 0x3eb5bdbc3f59c202
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf9e357ebe3ca6d8
     0.01%     0.00%  python   [unknown]                                          [.] 0x402f68073f1b9c4f
     0.01%     0.00%  python   [unknown]                                          [.] 0x402afb3e401dfc8a
     0.01%     0.00%  python   [unknown]                                          [.] 0xc00dad6ec0040f94
     0.01%     0.00%  python   [unknown]                                          [.] 0x401f92c440a05df3
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf3304283ec3574c
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfa92dd6bfb8208f
     0.01%     0.00%  python   [unknown]                                          [.] 0x4003271f3ffbcc34
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f4f73864010f282
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ffd78b63f955766
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e23e1fabdbdaae1
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e741118c025b4aa
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd95d510be42c221
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e10aa38beb6f4ee
     0.01%     0.00%  python   [unknown]                                          [.] 0xbef0c6dbbe2f4148
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe8693c1401b86da
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe467e183f15ed54
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab400958
     0.01%     0.00%  python   [unknown]                                          [k] 0xbe5ef5b53db8ee5b
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf32226e3eaea342
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf93dbf4be963750
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf10185cbf980667
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf7397b2bf1d195a
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf794656bf568aca
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fc38febbf0bf861
     0.01%     0.00%  python   [unknown]                                          [.] 0x3da07192bfdb9758
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfe217bdbfba604f
     0.01%     0.00%  python   [unknown]                                          [.] 0xc025a7c5bfb86b93
     0.01%     0.00%  python   [unknown]                                          [.] 0xbffdf006bc90bb44
     0.01%     0.00%  python   [unknown]                                          [.] 0xbee431f8bfbea8a7
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe92f6be3f0336ac
     0.01%     0.00%  python   [unknown]                                          [.] 0x3da167d0bf867de8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe4b78ac3f1b3fac
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfe53a34bffbda50
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd383c30bf3ca4cb
     0.01%     0.00%  python   [unknown]                                          [.] 0x40269c083f7f4b0b
     0.01%     0.00%  python   [unknown]                                          [.] 0x400f0eaa3ffcf479
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ea31506bf32d90b
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e8b3638bfad4dca
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f054f18c03b374e
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d85c8a03dd21664
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d0d5d58bd962999
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e9cd39a3d63ce40
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f0273b1beeb89d2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d40dbd73d38a3c7
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfc26185beb1a032
     0.01%     0.00%  python   [unknown]                                          [.] 0xbcac61a8beca0d17
     0.01%     0.00%  python   [unknown]                                          [.] 0x3b78d700bd2df890
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f33bba73dea5dbc
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfc10c6ebfd9265e
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe160cb8bd29d958
     0.01%     0.00%  python   [unknown]                                          [.] 0xc021c99fc05b175f
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2b3250
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935590
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9350f0
     0.01%     0.00%  python   [unknown]                                          [.] 0x40655e2e400e51ce
     0.01%     0.00%  python   [unknown]                                          [.] 0xbeaea39a3ee74a2a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fab47c73b25b400
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f632845bfca1f59
     0.01%     0.00%  python   [unknown]                                          [.] 0xbff2615cbf7c34bb
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d69b08abca6db38
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e73164c3ea88a50
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f839137bdc7fbb2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e24f2313f71a6bc
     0.01%     0.00%  python   [unknown]                                          [.] 0xc0205bff3dfb5498
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f15a5703ffd1f69
     0.01%     0.00%  python   [unknown]                                          [.] 0x3eccd793bf893717
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf13e4a43e867b00
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfc54a4c3f25905c
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf6e48943ffdb278
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfe4e2563f161e35
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf2860c8bea8deac
     0.01%     0.00%  python   [unknown]                                          [.] 0x3decdfa9bf761a68
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe42ee6a3ea1ae60
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e02b526bee25aed
     0.01%     0.00%  python   [unknown]                                          [.] 0x3cd595dc3dc95ca4
     0.01%     0.00%  python   [unknown]                                          [.] 0xc014dbffbff832c8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf2a8006bf975da2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3dba8dbdbcc5f74c
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d083189bd5cf2b8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf5f424d3f7b65e4
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf8c1e673eb0dcb2
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe17e25f3e0acedc
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe01b23c3f4f6764
     0.01%     0.00%  python   [unknown]                                          [.] 0x3edf2226be94ca3e
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f6e935a3fe58287
     0.01%     0.00%  python   [unknown]                                          [.] 0xc00699cec00a0308
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d16e145bd95213f
     0.01%     0.00%  python   [unknown]                                          [.] 0xc04d44d2c099d342
     0.01%     0.00%  python   [unknown]                                          [.] 0xbcc76f603f85c812
     0.01%     0.00%  python   [unknown]                                          [.] 0xc09965a6c086c291
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf5f3f923fcbad4a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fdd71033e992a3f
     0.01%     0.00%  python   [unknown]                                          [.] 0x3c083c383e00d316
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe45b43b3d6ecb0e
     0.01%     0.00%  python   [unknown]                                          [.] 0xbdff1874bedf7618
     0.01%     0.00%  python   [unknown]                                          [.] 0x3daa55aabdc662dc
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fc2988b3f4d33a2
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe16a2213ea3562d
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab4022ba
     0.01%     0.00%  python   [unknown]                                          [.] 0xbceb14893d1d8cce
     0.01%     0.00%  python   [unknown]                                          [.] 0x40091dfe3fb0321f
     0.01%     0.00%  python   [unknown]                                          [.] 0x3da07d53bca8e69f
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e59ebce3d281455
     0.01%     0.00%  python   [unknown]                                          [.] 0x3de3f6ecbf3e34dd
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e9cb4b43ee524c4
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f54618e3fa163fd
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf016272bf06df90
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f82ece7c073919a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fadd71dbf9f0968
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf1046babe6eebcc
     0.01%     0.00%  python   [unknown]                                          [.] 0xc01e1b54bf7ec448
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f14a48c3f98cffe
     0.01%     0.00%  python   [unknown]                                          [.] 0x403403a83f2d8550
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf9e1c94beeba096
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ea86ae83e6c4d6f
     0.01%     0.00%  python   [unknown]                                          [.] 0xbff10c3fbfb4169a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d6312c63c8c7d8e
     0.01%     0.00%  python   [unknown]                                          [.] 0x3db2fed6bde7a2c1
     0.01%     0.00%  python   [unknown]                                          [.] 0x3df09895bda79024
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe8a6e6e3e3259bb
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd3f484f4002931f
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d5ca2e3bc98f7bc
     0.01%     0.00%  python   [unknown]                                          [.] 0xbff2e78ebf657d97
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e8b6ba33f5129fb
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf5c05a73fca63b0
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d5318debd83570c
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f33271c3f48460a
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe6bec05bec1b43d
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf91d1663f33e727
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d03ba703de9c115
     0.01%     0.00%  python   [unknown]                                          [.] 0x409762e64094fd82
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fd9c1ee3f886de4
     0.01%     0.00%  python   [unknown]                                          [.] 0xbee06f00bead382e
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f911c643fcfe254
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d41f3
     0.01%     0.00%  python   [unknown]                                          [.] 0xbc6dc870bd59b4a3
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e8d0a843f4e6299
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e9ed624bf3d4170
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f83eef6bdb9d05b
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d1741253d01fd94
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d1e7d81bd9288b5
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe44afb0be55a3d0
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::TensorTypeBase::IsTensorType
     0.01%     0.00%  python   [unknown]                                          [.] 0x3eccb5bb3fdcca9a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e5e1048bb76e540
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ff9ff053e74f3ce
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f7c7d3ebf4697c0
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f8255f2bdb124c1
     0.01%     0.00%  python   [unknown]                                          [.] 0xbc5228ce3c69b825
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d74f603bcd67f16
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ed648afbde4b23d
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf8a23633f347a76
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d5782e93c6f9ae4
     0.01%     0.00%  python   [unknown]                                          [.] 0xbaf27d00bfae27b6
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d47d3c4bd898fc8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbbf63968bd2bf56c
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8040d1
     0.01%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa803e23
     0.01%     0.00%  python   [unknown]                                          [.] 0xbcb91dc0bd670f31
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ca110c03e612c08
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Concat::Compute
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf7839f1bdc1c5c0
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf94bbd2bf80bfb6
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f49c6183e8494fc
     0.01%     0.00%  python   [unknown]                                          [.] 0xbbe7fadcbd5e06a3
     0.01%     0.00%  python   [unknown]                                          [.] 0x3dac86f6bcec25c8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfc3304fbf68bc84
     0.01%     0.00%  python   [unknown]                                          [.] 0xbeed6638bf9db6f7
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ee46bee3f0d65f3
     0.01%     0.00%  python   [unknown]                                          [.] 0x3c9057603dabc25c
     0.01%     0.00%  python   [unknown]                                          [.] 0xc02c3b45bfe90864
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fdaecc83f928026
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e333d4ebf9a7a6a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f04c1a03e2a3d1a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d61625bbd83c63f
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd0015573d092377
     0.01%     0.00%  python   [unknown]                                          [.] 0x400ef6973f1e68db
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ecd0c423f7b0c18
     0.01%     0.00%  python   [unknown]                                          [.] 0xc024fb95bfebaa4e
     0.01%     0.00%  python   [unknown]                                          [.] 0xbc335e30bd520e5a
     0.01%     0.00%  python   [unknown]                                          [.] 0x3c95bb22bca86c20
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d01a6263dc5e9c2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e04fad5bfa57734
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f833a99bdd3530e
     0.01%     0.00%  python   [unknown]                                          [.] 0x4017c47f40108f08
     0.01%     0.00%  python   [unknown]                                          [.] 0xc04955aec02464ae
     0.01%     0.00%  python   [unknown]                                          [.] 0xc08ecb56bf7be2b5
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fad9fb3bf9d0f5e
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf06b4eb3e7fec24
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fd5b5bebe23fd6a
     0.01%     0.00%  python   [unknown]                                          [.] 0xbcc8a07c3d2b7578
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ed3f39fbdd25724
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ebda004be0335c4
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd92ae053e2d6cd5
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf4642de3e7170e8
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e8b5cc33da48abe
     0.01%     0.00%  python   [unknown]                                          [.] 0xc0024b12c046321e
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf1ccf0ebfea25b2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d3734c33f3a3154
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf82303c3fac6da8
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d47d76ebd73ce61
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf02ab293e48a18c
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d3771cc3d099038
     0.01%     0.00%  python   [unknown]                                          [.] 0xbcb8618b3d1b68b4
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fb417293f3f0cce
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf5cd4113fca85e7
     0.01%     0.00%  python   [unknown]                                          [.] 0x3faad7253f5c1c90
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f89db5dbe917bf0
     0.01%     0.00%  python   [unknown]                                          [.] 0x3eda1ca8bf46b1a2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3eb9efdd3e4e563f
     0.01%     0.00%  python   [unknown]                                          [.] 0xbdca469e3f8811b1
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ebf566bbf00a441
     0.01%     0.00%  python   [unknown]                                          [.] 0xbcee39c83f399697
     0.01%     0.00%  python   [unknown]                                          [.] 0x3da7269f3d952190
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd01a2adbd89105a
     0.01%     0.00%  python   [unknown]                                          [.] 0xc0001d32c0047f4c
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d1b16e43f3388f6
     0.01%     0.00%  python   [unknown]                                          [.] 0x3eb69823be2fa85a
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe82f98b3e68001b
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fac0c09bf9ebf8b
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe0d5fe83f8b8940
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935480
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fef084d3fde24e9
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ec12b753dfc6863
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e08b18ebf6942ef
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf42eea6c0074505
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf028773be588fa8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd8d6df03d3d701b
     0.01%     0.00%  python   [unknown]                                          [.] 0xbec503d8bf074207
     0.01%     0.00%  python   [unknown]                                          [.] 0xbcf89ea03e679f3e
     0.01%     0.00%  python   [unknown]                                          [.] 0xc055facfbfb77c0c
     0.01%     0.00%  python   [unknown]                                          [.] 0xbca39a00be78280e
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe70d087bed27d73
     0.01%     0.00%  python   [unknown]                                          [.] 0x3cebda813ceafa14
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfbbd794c00ae418
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf896dd63f11df6c
     0.01%     0.00%  python   [unknown]                                          [.] 0x3d65193e3f3ce7c9
     0.01%     0.00%  python   [unknown]                                          [.] 0x3c6ca8e8bee4890a
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf51389bbe5c30db
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf419504be481a28
     0.01%     0.00%  python   [unknown]                                          [.] 0x4044bba04046bdb8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe05097ebeeca20c
     0.01%     0.00%  python   [unknown]                                          [.] 0x3eab95c53e55ae9c
     0.01%     0.00%  python   [unknown]                                          [.] 0xbda5dde33e20500e
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e9488423d4ee588
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f29d5193f4537d8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbed9ee413d03f57c
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e3af568bcfe4053
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f693114bf70756c
     0.01%     0.00%  python   [unknown]                                          [.] 0x400219253f67a1cc
     0.01%     0.01%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::IExecutionFrame::~IExecutionFrame
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f2fe5913f43480e
     0.01%     0.00%  python   [unknown]                                          [.] 0xc087b3b9c05d2608
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e5c1116bf67b9ba
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd2769443d1bea35
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ea53824bf40e3c0
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf6f98e4bf96bc4e
     0.01%     0.01%  python   [kernel.kallsyms]                                  [k] 0xffffffffab40092b
     0.01%     0.00%  python   [unknown]                                          [.] 0x3fc51fc93fc8fb37
     0.01%     0.00%  python   [unknown]                                          [.] 0xbdd31ae0bce6b200
     0.01%     0.00%  python   [unknown]                                          [.] 0xbea1d06fbefe2ba3
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfc57e3ec0052424
     0.01%     0.00%  python   [unknown]                                          [.] 0xbd85ae9abb77ade4
     0.01%     0.00%  python   [unknown]                                          [.] 0xc0430c3cc03cff8e
     0.01%     0.00%  python   [unknown]                                          [.] 0xbe7f8f943bdf3480
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e8c7cc23f4e2bc5
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf940397bfa729ce
     0.01%     0.00%  python   [unknown]                                          [.] 0xc02157d3c021854e
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e91e4c83f7331c2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e312460bed2815f
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf1f2abcbe959bc8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbed0b52b3d8e6c00
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f39caaa3ed7a649
     0.01%     0.00%  python   [unknown]                                          [.] 0x3b1a6a00bead4817
     0.01%     0.00%  python   [unknown]                                          [.] 0x3faf4103bf8f13a6
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f08dd53bdd569c2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3edd1a1bbec0c606
     0.01%     0.00%  python   [unknown]                                          [.] 0x3e3fa9b53fb3cd49
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf57b259beaced41
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfcd6dc4c01a2b45
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfb81a77c00d4fd8
     0.01%     0.00%  python   [unknown]                                          [.] 0xbfaf9882bfcf1ae9
     0.01%     0.00%  python   [unknown]                                          [.] 0x3c9a3fd0bc22b5f4
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf41cc2e3e8f3b16
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f3136f23f6a7b16
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf226787bff8c458
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf86f30fbdc18bc5
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f5df88b3ecda3a2
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f325ce9c0165ef5
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ec02bd2bf5d7bf8
     0.01%     0.00%  python   [unknown]                                          [.] 0x3efed3283c134b80
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f22a84f3ee33d3d
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ecd72233d469740
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f0586febf976ffe
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f69a58e3f8a52e9
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f127b283ebbf7a6
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f705c4d3eeda690
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f9e982e403778e6
     0.01%     0.00%  python   [unknown]                                          [.] 0x3ffa1e013f8a54a1
     0.01%     0.00%  python   [unknown]                                          [.] 0xbf4a81103f0ead51
     0.01%     0.00%  python   [unknown]                                          [.] 0x40febeb841077c39
     0.01%     0.00%  python   [unknown]                                          [.] 0x3bddaeb03c8f5656
     0.01%     0.00%  python   [unknown]                                          [.] 0x3f0714a7befe4507
     0.01%     0.00%  python   [unknown]                                          [.] 0xbecc92533f68dc4c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbea538f73f59085d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd43a8f63ff4c124
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd6f58b43f4531b2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ebd3cd73fbc05ae
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf3ae06d3db21108
     0.00%     0.00%  python   [unknown]                                          [.] 0xc03d14553fd65a2f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e5b238abe146ef4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a6d49cc0cb5573
     0.00%     0.00%  python   [unknown]                                          [.] 0xbbdc39e3bf0bd1d8
     0.00%     0.00%  python   [unknown]                                          [.] 0x404685653fdda23f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbefce580bf6dbd0e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe29265cbe19a050
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1c720f3f81c6a4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe250e4ebe3b28ed
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf833318bdbc787c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe0f97543f2dace8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc10484bfe427f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fda5ca6bf132b79
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe7e6b8cbf8f819e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd7cf10a3f2d2e64
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3c88a53f951d2a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e90c16c3fa3d349
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f828e45be90294a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ca73065bc18e484
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d8ce1243c8d6aa0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1165ce
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa7f94d
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa7f703
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00384333fac36ba
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d5fb580bd994a24
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2af813
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2b32fe
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc84eea83c200244
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe9e58fdbfed7eac
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb188f2bfe5a15d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe131723f99e5de
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe0b931ebfc15844
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000061
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f021cb3bf330c01
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf228766bfd50a71
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd268a00be2efe5a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbde3b7703f54ea68
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e7e68653ec78e99
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd36dda93d395a89
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec8a4083e99febd
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd94f4163d720e1b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3da65a74bcee21d9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf76a4573f70c16c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3a2b05bf353e06
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f152dbbbf9d6872
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2970ddbf8cdf09
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d82a9a7bf11de34
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc2d5babf1b3c52
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcc9cd60bf6e3334
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OpKernel::Node
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ed6fb9f3ea25df0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf391c513f9aff94
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd9742f0bd1239aa
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d9717dabe898538
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfdddf9d3f9a9a95
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d36b68abe1d4d43
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb44dc8bf12e567
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe5910a53fbe581d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc4b31403cec52ee
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf613c0c3e645a20
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cdba0c73e1b1dd8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb734433ff2e3b6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f32cd6fbf8c1e78
     0.00%     0.00%  python   [unknown]                                          [.] 0xbee1112c3ead9985
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe088c05bfa937b3
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OpKernelContext::OutputMLValue
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000100
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d0621ccbd64df18
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d7bdb66bc815564
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeefe5293f214855
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe65437a3e731b74
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e898c6cbf87c5fa
     0.00%     0.00%  python   [unknown]                                          [.] 0x400690d43f9b16ce
     0.00%     0.00%  python   [unknown]                                          [.] 0xc011cadec00c0f56
     0.00%     0.00%  python   [unknown]                                          [.] 0xbea3656dc003c26c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fdbaafd3fb5da49
     0.00%     0.00%  python   [unknown]                                          [.] 0xbed4a32f3fab87a8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd4ab0403f76961c
     0.00%     0.00%  python   [unknown]                                          [.] 0x4094ed184036c178
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e3fa8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ef9ae42bf200179
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0587e1ac0328ad4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc001219ebfc00a46
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f01c7bfbf1bd6e9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe12ad513fe3e8bc
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff148d0402d3888
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0bac203ec0dc6c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfe2c8c84000af05
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeeef2a0bfad2d08
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdf5c493befc1cd8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1b569cc007e559
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0145f8b403b02aa
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfef01e63f49bef9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf4842ddbe92acd0
     0.00%     0.00%  python   [unknown]                                          [.] 0x409b5519bf012b4c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe12f9c8bfd38654
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3d1fae3e0da5e9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f03f9ac3e9fbfbe
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec612e93f3f9278
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea6fb66bd866c20
     0.00%     0.00%  python   libstdc++.so.6.0.26                                [.] free@plt
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f08fe4e3f93555f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e4ec9c0bebf90b4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e6c166d3d89f2c8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e9c5b2e3ee99b70
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf107985bf25ac66
     0.00%     0.00%  python   [unknown]                                          [.] 0xbebfcf063e3868a7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf40cacabf8a8844
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e9f661a3f7065e4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0101f38c038feac
     0.00%     0.00%  python   [unknown]                                          [.] 0x3de773d33e806f39
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc18f74bbd8ea895
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa6222a3e844b26
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcb22b3dbd80ebd4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f11b45f3f803660
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf74a16b3dcb04e8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edf772abe195962
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf32d672bec5e555
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edbc920bf96c071
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f9cc39e3f7b614a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0a39ecbefdc3d6
     0.00%     0.00%  python   [unknown]                                          [.] 0x4049de354007758b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb397fc3f3d2868
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe52b899be73d9ba
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d81d3e3bc98927b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe26fb2cbe29356f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd31c934bfd46a48
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ffba0143fe2a892
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe31704dbebda188
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe85c5d640030a70
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe4f990b3e32131d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dbf5614bdebd295
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e95c16b3f2805a4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f2c0
     0.00%     0.00%  python   [unknown]                                          [.] 0x4015870ec0b54cce
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8442183e2b0d20
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd46fc2bf897182
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc1a282ab986d080
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f81dd3fbef24089
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa938bca
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ed3815d3fe86071
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb2f20b3f3e0cca
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e6cf88cbf80e6c6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf69abfe3f14e79d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edba814bf4b10c0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e86ac6e4026796d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd8771b8bfdf1697
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd587676bedbf22e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1092a23f00e2d2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe7486b93ea4aa73
     0.00%     0.00%  python   [unknown]                                          [.] 0x4003c2a63fb1a627
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe9a5cadbf4531ed
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07632643e9e29a0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2db05e3f4a5c4e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe1b57b23e08b5c7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf10bc123df377af
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc38c9ac0067897
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec79bbdbf48ce20
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe49e56c3f9a7ee5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e636234bf5e311a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3efda26b3fcf7d73
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c0115c0beaa8397
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e6dd8383d9102d8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb298b43e56e35c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb18e6c3f07233e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb52fc3bfc05a58
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff135c7be52dfe6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ed5f836c021ce9d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f396a03bf354830
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf049f643e6a754e
     0.00%     0.00%  python   [unknown]                                          [.] 0x401d459cc0154e4d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d52a8483d0ee9b2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf140cb2bf04670f
     0.00%     0.00%  python   [unknown]                                          [.] 0x4021c6e33edc4578
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dbd8084bf8b025e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ed33bd2bf23677d
     0.00%     0.00%  python   [unknown]                                          [.] 0x4076872d3fe4a601
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf043d8b3ddbc6b8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe67af6c3d8579d0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf83cba3bf260e78
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e9f063c3e983952
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa82e1e40ceca30
     0.00%     0.00%  python   [unknown]                                          [.] 0x40188cd63eb5d316
     0.00%     0.00%  python   [unknown]                                          [.] 0x40d7c4324118e4e2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf6b7fbebedc31a5
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb099f4bf840378
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cae584a38c01000
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f75ca5a3ee94356
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf14e63e3e31f458
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1ba030be530c1e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf0656e53f184020
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd0c1f963f659951
     0.00%     0.00%  python   [unknown]                                          [.] 0x402c087e3f807167
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8dc1f53e90397f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f05f34e3f9acd0a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e4435d53df9fe1f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ee0af9abdc60c97
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f933e53bec6faae
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d21d3e73d2dc6a1
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe6798393e0aa2bb
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa75df8401cba90
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe1020da3f3d72ee
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf6fc140bf16051f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e8146ee3eeaef80
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb6dcb13fc8bfe3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd03fccbf28b841
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ebb7ae3c0279791
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f05afa9beb2741c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f52e1553fc7fc0e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc09cc4bcc03ddcf5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d743d55bd85f0c4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d01bcddbd9b0b70
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfcbc9fc3f421142
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e3d8799bf2d8b73
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfdcc2f93d935d38
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb0f3fcbdca323f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe2a9a06bef0d158
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f50c55dbd824868
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe3922ebf4cc10a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc23734c0063436
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf394ec4bf85ec60
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe049262be7b0501
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf637535bf4ebcde
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f4acc7d3f0dfa28
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f96a3a03e4b0300
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f76528cc0056c08
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cd5d2acbd7f82de
     0.00%     0.00%  python   [unknown]                                          [.] 0x400fb285401b1a95
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa55db9bf4467c8
     0.00%     0.00%  python   [unknown]                                          [.] 0x400442ecbf80ba99
     0.00%     0.00%  python   [unknown]                                          [.] 0xbca79443bd138f28
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd82b4243e1e84f1
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa71de93f94e437
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edf026bbde72e23
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf89535ebf5bb676
     0.00%     0.00%  python   [unknown]                                          [.] 0xc038041c4011be20
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fdee586bedf5710
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf97b54b3f8b2f16
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd7bcf20bfb445fd
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f08b83cbf9fcee8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fbd8a8e400796b7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f5586a03da0b564
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf5b34aa3e2f6341
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e941d79bf018d27
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf5ef150c048a4c9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0329782be8ba368
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000001d191
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3df34b3e1db434
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe7cb6a3f01a20a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f30b0853fd06926
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00a8a2ebeb73416
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8f8c47bfda1fe8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0734cddc084eed0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd0537843e50404e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf9328783eea88d0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e9bd6673f72031f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07348d8c0ac7ecd
     0.00%     0.00%  python   [unknown]                                          [.] 0x406c1f1f40a0e66e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edbf0d1bd21e7d4
     0.00%     0.00%  python   [unknown]                                          [.] 0x401af7943fe406bd
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd7170b3f5143da
     0.00%     0.00%  python   [unknown]                                          [.] 0x4021d31abf493890
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fce377240b15216
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb3bf2d3f3dc435
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f2b0ce7bf9ecc80
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0002bcc403d5e6a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f7be7373f6745ba
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1aa3febe303b7d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfe020c23ef82c36
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d858a70be74b22e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc41a5f3fbbce72
     0.00%     0.00%  python   [unknown]                                          [.] 0x40beb0654134a4c0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eacb142c057c90a
     0.00%     0.00%  python   [unknown]                                          [.] 0x4046ad8cc08415ad
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf3cc850c000f1e2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc056caed40bd7ac6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d25fb9e3ce3612a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ef7ee1bbed7961d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfe8e9ebc0a28078
     0.00%     0.00%  python   [unknown]                                          [.] 0xbb1417003ff5b9b9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd68d3e3fd856a4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd32d6463ca199d8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcf2dbe83c98e48a
     0.00%     0.00%  python   [unknown]                                          [.] 0xc087cc6d40a02a18
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec191d7bfbfa5b3
     0.00%     0.00%  python   [unknown]                                          [.] 0xc09e7b7cbf3b7931
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0233ffc3f921ec9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0870c2f3faae82d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e61a4f0c058dcfe
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf0e156c3f20571a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf06ddac3ea40a0e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe4fc78402592a7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0863dc8c08bf8f0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fbb018f3eb12100
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f387abe3f70eceb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb11482bcd78310
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe848f763e5710a4
     0.00%     0.00%  python   [unknown]                                          [.] 0x4090fc73bfad23e7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe639b413ec8d21f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd6ed33bfe4d155
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f4bdc343fc0c61a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fcec57a402d1766
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8c5adcbeac15ac
     0.00%     0.00%  python   [unknown]                                          [.] 0xbed8ecb6bf6b01b9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e778d2ebf3db004
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea1d9babf38128d
     0.00%     0.00%  python   [unknown]                                          [.] 0xc059d63ac0e59bc0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fca84833cb51598
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa383abbfecd234
     0.00%     0.00%  python   [unknown]                                          [.] 0xbedb669abf3e3703
     0.00%     0.00%  python   [unknown]                                          [.] 0x400a1d623f8f93d3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd6e3864400299e2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edaf992bdeec18e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe38e5c93e2fcd48
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fda220440b34130
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ExecutionFrame::GetAllocatorImpl
     0.00%     0.00%  python   [unknown]                                          [.] 0x4015f22c3fec09b9
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab04ed71
     0.00%     0.00%  python   [unknown]                                          [.] 0xc09aff0f410833c2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf30832c40d20b9a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc075203ef437e6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f957b7dbe38dcb0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeb4f4b64053fb4b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3de1d95abfa30de3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeebe9913f051ebe
     0.00%     0.00%  python   [unknown]                                          [.] 0xc022852abfa3dc2d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb5125c3e2e1d5a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd1c3fc3f52438c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb3bfbabdc18add
     0.00%     0.00%  python   [unknown]                                          [.] 0xbecd100ebf9ea808
     0.00%     0.00%  python   [unknown]                                          [.] 0x3feffcb24053e5f6
     0.00%     0.00%  python   [unknown]                                          [.] 0x4083d8d1bc4301f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x400a33b03eadb5fe
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01834cb40331242
     0.00%     0.00%  python   [unknown]                                          [.] 0x405f8a44bf78a027
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff98e8cc0cea65d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dbb7a4e3f5e4058
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ef071a03eea3bd8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf72fd623f425b34
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8015f93f8789d9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe6e4ab640c7f822
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e017e743f996c16
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf14d94abeeddf5f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2a0850bf51c535
     0.00%     0.00%  python   [unknown]                                          [.] 0x400666343f698374
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dcca4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd9f65abfa358c7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf34aa083bfba700
     0.00%     0.00%  python   [unknown]                                          [.] 0x409a3b3b411f5736
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f4745b33f2118a6
     0.00%     0.00%  python   [unknown]                                          [.] 0xb9c17fc0bceb4f66
     0.00%     0.00%  python   [unknown]                                          [.] 0x408e565b409444b4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eeecfcbbf1bdccd
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d75075cbf1c5d60
     0.00%     0.00%  python   [unknown]                                          [.] 0x40317d23bedf154c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff9b171c01b1e63
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb601d13faea857
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0ae20f3e25cc00
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf9bd71fbed45660
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc73f376bcb21182
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe376f35bf062072
     0.00%     0.00%  python   [unknown]                                          [.] 0x4041f3343ff2da0d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa34f03c0d3dfca
     0.00%     0.00%  python   [unknown]                                          [.] 0x400c66333b90ae00
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f02e438c01ebb11
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e54c9fb3f04e18d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf31ed16bf17cf08
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f7caa17c0205827
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8fd6a7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3f43febfa4abf2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e8881f4bf0e6df4
     0.00%     0.00%  python   [unknown]                                          [.] 0x4090b0ad408daa56
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb490a8bf1a9708
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ec550893eaeb6a0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbed8f4133d61a4ac
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe270a703e0bbbe3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe3ca3abe0e0208
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OutputBroadcaster::OutputBroadcaster
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb373c53f22a450
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe66c1c0bf03973a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf6b30403f3c9895
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ee3697abb602000
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf18507e3e9035de
     0.00%     0.00%  python   [unknown]                                          [.] 0xbb0d8a863d893e9f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d66fe60bfee563f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd802e3cbd83eb94
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc3b3a1c005610b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec294003de54122
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0431a8ebf7c9144
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05ccbafc0698792
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb0fd3a3f5bfdfc
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0b8f5af411cd525
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d97b5e0bf0cb7e4
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a289153fe89efa
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f868ef93f9143cd
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd5346f3dc1f73b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf810d85bf2f539c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1832e8be95410e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05634944002d71c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc895bfebd492555
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd9fe96ebd9924f0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd3740dbfd7c9a8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f637d0b3f461e75
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd03f123ff4e1be
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc1f13c3f0b3b7b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e852b28bf8c529a
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0745fa23e8fccab
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd4235b3ed15d3f
     0.00%     0.00%  python   [unknown]                                          [.] 0x409ec5e63fbaf797
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2dd5c9bf995ca0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f359402bf936beb
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf9244c3bfcd3143
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e1793a03ecdac9e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf6728843f27c960
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdda65b0bd44a48f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fcda14ebfc63ca0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e4322
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f643ef73fa430f6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08a0a66c072174e
     0.00%     0.00%  python   [unknown]                                          [.] 0x401122b03f084c60
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe17741f3de1438b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fadd848bf9fff85
     0.00%     0.00%  python   [unknown]                                          [.] 0xc12e717740ab71b9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf27fce7c02e15c8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff84477c01874f5
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Tensor::Tensor
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf428f07bf3190d8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f2dc0bc3fce9cc2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc9b06673ad0c750
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ddf35033d3883da
     0.00%     0.00%  python   [unknown]                                          [.] 0xc026b7e640f2445d
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f7f3cc4080a2d5
     0.00%     0.00%  python   [unknown]                                          [.] 0x403e1285bfd3bd08
     0.00%     0.00%  python   [unknown]                                          [.] 0x4006cfa54017b5a5
     0.00%     0.00%  python   [unknown]                                          [.] 0x2d4bf21a2dcad074
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf04c01e3eaea62a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd53cca4bf81cf74
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ef8957ebee49d84
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ed586cfbed77c36
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeaf9ae0be0db803
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea6de12bebee4d0
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02ebcc93f304033
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ebe59163e02b89c
     0.00%     0.00%  python   [unknown]                                          [.] 0x407fa49c3f747ba0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbedcfdd6bfe9cd1d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbda0f6b0be821402
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06fa22cc0058fbe
     0.00%     0.00%  python   [unknown]                                          [.] 0xbedd0b933f4d3ed0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3efa9cbfbf004d60
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdc67a80400f992a
     0.00%     0.00%  python   [unknown]                                          [.] 0x401f9b8abf29b484
     0.00%     0.00%  python   [unknown]                                          [.] 0x410986fac0120141
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfe234c73e6028bf
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::PrimitiveDataTypeBase::AsPrimitiveDataType
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000100000000
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8b0cf8400c1f5d
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e41ff
     0.00%     0.00%  python   [unknown]                                          [.] 0x40244a7d408d8bad
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05a5b5f3ef807fb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8a9e513c0908c0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbebfe160bf63ce94
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd30691bf8841a3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8b01083fa5c0ce
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ffb70ac3f4aa708
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edec8b93e110a22
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f04f00cbf9641e2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9177c1
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa87d30
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401284
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa88059c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa880341
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa6085b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa5ff24
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8044bc40782632
     0.00%     0.00%  python   [unknown]                                          [.] 0x400b36e7c03822c3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf7503c8c05e1190
     0.00%     0.00%  python   [unknown]                                          [.] 0xc11768c941632d16
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab0502d5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8f83ebbfa055ce
     0.00%     0.00%  python   [unknown]                                          [.] 0xc020c59040240f47
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e444f4e3e33969d
     0.00%     0.00%  python   [unknown]                                          [.] 0x400cc6c0c0bbb301
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeb333de3f5c8910
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1a622cbd526470
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05c78843fb4ae5c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d974f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe8f62deb9ee1e00
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf59f4d0bfe85c94
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00c0a5ac033ed1c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e6268843e755539
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe9e9bcebef589fe
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fcb775c3e369efa
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1a0af52c1a25e22
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa964b09
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dbda5
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf759bfc3e69f496
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd10894c0011a48
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edd471e3f94eb5e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa877a7a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f509bc43fc459dc
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfcc820ec0282f79
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fada10640b7339e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf3209093f043d42
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab4009e4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e673e1040858ee6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfab8254bf5ad2e2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbebf67943efafbec
     0.00%     0.00%  python   [unknown]                                          [.] 0xbed4ba15bf973a71
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0c5610bf832918
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa7a338bf145424
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdff21623efcceb2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f48327a3e9525ac
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea390c4bc1a0900
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e8536ab3fa22518
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a8dc1fc08b2252
     0.00%     0.00%  python   [unknown]                                          [.] 0x40d9474ebee12888
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8bd124bfee7a2a
     0.00%     0.00%  python   [unknown]                                          [.] 0x406cdf143f3b3216
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa913daa
     0.00%     0.00%  python   [unknown]                                          [.] 0x40223a2ebf87487d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f7b9826be9be7a9
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d3ea0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0fb88
     0.00%     0.00%  python   [unknown]                                          [.] 0x4009e0e73f44b328
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e824256bf302ed6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a6fe51c032b475
     0.00%     0.00%  python   [unknown]                                          [.] 0xb9bdac003fe3c6a0
     0.00%     0.00%  python   [unknown]                                          [.] 0x4128523c3fde0de9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd0d382c0654f63
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfee65f4c0322c84
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f83511d4040f095
     0.00%     0.00%  python   [unknown]                                          [.] 0xc13ce78ec127bf57
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdadb5bcbf6daa41
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02e43573f12016e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f74a6b8bf977385
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf12427640bf9e8b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc166b1cfc163be9f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf48591a4014d880
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa211fac00af642
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edf99a83fb2fcda
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf4396d4bfb32a6c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc12f9bbfc10e0ad1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb4769e406bb47e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf283ab13f5d489b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc039aa3f59b893
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0114553400328c8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0891a91c03a2c72
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc177d1be3d5b58
     0.00%     0.00%  python   [unknown]                                          [.] 0xc167211cc1853d12
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd7568703f38947a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf34a7ab40dc4660
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0076e93bfae5e7b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a6ad66c0ae9687
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f50962c3f0f0d2f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf7fdeb93c783fe0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e18973a401520ba
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0167a4cc0277f18
     0.00%     0.00%  python   [unknown]                                          [.] 0xc049363fc03b3d67
     0.00%     0.00%  python   [unknown]                                          [.] 0xc002a4aac05a69b6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0c9b01cc10b81a9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ee0d312bed6add7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f5ddc5b3f855de0
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0cbfe4fc0a7266f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07a094ebfc28226
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c75ddd01d0
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c765374b50
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1092094c112126a
     0.00%     0.00%  python   [unknown]                                          [.] 0xc122e7aac116cfc1
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb63ca0c00abdd3
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05a9791c0509019
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f755f43beedb472
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf972c1f40a9c32a
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08bb688c04fca71
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa00c40bfcd4a51
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd40f4593ce7dac8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0930376c06c380c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f754d823fa370fc
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0c1d821c0e55110
     0.00%     0.00%  python   [unknown]                                          [.] 0x4093c8794063753a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe9e63963ed8e622
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea3a9e43f4c883a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfff1004c005aa79
     0.00%     0.00%  python   [unknown]                                          [.] 0x3db6e1be3dd52e25
     0.00%     0.00%  python   [unknown]                                          [.] 0xc080d5bec07558a5
     0.00%     0.00%  python   [unknown]                                          [.] 0x4148ca03411aad37
     0.00%     0.00%  python   [unknown]                                          [.] 0xc093969cc0a281ba
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fb37b0
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0da9ff9c0f364a8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd9fe27bbfaf173e
     0.00%     0.00%  python   [unknown]                                          [.] 0x389ce86a390cf728
     0.00%     0.00%  python   [unknown]                                          [.] 0x405d98773f3f68ff
     0.00%     0.00%  python   [unknown]                                          [.] 0x3febbd01c01d1700
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb3236fbfd21f2c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8b51a2bf49ed9b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08d9170c0a5e9b4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc10db6ebc0e7a61f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06706ebc0598c35
     0.00%     0.00%  python   [unknown]                                          [.] 0xc11f14c6c1311b81
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f62244c10e9aa5
     0.00%     0.00%  python   [unknown]                                          [.] 0xc09c75224023a4a6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc158b90bc14ffaf4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cdb62f53b9c58f1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e428c5a3e3890cc
     0.00%     0.00%  python   [unknown]                                          [.] 0x404f48314038f976
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f61b6e240b5a432
     0.00%     0.00%  python   [unknown]                                          [.] 0x364139b936e2b140
     0.00%     0.00%  python   [unknown]                                          [.] 0xc094bfdec0af26d8
     0.00%     0.00%  python   [unknown]                                          [.] 0x406856e7406e9528
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a2129ec08eb3c7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc13289d1c1412d91
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0061810bff74176
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfbc6e6abf1dc2a7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0c3b5b9c0b10c55
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d5f0dfa3d4e43af
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08a43d0c0331c78
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0c83dc7c0c17ab8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0678a5fbdf611c0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3854682439f79ebd
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eed5768bfba0b61
     0.00%     0.00%  python   [unknown]                                          [.] 0xc11e0602c1285a50
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc492363f808a8e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc03943f1bf8219eb
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf922949bf62aaa1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3186c55a32f30ff7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0667f01c06f75b2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcd70148bf77997f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0140fa4c03f31d8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0794838c01cc41c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc030b057bf1bc182
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa393f13d3f44f0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf701c39409b51d8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc092f4dfc090a7b9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c9f02b039dfca26
     0.00%     0.00%  python   [unknown]                                          [.] 0x403ecf9ebe07b724
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd088983fdfd21f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0abb905c0f97ea0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeacec2fc00cfa33
     0.00%     0.00%  python   [unknown]                                          [.] 0xc18217f3c182fecc
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f9ee0dc3e53cc09
     0.00%     0.00%  python   [unknown]                                          [.] 0x324c4096310767aa
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1639babc1533a5f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc04e2e97c0481db2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f2357673e524124
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0d74921c0bcd3b9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc18c9b5fc183e36d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf625a32bf73c183
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb4750abf3d5f02
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0733893c08c1ef7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0bf2385c0c0aa61
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d88b0763c86cc56
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3cfca73d5fe4ec
     0.00%     0.00%  python   [unknown]                                          [.] 0xc146b666c138b750
     0.00%     0.00%  python   [unknown]                                          [.] 0x3b13aa373aafdd0a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e0f5a7040c3792a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf22aec83e611d12
     0.00%     0.00%  python   [unknown]                                          [.] 0xc09c87f7c0e1f724
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0451697c093e92f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf900f06400ff3ec
     0.00%     0.00%  python   [unknown]                                          [.] 0xc086fb06c09e8725
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02cf5b7c05b3cbf
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf4fd38e3ed5c1e6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb9e728c06abbdd
     0.00%     0.00%  python   [unknown]                                          [.] 0x4000826ac088c6a3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3a90d3d33b49a516
     0.00%     0.00%  python   [unknown]                                          [.] 0xc18a468cc1840bc1
     0.00%     0.00%  python   [unknown]                                          [.] 0xc106f4e7c0de61fe
     0.00%     0.00%  python   [unknown]                                          [.] 0xc082f511c073f966
     0.00%     0.00%  python   [unknown]                                          [.] 0x3b2f46a13b816db6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f2ed2453f6ea5ad
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f9d7e5a3fca78f9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc13047e5c11a85cb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb623afbc031a70
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff36746c0306e9e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc03659bec037899d
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1bc8d56c1bf6ba4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00c1d27c088af93
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1541186c15091df
     0.00%     0.00%  python   [unknown]                                          [.] 0x38832edf3824e4e7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc085d345c06e22da
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1371bedc1499d42
     0.00%     0.00%  python   [unknown]                                          [.] 0xc03d5f3fc064ed06
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fbd34f9c063af65
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3c86c4be5e4a66
     0.00%     0.00%  python   [unknown]                                          [.] 0xc157f4e7c0ab5ce7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0b5d505c09ebea1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb1436e4098f216
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf0f3109bdf9d7e8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f78a743bed0ffaf
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ebd61d6c02557a1
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02c1dd7bfcbc22d
     0.00%     0.00%  python   [unknown]                                          [.] 0xc073fda4c0be6102
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07c5cd2c082c581
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0ad12ffc0b70702
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ba123e73d760802
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe0d1299bcdb7998
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf871372bf825081
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa53b77bcd33f80
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1548a9bf3a1847
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf560890c0059ca3
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1e646b2c1fc73ad
     0.00%     0.00%  python   [unknown]                                          [.] 0x40353af7402dde65
     0.00%     0.00%  python   [unknown]                                          [.] 0xc036ac4ec0200c7b
     0.00%     0.00%  python   [unknown]                                          [.] 0x4067e11c4086e2af
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcc33ca8c03aa0bc
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0bd93f2c09e2cdd
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f178dac1081a49
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb1f67c4073c16c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3faf30bd3f81a3cc
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c0cedf03c88b5ba
     0.00%     0.00%  python   [unknown]                                          [.] 0xc04a299ac029a711
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0082781c015070a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eca4ccfbf1e0355
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff82c7cc003d7db
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0c805c3c0e8a4d0
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0cabb7dc0bdc4c6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc09b8ec9c08f3eb9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08928c7c0830ec2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01e461ec0133756
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0adf872c0837513
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1b4a1f3e0e605c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dd9046e3ef13700
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0cebb9ec0c8517e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc178e93fc1862390
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1cb20b3dc163a1
     0.00%     0.00%  python   [unknown]                                          [.] 0x406c99ad40444a94
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2f4e1abe2e9087
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf75ba934012b037
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0dfcd16bff2bfc0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc6f91d3fd3df1e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc082a53b3e8ffbe7
     0.00%     0.00%  python   [unknown]                                          [.] 0x37428f1137773c8c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1402892c13a358f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc052c540c0a372eb
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd84458c028b0ca
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d96d4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc055ae82c011f343
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf018c593eb2d342
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bdae4c73afee683
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07dabd7c0710aa9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb6b036bfbbe393
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0fe5322c0bc5579
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0129ea1c045a9b3
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07e1119c0682036
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd81eb83d5b738f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01d7210c02365d3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3face4443e6ab740
     0.00%     0.00%  python   [unknown]                                          [.] 0xc044d08c3dd12d15
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0bb2e65c0b07dee
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf810ca540fa10d9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2f99e2bfb66bea
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01760b0c0566d21
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf9cf242bf901dc2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1187b57c10196ce
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f1848ec0aa2c87
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bfd91c93d7f7f18
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02fa214c015a5dd
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0b2dbe0c09c628e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06bcf94c08e2bc7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0821ff1c02586d5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d1e6bdd3d11a4c5
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfadb905c0122775
     0.00%     0.00%  python   [unknown]                                          [.] 0x3befd78739f2b8f9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1830937c1838852
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0ff1249c1099adb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3a7247913b8b2912
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe5da98f3f228de9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0913ed1c0b9681e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3a233ecb3a409b61
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd570e38bfc95c80
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf131c7abe9a634c
     0.00%     0.00%  python   [unknown]                                          [.] 0x408d5cbfc111d124
     0.00%     0.00%  python   [unknown]                                          [.] 0x408a88f840851ac3
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0e380f1c1092f76
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06e151cbe8894c8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08a52e6c087242b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08e1472c09460a8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf57d04a3e974497
     0.00%     0.00%  python   [unknown]                                          [.] 0x3644a276362ac44c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc13046b0c1352f05
     0.00%     0.00%  python   [unknown]                                          [.] 0x4120ff39412a46b1
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0d1f8b9c07ed832
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bf5b30c3ac832c9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0663593bf2698f8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0426f95c09efea9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1fcf47bd8a8b18
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfde0dbdc016be69
     0.00%     0.00%  python   [unknown]                                          [.] 0x40816637c01eadfc
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f36259c1176d6c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1b547f7c165da67
     0.00%     0.00%  python   [unknown]                                          [.] 0x3aa477533b0ae3ad
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fdf2d883e3fcaa8
     0.00%     0.00%  python   [unknown]                                          [.] 0x403b30573e9d2665
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0e58cb2c0e59740
     0.00%     0.00%  python   [unknown]                                          [.] 0xc166498dc1525f99
     0.00%     0.00%  python   [unknown]                                          [.] 0xc12e5f20c116c837
     0.00%     0.00%  python   [unknown]                                          [.] 0x3b2d25403b33c40e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe5acd3d3da8001b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc044cfc6c07b8b6f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00ab4debf05cc4e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe273169bf103352
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8b2357c042ef32
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff9afebc05c2ed4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc09827f8c0907406
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0864ba6c0ae4e3e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0869624c09c68f3
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0c73742c0e6cb8e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07ae208c0a493a4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a6134cc0c0ae28
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaebaf2c
     0.00%     0.00%  python   [unknown]                                          [k] 0xc1237fafc1150cbd
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab056b19
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ed89425bf3856ce
     0.00%     0.00%  python   [unknown]                                          [.] 0xc182369ac16c6cd2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc088fa75c0906988
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf90e2f7bf2b4077
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06ec66ac0391076
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa4dab2c02174a2
     0.00%     0.00%  python   [unknown]                                          [.] 0x401bbe8840a37129
     0.00%     0.00%  python   [unknown]                                          [.] 0xbedc41a4bf5d1277
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0650656c0dd0e61
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cc2e8f03b213be1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f43c6febfce8578
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0be701bc0b51242
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc40d4c4bdd8b9e6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05ee1d9c09763e3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3998dd34398920ea
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1af98fc03c057c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ee3b905bdd9c822
     0.00%     0.00%  python   [unknown]                                          [.] 0x40334f66408d56ca
     0.00%     0.00%  python   [unknown]                                          [.] 0x41104c623f8463f4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc13f2cfdc14da3d2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1012f4fc0ca1f8a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff3c7da3fd4c04a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd0394ec09519d9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3479fc3e82e924
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf961073c0016c0f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc025db3bbf5bab2b
     0.00%     0.00%  python   [unknown]                                          [.] 0x4096780340339fd4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0847131c0d5f689
     0.00%     0.00%  python   [unknown]                                          [.] 0xc030f610c01320b2
     0.00%     0.00%  python   [unknown]                                          [.] 0x4088f9b53fc8e775
     0.00%     0.00%  python   [unknown]                                          [.] 0xc020f67fc074518b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06ae77dbfd6f15e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01f0f99c0484224
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c74faa23da931c8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0afb4d1c0ed3970
     0.00%     0.00%  python   [unknown]                                          [.] 0x3b440fe53af6b841
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e971b613e8e859c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc94db43ea99487
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07a0387c05c352e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc041f7cfc0372b73
     0.00%     0.00%  python   [unknown]                                          [.] 0x4016ba51408381ae
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa9c9ff4007d53e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c3c66783daf0266
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a5cda3bfebb35e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff5ac283fb14a9e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf7d8822bf07fb4e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe85489d3dbbffd5
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d6957
     0.00%     0.00%  python   [unknown]                                          [.] 0xbee952eec0448ad6
     0.00%     0.00%  python   [unknown]                                          [.] 0x397566f13a2fdd30
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0861837c03dd705
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a0dd1bc076c40b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0ac7e30c0a00fc3
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01f3defc074e9e8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c00786839d44ee5
     0.00%     0.00%  python   [unknown]                                          [.] 0x403b552b3f1bd81c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00c6841c064387b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc098c980c0cc07ac
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ad49dde3aaca5a0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3af34b0a3ade4ead
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2f82b9bfada225
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0368a8ec046f0ab
     0.00%     0.00%  python   [unknown]                                          [.] 0xc017acd5c00d1476
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf524376bfab798b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf3b3febbdaf1a40
     0.00%     0.00%  python   [unknown]                                          [.] 0x413bbcf24142514e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc341aec08b1a94
     0.00%     0.00%  python   [unknown]                                          [.] 0x3b70ed8f3b951064
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a3f27fc0ace0cf
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1604f1bc1914450
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd92084bfcc6ea6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd641bbf3dfb29f8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bc79f44bd03fc31
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa932a12
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bd3cc7b3dd8ebce
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0adfc38c09db4b3
     0.00%     0.00%  python   [unknown]                                          [.] 0x378520f7399f00e6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd5a3e43fd06738
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06aa932c041883f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cc5b52e3f42dd26
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0b0f9acc0bbb5e3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d496a20bae71500
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ccf79723d643579
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1ed31dbfcf811a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfdf6c66c07b81f1
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02026fec03ff480
     0.00%     0.00%  python   [unknown]                                          [.] 0x4045590440d85d5a
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0307bbe3e8d6c9f
     0.00%     0.00%  python   [unknown]                                          [.] 0x37b06cac397d7b70
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ddf14b3bf1758ce
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ec752dc410b1966
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1866e4bf7d030c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f73dcab3ee62802
     0.00%     0.00%  python   [unknown]                                          [.] 0xc10731fac10b2f6f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0584ccbc09fbab6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d6f96a2bd103646
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08dd4e6c0b4c820
     0.00%     0.00%  python   [unknown]                                          [.] 0xbea671d2c0116f3f
     0.00%     0.00%  python   [unknown]                                          [.] 0x41200083407a3b31
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d92d4
     0.00%     0.00%  python   [unknown]                                          [.] 0x4012ea02c085d944
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06cc6e8c08cb4f9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd26b523eb0b6ba
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0ca6c48c10b006e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3a867f683b2687f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d575b7bbcce1505
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf7779f6c05e3547
     0.00%     0.00%  python   [unknown]                                          [.] 0xc030f857bf638eb8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d605879bd39b523
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0bf0aa40a1383f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cdeb6e83bc25df0
     0.00%     0.00%  python   [unknown]                                          [.] 0x404412383e312614
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdc563523d9216db
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c3727f4bc24c778
     0.00%     0.00%  python   [unknown]                                          [.] 0xc014d43640141640
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02cca00bf9e3d7a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf5e833ec088b00c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc059d8f9c00d248d
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0283be7c039918d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe724aec014548e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06ce738c0383787
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07ba510c087c330
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dbb6ac83b801e4b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff40ca8c05a0437
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c3316d8bc5d5162
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2ba3f13f08ebd2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd33f7ebfef280c
     0.00%     0.00%  python   [unknown]                                          [.] 0x40525826bf5c57fb
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1114737c1157181
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf6ce7aabf9d1f90
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e92fdc23da12aac
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeb61d8c3ba93398
     0.00%     0.00%  python   [unknown]                                          [.] 0xc065013bc089fb6b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06cdd2bbfe61cfc
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe52a3713fc4d0c4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01bd03ac054bdb7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0135accc0a687c4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3602553efa80ec
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d6b5c663e28dd43
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfff69edc005f1f6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff8fd323ec25295
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe59ab2fbe2b44b7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1064664c0d4ac07
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf7f46fe3ee3176b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbb5ca610bc7374b6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1757274c19459e8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe9ec3903e9843d8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc079a6f5c08ded63
     0.00%     0.00%  python   [unknown]                                          [.] 0x3df0daf73c53aec8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1281434c10eec48
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb092c6bfcd99e9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1246addc1155c01
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d67a4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e1ea3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3da74bb8bc59db32
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdd30e60befce66e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1916c0ac18e5268
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8c34babf004160
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0970567c0e03289
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe825694bf477ef4
     0.00%     0.00%  python   [unknown]                                          [.] 0x400943a2c001c1f0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c3564663c801648
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a7ef99c04efb3d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe0b3cb7bfa56930
     0.00%     0.00%  python   [unknown]                                          [.] 0x39d7de4a39753361
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e42229fc00af422
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d91709f3f0e813b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0483203c058be39
     0.00%     0.00%  python   [unknown]                                          [.] 0xc093928dc01f89e0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe898c7ebf8b6d12
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f88bf1a3e8b2e79
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dc77e163d87cc25
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe3e26ebf8c01ad
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d15195ebbbc5444
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f17321e4085b105
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa52cd43f948996
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa86d02c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab40277f
     0.00%     0.00%  python   [unknown]                                          [.] 0x419289d53ff6aa0f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cb3b0053e52c232
     0.00%     0.00%  python   [unknown]                                          [.] 0xbda55db53d385bc8
     0.00%     0.00%  python   [unknown]                                          [.] 0x4045907a40f0d63c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8ac0263f0dbf28
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a1cd11c0da5135
     0.00%     0.00%  python   [unknown]                                          [.] 0x402a7c9ac00fcc0c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe732658c0b9496e
     0.00%     0.00%  python   [unknown]                                          [.] 0x391fff8d3c708520
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cf1a85abd212221
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dfb94123d31582a
     0.00%     0.00%  python   [unknown]                                          [.] 0x39a2e700bb5bffd8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf41b5d3befc9d82
     0.00%     0.00%  python   [unknown]                                          [.] 0xc13fadd0c1171532
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0466b67c0cb48f4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2baa87
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa7d844
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa7a35a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c6b2ef4bccf9f1f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05f1b83c08e3d34
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d05ef083cded6f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c7cf520bd70ee7c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeb8eede3b21f300
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f91e01a3f8b1532
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfed6bac40279e86
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0006c563f1c944d
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a87134bf39a0b1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f01b4813ee67b12
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd9f6b793d459cc4
     0.00%     0.00%  python   [unknown]                                          [.] 0x40acad3c40fa5476
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d8443fa3ccf863d
     0.00%     0.00%  python   [unknown]                                          [.] 0x408e75a9c06c99f4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbef69fff409ef2a1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3a0074bfb71c2c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f586e0f4031ef08
     0.00%     0.00%  python   [unknown]                                          [.] 0xc09f8270c04b3618
     0.00%     0.00%  python   [unknown]                                          [.] 0x407f40163f9fbabc
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e0b953f408b9593
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeaa3b8a3f2ebd0e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ebe1d34c0488489
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f9e886f3f2493ba
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf6577f4401e200a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf5e55a33fca5546
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fbba2a3406cc66b
     0.00%     0.00%  python   [unknown]                                          [.] 0x408b93a23ff70b29
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0d145ad40b146c2
     0.00%     0.00%  python   [unknown]                                          [.] 0x404d1bb23fbb983d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc174ca40f5e5f6
     0.00%     0.00%  python   [unknown]                                          [.] 0x4129dad6408cee0f
     0.00%     0.00%  python   [unknown]                                          [.] 0x40f00b70c082f61c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb68e2abfe8e22e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a67e23c07f67bb
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf58d7c84097058d
     0.00%     0.00%  python   [unknown]                                          [.] 0x407c6ebe40d43244
     0.00%     0.00%  python   [ath10k_pci]                                       [k] ath10k_bus_pci_read32
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c76385b3d67c917
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdd537d03d0e805b
     0.00%     0.00%  python   [unknown]                                          [.] 0x40ed83ea408ed79c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f61f624402788ee
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf01ef193e8a6c4c
     0.00%     0.00%  python   [unknown]                                          [.] 0x4034a9773f999251
     0.00%     0.00%  python   [unknown]                                          [.] 0x3efb26613fbfdfab
     0.00%     0.00%  python   [unknown]                                          [.] 0xc078a460c060d7d7
     0.00%     0.00%  python   [unknown]                                          [.] 0x392872203c4cd780
     0.00%     0.00%  python   [unknown]                                          [.] 0xc035910dbf883ce0
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer
     0.00%     0.00%  python   [unknown]                                          [.] 0x401ae4394017ae3a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f4ed31740e074b6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbda5fe463ebfb282
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8bb795bf2b0a00
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd5051f43cf50a30
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01e74f0c00cc02a
     0.00%     0.00%  python   [unknown]                                          [.] 0x408f3df94069b26d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa7fbf7bfd2c9b0
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05fba50c0145610
     0.00%     0.00%  python   [unknown]                                          [.] 0x409e49214071cf1b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f329483beb8bcf6
     0.00%     0.00%  python   [unknown]                                          [.] 0x407d75a5408aa82c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf0ad518c08117b6
     0.00%     0.00%  python   [unknown]                                          [k] 0xbfa9eebec008a5be
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c2110b03cce2cf5
     0.00%     0.00%  python   [unknown]                                          [.] 0xc61c4000c61c4000
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bc4682cbd1ba847
     0.00%     0.00%  python   [unknown]                                          [.] 0x408ba8c73e4ef250
     0.00%     0.00%  python   [unknown]                                          [.] 0xc03064c7c015d71e
     0.00%     0.00%  python   [unknown]                                          [.] 0x412fe74a3fc02374
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab400920
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa913f50
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d1d0f2abc72f135
     0.00%     0.00%  python   [unknown]                                          [.] 0x3b113ea8bc2e63dc
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f569806c0018c8f
     0.00%     0.00%  python   [unknown]                                          [.] 0x406b6c0e405d7ead
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f835ea83ff2dc22
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e44812cbda529b6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d029c30bb999870
     0.00%     0.00%  python   [unknown]                                          [.] 0x403ba52a3fea6fe2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe2f50d40aeae30
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c507ca3b97834c0
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b6868d406201c2
     0.00%     0.00%  python   [unknown]                                          [.] 0x413657e33f9ee2b6
     0.00%     0.00%  python   [unknown]                                          [.] 0x40c5159e40112cc9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3cdd303e6bc414
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b341c4407b624a
     0.00%     0.00%  python   [unknown]                                          [.] 0x4017997940388742
     0.00%     0.00%  python   [unknown]                                          [.] 0x4021c392c0b31496
     0.00%     0.00%  python   [unknown]                                          [.] 0x407c49a14004a38b
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a06109c009bb06
     0.00%     0.00%  python   [unknown]                                          [.] 0x40118c0e40439536
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f2f251c0d13ca9
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0278a00c051e5a1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0b7aea40f2f237
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0010584c00c9c85
     0.00%     0.00%  python   [unknown]                                          [.] 0x405a4e9a40dddc0f
     0.00%     0.00%  python   [unknown]                                          [.] 0x40535ded3f0ec423
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f6e4d640711a94
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0bb666ac0e7b4ff
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfaf20dcbf89de8f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02f4c82bfd40f0f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc124a833c1228ea0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea2f5c2bde354d0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d9c84fc3c2f7ad8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe93ea833db994a2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0462f96c062c2f7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ccc24d1bc46fce8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0819db3f060874
     0.00%     0.00%  python   [unknown]                                          [.] 0x40694ba640b87144
     0.00%     0.00%  python   [unknown]                                          [.] 0x4039e2f63fd52f5c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1382090c118d1bc
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935c6d
     0.00%     0.00%  python   [unknown]                                          [.] 0xc000e9a6408d5370
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf735ac840ce5add
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0b19747407ecd4b
     0.00%     0.00%  python   [unknown]                                          [.] 0x4003885a4147b2f9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa6e5f34039bd0c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0013662401f423d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd3582983c4802f9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbbb8d3d43e92fc3c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc8edf440240f06
     0.00%     0.00%  python   [unknown]                                          [.] 0x4015449bc012f7f1
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02d2a6240ce20cf
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0ac868ec0a01638
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcffd188bd1b35c2
     0.00%     0.00%  python   [unknown]                                          [.] 0x407cb08b3dc713f0
     0.00%     0.00%  python   [unknown]                                          [.] 0x40db79fd40ba9792
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe123644bd02ed1d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cf3320a3b5f7950
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d6f9ed4bd7fe958
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d0f49383d21270e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc063851abf6e0a20
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfcdbf4a41548ce5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8c31f33e67397a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe602f74beb8ce95
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f4f040c3f880eb6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf51ee1a40363a6a
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b4ed543e7906b0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d67df943d192b7f
     0.00%     0.00%  python   [unknown]                                          [.] 0x413521be40bd15ba
     0.00%     0.00%  python   [unknown]                                          [.] 0x40976871c0d2d6d2
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::_Sp_counted_deleter<onnxruntime::BFCArena*, std::default_delete<onnxruntime::BFCArena>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000100000282
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd4d5b07bc7cb992
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bedf684bbedf1ac
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00dff9c3d872ff0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c7388583d3ad334
     0.00%     0.00%  python   [unknown]                                          [.] 0x401f19ba403ebc72
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0048c41c0900e69
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf305b6e3fbe8105
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8db6ac
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa946400
     0.00%     0.00%  python   [unknown]                                          [.] 0xc06d531cc08f979f
     0.00%     0.00%  python   [unknown]                                          [.] 0x4017e68bbfbb760e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8c52ebc01bf1fd
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::BFCArena::ChunkFromHandle
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f7ffc1d3e0b27a8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d140066be5743b6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc16b0536c14dd262
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf82d2fbbe8ba625
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fec168a40e9cb32
     0.00%     0.00%  python   [unknown]                                          [.] 0x402981963f6b218a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e858a973d8168e9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf686876bfc7aaf8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc6e827402fc534
     0.00%     0.00%  python   [unknown]                                          [.] 0x4088075abf89dac8
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8df4bc
     0.00%     0.00%  python   [unknown]                                          [k] 0x40a37e763f58ac62
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd19ae9cbe051926
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fcee0b8403ede79
     0.00%     0.00%  python   [unknown]                                          [.] 0x4093c1ac4115ddd2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd16504fbb2c2ea0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ecfbed53edf2a00
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f921f913f0578b2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3ceed93f096836
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a605c940a79658
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc38e5383d078b4e
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a4d8acbfb32d6e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fed79cc4101136f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc009a1cc4025c9ad
     0.00%     0.00%  python   [unknown]                                          [.] 0x3b0fe4e83cc326d6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec7d8f4bef024a4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08cad8b3f7edc82
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] MlasSgemmSchedule
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bb4598cbd856940
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd624a973d0d083f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc74dc723d172826
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e8cfc13bfcb42b6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f6b90a63f0d588c
     0.00%     0.00%  python   [unknown]                                          [.] 0x40c087b93fac8bcd
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f9765183d877066
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dc907453db0430a
     0.00%     0.00%  python   [unknown]                                          [.] 0x405d74a1c0882641
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8f380fc09bd436
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc96b5a7bc38aed4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f28144e4019e9fb
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdbdb8a33db1b652
     0.00%     0.00%  python   [unknown]                                          [.] 0xbca0944e3cb98c52
     0.00%     0.00%  python   [unknown]                                          [.] 0xbddd08063d98901f
     0.00%     0.00%  python   [unknown]                                          [.] 0x4045f06341551b65
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c0c3041bc315f78
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b518d640bdc136
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c484664bd496846
     0.00%     0.00%  python   [unknown]                                          [.] 0x408435a64100c1c0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbea95a19bda47964
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe6ecfa83fe321f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x408cedb33f90b80b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe1f0e6f3dfeb706
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff1edcf40fbc840
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc95d3a03cbc86a4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ce14fe23d0c620a
     0.00%     0.00%  python   [unknown]                                          [.] 0x404f558fc0291ff9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e808eb9bf933fdc
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Tensor::Init
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf2d9d374020c5ae
     0.00%     0.00%  python   [unknown]                                          [.] 0xbef0fc11bf16a58f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbded72473db2b0a9
     0.00%     0.00%  python   [unknown]                                          [.] 0x40d685833f05cc84
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f26612e3fc679e4
     0.00%     0.00%  python   [unknown]                                          [.] 0x409a1ce441207448
     0.00%     0.00%  python   [unknown]                                          [.] 0x40741710be166594
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd40fa5c3ca59bef
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ca016583c81369f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe9ef9353dd8a464
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e1143a0bbba82aa
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0b3e49dc095f158
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd4a14cebe0dce12
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd04e925bd88e299
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc8ce25bf86a600
     0.00%     0.00%  python   [unknown]                                          [.] 0xbde42a683dba0b74
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdf801b43edcaed2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3e78d53fe0f050
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d347f753d1e2328
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ecfd3593fd7283a
     0.00%     0.00%  python   [unknown]                                          [.] 0x4143d775411d85d2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1934607c189a545
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd56c1433dfdcf88
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b2e6a7407fff8c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e54ce8d3e93d468
     0.00%     0.00%  python   [unknown]                                          [.] 0x40e35d21c01da0a8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3692d88739b4af9c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe61686c3d1122df
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc3f6cfe3c7767a0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbb5be59f3d268434
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8aa360401f153c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdd5dab43df8c406
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f108c9abe4c5d52
     0.00%     0.00%  python   [unknown]                                          [.] 0x3db8817abb365040
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe6e82b0bf48cb26
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8f7934bd789080
     0.00%     0.00%  python   [unknown]                                          [.] 0x3af722163b690f12
     0.00%     0.00%  python   [unknown]                                          [.] 0xc04a265b403e1d87
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd1207633c725485
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d3bbe2a3b95acad
     0.00%     0.00%  python   [unknown]                                          [.] 0x40e9fcba406c49eb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e4710663dd188b2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe6a9a75bd7afc22
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb76698c0786720
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd663fd6bc8754f7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbbef8e043b345948
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ba2a8673c82dc38
     0.00%     0.00%  python   [unknown]                                          [.] 0x4021a1643f81511b
     0.00%     0.00%  python   [unknown]                                          [.] 0x403740d440b0c592
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] nsync::nsync_mu_lock
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f9ac6bc3f7fd512
     0.00%     0.00%  python   [unknown]                                          [.] 0x40d01a5e40974331
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d01787dbcd0bdd8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbddd550f3e3a8e36
     0.00%     0.00%  python   [unknown]                                          [.] 0x3db2519fbed93afb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d923af2be2cf7a5
     0.00%     0.00%  python   [unknown]                                          [.] 0x401b8b0a3f6ee832
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eac24bcbe9535c9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe0d1765bdea1f1c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbddc58904067768b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f87cc3e417366e7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc439dd0bc15426a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d32cc143d7a5803
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab131194
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab13049e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab130297
     0.00%     0.00%  python   [unknown]                                          [.] 0xbce0e528bca245d0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1aaa19bf977c2c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f6bf7bd408a6498
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d491ad23b8c0889
     0.00%     0.00%  python   [unknown]                                          [.] 0x40ae5eb9be3127f0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe52e8f40443940
     0.00%     0.00%  python   [unknown]                                          [.] 0xbce3b1cf3d1e0e4f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf10beefbdc7a71d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3bd9d8e037d56000
     0.00%     0.00%  python   [unknown]                                          [.] 0xbb675ca0be2eced7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc95d572bccdb956
     0.00%     0.00%  python   [unknown]                                          [.] 0xbde85bffbc02a4ab
     0.00%     0.00%  python   [unknown]                                          [.] 0x3a3ac500bf05eb10
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00c598940a1be7e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3ce3c3bf39e43a
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0d60667c0baedd7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc358f9bd272c70
     0.00%     0.00%  python   [unknown]                                          [.] 0xc1398625c11f0108
     0.00%     0.00%  python   [unknown]                                          [.] 0x405c5ee73fc82260
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e62a3123eb71dfe
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdec98063e4fc28b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd6bdbd2bc5bc3df
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d83558abdb646a5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa67dfabfb42b2d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e689031bdae2e81
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e32a4dcbde4e8bf
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d2f0067bd4ae059
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa943df8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ced0e27be84bb30
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c9ea63bbe124a80
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc13052abc7c966f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e923e87be676af6
     0.00%     0.00%  python   [unknown]                                          [.] 0x4053edc1c08b8838
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd01f5d13bc47372
     0.00%     0.00%  python   [unknown]                                          [.] 0x413c0b5b40162937
     0.00%     0.00%  python   [unknown]                                          [.] 0xc10b6730c0a149fa
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f9da1d34001bce3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbea35b32befd803d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3aaeb9e53c907a6d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbaa6f3f0ba766338
     0.00%     0.00%  python   [unknown]                                          [.] 0x4091a2e9c0342bda
     0.00%     0.00%  python   [unknown]                                          [.] 0x410dab2a412f66ce
     0.00%     0.00%  python   [unknown]                                          [.] 0xbaa0550040d09696
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eba5398bc363e38
     0.00%     0.00%  python   [unknown]                                          [.] 0x3db0a1683e96f2ba
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeafeb1b401950da
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdac4233bdde4610
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c8061813d67c722
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb6eee4bdb1a53b
     0.00%     0.00%  python   [unknown]                                          [.] 0x40001289bf85bb7f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc7a764e3b4037d9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e991638bf06d268
     0.00%     0.00%  python   [unknown]                                          [.] 0x4089bb973f75d785
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc966e6dbc4e53b2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf924086414ca197
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0bdb43c4030a1f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dcda34e3eb890f5
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd279cd03d8a8546
     0.00%     0.00%  python   [unknown]                                          [.] 0x405934a7400ed135
     0.00%     0.00%  python   [unknown]                                          [.] 0x4037176c3fbdd9ba
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9177ca
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff77a19c009320f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1bc57e3f11c6eb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f2b94564074ec20
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdd68633bdffeca2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaab32633
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff29d44c01df078
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e050c14bd4c5a4e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02d9bf440748ef9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cba94cf3de1f85c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3b8256bf3e8d85
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cd6b70abc80a490
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e0a59
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e426d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcd0b334bc20d3d2
     0.00%     0.00%  python   [unknown]                                          [.] 0x417c38123fe257e7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdc685643cb3c945
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d2bddaabdf8df9e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbb447486bd570c49
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcd5c490be46fd07
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc9ad37c3d8ba45d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c827557bd14a8bb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ecc558838f739ec
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e197e4cbf1ccee5
     0.00%     0.00%  python   [unknown]                                          [.] 0xc020d5fcc024e948
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf971a583f7891d0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d40bd5c3d850204
     0.00%     0.00%  python   [unknown]                                          [.] 0x402ee7cfc0194dc9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeb22060bdc8d099
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc74c7b9bd7d908e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cde3f76c0c56b38
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb2001c3fb08055
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f419bac0e1be45
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d4f7b8b3d45f090
     0.00%     0.00%  python   [unknown]                                          [.] 0x40fc793d409426f5
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd3ba5063d78eadf
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ffdc2084099bea8
     0.00%     0.00%  python   [unknown]                                          [.] 0x409bbc7840926740
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f5924cbbe75e4a6
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::IExecutionFrame::GetNodeInputOrOutputMLValue
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cbff251bdd55cc9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe34967b3ea0ae2a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e3624ffbe026f58
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d3369523d0a17f4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc9df6fabd2411fd
     0.00%     0.00%  python   [unknown]                                          [.] 0xbea271ea3ab1d8df
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd8c5a7d3e505798
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcf0ff6c3d19aaac
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d2a5cecbdaec0ec
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd9b881abdcf85ed
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e3eede0be6194d9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e636e0abe7570b8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbddf9efebd5ee379
     0.00%     0.00%  python   [unknown]                                          [.] 0xbb9ea86d3d1338d7
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa93551d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e434b823dd2191a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e65e3c5bd9a9257
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f7049
     0.00%     0.00%  python   [unknown]                                          [k] 0x40b4e17abf48a675
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd6cb7acc09b833f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdaa1b193e2178a5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea9da6d3e177ae4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe07dd7dbe6a0409
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d9ce7453d9710df
     0.00%     0.00%  python   [unknown]                                          [.] 0x408900913fc3e2d4
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::IExecutionFrame::ReleaseMLValueImpl
     0.00%     0.00%  python   [unknown]                                          [.] 0x40947ef03fe5782e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ebde82ebe5de061
     0.00%     0.00%  python   [unknown]                                          [.] 0xbee000abbf08733d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d28b17e3f2d9cb3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd301c0b3cd5dd7d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd160183bc878aca
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f94d1ebbde780f6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eeadab0bf0a239a
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a8166640c4cfe1
     0.00%     0.00%  python   [unknown]                                          [.] 0xbce22312bcaeab6b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbed27974bb741e3c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3de1d120bf95d4f5
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd3cefd73e555235
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9371c9
     0.00%     0.00%  python   [unknown]                                          [.] 0x397876603d65d462
     0.00%     0.00%  python   [unknown]                                          [.] 0xbee91428be6e689c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd0751cabdc2e79a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3da8aabdbd4891e1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e05135f3d1c5b36
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d97398fbe244a45
     0.00%     0.00%  python   [unknown]                                          [.] 0x409389a33e4a3412
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3284fc3bdc8022
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdba1cafbda8475d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd5864863f146862
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe20fae1bc8324ec
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd98b89bfb72e05
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcdf1500bcb4ffa4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c60b0083d7d9a55
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d9294aebc043eec
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e4ec73b3dbd564a
     0.00%     0.00%  python   [unknown]                                          [.] 0x406f71d2412842f2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ed46780bdb5aff2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa927226
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ef11744be99d6a5
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd7cddb73d58dc0a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbef80760bee6f419
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd6132713d72c8c8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd9e059dbe091535
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd92b58ebd3580af
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0a16882c0bb981c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d3babf7bd7d0def
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf3dfefa3db77f58
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd42b05ebd4515d5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea3e949bf8e5263
     0.00%     0.00%  python   [unknown]                                          [.] 0xbefb00e73e67b02a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa724bcbe1d748e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e9ac8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcdce3fcbe02f3ac
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd08e3ef3d4fe070
     0.00%     0.00%  python   [unknown]                                          [.] 0x40831f3cbef09df4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e0591223f02c26e
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Add<float>::Compute
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000034000000000
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcc5fcddbd779344
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd72343fbdcfe0e3
     0.00%     0.00%  python   [unknown]                                          [.] 0x401c2a6c40db8c7b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d8ba3953f6a3a41
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e19a3eabee94ac5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dbc71f93e496749
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d92387dbe082b28
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd405b22bd759e16
     0.00%     0.00%  python   [unknown]                                          [.] 0xbee22daebe93da44
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e5c3ff73e6f1847
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0432901c03da309
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1e2d15bfce28d5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e3771dd3d122025
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec51ad43eb3b727
     0.00%     0.00%  python   [unknown]                                          [.] 0xc080859dc0590c94
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c779baf3dbba986
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdc21d30bca9097b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935c8a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeb8c3db3e0b34b5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff937c9408ff2ae
     0.00%     0.00%  python   [unknown]                                          [.] 0x40ae87ac3faf69d6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc68d920bca439b6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd1cde44bc323ac4
     0.00%     0.00%  python   [unknown]                                          [.] 0x405e714fbf90b460
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf16f0d0becb5245
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa934805
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdde2447be0d4a25
     0.00%     0.00%  python   [unknown]                                          [.] 0xc043d5204016d5f6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe1c48953c4ee1e8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd8a7d4c3c9175d2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe6e7863f81661c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbde679c93dc61dc0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbea3028a3ed91f43
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d247d50bf335cb0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe7ea830bf34767a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d89ccb2bd3048c2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeea82d6be11b72b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f81effdbdbdabe0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfea3f4a4088e569
     0.00%     0.00%  python   [unknown]                                          [.] 0x3defabe13db396d9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d568b153d8fe569
     0.00%     0.00%  python   [unknown]                                          [.] 0x40bb782f3f908c17
     0.00%     0.00%  python   [unknown]                                          [.] 0xbefbac66be12eb11
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e576de73e781877
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935312
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c6b4568bca04367
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd977874bd2dbad6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0864e94c026808b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e05a110bc0a7dc8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe982c37befc42ab
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf259a263f4abea0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe001dd7beb4ddec
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e0cf6123f716753
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fde7234400ca7f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x40512ca340760dfa
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd16a0573b2cbd6e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3efd11a04006ad6d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc304842bc916508
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e8421c73d844f13
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fad3f283f86c952
     0.00%     0.00%  python   [unknown]                                          [.] 0x404b8abebf63343a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd37b66410baf00
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf5bfeb3c030ccb8
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8cda4e3f9b11cf
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d79172a3d0d22b1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e82d29f3d115ab2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb01282be38a6b1
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe0d51cc3d0ecec8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1f8472bde9aec7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc6fd353f77c2e2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e871ca13f02b6c8
     0.00%     0.00%  python   [unknown]                                          [.] 0x4088e221bf4eab01
     0.00%     0.00%  python   [unknown]                                          [k] 0x3d36222a3dbf71e5
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa926b9e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa926b2c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa924c6e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa924a89
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f330c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f32a7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd61ce6dbc5303b4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d91a05e3ee40769
     0.00%     0.00%  python   [unknown]                                          [.] 0x4011343140473431
     0.00%     0.00%  python   [unknown]                                          [.] 0xc18b7f1240c1a1a6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc17debc00f0a78
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf532b10bf316374
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f72a088bfa95367
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfe98536407d9b24
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f12803bbf6013ab
     0.00%     0.00%  python   [unknown]                                          [.] 0x404279cdc02a5f17
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe2c55ac3cb30f74
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf970c25bffeee91
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf4248d53f62dce2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dcafd14bd83ec57
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e833e843e70f288
     0.00%     0.00%  python   [unknown]                                          [.] 0xbef5ce32bf03db35
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e2d3c07be5e33cc
     0.00%     0.00%  python   [unknown]                                          [.] 0x404bee0c410f1c03
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe1997a0be4892e7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e94a2a1bde436f0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb66cff40b162ac
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf0415a9beadcaa2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9382f0
     0.00%     0.00%  python   [unknown]                                          [.] 0x40c5eca4bf99bc9f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3a8258f33f260556
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c9f41f6bcb9f9ef
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdbb47e2be88ad01
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd5917a8bbe63d19
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::SessionState::GetExecutionPlan
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeb218e8beb930bb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cce0ff4bdc0f022
     0.00%     0.00%  python   [unknown]                                          [.] 0x4096ee504116a312
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d892730bcff5b83
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d831b933e0ce10f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dae2e27be471da7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc8f0e333e5f26b1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e7f4fb1bc4f134b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdfe11cbbb8fa41f
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_htt_txrx_compl_task
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ec61794be766a3e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3db3c82abc04e35c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cc930b7bd17517d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd841a3abcd55ecc
     0.00%     0.00%  python   [unknown]                                          [.] 0xbebf9522be341470
     0.00%     0.00%  python   [unknown]                                          [.] 0xb93f2e5b3d8ef9bf
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401e6f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d03e23fbd27db9e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c2a0c40404ff19e
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::vector<long, std::allocator<long> >::emplace_back<long const&>
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc705e63fbfee34
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe316120bbc7112e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c9c9be5be34c8f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e179be1bfb371da
     0.00%     0.00%  python   [unknown]                                          [.] 0xbde612223ed2d19a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe592d48bda60cee
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf326e944020fd5d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f41af3ebed0199c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb4ad363f3cc675
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd5479fbfb9178c
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000010
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fbff70
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f6cf3593f8068c3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e93aba03dd09d0e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd2f077fbe903d09
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f45303740ba5d19
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb165403eeed158
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d677e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e75b2f53db8972b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e30c568be48c915
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd51a618be8b9bc9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe6da0dcbe87dee2
     0.00%     0.00%  python   [unknown]                                          [.] 0x4055d552bfbb6fee
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfe11c90c024a0ac
     0.00%     0.00%  python   [unknown]                                          [.] 0x40816fd6407392b1
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8cae5e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf49a1f43f7bd420
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe640d823d5eb028
     0.00%     0.00%  python   [unknown]                                          [.] 0x401399003fb8a544
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe68090f3f968c62
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f204d79bfd94d13
     0.00%     0.00%  python   [unknown]                                          [.] 0x40bad0463fefcb09
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf137261bdadd503
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07a0c0740397f9f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d46f1efbd7af3a2
     0.00%     0.00%  python   [unknown]                                          [.] 0x41ad2746c00332b5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ebdab433e55748b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbda144b83d2bfaa3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc127fc8bdd219c6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc956a5fbdb81a40
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd7755b3bd9926a3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc3c74b2be1eb775
     0.00%     0.00%  python   [unknown]                                          [.] 0x40cbfc483ff9c3c3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd1cfceb3d0d2500
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d037f29beaf11ae
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d8eb57bbd227f71
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc1cb52a3e109bd6
     0.00%     0.00%  python   [unknown]                                          [.] 0x4003a1ca408fab25
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd563ae6bdc43297
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeda6dfebdd62cd3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e9d13ea3e04b7a5
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea3aa74bebb98ba
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f977cde404f9030
     0.00%     0.00%  python   [unknown]                                          [.] 0x407c2862c0476730
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a0d57abcb83c18
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d8c5839bf7e5d08
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c3be358bc3d8dfa
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d0866e8bdce4e0d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d674f713e733dcb
     0.00%     0.00%  python   _multiarray_umath.cpython-37m-x86_64-linux-gnu.so  [.] PyArray_DescrFromType
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c75b335240
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea413d63fb32c76
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fbf5b0
     0.00%     0.00%  python   libc-2.27.so                                       [.] malloc_consolidate
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c7b4034e70
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf010052408dc659
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ed86d003fe765e7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdc05e73be2549e9
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a6b8564096799f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f2e00c13fb676f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe0e1464028cc2f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05eb1ae3fdd8d3e
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a4f0a53f89dcec
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa934cad
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e4290
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e15c1603de0f094
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0bba919412f60f2
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d5090ad3e855514
     0.00%     0.00%  python   [unknown]                                          [.] 0x404afb3abf41a08a
     0.00%     0.00%  python   [unknown]                                          [.] 0x41459549406c0a27
     0.00%     0.00%  python   [unknown]                                          [.] 0x40d111b740b62a44
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eceb85b3fed9efc
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01cd7283f82e842
     0.00%     0.00%  python   [unknown]                                          [.] 0x400a35da402f7e34
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa927449
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf9214b3bf4fbb8c
     0.00%     0.00%  python   [unknown]                                          [.] 0x41168efa40d72fa4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe4570e3bd887b3f
     0.00%     0.00%  python   [unknown]                                          [.] 0x40187fbd3e8e0b5f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa74268bec8f299
     0.00%     0.00%  python   [unknown]                                          [.] 0x407a465c3ffd0880
     0.00%     0.00%  python   [unknown]                                          [.] 0xc024cf6c4056fee1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f7fc5a0c09db6b4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e569ecdbfd0088a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa7e49ebfa132d0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c848be03dde19a7
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fc0480
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf3bd2b23f95d9d4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d315814bd288730
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd92aab3bd2fcfa3
     0.00%     0.00%  python   [unknown]                                          [.] 0x410a5fc740ab154c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8054a0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f6ef111be83da42
     0.00%     0.00%  python   [unknown]                                          [.] 0x410562aa40140aa9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe489ba4beee083b
     0.00%     0.00%  python   [unknown]                                          [.] 0x403bb748402587bc
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb1e50840c271da
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfbc4c5cbee0f334
     0.00%     0.00%  python   [unknown]                                          [.] 0x402ea8cf40ac2f8a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd4958f7be12df4f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf88bd38be62b206
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0f995b9c03dd540
     0.00%     0.00%  python   [unknown]                                          [.] 0x40c4b1a640d396bb
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa805480
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdfb6e413fc8bd9d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfb955c0bfaad712
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe8868ebbe800d9b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fced113bf524ab8
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02ff1b2c06f5276
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d5c05773b7cb1b0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f713b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9330a3
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1d080d
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1d037d
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1cd377
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1cbfb4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1d25e0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1afc9b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1af94b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1b022d
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1ae9dc
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1ae8db
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1ae544
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab12e820
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab12e609
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab12dcc6
     0.00%     0.00%  python   [mac80211]                                         [k] ieee80211_subif_start_xmit
     0.00%     0.00%  python   [mac80211]                                         [k] __ieee80211_subif_start_xmit
     0.00%     0.00%  python   [mac80211]                                         [k] ieee80211_queue_skb
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_mac_op_wake_tx_queue
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_mac_tx_push_txq
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_mac_tx
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_htt_tx_32
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_htt_tx_alloc_msdu_id
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dfaec22bd946ad2
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b09389401c9281
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dfa992c3e16a10e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eb7ef36be96aea7
     0.00%     0.00%  python   [unknown]                                          [.] 0x406d17dc40654cda
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc204013f4f6cdb
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02eab49c013e989
     0.00%     0.00%  python   [unknown]                                          [.] 0x40319c8e40806369
     0.00%     0.00%  python   [unknown]                                          [.] 0x4082fbb84041030d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd32f40409957c3
     0.00%     0.00%  python   [unknown]                                          [.] 0x40e26dc9401a164d
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f81d8b1bede4490
     0.00%     0.00%  python   [unknown]                                          [.] 0x404e7794411c6c85
     0.00%     0.00%  python   [unknown]                                          [.] 0x4073b732409d4c12
     0.00%     0.00%  python   [unknown]                                          [.] 0x4029f7433f117bdb
     0.00%     0.00%  python   [unknown]                                          [.] 0x406c81dc40e7dd7b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0872cf2bfcbbed1
     0.00%     0.00%  python   [unknown]                                          [.] 0x405f18423fa94f2c
     0.00%     0.00%  python   [ath10k_pci]                                       [k] ath10k_pci_htt_htc_rx_cb
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401c65
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f6bac9ec0748c3d
     0.00%     0.00%  python   [unknown]                                          [.] 0x40123a8b40601dab
     0.00%     0.00%  python   [unknown]                                          [.] 0x411912b4bf6744e3
     0.00%     0.00%  python   [unknown]                                          [.] 0x400148e6bd116824
     0.00%     0.00%  python   [unknown]                                          [.] 0x40e25e593e89a1aa
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff83350402617fa
     0.00%     0.00%  python   [unknown]                                          [.] 0x4007bbe93fbd7842
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeb25e77be6db0f3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8efb0abf79bca4
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f78c40340bec6da
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe5167b40c2a855
     0.00%     0.00%  python   [unknown]                                          [.] 0x408262c83e8848d0
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d20cd243d3e195e
     0.00%     0.00%  python   [unknown]                                          [.] 0x4166f17fc0c91808
     0.00%     0.00%  python   [unknown]                                          [.] 0xc090018fc0c75055
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fbb680
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a794a53f83b45c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0b83af1c01958aa
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d8f7c2440ffeb6f
     0.00%     0.00%  python   [unknown]                                          [.] 0x400715c0c00077fa
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edde68ac01e18b7
     0.00%     0.00%  python   [unknown]                                          [.] 0xc03927f4c038a594
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f1833f23f05e088
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0dfbbd9c07f1b2d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf01831c4000b8ff
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f185aacbf710154
     0.00%     0.00%  python   [unknown]                                          [.] 0x3deddd18bdf70091
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab055c5a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaebaf57
     0.00%     0.00%  python   [unknown]                                          [.] 0x3feaca9d409fc502
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb38775bcff5811
     0.00%     0.00%  python   [unknown]                                          [.] 0x41007defbed6d3c2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc12030c0c0e1785b
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b0f50b40af49cc
     0.00%     0.00%  python   [unknown]                                          [.] 0x400b3da53f96ce15
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe7e32253f78101f
     0.00%     0.00%  python   [unknown]                                          [.] 0x402191bd409849e2
     0.00%     0.00%  python   [unknown]                                          [.] 0x411cdddd4108cee4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe9cbd72befac5b6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc05ff487c05d46ef
     0.00%     0.00%  python   [unknown]                                          [.] 0x40c8c37f3f8b02ab
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b8cb68402e2cce
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0ad85e4c05de97f
     0.00%     0.00%  python   [unknown]                                          [.] 0x405182a6412d6846
     0.00%     0.00%  python   [unknown]                                          [.] 0x4134a30040920337
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf8126d0410b5019
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f231271413f314f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0ece7eec0fc3790
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e89fbfa39f1f400
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa102e24128f172
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ec9b3fb4082e9e3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf5f762abe1f54f4
     0.00%     0.00%  python   [unknown]                                          [.] 0xbff5916540d5e38a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f34d32440e66266
     0.00%     0.00%  python   [unknown]                                          [.] 0x408dbce8bfdec65c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec932673fb95e8c
     0.00%     0.00%  python   [unknown]                                          [.] 0x4018b9304090b671
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f820d6e40bf7bdb
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401ce5
     0.00%     0.00%  python   [unknown]                                          [.] 0x40ae53cd410264d0
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b72422bfc4240c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9d8e66
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9347fb
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fffe76a4022c915
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc9237503cbeb96f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe24e3ee3f18933f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe7b87284065d3a1
     0.00%     0.00%  python   [unknown]                                          [.] 0x4085b4293fce61e1
     0.00%     0.00%  python   [unknown]                                          [.] 0x40082f9f3f89ad49
     0.00%     0.00%  python   [unknown]                                          [.] 0x4083e9643fdf3dd8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf139baf402317da
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c39e7e040c8a615
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ff0b59c402befb7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ca861d0bcbd66ba
     0.00%     0.00%  python   [unknown]                                          [.] 0x4016d85cc083e18d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbccb007fbcfd8464
     0.00%     0.00%  python   [unknown]                                          [.] 0x4065b3f44095c018
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e92b8aabdab2097
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe80bc7540b44620
     0.00%     0.00%  python   [unknown]                                          [.] 0x4085c532407d924c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc10049424111229b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa09830
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb3a8ea3f74b1b6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f295148bea5a9e7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3a231e403da86452
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c7652a5030
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0bb8eaac0b07fd5
     0.00%     0.00%  python   [unknown]                                          [.] 0xc052a06cc07422f2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe435e983fe47f77
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd23ca24411f5a43
     0.00%     0.00%  python   [unknown]                                          [.] 0x409d4b9d3f9c7564
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01a89f0401c824a
     0.00%     0.00%  python   [unknown]                                          [.] 0x406799dc3e40d560
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe0c6d2bf938773
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0543ff34029083b
     0.00%     0.00%  python   [unknown]                                          [.] 0x409368d3408c0f8c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d02e81840b90dfa
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab050301
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe1a67e04009bb22
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01435e23ffad247
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa86ffcbe983880
     0.00%     0.00%  python   [unknown]                                          [.] 0x4036a9833f17d5ef
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa3470c4191b08d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdd1e084bd2b80b8
     0.00%     0.00%  python   [unknown]                                          [.] 0x406410c03fb15c50
     0.00%     0.00%  python   [unknown]                                          [.] 0x414478cebf8ff019
     0.00%     0.00%  python   [unknown]                                          [.] 0x4107d662408b8352
     0.00%     0.00%  python   [unknown]                                          [.] 0x4040b5e540fe4b81
     0.00%     0.00%  python   [unknown]                                          [.] 0x40d0e15a3f1e2ddc
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd8bc7cebd57a0ad
     0.00%     0.00%  python   [unknown]                                          [.] 0x40bc34b2c005d4c2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb2603cbd82f864
     0.00%     0.00%  python   [unknown]                                          [.] 0x412abc1e3ee14ec8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd603cefbdb80e0c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8e0316c01d37e6
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02cf81fbfab15cf
     0.00%     0.00%  python   [unknown]                                          [.] 0x404180fc3f966542
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f256
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb3f11cbebc2076
     0.00%     0.00%  python   [unknown]                                          [.] 0x409c9f24405826c0
     0.00%     0.00%  python   [unknown]                                          [.] 0x404549c53f76570f
     0.00%     0.00%  python   [unknown]                                          [.] 0x40071e58409de7ce
     0.00%     0.00%  python   [unknown]                                          [.] 0xc00b37983f98eba3
     0.00%     0.00%  python   [unknown]                                          [.] 0xc020aae0409b497a
     0.00%     0.00%  python   [unknown]                                          [.] 0x40c7bee440f3ec60
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::BFCArena::Merge
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000200000
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::vector<long, std::allocator<long> >::_M_default_append
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe8e8b4d3d0c31c1
     0.00%     0.00%  python   [unknown]                                          [.] 0x40400e2e40cc5fde
     0.00%     0.00%  python   [unknown]                                          [.] 0x40071964400e981b
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b0edc04071b598
     0.00%     0.00%  python   [unknown]                                          [.] 0x406d61d5401aad62
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0311ab8c0159e0e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe956963bcf38542
     0.00%     0.00%  python   [unknown]                                          [.] 0x407bfa7240d1f75e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdd3e7183feb46b5
     0.00%     0.00%  python   [unknown]                                          [.] 0x4080c2054014e576
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b5330f40b5b6e2
     0.00%     0.00%  python   [unknown]                                          [.] 0x40868aed401c4c36
     0.00%     0.00%  python   [unknown]                                          [.] 0x409287c440e8ae45
     0.00%     0.00%  python   [unknown]                                          [.] 0x4157bf563f841e80
     0.00%     0.00%  python   [unknown]                                          [.] 0x41034ea1409e3f8d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf9caf2241492c74
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d65379c3d1b5883
     0.00%     0.00%  python   [unknown]                                          [.] 0x402c322bc007ffb0
     0.00%     0.00%  python   [unknown]                                          [.] 0xc11bc13dc11fb807
     0.00%     0.00%  python   [unknown]                                          [.] 0x41400ee240b491b6
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf4b39053cd5a940
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f5f40cd40bbbf88
     0.00%     0.00%  python   [unknown]                                          [.] 0x40ffba474115d5c8
     0.00%     0.00%  python   [unknown]                                          [.] 0x4098b00f3fe5b475
     0.00%     0.00%  python   [unknown]                                          [.] 0x40407c1dbd9c7400
     0.00%     0.00%  python   [unknown]                                          [.] 0x3dab345d3eb4e932
     0.00%     0.00%  python   [unknown]                                          [.] 0xc04f6d9f3f930b61
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f3e4f8bbf33773e
     0.00%     0.00%  python   [unknown]                                          [.] 0xbebca5ea3fe2af29
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f9f6a1f3fcf517e
     0.00%     0.00%  python   [unknown]                                          [.] 0x4156ebf940c4763a
     0.00%     0.00%  python   [unknown]                                          [.] 0x4113cfc4406683a6
     0.00%     0.00%  python   [unknown]                                          [.] 0x40208139c120850b
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper
     0.00%     0.00%  python   [unknown]                                          [.] 0xc101610a4148dde7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3daa98e63d66bf29
     0.00%     0.00%  python   [unknown]                                          [.] 0x3faf361c3fbe05fc
     0.00%     0.00%  python   [unknown]                                          [.] 0x3b8887ecbc85c8a6
     0.00%     0.00%  python   [unknown]                                          [.] 0x4086d8cac03ffee4
     0.00%     0.00%  python   [unknown]                                          [.] 0x4057f99240d4124c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf9cf03340a845c9
     0.00%     0.00%  python   [unknown]                                          [.] 0x409d28223f14e722
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb033c43fb3b352
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f61756c3fdb9300
     0.00%     0.00%  python   [unknown]                                          [.] 0x414d00dc40514ad6
     0.00%     0.00%  python   [unknown]                                          [.] 0x4087a4e34061b14e
     0.00%     0.00%  python   [unknown]                                          [.] 0x413b04b2bd8d5790
     0.00%     0.00%  python   [unknown]                                          [.] 0xc07be63f411b445c
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc0e7ea4078df57
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9177b0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc04b8a2bd4fe176
     0.00%     0.00%  python   [unknown]                                          [.] 0x4119073a410bdc64
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e54680fbf0dc3f2
     0.00%     0.00%  python   [unknown]                                          [.] 0x40d2a2b84087a97e
     0.00%     0.00%  python   [unknown]                                          [.] 0x408fbf6f3fb0fe5f
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa1529e40630422
     0.00%     0.00%  python   [unknown]                                          [.] 0x401efe0ebf23a295
     0.00%     0.00%  python   [unknown]                                          [.] 0x418ca7654094a9f2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec806a2be2fd85f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfdcffb24093ef63
     0.00%     0.00%  python   [unknown]                                          [.] 0xc04dd6a5c0912540
     0.00%     0.00%  python   [unknown]                                          [.] 0x3db0fe084002f184
     0.00%     0.00%  python   [unknown]                                          [.] 0x408899d23f66344d
     0.00%     0.00%  python   [unknown]                                          [.] 0x40687085c0443e50
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab600d0c
     0.00%     0.00%  python   [unknown]                                          [.] 0x40f6c66340dd3216
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe109fa3fd5d0bc
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fca23f5bf683079
     0.00%     0.00%  python   [unknown]                                          [.] 0x4083c5244036f214
     0.00%     0.00%  python   [unknown]                                          [.] 0x40aa2e52c08a9772
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf0c4da43ed625c3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e0a67f4413c6966
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ffeb2ce4105cff7
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fff67a640f65ead
     0.00%     0.00%  python   [unknown]                                          [.] 0x419a53d24084373d
     0.00%     0.00%  python   [unknown]                                          [.] 0x4032f425c008ff72
     0.00%     0.00%  python   [unknown]                                          [.] 0x418d42f7405ba1a3
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Tensor::ReleaseBuffer
     0.00%     0.00%  python   [unknown]                                          [.] 0x4035d19ebf0b9e0a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fd563eabf4ad926
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ccafbaa3d28d2f4
     0.00%     0.00%  python   [unknown]                                          [.] 0xc043697f4104a093
     0.00%     0.00%  python   [unknown]                                          [.] 0x40d1dc84413ccb50
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ffae5433fc7f591
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdda20febe60a49d
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc2844cc3b9bdbe8
     0.00%     0.00%  python   [unknown]                                          [.] 0x408a5aac3ec72de3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fbe3c2bc0c26395
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937d1b
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0db02e93f4a46fa
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d7c70
     0.00%     0.00%  python   [unknown]                                          [.] 0x4090fe0e3e95f00c
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf1870e23e483ae2
     0.00%     0.00%  python   [unknown]                                          [.] 0x410928fa3eb91e40
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b5bf6140b10388
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fbe0c0
     0.00%     0.00%  python   [unknown]                                          [.] 0x41019c843ec98d38
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fe2fd754085d979
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab050372
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f5c9b8a406701ab
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcde21403f38a9d8
     0.00%     0.00%  python   [unknown]                                          [.] 0x4080ceb640887be9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf04175ebe2011c6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8c3c6a40de1ae7
     0.00%     0.00%  python   [unknown]                                          [.] 0xba79bbba3da16471
     0.00%     0.00%  python   [unknown]                                          [.] 0x4103ebde409801b5
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd92ba89bd694338
     0.00%     0.00%  python   [llc]                                              [k] llc_rcv
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1300b7
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe85ad263cb0a573
     0.00%     0.00%  python   [unknown]                                          [.] 0x3c846e403d2a05b2
     0.00%     0.00%  python   [unknown]                                          [.] 0x41612aa73f300d74
     0.00%     0.00%  python   [unknown]                                          [.] 0x4096737e4093dc8e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e9587984016cfaa
     0.00%     0.00%  python   [unknown]                                          [.] 0x4011947a3c58aa80
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e0ec63a40af9a5a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbc4bb46b3eae1d9a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf50e57240c18666
     0.00%     0.00%  python   [unknown]                                          [.] 0xbec5e8cc40d1dd21
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdbc599ebe1a9dce
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa5a50041013ae2
     0.00%     0.00%  python   [unknown]                                          [.] 0x402b100740a4bd0c
     0.00%     0.00%  python   [unknown]                                          [.] 0xc03b0c64412542e9
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd0301a0b950f0ac
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa6691c403a2f31
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf55efd440fd2f17
     0.00%     0.00%  python   [unknown]                                          [.] 0x4031121e40108692
     0.00%     0.00%  python   [unknown]                                          [.] 0x404e1c67bffea1b6
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab4009e7
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b5644e40950bd8
     0.00%     0.00%  python   [unknown]                                          [.] 0x403a5146410aa744
     0.00%     0.00%  python   [unknown]                                          [.] 0x40aa1706c02666b2
     0.00%     0.00%  python   [unknown]                                          [.] 0xc02f604940cc4a2b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab400ae7
     0.00%     0.00%  python   [unknown]                                          [.] 0x4046f8eb4044fdaa
     0.00%     0.00%  python   [unknown]                                          [.] 0x407f474740b9f71a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dd05a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e0722
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe2667ea3e871e2a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab400949
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa927123
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab401e49
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8a68ce
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f14ab5dbf93796a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe58c0003d70c0f8
     0.00%     0.00%  python   [unknown]                                          [.] 0x4099537040fb4d2e
     0.00%     0.00%  python   [unknown]                                          [.] 0xc01396bdbe890dc6
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa938be9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f8eaf1e40ae7ef3
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd8b4d28bd5a63c5
     0.00%     0.00%  python   [unknown]                                          [.] 0x40423ef3407da178
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe8648dc409cb845
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa85212b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbcd31cdf3e4c230a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d96f0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d4064
     0.00%     0.00%  python   [unknown]                                          [.] 0xc08b8b153ec86bd4
     0.00%     0.00%  python   [unknown]                                          [.] 0x40a0ea7a40b1e512
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d1ec097bd7eca5a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc007fd40bf1e6b
     0.00%     0.00%  python   [unknown]                                          [.] 0xbdb7a776be4fd792
     0.00%     0.00%  python   [unknown]                                          [.] 0xc04d178e40c23406
     0.00%     0.00%  python   [unknown]                                          [.] 0x4156609e3fb776e1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f6f2cd5bf9b25ec
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf5d8fca4016c8d0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd0ceb453cd23821
     0.00%     0.00%  python   [unknown]                                          [.] 0xc067a8e94016b8bc
     0.00%     0.00%  python   [unknown]                                          [.] 0x404805d240399774
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fca5fb0407191e3
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d2db18b3e467c56
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd876917bd9aa9f4
     0.00%     0.00%  python   [unknown]                                          [.] 0x4089983b402c3742
     0.00%     0.00%  python   [unknown]                                          [.] 0x40911df24051b4e9
     0.00%     0.00%  python   [unknown]                                          [.] 0x4061affe412b9239
     0.00%     0.00%  python   [unknown]                                          [.] 0x4025838940501a19
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0e77f2c0612a00
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa3e923bf17288b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8054cc
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa80c63e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa80c608
     0.00%     0.00%  python   [unknown]                                          [.] 0x404ded78408d64e4
     0.00%     0.00%  python   [unknown]                                          [.] 0x41096fb5bff68332
     0.00%     0.00%  python   [unknown]                                          [.] 0x4100373d40f2adea
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0807042400b5552
     0.00%     0.00%  python   [unknown]                                          [.] 0x401aae103fbcc4b9
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e44741f3dd92d9e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3edf580f409967ec
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe8343babe055ad0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbee72b543f875e46
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8fd684
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ef856e640101f57
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f0efdd93d2dd354
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f7448
     0.00%     0.00%  python   [unknown]                                          [.] 0x408a2a3a4034142a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f709c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab059477
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e92a8343e482e14
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::vector<long, std::allocator<long> >::_M_fill_insert
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000021
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c765374520
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854cc0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854cd0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854ce0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854cf0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d00
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d10
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d20
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d30
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d40
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d50
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d60
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d70
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d80
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854d90
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854da0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854db0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854dc0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854dd0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854de0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854df0
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854e00
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854e10
     0.00%     0.00%  python   [unknown]                                          [.] 0x00007f8904854e20
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf55e94440885bea
     0.00%     0.00%  python   [unknown]                                          [.] 0x40aada563fd11ead
     0.00%     0.00%  python   [unknown]                                          [k] 0xbffc786a3f313554
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa86549c
     0.00%     0.00%  python   [unknown]                                          [.] 0x40352db040a5aa97
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfa012ef3f5f116b
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f5c72be40c6609e
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f399ca4406f339a
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd706e103eec12ec
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937c46
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935526
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaab32645
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfd08201bf9e035a
     0.00%     0.00%  python   [unknown]                                          [.] 0x4085a5e9bf8a0cee
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9463b9
     0.00%     0.00%  python   [unknown]                                          [.] 0x415e1e8241057e35
     0.00%     0.00%  python   [mac80211]                                         [k] ieee80211_sta_tx_notify
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_txrx_tx_unref
     0.00%     0.00%  python   [mac80211]                                         [k] ieee80211_tx_status
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fa25763bf0c5a16
     0.00%     0.00%  python   [unknown]                                          [.] 0xbde9ea623e1e912b
     0.00%     0.00%  python   [unknown]                                          [.] 0x40f071f5c0240f06
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2b32ca
     0.00%     0.00%  python   [unknown]                                          [.] 0x40aaffce412fd3be
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f72b1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb789093f9a2548
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd11a2b0bcefd85a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc2836040878180
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d9703
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab0502b6
     0.00%     0.00%  python   [unknown]                                          [.] 0x3ea19d014024eb0f
     0.00%     0.00%  python   [unknown]                                          [.] 0xc046b87a40739138
     0.00%     0.00%  python   [unknown]                                          [.] 0x3cf8d6a3bdcbbe00
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d9246
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Broadcaster::Broadcaster
     0.00%     0.00%  python   [unknown]                                          [.] 0x40b223d63fb9bbdc
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d20d64dbc8a3799
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf068f7dbeca01ac
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd4b28f5bdc7facc
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0212f2e40916728
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fb75900bf878eb1
     0.00%     0.00%  python   [unknown]                                          [.] 0x3f85b8904036b2bc
     0.00%     0.00%  python   [unknown]                                          [.] 0x40bab00c40836c7a
     0.00%     0.00%  python   [unknown]                                          [.] 0x3faaff3d41292f8f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8fd69b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9370a0
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_htc_rx_completion_handler
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_wmi_process_rx
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_wmi_tlv_op_rx
     0.00%     0.00%  python   [unknown]                                          [.] 0x403c000240ea9053
     0.00%     0.00%  python   [unknown]                                          [.] 0x404727e4c04387b8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf9959253fff09bb
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3d81493d8342d0
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] MlasExecuteThreaded
     0.00%     0.00%  python   [unknown]                                          [.] 0x40dbb0a440d3fdd9
     0.00%     0.00%  python   [unknown]                                          [.] 0x4045d086c041837c
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::TensorType<float>::GetElementType
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe83cdef3d55cbc6
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8a68c0
     0.00%     0.00%  python   [unknown]                                          [.] 0xbfc6b5ecbf574382
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OpKernelInfo::GetAllocator
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8ea562
     0.00%     0.00%  python   [unknown]                                          [.] 0x3fc61fbb400e66dc
     0.00%     0.00%  python   [unknown]                                          [.] 0x40c6596abd0dbfe0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e3e46
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa866ce0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937c32
     0.00%     0.00%  python   [unknown]                                          [.] 0x3e859825400e12bc
     0.00%     0.00%  python   [ath10k_core]                                      [k] _ath10k_ce_completed_recv_next_nolock
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_ce_completed_recv_next
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937120
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa098cf
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa09aa0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d9c44
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8df224
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8de5b8
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd07bdec3bd0ac04
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab055f35
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd1385983e41a9c2
     0.00%     0.00%  python   [unknown]                                          [.] 0xbf5c95fe3fa0dd13
     0.00%     0.00%  python   [unknown]                                          [.] 0xc0cebe8f412c9625
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e1798
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8a6a8f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9347e1
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9347b5
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9419bf
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937f84
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8ffc39
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2ae218
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2a92e8
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2a9242
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2aeac8
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::DataTypeImpl::GetType<onnxruntime::Tensor>
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa93801c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937f6d
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9177c5
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa932ee5
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaebbf29
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::ReshapeHelper::ReshapeHelper
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::concurrency::ThreadPool::DegreeOfParallelism
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f2764
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OpKernelContext::GetInputArgIndex
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f7028
     0.00%     0.00%  python   [unknown]                                          [.] 0xbd91a542be3105db
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8a5f31
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8a6983
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9371be
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab102f80
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa86822a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8681e1
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa91d9f8
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaadaaf33
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaadaaf01
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaadaaa50
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaad790b2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaad78806
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaebae7f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab400980
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab055900
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f6cdb
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa7d6cd
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f27d5
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa913dbe
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e9a52
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937d0d
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] std::vector<long, std::allocator<long> >::reserve
     0.00%     0.00%  python   [unknown]                                          [.] 0xbeab1e2c3fd81963
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e0615
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d17e3
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8cae20
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8caf3e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e4206
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e9600
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa86547c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e3e7b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa945ca0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa946260
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaeb751b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaebbf90
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaeb76f6
     0.00%     0.00%  python   [ath10k_pci]                                       [k] ath10k_pci_interrupt_handler
     0.00%     0.00%  python   [ath10k_pci]                                       [k] ath10k_pci_wake.part.32
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d3d4a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d2474
     0.00%     0.00%  python   libstdc++.so.6.0.26                                [.] operator delete
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f1c4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa073f0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa072d8
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa071d2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0c2ab
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0a518
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0a34a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8cae37
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e8aa0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaeb7594
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaebae78
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaeb7795
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f70d4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa933020
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8be389
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8bdfdc
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8bd260
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e17ce
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dfd22
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa939221
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f2ae
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8ffad4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9371f3
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d9268
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab04ed5a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dbd80
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa932c60
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8ffaa5
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f2a4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa934f70
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa87787c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa85206e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0fe63
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2a91e0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab25c570
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab130007
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab236d50
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab236b45
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2362c2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2373f5
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2372a1
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab236fc2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab60010a
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::OpKernelContext::GetInputMLValue
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa83b3f1
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa943daf
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa851f7f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa852123
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] operator new@plt
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9464d0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8caf30
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8a6527
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_mac_tx_push_pending
     0.00%     0.00%  python   [mac80211]                                         [k] ieee80211_txq_schedule_start
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d909e
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937c5f
     0.00%     0.00%  python   [unknown]                                          [.] 0xbe3a326abdf0c71b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab40093a
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa83b6c1
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8d17bf
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dbb21
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa83c2c9
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa865470
     0.00%     0.00%  python   [unknown]                                          [.] 0x3d96590fbeabc1dd
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_mac_bitrate_to_idx
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::IExecutionFrame::ReleaseMLValue
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fb98e0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaaa6aa3
     0.00%     0.00%  python   [ath10k_core]                                      [k] ath10k_wmi_event_mgmt_rx
     0.00%     0.00%  python   [mac80211]                                         [k] ieee80211_rx_napi
     0.00%     0.00%  python   [mac80211]                                         [k] ieee80211_prepare_and_rx_handle
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab115ead
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab1140fb
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9183ee
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::Gemm<float>::Compute
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa93718f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa83b3f0
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fc27c8
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937096
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::PrimitiveDataType<float>::Size
     0.00%     0.00%  python   [unknown]                                          [.] 0x3eff79ce3f65bed7
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f7435
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e18ef
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d92c0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8ea69f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f6fd4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaebbe8f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dc0e0
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f29c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d92a4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaab3263f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dbd2f
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa943d38
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d8f25
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935d6c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa937203
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dd401
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaad26c76
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8ea52c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8dd3a9
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8e96ac
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa935cb8
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fbe870
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::GraphViewer::GetNode
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fc0280
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa9330b8
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f6cd3
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::IExecutionFrame::Init
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000006b
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000204
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000111
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000448
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000011c
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000295
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000017b
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000000c2
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000003f9
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000260
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000048c
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000150
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000487
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000018b
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000268
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000178
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000004ae
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000177
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000226
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000019e
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000000fc
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000433
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000093
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000001b5
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000001c
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000002e7
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000002a2
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000517
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000477
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000002de
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000000a
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000001a3
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000004cf
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000198
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000004ca
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000574
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000004d6
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000124
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000045b
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000002c2
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000018a
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000004c1
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000328
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000013e
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000221
     0.00%     0.00%  python   [unknown]                                          [.] 0x00000000000003bf
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000088
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000049
     0.00%     0.00%  python   [unknown]                                          [.] 0x000000000000030e
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000170
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000004a7
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000551
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000117
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000347
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000126
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000045d
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000017
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000139
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000382
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000495
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000015e
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000056
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000047d
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000146
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000173
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000000f
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000037a
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000400
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000000c9
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000409
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000000d2
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000000ea
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000421
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000028b
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000000f2
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000004ac
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000044
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000001dd
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000538
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000201
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000008
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000003aa
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000073
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000053e
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000543
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000020c
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000520
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000004d9
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000368
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000031
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000001ca
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000003bb
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000003dc
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000000a5
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000352
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000001b
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000418
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000190
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000131
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000472
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000003ee
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000385
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000004e
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000055
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000038c
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000008b
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000263
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000003de
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000240
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000577
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000395
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000005e
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000141
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000000b6
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000038a
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000187
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000004be
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000002c0
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000343
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000054d
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000078
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000003af
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f8900000565
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000022e
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f890000009f
     0.00%     0.00%  python   libgfortran-2e0d59d6.so.5.0.0                      [.] 0x00007f89000003d6
     0.00%     0.00%  python   onnxruntime_pybind11_state.so                      [.] onnxruntime::TensorShape::SizeToDimension
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000400
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c764fc1848
     0.00%     0.00%  python   python3.7                                          [.] _PyUnicodeWriter_Finish
     0.00%     0.00%  python   python3.7                                          [.] _PyCFunction_FastCallDict
     0.00%     0.00%  python   [unknown]                                          [.] 0x000055c75b339f00
     0.00%     0.00%  python   [unknown]                                          [.] 0x0000000000000004
     0.00%     0.00%  python   python3.7                                          [.] _PyMethodDef_RawFastCallKeywords
     0.00%     0.00%  python   [unknown]                                          [.] 0x6e695f65646f6369
     0.00%     0.00%  python   python3.7                                          [.] builtin_input
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f886
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0ff0c
     0.00%     0.00%  python   libc-2.27.so                                       [.] _IO_file_underflow@@GLIBC_2.2.5
     0.00%     0.00%  python   [unknown]                                          [k] 0x000055c75c49d010
     0.00%     0.00%  python   libc-2.27.so                                       [.] read
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab40008c
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa804207
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaadccca
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaadcc77
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaadcade
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaadca2b
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaae801fe
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaae85532
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaa8f2df4
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffab2d7c83
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa070e6
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f169
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f150
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa07234
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa073b2
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa05853
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f154
     0.00%     0.00%  python   [kernel.kallsyms]                                  [k] 0xffffffffaaa0f1ed


#
# (Cannot load tips.txt file, please install perf!)
#
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (45234 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006c5ce0 <MlasGemmFloatKernelFma3>:
         :            MlasGemmFloatKernelFma3():
    0.29 :   6c5ce0:       push   %rbp
    0.01 :   6c5ce1:       push   %rbx
    0.00 :   6c5ce2:       push   %r15
    0.00 :   6c5ce4:       mov    %rdi,%r11
    0.04 :   6c5ce7:       mov    0x20(%rsp),%r10
    0.00 :   6c5cec:       shl    $0x2,%r10
    0.00 :   6c5cf0:       mov    0x28(%rsp),%rax
    0.03 :   6c5cf5:       shl    $0x2,%rax
    0.00 :   6c5cf9:       movzbq 0x30(%rsp),%r15
    0.00 :   6c5cff:       vmovss %xmm0,-0x10(%rsp)
    0.00 :   6c5d05:       vzeroall
    0.36 :   6c5d08:       cmp    $0x5,%r8
    0.00 :   6c5d0c:       ja     6c6565 <MlasGemmFloatKernelFma3+0x885>
    0.00 :   6c5d12:       je     6c7247 <MlasGemmFloatKernelFma3+0x1567>
    0.00 :   6c5d18:       cmp    $0x3,%r8
    0.00 :   6c5d1c:       ja     6c6057 <MlasGemmFloatKernelFma3+0x377>
    0.00 :   6c5d22:       je     6c6e3d <MlasGemmFloatKernelFma3+0x115d>
    0.00 :   6c5d28:       cmp    $0x1,%r8
    0.00 :   6c5d2c:       je     6c6c49 <MlasGemmFloatKernelFma3+0xf69>
    0.00 :   6c5d32:       cmp    $0x8,%r9
    0.00 :   6c5d36:       jbe    6c5ed8 <MlasGemmFloatKernelFma3+0x1f8>
    0.00 :   6c5d3c:       mov    %rcx,%rbp
    0.00 :   6c5d3f:       sub    $0x4,%rbp
    0.00 :   6c5d43:       jb     6c5e23 <MlasGemmFloatKernelFma3+0x143>
    0.00 :   6c5d49:       prefetcht0 0x100(%rsi)
    0.00 :   6c5d50:       vmovaps (%rsi),%ymm0
    0.00 :   6c5d54:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c5d59:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c5d5e:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5d63:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5d68:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c5d6e:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5d73:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5d78:       prefetcht0 0x140(%rsi)
    0.00 :   6c5d7f:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c5d84:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c5d89:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c5d8f:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5d94:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5d99:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c5da0:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5da5:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5daa:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c5dae:       prefetcht0 0x100(%rsi)
    0.00 :   6c5db5:       vmovaps (%rsi),%ymm0
    0.00 :   6c5db9:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c5dbe:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c5dc4:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5dc9:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5dce:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c5dd5:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5dda:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5ddf:       prefetcht0 0x140(%rsi)
    0.00 :   6c5de6:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c5deb:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c5df0:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c5df6:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5dfb:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5e00:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c5e07:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5e0c:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5e11:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c5e15:       add    $0x10,%rdi
    0.00 :   6c5e19:       sub    $0x4,%rbp
    0.00 :   6c5e1d:       jae    6c5d49 <MlasGemmFloatKernelFma3+0x69>
    0.00 :   6c5e23:       add    $0x4,%rbp
    0.00 :   6c5e27:       je     6c5e5e <MlasGemmFloatKernelFma3+0x17e>
    0.00 :   6c5e29:       vmovaps (%rsi),%ymm0
    0.00 :   6c5e2d:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c5e32:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c5e37:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c5e3c:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c5e41:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c5e47:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c5e4c:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c5e51:       add    $0x40,%rsi
    0.00 :   6c5e55:       add    $0x4,%rdi
    0.00 :   6c5e59:       dec    %rbp
    0.00 :   6c5e5c:       jne    6c5e29 <MlasGemmFloatKernelFma3+0x149>
    0.00 :   6c5e5e:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c5e65:       prefetcht0 0x40(%rdx)
    0.00 :   6c5e69:       prefetcht0 0x40(%rdx,%rax,1)
    0.00 :   6c5e6e:       sub    $0x10,%r9
    0.00 :   6c5e72:       jb     6c5fe4 <MlasGemmFloatKernelFma3+0x304>
    0.00 :   6c5e78:       test   %r15b,%r15b
    0.00 :   6c5e7b:       jne    6c5e97 <MlasGemmFloatKernelFma3+0x1b7>
    0.00 :   6c5e7d:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c5e82:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c5e88:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c5e8e:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c5e95:       jmp    6c5ea7 <MlasGemmFloatKernelFma3+0x1c7>
    0.00 :   6c5e97:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c5e9b:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c5e9f:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c5ea3:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c5ea7:       vmovups %ymm4,(%rdx)
    0.00 :   6c5eab:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c5eb0:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c5eb5:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.00 :   6c5ebb:       add    $0x40,%rdx
    0.00 :   6c5ebf:       mov    %r11,%rdi
    0.00 :   6c5ec2:       vzeroall
    0.00 :   6c5ec5:       cmp    $0x8,%r9
    0.00 :   6c5ec9:       ja     6c5d3c <MlasGemmFloatKernelFma3+0x5c>
    0.00 :   6c5ecf:       test   %r9,%r9
    0.00 :   6c5ed2:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c5ed8:       mov    %rcx,%rbp
    0.00 :   6c5edb:       sub    $0x4,%rbp
    0.00 :   6c5edf:       jb     6c5f83 <MlasGemmFloatKernelFma3+0x2a3>
    0.00 :   6c5ee5:       prefetcht0 0x100(%rsi)
    0.00 :   6c5eec:       vmovaps (%rsi),%ymm0
    0.00 :   6c5ef0:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c5ef5:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5efa:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c5f00:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5f05:       prefetcht0 0x140(%rsi)
    0.00 :   6c5f0c:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c5f11:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c5f17:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5f1c:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c5f23:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5f28:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c5f2c:       prefetcht0 0x100(%rsi)
    0.00 :   6c5f33:       vmovaps (%rsi),%ymm0
    0.00 :   6c5f37:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c5f3d:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5f42:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c5f49:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5f4e:       prefetcht0 0x140(%rsi)
    0.00 :   6c5f55:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c5f5a:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c5f60:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5f65:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c5f6c:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5f71:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c5f75:       add    $0x10,%rdi
    0.00 :   6c5f79:       sub    $0x4,%rbp
    0.00 :   6c5f7d:       jae    6c5ee5 <MlasGemmFloatKernelFma3+0x205>
    0.00 :   6c5f83:       add    $0x4,%rbp
    0.00 :   6c5f87:       je     6c5faf <MlasGemmFloatKernelFma3+0x2cf>
    0.00 :   6c5f89:       vmovaps (%rsi),%ymm0
    0.00 :   6c5f8d:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c5f92:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c5f97:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c5f9d:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c5fa2:       add    $0x40,%rsi
    0.00 :   6c5fa6:       add    $0x4,%rdi
    0.00 :   6c5faa:       dec    %rbp
    0.00 :   6c5fad:       jne    6c5f89 <MlasGemmFloatKernelFma3+0x2a9>
    0.00 :   6c5faf:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c5fb6:       cmp    $0x8,%r9
    0.00 :   6c5fba:       jb     6c600f <MlasGemmFloatKernelFma3+0x32f>
    0.00 :   6c5fbc:       test   %r15b,%r15b
    0.00 :   6c5fbf:       jne    6c5fce <MlasGemmFloatKernelFma3+0x2ee>
    0.00 :   6c5fc1:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c5fc6:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c5fcc:       jmp    6c5fd6 <MlasGemmFloatKernelFma3+0x2f6>
    0.00 :   6c5fce:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c5fd2:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c5fd6:       vmovups %ymm5,(%rdx)
    0.00 :   6c5fda:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c5fdf:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c5fe4:       test   %r15b,%r15b
    0.00 :   6c5fe7:       jne    6c5ff6 <MlasGemmFloatKernelFma3+0x316>
    0.00 :   6c5fe9:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c5fee:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c5ff4:       jmp    6c5ffe <MlasGemmFloatKernelFma3+0x31e>
    0.00 :   6c5ff6:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c5ffa:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c5ffe:       vmovups %ymm4,(%rdx)
    0.00 :   6c6002:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c6007:       add    $0x20,%rdx
    0.00 :   6c600b:       add    $0x8,%r9
    0.00 :   6c600f:       mov    %r9,-0x8(%rsp)
    0.00 :   6c6014:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c601b:       vpcmpgtd 0x1e13fd(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c6023:       test   %r15b,%r15b
    0.00 :   6c6026:       jne    6c603f <MlasGemmFloatKernelFma3+0x35f>
    0.00 :   6c6028:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c602d:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c6033:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c6038:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c603d:       jmp    6c6047 <MlasGemmFloatKernelFma3+0x367>
    0.00 :   6c603f:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6043:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6047:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c604c:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c6052:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.01 :   6c6057:       cmp    $0x8,%r9
    0.00 :   6c605b:       jbe    6c62f9 <MlasGemmFloatKernelFma3+0x619>
    0.00 :   6c6061:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c6065:       add    %rdi,%rbx
    0.00 :   6c6068:       mov    %rcx,%rbp
    0.00 :   6c606b:       sub    $0x4,%rbp
    0.00 :   6c606f:       jb     6c61d5 <MlasGemmFloatKernelFma3+0x4f5>
    0.01 :   6c6075:       prefetcht0 0x100(%rsi)
    0.02 :   6c607c:       vmovaps (%rsi),%ymm0
    0.03 :   6c6080:       vmovaps 0x20(%rsi),%ymm1
    0.03 :   6c6085:       vbroadcastss (%rdi),%ymm3
    0.06 :   6c608a:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.03 :   6c608f:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.01 :   6c6094:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.04 :   6c609a:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.01 :   6c609f:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.02 :   6c60a4:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.03 :   6c60aa:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.04 :   6c60af:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.01 :   6c60b4:       vbroadcastss (%rbx),%ymm3
    0.03 :   6c60b9:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.02 :   6c60be:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.02 :   6c60c3:       prefetcht0 0x140(%rsi)
    0.00 :   6c60ca:       vmovaps 0x40(%rsi),%ymm0
    0.04 :   6c60cf:       vmovaps 0x60(%rsi),%ymm1
    0.01 :   6c60d4:       vbroadcastss 0x4(%rdi),%ymm3
    0.02 :   6c60da:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.02 :   6c60df:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.02 :   6c60e4:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.01 :   6c60eb:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.02 :   6c60f0:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.01 :   6c60f5:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.03 :   6c60fc:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.02 :   6c6101:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.02 :   6c6106:       vbroadcastss 0x4(%rbx),%ymm3
    0.01 :   6c610c:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.01 :   6c6111:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.01 :   6c6116:       sub    $0xffffffffffffff80,%rsi
    0.02 :   6c611a:       prefetcht0 0x100(%rsi)
    0.01 :   6c6121:       vmovaps (%rsi),%ymm0
    0.02 :   6c6125:       vmovaps 0x20(%rsi),%ymm1
    0.02 :   6c612a:       vbroadcastss 0x8(%rdi),%ymm3
    0.01 :   6c6130:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.02 :   6c6135:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.03 :   6c613a:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.01 :   6c6141:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.02 :   6c6146:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.01 :   6c614b:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.01 :   6c6152:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.01 :   6c6157:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.03 :   6c615c:       vbroadcastss 0x8(%rbx),%ymm3
    0.02 :   6c6162:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.02 :   6c6167:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.01 :   6c616c:       prefetcht0 0x140(%rsi)
    0.02 :   6c6173:       vmovaps 0x40(%rsi),%ymm0
    0.04 :   6c6178:       vmovaps 0x60(%rsi),%ymm1
    0.03 :   6c617d:       vbroadcastss 0xc(%rdi),%ymm3
    0.01 :   6c6183:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.04 :   6c6188:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.04 :   6c618d:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.01 :   6c6194:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.04 :   6c6199:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.01 :   6c619e:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.01 :   6c61a5:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.02 :   6c61aa:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.02 :   6c61af:       vbroadcastss 0xc(%rbx),%ymm3
    0.02 :   6c61b5:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.02 :   6c61ba:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.01 :   6c61bf:       sub    $0xffffffffffffff80,%rsi
    0.01 :   6c61c3:       add    $0x10,%rdi
    0.01 :   6c61c7:       add    $0x10,%rbx
    0.02 :   6c61cb:       sub    $0x4,%rbp
    0.00 :   6c61cf:       jae    6c6075 <MlasGemmFloatKernelFma3+0x395>
    0.00 :   6c61d5:       add    $0x4,%rbp
    0.00 :   6c61d9:       je     6c6233 <MlasGemmFloatKernelFma3+0x553>
    0.00 :   6c61db:       vmovaps (%rsi),%ymm0
    0.00 :   6c61df:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c61e4:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c61e9:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c61ee:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c61f3:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c61f9:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c61fe:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6203:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6209:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c620e:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6213:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c6218:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c621d:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c6222:       add    $0x40,%rsi
    0.00 :   6c6226:       add    $0x4,%rdi
    0.00 :   6c622a:       add    $0x4,%rbx
    0.00 :   6c622e:       dec    %rbp
    0.00 :   6c6231:       jne    6c61db <MlasGemmFloatKernelFma3+0x4fb>
    0.00 :   6c6233:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c623a:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c623e:       add    %rdx,%rbx
    0.00 :   6c6241:       prefetcht0 0x40(%rdx)
    0.00 :   6c6245:       prefetcht0 0x40(%rdx,%rax,1)
    0.00 :   6c624a:       prefetcht0 0x40(%rdx,%rax,2)
    0.00 :   6c624f:       prefetcht0 0x40(%rbx)
    0.00 :   6c6253:       sub    $0x10,%r9
    0.00 :   6c6257:       jb     6c64aa <MlasGemmFloatKernelFma3+0x7ca>
    0.00 :   6c625d:       test   %r15b,%r15b
    0.00 :   6c6260:       jne    6c6294 <MlasGemmFloatKernelFma3+0x5b4>
    0.00 :   6c6262:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.04 :   6c6267:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c626d:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.01 :   6c6273:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c627a:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c6280:       vfmadd213ps 0x20(%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c6287:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c628c:       vfmadd213ps 0x20(%rbx),%ymm2,%ymm11
    0.00 :   6c6292:       jmp    6c62b4 <MlasGemmFloatKernelFma3+0x5d4>
    0.00 :   6c6294:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6298:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c629c:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c62a0:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c62a4:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c62a8:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c62ac:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c62b0:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c62b4:       vmovups %ymm4,(%rdx)
    0.00 :   6c62b8:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c62bd:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c62c2:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.00 :   6c62c8:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c62cd:       vmovups %ymm9,0x20(%rdx,%rax,2)
    0.00 :   6c62d3:       vmovups %ymm10,(%rbx)
    0.00 :   6c62d7:       vmovups %ymm11,0x20(%rbx)
    0.00 :   6c62dc:       add    $0x40,%rdx
    0.00 :   6c62e0:       mov    %r11,%rdi
    0.00 :   6c62e3:       vzeroall
    0.00 :   6c62e6:       cmp    $0x8,%r9
    0.00 :   6c62ea:       ja     6c6061 <MlasGemmFloatKernelFma3+0x381>
    0.00 :   6c62f0:       test   %r9,%r9
    0.00 :   6c62f3:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c62f9:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c62fd:       add    %rdi,%rbx
    0.00 :   6c6300:       mov    %rcx,%rbp
    0.00 :   6c6303:       sub    $0x4,%rbp
    0.00 :   6c6307:       jb     6c6409 <MlasGemmFloatKernelFma3+0x729>
    0.00 :   6c630d:       prefetcht0 0x100(%rsi)
    0.00 :   6c6314:       vmovaps (%rsi),%ymm0
    0.00 :   6c6318:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c631d:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6322:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6328:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c632d:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6333:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6338:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c633d:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6342:       prefetcht0 0x140(%rsi)
    0.00 :   6c6349:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c634e:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c6354:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6359:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c6360:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6365:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c636c:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6371:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c6377:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c637c:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6380:       prefetcht0 0x100(%rsi)
    0.00 :   6c6387:       vmovaps (%rsi),%ymm0
    0.00 :   6c638b:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c6391:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6396:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c639d:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c63a2:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c63a9:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c63ae:       vbroadcastss 0x8(%rbx),%ymm3
    0.00 :   6c63b4:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c63b9:       prefetcht0 0x140(%rsi)
    0.00 :   6c63c0:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c63c5:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c63cb:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c63d0:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c63d7:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c63dc:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c63e3:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c63e8:       vbroadcastss 0xc(%rbx),%ymm3
    0.00 :   6c63ee:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c63f3:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c63f7:       add    $0x10,%rdi
    0.00 :   6c63fb:       add    $0x10,%rbx
    0.00 :   6c63ff:       sub    $0x4,%rbp
    0.00 :   6c6403:       jae    6c630d <MlasGemmFloatKernelFma3+0x62d>
    0.00 :   6c6409:       add    $0x4,%rbp
    0.00 :   6c640d:       je     6c644e <MlasGemmFloatKernelFma3+0x76e>
    0.00 :   6c640f:       vmovaps (%rsi),%ymm0
    0.00 :   6c6413:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6418:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c641d:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6423:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6428:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c642e:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6433:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c6438:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c643d:       add    $0x40,%rsi
    0.00 :   6c6441:       add    $0x4,%rdi
    0.00 :   6c6445:       add    $0x4,%rbx
    0.00 :   6c6449:       dec    %rbp
    0.00 :   6c644c:       jne    6c640f <MlasGemmFloatKernelFma3+0x72f>
    0.00 :   6c644e:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6455:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c6459:       add    %rdx,%rbx
    0.00 :   6c645c:       cmp    $0x8,%r9
    0.00 :   6c6460:       jb     6c64f5 <MlasGemmFloatKernelFma3+0x815>
    0.00 :   6c6466:       test   %r15b,%r15b
    0.00 :   6c6469:       jne    6c6483 <MlasGemmFloatKernelFma3+0x7a3>
    0.00 :   6c646b:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c6470:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c6476:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c647c:       vfmadd213ps (%rbx),%ymm2,%ymm11
    0.00 :   6c6481:       jmp    6c6493 <MlasGemmFloatKernelFma3+0x7b3>
    0.00 :   6c6483:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6487:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c648b:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c648f:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c6493:       vmovups %ymm5,(%rdx)
    0.00 :   6c6497:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c649c:       vmovups %ymm9,(%rdx,%rax,2)
    0.00 :   6c64a1:       vmovups %ymm11,(%rbx)
    0.00 :   6c64a5:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c64aa:       test   %r15b,%r15b
    0.00 :   6c64ad:       jne    6c64c7 <MlasGemmFloatKernelFma3+0x7e7>
    0.00 :   6c64af:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c64b4:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c64ba:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c64c0:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c64c5:       jmp    6c64d7 <MlasGemmFloatKernelFma3+0x7f7>
    0.00 :   6c64c7:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c64cb:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c64cf:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c64d3:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c64d7:       vmovups %ymm4,(%rdx)
    0.00 :   6c64db:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c64e0:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c64e5:       vmovups %ymm10,(%rbx)
    0.00 :   6c64e9:       add    $0x20,%rdx
    0.00 :   6c64ed:       add    $0x20,%rbx
    0.00 :   6c64f1:       add    $0x8,%r9
    0.00 :   6c64f5:       mov    %r9,-0x8(%rsp)
    0.00 :   6c64fa:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c6501:       vpcmpgtd 0x1e0f17(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c6509:       test   %r15b,%r15b
    0.00 :   6c650c:       jne    6c653a <MlasGemmFloatKernelFma3+0x85a>
    0.00 :   6c650e:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c6513:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c6519:       vmaskmovps (%rdx,%rax,2),%ymm0,%ymm8
    0.00 :   6c651f:       vmaskmovps (%rbx),%ymm0,%ymm10
    0.00 :   6c6524:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c6529:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c652e:       vfmadd213ps %ymm8,%ymm2,%ymm9
    0.00 :   6c6533:       vfmadd213ps %ymm10,%ymm2,%ymm11
    0.00 :   6c6538:       jmp    6c654a <MlasGemmFloatKernelFma3+0x86a>
    0.00 :   6c653a:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c653e:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6542:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c6546:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c654a:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c654f:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c6555:       vmaskmovps %ymm9,%ymm0,(%rdx,%rax,2)
    0.00 :   6c655b:       vmaskmovps %ymm11,%ymm0,(%rbx)
    0.00 :   6c6560:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.01 :   6c6565:       mov    $0x6,%r8d
    0.00 :   6c656b:       cmp    $0x8,%r9
    0.00 :   6c656f:       jbe    6c68fd <MlasGemmFloatKernelFma3+0xc1d>
    0.04 :   6c6575:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c6579:       add    %rdi,%rbx
    0.01 :   6c657c:       mov    %rcx,%rbp
    0.02 :   6c657f:       sub    $0x4,%rbp
    0.00 :   6c6583:       jb     6c676f <MlasGemmFloatKernelFma3+0xa8f>
    0.45 :   6c6589:       prefetcht0 0x100(%rsi)
    1.02 :   6c6590:       vmovaps (%rsi),%ymm0
    3.23 :   6c6594:       vmovaps 0x20(%rsi),%ymm1
    2.43 :   6c6599:       vbroadcastss (%rdi),%ymm3
    1.89 :   6c659e:       vfmadd231ps %ymm0,%ymm3,%ymm4
    1.19 :   6c65a3:       vfmadd231ps %ymm1,%ymm3,%ymm5
    1.19 :   6c65a8:       vbroadcastss (%rdi,%r10,1),%ymm3
    2.06 :   6c65ae:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.63 :   6c65b3:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.75 :   6c65b8:       vbroadcastss (%rdi,%r10,2),%ymm3
    1.49 :   6c65be:       vfmadd231ps %ymm0,%ymm3,%ymm8
    1.43 :   6c65c3:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.44 :   6c65c8:       vbroadcastss (%rbx),%ymm3
    1.28 :   6c65cd:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.84 :   6c65d2:       vfmadd231ps %ymm1,%ymm3,%ymm11
    1.26 :   6c65d7:       vbroadcastss (%rbx,%r10,1),%ymm3
    1.45 :   6c65dd:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.71 :   6c65e2:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.85 :   6c65e7:       vbroadcastss (%rbx,%r10,2),%ymm3
    1.95 :   6c65ed:       vfmadd231ps %ymm0,%ymm3,%ymm14
    0.58 :   6c65f2:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.73 :   6c65f7:       prefetcht0 0x140(%rsi)
    0.90 :   6c65fe:       vmovaps 0x40(%rsi),%ymm0
    2.76 :   6c6603:       vmovaps 0x60(%rsi),%ymm1
    0.81 :   6c6608:       vbroadcastss 0x4(%rdi),%ymm3
    0.54 :   6c660e:       vfmadd231ps %ymm0,%ymm3,%ymm4
    1.11 :   6c6613:       vfmadd231ps %ymm1,%ymm3,%ymm5
    1.50 :   6c6618:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.46 :   6c661f:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.57 :   6c6624:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.77 :   6c6629:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    1.25 :   6c6630:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.45 :   6c6635:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.77 :   6c663a:       vbroadcastss 0x4(%rbx),%ymm3
    0.82 :   6c6640:       vfmadd231ps %ymm0,%ymm3,%ymm10
    1.10 :   6c6645:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.65 :   6c664a:       vbroadcastss 0x4(%rbx,%r10,1),%ymm3
    0.72 :   6c6651:       vfmadd231ps %ymm0,%ymm3,%ymm12
    1.33 :   6c6656:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.70 :   6c665b:       vbroadcastss 0x4(%rbx,%r10,2),%ymm3
    0.58 :   6c6662:       vfmadd231ps %ymm0,%ymm3,%ymm14
    1.31 :   6c6667:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.50 :   6c666c:       sub    $0xffffffffffffff80,%rsi
    0.64 :   6c6670:       prefetcht0 0x100(%rsi)
    0.48 :   6c6677:       vmovaps (%rsi),%ymm0
    5.15 :   6c667b:       vmovaps 0x20(%rsi),%ymm1
    1.06 :   6c6680:       vbroadcastss 0x8(%rdi),%ymm3
    0.72 :   6c6686:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.79 :   6c668b:       vfmadd231ps %ymm1,%ymm3,%ymm5
    1.87 :   6c6690:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.45 :   6c6697:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.62 :   6c669c:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.71 :   6c66a1:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    1.22 :   6c66a8:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.48 :   6c66ad:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.89 :   6c66b2:       vbroadcastss 0x8(%rbx),%ymm3
    0.65 :   6c66b8:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.99 :   6c66bd:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.78 :   6c66c2:       vbroadcastss 0x8(%rbx,%r10,1),%ymm3
    0.70 :   6c66c9:       vfmadd231ps %ymm0,%ymm3,%ymm12
    1.11 :   6c66ce:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.85 :   6c66d3:       vbroadcastss 0x8(%rbx,%r10,2),%ymm3
    0.55 :   6c66da:       vfmadd231ps %ymm0,%ymm3,%ymm14
    1.28 :   6c66df:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.47 :   6c66e4:       prefetcht0 0x140(%rsi)
    0.92 :   6c66eb:       vmovaps 0x40(%rsi),%ymm0
    3.64 :   6c66f0:       vmovaps 0x60(%rsi),%ymm1
    1.76 :   6c66f5:       vbroadcastss 0xc(%rdi),%ymm3
    0.36 :   6c66fb:       vfmadd231ps %ymm0,%ymm3,%ymm4
    1.02 :   6c6700:       vfmadd231ps %ymm1,%ymm3,%ymm5
    1.12 :   6c6705:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    1.04 :   6c670c:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.46 :   6c6711:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.86 :   6c6716:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.81 :   6c671d:       vfmadd231ps %ymm0,%ymm3,%ymm8
    1.02 :   6c6722:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.69 :   6c6727:       vbroadcastss 0xc(%rbx),%ymm3
    0.89 :   6c672d:       vfmadd231ps %ymm0,%ymm3,%ymm10
    1.42 :   6c6732:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.72 :   6c6737:       vbroadcastss 0xc(%rbx,%r10,1),%ymm3
    0.47 :   6c673e:       vfmadd231ps %ymm0,%ymm3,%ymm12
    1.38 :   6c6743:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.92 :   6c6748:       vbroadcastss 0xc(%rbx,%r10,2),%ymm3
    0.48 :   6c674f:       vfmadd231ps %ymm0,%ymm3,%ymm14
    1.37 :   6c6754:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.49 :   6c6759:       sub    $0xffffffffffffff80,%rsi
    0.84 :   6c675d:       add    $0x10,%rdi
    0.54 :   6c6761:       add    $0x10,%rbx
    1.28 :   6c6765:       sub    $0x4,%rbp
    0.00 :   6c6769:       jae    6c6589 <MlasGemmFloatKernelFma3+0x8a9>
    0.00 :   6c676f:       add    $0x4,%rbp
    0.00 :   6c6773:       je     6c67ed <MlasGemmFloatKernelFma3+0xb0d>
    0.00 :   6c6775:       vmovaps (%rsi),%ymm0
    0.00 :   6c6779:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c677e:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6783:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6788:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c678d:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6793:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6798:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c679d:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c67a3:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c67a8:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c67ad:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c67b2:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c67b7:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c67bc:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c67c2:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c67c7:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c67cc:       vbroadcastss (%rbx,%r10,2),%ymm3
    0.00 :   6c67d2:       vfmadd231ps %ymm0,%ymm3,%ymm14
    0.00 :   6c67d7:       vfmadd231ps %ymm1,%ymm3,%ymm15
    0.00 :   6c67dc:       add    $0x40,%rsi
    0.00 :   6c67e0:       add    $0x4,%rdi
    0.00 :   6c67e4:       add    $0x4,%rbx
    0.00 :   6c67e8:       dec    %rbp
    0.00 :   6c67eb:       jne    6c6775 <MlasGemmFloatKernelFma3+0xa95>
    0.02 :   6c67ed:       vbroadcastss -0x10(%rsp),%ymm2
    0.02 :   6c67f4:       lea    (%rax,%rax,2),%rbx
    0.01 :   6c67f8:       add    %rdx,%rbx
    0.00 :   6c67fb:       prefetcht0 0x40(%rdx)
    0.07 :   6c67ff:       prefetcht0 0x40(%rdx,%rax,1)
    0.06 :   6c6804:       prefetcht0 0x40(%rdx,%rax,2)
    0.09 :   6c6809:       prefetcht0 0x40(%rbx)
    0.07 :   6c680d:       prefetcht0 0x40(%rbx,%rax,1)
    0.13 :   6c6812:       prefetcht0 0x40(%rbx,%rax,2)
    0.14 :   6c6817:       sub    $0x10,%r9
    0.00 :   6c681b:       jb     6c6b40 <MlasGemmFloatKernelFma3+0xe60>
    0.01 :   6c6821:       test   %r15b,%r15b
    0.00 :   6c6824:       jne    6c6872 <MlasGemmFloatKernelFma3+0xb92>
    0.01 :   6c6826:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.87 :   6c682b:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.12 :   6c6831:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.33 :   6c6837:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.06 :   6c683e:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.24 :   6c6844:       vfmadd213ps 0x20(%rdx,%rax,2),%ymm2,%ymm9
    0.06 :   6c684b:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.20 :   6c6850:       vfmadd213ps 0x20(%rbx),%ymm2,%ymm11
    0.02 :   6c6856:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm12
    0.13 :   6c685c:       vfmadd213ps 0x20(%rbx,%rax,1),%ymm2,%ymm13
    0.04 :   6c6863:       vfmadd213ps (%rbx,%rax,2),%ymm2,%ymm14
    0.11 :   6c6869:       vfmadd213ps 0x20(%rbx,%rax,2),%ymm2,%ymm15
    0.04 :   6c6870:       jmp    6c68a2 <MlasGemmFloatKernelFma3+0xbc2>
    0.00 :   6c6872:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6876:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c687a:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c687e:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6882:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c6886:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c688a:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c688e:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c6892:       vmulps %ymm2,%ymm12,%ymm12
    0.00 :   6c6896:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c689a:       vmulps %ymm2,%ymm14,%ymm14
    0.00 :   6c689e:       vmulps %ymm2,%ymm15,%ymm15
    0.01 :   6c68a2:       vmovups %ymm4,(%rdx)
    0.00 :   6c68a6:       vmovups %ymm5,0x20(%rdx)
    0.02 :   6c68ab:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c68b0:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.01 :   6c68b6:       vmovups %ymm8,(%rdx,%rax,2)
    0.01 :   6c68bb:       vmovups %ymm9,0x20(%rdx,%rax,2)
    0.01 :   6c68c1:       vmovups %ymm10,(%rbx)
    0.00 :   6c68c5:       vmovups %ymm11,0x20(%rbx)
    0.02 :   6c68ca:       vmovups %ymm12,(%rbx,%rax,1)
    0.00 :   6c68cf:       vmovups %ymm13,0x20(%rbx,%rax,1)
    0.01 :   6c68d5:       vmovups %ymm14,(%rbx,%rax,2)
    0.01 :   6c68da:       vmovups %ymm15,0x20(%rbx,%rax,2)
    0.01 :   6c68e0:       add    $0x40,%rdx
    0.00 :   6c68e4:       mov    %r11,%rdi
    0.01 :   6c68e7:       vzeroall
    0.38 :   6c68ea:       cmp    $0x8,%r9
    0.00 :   6c68ee:       ja     6c6575 <MlasGemmFloatKernelFma3+0x895>
    0.00 :   6c68f4:       test   %r9,%r9
    0.00 :   6c68f7:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c68fd:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c6901:       add    %rdi,%rbx
    0.00 :   6c6904:       mov    %rcx,%rbp
    0.00 :   6c6907:       sub    $0x4,%rbp
    0.00 :   6c690b:       jb     6c6a6b <MlasGemmFloatKernelFma3+0xd8b>
    0.00 :   6c6911:       prefetcht0 0x100(%rsi)
    0.00 :   6c6918:       vmovaps (%rsi),%ymm0
    0.00 :   6c691c:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6921:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6926:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c692c:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6931:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6937:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c693c:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c6941:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6946:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c694c:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c6951:       vbroadcastss (%rbx,%r10,2),%ymm3
    0.00 :   6c6957:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c695c:       prefetcht0 0x140(%rsi)
    0.00 :   6c6963:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c6968:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c696e:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6973:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c697a:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c697f:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c6986:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c698b:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c6991:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6996:       vbroadcastss 0x4(%rbx,%r10,1),%ymm3
    0.00 :   6c699d:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c69a2:       vbroadcastss 0x4(%rbx,%r10,2),%ymm3
    0.00 :   6c69a9:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c69ae:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c69b2:       prefetcht0 0x100(%rsi)
    0.00 :   6c69b9:       vmovaps (%rsi),%ymm0
    0.00 :   6c69bd:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c69c3:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c69c8:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c69cf:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c69d4:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c69db:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c69e0:       vbroadcastss 0x8(%rbx),%ymm3
    0.00 :   6c69e6:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c69eb:       vbroadcastss 0x8(%rbx,%r10,1),%ymm3
    0.00 :   6c69f2:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c69f7:       vbroadcastss 0x8(%rbx,%r10,2),%ymm3
    0.00 :   6c69fe:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c6a03:       prefetcht0 0x140(%rsi)
    0.00 :   6c6a0a:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c6a0f:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c6a15:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6a1a:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c6a21:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6a26:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c6a2d:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6a32:       vbroadcastss 0xc(%rbx),%ymm3
    0.00 :   6c6a38:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6a3d:       vbroadcastss 0xc(%rbx,%r10,1),%ymm3
    0.00 :   6c6a44:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c6a49:       vbroadcastss 0xc(%rbx,%r10,2),%ymm3
    0.00 :   6c6a50:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c6a55:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6a59:       add    $0x10,%rdi
    0.00 :   6c6a5d:       add    $0x10,%rbx
    0.00 :   6c6a61:       sub    $0x4,%rbp
    0.00 :   6c6a65:       jae    6c6911 <MlasGemmFloatKernelFma3+0xc31>
    0.00 :   6c6a6b:       add    $0x4,%rbp
    0.00 :   6c6a6f:       je     6c6ac6 <MlasGemmFloatKernelFma3+0xde6>
    0.00 :   6c6a71:       vmovaps (%rsi),%ymm0
    0.00 :   6c6a75:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6a7a:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c6a7f:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6a85:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c6a8a:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6a90:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c6a95:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c6a9a:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c6a9f:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c6aa5:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c6aaa:       vbroadcastss (%rbx,%r10,2),%ymm3
    0.00 :   6c6ab0:       vfmadd231ps %ymm0,%ymm3,%ymm15
    0.00 :   6c6ab5:       add    $0x40,%rsi
    0.00 :   6c6ab9:       add    $0x4,%rdi
    0.00 :   6c6abd:       add    $0x4,%rbx
    0.00 :   6c6ac1:       dec    %rbp
    0.00 :   6c6ac4:       jne    6c6a71 <MlasGemmFloatKernelFma3+0xd91>
    0.00 :   6c6ac6:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6acd:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c6ad1:       add    %rdx,%rbx
    0.00 :   6c6ad4:       cmp    $0x8,%r9
    0.00 :   6c6ad8:       jb     6c6ba9 <MlasGemmFloatKernelFma3+0xec9>
    0.00 :   6c6ade:       test   %r15b,%r15b
    0.00 :   6c6ae1:       jne    6c6b07 <MlasGemmFloatKernelFma3+0xe27>
    0.00 :   6c6ae3:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c6ae8:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c6aee:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c6af4:       vfmadd213ps (%rbx),%ymm2,%ymm11
    0.00 :   6c6af9:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm13
    0.00 :   6c6aff:       vfmadd213ps (%rbx,%rax,2),%ymm2,%ymm15
    0.00 :   6c6b05:       jmp    6c6b1f <MlasGemmFloatKernelFma3+0xe3f>
    0.00 :   6c6b07:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6b0b:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6b0f:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c6b13:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c6b17:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c6b1b:       vmulps %ymm2,%ymm15,%ymm15
    0.00 :   6c6b1f:       vmovups %ymm5,(%rdx)
    0.00 :   6c6b23:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c6b28:       vmovups %ymm9,(%rdx,%rax,2)
    0.00 :   6c6b2d:       vmovups %ymm11,(%rbx)
    0.00 :   6c6b31:       vmovups %ymm13,(%rbx,%rax,1)
    0.00 :   6c6b36:       vmovups %ymm15,(%rbx,%rax,2)
    0.00 :   6c6b3b:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c6b40:       test   %r15b,%r15b
    0.00 :   6c6b43:       jne    6c6b69 <MlasGemmFloatKernelFma3+0xe89>
    0.00 :   6c6b45:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6b4a:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c6b50:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c6b56:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c6b5b:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm12
    0.00 :   6c6b61:       vfmadd213ps (%rbx,%rax,2),%ymm2,%ymm14
    0.00 :   6c6b67:       jmp    6c6b81 <MlasGemmFloatKernelFma3+0xea1>
    0.00 :   6c6b69:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6b6d:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c6b71:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c6b75:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c6b79:       vmulps %ymm2,%ymm12,%ymm12
    0.00 :   6c6b7d:       vmulps %ymm2,%ymm14,%ymm14
    0.00 :   6c6b81:       vmovups %ymm4,(%rdx)
    0.00 :   6c6b85:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c6b8a:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c6b8f:       vmovups %ymm10,(%rbx)
    0.00 :   6c6b93:       vmovups %ymm12,(%rbx,%rax,1)
    0.00 :   6c6b98:       vmovups %ymm14,(%rbx,%rax,2)
    0.00 :   6c6b9d:       add    $0x20,%rdx
    0.00 :   6c6ba1:       add    $0x20,%rbx
    0.00 :   6c6ba5:       add    $0x8,%r9
    0.00 :   6c6ba9:       mov    %r9,-0x8(%rsp)
    0.00 :   6c6bae:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c6bb5:       vpcmpgtd 0x1e0863(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c6bbd:       test   %r15b,%r15b
    0.00 :   6c6bc0:       jne    6c6c04 <MlasGemmFloatKernelFma3+0xf24>
    0.00 :   6c6bc2:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c6bc7:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c6bcd:       vmaskmovps (%rdx,%rax,2),%ymm0,%ymm8
    0.00 :   6c6bd3:       vmaskmovps (%rbx),%ymm0,%ymm10
    0.00 :   6c6bd8:       vmaskmovps (%rbx,%rax,1),%ymm0,%ymm12
    0.00 :   6c6bde:       vmaskmovps (%rbx,%rax,2),%ymm0,%ymm14
    0.00 :   6c6be4:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c6be9:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c6bee:       vfmadd213ps %ymm8,%ymm2,%ymm9
    0.00 :   6c6bf3:       vfmadd213ps %ymm10,%ymm2,%ymm11
    0.00 :   6c6bf8:       vfmadd213ps %ymm12,%ymm2,%ymm13
    0.00 :   6c6bfd:       vfmadd213ps %ymm14,%ymm2,%ymm15
    0.00 :   6c6c02:       jmp    6c6c1c <MlasGemmFloatKernelFma3+0xf3c>
    0.00 :   6c6c04:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6c08:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c6c0c:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c6c10:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c6c14:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c6c18:       vmulps %ymm2,%ymm15,%ymm15
    0.00 :   6c6c1c:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c6c21:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c6c27:       vmaskmovps %ymm9,%ymm0,(%rdx,%rax,2)
    0.00 :   6c6c2d:       vmaskmovps %ymm11,%ymm0,(%rbx)
    0.00 :   6c6c32:       vmaskmovps %ymm13,%ymm0,(%rbx,%rax,1)
    0.00 :   6c6c38:       vmaskmovps %ymm15,%ymm0,(%rbx,%rax,2)
    0.00 :   6c6c3e:       vzeroupper
    0.01 :   6c6c41:       mov    %r8d,%eax
    0.00 :   6c6c44:       pop    %r15
    0.02 :   6c6c46:       pop    %rbx
    0.00 :   6c6c47:       pop    %rbp
    0.01 :   6c6c48:       retq
    0.00 :   6c6c49:       cmp    $0x8,%r9
    0.00 :   6c6c4d:       jbe    6c6d47 <MlasGemmFloatKernelFma3+0x1067>
    0.00 :   6c6c53:       mov    %rcx,%rbp
    0.00 :   6c6c56:       sub    $0x4,%rbp
    0.00 :   6c6c5a:       jb     6c6ccf <MlasGemmFloatKernelFma3+0xfef>
    0.00 :   6c6c5c:       prefetcht0 0x100(%rsi)
    0.00 :   6c6c63:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6c68:       vfmadd231ps (%rsi),%ymm3,%ymm4
    0.00 :   6c6c6d:       vfmadd231ps 0x20(%rsi),%ymm3,%ymm5
    0.00 :   6c6c73:       prefetcht0 0x140(%rsi)
    0.00 :   6c6c7a:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c6c80:       vfmadd231ps 0x40(%rsi),%ymm3,%ymm4
    0.00 :   6c6c86:       vfmadd231ps 0x60(%rsi),%ymm3,%ymm5
    0.00 :   6c6c8c:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6c90:       prefetcht0 0x100(%rsi)
    0.00 :   6c6c97:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c6c9d:       vfmadd231ps (%rsi),%ymm3,%ymm4
    0.00 :   6c6ca2:       vfmadd231ps 0x20(%rsi),%ymm3,%ymm5
    0.00 :   6c6ca8:       prefetcht0 0x140(%rsi)
    0.00 :   6c6caf:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c6cb5:       vfmadd231ps 0x40(%rsi),%ymm3,%ymm4
    0.00 :   6c6cbb:       vfmadd231ps 0x60(%rsi),%ymm3,%ymm5
    0.00 :   6c6cc1:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6cc5:       add    $0x10,%rdi
    0.00 :   6c6cc9:       sub    $0x4,%rbp
    0.00 :   6c6ccd:       jae    6c6c5c <MlasGemmFloatKernelFma3+0xf7c>
    0.00 :   6c6ccf:       add    $0x4,%rbp
    0.00 :   6c6cd3:       je     6c6cf2 <MlasGemmFloatKernelFma3+0x1012>
    0.00 :   6c6cd5:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6cda:       vfmadd231ps (%rsi),%ymm3,%ymm4
    0.00 :   6c6cdf:       vfmadd231ps 0x20(%rsi),%ymm3,%ymm5
    0.00 :   6c6ce5:       add    $0x40,%rsi
    0.00 :   6c6ce9:       add    $0x4,%rdi
    0.00 :   6c6ced:       dec    %rbp
    0.00 :   6c6cf0:       jne    6c6cd5 <MlasGemmFloatKernelFma3+0xff5>
    0.00 :   6c6cf2:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6cf9:       prefetcht0 0x40(%rdx)
    0.00 :   6c6cfd:       sub    $0x10,%r9
    0.00 :   6c6d01:       jb     6c6dee <MlasGemmFloatKernelFma3+0x110e>
    0.00 :   6c6d07:       test   %r15b,%r15b
    0.00 :   6c6d0a:       jne    6c6d19 <MlasGemmFloatKernelFma3+0x1039>
    0.00 :   6c6d0c:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6d11:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c6d17:       jmp    6c6d21 <MlasGemmFloatKernelFma3+0x1041>
    0.00 :   6c6d19:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6d1d:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6d21:       vmovups %ymm4,(%rdx)
    0.00 :   6c6d25:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c6d2a:       add    $0x40,%rdx
    0.00 :   6c6d2e:       mov    %r11,%rdi
    0.00 :   6c6d31:       vzeroall
    0.00 :   6c6d34:       cmp    $0x8,%r9
    0.00 :   6c6d38:       ja     6c6c53 <MlasGemmFloatKernelFma3+0xf73>
    0.00 :   6c6d3e:       test   %r9,%r9
    0.00 :   6c6d41:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c6d47:       mov    %rcx,%rbp
    0.00 :   6c6d4a:       sub    $0x4,%rbp
    0.00 :   6c6d4e:       jb     6c6dab <MlasGemmFloatKernelFma3+0x10cb>
    0.00 :   6c6d50:       prefetcht0 0x100(%rsi)
    0.00 :   6c6d57:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6d5c:       vfmadd231ps (%rsi),%ymm3,%ymm5
    0.00 :   6c6d61:       prefetcht0 0x140(%rsi)
    0.00 :   6c6d68:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c6d6e:       vfmadd231ps 0x40(%rsi),%ymm3,%ymm5
    0.00 :   6c6d74:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6d78:       prefetcht0 0x100(%rsi)
    0.00 :   6c6d7f:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c6d85:       vfmadd231ps (%rsi),%ymm3,%ymm5
    0.00 :   6c6d8a:       prefetcht0 0x140(%rsi)
    0.00 :   6c6d91:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c6d97:       vfmadd231ps 0x40(%rsi),%ymm3,%ymm5
    0.00 :   6c6d9d:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6da1:       add    $0x10,%rdi
    0.00 :   6c6da5:       sub    $0x4,%rbp
    0.00 :   6c6da9:       jae    6c6d50 <MlasGemmFloatKernelFma3+0x1070>
    0.00 :   6c6dab:       add    $0x4,%rbp
    0.00 :   6c6daf:       je     6c6dc8 <MlasGemmFloatKernelFma3+0x10e8>
    0.00 :   6c6db1:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6db6:       vfmadd231ps (%rsi),%ymm3,%ymm5
    0.00 :   6c6dbb:       add    $0x40,%rsi
    0.00 :   6c6dbf:       add    $0x4,%rdi
    0.00 :   6c6dc3:       dec    %rbp
    0.00 :   6c6dc6:       jne    6c6db1 <MlasGemmFloatKernelFma3+0x10d1>
    0.00 :   6c6dc8:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6dcf:       cmp    $0x8,%r9
    0.00 :   6c6dd3:       jb     6c6e0a <MlasGemmFloatKernelFma3+0x112a>
    0.00 :   6c6dd5:       test   %r15b,%r15b
    0.00 :   6c6dd8:       jne    6c6de1 <MlasGemmFloatKernelFma3+0x1101>
    0.00 :   6c6dda:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c6ddf:       jmp    6c6de5 <MlasGemmFloatKernelFma3+0x1105>
    0.00 :   6c6de1:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6de5:       vmovups %ymm5,(%rdx)
    0.00 :   6c6de9:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c6dee:       test   %r15b,%r15b
    0.00 :   6c6df1:       jne    6c6dfa <MlasGemmFloatKernelFma3+0x111a>
    0.00 :   6c6df3:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6df8:       jmp    6c6dfe <MlasGemmFloatKernelFma3+0x111e>
    0.00 :   6c6dfa:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c6dfe:       vmovups %ymm4,(%rdx)
    0.00 :   6c6e02:       add    $0x20,%rdx
    0.00 :   6c6e06:       add    $0x8,%r9
    0.00 :   6c6e0a:       mov    %r9,-0x8(%rsp)
    0.00 :   6c6e0f:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c6e16:       vpcmpgtd 0x1e0602(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c6e1e:       test   %r15b,%r15b
    0.00 :   6c6e21:       jne    6c6e2f <MlasGemmFloatKernelFma3+0x114f>
    0.00 :   6c6e23:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c6e28:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c6e2d:       jmp    6c6e33 <MlasGemmFloatKernelFma3+0x1153>
    0.00 :   6c6e2f:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c6e33:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c6e38:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c6e3d:       cmp    $0x8,%r9
    0.00 :   6c6e41:       jbe    6c705b <MlasGemmFloatKernelFma3+0x137b>
    0.00 :   6c6e47:       mov    %rcx,%rbp
    0.00 :   6c6e4a:       sub    $0x4,%rbp
    0.00 :   6c6e4e:       jb     6c6f71 <MlasGemmFloatKernelFma3+0x1291>
    0.00 :   6c6e54:       prefetcht0 0x100(%rsi)
    0.00 :   6c6e5b:       vmovaps (%rsi),%ymm0
    0.00 :   6c6e5f:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c6e64:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6e69:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6e6e:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6e73:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6e79:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6e7e:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6e83:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6e89:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6e8e:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6e93:       prefetcht0 0x140(%rsi)
    0.00 :   6c6e9a:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c6e9f:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c6ea4:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c6eaa:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6eaf:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6eb4:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c6ebb:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6ec0:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6ec5:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c6ecc:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6ed1:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6ed6:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6eda:       prefetcht0 0x100(%rsi)
    0.00 :   6c6ee1:       vmovaps (%rsi),%ymm0
    0.00 :   6c6ee5:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c6eea:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c6ef0:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6ef5:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6efa:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c6f01:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6f06:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6f0b:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c6f12:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6f17:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6f1c:       prefetcht0 0x140(%rsi)
    0.00 :   6c6f23:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c6f28:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c6f2d:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c6f33:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6f38:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6f3d:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c6f44:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6f49:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6f4e:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c6f55:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6f5a:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6f5f:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c6f63:       add    $0x10,%rdi
    0.00 :   6c6f67:       sub    $0x4,%rbp
    0.00 :   6c6f6b:       jae    6c6e54 <MlasGemmFloatKernelFma3+0x1174>
    0.00 :   6c6f71:       add    $0x4,%rbp
    0.00 :   6c6f75:       je     6c6fbc <MlasGemmFloatKernelFma3+0x12dc>
    0.00 :   6c6f77:       vmovaps (%rsi),%ymm0
    0.00 :   6c6f7b:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c6f80:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c6f85:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c6f8a:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c6f8f:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c6f95:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c6f9a:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c6f9f:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c6fa5:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c6faa:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c6faf:       add    $0x40,%rsi
    0.00 :   6c6fb3:       add    $0x4,%rdi
    0.00 :   6c6fb7:       dec    %rbp
    0.00 :   6c6fba:       jne    6c6f77 <MlasGemmFloatKernelFma3+0x1297>
    0.00 :   6c6fbc:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c6fc3:       prefetcht0 0x40(%rdx)
    0.00 :   6c6fc7:       prefetcht0 0x40(%rdx,%rax,1)
    0.00 :   6c6fcc:       prefetcht0 0x40(%rdx,%rax,2)
    0.00 :   6c6fd1:       sub    $0x10,%r9
    0.00 :   6c6fd5:       jb     6c71b0 <MlasGemmFloatKernelFma3+0x14d0>
    0.00 :   6c6fdb:       test   %r15b,%r15b
    0.00 :   6c6fde:       jne    6c7007 <MlasGemmFloatKernelFma3+0x1327>
    0.00 :   6c6fe0:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c6fe5:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c6feb:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c6ff1:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c6ff8:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c6ffe:       vfmadd213ps 0x20(%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c7005:       jmp    6c701f <MlasGemmFloatKernelFma3+0x133f>
    0.00 :   6c7007:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c700b:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c700f:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c7013:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c7017:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c701b:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c701f:       vmovups %ymm4,(%rdx)
    0.00 :   6c7023:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c7028:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c702d:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.00 :   6c7033:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c7038:       vmovups %ymm9,0x20(%rdx,%rax,2)
    0.00 :   6c703e:       add    $0x40,%rdx
    0.00 :   6c7042:       mov    %r11,%rdi
    0.00 :   6c7045:       vzeroall
    0.00 :   6c7048:       cmp    $0x8,%r9
    0.00 :   6c704c:       ja     6c6e47 <MlasGemmFloatKernelFma3+0x1167>
    0.00 :   6c7052:       test   %r9,%r9
    0.00 :   6c7055:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c705b:       mov    %rcx,%rbp
    0.00 :   6c705e:       sub    $0x4,%rbp
    0.00 :   6c7062:       jb     6c7135 <MlasGemmFloatKernelFma3+0x1455>
    0.00 :   6c7068:       prefetcht0 0x100(%rsi)
    0.00 :   6c706f:       vmovaps (%rsi),%ymm0
    0.00 :   6c7073:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c7078:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c707d:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c7083:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7088:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c708e:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c7093:       prefetcht0 0x140(%rsi)
    0.00 :   6c709a:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c709f:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c70a5:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c70aa:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c70b1:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c70b6:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c70bd:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c70c2:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c70c6:       prefetcht0 0x100(%rsi)
    0.00 :   6c70cd:       vmovaps (%rsi),%ymm0
    0.00 :   6c70d1:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c70d7:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c70dc:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c70e3:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c70e8:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c70ef:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c70f4:       prefetcht0 0x140(%rsi)
    0.00 :   6c70fb:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c7100:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c7106:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c710b:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c7112:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7117:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c711e:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c7123:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c7127:       add    $0x10,%rdi
    0.00 :   6c712b:       sub    $0x4,%rbp
    0.00 :   6c712f:       jae    6c7068 <MlasGemmFloatKernelFma3+0x1388>
    0.00 :   6c7135:       add    $0x4,%rbp
    0.00 :   6c7139:       je     6c716c <MlasGemmFloatKernelFma3+0x148c>
    0.00 :   6c713b:       vmovaps (%rsi),%ymm0
    0.00 :   6c713f:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c7144:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c7149:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c714f:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7154:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c715a:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c715f:       add    $0x40,%rsi
    0.00 :   6c7163:       add    $0x4,%rdi
    0.00 :   6c7167:       dec    %rbp
    0.00 :   6c716a:       jne    6c713b <MlasGemmFloatKernelFma3+0x145b>
    0.00 :   6c716c:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c7173:       cmp    $0x8,%r9
    0.00 :   6c7177:       jb     6c71ea <MlasGemmFloatKernelFma3+0x150a>
    0.00 :   6c7179:       test   %r15b,%r15b
    0.00 :   6c717c:       jne    6c7191 <MlasGemmFloatKernelFma3+0x14b1>
    0.00 :   6c717e:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c7183:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c7189:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c718f:       jmp    6c719d <MlasGemmFloatKernelFma3+0x14bd>
    0.00 :   6c7191:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c7195:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c7199:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c719d:       vmovups %ymm5,(%rdx)
    0.00 :   6c71a1:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c71a6:       vmovups %ymm9,(%rdx,%rax,2)
    0.00 :   6c71ab:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c71b0:       test   %r15b,%r15b
    0.00 :   6c71b3:       jne    6c71c8 <MlasGemmFloatKernelFma3+0x14e8>
    0.00 :   6c71b5:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c71ba:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c71c0:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c71c6:       jmp    6c71d4 <MlasGemmFloatKernelFma3+0x14f4>
    0.00 :   6c71c8:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c71cc:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c71d0:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c71d4:       vmovups %ymm4,(%rdx)
    0.00 :   6c71d8:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c71dd:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c71e2:       add    $0x20,%rdx
    0.00 :   6c71e6:       add    $0x8,%r9
    0.00 :   6c71ea:       mov    %r9,-0x8(%rsp)
    0.00 :   6c71ef:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c71f6:       vpcmpgtd 0x1e0222(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c71fe:       test   %r15b,%r15b
    0.00 :   6c7201:       jne    6c7225 <MlasGemmFloatKernelFma3+0x1545>
    0.00 :   6c7203:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c7208:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c720e:       vmaskmovps (%rdx,%rax,2),%ymm0,%ymm8
    0.00 :   6c7214:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c7219:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c721e:       vfmadd213ps %ymm8,%ymm2,%ymm9
    0.00 :   6c7223:       jmp    6c7231 <MlasGemmFloatKernelFma3+0x1551>
    0.00 :   6c7225:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c7229:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c722d:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c7231:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c7236:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c723c:       vmaskmovps %ymm9,%ymm0,(%rdx,%rax,2)
    0.00 :   6c7242:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c7247:       cmp    $0x8,%r9
    0.00 :   6c724b:       jbe    6c7561 <MlasGemmFloatKernelFma3+0x1881>
    0.00 :   6c7251:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c7255:       add    %rdi,%rbx
    0.00 :   6c7258:       mov    %rcx,%rbp
    0.00 :   6c725b:       sub    $0x4,%rbp
    0.00 :   6c725f:       jb     6c7408 <MlasGemmFloatKernelFma3+0x1728>
    0.00 :   6c7265:       prefetcht0 0x100(%rsi)
    0.00 :   6c726c:       vmovaps (%rsi),%ymm0
    0.00 :   6c7270:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c7275:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c727a:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c727f:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c7284:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c728a:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c728f:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c7294:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c729a:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c729f:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c72a4:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c72a9:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c72ae:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c72b3:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c72b9:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c72be:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c72c3:       prefetcht0 0x140(%rsi)
    0.00 :   6c72ca:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c72cf:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c72d4:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c72da:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c72df:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c72e4:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c72eb:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c72f0:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c72f5:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c72fc:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c7301:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c7306:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c730c:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c7311:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c7316:       vbroadcastss 0x4(%rbx,%r10,1),%ymm3
    0.00 :   6c731d:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c7322:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c7327:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c732b:       prefetcht0 0x100(%rsi)
    0.00 :   6c7332:       vmovaps (%rsi),%ymm0
    0.00 :   6c7336:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c733b:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c7341:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c7346:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c734b:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c7352:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c7357:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c735c:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c7363:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c7368:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c736d:       vbroadcastss 0x8(%rbx),%ymm3
    0.00 :   6c7373:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c7378:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c737d:       vbroadcastss 0x8(%rbx,%r10,1),%ymm3
    0.00 :   6c7384:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c7389:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c738e:       prefetcht0 0x140(%rsi)
    0.00 :   6c7395:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c739a:       vmovaps 0x60(%rsi),%ymm1
    0.00 :   6c739f:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c73a5:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c73aa:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c73af:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c73b6:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c73bb:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c73c0:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c73c7:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c73cc:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c73d1:       vbroadcastss 0xc(%rbx),%ymm3
    0.00 :   6c73d7:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c73dc:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c73e1:       vbroadcastss 0xc(%rbx,%r10,1),%ymm3
    0.00 :   6c73e8:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c73ed:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c73f2:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c73f6:       add    $0x10,%rdi
    0.00 :   6c73fa:       add    $0x10,%rbx
    0.00 :   6c73fe:       sub    $0x4,%rbp
    0.00 :   6c7402:       jae    6c7265 <MlasGemmFloatKernelFma3+0x1585>
    0.00 :   6c7408:       add    $0x4,%rbp
    0.00 :   6c740c:       je     6c7476 <MlasGemmFloatKernelFma3+0x1796>
    0.00 :   6c740e:       vmovaps (%rsi),%ymm0
    0.00 :   6c7412:       vmovaps 0x20(%rsi),%ymm1
    0.00 :   6c7417:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c741c:       vfmadd231ps %ymm0,%ymm3,%ymm4
    0.00 :   6c7421:       vfmadd231ps %ymm1,%ymm3,%ymm5
    0.00 :   6c7426:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c742c:       vfmadd231ps %ymm0,%ymm3,%ymm6
    0.00 :   6c7431:       vfmadd231ps %ymm1,%ymm3,%ymm7
    0.00 :   6c7436:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c743c:       vfmadd231ps %ymm0,%ymm3,%ymm8
    0.00 :   6c7441:       vfmadd231ps %ymm1,%ymm3,%ymm9
    0.00 :   6c7446:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c744b:       vfmadd231ps %ymm0,%ymm3,%ymm10
    0.00 :   6c7450:       vfmadd231ps %ymm1,%ymm3,%ymm11
    0.00 :   6c7455:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c745b:       vfmadd231ps %ymm0,%ymm3,%ymm12
    0.00 :   6c7460:       vfmadd231ps %ymm1,%ymm3,%ymm13
    0.00 :   6c7465:       add    $0x40,%rsi
    0.00 :   6c7469:       add    $0x4,%rdi
    0.00 :   6c746d:       add    $0x4,%rbx
    0.00 :   6c7471:       dec    %rbp
    0.00 :   6c7474:       jne    6c740e <MlasGemmFloatKernelFma3+0x172e>
    0.00 :   6c7476:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c747d:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c7481:       add    %rdx,%rbx
    0.00 :   6c7484:       prefetcht0 0x40(%rdx)
    0.00 :   6c7488:       prefetcht0 0x40(%rdx,%rax,1)
    0.00 :   6c748d:       prefetcht0 0x40(%rdx,%rax,2)
    0.00 :   6c7492:       prefetcht0 0x40(%rbx)
    0.00 :   6c7496:       prefetcht0 0x40(%rbx,%rax,1)
    0.00 :   6c749b:       sub    $0x10,%r9
    0.00 :   6c749f:       jb     6c775b <MlasGemmFloatKernelFma3+0x1a7b>
    0.00 :   6c74a5:       test   %r15b,%r15b
    0.00 :   6c74a8:       jne    6c74e9 <MlasGemmFloatKernelFma3+0x1809>
    0.00 :   6c74aa:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c74af:       vfmadd213ps 0x20(%rdx),%ymm2,%ymm5
    0.00 :   6c74b5:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c74bb:       vfmadd213ps 0x20(%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c74c2:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c74c8:       vfmadd213ps 0x20(%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c74cf:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c74d4:       vfmadd213ps 0x20(%rbx),%ymm2,%ymm11
    0.00 :   6c74da:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm12
    0.00 :   6c74e0:       vfmadd213ps 0x20(%rbx,%rax,1),%ymm2,%ymm13
    0.00 :   6c74e7:       jmp    6c7511 <MlasGemmFloatKernelFma3+0x1831>
    0.00 :   6c74e9:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c74ed:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c74f1:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c74f5:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c74f9:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c74fd:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c7501:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c7505:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c7509:       vmulps %ymm2,%ymm12,%ymm12
    0.00 :   6c750d:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c7511:       vmovups %ymm4,(%rdx)
    0.00 :   6c7515:       vmovups %ymm5,0x20(%rdx)
    0.00 :   6c751a:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c751f:       vmovups %ymm7,0x20(%rdx,%rax,1)
    0.00 :   6c7525:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c752a:       vmovups %ymm9,0x20(%rdx,%rax,2)
    0.00 :   6c7530:       vmovups %ymm10,(%rbx)
    0.00 :   6c7534:       vmovups %ymm11,0x20(%rbx)
    0.00 :   6c7539:       vmovups %ymm12,(%rbx,%rax,1)
    0.00 :   6c753e:       vmovups %ymm13,0x20(%rbx,%rax,1)
    0.00 :   6c7544:       add    $0x40,%rdx
    0.00 :   6c7548:       mov    %r11,%rdi
    0.00 :   6c754b:       vzeroall
    0.00 :   6c754e:       cmp    $0x8,%r9
    0.00 :   6c7552:       ja     6c7251 <MlasGemmFloatKernelFma3+0x1571>
    0.00 :   6c7558:       test   %r9,%r9
    0.00 :   6c755b:       je     6c6c41 <MlasGemmFloatKernelFma3+0xf61>
    0.00 :   6c7561:       lea    (%r10,%r10,2),%rbx
    0.00 :   6c7565:       add    %rdi,%rbx
    0.00 :   6c7568:       mov    %rcx,%rbp
    0.00 :   6c756b:       sub    $0x4,%rbp
    0.00 :   6c756f:       jb     6c76a0 <MlasGemmFloatKernelFma3+0x19c0>
    0.00 :   6c7575:       prefetcht0 0x100(%rsi)
    0.00 :   6c757c:       vmovaps (%rsi),%ymm0
    0.00 :   6c7580:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c7585:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c758a:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c7590:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7595:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c759b:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c75a0:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c75a5:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c75aa:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c75b0:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c75b5:       prefetcht0 0x140(%rsi)
    0.00 :   6c75bc:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c75c1:       vbroadcastss 0x4(%rdi),%ymm3
    0.00 :   6c75c7:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c75cc:       vbroadcastss 0x4(%rdi,%r10,1),%ymm3
    0.00 :   6c75d3:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c75d8:       vbroadcastss 0x4(%rdi,%r10,2),%ymm3
    0.00 :   6c75df:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c75e4:       vbroadcastss 0x4(%rbx),%ymm3
    0.00 :   6c75ea:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c75ef:       vbroadcastss 0x4(%rbx,%r10,1),%ymm3
    0.00 :   6c75f6:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c75fb:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c75ff:       prefetcht0 0x100(%rsi)
    0.00 :   6c7606:       vmovaps (%rsi),%ymm0
    0.00 :   6c760a:       vbroadcastss 0x8(%rdi),%ymm3
    0.00 :   6c7610:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c7615:       vbroadcastss 0x8(%rdi,%r10,1),%ymm3
    0.00 :   6c761c:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7621:       vbroadcastss 0x8(%rdi,%r10,2),%ymm3
    0.00 :   6c7628:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c762d:       vbroadcastss 0x8(%rbx),%ymm3
    0.00 :   6c7633:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c7638:       vbroadcastss 0x8(%rbx,%r10,1),%ymm3
    0.00 :   6c763f:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c7644:       prefetcht0 0x140(%rsi)
    0.00 :   6c764b:       vmovaps 0x40(%rsi),%ymm0
    0.00 :   6c7650:       vbroadcastss 0xc(%rdi),%ymm3
    0.00 :   6c7656:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c765b:       vbroadcastss 0xc(%rdi,%r10,1),%ymm3
    0.00 :   6c7662:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c7667:       vbroadcastss 0xc(%rdi,%r10,2),%ymm3
    0.00 :   6c766e:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c7673:       vbroadcastss 0xc(%rbx),%ymm3
    0.00 :   6c7679:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c767e:       vbroadcastss 0xc(%rbx,%r10,1),%ymm3
    0.00 :   6c7685:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c768a:       sub    $0xffffffffffffff80,%rsi
    0.00 :   6c768e:       add    $0x10,%rdi
    0.00 :   6c7692:       add    $0x10,%rbx
    0.00 :   6c7696:       sub    $0x4,%rbp
    0.00 :   6c769a:       jae    6c7575 <MlasGemmFloatKernelFma3+0x1895>
    0.00 :   6c76a0:       add    $0x4,%rbp
    0.00 :   6c76a4:       je     6c76f0 <MlasGemmFloatKernelFma3+0x1a10>
    0.00 :   6c76a6:       vmovaps (%rsi),%ymm0
    0.00 :   6c76aa:       vbroadcastss (%rdi),%ymm3
    0.00 :   6c76af:       vfmadd231ps %ymm0,%ymm3,%ymm5
    0.00 :   6c76b4:       vbroadcastss (%rdi,%r10,1),%ymm3
    0.00 :   6c76ba:       vfmadd231ps %ymm0,%ymm3,%ymm7
    0.00 :   6c76bf:       vbroadcastss (%rdi,%r10,2),%ymm3
    0.00 :   6c76c5:       vfmadd231ps %ymm0,%ymm3,%ymm9
    0.00 :   6c76ca:       vbroadcastss (%rbx),%ymm3
    0.00 :   6c76cf:       vfmadd231ps %ymm0,%ymm3,%ymm11
    0.00 :   6c76d4:       vbroadcastss (%rbx,%r10,1),%ymm3
    0.00 :   6c76da:       vfmadd231ps %ymm0,%ymm3,%ymm13
    0.00 :   6c76df:       add    $0x40,%rsi
    0.00 :   6c76e3:       add    $0x4,%rdi
    0.00 :   6c76e7:       add    $0x4,%rbx
    0.00 :   6c76eb:       dec    %rbp
    0.00 :   6c76ee:       jne    6c76a6 <MlasGemmFloatKernelFma3+0x19c6>
    0.00 :   6c76f0:       vbroadcastss -0x10(%rsp),%ymm2
    0.00 :   6c76f7:       lea    (%rax,%rax,2),%rbx
    0.00 :   6c76fb:       add    %rdx,%rbx
    0.00 :   6c76fe:       cmp    $0x8,%r9
    0.00 :   6c7702:       jb     6c77b5 <MlasGemmFloatKernelFma3+0x1ad5>
    0.00 :   6c7708:       test   %r15b,%r15b
    0.00 :   6c770b:       jne    6c772b <MlasGemmFloatKernelFma3+0x1a4b>
    0.00 :   6c770d:       vfmadd213ps (%rdx),%ymm2,%ymm5
    0.00 :   6c7712:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm7
    0.00 :   6c7718:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm9
    0.00 :   6c771e:       vfmadd213ps (%rbx),%ymm2,%ymm11
    0.00 :   6c7723:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm13
    0.00 :   6c7729:       jmp    6c773f <MlasGemmFloatKernelFma3+0x1a5f>
    0.00 :   6c772b:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c772f:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c7733:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c7737:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c773b:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c773f:       vmovups %ymm5,(%rdx)
    0.00 :   6c7743:       vmovups %ymm7,(%rdx,%rax,1)
    0.00 :   6c7748:       vmovups %ymm9,(%rdx,%rax,2)
    0.00 :   6c774d:       vmovups %ymm11,(%rbx)
    0.00 :   6c7751:       vmovups %ymm13,(%rbx,%rax,1)
    0.00 :   6c7756:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
    0.00 :   6c775b:       test   %r15b,%r15b
    0.00 :   6c775e:       jne    6c777e <MlasGemmFloatKernelFma3+0x1a9e>
    0.00 :   6c7760:       vfmadd213ps (%rdx),%ymm2,%ymm4
    0.00 :   6c7765:       vfmadd213ps (%rdx,%rax,1),%ymm2,%ymm6
    0.00 :   6c776b:       vfmadd213ps (%rdx,%rax,2),%ymm2,%ymm8
    0.00 :   6c7771:       vfmadd213ps (%rbx),%ymm2,%ymm10
    0.00 :   6c7776:       vfmadd213ps (%rbx,%rax,1),%ymm2,%ymm12
    0.00 :   6c777c:       jmp    6c7792 <MlasGemmFloatKernelFma3+0x1ab2>
    0.00 :   6c777e:       vmulps %ymm2,%ymm4,%ymm4
    0.00 :   6c7782:       vmulps %ymm2,%ymm6,%ymm6
    0.00 :   6c7786:       vmulps %ymm2,%ymm8,%ymm8
    0.00 :   6c778a:       vmulps %ymm2,%ymm10,%ymm10
    0.00 :   6c778e:       vmulps %ymm2,%ymm12,%ymm12
    0.00 :   6c7792:       vmovups %ymm4,(%rdx)
    0.00 :   6c7796:       vmovups %ymm6,(%rdx,%rax,1)
    0.00 :   6c779b:       vmovups %ymm8,(%rdx,%rax,2)
    0.00 :   6c77a0:       vmovups %ymm10,(%rbx)
    0.00 :   6c77a4:       vmovups %ymm12,(%rbx,%rax,1)
    0.00 :   6c77a9:       add    $0x20,%rdx
    0.00 :   6c77ad:       add    $0x20,%rbx
    0.00 :   6c77b1:       add    $0x8,%r9
    0.00 :   6c77b5:       mov    %r9,-0x8(%rsp)
    0.00 :   6c77ba:       vbroadcastss -0x8(%rsp),%ymm0
    0.00 :   6c77c1:       vpcmpgtd 0x1dfc57(%rip),%ymm0,%ymm0        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6c77c9:       test   %r15b,%r15b
    0.00 :   6c77cc:       jne    6c7805 <MlasGemmFloatKernelFma3+0x1b25>
    0.00 :   6c77ce:       vmaskmovps (%rdx),%ymm0,%ymm4
    0.00 :   6c77d3:       vmaskmovps (%rdx,%rax,1),%ymm0,%ymm6
    0.00 :   6c77d9:       vmaskmovps (%rdx,%rax,2),%ymm0,%ymm8
    0.00 :   6c77df:       vmaskmovps (%rbx),%ymm0,%ymm10
    0.00 :   6c77e4:       vmaskmovps (%rbx,%rax,1),%ymm0,%ymm12
    0.00 :   6c77ea:       vfmadd213ps %ymm4,%ymm2,%ymm5
    0.00 :   6c77ef:       vfmadd213ps %ymm6,%ymm2,%ymm7
    0.00 :   6c77f4:       vfmadd213ps %ymm8,%ymm2,%ymm9
    0.00 :   6c77f9:       vfmadd213ps %ymm10,%ymm2,%ymm11
    0.00 :   6c77fe:       vfmadd213ps %ymm12,%ymm2,%ymm13
    0.00 :   6c7803:       jmp    6c7819 <MlasGemmFloatKernelFma3+0x1b39>
    0.00 :   6c7805:       vmulps %ymm2,%ymm5,%ymm5
    0.00 :   6c7809:       vmulps %ymm2,%ymm7,%ymm7
    0.00 :   6c780d:       vmulps %ymm2,%ymm9,%ymm9
    0.00 :   6c7811:       vmulps %ymm2,%ymm11,%ymm11
    0.00 :   6c7815:       vmulps %ymm2,%ymm13,%ymm13
    0.00 :   6c7819:       vmaskmovps %ymm5,%ymm0,(%rdx)
    0.00 :   6c781e:       vmaskmovps %ymm7,%ymm0,(%rdx,%rax,1)
    0.00 :   6c7824:       vmaskmovps %ymm9,%ymm0,(%rdx,%rax,2)
    0.00 :   6c782a:       vmaskmovps %ymm11,%ymm0,(%rbx)
    0.00 :   6c782f:       vmaskmovps %ymm13,%ymm0,(%rbx,%rax,1)
    0.00 :   6c7835:       jmpq   6c6c3e <MlasGemmFloatKernelFma3+0xf5e>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (2218 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000018ea10 <__nss_group_lookup@GLIBC_2.2.5+0x24d90>:
    1.05 :   18ea10:       mov    %rdi,%rax
    0.00 :   18ea13:       cmp    $0x20,%rdx
    0.00 :   18ea17:       jb     18ea62 <__nss_group_lookup@GLIBC_2.2.5+0x24de2>
    0.00 :   18ea19:       cmp    $0x40,%rdx
    0.00 :   18ea1d:       ja     18eac2 <__nss_group_lookup@GLIBC_2.2.5+0x24e42>
    0.06 :   18ea23:       vmovdqu (%rsi),%ymm0
    0.00 :   18ea27:       vmovdqu -0x20(%rsi,%rdx,1),%ymm1
    0.00 :   18ea2d:       vmovdqu %ymm0,(%rdi)
    0.00 :   18ea31:       vmovdqu %ymm1,-0x20(%rdi,%rdx,1)
    0.00 :   18ea37:       vzeroupper
    0.00 :   18ea3a:       retq
    0.00 :   18ea3b:       cmp    0x261d16(%rip),%rdx        # 3f0758 <mallwatch@@GLIBC_2.2.5+0x8>
    0.00 :   18ea42:       jae    18eb6d <__nss_group_lookup@GLIBC_2.2.5+0x24eed>
    0.00 :   18ea48:       cmp    %rsi,%rdi
    0.00 :   18ea4b:       jb     18ea5c <__nss_group_lookup@GLIBC_2.2.5+0x24ddc>
    0.00 :   18ea4d:       je     18ea61 <__nss_group_lookup@GLIBC_2.2.5+0x24de1>
    0.00 :   18ea4f:       lea    (%rsi,%rdx,1),%r9
    0.00 :   18ea53:       cmp    %r9,%rdi
    0.00 :   18ea56:       jb     18ec21 <__nss_group_lookup@GLIBC_2.2.5+0x24fa1>
    0.00 :   18ea5c:       mov    %rdx,%rcx
   34.43 :   18ea5f:       rep movsb %ds:(%rsi),%es:(%rdi)
    0.00 :   18ea61:       retq
    0.00 :   18ea62:       cmp    $0x10,%dl
    0.00 :   18ea65:       jae    18ea7e <__nss_group_lookup@GLIBC_2.2.5+0x24dfe>
    0.00 :   18ea67:       cmp    $0x8,%dl
    0.00 :   18ea6a:       jae    18ea93 <__nss_group_lookup@GLIBC_2.2.5+0x24e13>
    0.00 :   18ea6c:       cmp    $0x4,%dl
    0.00 :   18ea6f:       jae    18eaa4 <__nss_group_lookup@GLIBC_2.2.5+0x24e24>
    0.00 :   18ea71:       cmp    $0x1,%dl
    0.00 :   18ea74:       ja     18eab1 <__nss_group_lookup@GLIBC_2.2.5+0x24e31>
    0.00 :   18ea76:       jb     18ea7d <__nss_group_lookup@GLIBC_2.2.5+0x24dfd>
    0.00 :   18ea78:       movzbl (%rsi),%ecx
    0.00 :   18ea7b:       mov    %cl,(%rdi)
    0.00 :   18ea7d:       retq
    0.00 :   18ea7e:       vmovdqu (%rsi),%xmm0
    0.03 :   18ea82:       vmovdqu -0x10(%rsi,%rdx,1),%xmm1
    0.00 :   18ea88:       vmovdqu %xmm0,(%rdi)
    0.00 :   18ea8c:       vmovdqu %xmm1,-0x10(%rdi,%rdx,1)
    0.00 :   18ea92:       retq
    0.00 :   18ea93:       mov    -0x8(%rsi,%rdx,1),%rcx
    0.00 :   18ea98:       mov    (%rsi),%rsi
    0.00 :   18ea9b:       mov    %rcx,-0x8(%rdi,%rdx,1)
    0.00 :   18eaa0:       mov    %rsi,(%rdi)
    0.00 :   18eaa3:       retq
    0.00 :   18eaa4:       mov    -0x4(%rsi,%rdx,1),%ecx
    0.00 :   18eaa8:       mov    (%rsi),%esi
    0.00 :   18eaaa:       mov    %ecx,-0x4(%rdi,%rdx,1)
    0.00 :   18eaae:       mov    %esi,(%rdi)
    0.00 :   18eab0:       retq
    0.00 :   18eab1:       movzwl -0x2(%rsi,%rdx,1),%ecx
    0.00 :   18eab6:       movzwl (%rsi),%esi
    0.00 :   18eab9:       mov    %cx,-0x2(%rdi,%rdx,1)
    0.00 :   18eabe:       mov    %si,(%rdi)
    0.00 :   18eac1:       retq
    0.50 :   18eac2:       cmp    $0x1000,%rdx
    0.00 :   18eac9:       ja     18ea3b <__nss_group_lookup@GLIBC_2.2.5+0x24dbb>
    0.00 :   18eacf:       cmp    $0x100,%rdx
    0.00 :   18ead6:       ja     18eb6d <__nss_group_lookup@GLIBC_2.2.5+0x24eed>
    0.00 :   18eadc:       cmp    $0x80,%rdx
    0.00 :   18eae3:       jb     18eb3f <__nss_group_lookup@GLIBC_2.2.5+0x24ebf>
    0.00 :   18eae5:       vmovdqu (%rsi),%ymm0
    5.59 :   18eae9:       vmovdqu 0x20(%rsi),%ymm1
    0.62 :   18eaee:       vmovdqu 0x40(%rsi),%ymm2
    3.16 :   18eaf3:       vmovdqu 0x60(%rsi),%ymm3
    0.42 :   18eaf8:       vmovdqu -0x20(%rsi,%rdx,1),%ymm4
   11.93 :   18eafe:       vmovdqu -0x40(%rsi,%rdx,1),%ymm5
    0.78 :   18eb04:       vmovdqu -0x60(%rsi,%rdx,1),%ymm6
    3.76 :   18eb0a:       vmovdqu -0x80(%rsi,%rdx,1),%ymm7
    1.17 :   18eb10:       vmovdqu %ymm0,(%rdi)
    0.88 :   18eb14:       vmovdqu %ymm1,0x20(%rdi)
    0.18 :   18eb19:       vmovdqu %ymm2,0x40(%rdi)
    1.26 :   18eb1e:       vmovdqu %ymm3,0x60(%rdi)
    1.51 :   18eb23:       vmovdqu %ymm4,-0x20(%rdi,%rdx,1)
    0.98 :   18eb29:       vmovdqu %ymm5,-0x40(%rdi,%rdx,1)
    0.26 :   18eb2f:       vmovdqu %ymm6,-0x60(%rdi,%rdx,1)
    0.99 :   18eb35:       vmovdqu %ymm7,-0x80(%rdi,%rdx,1)
    0.34 :   18eb3b:       vzeroupper
    0.45 :   18eb3e:       retq
    0.00 :   18eb3f:       vmovdqu (%rsi),%ymm0
    0.00 :   18eb43:       vmovdqu 0x20(%rsi),%ymm1
    0.00 :   18eb48:       vmovdqu -0x20(%rsi,%rdx,1),%ymm2
    0.00 :   18eb4e:       vmovdqu -0x40(%rsi,%rdx,1),%ymm3
    0.00 :   18eb54:       vmovdqu %ymm0,(%rdi)
    0.00 :   18eb58:       vmovdqu %ymm1,0x20(%rdi)
    0.00 :   18eb5d:       vmovdqu %ymm2,-0x20(%rdi,%rdx,1)
    0.00 :   18eb63:       vmovdqu %ymm3,-0x40(%rdi,%rdx,1)
    0.00 :   18eb69:       vzeroupper
    0.00 :   18eb6c:       retq
    0.08 :   18eb6d:       cmp    %rsi,%rdi
    0.00 :   18eb70:       ja     18ec21 <__nss_group_lookup@GLIBC_2.2.5+0x24fa1>
    0.00 :   18eb76:       je     18ea61 <__nss_group_lookup@GLIBC_2.2.5+0x24de1>
    0.00 :   18eb7c:       vmovdqu (%rsi),%ymm4
    0.83 :   18eb80:       vmovdqu -0x20(%rsi,%rdx,1),%ymm5
    1.28 :   18eb86:       vmovdqu -0x40(%rsi,%rdx,1),%ymm6
    0.03 :   18eb8c:       vmovdqu -0x60(%rsi,%rdx,1),%ymm7
    0.38 :   18eb92:       vmovdqu -0x80(%rsi,%rdx,1),%ymm8
    0.00 :   18eb98:       mov    %rdi,%r11
    0.00 :   18eb9b:       lea    -0x20(%rdi,%rdx,1),%rcx
    0.00 :   18eba0:       mov    %rdi,%r8
    0.00 :   18eba3:       and    $0x1f,%r8
    0.00 :   18eba7:       sub    $0x20,%r8
    0.00 :   18ebab:       sub    %r8,%rsi
    0.00 :   18ebae:       sub    %r8,%rdi
    0.00 :   18ebb1:       add    %r8,%rdx
    0.00 :   18ebb4:       cmp    0x261b9d(%rip),%rdx        # 3f0758 <mallwatch@@GLIBC_2.2.5+0x8>
    0.00 :   18ebbb:       ja     18ecc8 <__nss_group_lookup@GLIBC_2.2.5+0x25048>
    0.00 :   18ebc1:       vmovdqu (%rsi),%ymm0
    0.33 :   18ebc5:       vmovdqu 0x20(%rsi),%ymm1
    2.35 :   18ebca:       vmovdqu 0x40(%rsi),%ymm2
    0.23 :   18ebcf:       vmovdqu 0x60(%rsi),%ymm3
    1.90 :   18ebd4:       add    $0x80,%rsi
    0.08 :   18ebdb:       sub    $0x80,%rdx
    0.03 :   18ebe2:       vmovdqa %ymm0,(%rdi)
    0.43 :   18ebe6:       vmovdqa %ymm1,0x20(%rdi)
    0.67 :   18ebeb:       vmovdqa %ymm2,0x40(%rdi)
    0.23 :   18ebf0:       vmovdqa %ymm3,0x60(%rdi)
    0.25 :   18ebf5:       add    $0x80,%rdi
    0.14 :   18ebfc:       cmp    $0x80,%rdx
    0.00 :   18ec03:       ja     18ebc1 <__nss_group_lookup@GLIBC_2.2.5+0x24f41>
    0.01 :   18ec05:       vmovdqu %ymm5,(%rcx)
    0.00 :   18ec09:       vmovdqu %ymm6,-0x20(%rcx)
    0.00 :   18ec0e:       vmovdqu %ymm7,-0x40(%rcx)
    0.01 :   18ec13:       vmovdqu %ymm8,-0x60(%rcx)
    0.00 :   18ec18:       vmovdqu %ymm4,(%r11)
    0.03 :   18ec1d:       vzeroupper
    0.01 :   18ec20:       retq
    0.00 :   18ec21:       vmovdqu (%rsi),%ymm4
    0.85 :   18ec25:       vmovdqu 0x20(%rsi),%ymm5
    0.06 :   18ec2a:       vmovdqu 0x40(%rsi),%ymm6
    0.41 :   18ec2f:       vmovdqu 0x60(%rsi),%ymm7
    0.00 :   18ec34:       vmovdqu -0x20(%rsi,%rdx,1),%ymm8
    1.04 :   18ec3a:       lea    -0x20(%rdi,%rdx,1),%r11
    0.00 :   18ec3f:       lea    -0x20(%rsi,%rdx,1),%rcx
    0.00 :   18ec44:       mov    %r11,%r9
    0.00 :   18ec47:       mov    %r11,%r8
    0.00 :   18ec4a:       and    $0x1f,%r8
    0.00 :   18ec4e:       sub    %r8,%rcx
    0.00 :   18ec51:       sub    %r8,%r9
    0.00 :   18ec54:       sub    %r8,%rdx
    0.00 :   18ec57:       cmp    0x261afa(%rip),%rdx        # 3f0758 <mallwatch@@GLIBC_2.2.5+0x8>
    0.00 :   18ec5e:       ja     18ed54 <__nss_group_lookup@GLIBC_2.2.5+0x250d4>
    0.03 :   18ec64:       vmovdqu (%rcx),%ymm0
    6.72 :   18ec68:       vmovdqu -0x20(%rcx),%ymm1
    0.69 :   18ec6d:       vmovdqu -0x40(%rcx),%ymm2
    6.41 :   18ec72:       vmovdqu -0x60(%rcx),%ymm3
    0.67 :   18ec77:       sub    $0x80,%rcx
    0.08 :   18ec7e:       sub    $0x80,%rdx
    0.08 :   18ec85:       vmovdqa %ymm0,(%r9)
    0.97 :   18ec8a:       vmovdqa %ymm1,-0x20(%r9)
    1.05 :   18ec90:       vmovdqa %ymm2,-0x40(%r9)
    0.46 :   18ec96:       vmovdqa %ymm3,-0x60(%r9)
    0.56 :   18ec9c:       sub    $0x80,%r9
    0.23 :   18eca3:       cmp    $0x80,%rdx
    0.00 :   18ecaa:       ja     18ec64 <__nss_group_lookup@GLIBC_2.2.5+0x24fe4>
    0.00 :   18ecac:       vmovdqu %ymm4,(%rdi)
    0.00 :   18ecb0:       vmovdqu %ymm5,0x20(%rdi)
    0.00 :   18ecb5:       vmovdqu %ymm6,0x40(%rdi)
    0.00 :   18ecba:       vmovdqu %ymm7,0x60(%rdi)
    0.00 :   18ecbf:       vmovdqu %ymm8,(%r11)
    0.00 :   18ecc4:       vzeroupper
    0.00 :   18ecc7:       retq
    0.00 :   18ecc8:       lea    (%rdi,%rdx,1),%r10
    0.00 :   18eccc:       cmp    %r10,%rsi
    0.00 :   18eccf:       jb     18ebc1 <__nss_group_lookup@GLIBC_2.2.5+0x24f41>
    0.00 :   18ecd5:       prefetcht0 0x100(%rsi)
    0.00 :   18ecdc:       prefetcht0 0x140(%rsi)
    0.00 :   18ece3:       prefetcht0 0x180(%rsi)
    0.00 :   18ecea:       prefetcht0 0x1c0(%rsi)
    0.00 :   18ecf1:       vmovdqu (%rsi),%ymm0
    0.00 :   18ecf5:       vmovdqu 0x20(%rsi),%ymm1
    0.00 :   18ecfa:       vmovdqu 0x40(%rsi),%ymm2
    0.00 :   18ecff:       vmovdqu 0x60(%rsi),%ymm3
    0.00 :   18ed04:       add    $0x80,%rsi
    0.00 :   18ed0b:       sub    $0x80,%rdx
    0.00 :   18ed12:       vmovntdq %ymm0,(%rdi)
    0.00 :   18ed16:       vmovntdq %ymm1,0x20(%rdi)
    0.00 :   18ed1b:       vmovntdq %ymm2,0x40(%rdi)
    0.00 :   18ed20:       vmovntdq %ymm3,0x60(%rdi)
    0.00 :   18ed25:       add    $0x80,%rdi
    0.00 :   18ed2c:       cmp    $0x80,%rdx
    0.00 :   18ed33:       ja     18ecd5 <__nss_group_lookup@GLIBC_2.2.5+0x25055>
    0.00 :   18ed35:       sfence
    0.00 :   18ed38:       vmovdqu %ymm5,(%rcx)
    0.00 :   18ed3c:       vmovdqu %ymm6,-0x20(%rcx)
    0.00 :   18ed41:       vmovdqu %ymm7,-0x40(%rcx)
    0.00 :   18ed46:       vmovdqu %ymm8,-0x60(%rcx)
    0.00 :   18ed4b:       vmovdqu %ymm4,(%r11)
    0.00 :   18ed50:       vzeroupper
    0.00 :   18ed53:       retq
    0.00 :   18ed54:       lea    (%rcx,%rdx,1),%r10
    0.00 :   18ed58:       cmp    %r10,%r9
    0.00 :   18ed5b:       jb     18ec64 <__nss_group_lookup@GLIBC_2.2.5+0x24fe4>
    0.00 :   18ed61:       prefetcht0 -0x100(%rcx)
    0.00 :   18ed68:       prefetcht0 -0x140(%rcx)
    0.00 :   18ed6f:       prefetcht0 -0x180(%rcx)
    0.00 :   18ed76:       prefetcht0 -0x1c0(%rcx)
    0.00 :   18ed7d:       vmovdqu (%rcx),%ymm0
    0.00 :   18ed81:       vmovdqu -0x20(%rcx),%ymm1
    0.00 :   18ed86:       vmovdqu -0x40(%rcx),%ymm2
    0.00 :   18ed8b:       vmovdqu -0x60(%rcx),%ymm3
    0.00 :   18ed90:       sub    $0x80,%rcx
    0.00 :   18ed97:       sub    $0x80,%rdx
    0.00 :   18ed9e:       vmovntdq %ymm0,(%r9)
    0.00 :   18eda3:       vmovntdq %ymm1,-0x20(%r9)
    0.00 :   18eda9:       vmovntdq %ymm2,-0x40(%r9)
    0.00 :   18edaf:       vmovntdq %ymm3,-0x60(%r9)
    0.00 :   18edb5:       sub    $0x80,%r9
    0.00 :   18edbc:       cmp    $0x80,%rdx
    0.00 :   18edc3:       ja     18ed61 <__nss_group_lookup@GLIBC_2.2.5+0x250e1>
    0.00 :   18edc5:       sfence
    0.00 :   18edc8:       vmovdqu %ymm4,(%rdi)
    0.00 :   18edcc:       vmovdqu %ymm5,0x20(%rdi)
    0.00 :   18edd1:       vmovdqu %ymm6,0x40(%rdi)
    0.00 :   18edd6:       vmovdqu %ymm7,0x60(%rdi)
    0.00 :   18eddb:       vmovdqu %ymm8,(%r11)
    0.00 :   18ede0:       vzeroupper
    0.00 :   18ede3:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1837 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000002a0440 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)>:
         :            _ZN11onnxruntimeL17GemmBroadcastBiasIfEEvllfPKT_PKNS_11TensorShapeEPS1_():
    0.00 :   2a0440:       push   %r14
    0.00 :   2a0442:       pxor   %xmm1,%xmm1
    0.00 :   2a0446:       push   %r13
    0.00 :   2a0448:       push   %r12
    0.00 :   2a044a:       push   %rbp
    0.00 :   2a044b:       mov    %rdx,%rbp
    0.00 :   2a044e:       mov    $0x1,%edx
    0.00 :   2a0453:       push   %rbx
    0.00 :   2a0454:       sub    $0xb0,%rsp
    0.00 :   2a045b:       mov    %fs:0x28,%rax
    0.00 :   2a0464:       mov    %rax,0xa8(%rsp)
    0.00 :   2a046c:       xor    %eax,%eax
    0.00 :   2a046e:       ucomiss %xmm1,%xmm0
    0.00 :   2a0471:       setp   %al
    0.00 :   2a0474:       cmovne %edx,%eax
    0.00 :   2a0477:       test   %al,%al
    0.00 :   2a0479:       je     2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a047f:       test   %rbp,%rbp
    0.00 :   2a0482:       je     2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a0488:       mov    %rcx,%r14
    0.00 :   2a048b:       test   %rcx,%rcx
    0.00 :   2a048e:       je     2a0704 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x2c4>
    0.00 :   2a0494:       mov    %rdi,%r12
    0.00 :   2a0497:       mov    %rcx,%rdi
    0.00 :   2a049a:       mov    %rsi,%r13
    0.00 :   2a049d:       mov    %r8,%rbx
    0.00 :   2a04a0:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   2a04a5:       cmp    $0x1,%rax
    0.00 :   2a04a9:       je     2a0638 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1f8>
    0.00 :   2a04af:       mov    (%r14),%rdx
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2a04b2:       mov    0x8(%r14),%rax
    0.00 :   2a04b6:       sub    %rdx,%rax
    0.00 :   2a04b9:       cmp    $0x8,%rax
    0.00 :   2a04bd:       je     2a05e8 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1a8>
    0.00 :   2a04c3:       cmpq   $0x1,(%rdx)
    0.00 :   2a04c7:       je     2a05e8 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1a8>
    0.00 :   2a04cd:       cmpq   $0x1,0x8(%rdx)
    0.00 :   2a04d2:       je     2a0590 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x150>
    0.00 :   2a04d8:       imul   %r13,%r12
    0.00 :   2a04dc:       test   $0x3,%bl
    0.00 :   2a04df:       jne    2a06d8 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x298>
    0.00 :   2a04e5:       mov    %rbx,%rax
    0.00 :   2a04e8:       mov    %r12,%rcx
    0.00 :   2a04eb:       shr    $0x2,%rax
    0.00 :   2a04ef:       neg    %rax
    0.00 :   2a04f2:       and    $0x3,%eax
    0.00 :   2a04f5:       cmp    %r12,%rax
    0.00 :   2a04f8:       cmovg  %r12,%rax
    0.00 :   2a04fc:       sub    %rax,%rcx
    0.00 :   2a04ff:       lea    0x3(%rcx),%rdx
    0.00 :   2a0503:       cmovns %rcx,%rdx
    0.00 :   2a0507:       and    $0xfffffffffffffffc,%rdx
    0.00 :   2a050b:       add    %rax,%rdx
    0.00 :   2a050e:       test   %rax,%rax
    0.00 :   2a0511:       jle    2a052c <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0xec>
    0.00 :   2a0513:       xor    %ecx,%ecx
    0.00 :   2a0515:       nopl   (%rax)
    0.00 :   2a0518:       movss  0x0(%rbp,%rcx,4),%xmm0
    0.00 :   2a051e:       movss  %xmm0,(%rbx,%rcx,4)
    0.00 :   2a0523:       add    $0x1,%rcx
    0.00 :   2a0527:       cmp    %rax,%rcx
    0.00 :   2a052a:       jl     2a0518 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0xd8>
    0.00 :   2a052c:       cmp    %rdx,%rax
    0.00 :   2a052f:       jge    2a054a <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x10a>
    0.00 :   2a0531:       nopl   0x0(%rax)
         :            _mm_store_ps():
         :
         :            /* Store four SPFP values.  The address must be 16-byte aligned.  */
         :            extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_store_ps (float *__P, __m128 __A)
         :            {
         :            *(__m128 *)__P = __A;
    0.00 :   2a0538:       movups 0x0(%rbp,%rax,4),%xmm2
    0.00 :   2a053d:       movaps %xmm2,(%rbx,%rax,4)
         :            _ZN11onnxruntimeL17GemmBroadcastBiasIfEEvllfPKT_PKNS_11TensorShapeEPS1_():
    0.00 :   2a0541:       add    $0x4,%rax
    0.00 :   2a0545:       cmp    %rax,%rdx
    0.00 :   2a0548:       jg     2a0538 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0xf8>
    0.00 :   2a054a:       cmp    %r12,%rdx
    0.00 :   2a054d:       jge    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a054f:       nop
    0.00 :   2a0550:       movss  0x0(%rbp,%rdx,4),%xmm0
    0.00 :   2a0556:       movss  %xmm0,(%rbx,%rdx,4)
    0.00 :   2a055b:       add    $0x1,%rdx
    0.00 :   2a055f:       cmp    %rdx,%r12
    0.00 :   2a0562:       jne    2a0550 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x110>
    0.00 :   2a0564:       nopl   0x0(%rax)
    0.00 :   2a0568:       mov    0xa8(%rsp),%rax
    0.00 :   2a0570:       xor    %fs:0x28,%rax
    0.00 :   2a0579:       jne    2a07a1 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x361>
    0.00 :   2a057f:       add    $0xb0,%rsp
    0.00 :   2a0586:       pop    %rbx
    0.00 :   2a0587:       pop    %rbp
    0.00 :   2a0588:       pop    %r12
    0.00 :   2a058a:       pop    %r13
    0.00 :   2a058c:       pop    %r14
    0.00 :   2a058e:       retq
    0.00 :   2a058f:       nop
    0.00 :   2a0590:       test   %r12,%r12
    0.00 :   2a0593:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a0595:       mov    %r13,%rcx
    0.00 :   2a0598:       lea    0x0(,%r13,4),%rsi
    0.00 :   2a05a0:       xor    %edx,%edx
    0.00 :   2a05a2:       neg    %rcx
    0.00 :   2a05a5:       add    %rsi,%rbx
    0.00 :   2a05a8:       shl    $0x2,%rcx
    0.00 :   2a05ac:       nopl   0x0(%rax)
    0.00 :   2a05b0:       lea    (%rbx,%rcx,1),%rax
    0.00 :   2a05b4:       test   %r13,%r13
    0.00 :   2a05b7:       jle    2a05d4 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x194>
    0.00 :   2a05b9:       nopl   0x0(%rax)
    0.00 :   2a05c0:       movss  0x0(%rbp,%rdx,4),%xmm0
    0.00 :   2a05c6:       add    $0x4,%rax
    0.00 :   2a05ca:       movss  %xmm0,-0x4(%rax)
    0.00 :   2a05cf:       cmp    %rax,%rbx
    0.00 :   2a05d2:       jne    2a05c0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x180>
    0.00 :   2a05d4:       add    $0x1,%rdx
    0.00 :   2a05d8:       add    %rsi,%rbx
    0.00 :   2a05db:       cmp    %rdx,%r12
    0.00 :   2a05de:       jne    2a05b0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x170>
    0.00 :   2a05e0:       jmp    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a05e2:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a05e8:       lea    0x0(,%r13,4),%rcx
    0.00 :   2a05f0:       xor    %edx,%edx
    0.00 :   2a05f2:       test   %r12,%r12
    0.00 :   2a05f5:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a05fb:       nopl   0x0(%rax,%rax,1)
    0.08 :   2a0600:       xor    %eax,%eax
    0.00 :   2a0602:       test   %r13,%r13
    0.00 :   2a0605:       jle    2a0624 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1e4>
    0.00 :   2a0607:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a0610:       movss  0x0(%rbp,%rax,4),%xmm0
    2.20 :   2a0616:       movss  %xmm0,(%rbx,%rax,4)
   97.37 :   2a061b:       add    $0x1,%rax
    0.06 :   2a061f:       cmp    %rax,%r13
    0.00 :   2a0622:       jne    2a0610 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1d0>
    0.08 :   2a0624:       add    $0x1,%rdx
    0.21 :   2a0628:       add    %rcx,%rbx
    0.00 :   2a062b:       cmp    %rdx,%r12
    0.00 :   2a062e:       jne    2a0600 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x1c0>
    0.00 :   2a0630:       jmpq   2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a0635:       nopl   (%rax)
    0.00 :   2a0638:       movss  0x0(%rbp),%xmm0
    0.00 :   2a063d:       imul   %r13,%r12
    0.00 :   2a0641:       test   $0x3,%bl
    0.00 :   2a0644:       jne    2a06f0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x2b0>
    0.00 :   2a064a:       mov    %rbx,%rax
    0.00 :   2a064d:       mov    %r12,%rdx
    0.00 :   2a0650:       shr    $0x2,%rax
    0.00 :   2a0654:       neg    %rax
    0.00 :   2a0657:       and    $0x3,%eax
    0.00 :   2a065a:       cmp    %r12,%rax
    0.00 :   2a065d:       cmovg  %r12,%rax
    0.00 :   2a0661:       sub    %rax,%rdx
    0.00 :   2a0664:       lea    0x3(%rdx),%rcx
    0.00 :   2a0668:       cmovns %rdx,%rcx
    0.00 :   2a066c:       and    $0xfffffffffffffffc,%rcx
    0.00 :   2a0670:       add    %rax,%rcx
    0.00 :   2a0673:       test   %rax,%rax
    0.00 :   2a0676:       jle    2a068e <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x24e>
    0.00 :   2a0678:       xor    %edx,%edx
    0.00 :   2a067a:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a0680:       movss  %xmm0,(%rbx,%rdx,4)
    0.00 :   2a0685:       add    $0x1,%rdx
    0.00 :   2a0689:       cmp    %rax,%rdx
    0.00 :   2a068c:       jl     2a0680 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x240>
    0.00 :   2a068e:       movaps %xmm0,%xmm1
    0.00 :   2a0691:       shufps $0x0,%xmm1,%xmm1
    0.00 :   2a0695:       cmp    %rcx,%rax
    0.00 :   2a0698:       jge    2a06ad <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x26d>
    0.00 :   2a069a:       nopw   0x0(%rax,%rax,1)
         :            _mm_store_ps():
    0.00 :   2a06a0:       movaps %xmm1,(%rbx,%rax,4)
         :            _ZN11onnxruntimeL17GemmBroadcastBiasIfEEvllfPKT_PKNS_11TensorShapeEPS1_():
    0.00 :   2a06a4:       add    $0x4,%rax
    0.00 :   2a06a8:       cmp    %rcx,%rax
    0.00 :   2a06ab:       jl     2a06a0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x260>
    0.00 :   2a06ad:       cmp    %rcx,%r12
    0.00 :   2a06b0:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a06b6:       lea    (%rbx,%rcx,4),%rax
    0.00 :   2a06ba:       lea    (%rbx,%r12,4),%rdx
    0.00 :   2a06be:       xchg   %ax,%ax
    0.00 :   2a06c0:       movss  %xmm0,(%rax)
    0.00 :   2a06c4:       add    $0x4,%rax
    0.00 :   2a06c8:       cmp    %rdx,%rax
    0.00 :   2a06cb:       jne    2a06c0 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x280>
    0.00 :   2a06cd:       jmpq   2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a06d2:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a06d8:       test   %r12,%r12
    0.00 :   2a06db:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a06e1:       mov    %r12,%rdx
    0.00 :   2a06e4:       mov    %r12,%rax
    0.00 :   2a06e7:       jmpq   2a0513 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0xd3>
    0.00 :   2a06ec:       nopl   0x0(%rax)
    0.00 :   2a06f0:       test   %r12,%r12
    0.00 :   2a06f3:       jle    2a0568 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x128>
    0.00 :   2a06f9:       mov    %r12,%rcx
    0.00 :   2a06fc:       mov    %r12,%rax
    0.00 :   2a06ff:       jmpq   2a0678 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)+0x238>
    0.00 :   2a0704:       mov    $0xa0,%edi
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a0709:       lea    0x20(%rsp),%rbp
    0.00 :   2a070e:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a0713:       lea    0x5a9b0f(%rip),%rdx        # 84a229 <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0x4a9>
    0.00 :   2a071a:       mov    %rbp,%rdi
    0.00 :   2a071d:       mov    %rax,%r12
    0.00 :   2a0720:       lea    -0x29(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a0724:       lea    0x10(%rbp),%rax
    0.00 :   2a0728:       mov    %rax,0x20(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a072d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a0732:       mov    %rsp,%r13
    0.00 :   2a0735:       mov    %r13,%rdi
    0.00 :   2a0738:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a073d:       lea    0x40(%rsp),%r14
    0.00 :   2a0742:       mov    %r13,%r8
    0.00 :   2a0745:       lea    0x5a9c94(%rip),%rcx        # 84a3e0 <onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)::__PRETTY_FUNCTION__>
    0.00 :   2a074c:       mov    $0x6f,%edx
    0.00 :   2a0751:       lea    0x5a9ad8(%rip),%rsi        # 84a230 <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0x4b0>
    0.00 :   2a0758:       mov    %r14,%rdi
    0.00 :   2a075b:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a0760:       mov    %rbp,%rcx
    0.00 :   2a0763:       lea    0x5a9b04(%rip),%rdx        # 84a26e <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0x4ee>
    0.00 :   2a076a:       mov    %r14,%rsi
    0.00 :   2a076d:       mov    %r12,%rdi
    0.00 :   2a0770:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a0775:       mov    %r14,%rdi
         :            if (!_M_is_local())
    0.00 :   2a0778:       add    $0x10,%rbp
    0.00 :   2a077c:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a0781:       mov    %r13,%rdi
    0.00 :   2a0784:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a0789:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a078e:       cmp    %rbp,%rdi
    0.00 :   2a0791:       je     7896f <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2a0797:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a079c:       jmpq   7896f <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]>
    0.00 :   2a07a1:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   2a07a6:       mov    %rax,%rbx
    0.00 :   2a07a9:       jmpq   78985 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]+0x16>
    0.00 :   2a07ae:       mov    %rax,%rbx
    0.00 :   2a07b1:       jmpq   7898d <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]+0x1e>
    0.00 :   2a07b6:       mov    %rax,%rbx
    0.00 :   2a07b9:       jmpq   78995 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]+0x26>
    0.00 :   2a07be:       mov    %rax,%rbx
    0.00 :   2a07c1:       jmpq   789a8 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*) [clone .cold.334]+0x39>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (945 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004bba20 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)>:
         :            _ZZN11onnxruntime12_GLOBAL__N_126CreateScalarBroadcastFuncsIfEENS_25ProcessBroadcastSpanFuncsEvENUlRNS_15BroadcastHelperEE1_4_FUNES4_():
    0.00 :   4bba20:       mov    0x8(%rdi),%rcx
    0.00 :   4bba24:       mov    (%rdi),%rax
    0.00 :   4bba27:       cmpq   $0x0,0x50(%rdi)
    0.00 :   4bba2c:       mov    0x40(%rdi),%r10
    0.00 :   4bba30:       mov    0x18(%rcx),%r9
    0.00 :   4bba34:       mov    0x48(%rdi),%rcx
    0.00 :   4bba38:       setne  %sil
    0.00 :   4bba3c:       mov    0x88(%rax),%rdx
    0.00 :   4bba43:       mov    0x28(%rax),%r8
    0.00 :   4bba47:       mov    0x30(%rax),%r11
    0.00 :   4bba4b:       add    0x20(%rdi),%rdx
    0.00 :   4bba4f:       mov    0xe0(%rax),%rax
    0.00 :   4bba56:       add    0x30(%rdi),%rax
    0.00 :   4bba5a:       test   %rcx,%rcx
    0.00 :   4bba5d:       jle    4bba8e <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x6e>
    0.00 :   4bba5f:       lea    (%r11,%rax,4),%r11
    0.00 :   4bba63:       lea    (%r9,%r10,4),%rdi
    0.00 :   4bba67:       xor    %eax,%eax
    0.00 :   4bba69:       add    %r8,%rdx
    0.00 :   4bba6c:       nopl   0x0(%rax)
   23.96 :   4bba70:       pxor   %xmm0,%xmm0
    3.02 :   4bba74:       cmp    (%rdx,%rax,1),%sil
    0.09 :   4bba78:       jne    4bba80 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x60>
   17.47 :   4bba7a:       movss  (%r11,%rax,4),%xmm0
   36.26 :   4bba80:       movss  %xmm0,(%rdi,%rax,4)
   16.07 :   4bba85:       add    $0x1,%rax
    3.14 :   4bba89:       cmp    %rax,%rcx
    0.00 :   4bba8c:       jne    4bba70 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x50>
    0.00 :   4bba8e:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (940 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004bb300 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)>:
         :            _ZZN11onnxruntime12_GLOBAL__N_119MergeBroadcastFuncsIfEENSt9enable_ifIXsrSt13is_arithmeticIT_E5valueENS_25ProcessBroadcastSpanFuncsEE4typeEvENUlRNS_15BroadcastHelperEE1_4_FUNESA_():
    0.00 :   4bb300:       mov    (%rdi),%rcx
    0.00 :   4bb303:       mov    0x48(%rdi),%r8
    0.00 :   4bb307:       mov    0x88(%rcx),%rax
    0.00 :   4bb30e:       add    0x20(%rdi),%rax
    0.00 :   4bb312:       lea    0x0(,%rax,4),%rdx
    0.00 :   4bb31a:       mov    0x28(%rcx),%r10
    0.00 :   4bb31e:       mov    0x30(%rcx),%r11
    0.00 :   4bb322:       mov    0xe0(%rcx),%rax
    0.00 :   4bb329:       add    0x30(%rdi),%rax
    0.00 :   4bb32d:       lea    0x0(,%rax,4),%rcx
    0.00 :   4bb335:       mov    0x8(%rdi),%rax
    0.10 :   4bb339:       mov    0x18(%rax),%r9
    0.00 :   4bb33d:       mov    0x40(%rdi),%rax
    0.00 :   4bb341:       lea    0x0(,%rax,4),%rsi
    0.00 :   4bb349:       test   %r8,%r8
    0.00 :   4bb34c:       jle    4bb389 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x89>
    0.00 :   4bb34e:       xor    %eax,%eax
    0.00 :   4bb350:       add    %rcx,%r11
    0.00 :   4bb353:       lea    (%r10,%rdx,1),%rdi
    0.00 :   4bb357:       add    %r9,%rsi
    0.00 :   4bb35a:       nopw   0x0(%rax,%rax,1)
    6.05 :   4bb360:       mov    (%rdi,%rax,4),%edx
         :            operator()():
   11.89 :   4bb363:       pxor   %xmm1,%xmm1
         :            _ZZN11onnxruntime12_GLOBAL__N_119MergeBroadcastFuncsIfEENSt9enable_ifIXsrSt13is_arithmeticIT_E5valueENS_25ProcessBroadcastSpanFuncsEE4typeEvENUlRNS_15BroadcastHelperEE1_4_FUNESA_():
    6.99 :   4bb367:       mov    (%r11,%rax,4),%ecx
         :            operator()():
    6.89 :   4bb36b:       mov    %edx,-0x4(%rsp)
    8.18 :   4bb36f:       movss  -0x4(%rsp),%xmm0
    9.06 :   4bb375:       ucomiss %xmm1,%xmm0
    9.89 :   4bb378:       jp     4bb37d <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x7d>
    8.69 :   4bb37a:       cmove  %ecx,%edx
         :            _ZZN11onnxruntime12_GLOBAL__N_119MergeBroadcastFuncsIfEENSt9enable_ifIXsrSt13is_arithmeticIT_E5valueENS_25ProcessBroadcastSpanFuncsEE4typeEvENUlRNS_15BroadcastHelperEE1_4_FUNESA_():
   15.11 :   4bb37d:       mov    %edx,(%rsi,%rax,4)
   11.06 :   4bb380:       add    $0x1,%rax
    6.10 :   4bb384:       cmp    %rax,%r8
    0.00 :   4bb387:       jne    4bb360 <onnxruntime::(anonymous namespace)::MergeBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0x60>
    0.00 :   4bb389:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2447 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000575d20 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   575d20:       push   %r15
    0.00 :   575d22:       push   %r14
    0.00 :   575d24:       push   %r13
    0.00 :   575d26:       mov    %rsi,%r13
    0.00 :   575d29:       mov    %rdx,%rsi
    0.00 :   575d2c:       push   %r12
    0.00 :   575d2e:       mov    %rdi,%r12
    0.00 :   575d31:       push   %rbp
    0.00 :   575d32:       push   %rbx
    0.00 :   575d33:       mov    %rdx,%rbx
    0.00 :   575d36:       sub    $0x148,%rsp
    0.00 :   575d3d:       mov    %fs:0x28,%rax
    0.00 :   575d46:       mov    %rax,0x138(%rsp)
    0.00 :   575d4e:       xor    %eax,%eax
    0.00 :   575d50:       lea    0x80(%rsp),%rbp
    0.00 :   575d58:       mov    %rbp,%rdi
    0.00 :   575d5b:       callq  577710 <onnxruntime::contrib::bias_gelu_helper::CheckInputs(onnxruntime::OpKernelContext const*)>
    0.00 :   575d60:       cmpq   $0x0,0x80(%rsp)
    0.00 :   575d69:       je     575dc8 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa8>
    0.00 :   575d6b:       mov    $0x20,%r8d
    0.00 :   575d71:       lea    0x314028(%rip),%rcx        # 889da0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::__FUNCTION__>
    0.00 :   575d78:       mov    %rbp,%rsi
    0.00 :   575d7b:       xor    %edi,%edi
    0.00 :   575d7d:       lea    0x313fc4(%rip),%rdx        # 889d48 <typeinfo name for onnxruntime::contrib::Attention<float>+0x28>
    0.00 :   575d84:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   575d89:       mov    0x80(%rsp),%rax
    0.00 :   575d91:       mov    %rax,(%r12)
    0.00 :   575d95:       mov    0x138(%rsp),%rcx
    0.00 :   575d9d:       xor    %fs:0x28,%rcx
    0.00 :   575da6:       mov    %r12,%rax
    0.00 :   575da9:       jne    576836 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xb16>
    0.00 :   575daf:       add    $0x148,%rsp
    0.00 :   575db6:       pop    %rbx
    0.00 :   575db7:       pop    %rbp
    0.00 :   575db8:       pop    %r12
    0.00 :   575dba:       pop    %r13
    0.00 :   575dbc:       pop    %r14
    0.00 :   575dbe:       pop    %r15
    0.00 :   575dc0:       retq
    0.00 :   575dc1:       nopl   0x0(%rax)
    0.00 :   575dc8:       xor    %esi,%esi
    0.00 :   575dca:       mov    %rbx,%rdi
    0.00 :   575dcd:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   575dd2:       mov    %rax,%r14
    0.00 :   575dd5:       mov    0x30(%rax),%rax
    0.00 :   575dd9:       cmpl   $0x1,0x8(%rax)
    0.00 :   575ddd:       jne    57690f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xbef>
    0.00 :   575de3:       mov    0x50(%r14),%rax
    0.00 :   575de7:       add    $0x18,%r14
    0.00 :   575deb:       add    -0x18(%r14),%rax
    0.00 :   575def:       mov    %r14,%rdi
    0.00 :   575df2:       mov    %rax,0x10(%rsp)
    0.00 :   575df7:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   575dfc:       mov    %r14,%rdx
    0.00 :   575dff:       xor    %esi,%esi
    0.00 :   575e01:       mov    %rbx,%rdi
    0.00 :   575e04:       mov    %rax,0x18(%rsp)
    0.00 :   575e09:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
    0.00 :   575e0e:       mov    %rax,%r14
    0.00 :   575e11:       mov    0x30(%rax),%rax
    0.00 :   575e15:       cmpl   $0x1,0x8(%rax)
    0.00 :   575e19:       jne    57683b <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xb1b>
    0.00 :   575e1f:       mov    0x50(%r14),%rax
    0.00 :   575e23:       mov    $0x1,%esi
    0.00 :   575e28:       add    (%r14),%rax
    0.00 :   575e2b:       mov    %rbx,%rdi
    0.00 :   575e2e:       mov    %rax,0x20(%rsp)
    0.00 :   575e33:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   575e38:       mov    %rax,%r14
    0.00 :   575e3b:       test   %rax,%rax
    0.00 :   575e3e:       je     575f88 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x268>
    0.00 :   575e44:       mov    0x30(%rax),%rax
    0.00 :   575e48:       cmpl   $0x1,0x8(%rax)
    0.00 :   575e4c:       jne    5769ac <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xc8c>
    0.00 :   575e52:       mov    0x50(%r14),%rax
    0.00 :   575e56:       lea    0x18(%r14),%rdi
    0.00 :   575e5a:       add    (%r14),%rax
    0.00 :   575e5d:       mov    %rax,0x28(%rsp)
    0.00 :   575e62:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   575e67:       lea    0x50(%rsp),%rdx
    0.00 :   575e6c:       mov    %rbx,%rsi
    0.00 :   575e6f:       mov    %rbp,%rdi
    0.00 :   575e72:       mov    %rax,0x30(%rsp)
    0.00 :   575e77:       movq   $0x0,0x50(%rsp)
    0.00 :   575e80:       movq   $0x0,0x58(%rsp)
    0.00 :   575e89:       callq  5c7230 <onnxruntime::OpKernelContext::GetTempSpaceAllocator(std::shared_ptr<onnxruntime::IAllocator>*) const>
    0.00 :   575e8e:       cmpq   $0x0,0x80(%rsp)
    0.00 :   575e97:       je     575f30 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x210>
    0.00 :   575e9d:       mov    $0x4e,%r8d
    0.00 :   575ea3:       lea    0x313ef6(%rip),%rcx        # 889da0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::__FUNCTION__>
    0.00 :   575eaa:       mov    %rbp,%rsi
    0.00 :   575ead:       xor    %edi,%edi
    0.00 :   575eaf:       lea    0x313e92(%rip),%rdx        # 889d48 <typeinfo name for onnxruntime::contrib::Attention<float>+0x28>
    0.00 :   575eb6:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   575ebb:       mov    0x80(%rsp),%rax
    0.00 :   575ec3:       mov    %rax,(%r12)
         :            // Does not throw if __r._M_get_use_count() == 0, caller must check.
         :            explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);
         :
         :            ~__shared_count() noexcept
         :            {
         :            if (_M_pi != nullptr)
    0.00 :   575ec7:       mov    0x58(%rsp),%rbx
    0.00 :   575ecc:       test   %rbx,%rbx
    0.00 :   575ecf:       je     575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   575ed5:       mov    0x6b202c(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   575edc:       test   %r15,%r15
    0.00 :   575edf:       je     5760b8 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x398>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   575ee5:       mov    $0xffffffff,%eax
    0.00 :   575eea:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   575eef:       cmp    $0x1,%eax
    0.00 :   575ef2:       jne    575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
         :            _M_dispose();
    0.00 :   575ef8:       mov    (%rbx),%rax
    0.00 :   575efb:       mov    %rbx,%rdi
    0.00 :   575efe:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   575f01:       test   %r15,%r15
    0.00 :   575f04:       je     576538 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x818>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   575f0a:       mov    $0xffffffff,%eax
    0.00 :   575f0f:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   575f14:       cmp    $0x1,%eax
    0.00 :   575f17:       jne    575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
         :            _M_destroy();
    0.00 :   575f1d:       mov    (%rbx),%rax
    0.00 :   575f20:       mov    %rbx,%rdi
    0.00 :   575f23:       callq  *0x18(%rax)
    0.00 :   575f26:       jmpq   575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
    0.00 :   575f2b:       nopl   0x0(%rax,%rax,1)
         :            _M_pi->_M_release();
         :            }
         :
         :            __shared_count(const __shared_count& __r) noexcept
         :            : _M_pi(__r._M_pi)
    0.00 :   575f30:       mov    0x58(%rsp),%r14
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   575f35:       mov    0x50(%rsp),%r15
         :            if (_M_pi != 0)
    0.00 :   575f3a:       test   %r14,%r14
    0.00 :   575f3d:       je     5760d0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x3b0>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   575f43:       cmpq   $0x0,0x6b1fbd(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   575f4b:       lea    0x8(%r14),%rax
    0.00 :   575f4f:       je     5763e0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x6c0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   575f55:       lock addl $0x1,(%rax)
    0.00 :   575f59:       lock addl $0x1,(%rax)
    0.00 :   575f5d:       mov    0x50(%rsp),%rdi
    0.00 :   575f62:       mov    %r14,0x8(%rsp)
    0.00 :   575f67:       mov    (%rdi),%rax
    0.00 :   575f6a:       mov    0x18(%rsp),%rsi
    0.00 :   575f6f:       mov    0x10(%rax),%rcx
    0.00 :   575f73:       test   %rsi,%rsi
    0.00 :   575f76:       jns    576190 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x470>
    0.00 :   575f7c:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   575f81:       nopl   0x0(%rax)
    0.00 :   575f88:       mov    0x18(%rsp),%r13
    0.00 :   575f8d:       lea    0x18(%rsp),%rax
    0.00 :   575f92:       mov    0x18(%rbx),%rbx
    0.00 :   575f96:       lea    0x10(%rsp),%rdx
    0.00 :   575f9b:       mov    %rax,0x80(%rsp)
    0.00 :   575fa3:       lea    0x20(%rsp),%rcx
    0.00 :   575fa8:       mov    %r13,%rsi
    0.00 :   575fab:       lea    0x1ffe(%r13),%rax
    0.00 :   575fb2:       mov    %rdx,0x88(%rsp)
    0.00 :   575fba:       add    $0xfff,%rsi
    0.00 :   575fc1:       mov    %rcx,0x90(%rsp)
    0.00 :   575fc9:       movq   $0x0,0x60(%rsp)
    0.00 :   575fd2:       cmovns %rsi,%rax
    0.00 :   575fd6:       sar    $0xc,%rax
    0.00 :   575fda:       cltq
    0.00 :   575fdc:       mov    %rax,0x50(%rsp)
    0.00 :   575fe1:       test   %rbx,%rbx
    0.00 :   575fe4:       je     576550 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x830>
    0.00 :   575fea:       test   %rax,%rax
    0.00 :   575fed:       jle    5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   575ff3:       cmp    $0x1,%rax
    0.00 :   575ff7:       je     5760e1 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x3c1>
    0.00 :   575ffd:       mov    %rbx,%rdi
    0.00 :   576000:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            min(const _Tp& __a, const _Tp& __b)
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :            //return __b < __a ? __b : __a;
         :            if (__b < __a)
    0.00 :   576005:       mov    0x50(%rsp),%rdx
    0.00 :   57600a:       cltq
    0.00 :   57600c:       cmp    %rdx,%rax
    0.00 :   57600f:       cmovg  %rdx,%rax
    0.00 :   576013:       mov    %rax,0x60(%rsp)
    0.00 :   576018:       cmp    $0x1,%rax
    0.00 :   57601c:       jle    576400 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x6e0>
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
         :            { ::new (__functor._M_access()) _Functor(std::move(__f)); }
         :
         :            static void
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   576022:       mov    $0x18,%edi
         :            };
         :
         :            _Function_base() : _M_manager(nullptr) { }
    0.00 :   576027:       movq   $0x0,0xe0(%rsp)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   576033:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   576038:       lea    0x60(%rsp),%rdx
    0.00 :   57603d:       mov    %rbp,0x10(%rax)
    0.00 :   576041:       mov    %rbx,%rdi
    0.00 :   576044:       lea    0xd0(%rsp),%r13
    0.00 :   57604c:       mov    %rdx,(%rax)
    0.00 :   57604f:       lea    0x50(%rsp),%rdx
    0.00 :   576054:       mov    0x60(%rsp),%rsi
    0.00 :   576059:       mov    %rdx,0x8(%rax)
    0.00 :   57605d:       mov    %r13,%rdx
    0.00 :   576060:       mov    %rax,0xd0(%rsp)
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   576068:       lea    -0xa0f(%rip),%rax        # 575660 <std::_Function_handler<void (long), onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   57606f:       mov    %rax,0xe8(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   576077:       lea    -0xb3e(%rip),%rax        # 575540 <std::_Function_base::_Base_manager<onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_manager(std::_Any_data&, onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1} const&, std::_Manager_operation)>
    0.00 :   57607e:       mov    %rax,0xe0(%rsp)
    0.00 :   576086:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
         :            if (_M_manager)
    0.00 :   57608b:       mov    0xe0(%rsp),%rax
    0.00 :   576093:       test   %rax,%rax
    0.00 :   576096:       je     5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   576098:       mov    $0x3,%edx
    0.00 :   57609d:       mov    %r13,%rsi
    0.00 :   5760a0:       mov    %r13,%rdi
    0.00 :   5760a3:       callq  *%rax
    0.00 :   5760a5:       movq   $0x0,(%r12)
         :            constexpr _Head_base()
    0.00 :   5760ad:       jmpq   575d95 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x75>
    0.00 :   5760b2:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5760b8:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5760bb:       lea    -0x1(%rax),%edx
    0.00 :   5760be:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   5760c1:       jmpq   575eef <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1cf>
    0.00 :   5760c6:       nopw   %cs:0x0(%rax,%rax,1)
         :            : _M_pi(__r._M_pi)
    0.00 :   5760d0:       movq   $0x0,0x8(%rsp)
         :            if (_M_pi != 0)
    0.00 :   5760d9:       mov    %r15,%rdi
    0.00 :   5760dc:       jmpq   575f67 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x247>
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   5760e1:       mov    0x10(%rsp),%rbp
    0.00 :   5760e6:       mov    0x20(%rsp),%rbx
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   5760eb:       cmp    $0xfff,%r13
    0.00 :   5760f2:       jle    57681a <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xafa>
    0.00 :   5760f8:       mov    $0x1000,%edx
         :            return __b;
         :            return __a;
    0.00 :   5760fd:       mov    $0x1000,%r13d
    0.00 :   576103:       movss  0x314049(%rip),%xmm3        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   57610b:       movss  0x2c7871(%rip),%xmm2        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576113:       xor    %eax,%eax
    0.00 :   576115:       nopl   (%rax)
    0.00 :   576118:       movss  0x0(%rbp,%rax,4),%xmm1
    0.00 :   57611e:       movaps %xmm1,%xmm0
    0.00 :   576121:       mulss  %xmm3,%xmm0
    0.00 :   576125:       mulss  %xmm1,%xmm0
    0.00 :   576129:       addss  %xmm2,%xmm0
    0.00 :   57612d:       mulss  %xmm1,%xmm0
    0.00 :   576131:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   576136:       add    $0x1,%rax
    0.00 :   57613a:       cmp    %r13,%rax
    0.00 :   57613d:       jl     576118 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x3f8>
    0.00 :   57613f:       mov    %rbx,%rsi
    0.00 :   576142:       mov    %rbx,%rdi
    0.00 :   576145:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   57614a:       movss  0x2c783a(%rip),%xmm3        # 83d98c <typeinfo name for onnxruntime::FastGeluFusion+0x2c>
    0.00 :   576152:       movss  0x2b0c4a(%rip),%xmm2        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   57615a:       xor    %eax,%eax
    0.00 :   57615c:       nopl   0x0(%rax)
    0.00 :   576160:       movss  0x0(%rbp,%rax,4),%xmm0
    0.00 :   576166:       movss  (%rbx,%rax,4),%xmm1
    0.00 :   57616b:       mulss  %xmm3,%xmm0
    0.00 :   57616f:       addss  %xmm2,%xmm1
    0.00 :   576173:       mulss  %xmm1,%xmm0
    0.00 :   576177:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   57617c:       add    $0x1,%rax
    0.00 :   576180:       cmp    %r13,%rax
    0.00 :   576183:       jne    576160 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x440>
    0.00 :   576185:       jmpq   5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   57618a:       nopw   0x0(%rax,%rax,1)
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576190:       mov    %rsi,%rdx
    0.00 :   576193:       shr    $0x20,%rdx
    0.00 :   576197:       jne    5763b0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x690>
    0.00 :   57619d:       shl    $0x2,%rsi
    0.00 :   5761a1:       callq  *%rcx
    0.00 :   5761a3:       mov    %rax,%rsi
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
         :            { }
         :
         :            __shared_ptr(__shared_ptr&& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5761a6:       mov    %r15,0x60(%rsp)
         :            _M_pi = __tmp;
    0.00 :   5761ab:       mov    %r14,0x68(%rsp)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5761b0:       mov    %rax,0x70(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   5761b5:       test   %r14,%r14
    0.00 :   5761b8:       je     5761e3 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x4c3>
         :            if (__gthread_active_p())
    0.00 :   5761ba:       mov    0x6b1d47(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5761c1:       test   %r15,%r15
    0.00 :   5761c4:       je     576688 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x968>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5761ca:       mov    $0xffffffff,%eax
    0.00 :   5761cf:       lock xadd %eax,0x8(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5761d5:       cmp    $0x1,%eax
    0.00 :   5761d8:       je     5767b0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa90>
    0.00 :   5761de:       mov    0x70(%rsp),%rsi
    0.00 :   5761e3:       mov    0x18(%rsp),%rax
    0.00 :   5761e8:       mov    0x30(%rsp),%r9
    0.00 :   5761ed:       lea    0x38(%rsp),%rcx
    0.00 :   5761f2:       lea    0x10(%rsp),%rdi
    0.00 :   5761f7:       mov    0x18(%rbx),%rbx
    0.00 :   5761fb:       mov    %rcx,0xa0(%rsp)
    0.00 :   576203:       lea    0x28(%rsp),%rcx
    0.00 :   576208:       cqto
    0.00 :   57620a:       mov    %rsi,0x38(%rsp)
    0.00 :   57620f:       idiv   %r9
    0.00 :   576212:       mov    %r13,0x88(%rsp)
    0.00 :   57621a:       mov    %rdi,0x90(%rsp)
    0.00 :   576222:       mov    %rcx,0xa8(%rsp)
    0.00 :   57622a:       movq   $0x0,0x48(%rsp)
    0.00 :   576233:       lea    0x30(%rsp),%rdx
    0.00 :   576238:       mov    %rdx,0x80(%rsp)
    0.00 :   576240:       lea    0x20(%rsp),%rdx
    0.00 :   576245:       mov    %rdx,0x98(%rsp)
    0.00 :   57624d:       cltq
    0.00 :   57624f:       mov    %rax,0x40(%rsp)
    0.00 :   576254:       test   %rbx,%rbx
    0.00 :   576257:       je     576728 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa08>
    0.00 :   57625d:       test   %rax,%rax
    0.00 :   576260:       jle    57631d <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5fd>
    0.00 :   576266:       cmp    $0x1,%rax
    0.00 :   57626a:       je     5767fb <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xadb>
    0.00 :   576270:       mov    %rbx,%rdi
    0.00 :   576273:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            if (__b < __a)
    0.00 :   576278:       mov    0x40(%rsp),%rdx
    0.00 :   57627d:       cltq
    0.00 :   57627f:       cmp    %rdx,%rax
    0.00 :   576282:       cmovg  %rdx,%rax
    0.00 :   576286:       mov    %rax,0x48(%rsp)
    0.00 :   57628b:       cmp    $0x1,%rax
    0.00 :   57628f:       jle    5766ae <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x98e>
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   576295:       mov    $0x18,%edi
         :            _Function_base() : _M_manager(nullptr) { }
    0.00 :   57629a:       movq   $0x0,0xe0(%rsp)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   5762a6:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5762ab:       lea    0x48(%rsp),%rdx
    0.00 :   5762b0:       mov    %rbp,0x10(%rax)
    0.00 :   5762b4:       mov    %rbx,%rdi
    0.00 :   5762b7:       lea    0xd0(%rsp),%r13
    0.00 :   5762bf:       mov    %rdx,(%rax)
    0.00 :   5762c2:       lea    0x40(%rsp),%rdx
    0.00 :   5762c7:       mov    0x48(%rsp),%rsi
    0.00 :   5762cc:       mov    %rdx,0x8(%rax)
    0.00 :   5762d0:       mov    %r13,%rdx
    0.00 :   5762d3:       mov    %rax,0xd0(%rsp)
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   5762db:       lea    -0x8f2(%rip),%rax        # 5759f0 <std::_Function_handler<void (long), onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   5762e2:       mov    %rax,0xe8(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   5762ea:       lea    -0xd21(%rip),%rax        # 5755d0 <std::_Function_base::_Base_manager<onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}>::_M_manager(std::_Any_data&, onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1} const&, std::_Manager_operation)>
    0.00 :   5762f1:       mov    %rax,0xe0(%rsp)
    0.00 :   5762f9:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
         :            if (_M_manager)
    0.00 :   5762fe:       mov    0xe0(%rsp),%rax
    0.00 :   576306:       test   %rax,%rax
    0.00 :   576309:       je     576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   57630b:       mov    $0x3,%edx
    0.00 :   576310:       mov    %r13,%rsi
    0.00 :   576313:       mov    %r13,%rdi
    0.00 :   576316:       callq  *%rax
    0.00 :   576318:       mov    0x70(%rsp),%rsi
    0.00 :   57631d:       movq   $0x0,(%r12)
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   576325:       test   %rsi,%rsi
    0.00 :   576328:       je     57633a <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x61a>
    0.00 :   57632a:       mov    0x60(%rsp),%rdi
    0.00 :   57632f:       test   %rdi,%rdi
    0.00 :   576332:       je     57633a <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x61a>
    0.00 :   576334:       mov    (%rdi),%rax
    0.00 :   576337:       callq  *0x18(%rax)
         :            get_deleter()(__ptr);
         :            __ptr = pointer();
    0.00 :   57633a:       movq   $0x0,0x70(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   576343:       mov    0x68(%rsp),%rbx
    0.00 :   576348:       test   %rbx,%rbx
    0.00 :   57634b:       je     575ec7 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1a7>
         :            if (__gthread_active_p())
    0.00 :   576351:       mov    0x6b1bb0(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   576358:       test   %r15,%r15
    0.00 :   57635b:       je     5766a0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x980>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   576361:       mov    $0xffffffff,%eax
    0.00 :   576366:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   57636b:       cmp    $0x1,%eax
    0.00 :   57636e:       jne    575ec7 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1a7>
         :            _M_dispose();
    0.00 :   576374:       mov    (%rbx),%rax
    0.00 :   576377:       mov    %rbx,%rdi
    0.00 :   57637a:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   57637d:       test   %r15,%r15
    0.00 :   576380:       je     5767e0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xac0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   576386:       mov    $0xffffffff,%eax
    0.00 :   57638b:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   576390:       cmp    $0x1,%eax
    0.00 :   576393:       jne    575ec7 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1a7>
         :            _M_destroy();
    0.00 :   576399:       mov    (%rbx),%rax
    0.00 :   57639c:       mov    %rbx,%rdi
    0.00 :   57639f:       callq  *0x18(%rax)
    0.00 :   5763a2:       jmpq   575ec7 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1a7>
    0.00 :   5763a7:       nopw   0x0(%rax,%rax,1)
    0.00 :   5763b0:       mov    %rdx,%rax
    0.00 :   5763b3:       shr    $0x1e,%rax
    0.00 :   5763b7:       jne    576a49 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd29>
    0.00 :   5763bd:       mov    %esi,%eax
    0.00 :   5763bf:       shl    $0x22,%rdx
    0.00 :   5763c3:       lea    0x0(,%rax,4),%rsi
    0.00 :   5763cb:       add    %rdx,%rsi
    0.00 :   5763ce:       jae    5761a1 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x481>
    0.00 :   5763d4:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   5763d9:       nopl   0x0(%rax)
         :            { *__mem += __val; }
    0.00 :   5763e0:       addl   $0x1,0x8(%r14)
    0.00 :   5763e5:       mov    0x50(%rsp),%rdi
    0.00 :   5763ea:       addl   $0x1,0x8(%r14)
    0.00 :   5763ef:       mov    %r14,0x8(%rsp)
    0.00 :   5763f4:       jmpq   575f67 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x247>
    0.00 :   5763f9:       nopl   0x0(%rax)
    0.00 :   576400:       test   %rdx,%rdx
    0.00 :   576403:       jle    5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   576409:       movss  0x313d43(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   576411:       movss  0x2c756b(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   576419:       xor    %r14d,%r14d
    0.00 :   57641c:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576420:       mov    0x88(%rsp),%rax
    0.00 :   576428:       mov    %r14,%rbx
    0.00 :   57642b:       mov    0x80(%rsp),%rdx
    0.00 :   576433:       shl    $0xe,%rbx
    0.00 :   576437:       mov    (%rax),%r13
    0.00 :   57643a:       mov    0x90(%rsp),%rax
    0.00 :   576442:       mov    (%rdx),%rbp
    0.00 :   576445:       add    %rbx,%r13
    0.00 :   576448:       add    (%rax),%rbx
    0.00 :   57644b:       mov    %r14,%rax
    0.00 :   57644e:       shl    $0xc,%rax
    0.00 :   576452:       sub    %rax,%rbp
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576455:       cmp    $0xfff,%rbp
    0.00 :   57645c:       jle    576508 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x7e8>
    0.00 :   576462:       mov    $0x1000,%edx
         :            return __a;
    0.00 :   576467:       mov    $0x1000,%ebp
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   57646c:       xor    %eax,%eax
    0.00 :   57646e:       xchg   %ax,%ax
    0.00 :   576470:       movss  0x0(%r13,%rax,4),%xmm1
    0.00 :   576477:       movaps %xmm1,%xmm0
    0.00 :   57647a:       mulss  %xmm5,%xmm0
    0.00 :   57647e:       mulss  %xmm1,%xmm0
    0.00 :   576482:       addss  %xmm4,%xmm0
    0.00 :   576486:       mulss  %xmm1,%xmm0
    0.00 :   57648a:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   57648f:       add    $0x1,%rax
    0.00 :   576493:       cmp    %rbp,%rax
    0.00 :   576496:       jl     576470 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x750>
    0.00 :   576498:       mov    %rbx,%rsi
    0.00 :   57649b:       mov    %rbx,%rdi
    0.00 :   57649e:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   5764a3:       movss  0x2b08f9(%rip),%xmm2        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   5764ab:       xor    %eax,%eax
    0.00 :   5764ad:       movss  0x2c74d7(%rip),%xmm3        # 83d98c <typeinfo name for onnxruntime::FastGeluFusion+0x2c>
    0.00 :   5764b5:       movss  0x2c74c7(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   5764bd:       movss  0x313c8f(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   5764c5:       nopl   (%rax)
    0.00 :   5764c8:       movss  0x0(%r13,%rax,4),%xmm0
    0.00 :   5764cf:       movss  (%rbx,%rax,4),%xmm1
    0.00 :   5764d4:       mulss  %xmm3,%xmm0
    0.00 :   5764d8:       addss  %xmm2,%xmm1
    0.00 :   5764dc:       mulss  %xmm1,%xmm0
    0.00 :   5764e0:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   5764e5:       add    $0x1,%rax
    0.00 :   5764e9:       cmp    %rbp,%rax
    0.00 :   5764ec:       jne    5764c8 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x7a8>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   5764ee:       add    $0x1,%r14
    0.00 :   5764f2:       cmp    %r14,0x50(%rsp)
    0.00 :   5764f7:       jg     576420 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x700>
    0.00 :   5764fd:       jmpq   5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   576502:       nopw   0x0(%rax,%rax,1)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576508:       mov    %rbp,%rdx
    0.00 :   57650b:       test   %rbp,%rbp
    0.00 :   57650e:       jg     57646c <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x74c>
    0.00 :   576514:       mov    %rbx,%rsi
    0.00 :   576517:       mov    %rbx,%rdi
    0.00 :   57651a:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   57651f:       movss  0x313c2d(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   576527:       movss  0x2c7455(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   57652f:       jmp    5764ee <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x7ce>
    0.00 :   576531:       nopl   0x0(%rax)
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
         :            _Atomic_word __result = *__mem;
    0.00 :   576538:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   57653b:       lea    -0x1(%rax),%edx
    0.00 :   57653e:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   576541:       jmpq   575f14 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x1f4>
    0.00 :   576546:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   576550:       xor    %r15d,%r15d
    0.00 :   576553:       test   %rax,%rax
    0.00 :   576556:       jle    5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   57655c:       movss  0x313bf0(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.05 :   576564:       movss  0x2c7418(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   57656c:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576570:       mov    %r15,%rax
    0.00 :   576573:       mov    %r15,%rbx
    0.00 :   576576:       mov    (%rdx),%r14
    0.00 :   576579:       shl    $0xc,%rax
    0.00 :   57657d:       shl    $0xe,%rbx
    0.00 :   576581:       sub    %rax,%r13
    0.00 :   576584:       add    %rbx,%r14
    0.00 :   576587:       add    (%rcx),%rbx
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
         :            if (__b < __a)
    0.00 :   57658a:       cmp    $0xfff,%r13
    0.00 :   576591:       jle    576658 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x938>
    0.00 :   576597:       mov    $0x1000,%edx
         :            return __a;
    0.00 :   57659c:       mov    $0x1000,%r13d
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   5765a2:       xor    %eax,%eax
    0.00 :   5765a4:       nopl   0x0(%rax)
   10.71 :   5765a8:       movss  (%r14,%rax,4),%xmm1
   13.57 :   5765ae:       movaps %xmm1,%xmm0
   11.75 :   5765b1:       mulss  %xmm5,%xmm0
   10.86 :   5765b5:       mulss  %xmm1,%xmm0
    9.94 :   5765b9:       addss  %xmm4,%xmm0
    9.53 :   5765bd:       mulss  %xmm1,%xmm0
   12.84 :   5765c1:       movss  %xmm0,(%rbx,%rax,4)
   10.73 :   5765c6:       add    $0x1,%rax
   10.02 :   5765ca:       cmp    %r13,%rax
    0.00 :   5765cd:       jl     5765a8 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x888>
    0.00 :   5765cf:       mov    %rbx,%rsi
    0.00 :   5765d2:       mov    %rbx,%rdi
    0.00 :   5765d5:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   5765da:       movss  0x2b07c2(%rip),%xmm2        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   5765e2:       xor    %eax,%eax
    0.00 :   5765e4:       movss  0x2c73a0(%rip),%xmm3        # 83d98c <typeinfo name for onnxruntime::FastGeluFusion+0x2c>
    0.00 :   5765ec:       movss  0x2c7390(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   5765f4:       movss  0x313b58(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   5765fc:       nopl   0x0(%rax)
    0.00 :   576600:       movss  (%r14,%rax,4),%xmm0
    0.00 :   576606:       movss  (%rbx,%rax,4),%xmm1
    0.00 :   57660b:       mulss  %xmm3,%xmm0
    0.00 :   57660f:       addss  %xmm2,%xmm1
    0.00 :   576613:       mulss  %xmm1,%xmm0
    0.00 :   576617:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   57661c:       add    $0x1,%rax
    0.00 :   576620:       cmp    %r13,%rax
    0.00 :   576623:       jne    576600 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x8e0>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576625:       add    $0x1,%r15
    0.00 :   576629:       cmp    %r15,0x50(%rsp)
    0.00 :   57662e:       jle    5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
    0.00 :   576634:       mov    0x80(%rsp),%rax
    0.00 :   57663c:       mov    0x88(%rsp),%rdx
    0.00 :   576644:       mov    0x90(%rsp),%rcx
    0.00 :   57664c:       mov    (%rax),%r13
    0.00 :   57664f:       jmpq   576570 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x850>
    0.00 :   576654:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   576658:       mov    %r13,%rdx
    0.00 :   57665b:       test   %r13,%r13
    0.00 :   57665e:       jg     5765a2 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x882>
    0.00 :   576664:       mov    %rbx,%rsi
    0.00 :   576667:       mov    %rbx,%rdi
    0.00 :   57666a:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   57666f:       movss  0x313add(%rip),%xmm5        # 88a154 <typeinfo name for onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#2}&&, long)::{lambda(long)#1}+0x94>
    0.00 :   576677:       movss  0x2c7305(%rip),%xmm4        # 83d984 <typeinfo name for onnxruntime::FastGeluFusion+0x24>
    0.00 :   57667f:       jmp    576625 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x905>
    0.00 :   576681:       nopl   0x0(%rax)
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
         :            _Atomic_word __result = *__mem;
    0.00 :   576688:       mov    0x8(%r14),%eax
         :            *__mem += __val;
    0.00 :   57668c:       lea    -0x1(%rax),%edx
    0.00 :   57668f:       mov    %edx,0x8(%r14)
         :            return __result;
    0.00 :   576693:       jmpq   5761d5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x4b5>
    0.00 :   576698:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5766a0:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5766a3:       lea    -0x1(%rax),%edx
    0.00 :   5766a6:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   5766a9:       jmpq   57636b <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x64b>
    0.00 :   5766ae:       xor    %ebx,%ebx
    0.00 :   5766b0:       test   %rdx,%rdx
    0.00 :   5766b3:       jle    576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
    0.00 :   5766b9:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE0_clEl():
    0.00 :   5766c0:       mov    0x80(%rsp),%rax
    0.00 :   5766c8:       mov    %rbx,%r8
    0.00 :   5766cb:       mov    0x88(%rsp),%rdi
    0.00 :   5766d3:       mov    (%rax),%r9
    0.00 :   5766d6:       mov    0xa0(%rsp),%rax
    0.00 :   5766de:       imul   %r9,%r8
    0.00 :   5766e2:       mov    (%rax),%rcx
    0.00 :   5766e5:       mov    0x90(%rsp),%rax
    0.00 :   5766ed:       mov    (%rax),%rsi
    0.00 :   5766f0:       mov    0x98(%rsp),%rax
    0.00 :   5766f8:       shl    $0x2,%r8
    0.00 :   5766fc:       add    %r8,%rcx
    0.00 :   5766ff:       add    %r8,%rsi
    0.00 :   576702:       add    (%rax),%r8
    0.00 :   576705:       mov    0xa8(%rsp),%rax
    0.00 :   57670d:       mov    (%rax),%rdx
    0.00 :   576710:       callq  575920 <onnxruntime::contrib::BiasGelu<float, true>::AddBiasGelu(float const*, float const*, float*, float*, long) const>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576715:       add    $0x1,%rbx
    0.00 :   576719:       cmp    %rbx,0x40(%rsp)
    0.00 :   57671e:       jg     5766c0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x9a0>
    0.00 :   576720:       jmpq   576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
    0.00 :   576725:       nopl   (%rax)
    0.00 :   576728:       test   %rax,%rax
    0.00 :   57672b:       jle    57631d <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5fd>
    0.00 :   576731:       mov    %rcx,%rax
    0.00 :   576734:       jmp    576776 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa56>
    0.00 :   576736:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   576740:       mov    0x80(%rsp),%rax
    0.00 :   576748:       mov    0x90(%rsp),%rdi
    0.00 :   576750:       mov    0x98(%rsp),%rdx
    0.00 :   576758:       mov    0x88(%rsp),%r13
    0.00 :   576760:       mov    (%rax),%r9
    0.00 :   576763:       mov    0xa0(%rsp),%rax
    0.00 :   57676b:       mov    (%rax),%rsi
    0.00 :   57676e:       mov    0xa8(%rsp),%rax
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE0_clEl():
    0.00 :   576776:       mov    %rbx,%r8
    0.00 :   576779:       imul   %r9,%r8
    0.00 :   57677d:       shl    $0x2,%r8
    0.00 :   576781:       lea    (%rsi,%r8,1),%rcx
    0.00 :   576785:       mov    (%rdi),%rsi
    0.00 :   576788:       mov    %r13,%rdi
    0.00 :   57678b:       add    %r8,%rsi
    0.00 :   57678e:       add    (%rdx),%r8
    0.00 :   576791:       mov    (%rax),%rdx
    0.00 :   576794:       callq  575920 <onnxruntime::contrib::BiasGelu<float, true>::AddBiasGelu(float const*, float const*, float*, float*, long) const>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576799:       add    $0x1,%rbx
    0.00 :   57679d:       cmp    %rbx,0x40(%rsp)
    0.00 :   5767a2:       jg     576740 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xa20>
    0.00 :   5767a4:       jmpq   576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
    0.00 :   5767a9:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5767b0:       mov    (%r14),%rax
    0.00 :   5767b3:       mov    %r14,%rdi
    0.00 :   5767b6:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5767b9:       test   %r15,%r15
    0.00 :   5767bc:       je     5767ee <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xace>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5767be:       mov    $0xffffffff,%eax
    0.00 :   5767c3:       lock xadd %eax,0xc(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5767c9:       cmp    $0x1,%eax
    0.00 :   5767cc:       jne    5761de <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x4be>
         :            _M_destroy();
    0.00 :   5767d2:       mov    (%r14),%rax
    0.00 :   5767d5:       mov    %r14,%rdi
    0.00 :   5767d8:       callq  *0x18(%rax)
    0.00 :   5767db:       jmpq   5761de <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x4be>
         :            _Atomic_word __result = *__mem;
    0.00 :   5767e0:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5767e3:       lea    -0x1(%rax),%edx
    0.00 :   5767e6:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5767e9:       jmpq   576390 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x670>
         :            _Atomic_word __result = *__mem;
    0.00 :   5767ee:       mov    0xc(%r14),%eax
         :            *__mem += __val;
    0.00 :   5767f2:       lea    -0x1(%rax),%edx
    0.00 :   5767f5:       mov    %edx,0xc(%r14)
         :            return __result;
    0.00 :   5767f9:       jmp    5767c9 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xaa9>
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE0_clEl():
    0.00 :   5767fb:       mov    %rsi,%rcx
    0.00 :   5767fe:       mov    0x20(%rsp),%r8
    0.00 :   576803:       mov    0x28(%rsp),%rdx
    0.00 :   576808:       mov    %r13,%rdi
    0.00 :   57680b:       mov    0x10(%rsp),%rsi
    0.00 :   576810:       callq  575920 <onnxruntime::contrib::BiasGelu<float, true>::AddBiasGelu(float const*, float const*, float*, float*, long) const>
    0.00 :   576815:       jmpq   576318 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x5f8>
         :            _ZZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   57681a:       mov    %r13,%rdx
    0.00 :   57681d:       test   %r13,%r13
    0.00 :   576820:       jg     576103 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x3e3>
    0.00 :   576826:       mov    %rbx,%rsi
    0.00 :   576829:       mov    %rbx,%rdi
    0.00 :   57682c:       callq  6b4340 <MlasComputeTanh(float const*, float*, unsigned long)>
    0.00 :   576831:       jmpq   5760a5 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0x385>
         :            _ZNK11onnxruntime7contrib8BiasGeluIfLb1EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   576836:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   57683b:       mov    $0xa0,%edi
    0.00 :   576840:       lea    0xb0(%rsp),%rbx
    0.00 :   576848:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   57684d:       mov    %rbx,%rdi
    0.00 :   576850:       lea    0x50(%rsp),%rcx
    0.00 :   576855:       mov    %rbp,%rsi
    0.00 :   576858:       mov    %rax,%r12
    0.00 :   57685b:       lea    0x2aefa9(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   576862:       lea    0x60(%rsp),%rdx
    0.00 :   576867:       mov    %rax,0x50(%rsp)
    0.00 :   57686c:       lea    0x2aef95(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   576873:       lea    0x30(%r14),%r8
    0.00 :   576877:       mov    %rax,0x60(%rsp)
    0.00 :   57687c:       lea    0x2aef6e(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   576883:       mov    %rax,0x80(%rsp)
    0.00 :   57688b:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   576890:       mov    %rbp,%rdi
    0.00 :   576893:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   576898:       lea    0xd0(%rsp),%r13
    0.00 :   5768a0:       mov    %rbp,%r8
    0.00 :   5768a3:       lea    0x313556(%rip),%rcx        # 889e00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   5768aa:       mov    $0x83,%edx
    0.00 :   5768af:       lea    0x2aef5a(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   5768b6:       mov    %r13,%rdi
    0.00 :   5768b9:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5768be:       mov    %rbx,%rcx
    0.00 :   5768c1:       lea    0x2aef88(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   5768c8:       mov    %r13,%rsi
    0.00 :   5768cb:       mov    %r12,%rdi
    0.00 :   5768ce:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5768d3:       mov    %r13,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5768d6:       add    $0x10,%rbx
    0.00 :   5768da:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5768df:       mov    %rbp,%rdi
    0.00 :   5768e2:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5768e7:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5768ef:       cmp    %rbx,%rdi
    0.00 :   5768f2:       je     5768f9 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xbd9>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5768f4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5768f9:       lea    -0x47d1e0(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   576900:       lea    0x69ad29(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   576907:       mov    %r12,%rdi
    0.00 :   57690a:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   57690f:       mov    $0xa0,%edi
    0.00 :   576914:       lea    0xb0(%rsp),%rbx
    0.00 :   57691c:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   576921:       mov    %rbx,%rdi
    0.00 :   576924:       lea    0x50(%rsp),%rcx
    0.00 :   576929:       mov    %rbp,%rsi
    0.00 :   57692c:       mov    %rax,%r12
    0.00 :   57692f:       lea    0x2aeed5(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   576936:       lea    0x60(%rsp),%rdx
    0.00 :   57693b:       mov    %rax,0x50(%rsp)
    0.00 :   576940:       lea    0x2aeec1(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   576947:       lea    0x30(%r14),%r8
    0.00 :   57694b:       mov    %rax,0x60(%rsp)
    0.00 :   576950:       lea    0x2aee9a(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   576957:       mov    %rax,0x80(%rsp)
    0.00 :   57695f:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   576964:       mov    %rbp,%rdi
    0.00 :   576967:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   57696c:       lea    0xd0(%rsp),%r13
    0.00 :   576974:       mov    %rbp,%r8
    0.00 :   576977:       lea    0x313442(%rip),%rcx        # 889dc0 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   57697e:       mov    $0x97,%edx
    0.00 :   576983:       lea    0x2aee86(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   57698a:       mov    %r13,%rdi
    0.00 :   57698d:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   576992:       mov    %rbx,%rcx
    0.00 :   576995:       lea    0x2aeeb4(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   57699c:       mov    %r13,%rsi
    0.00 :   57699f:       mov    %r12,%rdi
    0.00 :   5769a2:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5769a7:       jmpq   5768d3 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xbb3>
    0.00 :   5769ac:       mov    $0xa0,%edi
    0.00 :   5769b1:       lea    0xb0(%rsp),%rbx
    0.00 :   5769b9:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5769be:       mov    %rbx,%rdi
    0.00 :   5769c1:       lea    0x50(%rsp),%rcx
    0.00 :   5769c6:       mov    %rbp,%rsi
    0.00 :   5769c9:       mov    %rax,%r12
    0.00 :   5769cc:       lea    0x2aee38(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   5769d3:       lea    0x60(%rsp),%rdx
    0.00 :   5769d8:       mov    %rax,0x50(%rsp)
    0.00 :   5769dd:       lea    0x2aee24(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   5769e4:       lea    0x30(%r14),%r8
    0.00 :   5769e8:       mov    %rax,0x60(%rsp)
    0.00 :   5769ed:       lea    0x2aedfd(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   5769f4:       mov    %rax,0x80(%rsp)
    0.00 :   5769fc:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   576a01:       mov    %rbp,%rdi
    0.00 :   576a04:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   576a09:       lea    0xd0(%rsp),%r13
    0.00 :   576a11:       mov    %rbp,%r8
    0.00 :   576a14:       lea    0x3133a5(%rip),%rcx        # 889dc0 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   576a1b:       mov    $0x97,%edx
    0.00 :   576a20:       lea    0x2aede9(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   576a27:       mov    %r13,%rdi
    0.00 :   576a2a:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   576a2f:       mov    %rbx,%rcx
    0.00 :   576a32:       lea    0x2aee17(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   576a39:       mov    %r13,%rsi
    0.00 :   576a3c:       mov    %r12,%rdi
    0.00 :   576a3f:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   576a44:       jmpq   5768d3 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xbb3>
    0.00 :   576a49:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   576a4e:       mov    %rax,%rbx
    0.00 :   576a51:       jmp    576a58 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd38>
    0.00 :   576a53:       mov    %rax,%rbx
    0.00 :   576a56:       jmp    576a86 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd66>
         :            if (_M_manager)
    0.00 :   576a58:       mov    0xe0(%rsp),%rax
    0.00 :   576a60:       test   %rax,%rax
    0.00 :   576a63:       jne    576aa2 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd82>
    0.00 :   576a65:       lea    0x60(%rsp),%rdi
    0.00 :   576a6a:       callq  21f320 <std::unique_ptr<void, onnxruntime::BufferDeleter>::~unique_ptr()>
         :            if (_M_pi != nullptr)
    0.00 :   576a6f:       mov    0x58(%rsp),%rdi
    0.00 :   576a74:       test   %rdi,%rdi
    0.00 :   576a77:       je     576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            _M_pi->_M_release();
    0.00 :   576a79:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   576a7e:       mov    %rbx,%rdi
    0.00 :   576a81:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   576a86:       mov    0xe0(%rsp),%rax
    0.00 :   576a8e:       test   %rax,%rax
    0.00 :   576a91:       je     576a65 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd45>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   576a93:       mov    $0x3,%edx
    0.00 :   576a98:       mov    %r13,%rsi
    0.00 :   576a9b:       mov    %r13,%rdi
    0.00 :   576a9e:       callq  *%rax
    0.00 :   576aa0:       jmp    576a65 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd45>
    0.00 :   576aa2:       lea    0xd0(%rsp),%rdi
    0.00 :   576aaa:       mov    $0x3,%edx
    0.00 :   576aaf:       mov    %rdi,%rsi
    0.00 :   576ab2:       callq  *%rax
    0.00 :   576ab4:       jmp    576a65 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd45>
    0.00 :   576ab6:       mov    %rax,%r13
    0.00 :   576ab9:       jmp    576acb <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xdab>
    0.00 :   576abb:       mov    %rax,%r13
    0.00 :   576abe:       jmp    576ad3 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xdb3>
    0.00 :   576ac0:       mov    %r13,%rdi
    0.00 :   576ac3:       mov    %r14,%r13
    0.00 :   576ac6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   576acb:       mov    %rbp,%rdi
    0.00 :   576ace:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   576ad3:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   576adb:       add    $0x10,%rbx
    0.00 :   576adf:       cmp    %rbx,%rdi
    0.00 :   576ae2:       je     576ae9 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xdc9>
    0.00 :   576ae4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   576ae9:       mov    %r12,%rdi
    0.00 :   576aec:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   576af1:       mov    %r13,%rdi
    0.00 :   576af4:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   576af9:       mov    %rax,%rbx
    0.00 :   576afc:       jmp    576b03 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xde3>
    0.00 :   576afe:       mov    %rax,%rbx
    0.00 :   576b01:       jmp    576b1e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xdfe>
         :            if (__ptr != nullptr)
    0.00 :   576b03:       mov    0x80(%rsp),%rdi
    0.00 :   576b0b:       test   %rdi,%rdi
    0.00 :   576b0e:       je     576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
         :            get_deleter()(__ptr);
    0.00 :   576b14:       callq  ab8f4 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.80]>
    0.00 :   576b19:       jmpq   576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
         :            if (_M_pi != nullptr)
    0.00 :   576b1e:       cmpq   $0x0,0x8(%rsp)
    0.00 :   576b24:       je     576b30 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe10>
         :            _M_pi->_M_release();
    0.00 :   576b26:       mov    0x8(%rsp),%rdi
    0.00 :   576b2b:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            if (_M_pi != nullptr)
    0.00 :   576b30:       test   %r14,%r14
    0.00 :   576b33:       je     576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
         :            _M_pi->_M_release();
    0.00 :   576b39:       mov    %r14,%rdi
    0.00 :   576b3c:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   576b41:       jmpq   576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
    0.00 :   576b46:       mov    %rax,%r14
    0.00 :   576b49:       jmpq   576ac0 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xda0>
    0.00 :   576b4e:       jmp    576b46 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe26>
    0.00 :   576b50:       jmpq   576ab6 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd96>
    0.00 :   576b55:       jmpq   576abb <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd9b>
    0.00 :   576b5a:       mov    %rax,%rbx
    0.00 :   576b5d:       jmpq   576a65 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd45>
    0.00 :   576b62:       mov    %rax,%rbx
    0.00 :   576b65:       jmp    576b74 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe54>
    0.00 :   576b67:       mov    %rax,%rbx
    0.00 :   576b6a:       jmp    576b97 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe77>
    0.00 :   576b6c:       mov    %rax,%rbx
    0.00 :   576b6f:       jmpq   576a6f <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd4f>
         :            if (_M_manager)
    0.00 :   576b74:       mov    0xe0(%rsp),%rax
    0.00 :   576b7c:       test   %rax,%rax
    0.00 :   576b7f:       je     576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   576b85:       mov    $0x3,%edx
    0.00 :   576b8a:       mov    %r13,%rsi
    0.00 :   576b8d:       mov    %r13,%rdi
    0.00 :   576b90:       callq  *%rax
    0.00 :   576b92:       jmpq   576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            if (__ptr != nullptr)
    0.00 :   576b97:       mov    0x80(%rsp),%rdi
    0.00 :   576b9f:       test   %rdi,%rdi
    0.00 :   576ba2:       je     576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            get_deleter()(__ptr);
    0.00 :   576ba8:       callq  ab8f4 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.80]>
    0.00 :   576bad:       jmpq   576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
    0.00 :   576bb2:       mov    %rax,%rbx
    0.00 :   576bb5:       jmp    576bb9 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe99>
    0.00 :   576bb7:       jmp    576b46 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xe26>
         :            if (_M_manager)
    0.00 :   576bb9:       mov    0xe0(%rsp),%rax
    0.00 :   576bc1:       test   %rax,%rax
    0.00 :   576bc4:       je     576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   576bca:       lea    0xd0(%rsp),%rdi
    0.00 :   576bd2:       mov    $0x3,%edx
    0.00 :   576bd7:       mov    %rdi,%rsi
    0.00 :   576bda:       callq  *%rax
    0.00 :   576bdc:       jmpq   576a7e <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd5e>
    0.00 :   576be1:       jmpq   576ab6 <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd96>
    0.00 :   576be6:       jmpq   576abb <onnxruntime::contrib::BiasGelu<float, true>::Compute(onnxruntime::OpKernelContext*) const+0xd9b>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1123 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000028f040 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)>:
         :            _ZN5Eigen8internal26call_dense_assignment_loopINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_IKS4_Li0ES6_EESD_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_():
    0.42 :   28f040:       mov    (%rdi),%r8
    0.00 :   28f043:       mov    (%rsi),%r9
    0.00 :   28f046:       mov    0x18(%rsi),%r10
    0.00 :   28f04a:       mov    0x8(%rdi),%rsi
    0.00 :   28f04e:       test   $0x3,%r8b
    0.00 :   28f052:       jne    28f0f0 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0xb0>
    0.00 :   28f058:       mov    %r8,%rax
    0.00 :   28f05b:       mov    %rsi,%rcx
    0.00 :   28f05e:       shr    $0x2,%rax
    0.00 :   28f062:       neg    %rax
    0.00 :   28f065:       and    $0x3,%eax
    0.00 :   28f068:       cmp    %rsi,%rax
    0.00 :   28f06b:       cmovg  %rsi,%rax
    0.00 :   28f06f:       sub    %rax,%rcx
    0.00 :   28f072:       lea    0x3(%rcx),%rdx
    0.00 :   28f076:       cmovns %rcx,%rdx
    0.00 :   28f07a:       and    $0xfffffffffffffffc,%rdx
    0.00 :   28f07e:       add    %rax,%rdx
    0.00 :   28f081:       test   %rax,%rax
    0.00 :   28f084:       jle    28f0ab <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x6b>
    0.00 :   28f086:       xor    %ecx,%ecx
    0.00 :   28f088:       nopl   0x0(%rax,%rax,1)
    0.00 :   28f090:       movss  (%r10,%rcx,4),%xmm0
    0.00 :   28f096:       addss  (%r9,%rcx,4),%xmm0
    0.00 :   28f09c:       movss  %xmm0,(%r8,%rcx,4)
    0.00 :   28f0a2:       add    $0x1,%rcx
    0.00 :   28f0a6:       cmp    %rax,%rcx
    0.00 :   28f0a9:       jl     28f090 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x50>
    0.00 :   28f0ab:       cmp    %rax,%rdx
    0.00 :   28f0ae:       jle    28f0cb <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x8b>
         :            _mm_add_ps():
         :            /* Perform the respective operation on the four SPFP values in A and B.  */
         :
         :            extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_add_ps (__m128 __A, __m128 __B)
         :            {
         :            return (__m128) ((__v4sf)__A + (__v4sf)__B);
    6.06 :   28f0b0:       movups (%r10,%rax,4),%xmm0
   36.61 :   28f0b5:       movups (%r9,%rax,4),%xmm1
   37.09 :   28f0ba:       addps  %xmm1,%xmm0
         :            _mm_store_ps():
         :
         :            /* Store four SPFP values.  The address must be 16-byte aligned.  */
         :            extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_store_ps (float *__P, __m128 __A)
         :            {
         :            *(__m128 *)__P = __A;
   11.40 :   28f0bd:       movaps %xmm0,(%r8,%rax,4)
         :            _ZN5Eigen8internal26call_dense_assignment_loopINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_IKS4_Li0ES6_EESD_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_():
    8.33 :   28f0c2:       add    $0x4,%rax
    0.00 :   28f0c6:       cmp    %rdx,%rax
    0.00 :   28f0c9:       jl     28f0b0 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x70>
    0.00 :   28f0cb:       cmp    %rdx,%rsi
    0.00 :   28f0ce:       jle    28f108 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0xc8>
    0.00 :   28f0d0:       movss  (%r10,%rdx,4),%xmm0
    0.00 :   28f0d6:       addss  (%r9,%rdx,4),%xmm0
    0.00 :   28f0dc:       movss  %xmm0,(%r8,%rdx,4)
    0.00 :   28f0e2:       add    $0x1,%rdx
    0.00 :   28f0e6:       cmp    %rdx,%rsi
    0.00 :   28f0e9:       jne    28f0d0 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x90>
    0.00 :   28f0eb:       retq
    0.00 :   28f0ec:       nopl   0x0(%rax)
    0.00 :   28f0f0:       test   %rsi,%rsi
    0.00 :   28f0f3:       jle    28f100 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0xc0>
    0.00 :   28f0f5:       mov    %rsi,%rdx
    0.00 :   28f0f8:       mov    %rsi,%rax
    0.00 :   28f0fb:       jmp    28f086 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)+0x46>
    0.00 :   28f0fd:       nopl   (%rax)
    0.00 :   28f100:       retq
    0.00 :   28f101:       nopl   0x0(%rax)
    0.09 :   28f108:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (608 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004e7e90 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e7e90:       push   %r15
    0.00 :   4e7e92:       push   %r14
    0.00 :   4e7e94:       mov    %rdx,%r14
    0.00 :   4e7e97:       push   %r13
    0.00 :   4e7e99:       push   %r12
    0.00 :   4e7e9b:       push   %rbp
    0.00 :   4e7e9c:       push   %rbx
    0.00 :   4e7e9d:       sub    $0x2d8,%rsp
    0.00 :   4e7ea4:       mov    %rdi,0x8(%rsp)
    0.00 :   4e7ea9:       mov    %rdx,%rdi
    0.00 :   4e7eac:       mov    %rsi,(%rsp)
    0.00 :   4e7eb0:       xor    %esi,%esi
    0.00 :   4e7eb2:       mov    %fs:0x28,%rax
    0.00 :   4e7ebb:       mov    %rax,0x2c8(%rsp)
    0.00 :   4e7ec3:       xor    %eax,%eax
    0.00 :   4e7ec5:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   4e7eca:       mov    $0x1,%esi
    0.00 :   4e7ecf:       mov    %r14,%rdi
    0.00 :   4e7ed2:       mov    %rax,%rbp
    0.00 :   4e7ed5:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   4e7eda:       mov    $0x2,%esi
    0.00 :   4e7edf:       mov    %r14,%rdi
    0.00 :   4e7ee2:       mov    %rax,%r15
    0.00 :   4e7ee5:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   4e7eea:       mov    %rax,%r13
    0.00 :   4e7eed:       mov    %rax,0x20(%rsp)
    0.00 :   4e7ef2:       mov    0x30(%rbp),%rax
    0.00 :   4e7ef6:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e7efa:       jne    4e9493 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1603>
    0.00 :   4e7f00:       mov    0x50(%rbp),%rax
    0.00 :   4e7f04:       add    0x0(%rbp),%rax
    0.00 :   4e7f08:       mov    %rax,0x28(%rsp)
    0.00 :   4e7f0d:       mov    0x30(%r15),%rax
    0.10 :   4e7f11:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e7f15:       jne    4e93ab <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x151b>
    0.00 :   4e7f1b:       mov    0x50(%r15),%rax
    0.00 :   4e7f1f:       add    (%r15),%rax
    0.00 :   4e7f22:       mov    %rax,0x30(%rsp)
    0.00 :   4e7f27:       test   %r13,%r13
    0.00 :   4e7f2a:       je     4e7f45 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb5>
    0.00 :   4e7f2c:       mov    0x30(%r13),%rax
    0.00 :   4e7f30:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e7f34:       jne    4e916f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x12df>
    0.00 :   4e7f3a:       mov    0x50(%r13),%rax
    0.00 :   4e7f3e:       add    0x0(%r13),%rax
    0.00 :   4e7f42:       mov    %rax,%r13
    0.00 :   4e7f45:       mov    (%rsp),%rax
    0.00 :   4e7f49:       mov    %r13,0x38(%rsp)
    0.00 :   4e7f4e:       lea    0x18(%rbp),%rbx
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e7f52:       mov    0x20(%rbp),%r13
    0.00 :   4e7f56:       sub    0x18(%rbp),%r13
    0.00 :   4e7f5a:       sar    $0x3,%r13
    0.00 :   4e7f5e:       mov    0x10(%rax),%r12
    0.00 :   4e7f62:       mov    %r13,%rax
    0.00 :   4e7f65:       neg    %rax
    0.00 :   4e7f68:       cmp    %rax,%r12
    0.00 :   4e7f6b:       jl     4e8f76 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x10e6>
    0.00 :   4e7f71:       cmp    %r13,%r12
    0.00 :   4e7f74:       jge    4e8f76 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x10e6>
    0.00 :   4e7f7a:       add    %r12,%r13
    0.00 :   4e7f7d:       test   %r12,%r12
    0.00 :   4e7f80:       mov    %rbx,%rdi
    0.00 :   4e7f83:       cmovs  %r13,%r12
    0.00 :   4e7f87:       mov    %r12,%rsi
    0.00 :   4e7f8a:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   4e7f8f:       mov    %r12,%rsi
    0.00 :   4e7f92:       mov    %rbx,%rdi
    0.00 :   4e7f95:       mov    %rax,0x10(%rsp)
    0.00 :   4e7f9a:       callq  5f2a20 <onnxruntime::TensorShape::SizeFromDimension(unsigned long) const>
    0.00 :   4e7f9f:       xor    %esi,%esi
    0.00 :   4e7fa1:       mov    %rbx,%rdx
    0.00 :   4e7fa4:       mov    %r14,%rdi
    0.00 :   4e7fa7:       mov    %rax,0x40(%rsp)
    0.00 :   4e7fac:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
    0.00 :   4e7fb1:       mov    %rax,%r13
    0.00 :   4e7fb4:       mov    0x30(%rax),%rax
    0.00 :   4e7fb8:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e7fbc:       jne    4e9220 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1390>
    0.00 :   4e7fc2:       mov    0x50(%r13),%rax
    0.00 :   4e7fc6:       mov    0x20(%rbp),%rsi
    0.00 :   4e7fca:       add    0x0(%r13),%rax
    0.00 :   4e7fce:       sub    0x18(%rbp),%rsi
    0.00 :   4e7fd2:       lea    0x80(%rsp),%r13
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e7fda:       movq   $0x0,0x80(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e7fe6:       sar    $0x3,%rsi
    0.00 :   4e7fea:       mov    %r13,%rdi
    0.00 :   4e7fed:       mov    %rax,0x48(%rsp)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e7ff2:       movq   $0x0,0x88(%rsp)
    0.00 :   4e7ffe:       movq   $0x0,0x90(%rsp)
    0.00 :   4e800a:       callq  188ff0 <std::vector<long, std::allocator<long> >::reserve(unsigned long)>
    0.00 :   4e800f:       mov    0x18(%rbp),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e8013:       mov    0x20(%rbp),%rax
    0.00 :   4e8017:       xor    %ebx,%ebx
    0.00 :   4e8019:       lea    0xe0(%rsp),%r15
    0.00 :   4e8021:       sub    %rdx,%rax
    0.00 :   4e8024:       sar    $0x3,%rax
    0.00 :   4e8028:       test   %eax,%eax
    0.00 :   4e802a:       jg     4e8053 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1c3>
    0.00 :   4e802c:       jmp    4e8070 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1e0>
    0.00 :   4e802e:       xchg   %ax,%ax
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   4e8030:       lea    (%rdx,%rbx,8),%rsi
    0.00 :   4e8034:       mov    %r13,%rdi
    0.00 :   4e8037:       callq  4e54f0 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)>
    0.00 :   4e803c:       mov    0x18(%rbp),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e8040:       mov    0x20(%rbp),%rax
    0.00 :   4e8044:       add    $0x1,%rbx
    0.00 :   4e8048:       sub    %rdx,%rax
    0.00 :   4e804b:       sar    $0x3,%rax
    0.00 :   4e804f:       cmp    %ebx,%eax
    0.00 :   4e8051:       jle    4e8070 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1e0>
    0.00 :   4e8053:       cmp    %rbx,%r12
    0.00 :   4e8056:       jg     4e8030 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1a0>
    0.00 :   4e8058:       mov    %r15,%rsi
    0.00 :   4e805b:       mov    %r13,%rdi
    0.00 :   4e805e:       movl   $0x1,0xe0(%rsp)
    0.00 :   4e8069:       callq  4e5610 <void std::vector<long, std::allocator<long> >::emplace_back<int>(int&&)>
    0.00 :   4e806e:       jmp    4e803c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1ac>
    0.00 :   4e8070:       lea    0xe0(%rsp),%rbx
    0.00 :   4e8078:       lea    0x70(%rsp),%rdx
    0.00 :   4e807d:       mov    %r14,%rsi
    0.00 :   4e8080:       movq   $0x0,0x70(%rsp)
    0.00 :   4e8089:       movq   $0x0,0x78(%rsp)
    0.00 :   4e8092:       mov    %rbx,%rdi
    0.00 :   4e8095:       callq  5c7230 <onnxruntime::OpKernelContext::GetTempSpaceAllocator(std::shared_ptr<onnxruntime::IAllocator>*) const>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   4e809a:       mov    0xe0(%rsp),%rbp
    0.00 :   4e80a2:       test   %rbp,%rbp
    0.00 :   4e80a5:       je     4e8180 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x2f0>
    0.00 :   4e80ab:       mov    $0x4a,%r8d
    0.00 :   4e80b1:       lea    0x395a08(%rip),%rcx        # 87dac0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::__FUNCTION__>
    0.00 :   4e80b8:       mov    %rbx,%rsi
    0.00 :   4e80bb:       xor    %edi,%edi
    0.00 :   4e80bd:       lea    0x395644(%rip),%rdx        # 87d708 <typeinfo name for onnxruntime::contrib::Inverse::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}+0x48>
    0.00 :   4e80c4:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   4e80c9:       mov    0xe0(%rsp),%rax
    0.00 :   4e80d1:       mov    0x8(%rsp),%rcx
    0.00 :   4e80d6:       mov    %rax,(%rcx)
         :            // Does not throw if __r._M_get_use_count() == 0, caller must check.
         :            explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);
         :
         :            ~__shared_count() noexcept
         :            {
         :            if (_M_pi != nullptr)
    0.00 :   4e80d9:       mov    0x78(%rsp),%rbx
    0.00 :   4e80de:       test   %rbx,%rbx
    0.00 :   4e80e1:       je     4e8100 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x270>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   4e80e3:       mov    0x73fe1e(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e80ea:       test   %r12,%r12
    0.00 :   4e80ed:       je     4e8140 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x2b0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e80ef:       mov    $0xffffffff,%eax
    0.00 :   4e80f4:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e80f9:       cmp    $0x1,%eax
    0.00 :   4e80fc:       je     4e814e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x2be>
    0.00 :   4e80fe:       xchg   %ax,%ax
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e8100:       mov    0x80(%rsp),%rdi
         :            if (__p)
    0.00 :   4e8108:       test   %rdi,%rdi
    0.00 :   4e810b:       je     4e8112 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x282>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   4e810d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e8112:       mov    0x2c8(%rsp),%rcx
    0.18 :   4e811a:       xor    %fs:0x28,%rcx
    0.00 :   4e8123:       mov    0x8(%rsp),%rax
    0.00 :   4e8128:       jne    4e9544 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16b4>
    0.00 :   4e812e:       add    $0x2d8,%rsp
    0.00 :   4e8135:       pop    %rbx
    0.00 :   4e8136:       pop    %rbp
    0.00 :   4e8137:       pop    %r12
    0.00 :   4e8139:       pop    %r13
    0.00 :   4e813b:       pop    %r14
    0.00 :   4e813d:       pop    %r15
    0.00 :   4e813f:       retq
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8140:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e8143:       lea    -0x1(%rax),%edx
    0.00 :   4e8146:       mov    %edx,0x8(%rbx)
    0.00 :   4e8149:       cmp    $0x1,%eax
    0.00 :   4e814c:       jne    4e8100 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x270>
         :            _M_dispose();
    0.00 :   4e814e:       mov    (%rbx),%rax
    0.00 :   4e8151:       mov    %rbx,%rdi
    0.00 :   4e8154:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8157:       test   %r12,%r12
    0.00 :   4e815a:       je     4e885a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9ca>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8160:       mov    $0xffffffff,%eax
    0.00 :   4e8165:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e816a:       cmp    $0x1,%eax
    0.00 :   4e816d:       jne    4e8100 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x270>
         :            _M_destroy();
    0.00 :   4e816f:       mov    (%rbx),%rax
    0.00 :   4e8172:       mov    %rbx,%rdi
    0.00 :   4e8175:       callq  *0x18(%rax)
    0.00 :   4e8178:       jmp    4e8100 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x270>
    0.00 :   4e817a:       nopw   0x0(%rax,%rax,1)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   4e8180:       mov    0x88(%rsp),%rax
    0.00 :   4e8188:       mov    0x80(%rsp),%rsi
    0.00 :   4e8190:       movq   $0x0,0x50(%rsp)
         :            #if __cplusplus > 201402L
         :            using weak_type = __weak_ptr<_Tp, _Lp>;
         :            #endif
         :
         :            constexpr __shared_ptr() noexcept
         :            : _M_ptr(0), _M_refcount()
    0.00 :   4e8199:       movq   $0x0,0xa0(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   4e81a5:       movq   $0x0,0xa8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e81b1:       mov    %rax,%r12
         :            : _M_head_impl() { }
    0.00 :   4e81b4:       movq   $0x0,0xb0(%rsp)
    0.00 :   4e81c0:       sub    %rsi,%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e81c3:       movq   $0x0,0xe8(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e81cf:       mov    %r12,%rdx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e81d2:       movq   $0x0,0xf0(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e81de:       sar    $0x3,%rdx
    0.00 :   4e81e2:       je     4e8850 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9c0>
         :            if (__n > this->max_size())
    0.00 :   4e81e8:       movabs $0x1fffffffffffffff,%rax
    0.00 :   4e81f2:       cmp    %rax,%rdx
    0.00 :   4e81f5:       ja     4e954e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16be>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4e81fb:       mov    %r12,%rdi
    0.00 :   4e81fe:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4e8203:       mov    %rax,%rcx
    0.00 :   4e8206:       mov    0x88(%rsp),%rax
    0.00 :   4e820e:       mov    0x80(%rsp),%rsi
    0.00 :   4e8216:       mov    %rax,%r13
    0.00 :   4e8219:       sub    %rsi,%r13
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4e821c:       add    %rcx,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4e821f:       mov    %rcx,0xe0(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   4e8227:       mov    %rcx,0xe8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4e822f:       mov    %r12,0xf0(%rsp)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   4e8237:       cmp    %rax,%rsi
    0.00 :   4e823a:       je     4e824a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x3ba>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   4e823c:       mov    %rcx,%rdi
    0.00 :   4e823f:       mov    %r13,%rdx
    0.00 :   4e8242:       callq  53aa0 <memmove@plt>
    0.00 :   4e8247:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   4e824a:       add    %r13,%rcx
    0.00 :   4e824d:       mov    %rbx,%rdx
    0.00 :   4e8250:       mov    $0x1,%esi
    0.00 :   4e8255:       mov    %r14,%rdi
    0.00 :   4e8258:       mov    %rcx,0xe8(%rsp)
    0.00 :   4e8260:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e8265:       mov    0xe0(%rsp),%rdi
    0.00 :   4e826d:       mov    %rax,%r13
         :            if (__p)
    0.00 :   4e8270:       test   %rdi,%rdi
    0.00 :   4e8273:       je     4e827a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x3ea>
         :            ::operator delete(__p);
    0.00 :   4e8275:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e827a:       test   %r13,%r13
    0.00 :   4e827d:       je     4e87b0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x920>
    0.00 :   4e8283:       mov    0x30(%r13),%rax
    0.00 :   4e8287:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e828b:       jne    4e92d1 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1441>
    0.00 :   4e8291:       mov    0x50(%r13),%rax
    0.00 :   4e8295:       add    0x0(%r13),%rax
    0.00 :   4e8299:       mov    %rax,0x50(%rsp)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   4e829e:       mov    0x88(%rsp),%rax
    0.00 :   4e82a6:       mov    0x80(%rsp),%rsi
    0.00 :   4e82ae:       movq   $0x0,0x58(%rsp)
         :            : _M_ptr(0), _M_refcount()
    0.00 :   4e82b7:       movq   $0x0,0xc0(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   4e82c3:       movq   $0x0,0xc8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e82cf:       mov    %rax,%r12
    0.00 :   4e82d2:       movq   $0x0,0xd0(%rsp)
    0.00 :   4e82de:       sub    %rsi,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e82e1:       mov    %r12,%rdx
    0.00 :   4e82e4:       mov    %r12,%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e82e7:       movq   $0x0,0xe0(%rsp)
    0.00 :   4e82f3:       movq   $0x0,0xe8(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e82ff:       sar    $0x3,%rdx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4e8303:       movq   $0x0,0xf0(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e830f:       je     4e8345 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x4b5>
         :            if (__n > this->max_size())
    0.00 :   4e8311:       movabs $0x1fffffffffffffff,%rax
    0.00 :   4e831b:       cmp    %rax,%rdx
    0.00 :   4e831e:       ja     4e9549 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16b9>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4e8324:       mov    %r12,%rdi
    0.00 :   4e8327:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4e832c:       mov    %rax,%rbp
    0.00 :   4e832f:       mov    0x88(%rsp),%rax
    0.00 :   4e8337:       mov    0x80(%rsp),%rsi
    0.00 :   4e833f:       mov    %rax,%r13
    0.00 :   4e8342:       sub    %rsi,%r13
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4e8345:       add    %rbp,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4e8348:       mov    %rbp,0xe0(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   4e8350:       mov    %rbp,0xe8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4e8358:       mov    %r12,0xf0(%rsp)
         :            if (_Num)
    0.00 :   4e8360:       cmp    %rax,%rsi
    0.00 :   4e8363:       je     4e8370 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x4e0>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   4e8365:       mov    %r13,%rdx
    0.00 :   4e8368:       mov    %rbp,%rdi
    0.00 :   4e836b:       callq  53aa0 <memmove@plt>
         :            return __result + _Num;
    0.00 :   4e8370:       add    %r13,%rbp
    0.00 :   4e8373:       mov    %rbx,%rdx
    0.00 :   4e8376:       mov    $0x2,%esi
    0.00 :   4e837b:       mov    %r14,%rdi
    0.00 :   4e837e:       mov    %rbp,0xe8(%rsp)
    0.00 :   4e8386:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e838b:       mov    0xe0(%rsp),%rdi
    0.00 :   4e8393:       mov    %rax,%rbp
         :            if (__p)
    0.00 :   4e8396:       test   %rdi,%rdi
    0.00 :   4e8399:       je     4e83a0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x510>
         :            ::operator delete(__p);
    0.00 :   4e839b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e83a0:       test   %rbp,%rbp
    0.00 :   4e83a3:       je     4e8797 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x907>
    0.00 :   4e83a9:       mov    0x30(%rbp),%rax
    0.00 :   4e83ad:       cmpl   $0x1,0x8(%rax)
    0.00 :   4e83b1:       jne    4e9091 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1201>
    0.00 :   4e83b7:       mov    0x50(%rbp),%rax
    0.00 :   4e83bb:       add    0x0(%rbp),%rax
    0.00 :   4e83bf:       mov    %rax,0x58(%rsp)
    0.00 :   4e83c4:       mov    (%rsp),%rax
    0.00 :   4e83c8:       mov    0x18(%r14),%r12
    0.00 :   4e83cc:       lea    0x40(%rsp),%rcx
    0.00 :   4e83d1:       lea    0x28(%rsp),%rdx
    0.00 :   4e83d6:       lea    0x48(%rsp),%rsi
    0.00 :   4e83db:       mov    %rcx,0xe0(%rsp)
    0.00 :   4e83e3:       mov    %rax,0xe8(%rsp)
    0.00 :   4e83eb:       lea    0x20(%rsp),%rax
    0.00 :   4e83f0:       mov    %rax,0xf0(%rsp)
    0.00 :   4e83f8:       lea    0x30(%rsp),%rax
    0.00 :   4e83fd:       mov    %rax,0x108(%rsp)
    0.00 :   4e8405:       lea    0x38(%rsp),%rax
    0.00 :   4e840a:       mov    %rax,0x110(%rsp)
    0.00 :   4e8412:       lea    0x50(%rsp),%rax
    0.00 :   4e8417:       mov    %rax,0x118(%rsp)
    0.00 :   4e841f:       lea    0x58(%rsp),%rax
    0.00 :   4e8424:       mov    %rax,0x120(%rsp)
    0.00 :   4e842c:       movslq 0x10(%rsp),%rax
    0.00 :   4e8431:       mov    %rdx,0xf8(%rsp)
    0.00 :   4e8439:       mov    %rsi,0x100(%rsp)
    0.00 :   4e8441:       mov    %rax,0x60(%rsp)
    0.00 :   4e8446:       movq   $0x0,0x68(%rsp)
    0.00 :   4e844f:       test   %r12,%r12
    0.00 :   4e8452:       je     4e8900 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xa70>
    0.00 :   4e8458:       test   %rax,%rax
    0.00 :   4e845b:       jle    4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
    0.00 :   4e8461:       cmp    $0x1,%rax
    0.00 :   4e8465:       je     4e8cfa <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe6a>
    0.00 :   4e846b:       mov    %r12,%rdi
    0.00 :   4e846e:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            if (__b < __a)
    0.00 :   4e8473:       mov    0x60(%rsp),%rdx
    0.00 :   4e8478:       cltq
    0.00 :   4e847a:       cmp    %rdx,%rax
    0.00 :   4e847d:       cmovg  %rdx,%rax
    0.00 :   4e8481:       mov    %rax,0x68(%rsp)
    0.00 :   4e8486:       cmp    $0x1,%rax
    0.00 :   4e848a:       jle    4e863b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x7ab>
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
         :            { ::new (__functor._M_access()) _Functor(std::move(__f)); }
         :
         :            static void
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   4e8490:       mov    $0x18,%edi
         :            };
         :
         :            _Function_base() : _M_manager(nullptr) { }
    0.00 :   4e8495:       movq   $0x0,0x160(%rsp)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   4e84a1:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4e84a6:       lea    0x68(%rsp),%rdx
    0.00 :   4e84ab:       mov    %rbx,0x10(%rax)
    0.00 :   4e84af:       mov    %r12,%rdi
    0.00 :   4e84b2:       lea    0x150(%rsp),%rbp
    0.00 :   4e84ba:       mov    %rdx,(%rax)
    0.00 :   4e84bd:       lea    0x60(%rsp),%rdx
    0.00 :   4e84c2:       mov    0x68(%rsp),%rsi
    0.00 :   4e84c7:       mov    %rdx,0x8(%rax)
    0.00 :   4e84cb:       mov    %rbp,%rdx
    0.00 :   4e84ce:       mov    %rax,0x150(%rsp)
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   4e84d6:       lea    -0x4bfd(%rip),%rax        # 4e38e0 <std::_Function_handler<void (long), onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   4e84dd:       mov    %rax,0x168(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   4e84e5:       lea    -0x504c(%rip),%rax        # 4e34a0 <std::_Function_base::_Base_manager<onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_manager(std::_Any_data&, onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1} const&, std::_Manager_operation)>
    0.00 :   4e84ec:       mov    %rax,0x160(%rsp)
    0.00 :   4e84f4:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
         :            if (_M_manager)
    0.00 :   4e84f9:       mov    0x160(%rsp),%rax
    0.00 :   4e8501:       test   %rax,%rax
    0.00 :   4e8504:       je     4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   4e8506:       mov    $0x3,%edx
    0.00 :   4e850b:       mov    %rbp,%rsi
    0.00 :   4e850e:       mov    %rbp,%rdi
    0.00 :   4e8511:       callq  *%rax
    0.00 :   4e8513:       mov    0x8(%rsp),%rax
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   4e8518:       mov    0xd0(%rsp),%rsi
    0.00 :   4e8520:       movq   $0x0,(%rax)
    0.00 :   4e8527:       test   %rsi,%rsi
    0.00 :   4e852a:       je     4e853f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x6af>
    0.00 :   4e852c:       mov    0xc0(%rsp),%rdi
    0.00 :   4e8534:       test   %rdi,%rdi
    0.00 :   4e8537:       je     4e853f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x6af>
    0.00 :   4e8539:       mov    (%rdi),%rax
    0.00 :   4e853c:       callq  *0x18(%rax)
         :            if (_M_pi != nullptr)
    0.00 :   4e853f:       mov    0xc8(%rsp),%rbx
         :            get_deleter()(__ptr);
         :            __ptr = pointer();
    0.00 :   4e8547:       movq   $0x0,0xd0(%rsp)
    0.00 :   4e8553:       test   %rbx,%rbx
    0.00 :   4e8556:       je     4e85a8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x718>
         :            if (__gthread_active_p())
    0.00 :   4e8558:       mov    0x73f9a9(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e855f:       test   %r12,%r12
    0.00 :   4e8562:       je     4e8876 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9e6>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8568:       mov    $0xffffffff,%eax
    0.00 :   4e856d:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8572:       cmp    $0x1,%eax
    0.00 :   4e8575:       jne    4e85a8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x718>
         :            _M_dispose();
    0.00 :   4e8577:       mov    (%rbx),%rax
    0.00 :   4e857a:       mov    %rbx,%rdi
    0.00 :   4e857d:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8580:       test   %r12,%r12
    0.00 :   4e8583:       je     4e8c1e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd8e>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8589:       mov    $0xffffffff,%eax
    0.00 :   4e858e:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8593:       cmp    $0x1,%eax
    0.00 :   4e8596:       jne    4e85a8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x718>
         :            _M_destroy();
    0.00 :   4e8598:       mov    (%rbx),%rax
    0.00 :   4e859b:       mov    %rbx,%rdi
    0.00 :   4e859e:       callq  *0x18(%rax)
    0.00 :   4e85a1:       nopl   0x0(%rax)
         :            if (__ptr != nullptr)
    0.00 :   4e85a8:       mov    0xb0(%rsp),%rsi
    0.00 :   4e85b0:       test   %rsi,%rsi
    0.00 :   4e85b3:       je     4e85c8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x738>
    0.00 :   4e85b5:       mov    0xa0(%rsp),%rdi
    0.00 :   4e85bd:       test   %rdi,%rdi
    0.00 :   4e85c0:       je     4e85c8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x738>
    0.00 :   4e85c2:       mov    (%rdi),%rax
    0.00 :   4e85c5:       callq  *0x18(%rax)
         :            if (_M_pi != nullptr)
    0.00 :   4e85c8:       mov    0xa8(%rsp),%rbx
         :            __ptr = pointer();
    0.00 :   4e85d0:       movq   $0x0,0xb0(%rsp)
    0.00 :   4e85dc:       test   %rbx,%rbx
    0.00 :   4e85df:       je     4e80d9 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x249>
         :            if (__gthread_active_p())
    0.00 :   4e85e5:       mov    0x73f91c(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e85ec:       test   %r12,%r12
    0.00 :   4e85ef:       je     4e8868 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9d8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e85f5:       mov    $0xffffffff,%eax
    0.00 :   4e85fa:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e85ff:       cmp    $0x1,%eax
    0.00 :   4e8602:       jne    4e80d9 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x249>
         :            _M_dispose();
    0.00 :   4e8608:       mov    (%rbx),%rax
    0.00 :   4e860b:       mov    %rbx,%rdi
    0.00 :   4e860e:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8611:       test   %r12,%r12
    0.00 :   4e8614:       je     4e8c10 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd80>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e861a:       mov    $0xffffffff,%eax
    0.00 :   4e861f:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8624:       cmp    $0x1,%eax
    0.00 :   4e8627:       jne    4e80d9 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x249>
         :            _M_destroy();
    0.00 :   4e862d:       mov    (%rbx),%rax
    0.00 :   4e8630:       mov    %rbx,%rdi
    0.00 :   4e8633:       callq  *0x18(%rax)
    0.00 :   4e8636:       jmpq   4e80d9 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x249>
    0.00 :   4e863b:       test   %rdx,%rdx
    0.00 :   4e863e:       jle    4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
    0.00 :   4e8644:       mov    0xe0(%rsp),%r9
    0.00 :   4e864c:       movss  0x33e750(%rip),%xmm3        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   4e8654:       xor    %r12d,%r12d
    0.00 :   4e8657:       pxor   %xmm2,%xmm2
    0.00 :   4e865b:       nopl   0x0(%rax,%rax,1)
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8660:       mov    (%r9),%r8
    0.00 :   4e8663:       mov    %r12,%rbx
    0.00 :   4e8666:       mov    0xf8(%rsp),%rax
    0.00 :   4e866e:       pxor   %xmm6,%xmm6
    0.00 :   4e8672:       imul   %r8,%rbx
    0.00 :   4e8676:       mov    (%rax),%rbp
    0.00 :   4e8679:       mov    0x100(%rsp),%rax
    0.00 :   4e8681:       cvtsi2ss %r8,%xmm6
    0.00 :   4e8686:       shl    $0x2,%rbx
    0.00 :   4e868a:       add    %rbx,%rbp
    0.00 :   4e868d:       add    (%rax),%rbx
    0.00 :   4e8690:       mov    0xe8(%rsp),%rax
    0.00 :   4e8698:       movss  0x18(%rax),%xmm0
    0.00 :   4e869d:       test   %r8,%r8
    0.00 :   4e86a0:       jle    4e8884 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x9f4>
    0.00 :   4e86a6:       lea    0x0(%rbp,%r8,4),%rdx
    0.00 :   4e86ab:       pxor   %xmm4,%xmm4
    0.00 :   4e86af:       pxor   %xmm5,%xmm5
    0.00 :   4e86b3:       mov    %rbp,%rax
    0.00 :   4e86b6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   4e86c0:       movss  (%rax),%xmm1
    0.00 :   4e86c4:       add    $0x4,%rax
    0.00 :   4e86c8:       addss  %xmm1,%xmm5
    0.00 :   4e86cc:       mulss  %xmm1,%xmm1
    0.00 :   4e86d0:       addss  %xmm1,%xmm4
    0.00 :   4e86d4:       cmp    %rax,%rdx
    0.00 :   4e86d7:       jne    4e86c0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x830>
    0.00 :   4e86d9:       divss  %xmm6,%xmm5
    0.00 :   4e86dd:       divss  %xmm6,%xmm4
    0.00 :   4e86e1:       movaps %xmm5,%xmm1
    0.00 :   4e86e4:       mulss  %xmm5,%xmm1
    0.00 :   4e86e8:       subss  %xmm1,%xmm4
    0.00 :   4e86ec:       addss  %xmm4,%xmm0
    0.00 :   4e86f0:       ucomiss %xmm0,%xmm2
    0.00 :   4e86f3:       sqrtss %xmm0,%xmm1
    0.00 :   4e86f7:       ja     4e88aa <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xa1a>
    0.00 :   4e86fd:       mov    0xf0(%rsp),%rax
    0.00 :   4e8705:       mov    0x110(%rsp),%rdi
    0.00 :   4e870d:       mov    (%rax),%rsi
    0.00 :   4e8710:       mov    0x108(%rsp),%rax
    0.00 :   4e8718:       mov    (%rax),%rcx
    0.00 :   4e871b:       xor    %eax,%eax
    0.00 :   4e871d:       nopl   (%rax)
    0.00 :   4e8720:       movss  0x0(%rbp,%rax,4),%xmm0
    0.00 :   4e8726:       subss  %xmm5,%xmm0
    0.00 :   4e872a:       divss  %xmm1,%xmm0
    0.00 :   4e872e:       mulss  (%rcx,%rax,4),%xmm0
    0.00 :   4e8733:       test   %rsi,%rsi
    0.00 :   4e8736:       je     4e8740 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x8b0>
    0.00 :   4e8738:       mov    (%rdi),%rdx
    0.00 :   4e873b:       addss  (%rdx,%rax,4),%xmm0
    0.00 :   4e8740:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   4e8745:       add    $0x1,%rax
    0.00 :   4e8749:       cmp    %rax,%r8
    0.00 :   4e874c:       jg     4e8720 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x890>
    0.00 :   4e874e:       mov    0x118(%rsp),%rax
    0.00 :   4e8756:       lea    0x0(,%r12,4),%rdx
    0.00 :   4e875e:       mov    (%rax),%rax
    0.00 :   4e8761:       test   %rax,%rax
    0.00 :   4e8764:       je     4e876c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x8dc>
    0.00 :   4e8766:       movss  %xmm5,(%rax,%r12,4)
    0.00 :   4e876c:       movaps %xmm3,%xmm0
    0.00 :   4e876f:       mov    0x120(%rsp),%rax
    0.00 :   4e8777:       add    $0x1,%r12
    0.00 :   4e877b:       divss  %xmm1,%xmm0
    0.00 :   4e877f:       mov    (%rax),%rax
    0.00 :   4e8782:       movss  %xmm0,(%rax,%rdx,1)
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8787:       cmp    %r12,0x60(%rsp)
    0.00 :   4e878c:       jg     4e8660 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x7d0>
    0.00 :   4e8792:       jmpq   4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    0.00 :   4e8797:       mov    0x70(%rsp),%rdi
    0.00 :   4e879c:       cmpq   $0x0,0x10(%rsp)
    0.00 :   4e87a2:       mov    (%rdi),%rax
    0.00 :   4e87a5:       mov    0x10(%rax),%rdx
    0.00 :   4e87a9:       jns    4e87d0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x940>
    0.00 :   4e87ab:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.19 :   4e87b0:       mov    0x70(%rsp),%rdi
    0.00 :   4e87b5:       cmpq   $0x0,0x10(%rsp)
    0.00 :   4e87bb:       mov    (%rdi),%rax
    0.00 :   4e87be:       mov    0x10(%rax),%rdx
    0.13 :   4e87c2:       jns    4e8810 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x980>
    0.00 :   4e87c4:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e87c9:       nopl   0x0(%rax)
    0.00 :   4e87d0:       mov    0x10(%rsp),%rcx
    0.00 :   4e87d5:       mov    %rcx,%rax
    0.00 :   4e87d8:       shr    $0x20,%rax
    0.00 :   4e87dc:       je     4e8b3a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xcaa>
    0.00 :   4e87e2:       mov    %rax,%rcx
    0.00 :   4e87e5:       shr    $0x1e,%rcx
    0.00 :   4e87e9:       jne    4e916a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x12da>
    0.00 :   4e87ef:       mov    0x10(%rsp),%esi
    0.00 :   4e87f3:       shl    $0x22,%rax
    0.00 :   4e87f7:       shl    $0x2,%rsi
    0.00 :   4e87fb:       add    %rsi,%rax
    0.00 :   4e87fe:       mov    %rax,%rsi
    0.00 :   4e8801:       jae    4e8b42 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xcb2>
    0.00 :   4e8807:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e880c:       nopl   0x0(%rax)
    0.00 :   4e8810:       mov    0x10(%rsp),%rcx
    0.00 :   4e8815:       mov    %rcx,%rax
    0.00 :   4e8818:       shr    $0x20,%rax
    0.00 :   4e881c:       je     4e8a63 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xbd3>
    0.00 :   4e8822:       mov    %rax,%rcx
    0.00 :   4e8825:       shr    $0x1e,%rcx
    0.00 :   4e8829:       jne    4e9165 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x12d5>
    0.00 :   4e882f:       mov    0x10(%rsp),%esi
    0.00 :   4e8833:       shl    $0x22,%rax
    0.00 :   4e8837:       shl    $0x2,%rsi
    0.00 :   4e883b:       add    %rsi,%rax
    0.00 :   4e883e:       mov    %rax,%rsi
    0.00 :   4e8841:       jae    4e8a6b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xbdb>
    0.00 :   4e8847:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e884c:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e8850:       mov    %r12,%r13
    0.00 :   4e8853:       xor    %ecx,%ecx
    0.00 :   4e8855:       jmpq   4e821c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x38c>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e885a:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e885d:       lea    -0x1(%rax),%edx
    0.00 :   4e8860:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   4e8863:       jmpq   4e816a <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x2da>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8868:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e886b:       lea    -0x1(%rax),%edx
    0.00 :   4e886e:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   4e8871:       jmpq   4e85ff <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x76f>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8876:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e8879:       lea    -0x1(%rax),%edx
    0.00 :   4e887c:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   4e887f:       jmpq   4e8572 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x6e2>
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8884:       movaps %xmm2,%xmm5
    0.00 :   4e8887:       divss  %xmm6,%xmm5
    0.00 :   4e888b:       movaps %xmm5,%xmm1
    0.00 :   4e888e:       movaps %xmm5,%xmm4
    0.00 :   4e8891:       mulss  %xmm5,%xmm1
    0.00 :   4e8895:       subss  %xmm1,%xmm4
    0.00 :   4e8899:       addss  %xmm4,%xmm0
    0.00 :   4e889d:       ucomiss %xmm0,%xmm2
    0.00 :   4e88a0:       sqrtss %xmm0,%xmm1
    0.00 :   4e88a4:       jbe    4e874e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x8be>
    0.00 :   4e88aa:       movss  %xmm3,0x1c(%rsp)
    0.00 :   4e88b0:       movss  %xmm2,0x18(%rsp)
    0.00 :   4e88b6:       movss  %xmm1,0x10(%rsp)
    0.00 :   4e88bc:       movss  %xmm5,(%rsp)
    0.00 :   4e88c1:       callq  53cd0 <sqrtf@plt>
    0.00 :   4e88c6:       movss  (%rsp),%xmm5
    0.00 :   4e88cb:       mov    0xe0(%rsp),%r9
    0.00 :   4e88d3:       movss  0x10(%rsp),%xmm1
    0.00 :   4e88d9:       movss  0x18(%rsp),%xmm2
    0.00 :   4e88df:       mov    (%r9),%r8
    0.00 :   4e88e2:       movss  0x1c(%rsp),%xmm3
    0.00 :   4e88e8:       test   %r8,%r8
    0.00 :   4e88eb:       jg     4e86fd <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x86d>
    0.00 :   4e88f1:       jmpq   4e874e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x8be>
    0.00 :   4e88f6:       nopw   %cs:0x0(%rax,%rax,1)
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8900:       test   %rax,%rax
    0.00 :   4e8903:       jle    4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
    0.00 :   4e8909:       movss  0x33e493(%rip),%xmm3        # 826da4 <std::piecewise_construct+0x4>
    0.19 :   4e8911:       mov    %rdx,%rax
    0.00 :   4e8914:       pxor   %xmm2,%xmm2
    0.00 :   4e8918:       nopl   0x0(%rax,%rax,1)
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8920:       mov    (%rcx),%r8
    0.00 :   4e8923:       mov    (%rax),%rbp
    0.00 :   4e8926:       pxor   %xmm6,%xmm6
    0.00 :   4e892a:       mov    (%rsp),%rax
    0.00 :   4e892e:       mov    %r8,%rbx
    0.00 :   4e8931:       cvtsi2ss %r8,%xmm6
    0.00 :   4e8936:       imul   %r12,%rbx
    0.00 :   4e893a:       movss  0x18(%rax),%xmm0
    0.00 :   4e893f:       shl    $0x2,%rbx
    0.00 :   4e8943:       add    %rbx,%rbp
    0.00 :   4e8946:       add    (%rsi),%rbx
    0.00 :   4e8949:       test   %r8,%r8
    0.00 :   4e894c:       jle    4e8c2c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd9c>
    0.00 :   4e8952:       lea    0x0(%rbp,%r8,4),%rdx
    0.00 :   4e8957:       pxor   %xmm4,%xmm4
    0.00 :   4e895b:       pxor   %xmm5,%xmm5
    0.00 :   4e895f:       mov    %rbp,%rax
    0.00 :   4e8962:       nopw   0x0(%rax,%rax,1)
    0.00 :   4e8968:       movss  (%rax),%xmm1
    0.17 :   4e896c:       add    $0x4,%rax
    0.00 :   4e8970:       addss  %xmm1,%xmm5
   13.39 :   4e8974:       mulss  %xmm1,%xmm1
    0.00 :   4e8978:       addss  %xmm1,%xmm4
   31.76 :   4e897c:       cmp    %rax,%rdx
    0.00 :   4e897f:       jne    4e8968 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xad8>
    0.00 :   4e8981:       divss  %xmm6,%xmm5
    0.00 :   4e8985:       divss  %xmm6,%xmm4
    0.00 :   4e8989:       movaps %xmm5,%xmm1
    0.00 :   4e898c:       mulss  %xmm5,%xmm1
    0.00 :   4e8990:       subss  %xmm1,%xmm4
    0.00 :   4e8994:       addss  %xmm4,%xmm0
    0.00 :   4e8998:       ucomiss %xmm0,%xmm2
    0.00 :   4e899b:       sqrtss %xmm0,%xmm1
    0.00 :   4e899f:       ja     4e8c52 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xdc2>
    0.00 :   4e89a5:       mov    0xf0(%rsp),%rax
    0.00 :   4e89ad:       mov    0x110(%rsp),%rdi
    0.00 :   4e89b5:       mov    (%rax),%rsi
    0.00 :   4e89b8:       mov    0x108(%rsp),%rax
    0.00 :   4e89c0:       mov    (%rax),%rcx
    0.00 :   4e89c3:       xor    %eax,%eax
    0.00 :   4e89c5:       nopl   (%rax)
    0.14 :   4e89c8:       movss  0x0(%rbp,%rax,4),%xmm0
    0.00 :   4e89ce:       subss  %xmm5,%xmm0
   12.71 :   4e89d2:       divss  %xmm1,%xmm0
    0.33 :   4e89d6:       mulss  (%rcx,%rax,4),%xmm0
    0.54 :   4e89db:       test   %rsi,%rsi
    0.00 :   4e89de:       je     4e89e8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb58>
    0.00 :   4e89e0:       mov    (%rdi),%rdx
   14.56 :   4e89e3:       addss  (%rdx,%rax,4),%xmm0
   12.79 :   4e89e8:       movss  %xmm0,(%rbx,%rax,4)
   12.34 :   4e89ed:       add    $0x1,%rax
    0.16 :   4e89f1:       cmp    %r8,%rax
    0.00 :   4e89f4:       jl     4e89c8 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb38>
    0.00 :   4e89f6:       mov    0x118(%rsp),%rax
    0.00 :   4e89fe:       lea    0x0(,%r12,4),%rdx
    0.00 :   4e8a06:       mov    (%rax),%rax
    0.00 :   4e8a09:       test   %rax,%rax
    0.00 :   4e8a0c:       je     4e8a14 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb84>
    0.17 :   4e8a0e:       movss  %xmm5,(%rax,%r12,4)
    0.14 :   4e8a14:       movaps %xmm3,%xmm0
    0.00 :   4e8a17:       mov    0x120(%rsp),%rax
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8a1f:       add    $0x1,%r12
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8a23:       divss  %xmm1,%xmm0
    0.00 :   4e8a27:       mov    (%rax),%rax
    0.00 :   4e8a2a:       movss  %xmm0,(%rax,%rdx,1)
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8a2f:       cmp    %r12,0x60(%rsp)
    0.00 :   4e8a34:       jle    4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
    0.00 :   4e8a3a:       mov    0xe8(%rsp),%rax
    0.00 :   4e8a42:       mov    0xe0(%rsp),%rcx
    0.00 :   4e8a4a:       mov    0x100(%rsp),%rsi
    0.00 :   4e8a52:       mov    %rax,(%rsp)
    0.00 :   4e8a56:       mov    0xf8(%rsp),%rax
    0.00 :   4e8a5e:       jmpq   4e8920 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xa90>
    0.00 :   4e8a63:       lea    0x0(,%rcx,4),%rsi
    0.00 :   4e8a6b:       callq  *%rdx
         :            : _M_pi(__r._M_pi)
    0.00 :   4e8a6d:       mov    0x78(%rsp),%r13
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   4e8a72:       mov    0x70(%rsp),%r12
         :            if (_M_pi != 0)
    0.00 :   4e8a77:       test   %r13,%r13
    0.00 :   4e8a7a:       je     4e8a96 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc06>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   4e8a7c:       cmpq   $0x0,0x73f484(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   4e8a84:       lea    0x8(%r13),%rdx
    0.00 :   4e8a88:       je     4e8cad <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe1d>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8a8e:       lock addl $0x1,(%rdx)
    0.00 :   4e8a92:       lock addl $0x1,(%rdx)
         :            #endif
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   4e8a96:       mov    0xb0(%rsp),%rsi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   4e8a9e:       mov    %rax,0xb0(%rsp)
         :            void
         :            reset(pointer __p = pointer()) noexcept
         :            {
         :            using std::swap;
         :            swap(_M_t._M_ptr(), __p);
         :            if (__p != pointer())
    0.00 :   4e8aa6:       test   %rsi,%rsi
    0.00 :   4e8aa9:       je     4e8abe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc2e>
    0.00 :   4e8aab:       mov    0xa0(%rsp),%rdi
    0.00 :   4e8ab3:       test   %rdi,%rdi
    0.00 :   4e8ab6:       je     4e8abe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc2e>
    0.00 :   4e8ab8:       mov    (%rdi),%rax
    0.00 :   4e8abb:       callq  *0x18(%rax)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   4e8abe:       mov    0xa8(%rsp),%r15
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   4e8ac6:       mov    %r12,0xa0(%rsp)
         :            __r._M_pi = _M_pi;
    0.00 :   4e8ace:       mov    %r13,0xa8(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   4e8ad6:       test   %r15,%r15
    0.00 :   4e8ad9:       je     4e8aff <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc6f>
         :            if (__gthread_active_p())
    0.00 :   4e8adb:       mov    0x73f426(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e8ae2:       test   %r12,%r12
    0.00 :   4e8ae5:       je     4e8cbc <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe2c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8aeb:       mov    $0xffffffff,%eax
    0.00 :   4e8af0:       lock xadd %eax,0x8(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8af6:       cmp    $0x1,%eax
    0.00 :   4e8af9:       je     4e8e6d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xfdd>
         :            if (_M_pi != nullptr)
    0.00 :   4e8aff:       test   %r13,%r13
    0.00 :   4e8b02:       je     4e8b28 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc98>
         :            if (__gthread_active_p())
    0.00 :   4e8b04:       mov    0x73f3fd(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e8b0b:       test   %r12,%r12
    0.00 :   4e8b0e:       je     4e8ccc <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe3c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8b14:       mov    $0xffffffff,%eax
    0.00 :   4e8b19:       lock xadd %eax,0x8(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8b1f:       cmp    $0x1,%eax
    0.00 :   4e8b22:       je     4e8e37 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xfa7>
    0.00 :   4e8b28:       mov    0xb0(%rsp),%rax
    0.00 :   4e8b30:       mov    %rax,0x50(%rsp)
    0.00 :   4e8b35:       jmpq   4e829e <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x40e>
    0.00 :   4e8b3a:       lea    0x0(,%rcx,4),%rsi
    0.00 :   4e8b42:       callq  *%rdx
         :            : _M_pi(__r._M_pi)
    0.00 :   4e8b44:       mov    0x78(%rsp),%rbp
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   4e8b49:       mov    0x70(%rsp),%r12
         :            if (_M_pi != 0)
    0.00 :   4e8b4e:       test   %rbp,%rbp
    0.00 :   4e8b51:       je     4e8b6d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xcdd>
         :            if (__gthread_active_p())
    0.00 :   4e8b53:       cmpq   $0x0,0x73f3ad(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   4e8b5b:       lea    0x8(%rbp),%rdx
    0.00 :   4e8b5f:       je     4e8ca0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe10>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8b65:       lock addl $0x1,(%rdx)
    0.00 :   4e8b69:       lock addl $0x1,(%rdx)
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   4e8b6d:       mov    0xd0(%rsp),%rsi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   4e8b75:       mov    %rax,0xd0(%rsp)
    0.00 :   4e8b7d:       test   %rsi,%rsi
    0.00 :   4e8b80:       je     4e8b95 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd05>
    0.00 :   4e8b82:       mov    0xc0(%rsp),%rdi
    0.00 :   4e8b8a:       test   %rdi,%rdi
    0.00 :   4e8b8d:       je     4e8b95 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd05>
    0.00 :   4e8b8f:       mov    (%rdi),%rax
    0.00 :   4e8b92:       callq  *0x18(%rax)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   4e8b95:       mov    0xc8(%rsp),%r13
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   4e8b9d:       mov    %r12,0xc0(%rsp)
         :            __r._M_pi = _M_pi;
    0.00 :   4e8ba5:       mov    %rbp,0xc8(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   4e8bad:       test   %r13,%r13
    0.00 :   4e8bb0:       je     4e8bd6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd46>
         :            if (__gthread_active_p())
    0.00 :   4e8bb2:       mov    0x73f34f(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e8bb9:       test   %r12,%r12
    0.00 :   4e8bbc:       je     4e8cdc <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe4c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8bc2:       mov    $0xffffffff,%eax
    0.00 :   4e8bc7:       lock xadd %eax,0x8(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8bcd:       cmp    $0x1,%eax
    0.00 :   4e8bd0:       je     4e8e9d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x100d>
         :            if (_M_pi != nullptr)
    0.00 :   4e8bd6:       test   %rbp,%rbp
    0.00 :   4e8bd9:       je     4e8bfe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd6e>
         :            if (__gthread_active_p())
    0.00 :   4e8bdb:       mov    0x73f326(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   4e8be2:       test   %r12,%r12
    0.00 :   4e8be5:       je     4e8cec <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe5c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8beb:       mov    $0xffffffff,%eax
    0.00 :   4e8bf0:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   4e8bf5:       cmp    $0x1,%eax
    0.00 :   4e8bf8:       je     4e8e02 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf72>
    0.00 :   4e8bfe:       mov    0xd0(%rsp),%rax
    0.00 :   4e8c06:       mov    %rax,0x58(%rsp)
    0.00 :   4e8c0b:       jmpq   4e83c4 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x534>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8c10:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e8c13:       lea    -0x1(%rax),%edx
    0.00 :   4e8c16:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   4e8c19:       jmpq   4e8624 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x794>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8c1e:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   4e8c21:       lea    -0x1(%rax),%edx
    0.00 :   4e8c24:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   4e8c27:       jmpq   4e8593 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x703>
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8c2c:       movaps %xmm2,%xmm5
    0.00 :   4e8c2f:       divss  %xmm6,%xmm5
    0.00 :   4e8c33:       movaps %xmm5,%xmm1
    0.00 :   4e8c36:       movaps %xmm5,%xmm4
    0.00 :   4e8c39:       mulss  %xmm5,%xmm1
    0.00 :   4e8c3d:       subss  %xmm1,%xmm4
    0.00 :   4e8c41:       addss  %xmm4,%xmm0
    0.00 :   4e8c45:       ucomiss %xmm0,%xmm2
    0.00 :   4e8c48:       sqrtss %xmm0,%xmm1
    0.00 :   4e8c4c:       jbe    4e89f6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb66>
    0.00 :   4e8c52:       movss  %xmm3,0x1c(%rsp)
    0.00 :   4e8c58:       movss  %xmm2,0x18(%rsp)
    0.00 :   4e8c5e:       movss  %xmm1,0x10(%rsp)
    0.00 :   4e8c64:       movss  %xmm5,(%rsp)
    0.00 :   4e8c69:       callq  53cd0 <sqrtf@plt>
    0.00 :   4e8c6e:       movss  (%rsp),%xmm5
    0.00 :   4e8c73:       mov    0xe0(%rsp),%rax
    0.00 :   4e8c7b:       movss  0x10(%rsp),%xmm1
    0.00 :   4e8c81:       movss  0x18(%rsp),%xmm2
    0.00 :   4e8c87:       mov    (%rax),%r8
    0.00 :   4e8c8a:       movss  0x1c(%rsp),%xmm3
    0.00 :   4e8c90:       test   %r8,%r8
    0.00 :   4e8c93:       jg     4e89a5 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb15>
    0.00 :   4e8c99:       jmpq   4e89f6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xb66>
    0.00 :   4e8c9e:       xchg   %ax,%ax
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
         :            { *__mem += __val; }
    0.00 :   4e8ca0:       addl   $0x1,0x8(%rbp)
    0.00 :   4e8ca4:       addl   $0x1,0x8(%rbp)
    0.00 :   4e8ca8:       jmpq   4e8b6d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xcdd>
    0.00 :   4e8cad:       addl   $0x1,0x8(%r13)
    0.00 :   4e8cb2:       addl   $0x1,0x8(%r13)
    0.00 :   4e8cb7:       jmpq   4e8a96 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc06>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8cbc:       mov    0x8(%r15),%eax
         :            *__mem += __val;
    0.00 :   4e8cc0:       lea    -0x1(%rax),%edx
    0.00 :   4e8cc3:       mov    %edx,0x8(%r15)
         :            return __result;
    0.00 :   4e8cc7:       jmpq   4e8af6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc66>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8ccc:       mov    0x8(%r13),%eax
         :            *__mem += __val;
    0.00 :   4e8cd0:       lea    -0x1(%rax),%edx
    0.00 :   4e8cd3:       mov    %edx,0x8(%r13)
         :            return __result;
    0.00 :   4e8cd7:       jmpq   4e8b1f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc8f>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8cdc:       mov    0x8(%r13),%eax
         :            *__mem += __val;
    0.00 :   4e8ce0:       lea    -0x1(%rax),%edx
    0.00 :   4e8ce3:       mov    %edx,0x8(%r13)
         :            return __result;
    0.00 :   4e8ce7:       jmpq   4e8bcd <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd3d>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8cec:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   4e8cef:       lea    -0x1(%rax),%edx
    0.00 :   4e8cf2:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   4e8cf5:       jmpq   4e8bf5 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd65>
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8cfa:       mov    0x40(%rsp),%rdx
    0.00 :   4e8cff:       mov    0x28(%rsp),%rbx
    0.00 :   4e8d04:       mov    0x48(%rsp),%rbp
    0.00 :   4e8d09:       test   %rdx,%rdx
    0.00 :   4e8d0c:       jle    4e8f07 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1077>
    0.00 :   4e8d12:       lea    (%rbx,%rdx,4),%rcx
    0.00 :   4e8d16:       pxor   %xmm2,%xmm2
    0.00 :   4e8d1a:       pxor   %xmm1,%xmm1
    0.00 :   4e8d1e:       mov    %rbx,%rax
    0.00 :   4e8d21:       pxor   %xmm3,%xmm3
    0.00 :   4e8d25:       nopl   (%rax)
    0.00 :   4e8d28:       movss  (%rax),%xmm0
    0.00 :   4e8d2c:       add    $0x4,%rax
    0.00 :   4e8d30:       addss  %xmm0,%xmm3
    0.00 :   4e8d34:       mulss  %xmm0,%xmm0
    0.00 :   4e8d38:       addss  %xmm0,%xmm1
    0.00 :   4e8d3c:       cmp    %rax,%rcx
    0.00 :   4e8d3f:       jne    4e8d28 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xe98>
    0.00 :   4e8d41:       pxor   %xmm0,%xmm0
    0.00 :   4e8d45:       mov    (%rsp),%rax
    0.00 :   4e8d49:       cvtsi2ss %rdx,%xmm0
    0.00 :   4e8d4e:       divss  %xmm0,%xmm3
    0.00 :   4e8d52:       divss  %xmm0,%xmm1
    0.00 :   4e8d56:       movaps %xmm1,%xmm0
    0.00 :   4e8d59:       movaps %xmm3,%xmm1
    0.00 :   4e8d5c:       mulss  %xmm3,%xmm1
    0.00 :   4e8d60:       subss  %xmm1,%xmm0
    0.00 :   4e8d64:       addss  0x18(%rax),%xmm0
    0.00 :   4e8d69:       ucomiss %xmm0,%xmm2
    0.00 :   4e8d6c:       sqrtss %xmm0,%xmm1
    0.00 :   4e8d70:       ja     4e8f42 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x10b2>
    0.00 :   4e8d76:       mov    0xf0(%rsp),%rax
    0.00 :   4e8d7e:       mov    0x110(%rsp),%r8
    0.00 :   4e8d86:       shl    $0x2,%rdx
    0.00 :   4e8d8a:       mov    (%rax),%rdi
    0.00 :   4e8d8d:       mov    0x108(%rsp),%rax
    0.00 :   4e8d95:       mov    (%rax),%rsi
    0.00 :   4e8d98:       xor    %eax,%eax
    0.00 :   4e8d9a:       nopw   0x0(%rax,%rax,1)
    0.00 :   4e8da0:       movss  (%rbx,%rax,1),%xmm0
    0.00 :   4e8da5:       subss  %xmm3,%xmm0
    0.00 :   4e8da9:       divss  %xmm1,%xmm0
    0.00 :   4e8dad:       mulss  (%rsi,%rax,1),%xmm0
    0.00 :   4e8db2:       test   %rdi,%rdi
    0.00 :   4e8db5:       je     4e8dbf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf2f>
    0.00 :   4e8db7:       mov    (%r8),%rcx
    0.00 :   4e8dba:       addss  (%rcx,%rax,1),%xmm0
    0.00 :   4e8dbf:       movss  %xmm0,0x0(%rbp,%rax,1)
    0.00 :   4e8dc5:       add    $0x4,%rax
    0.00 :   4e8dc9:       cmp    %rax,%rdx
    0.00 :   4e8dcc:       jne    4e8da0 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf10>
    0.00 :   4e8dce:       mov    0x118(%rsp),%rax
    0.00 :   4e8dd6:       mov    (%rax),%rax
    0.00 :   4e8dd9:       test   %rax,%rax
    0.00 :   4e8ddc:       je     4e8de2 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf52>
    0.00 :   4e8dde:       movss  %xmm3,(%rax)
    0.00 :   4e8de2:       movss  0x33dfba(%rip),%xmm0        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   4e8dea:       mov    0x120(%rsp),%rax
    0.00 :   4e8df2:       divss  %xmm1,%xmm0
    0.00 :   4e8df6:       mov    (%rax),%rax
    0.00 :   4e8df9:       movss  %xmm0,(%rax)
    0.00 :   4e8dfd:       jmpq   4e8513 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x683>
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
         :            _M_dispose();
    0.00 :   4e8e02:       mov    0x0(%rbp),%rax
    0.00 :   4e8e06:       mov    %rbp,%rdi
    0.00 :   4e8e09:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8e0c:       test   %r12,%r12
    0.00 :   4e8e0f:       je     4e8edf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x104f>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8e15:       mov    $0xffffffff,%eax
    0.00 :   4e8e1a:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8e1f:       cmp    $0x1,%eax
    0.00 :   4e8e22:       jne    4e8bfe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd6e>
         :            _M_destroy();
    0.00 :   4e8e28:       mov    0x0(%rbp),%rax
    0.00 :   4e8e2c:       mov    %rbp,%rdi
    0.00 :   4e8e2f:       callq  *0x18(%rax)
    0.00 :   4e8e32:       jmpq   4e8bfe <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd6e>
         :            _M_dispose();
    0.00 :   4e8e37:       mov    0x0(%r13),%rax
    0.00 :   4e8e3b:       mov    %r13,%rdi
    0.00 :   4e8e3e:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8e41:       test   %r12,%r12
    0.00 :   4e8e44:       je     4e8ecf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x103f>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8e4a:       mov    $0xffffffff,%eax
    0.00 :   4e8e4f:       lock xadd %eax,0xc(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8e55:       cmp    $0x1,%eax
    0.00 :   4e8e58:       jne    4e8b28 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc98>
         :            _M_destroy();
    0.00 :   4e8e5e:       mov    0x0(%r13),%rax
    0.00 :   4e8e62:       mov    %r13,%rdi
    0.00 :   4e8e65:       callq  *0x18(%rax)
    0.00 :   4e8e68:       jmpq   4e8b28 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc98>
         :            _M_dispose();
    0.00 :   4e8e6d:       mov    (%r15),%rax
    0.00 :   4e8e70:       mov    %r15,%rdi
    0.00 :   4e8e73:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8e76:       test   %r12,%r12
    0.00 :   4e8e79:       je     4e8eed <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x105d>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8e7b:       mov    $0xffffffff,%eax
    0.00 :   4e8e80:       lock xadd %eax,0xc(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8e86:       cmp    $0x1,%eax
    0.00 :   4e8e89:       jne    4e8aff <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc6f>
         :            _M_destroy();
    0.00 :   4e8e8f:       mov    (%r15),%rax
    0.00 :   4e8e92:       mov    %r15,%rdi
    0.00 :   4e8e95:       callq  *0x18(%rax)
    0.00 :   4e8e98:       jmpq   4e8aff <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xc6f>
         :            _M_dispose();
    0.00 :   4e8e9d:       mov    0x0(%r13),%rax
    0.00 :   4e8ea1:       mov    %r13,%rdi
    0.00 :   4e8ea4:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   4e8ea7:       test   %r12,%r12
    0.00 :   4e8eaa:       je     4e8efa <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x106a>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   4e8eac:       mov    $0xffffffff,%eax
    0.00 :   4e8eb1:       lock xadd %eax,0xc(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   4e8eb7:       cmp    $0x1,%eax
    0.00 :   4e8eba:       jne    4e8bd6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd46>
         :            _M_destroy();
    0.00 :   4e8ec0:       mov    0x0(%r13),%rax
    0.00 :   4e8ec4:       mov    %r13,%rdi
    0.00 :   4e8ec7:       callq  *0x18(%rax)
    0.00 :   4e8eca:       jmpq   4e8bd6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xd46>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8ecf:       mov    0xc(%r13),%eax
         :            *__mem += __val;
    0.00 :   4e8ed3:       lea    -0x1(%rax),%edx
    0.00 :   4e8ed6:       mov    %edx,0xc(%r13)
         :            return __result;
    0.00 :   4e8eda:       jmpq   4e8e55 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xfc5>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8edf:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   4e8ee2:       lea    -0x1(%rax),%edx
    0.00 :   4e8ee5:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   4e8ee8:       jmpq   4e8e1f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf8f>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8eed:       mov    0xc(%r15),%eax
         :            *__mem += __val;
    0.00 :   4e8ef1:       lea    -0x1(%rax),%edx
    0.00 :   4e8ef4:       mov    %edx,0xc(%r15)
         :            return __result;
    0.00 :   4e8ef8:       jmp    4e8e86 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xff6>
         :            _Atomic_word __result = *__mem;
    0.00 :   4e8efa:       mov    0xc(%r13),%eax
         :            *__mem += __val;
    0.00 :   4e8efe:       lea    -0x1(%rax),%edx
    0.00 :   4e8f01:       mov    %edx,0xc(%r13)
         :            return __result;
    0.00 :   4e8f05:       jmp    4e8eb7 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1027>
         :            _ZZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   4e8f07:       pxor   %xmm0,%xmm0
    0.00 :   4e8f0b:       pxor   %xmm2,%xmm2
    0.00 :   4e8f0f:       mov    (%rsp),%rax
    0.00 :   4e8f13:       cvtsi2ss %rdx,%xmm0
    0.00 :   4e8f18:       movaps %xmm2,%xmm3
    0.00 :   4e8f1b:       divss  %xmm0,%xmm3
    0.00 :   4e8f1f:       movaps %xmm3,%xmm0
    0.00 :   4e8f22:       movaps %xmm3,%xmm7
    0.00 :   4e8f25:       mulss  %xmm3,%xmm0
    0.00 :   4e8f29:       subss  %xmm0,%xmm7
    0.00 :   4e8f2d:       movaps %xmm7,%xmm0
    0.00 :   4e8f30:       addss  0x18(%rax),%xmm0
    0.00 :   4e8f35:       ucomiss %xmm0,%xmm2
    0.00 :   4e8f38:       sqrtss %xmm0,%xmm1
    0.00 :   4e8f3c:       jbe    4e8dce <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf3e>
    0.00 :   4e8f42:       movss  %xmm1,0x10(%rsp)
    0.00 :   4e8f48:       movss  %xmm3,(%rsp)
    0.00 :   4e8f4d:       callq  53cd0 <sqrtf@plt>
    0.00 :   4e8f52:       movss  (%rsp),%xmm3
    0.00 :   4e8f57:       mov    0xe0(%rsp),%rax
    0.00 :   4e8f5f:       movss  0x10(%rsp),%xmm1
    0.00 :   4e8f65:       mov    (%rax),%rdx
    0.00 :   4e8f68:       test   %rdx,%rdx
    0.00 :   4e8f6b:       jg     4e8d76 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xee6>
    0.00 :   4e8f71:       jmpq   4e8dce <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0xf3e>
         :            _ZNK11onnxruntime7contrib9LayerNormIfLb0EE7ComputeEPNS_15OpKernelContextE():
    0.00 :   4e8f76:       lea    0x150(%rsp),%rbp
    0.00 :   4e8f7e:       mov    $0xa0,%edi
    0.00 :   4e8f83:       lea    0xe0(%rsp),%rbx
    0.00 :   4e8f8b:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e8f90:       mov    $0x10,%esi
    0.00 :   4e8f95:       mov    %rbp,%rdi
    0.00 :   4e8f98:       mov    %rax,%r14
    0.00 :   4e8f9b:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   4e8fa0:       lea    0x351a59(%rip),%rsi        # 83aa00 <typeinfo name for onnxruntime::BiasGeluFusion+0x20>
    0.00 :   4e8fa7:       mov    %rbp,%rdi
    0.00 :   4e8faa:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            *  These functions use the stream's current locale (specifically, the
         :            *  @c num_get facet) to perform numeric formatting.
         :            */
         :            __ostream_type&
         :            operator<<(long __n)
         :            { return _M_insert(__n); }
    0.00 :   4e8faf:       mov    %r12,%rsi
    0.00 :   4e8fb2:       mov    %rbp,%rdi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   4e8fb5:       lea    0x130(%rsp),%r12
    0.00 :   4e8fbd:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   4e8fc2:       lea    0x351a3d(%rip),%rsi        # 83aa06 <typeinfo name for onnxruntime::BiasGeluFusion+0x26>
    0.00 :   4e8fc9:       mov    %rbp,%rdi
    0.00 :   4e8fcc:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   4e8fd1:       mov    %r13,%rsi
    0.00 :   4e8fd4:       mov    %rbp,%rdi
    0.00 :   4e8fd7:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   4e8fdc:       lea    0x3bd4f6(%rip),%rsi        # 8a64d9 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0xbd>
    0.00 :   4e8fe3:       mov    %rbp,%rdi
    0.00 :   4e8fe6:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   4e8feb:       lea    -0x1(%r13),%rsi
    0.00 :   4e8fef:       mov    %rbp,%rdi
    0.00 :   4e8ff2:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   4e8ff7:       lea    0x3dee2b(%rip),%rsi        # 8c7e29 <typeinfo name for re2::NumCapturesWalker+0x79>
    0.00 :   4e8ffe:       mov    %rbp,%rdi
    0.00 :   4e9001:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   4e9006:       lea    0x8(%rbp),%rsi
    0.00 :   4e900a:       mov    %r12,%rdi
    0.00 :   4e900d:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   4e9012:       mov    %rbp,%rdi
    0.00 :   4e9015:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   4e901a:       mov    %rbx,%rdi
    0.00 :   4e901d:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e9022:       mov    %rbx,%r8
    0.00 :   4e9025:       mov    $0x16,%edx
    0.00 :   4e902a:       mov    %rbp,%rdi
    0.00 :   4e902d:       lea    0x394a0c(%rip),%rcx        # 87da40 <onnxruntime::HandleNegativeAxis(long, long)::__PRETTY_FUNCTION__>
    0.00 :   4e9034:       lea    0x351a85(%rip),%rsi        # 83aac0 <typeinfo name for onnxruntime::BiasGeluFusion+0xe0>
    0.00 :   4e903b:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e9040:       mov    %r12,%rcx
    0.00 :   4e9043:       lea    0x351aae(%rip),%rdx        # 83aaf8 <typeinfo name for onnxruntime::BiasGeluFusion+0x118>
    0.00 :   4e904a:       mov    %rbp,%rsi
    0.00 :   4e904d:       mov    %r14,%rdi
    0.00 :   4e9050:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e9055:       mov    %rbp,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   4e9058:       add    $0x10,%r12
    0.00 :   4e905c:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e9061:       mov    %rbx,%rdi
    0.00 :   4e9064:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e9069:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e9071:       cmp    %r12,%rdi
    0.00 :   4e9074:       je     4e907b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x11eb>
    0.00 :   4e9076:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e907b:       lea    -0x3ef962(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4e9082:       lea    0x7285a7(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4e9089:       mov    %r14,%rdi
    0.00 :   4e908c:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4e9091:       mov    $0xa0,%edi
    0.00 :   4e9096:       lea    0x130(%rsp),%r12
    0.00 :   4e909e:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e90a3:       mov    %r12,%rdi
    0.00 :   4e90a6:       lea    0x60(%rsp),%rcx
    0.00 :   4e90ab:       mov    %rbx,%rsi
    0.00 :   4e90ae:       mov    %rax,%r13
    0.00 :   4e90b1:       lea    0x33c753(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e90b8:       lea    0x68(%rsp),%rdx
    0.00 :   4e90bd:       mov    %rax,0x60(%rsp)
    0.00 :   4e90c2:       lea    0x33c73f(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e90c9:       lea    0x30(%rbp),%r8
    0.00 :   4e90cd:       mov    %rax,0x68(%rsp)
    0.00 :   4e90d2:       lea    0x33c718(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e90d9:       mov    %rax,0xe0(%rsp)
    0.00 :   4e90e1:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e90e6:       mov    %rbx,%rdi
    0.00 :   4e90e9:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e90ee:       lea    0x150(%rsp),%rbp
    0.00 :   4e90f6:       mov    %rbx,%r8
    0.00 :   4e90f9:       lea    0x394900(%rip),%rcx        # 87da00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   4e9100:       mov    $0x83,%edx
    0.00 :   4e9105:       lea    0x33c704(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e910c:       mov    %rbp,%rdi
    0.00 :   4e910f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e9114:       mov    %r12,%rcx
    0.00 :   4e9117:       lea    0x33c732(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e911e:       mov    %rbp,%rsi
    0.00 :   4e9121:       mov    %r13,%rdi
    0.00 :   4e9124:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e9129:       mov    %rbp,%rdi
    0.00 :   4e912c:       add    $0x10,%r12
    0.00 :   4e9130:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e9135:       mov    %rbx,%rdi
    0.00 :   4e9138:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e913d:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e9145:       cmp    %r12,%rdi
    0.00 :   4e9148:       je     4e914f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x12bf>
    0.00 :   4e914a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e914f:       lea    -0x3efa36(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4e9156:       lea    0x7284d3(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4e915d:       mov    %r13,%rdi
    0.00 :   4e9160:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4e9165:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e916a:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
    0.00 :   4e916f:       mov    $0xa0,%edi
    0.00 :   4e9174:       lea    0xe0(%rsp),%rbx
    0.00 :   4e917c:       lea    0x130(%rsp),%r12
    0.00 :   4e9184:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e9189:       mov    %r12,%rdi
    0.00 :   4e918c:       lea    0x30(%r13),%r8
    0.00 :   4e9190:       mov    %rbx,%rsi
    0.00 :   4e9193:       mov    %rax,%r14
    0.00 :   4e9196:       lea    0x33c66e(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e919d:       lea    0xa0(%rsp),%rcx
    0.00 :   4e91a5:       mov    %rax,0xa0(%rsp)
    0.00 :   4e91ad:       lea    0x33c654(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e91b4:       lea    0xc0(%rsp),%rdx
    0.00 :   4e91bc:       mov    %rax,0xc0(%rsp)
    0.00 :   4e91c4:       lea    0x33c626(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e91cb:       mov    %rax,0xe0(%rsp)
    0.00 :   4e91d3:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e91d8:       mov    %rbx,%rdi
    0.00 :   4e91db:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e91e0:       lea    0x150(%rsp),%rbp
    0.00 :   4e91e8:       mov    %rbx,%r8
    0.00 :   4e91eb:       lea    0x39488e(%rip),%rcx        # 87da80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   4e91f2:       mov    $0x97,%edx
    0.00 :   4e91f7:       lea    0x33c612(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e91fe:       mov    %rbp,%rdi
    0.00 :   4e9201:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e9206:       mov    %r12,%rcx
    0.00 :   4e9209:       lea    0x33c640(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e9210:       mov    %rbp,%rsi
    0.00 :   4e9213:       mov    %r14,%rdi
    0.00 :   4e9216:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e921b:       jmpq   4e9055 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x11c5>
    0.00 :   4e9220:       mov    $0xa0,%edi
    0.00 :   4e9225:       lea    0xe0(%rsp),%rbx
    0.00 :   4e922d:       lea    0x130(%rsp),%r12
    0.00 :   4e9235:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e923a:       mov    %r12,%rdi
    0.00 :   4e923d:       lea    0x30(%r13),%r8
    0.00 :   4e9241:       mov    %rbx,%rsi
    0.00 :   4e9244:       mov    %rax,%r14
    0.00 :   4e9247:       lea    0x33c5bd(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e924e:       lea    0xa0(%rsp),%rcx
    0.00 :   4e9256:       mov    %rax,0xa0(%rsp)
    0.00 :   4e925e:       lea    0x33c5a3(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e9265:       lea    0xc0(%rsp),%rdx
    0.00 :   4e926d:       mov    %rax,0xc0(%rsp)
    0.00 :   4e9275:       lea    0x33c575(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e927c:       mov    %rax,0xe0(%rsp)
    0.00 :   4e9284:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e9289:       mov    %rbx,%rdi
    0.00 :   4e928c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e9291:       lea    0x150(%rsp),%rbp
    0.00 :   4e9299:       mov    %rbx,%r8
    0.00 :   4e929c:       lea    0x39475d(%rip),%rcx        # 87da00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   4e92a3:       mov    $0x83,%edx
    0.00 :   4e92a8:       lea    0x33c561(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e92af:       mov    %rbp,%rdi
    0.00 :   4e92b2:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e92b7:       mov    %r12,%rcx
    0.00 :   4e92ba:       lea    0x33c58f(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e92c1:       mov    %rbp,%rsi
    0.00 :   4e92c4:       mov    %r14,%rdi
    0.00 :   4e92c7:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e92cc:       jmpq   4e9055 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x11c5>
    0.00 :   4e92d1:       mov    $0xa0,%edi
    0.00 :   4e92d6:       lea    0x130(%rsp),%r12
    0.00 :   4e92de:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e92e3:       mov    %r12,%rdi
    0.00 :   4e92e6:       lea    0x68(%rsp),%rcx
    0.00 :   4e92eb:       mov    %rbx,%rsi
    0.00 :   4e92ee:       mov    %rax,%r14
    0.00 :   4e92f1:       lea    0x33c513(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e92f8:       lea    0xc0(%rsp),%rdx
    0.00 :   4e9300:       mov    %rax,0x68(%rsp)
    0.00 :   4e9305:       lea    0x33c4fc(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e930c:       lea    0x30(%r13),%r8
    0.00 :   4e9310:       mov    %rax,0xc0(%rsp)
    0.00 :   4e9318:       lea    0x33c4d2(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e931f:       mov    %rax,0xe0(%rsp)
    0.00 :   4e9327:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e932c:       mov    %rbx,%rdi
    0.00 :   4e932f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e9334:       lea    0x150(%rsp),%rbp
    0.00 :   4e933c:       mov    %rbx,%r8
    0.00 :   4e933f:       lea    0x3946ba(%rip),%rcx        # 87da00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   4e9346:       mov    $0x83,%edx
    0.00 :   4e934b:       lea    0x33c4be(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e9352:       mov    %rbp,%rdi
    0.00 :   4e9355:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e935a:       mov    %r12,%rcx
    0.00 :   4e935d:       lea    0x33c4ec(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e9364:       mov    %rbp,%rsi
    0.00 :   4e9367:       mov    %r14,%rdi
    0.00 :   4e936a:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e936f:       mov    %rbp,%rdi
    0.00 :   4e9372:       add    $0x10,%r12
    0.00 :   4e9376:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e937b:       mov    %rbx,%rdi
    0.00 :   4e937e:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e9383:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e938b:       cmp    %r12,%rdi
    0.00 :   4e938e:       je     4e9395 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1505>
    0.00 :   4e9390:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e9395:       lea    -0x3efc7c(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4e939c:       lea    0x72828d(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4e93a3:       mov    %r14,%rdi
    0.00 :   4e93a6:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4e93ab:       mov    $0xa0,%edi
    0.00 :   4e93b0:       lea    0xe0(%rsp),%rbx
    0.00 :   4e93b8:       lea    0x130(%rsp),%r12
    0.00 :   4e93c0:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e93c5:       mov    %r12,%rdi
    0.00 :   4e93c8:       lea    0x30(%r15),%r8
    0.00 :   4e93cc:       mov    %rbx,%rsi
    0.00 :   4e93cf:       mov    %rax,%r13
    0.00 :   4e93d2:       lea    0x33c432(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e93d9:       lea    0xa0(%rsp),%rcx
    0.00 :   4e93e1:       mov    %rax,0xa0(%rsp)
    0.00 :   4e93e9:       lea    0x33c418(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e93f0:       lea    0xc0(%rsp),%rdx
    0.00 :   4e93f8:       mov    %rax,0xc0(%rsp)
    0.00 :   4e9400:       lea    0x33c3ea(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e9407:       mov    %rax,0xe0(%rsp)
    0.00 :   4e940f:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e9414:       mov    %rbx,%rdi
    0.00 :   4e9417:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e941c:       lea    0x150(%rsp),%rbp
    0.00 :   4e9424:       mov    %rbx,%r8
    0.00 :   4e9427:       lea    0x394652(%rip),%rcx        # 87da80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   4e942e:       mov    $0x97,%edx
    0.00 :   4e9433:       lea    0x33c3d6(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e943a:       mov    %rbp,%rdi
    0.00 :   4e943d:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e9442:       mov    %r12,%rcx
    0.00 :   4e9445:       lea    0x33c404(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e944c:       mov    %rbp,%rsi
    0.00 :   4e944f:       mov    %r13,%rdi
    0.00 :   4e9452:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e9457:       mov    %rbp,%rdi
    0.00 :   4e945a:       add    $0x10,%r12
    0.00 :   4e945e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e9463:       mov    %rbx,%rdi
    0.00 :   4e9466:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e946b:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e9473:       cmp    %r12,%rdi
    0.00 :   4e9476:       je     4e947d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x15ed>
    0.00 :   4e9478:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e947d:       lea    -0x3efd64(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4e9484:       lea    0x7281a5(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4e948b:       mov    %r13,%rdi
    0.00 :   4e948e:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4e9493:       mov    $0xa0,%edi
    0.00 :   4e9498:       lea    0xe0(%rsp),%rbx
    0.00 :   4e94a0:       lea    0x130(%rsp),%r12
    0.00 :   4e94a8:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   4e94ad:       mov    %r12,%rdi
    0.00 :   4e94b0:       lea    0x30(%rbp),%r8
    0.00 :   4e94b4:       mov    %rbx,%rsi
    0.00 :   4e94b7:       mov    %rax,%r13
    0.00 :   4e94ba:       lea    0x33c34a(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   4e94c1:       lea    0xa0(%rsp),%rcx
    0.00 :   4e94c9:       mov    %rax,0xa0(%rsp)
    0.00 :   4e94d1:       lea    0x33c330(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   4e94d8:       lea    0xc0(%rsp),%rdx
    0.00 :   4e94e0:       mov    %rax,0xc0(%rsp)
    0.00 :   4e94e8:       lea    0x33c302(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   4e94ef:       mov    %rax,0xe0(%rsp)
    0.00 :   4e94f7:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   4e94fc:       mov    %rbx,%rdi
    0.00 :   4e94ff:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   4e9504:       lea    0x150(%rsp),%rbp
    0.00 :   4e950c:       mov    %rbx,%r8
    0.00 :   4e950f:       lea    0x39456a(%rip),%rcx        # 87da80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   4e9516:       mov    $0x97,%edx
    0.00 :   4e951b:       lea    0x33c2ee(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   4e9522:       mov    %rbp,%rdi
    0.00 :   4e9525:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   4e952a:       mov    %r12,%rcx
    0.00 :   4e952d:       lea    0x33c31c(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4e9534:       mov    %rbp,%rsi
    0.00 :   4e9537:       mov    %r13,%rdi
    0.00 :   4e953a:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4e953f:       jmpq   4e9457 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x15c7>
    0.00 :   4e9544:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   4e9549:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   4e954e:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   4e9553:       mov    %rax,%rbx
    0.00 :   4e9556:       jmp    4e956f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16df>
    0.00 :   4e9558:       mov    %rax,%rbx
    0.00 :   4e955b:       jmp    4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e955d:       mov    0xe0(%rsp),%rdi
         :            if (__p)
    0.00 :   4e9565:       test   %rdi,%rdi
    0.00 :   4e9568:       je     4e956f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16df>
         :            ::operator delete(__p);
    0.00 :   4e956a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e956f:       lea    0xa0(%rsp),%rdi
    0.00 :   4e9577:       callq  21f320 <std::unique_ptr<void, onnxruntime::BufferDeleter>::~unique_ptr()>
         :            if (_M_pi != nullptr)
    0.00 :   4e957c:       mov    0x78(%rsp),%rdi
    0.00 :   4e9581:       test   %rdi,%rdi
    0.00 :   4e9584:       je     4e958b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16fb>
         :            _M_pi->_M_release();
    0.00 :   4e9586:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e958b:       mov    0x80(%rsp),%rdi
         :            if (__p)
    0.00 :   4e9593:       test   %rdi,%rdi
    0.00 :   4e9596:       je     4e959d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x170d>
    0.00 :   4e9598:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   4e959d:       mov    %rbx,%rdi
    0.00 :   4e95a0:       callq  53c30 <_Unwind_Resume@plt>
         :            if (_M_manager)
    0.00 :   4e95a5:       mov    0x160(%rsp),%rax
    0.00 :   4e95ad:       test   %rax,%rax
    0.00 :   4e95b0:       je     4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   4e95b2:       mov    $0x3,%edx
    0.00 :   4e95b7:       mov    %rbp,%rsi
    0.00 :   4e95ba:       mov    %rbp,%rdi
    0.00 :   4e95bd:       callq  *%rax
    0.00 :   4e95bf:       lea    0xc0(%rsp),%rdi
    0.00 :   4e95c7:       callq  21f320 <std::unique_ptr<void, onnxruntime::BufferDeleter>::~unique_ptr()>
    0.00 :   4e95cc:       jmp    4e956f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16df>
    0.00 :   4e95ce:       mov    %rax,%rbx
    0.00 :   4e95d1:       jmp    4e958b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16fb>
    0.00 :   4e95d3:       mov    %rax,%rbx
    0.00 :   4e95d6:       jmp    4e95e2 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1752>
    0.00 :   4e95d8:       mov    %rax,%rbx
    0.00 :   4e95db:       jmp    4e955d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16cd>
    0.00 :   4e95dd:       mov    %rax,%rbx
    0.00 :   4e95e0:       jmp    4e95f6 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1766>
         :            if (__ptr != nullptr)
    0.00 :   4e95e2:       mov    0xe0(%rsp),%rdi
    0.00 :   4e95ea:       test   %rdi,%rdi
    0.00 :   4e95ed:       je     4e957c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16ec>
         :            get_deleter()(__ptr);
    0.00 :   4e95ef:       callq  9cdc4 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.91]>
    0.00 :   4e95f4:       jmp    4e957c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16ec>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4e95f6:       mov    0xe0(%rsp),%rdi
         :            if (__p)
    0.00 :   4e95fe:       test   %rdi,%rdi
    0.00 :   4e9601:       je     4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
         :            ::operator delete(__p);
    0.00 :   4e9603:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   4e9608:       jmp    4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
    0.00 :   4e960a:       mov    %rax,%r14
    0.00 :   4e960d:       jmp    4e9614 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1784>
    0.00 :   4e960f:       mov    %rax,%r14
    0.00 :   4e9612:       jmp    4e961c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x178c>
    0.00 :   4e9614:       mov    %rbp,%rdi
    0.00 :   4e9617:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e961c:       mov    %rbx,%rdi
    0.00 :   4e961f:       mov    %r14,%rbx
    0.00 :   4e9622:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e9627:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e962f:       add    $0x10,%r12
    0.00 :   4e9633:       cmp    %r12,%rdi
    0.00 :   4e9636:       je     4e963d <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17ad>
         :            ::operator delete(__p);
    0.00 :   4e9638:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e963d:       mov    %r13,%rdi
    0.00 :   4e9640:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4e9645:       jmpq   4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
    0.00 :   4e964a:       mov    %rax,%rbx
    0.00 :   4e964d:       jmpq   4e95a5 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1715>
    0.00 :   4e9652:       mov    %rax,%rbx
         :            if (_M_manager)
    0.00 :   4e9655:       mov    0x160(%rsp),%rax
    0.00 :   4e965d:       test   %rax,%rax
    0.00 :   4e9660:       je     4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   4e9666:       lea    0x150(%rsp),%rdi
    0.00 :   4e966e:       mov    $0x3,%edx
    0.00 :   4e9673:       mov    %rdi,%rsi
    0.00 :   4e9676:       callq  *%rax
    0.00 :   4e9678:       jmpq   4e95bf <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x172f>
    0.00 :   4e967d:       mov    %rax,%rbx
    0.00 :   4e9680:       jmp    4e9627 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1797>
    0.00 :   4e9682:       mov    %rax,%rbp
    0.00 :   4e9685:       jmp    4e96a4 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1814>
    0.00 :   4e9687:       mov    %rax,%r13
    0.00 :   4e968a:       jmp    4e9691 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1801>
    0.00 :   4e968c:       mov    %rax,%rbp
    0.00 :   4e968f:       jmp    4e969c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x180c>
    0.00 :   4e9691:       mov    %rbp,%rdi
    0.00 :   4e9694:       mov    %r13,%rbp
    0.00 :   4e9697:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e969c:       mov    %rbx,%rdi
    0.00 :   4e969f:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e96a4:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e96ac:       add    $0x10,%r12
    0.00 :   4e96b0:       cmp    %r12,%rdi
    0.00 :   4e96b3:       je     4e96ba <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x182a>
    0.00 :   4e96b5:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e96ba:       mov    %r14,%rdi
    0.00 :   4e96bd:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4e96c2:       mov    %rbp,%rdi
    0.00 :   4e96c5:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4e96ca:       mov    %rax,%r14
    0.00 :   4e96cd:       jmp    4e9708 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1878>
    0.00 :   4e96cf:       mov    %rax,%r13
    0.00 :   4e96d2:       mov    %rbp,%rdi
    0.00 :   4e96d5:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e96da:       mov    %rbx,%rdi
    0.00 :   4e96dd:       mov    %r13,%rbx
    0.00 :   4e96e0:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e96e5:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e96ed:       add    $0x10,%r12
    0.00 :   4e96f1:       cmp    %r12,%rdi
    0.00 :   4e96f4:       je     4e96fb <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x186b>
    0.00 :   4e96f6:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e96fb:       mov    %r14,%rdi
    0.00 :   4e96fe:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4e9703:       jmpq   4e956f <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16df>
    0.00 :   4e9708:       mov    %rbp,%rdi
    0.00 :   4e970b:       mov    %r14,%rbp
    0.00 :   4e970e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4e9713:       mov    %rbx,%rdi
    0.00 :   4e9716:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4e971b:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4e9723:       add    $0x10,%r12
    0.00 :   4e9727:       cmp    %r12,%rdi
    0.00 :   4e972a:       je     4e9731 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x18a1>
    0.00 :   4e972c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4e9731:       mov    %r13,%rdi
    0.00 :   4e9734:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4e9739:       mov    %rbp,%rdi
    0.00 :   4e973c:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4e9741:       mov    %rax,%rbx
    0.00 :   4e9744:       jmpq   4e957c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x16ec>
    0.00 :   4e9749:       jmpq   4e9687 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17f7>
    0.00 :   4e974e:       jmpq   4e968c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17fc>
    0.00 :   4e9753:       jmpq   4e9682 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17f2>
    0.00 :   4e9758:       jmpq   4e9687 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17f7>
    0.00 :   4e975d:       jmpq   4e96ca <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x183a>
    0.00 :   4e9762:       mov    %rax,%rbp
    0.00 :   4e9765:       jmp    4e9713 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1883>
    0.00 :   4e9767:       mov    %rax,%rbp
    0.00 :   4e976a:       jmp    4e971b <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x188b>
    0.00 :   4e976c:       jmp    4e9762 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x18d2>
    0.00 :   4e976e:       jmp    4e9767 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x18d7>
    0.00 :   4e9770:       jmpq   4e968c <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17fc>
    0.00 :   4e9775:       jmpq   4e9682 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x17f2>
    0.00 :   4e977a:       mov    %rax,%r13
    0.00 :   4e977d:       jmpq   4e96da <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x184a>
    0.00 :   4e9782:       mov    %rax,%rbx
    0.00 :   4e9785:       jmpq   4e96e5 <onnxruntime::contrib::LayerNorm<float, false>::Compute(onnxruntime::OpKernelContext*) const+0x1855>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (186 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000493a90 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]>:
         :            _ZN11onnxruntimeL26TransposeSingleAxisInwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.31():
    0.00 :   493a90:       push   %r15
    0.00 :   493a92:       lea    0x18(%rdi),%rax
    0.00 :   493a96:       mov    %rsi,%r15
    0.00 :   493a99:       push   %r14
    0.00 :   493a9b:       mov    %r8,%r14
    0.00 :   493a9e:       push   %r13
    0.00 :   493aa0:       mov    %rcx,%r13
    0.00 :   493aa3:       push   %r12
    0.00 :   493aa5:       mov    %rdx,%r12
    0.00 :   493aa8:       push   %rbp
    0.00 :   493aa9:       mov    %rdi,%rbp
    0.00 :   493aac:       push   %rbx
    0.00 :   493aad:       sub    $0x58,%rsp
    0.00 :   493ab1:       mov    0x30(%rdi),%rdi
    0.00 :   493ab5:       test   %r8,%r8
    0.00 :   493ab8:       cmove  %rax,%r14
    0.00 :   493abc:       mov    (%rdi),%rax
    0.00 :   493abf:       callq  *0x18(%rax)
    0.00 :   493ac2:       mov    %r12,%rsi
    0.00 :   493ac5:       mov    %r14,%rdi
    0.00 :   493ac8:       mov    %rax,%rbx
    0.00 :   493acb:       mov    0x50(%rbp),%rax
    0.00 :   493acf:       add    0x0(%rbp),%rax
    0.00 :   493ad3:       mov    %rax,0x38(%rsp)
    0.00 :   493ad8:       mov    0x50(%r15),%rbp
    0.00 :   493adc:       add    (%r15),%rbp
    0.00 :   493adf:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   493ae4:       lea    0x1(%r13),%rsi
    0.00 :   493ae8:       mov    %r14,%rdi
    0.00 :   493aeb:       mov    %rax,%r15
    0.00 :   493aee:       mov    %rax,0x40(%rsp)
    0.00 :   493af3:       mov    (%r14),%rax
    0.00 :   493af6:       mov    (%rax,%r12,8),%r12
    0.00 :   493afa:       callq  5f2a20 <onnxruntime::TensorShape::SizeFromDimension(unsigned long) const>
    0.00 :   493aff:       mov    %r14,%rdi
    0.00 :   493b02:       mov    %rax,%r13
    0.00 :   493b05:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   493b0a:       imul   %r13,%rbx
    0.00 :   493b0e:       cqto
    0.00 :   493b10:       idiv   %r15
    0.00 :   493b13:       cqto
    0.00 :   493b15:       idiv   %r13
    0.00 :   493b18:       cqto
    0.00 :   493b1a:       mov    %rax,%r14
    0.00 :   493b1d:       idiv   %r12
    0.00 :   493b20:       mov    %rax,0x30(%rsp)
    0.00 :   493b25:       cmp    $0x2,%rbx
    0.00 :   493b29:       je     493d98 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x308>
    0.00 :   493b2f:       jbe    493bda <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x14a>
    0.00 :   493b35:       cmp    $0x4,%rbx
    0.00 :   493b39:       je     493d01 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x271>
    0.00 :   493b3f:       cmp    $0x8,%rbx
    0.00 :   493b43:       jne    493c29 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x199>
    0.00 :   493b49:       mov    0x40(%rsp),%r13
    0.00 :   493b4e:       test   %r13,%r13
    0.00 :   493b51:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493b53:       mov    0x30(%rsp),%r15
    0.00 :   493b58:       shl    $0x3,%r12
    0.00 :   493b5c:       shl    $0x3,%r14
    0.00 :   493b60:       xor    %r11d,%r11d
    0.00 :   493b63:       mov    0x38(%rsp),%r9
    0.00 :   493b68:       mov    %r12,%r10
    0.00 :   493b6b:       mov    %r15,%rbx
    0.00 :   493b6e:       lea    0x0(,%r15,8),%rdi
    0.00 :   493b76:       neg    %rbx
    0.00 :   493b79:       add    %rdi,%r9
    0.00 :   493b7c:       shl    $0x3,%rbx
    0.00 :   493b80:       lea    (%rbx,%r9,1),%r8
    0.00 :   493b84:       test   %r15,%r15
    0.00 :   493b87:       jle    493bbf <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x12f>
    0.00 :   493b89:       nopl   0x0(%rax)
    0.00 :   493b90:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   493b95:       cmp    %rbp,%rsi
    0.00 :   493b98:       je     493bb6 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x126>
    0.00 :   493b9a:       mov    %r8,%rdx
    0.00 :   493b9d:       mov    %rbp,%rax
    0.00 :   493ba0:       mov    (%rdx),%rcx
    0.00 :   493ba3:       add    $0x8,%rax
    0.00 :   493ba7:       add    %rdi,%rdx
    0.00 :   493baa:       mov    %rcx,-0x8(%rax)
    0.00 :   493bae:       cmp    %rax,%rsi
    0.00 :   493bb1:       jne    493ba0 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x110>
    0.00 :   493bb3:       add    %r10,%rbp
    0.00 :   493bb6:       add    $0x8,%r8
    0.00 :   493bba:       cmp    %r9,%r8
    0.00 :   493bbd:       jne    493b90 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x100>
    0.00 :   493bbf:       add    $0x1,%r11
    0.00 :   493bc3:       add    %r14,%r9
    0.00 :   493bc6:       cmp    %r11,%r13
    0.00 :   493bc9:       jne    493b80 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0xf0>
    0.00 :   493bcb:       add    $0x58,%rsp
    0.00 :   493bcf:       pop    %rbx
    0.00 :   493bd0:       pop    %rbp
    0.00 :   493bd1:       pop    %r12
    0.00 :   493bd3:       pop    %r13
    0.00 :   493bd5:       pop    %r14
    0.00 :   493bd7:       pop    %r15
    0.00 :   493bd9:       retq
    0.00 :   493bda:       cmp    $0x1,%rbx
    0.00 :   493bde:       jne    493c29 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x199>
    0.00 :   493be0:       mov    0x40(%rsp),%r15
    0.00 :   493be5:       xor    %ebx,%ebx
    0.00 :   493be7:       test   %r15,%r15
    0.00 :   493bea:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493bec:       mov    0x38(%rsp),%r13
    0.00 :   493bf1:       nopl   0x0(%rax)
    0.00 :   493bf8:       mov    0x30(%rsp),%rcx
    0.00 :   493bfd:       mov    %rbp,%rsi
    0.00 :   493c00:       mov    %r13,%rdi
    0.00 :   493c03:       mov    %r12,%rdx
    0.00 :   493c06:       add    $0x1,%rbx
    0.00 :   493c0a:       add    %r14,%r13
    0.00 :   493c0d:       add    %r14,%rbp
    0.00 :   493c10:       callq  6b0250 <MlasTranspose(unsigned char const*, unsigned char*, unsigned long, unsigned long)>
    0.00 :   493c15:       cmp    %rbx,%r15
    0.00 :   493c18:       jne    493bf8 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x168>
    0.00 :   493c1a:       add    $0x58,%rsp
    0.00 :   493c1e:       pop    %rbx
    0.00 :   493c1f:       pop    %rbp
    0.00 :   493c20:       pop    %r12
    0.00 :   493c22:       pop    %r13
    0.00 :   493c24:       pop    %r14
    0.00 :   493c26:       pop    %r15
    0.00 :   493c28:       retq
    0.00 :   493c29:       cmpq   $0x0,0x40(%rsp)
    0.00 :   493c2f:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493c31:       mov    %r12,%rdi
    0.00 :   493c34:       mov    0x30(%rsp),%rax
    0.00 :   493c39:       imul   %rbx,%r14
    0.00 :   493c3d:       movq   $0x0,0x28(%rsp)
    0.00 :   493c46:       imul   %rbx,%rdi
    0.00 :   493c4a:       mov    %rbp,0x10(%rsp)
    0.00 :   493c4f:       mov    %rax,%r13
    0.00 :   493c52:       mov    %eax,0x1c(%rsp)
    0.00 :   493c56:       imul   %rbx,%r13
    0.00 :   493c5a:       mov    %r14,0x48(%rsp)
    0.00 :   493c5f:       mov    %rdi,0x20(%rsp)
    0.00 :   493c64:       nopl   0x0(%rax)
    0.00 :   493c68:       cmpq   $0x0,0x30(%rsp)
    0.00 :   493c6e:       jle    493cd2 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x242>
    0.00 :   493c70:       mov    0x38(%rsp),%rax
    0.00 :   493c75:       xor    %r14d,%r14d
    0.00 :   493c78:       mov    %rax,0x8(%rsp)
    0.00 :   493c7d:       nopl   (%rax)
    0.00 :   493c80:       test   %r12,%r12
    0.00 :   493c83:       jle    493cc2 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x232>
    0.00 :   493c85:       mov    0x8(%rsp),%rbp
    0.00 :   493c8a:       mov    0x10(%rsp),%r8
    0.00 :   493c8f:       xor    %r15d,%r15d
    0.00 :   493c92:       nopw   0x0(%rax,%rax,1)
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   493c98:       mov    %rbp,%rsi
    0.00 :   493c9b:       mov    %r8,%rdi
    0.00 :   493c9e:       mov    %rbx,%rdx
         :            _ZN11onnxruntimeL26TransposeSingleAxisInwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.31():
    0.00 :   493ca1:       add    $0x1,%r15
         :            memcpy():
    0.00 :   493ca5:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntimeL26TransposeSingleAxisInwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.31():
    0.00 :   493caa:       add    %r13,%rbp
         :            memcpy():
    0.00 :   493cad:       mov    %rax,%r8
         :            _ZN11onnxruntimeL26TransposeSingleAxisInwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.31():
    0.00 :   493cb0:       add    %rbx,%r8
    0.00 :   493cb3:       cmp    %r15,%r12
    0.00 :   493cb6:       jne    493c98 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x208>
    0.00 :   493cb8:       mov    0x20(%rsp),%rdi
    0.00 :   493cbd:       add    %rdi,0x10(%rsp)
    0.00 :   493cc2:       add    %rbx,0x8(%rsp)
    0.00 :   493cc7:       add    $0x1,%r14d
    0.00 :   493ccb:       cmp    0x1c(%rsp),%r14d
    0.00 :   493cd0:       jne    493c80 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x1f0>
    0.00 :   493cd2:       mov    0x48(%rsp),%rdi
    0.00 :   493cd7:       addq   $0x1,0x28(%rsp)
    0.00 :   493cdd:       add    %rdi,0x38(%rsp)
    0.00 :   493ce2:       mov    0x28(%rsp),%rax
    0.00 :   493ce7:       cmp    %rax,0x40(%rsp)
    0.00 :   493cec:       jne    493c68 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x1d8>
    0.00 :   493cf2:       add    $0x58,%rsp
    0.00 :   493cf6:       pop    %rbx
    0.00 :   493cf7:       pop    %rbp
    0.00 :   493cf8:       pop    %r12
    0.00 :   493cfa:       pop    %r13
    0.00 :   493cfc:       pop    %r14
    0.00 :   493cfe:       pop    %r15
    0.00 :   493d00:       retq
    0.00 :   493d01:       mov    0x40(%rsp),%r13
    0.00 :   493d06:       test   %r13,%r13
    0.00 :   493d09:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493d0f:       mov    0x30(%rsp),%r15
    0.00 :   493d14:       shl    $0x2,%r12
    0.00 :   493d18:       shl    $0x2,%r14
    0.00 :   493d1c:       xor    %r11d,%r11d
    0.00 :   493d1f:       mov    0x38(%rsp),%r9
    0.00 :   493d24:       mov    %r12,%r10
    0.00 :   493d27:       mov    %r15,%rbx
    0.00 :   493d2a:       lea    0x0(,%r15,4),%rdi
    0.00 :   493d32:       neg    %rbx
    0.00 :   493d35:       add    %rdi,%r9
    0.00 :   493d38:       shl    $0x2,%rbx
    0.00 :   493d3c:       nopl   0x0(%rax)
    0.00 :   493d40:       lea    (%rbx,%r9,1),%r8
    0.00 :   493d44:       test   %r15,%r15
    0.00 :   493d47:       jle    493d7d <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2ed>
    0.00 :   493d49:       nopl   0x0(%rax)
    0.00 :   493d50:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   493d55:       cmp    %rbp,%rsi
    0.00 :   493d58:       je     493d74 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2e4>
    0.00 :   493d5a:       mov    %r8,%rdx
    0.00 :   493d5d:       mov    %rbp,%rax
    2.27 :   493d60:       mov    (%rdx),%ecx
   80.06 :   493d62:       add    $0x4,%rax
    5.10 :   493d66:       add    %rdi,%rdx
    4.38 :   493d69:       mov    %ecx,-0x4(%rax)
    8.19 :   493d6c:       cmp    %rax,%rsi
    0.00 :   493d6f:       jne    493d60 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2d0>
    0.00 :   493d71:       add    %r10,%rbp
    0.00 :   493d74:       add    $0x4,%r8
    0.00 :   493d78:       cmp    %r9,%r8
    0.00 :   493d7b:       jne    493d50 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2c0>
    0.00 :   493d7d:       add    $0x1,%r11
    0.00 :   493d81:       add    %r14,%r9
    0.00 :   493d84:       cmp    %r11,%r13
    0.00 :   493d87:       jne    493d40 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x2b0>
    0.00 :   493d89:       add    $0x58,%rsp
    0.00 :   493d8d:       pop    %rbx
    0.00 :   493d8e:       pop    %rbp
    0.00 :   493d8f:       pop    %r12
    0.00 :   493d91:       pop    %r13
    0.00 :   493d93:       pop    %r14
    0.00 :   493d95:       pop    %r15
    0.00 :   493d97:       retq
    0.00 :   493d98:       mov    0x40(%rsp),%r13
    0.00 :   493d9d:       test   %r13,%r13
    0.00 :   493da0:       jle    493bcb <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x13b>
    0.00 :   493da6:       mov    0x30(%rsp),%r15
    0.00 :   493dab:       mov    0x38(%rsp),%r9
    0.00 :   493db0:       add    %r12,%r12
    0.00 :   493db3:       add    %r14,%r14
    0.00 :   493db6:       xor    %r11d,%r11d
    0.00 :   493db9:       mov    %r12,%r10
    0.00 :   493dbc:       mov    %r15,%rbx
    0.00 :   493dbf:       lea    (%r15,%r15,1),%rdi
    0.00 :   493dc3:       neg    %rbx
    0.00 :   493dc6:       add    %rdi,%r9
    0.00 :   493dc9:       add    %rbx,%rbx
    0.00 :   493dcc:       nopl   0x0(%rax)
    0.00 :   493dd0:       lea    (%rbx,%r9,1),%r8
    0.00 :   493dd4:       test   %r15,%r15
    0.00 :   493dd7:       jle    493e0f <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x37f>
    0.00 :   493dd9:       nopl   0x0(%rax)
    0.00 :   493de0:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   493de5:       cmp    %rbp,%rsi
    0.00 :   493de8:       je     493e06 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x376>
    0.00 :   493dea:       mov    %r8,%rdx
    0.00 :   493ded:       mov    %rbp,%rax
    0.00 :   493df0:       movzwl (%rdx),%ecx
    0.00 :   493df3:       add    $0x2,%rax
    0.00 :   493df7:       add    %rdi,%rdx
    0.00 :   493dfa:       mov    %cx,-0x2(%rax)
    0.00 :   493dfe:       cmp    %rax,%rsi
    0.00 :   493e01:       jne    493df0 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x360>
    0.00 :   493e03:       add    %r10,%rbp
    0.00 :   493e06:       add    $0x2,%r8
    0.00 :   493e0a:       cmp    %r9,%r8
    0.00 :   493e0d:       jne    493de0 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x350>
    0.00 :   493e0f:       add    $0x1,%r11
    0.00 :   493e13:       add    %r14,%r9
    0.00 :   493e16:       cmp    %r11,%r13
    0.00 :   493e19:       jne    493dd0 <onnxruntime::TransposeSingleAxisInwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.31]+0x340>
    0.00 :   493e1b:       add    $0x58,%rsp
    0.00 :   493e1f:       pop    %rbx
    0.00 :   493e20:       pop    %rbp
    0.00 :   493e21:       pop    %r12
    0.00 :   493e23:       pop    %r13
    0.00 :   493e25:       pop    %r14
    0.00 :   493e27:       pop    %r15
    0.00 :   493e29:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (233 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a7780 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)>:
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a7780:       push   %r13
    0.00 :   6a7782:       push   %r12
    0.00 :   6a7784:       push   %rbp
    0.00 :   6a7785:       push   %rbx
    0.00 :   6a7786:       cmp    $0xf,%rcx
    0.00 :   6a778a:       jbe    6a781e <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x9e>
    0.00 :   6a7790:       mov    %r8,%r13
    0.00 :   6a7793:       mov    %rcx,%r12
    0.00 :   6a7796:       mov    %rsi,%rbp
    0.00 :   6a7799:       mov    %rdi,%rbx
    0.00 :   6a779c:       lea    0x0(,%rdx,4),%r11
    0.00 :   6a77a4:       shl    $0x6,%r13
    0.00 :   6a77a8:       nopl   0x0(%rax,%rax,1)
    0.00 :   6a77b0:       mov    %r8,%r10
    0.00 :   6a77b3:       mov    %rbp,%r9
    0.00 :   6a77b6:       mov    %rbx,%rax
    0.00 :   6a77b9:       nopl   0x0(%rax)
         :            _Z12_mm_loadu_psPKf():
         :
         :            /* Load four SPFP values from P.  The address need not be 16-byte aligned.  */
         :            extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_loadu_ps (float const *__P)
         :            {
         :            return *(__m128_u *)__P;
    2.12 :   6a77c0:       movups 0x10(%r9),%xmm2
   72.51 :   6a77c5:       movups 0x20(%r9),%xmm1
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
   12.64 :   6a77ca:       add    $0x40,%rax
         :            _Z12_mm_loadu_psPKf():
    1.34 :   6a77ce:       movups 0x30(%r9),%xmm0
         :            _Z12_mm_store_psPfDv4_f():
         :
         :            /* Store four SPFP values.  The address must be 16-byte aligned.  */
         :            extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :            _mm_store_ps (float *__P, __m128 __A)
         :            {
         :            *(__m128 *)__P = __A;
    1.30 :   6a77d3:       movups (%r9),%xmm3
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    2.93 :   6a77d7:       add    %r11,%r9
         :            _Z12_mm_store_psPfDv4_f():
    1.09 :   6a77da:       movaps %xmm2,-0x30(%rax)
    0.53 :   6a77de:       movaps %xmm3,-0x40(%rax)
    2.25 :   6a77e2:       movaps %xmm1,-0x20(%rax)
    1.07 :   6a77e6:       movaps %xmm0,-0x10(%rax)
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    2.22 :   6a77ea:       sub    $0x1,%r10
    0.00 :   6a77ee:       jne    6a77c0 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x40>
    0.00 :   6a77f0:       sub    $0x10,%r12
    0.00 :   6a77f4:       add    %r13,%rbx
    0.00 :   6a77f7:       add    $0x40,%rbp
    0.00 :   6a77fb:       cmp    $0xf,%r12
    0.00 :   6a77ff:       ja     6a77b0 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x30>
    0.00 :   6a7801:       lea    -0x10(%rcx),%rax
    0.00 :   6a7805:       and    $0xf,%ecx
    0.00 :   6a7808:       shr    $0x4,%rax
    0.00 :   6a780c:       add    $0x1,%rax
    0.00 :   6a7810:       imul   %rax,%r13
    0.00 :   6a7814:       shl    $0x6,%rax
    0.00 :   6a7818:       add    %rax,%rsi
    0.00 :   6a781b:       add    %r13,%rdi
    0.00 :   6a781e:       test   %rcx,%rcx
    0.00 :   6a7821:       je     6a78c8 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x148>
    0.00 :   6a7827:       mov    %rcx,%rbx
    0.00 :   6a782a:       mov    %rcx,%r11
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a782d:       pxor   %xmm0,%xmm0
    0.00 :   6a7831:       mov    %rcx,%r10
    0.00 :   6a7834:       and    $0x8,%ebx
    0.00 :   6a7837:       and    $0x4,%r11d
    0.00 :   6a783b:       and    $0x2,%r10d
    0.00 :   6a783f:       and    $0x1,%ecx
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a7842:       lea    0x0(,%rdx,4),%r9
    0.00 :   6a784a:       jmp    6a78a8 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x128>
    0.00 :   6a784c:       nopl   0x0(%rax)
         :            _Z12_mm_loadu_psPKf():
         :            return *(__m128_u *)__P;
    0.00 :   6a7850:       movups 0x10(%rsi),%xmm1
         :            _Z12_mm_store_psPfDv4_f():
         :            *(__m128 *)__P = __A;
    0.00 :   6a7854:       movups (%rsi),%xmm4
    0.00 :   6a7857:       lea    0x20(%rdi),%rax
    0.00 :   6a785b:       lea    0x20(%rsi),%rdx
    0.00 :   6a785f:       movaps %xmm4,(%rdi)
    0.00 :   6a7862:       movaps %xmm1,0x10(%rdi)
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a7866:       test   %r11,%r11
    0.00 :   6a7869:       je     6a787a <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0xfa>
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a786b:       movups (%rdx),%xmm5
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a786e:       add    $0x10,%rax
    0.00 :   6a7872:       add    $0x10,%rdx
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a7876:       movaps %xmm5,-0x10(%rax)
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a787a:       test   %r10,%r10
    0.00 :   6a787d:       je     6a788e <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x10e>
    0.00 :   6a787f:       mov    (%rdx),%rbp
    0.00 :   6a7882:       add    $0x8,%rax
    0.00 :   6a7886:       add    $0x8,%rdx
    0.00 :   6a788a:       mov    %rbp,-0x8(%rax)
    0.00 :   6a788e:       test   %rcx,%rcx
    0.00 :   6a7891:       je     6a789b <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x11b>
    0.00 :   6a7893:       movss  (%rdx),%xmm1
    0.00 :   6a7897:       movss  %xmm1,(%rax)
    0.00 :   6a789b:       add    $0x40,%rdi
    0.00 :   6a789f:       add    %r9,%rsi
    0.00 :   6a78a2:       sub    $0x1,%r8
    0.00 :   6a78a6:       je     6a78c8 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0x148>
         :            _Z12_mm_store_psPfDv4_f():
    0.00 :   6a78a8:       movaps %xmm0,(%rdi)
    0.00 :   6a78ab:       movaps %xmm0,0x10(%rdi)
    0.00 :   6a78af:       movaps %xmm0,0x20(%rdi)
    0.00 :   6a78b3:       movaps %xmm0,0x30(%rdi)
         :            _Z18MlasSgemmCopyPackBPfPKfmmm():
    0.00 :   6a78b7:       test   %rbx,%rbx
    0.00 :   6a78ba:       jne    6a7850 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0xd0>
    0.00 :   6a78bc:       mov    %rsi,%rdx
    0.00 :   6a78bf:       mov    %rdi,%rax
    0.00 :   6a78c2:       jmp    6a7866 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)+0xe6>
    0.00 :   6a78c4:       nopl   0x0(%rax)
    0.00 :   6a78c8:       pop    %rbx
    0.00 :   6a78c9:       pop    %rbp
    0.00 :   6a78ca:       pop    %r12
    0.00 :   6a78cc:       pop    %r13
    0.00 :   6a78ce:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (200 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006c1004 <MlasReduceMaximumF32KernelAvx>:
         :            MlasReduceMaximumF32KernelAvx():
    0.00 :   6c1004:       vbroadcastss 0x1e6953(%rip),%ymm0        # 8a7960 <MlasMinimumF32Value>
    0.00 :   6c100d:       test   %rsi,%rsi
    0.00 :   6c1010:       je     6c109f <MlasReduceMaximumF32KernelAvx+0x9b>
    0.00 :   6c1016:       cmp    $0x8,%rsi
    0.00 :   6c101a:       jb     6c1093 <MlasReduceMaximumF32KernelAvx+0x8f>
    0.00 :   6c101c:       cmp    $0x20,%rsi
    0.00 :   6c1020:       jb     6c105e <MlasReduceMaximumF32KernelAvx+0x5a>
    0.00 :   6c1022:       vmovaps %ymm0,%ymm1
    0.00 :   6c1026:       vmovaps %ymm0,%ymm2
    0.00 :   6c102a:       vmovaps %ymm0,%ymm3
    0.00 :   6c102e:       vmaxps (%rdi),%ymm0,%ymm0
   22.47 :   6c1032:       vmaxps 0x20(%rdi),%ymm1,%ymm1
    7.86 :   6c1037:       sub    $0x20,%rsi
    0.00 :   6c103b:       vmaxps 0x40(%rdi),%ymm2,%ymm2
   11.76 :   6c1040:       vmaxps 0x60(%rdi),%ymm3,%ymm3
    3.69 :   6c1045:       add    $0x80,%rdi
    1.96 :   6c104c:       cmp    $0x20,%rsi
    0.00 :   6c1050:       jae    6c102e <MlasReduceMaximumF32KernelAvx+0x2a>
    0.00 :   6c1052:       vmaxps %ymm1,%ymm0,%ymm0
    4.00 :   6c1056:       vmaxps %ymm3,%ymm2,%ymm2
    4.55 :   6c105a:       vmaxps %ymm2,%ymm0,%ymm0
   10.17 :   6c105e:       cmp    $0x8,%rsi
    0.00 :   6c1062:       jb     6c1072 <MlasReduceMaximumF32KernelAvx+0x6e>
    0.00 :   6c1064:       vmaxps (%rdi),%ymm0,%ymm0
    0.00 :   6c1068:       sub    $0x8,%rsi
    0.00 :   6c106c:       add    $0x20,%rdi
    0.00 :   6c1070:       jmp    6c105e <MlasReduceMaximumF32KernelAvx+0x5a>
    0.00 :   6c1072:       vextractf128 $0x1,%ymm0,%xmm1
    7.53 :   6c1078:       vmaxps %xmm1,%xmm0,%xmm0
    7.09 :   6c107c:       vshufps $0xee,%xmm0,%xmm0,%xmm1
    0.89 :   6c1081:       vmaxps %xmm1,%xmm0,%xmm0
    8.10 :   6c1085:       vshufps $0x55,%xmm0,%xmm0,%xmm1
    2.83 :   6c108a:       vmaxss %xmm1,%xmm0,%xmm0
    4.58 :   6c108e:       test   %rsi,%rsi
    0.00 :   6c1091:       je     6c109f <MlasReduceMaximumF32KernelAvx+0x9b>
    0.00 :   6c1093:       vmaxss (%rdi),%xmm0,%xmm0
    0.00 :   6c1097:       add    $0x4,%rdi
    0.00 :   6c109b:       dec    %esi
    0.00 :   6c109d:       jne    6c1093 <MlasReduceMaximumF32KernelAvx+0x8f>
    0.00 :   6c109f:       vzeroupper
    2.54 :   6c10a2:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (173 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006cb3c8 <MlasComputeSumExpF32KernelFma3>:
         :            MlasComputeSumExpF32KernelFma3():
    0.00 :   6cb3c8:       lea    0x1dc5b1(%rip),%rax        # 8a7980 <MlasExpConstants>
    1.22 :   6cb3cf:       vbroadcastss (%rcx),%ymm9
    1.20 :   6cb3d4:       vxorps %xmm10,%xmm10,%xmm10
    0.00 :   6cb3d9:       sub    $0x18,%rdx
    0.00 :   6cb3dd:       jb     6cb548 <MlasComputeSumExpF32KernelFma3+0x180>
    0.00 :   6cb3e3:       vbroadcastss 0x8(%rax),%ymm11
    0.38 :   6cb3e9:       vbroadcastss 0x14(%rax),%ymm2
    2.31 :   6cb3ef:       vaddps (%rdi),%ymm9,%ymm0
    9.04 :   6cb3f3:       vaddps 0x20(%rdi),%ymm9,%ymm3
    0.56 :   6cb3f8:       vaddps 0x40(%rdi),%ymm9,%ymm6
    2.31 :   6cb3fd:       vbroadcastss 0x10(%rax),%ymm15
    1.16 :   6cb403:       vmaxps %ymm0,%ymm11,%ymm0
    3.26 :   6cb407:       vmovaps %ymm2,%ymm5
    0.00 :   6cb40b:       vmaxps %ymm3,%ymm11,%ymm3
    1.75 :   6cb40f:       vmovaps %ymm2,%ymm8
    0.00 :   6cb413:       vmaxps %ymm6,%ymm11,%ymm6
    0.00 :   6cb417:       vbroadcastss 0x18(%rax),%ymm13
    0.00 :   6cb41d:       vfmadd213ps %ymm15,%ymm0,%ymm2
    5.33 :   6cb422:       vfmadd213ps %ymm15,%ymm3,%ymm5
    0.59 :   6cb427:       vfmadd213ps %ymm15,%ymm6,%ymm8
    1.73 :   6cb42c:       vbroadcastss 0x1c(%rax),%ymm14
    0.00 :   6cb432:       vsubps %ymm15,%ymm2,%ymm1
    5.88 :   6cb437:       vsubps %ymm15,%ymm5,%ymm4
    0.56 :   6cb43c:       vsubps %ymm15,%ymm8,%ymm7
    2.86 :   6cb441:       vfmadd231ps %ymm13,%ymm1,%ymm0
    2.98 :   6cb446:       vfmadd231ps %ymm13,%ymm4,%ymm3
    0.00 :   6cb44b:       vfmadd231ps %ymm13,%ymm7,%ymm6
    0.59 :   6cb450:       vfmadd231ps %ymm14,%ymm1,%ymm0
    2.95 :   6cb455:       vfmadd231ps %ymm14,%ymm4,%ymm3
    0.59 :   6cb45a:       vfmadd231ps %ymm14,%ymm7,%ymm6
    1.73 :   6cb45f:       vbroadcastss 0x20(%rax),%ymm1
    0.59 :   6cb465:       vbroadcastss 0x24(%rax),%ymm13
    0.62 :   6cb46b:       vmovaps %ymm1,%ymm4
    0.00 :   6cb46f:       vmovaps %ymm1,%ymm7
    1.64 :   6cb473:       vfmadd213ps %ymm13,%ymm0,%ymm1
    1.10 :   6cb478:       vfmadd213ps %ymm13,%ymm3,%ymm4
    0.00 :   6cb47d:       vfmadd213ps %ymm13,%ymm6,%ymm7
    1.22 :   6cb482:       vbroadcastss 0x28(%rax),%ymm14
    0.00 :   6cb488:       vpslld $0x17,%ymm2,%ymm2
    0.52 :   6cb48d:       vpslld $0x17,%ymm5,%ymm5
    0.60 :   6cb492:       vpslld $0x17,%ymm8,%ymm8
    1.18 :   6cb498:       vbroadcastss 0x3c(%rax),%ymm15
    0.00 :   6cb49e:       vfmadd213ps %ymm14,%ymm0,%ymm1
    1.83 :   6cb4a3:       vfmadd213ps %ymm14,%ymm3,%ymm4
    1.15 :   6cb4a8:       vfmadd213ps %ymm14,%ymm6,%ymm7
    0.59 :   6cb4ad:       vbroadcastss 0x2c(%rax),%ymm13
    0.00 :   6cb4b3:       vpaddd %ymm15,%ymm2,%ymm2
    1.23 :   6cb4b8:       vpaddd %ymm15,%ymm5,%ymm5
    0.59 :   6cb4bd:       vpaddd %ymm15,%ymm8,%ymm8
    0.59 :   6cb4c2:       vbroadcastss 0x30(%rax),%ymm14
    0.00 :   6cb4c8:       vfmadd213ps %ymm13,%ymm0,%ymm1
    1.80 :   6cb4cd:       vfmadd213ps %ymm13,%ymm3,%ymm4
    1.18 :   6cb4d2:       vfmadd213ps %ymm13,%ymm6,%ymm7
    0.57 :   6cb4d7:       vbroadcastss 0x34(%rax),%ymm15
    0.00 :   6cb4dd:       vfmadd213ps %ymm14,%ymm0,%ymm1
    2.92 :   6cb4e2:       vfmadd213ps %ymm14,%ymm3,%ymm4
    0.61 :   6cb4e7:       vfmadd213ps %ymm14,%ymm6,%ymm7
    0.00 :   6cb4ec:       vfmadd213ps %ymm15,%ymm0,%ymm1
    2.33 :   6cb4f1:       vfmadd213ps %ymm15,%ymm3,%ymm4
    0.00 :   6cb4f6:       vfmadd213ps %ymm15,%ymm6,%ymm7
    0.61 :   6cb4fb:       vfmadd213ps %ymm15,%ymm0,%ymm1
    1.17 :   6cb500:       vfmadd213ps %ymm15,%ymm3,%ymm4
    1.48 :   6cb505:       vfmadd213ps %ymm15,%ymm6,%ymm7
    4.11 :   6cb50a:       vmulps %ymm2,%ymm1,%ymm1
    1.83 :   6cb50e:       vmulps %ymm5,%ymm4,%ymm4
    0.00 :   6cb512:       vaddps %ymm1,%ymm10,%ymm10
    4.08 :   6cb516:       vmulps %ymm8,%ymm7,%ymm7
    1.21 :   6cb51b:       vaddps %ymm4,%ymm10,%ymm10
    4.73 :   6cb51f:       add    $0x60,%rdi
    0.00 :   6cb523:       vaddps %ymm7,%ymm10,%ymm10
    6.11 :   6cb527:       test   %rsi,%rsi
    0.00 :   6cb52a:       je     6cb53e <MlasComputeSumExpF32KernelFma3+0x176>
    0.59 :   6cb52c:       vmovups %ymm1,(%rsi)
    0.00 :   6cb530:       vmovups %ymm4,0x20(%rsi)
    0.00 :   6cb535:       vmovups %ymm7,0x40(%rsi)
    1.12 :   6cb53a:       add    $0x60,%rsi
    0.59 :   6cb53e:       sub    $0x18,%rdx
    0.00 :   6cb542:       jae    6cb3e3 <MlasComputeSumExpF32KernelFma3+0x1b>
    0.00 :   6cb548:       add    $0x18,%rdx
    0.00 :   6cb54c:       je     6cb63c <MlasComputeSumExpF32KernelFma3+0x274>
    0.00 :   6cb552:       vbroadcastss 0x8(%rax),%ymm11
    0.00 :   6cb558:       cmp    $0x8,%rdx
    0.00 :   6cb55c:       jb     6cb564 <MlasComputeSumExpF32KernelFma3+0x19c>
    0.00 :   6cb55e:       vmovups (%rdi),%ymm0
    0.00 :   6cb562:       jmp    6cb57d <MlasComputeSumExpF32KernelFma3+0x1b5>
    0.00 :   6cb564:       lea    0x1dbe75(%rip),%r10        # 8a73e0 <MlasMaskMoveTableAvx+0x20>
    0.00 :   6cb56b:       neg    %rdx
    0.00 :   6cb56e:       vmovups (%r10,%rdx,4),%ymm3
    0.00 :   6cb574:       vmaskmovps (%rdi),%ymm3,%ymm0
    0.00 :   6cb579:       vandps %ymm3,%ymm9,%ymm9
    0.00 :   6cb57d:       vbroadcastss 0x14(%rax),%ymm2
    0.00 :   6cb583:       vaddps %ymm0,%ymm9,%ymm0
    0.00 :   6cb587:       vbroadcastss 0x10(%rax),%ymm15
    0.00 :   6cb58d:       vmaxps %ymm0,%ymm11,%ymm0
    0.00 :   6cb591:       vbroadcastss 0x18(%rax),%ymm13
    0.00 :   6cb597:       vfmadd213ps %ymm15,%ymm0,%ymm2
    0.00 :   6cb59c:       vbroadcastss 0x1c(%rax),%ymm14
    0.00 :   6cb5a2:       vsubps %ymm15,%ymm2,%ymm1
    0.00 :   6cb5a7:       vfmadd231ps %ymm13,%ymm1,%ymm0
    0.00 :   6cb5ac:       vfmadd231ps %ymm14,%ymm1,%ymm0
    0.00 :   6cb5b1:       vbroadcastss 0x20(%rax),%ymm1
    0.00 :   6cb5b7:       vbroadcastss 0x24(%rax),%ymm13
    0.00 :   6cb5bd:       vfmadd213ps %ymm13,%ymm0,%ymm1
    0.00 :   6cb5c2:       vbroadcastss 0x28(%rax),%ymm14
    0.00 :   6cb5c8:       vpslld $0x17,%ymm2,%ymm2
    0.00 :   6cb5cd:       vbroadcastss 0x3c(%rax),%ymm15
    0.00 :   6cb5d3:       vfmadd213ps %ymm14,%ymm0,%ymm1
    0.00 :   6cb5d8:       vbroadcastss 0x2c(%rax),%ymm13
    0.00 :   6cb5de:       vpaddd %ymm15,%ymm2,%ymm2
    0.00 :   6cb5e3:       vbroadcastss 0x30(%rax),%ymm14
    0.00 :   6cb5e9:       vfmadd213ps %ymm13,%ymm0,%ymm1
    0.00 :   6cb5ee:       vbroadcastss 0x34(%rax),%ymm15
    0.00 :   6cb5f4:       vfmadd213ps %ymm14,%ymm0,%ymm1
    0.00 :   6cb5f9:       vfmadd213ps %ymm15,%ymm0,%ymm1
    0.00 :   6cb5fe:       vfmadd213ps %ymm15,%ymm0,%ymm1
    0.00 :   6cb603:       vmulps %ymm2,%ymm1,%ymm1
    0.00 :   6cb607:       jb     6cb62a <MlasComputeSumExpF32KernelFma3+0x262>
    0.00 :   6cb609:       vaddps %ymm1,%ymm10,%ymm10
    0.00 :   6cb60d:       test   %rsi,%rsi
    0.00 :   6cb610:       je     6cb61a <MlasComputeSumExpF32KernelFma3+0x252>
    0.00 :   6cb612:       vmovups %ymm1,(%rsi)
    0.00 :   6cb616:       add    $0x20,%rsi
    0.00 :   6cb61a:       add    $0x20,%rdi
    0.51 :   6cb61e:       sub    $0x8,%rdx
    0.00 :   6cb622:       jne    6cb558 <MlasComputeSumExpF32KernelFma3+0x190>
    0.00 :   6cb628:       jmp    6cb63c <MlasComputeSumExpF32KernelFma3+0x274>
    0.00 :   6cb62a:       vandps %ymm3,%ymm1,%ymm1
    0.00 :   6cb62e:       vaddps %ymm1,%ymm10,%ymm10
    0.00 :   6cb632:       test   %rsi,%rsi
    0.00 :   6cb635:       je     6cb63c <MlasComputeSumExpF32KernelFma3+0x274>
    0.00 :   6cb637:       vmaskmovps %ymm1,%ymm3,(%rsi)
    0.00 :   6cb63c:       vhaddps %ymm10,%ymm10,%ymm10
    0.00 :   6cb641:       vhaddps %ymm10,%ymm10,%ymm10
    0.00 :   6cb646:       vextractf128 $0x1,%ymm10,%xmm0
    0.00 :   6cb64c:       vaddss %xmm10,%xmm0,%xmm0
    0.00 :   6cb651:       vzeroupper
    0.00 :   6cb654:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (90 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004936e0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]>:
         :            _ZN11onnxruntimeL27TransposeSingleAxisOutwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.30():
    0.82 :   4936e0:       push   %r15
    0.00 :   4936e2:       lea    0x18(%rdi),%rax
    0.00 :   4936e6:       mov    %rsi,%r15
    0.00 :   4936e9:       push   %r14
    0.00 :   4936eb:       mov    %rdx,%r14
    0.00 :   4936ee:       push   %r13
    0.00 :   4936f0:       mov    %r8,%r13
    0.00 :   4936f3:       push   %r12
    0.00 :   4936f5:       mov    %rdi,%r12
    0.00 :   4936f8:       push   %rbp
    0.00 :   4936f9:       push   %rbx
    0.00 :   4936fa:       sub    $0x58,%rsp
    0.00 :   4936fe:       mov    0x30(%rdi),%rdi
    0.00 :   493702:       test   %r8,%r8
    0.00 :   493705:       cmove  %rax,%r13
    0.00 :   493709:       mov    %rcx,0x8(%rsp)
    0.00 :   49370e:       mov    (%rdi),%rax
    0.00 :   493711:       callq  *0x18(%rax)
    0.00 :   493714:       mov    0x8(%rsp),%rcx
    0.00 :   493719:       mov    %r13,%rdi
    0.00 :   49371c:       mov    0x50(%r12),%rbp
    0.00 :   493721:       mov    %rax,%rbx
    0.00 :   493724:       mov    0x50(%r15),%rax
    0.00 :   493728:       add    (%r15),%rax
    0.00 :   49372b:       mov    %rcx,%rsi
    0.00 :   49372e:       add    (%r12),%rbp
    0.00 :   493732:       mov    %rax,0x38(%rsp)
    0.00 :   493737:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   49373c:       lea    0x1(%r14),%rsi
    0.00 :   493740:       mov    %r13,%rdi
    0.00 :   493743:       mov    %rax,0x40(%rsp)
    0.00 :   493748:       mov    0x0(%r13),%rax
    0.00 :   49374c:       mov    (%rax,%r14,8),%r12
    0.00 :   493750:       callq  5f2a20 <onnxruntime::TensorShape::SizeFromDimension(unsigned long) const>
    0.00 :   493755:       mov    %r13,%rdi
    0.00 :   493758:       mov    %rax,%r15
    0.00 :   49375b:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   493760:       imul   %r15,%rbx
    0.00 :   493764:       cqto
    0.00 :   493766:       idivq  0x40(%rsp)
    1.37 :   49376b:       cqto
    0.00 :   49376d:       idiv   %r15
    0.00 :   493770:       cqto
    0.00 :   493772:       mov    %rax,%r14
    0.00 :   493775:       idiv   %r12
    0.00 :   493778:       mov    %rax,0x30(%rsp)
    0.00 :   49377d:       cmp    $0x2,%rbx
    0.00 :   493781:       je     4939f8 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x318>
    0.00 :   493787:       jbe    49383a <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x15a>
    0.00 :   49378d:       cmp    $0x4,%rbx
    0.00 :   493791:       je     493961 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x281>
    0.00 :   493797:       cmp    $0x8,%rbx
    0.00 :   49379b:       jne    493889 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x1a9>
    0.00 :   4937a1:       mov    0x40(%rsp),%r13
    0.00 :   4937a6:       test   %r13,%r13
    0.00 :   4937a9:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   4937af:       mov    0x30(%rsp),%r15
    0.00 :   4937b4:       shl    $0x3,%r12
    0.00 :   4937b8:       shl    $0x3,%r14
    0.00 :   4937bc:       xor    %r11d,%r11d
    0.00 :   4937bf:       mov    0x38(%rsp),%r9
    0.00 :   4937c4:       mov    %r12,%r10
    0.00 :   4937c7:       mov    %r15,%rbx
    0.00 :   4937ca:       lea    0x0(,%r15,8),%rdi
    0.00 :   4937d2:       neg    %rbx
    0.00 :   4937d5:       add    %rdi,%r9
    0.00 :   4937d8:       shl    $0x3,%rbx
    0.00 :   4937dc:       nopl   0x0(%rax)
    0.00 :   4937e0:       lea    (%r9,%rbx,1),%r8
    0.00 :   4937e4:       test   %r15,%r15
    0.00 :   4937e7:       jle    49381f <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x13f>
    0.00 :   4937e9:       nopl   0x0(%rax)
    0.00 :   4937f0:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   4937f5:       cmp    %rbp,%rsi
    0.00 :   4937f8:       je     493816 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x136>
    0.00 :   4937fa:       mov    %r8,%rdx
    0.00 :   4937fd:       mov    %rbp,%rax
    0.00 :   493800:       add    $0x8,%rax
    0.00 :   493804:       mov    -0x8(%rax),%rcx
    0.00 :   493808:       mov    %rcx,(%rdx)
    0.00 :   49380b:       add    %rdi,%rdx
    0.00 :   49380e:       cmp    %rax,%rsi
    0.00 :   493811:       jne    493800 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x120>
    0.00 :   493813:       add    %r10,%rbp
    0.00 :   493816:       add    $0x8,%r8
    0.00 :   49381a:       cmp    %r9,%r8
    0.00 :   49381d:       jne    4937f0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x110>
    0.00 :   49381f:       add    $0x1,%r11
    0.00 :   493823:       add    %r14,%r9
    0.00 :   493826:       cmp    %r11,%r13
    0.00 :   493829:       jne    4937e0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x100>
    0.00 :   49382b:       add    $0x58,%rsp
    0.00 :   49382f:       pop    %rbx
    0.00 :   493830:       pop    %rbp
    0.00 :   493831:       pop    %r12
    0.00 :   493833:       pop    %r13
    0.00 :   493835:       pop    %r14
    0.00 :   493837:       pop    %r15
    0.00 :   493839:       retq
    0.00 :   49383a:       cmp    $0x1,%rbx
    0.00 :   49383e:       jne    493889 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x1a9>
    0.00 :   493840:       mov    0x40(%rsp),%r15
    0.00 :   493845:       xor    %ebx,%ebx
    0.00 :   493847:       test   %r15,%r15
    0.00 :   49384a:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   49384c:       mov    0x38(%rsp),%r13
    0.00 :   493851:       nopl   0x0(%rax)
    0.00 :   493858:       mov    0x30(%rsp),%rdx
    0.00 :   49385d:       mov    %r13,%rsi
    0.00 :   493860:       mov    %rbp,%rdi
    0.00 :   493863:       mov    %r12,%rcx
    0.00 :   493866:       add    $0x1,%rbx
    0.00 :   49386a:       add    %r14,%rbp
    0.00 :   49386d:       add    %r14,%r13
    0.00 :   493870:       callq  6b0250 <MlasTranspose(unsigned char const*, unsigned char*, unsigned long, unsigned long)>
    0.00 :   493875:       cmp    %rbx,%r15
    0.00 :   493878:       jne    493858 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x178>
    0.00 :   49387a:       add    $0x58,%rsp
    0.00 :   49387e:       pop    %rbx
    0.00 :   49387f:       pop    %rbp
    0.00 :   493880:       pop    %r12
    0.00 :   493882:       pop    %r13
    0.00 :   493884:       pop    %r14
    0.00 :   493886:       pop    %r15
    0.00 :   493888:       retq
    0.00 :   493889:       cmpq   $0x0,0x40(%rsp)
    0.00 :   49388f:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   493891:       mov    %r12,%rdi
    0.00 :   493894:       mov    0x30(%rsp),%rax
    0.00 :   493899:       imul   %rbx,%r14
    0.00 :   49389d:       movq   $0x0,0x28(%rsp)
    0.00 :   4938a6:       imul   %rbx,%rdi
    0.00 :   4938aa:       mov    %rbp,0x10(%rsp)
    0.00 :   4938af:       mov    %rax,%r13
    0.00 :   4938b2:       mov    %eax,0x1c(%rsp)
    0.00 :   4938b6:       imul   %rbx,%r13
    0.00 :   4938ba:       mov    %r14,0x48(%rsp)
    0.00 :   4938bf:       mov    %rdi,0x20(%rsp)
    0.00 :   4938c4:       nopl   0x0(%rax)
    0.00 :   4938c8:       cmpq   $0x0,0x30(%rsp)
    0.00 :   4938ce:       jle    493932 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x252>
    0.00 :   4938d0:       mov    0x38(%rsp),%rax
    0.00 :   4938d5:       xor    %r14d,%r14d
    0.00 :   4938d8:       mov    %rax,0x8(%rsp)
    0.00 :   4938dd:       nopl   (%rax)
    0.00 :   4938e0:       test   %r12,%r12
    0.00 :   4938e3:       jle    493922 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x242>
    0.00 :   4938e5:       mov    0x10(%rsp),%rbp
    0.00 :   4938ea:       mov    0x8(%rsp),%r8
    1.30 :   4938ef:       xor    %r15d,%r15d
    0.00 :   4938f2:       nopw   0x0(%rax,%rax,1)
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    5.85 :   4938f8:       mov    %rbp,%rsi
    0.00 :   4938fb:       mov    %r8,%rdi
   20.80 :   4938fe:       mov    %rbx,%rdx
         :            _ZN11onnxruntimeL27TransposeSingleAxisOutwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.30():
   12.80 :   493901:       add    $0x1,%r15
         :            memcpy():
   12.41 :   493905:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntimeL27TransposeSingleAxisOutwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.30():
   39.20 :   49390a:       add    %rbx,%rbp
         :            memcpy():
    1.21 :   49390d:       mov    %rax,%r8
         :            _ZN11onnxruntimeL27TransposeSingleAxisOutwardsERKSt6vectorImSaImEERKNS_6TensorERS5_llPKNS_11TensorShapeE.isra.30():
    1.42 :   493910:       add    %r13,%r8
    0.00 :   493913:       cmp    %r15,%r12
    0.00 :   493916:       jne    4938f8 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x218>
    0.00 :   493918:       mov    0x20(%rsp),%rdi
    0.77 :   49391d:       add    %rdi,0x10(%rsp)
    1.18 :   493922:       add    %rbx,0x8(%rsp)
    0.00 :   493927:       add    $0x1,%r14d
    0.00 :   49392b:       cmp    0x1c(%rsp),%r14d
    0.00 :   493930:       jne    4938e0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x200>
    0.00 :   493932:       mov    0x48(%rsp),%rdi
    0.00 :   493937:       addq   $0x1,0x28(%rsp)
    0.88 :   49393d:       add    %rdi,0x38(%rsp)
    0.00 :   493942:       mov    0x28(%rsp),%rax
    0.00 :   493947:       cmp    %rax,0x40(%rsp)
    0.00 :   49394c:       jne    4938c8 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x1e8>
    0.00 :   493952:       add    $0x58,%rsp
    0.00 :   493956:       pop    %rbx
    0.00 :   493957:       pop    %rbp
    0.00 :   493958:       pop    %r12
    0.00 :   49395a:       pop    %r13
    0.00 :   49395c:       pop    %r14
    0.00 :   49395e:       pop    %r15
    0.00 :   493960:       retq
    0.00 :   493961:       mov    0x40(%rsp),%r13
    0.00 :   493966:       test   %r13,%r13
    0.00 :   493969:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   49396f:       mov    0x30(%rsp),%r15
    0.00 :   493974:       shl    $0x2,%r12
    0.00 :   493978:       shl    $0x2,%r14
    0.00 :   49397c:       xor    %r11d,%r11d
    0.00 :   49397f:       mov    0x38(%rsp),%r9
    0.00 :   493984:       mov    %r12,%r10
    0.00 :   493987:       mov    %r15,%rbx
    0.00 :   49398a:       lea    0x0(,%r15,4),%rdi
    0.00 :   493992:       neg    %rbx
    0.00 :   493995:       add    %rdi,%r9
    0.00 :   493998:       shl    $0x2,%rbx
    0.00 :   49399c:       nopl   0x0(%rax)
    0.00 :   4939a0:       lea    (%rbx,%r9,1),%r8
    0.00 :   4939a4:       test   %r15,%r15
    0.00 :   4939a7:       jle    4939dd <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2fd>
    0.00 :   4939a9:       nopl   0x0(%rax)
    0.00 :   4939b0:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   4939b5:       cmp    %rbp,%rsi
    0.00 :   4939b8:       je     4939d4 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2f4>
    0.00 :   4939ba:       mov    %r8,%rdx
    0.00 :   4939bd:       mov    %rbp,%rax
    0.00 :   4939c0:       add    $0x4,%rax
    0.00 :   4939c4:       mov    -0x4(%rax),%ecx
    0.00 :   4939c7:       mov    %ecx,(%rdx)
    0.00 :   4939c9:       add    %rdi,%rdx
    0.00 :   4939cc:       cmp    %rax,%rsi
    0.00 :   4939cf:       jne    4939c0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2e0>
    0.00 :   4939d1:       add    %r10,%rbp
    0.00 :   4939d4:       add    $0x4,%r8
    0.00 :   4939d8:       cmp    %r9,%r8
    0.00 :   4939db:       jne    4939b0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2d0>
    0.00 :   4939dd:       add    $0x1,%r11
    0.00 :   4939e1:       add    %r14,%r9
    0.00 :   4939e4:       cmp    %r11,%r13
    0.00 :   4939e7:       jne    4939a0 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x2c0>
    0.00 :   4939e9:       add    $0x58,%rsp
    0.00 :   4939ed:       pop    %rbx
    0.00 :   4939ee:       pop    %rbp
    0.00 :   4939ef:       pop    %r12
    0.00 :   4939f1:       pop    %r13
    0.00 :   4939f3:       pop    %r14
    0.00 :   4939f5:       pop    %r15
    0.00 :   4939f7:       retq
    0.00 :   4939f8:       mov    0x40(%rsp),%r13
    0.00 :   4939fd:       test   %r13,%r13
    0.00 :   493a00:       jle    49382b <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x14b>
    0.00 :   493a06:       mov    0x30(%rsp),%r15
    0.00 :   493a0b:       mov    0x38(%rsp),%r9
    0.00 :   493a10:       add    %r12,%r12
    0.00 :   493a13:       add    %r14,%r14
    0.00 :   493a16:       xor    %r11d,%r11d
    0.00 :   493a19:       mov    %r12,%r10
    0.00 :   493a1c:       mov    %r15,%rbx
    0.00 :   493a1f:       lea    (%r15,%r15,1),%rdi
    0.00 :   493a23:       neg    %rbx
    0.00 :   493a26:       add    %rdi,%r9
    0.00 :   493a29:       add    %rbx,%rbx
    0.00 :   493a2c:       nopl   0x0(%rax)
    0.00 :   493a30:       lea    (%rbx,%r9,1),%r8
    0.00 :   493a34:       test   %r15,%r15
    0.00 :   493a37:       jle    493a6f <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x38f>
    0.00 :   493a39:       nopl   0x0(%rax)
    0.00 :   493a40:       lea    0x0(%rbp,%r12,1),%rsi
    0.00 :   493a45:       cmp    %rbp,%rsi
    0.00 :   493a48:       je     493a66 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x386>
    0.00 :   493a4a:       mov    %r8,%rdx
    0.00 :   493a4d:       mov    %rbp,%rax
    0.00 :   493a50:       add    $0x2,%rax
    0.00 :   493a54:       movzwl -0x2(%rax),%ecx
    0.00 :   493a58:       mov    %cx,(%rdx)
    0.00 :   493a5b:       add    %rdi,%rdx
    0.00 :   493a5e:       cmp    %rax,%rsi
    0.00 :   493a61:       jne    493a50 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x370>
    0.00 :   493a63:       add    %r10,%rbp
    0.00 :   493a66:       add    $0x2,%r8
    0.00 :   493a6a:       cmp    %r9,%r8
    0.00 :   493a6d:       jne    493a40 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x360>
    0.00 :   493a6f:       add    $0x1,%r11
    0.00 :   493a73:       add    %r14,%r9
    0.00 :   493a76:       cmp    %r11,%r13
    0.00 :   493a79:       jne    493a30 <onnxruntime::TransposeSingleAxisOutwards(std::vector<unsigned long, std::allocator<unsigned long> > const&, onnxruntime::Tensor const&, onnxruntime::Tensor&, long, long, onnxruntime::TensorShape const*) [clone .isra.30]+0x350>
    0.00 :   493a7b:       add    $0x58,%rsp
    0.00 :   493a7f:       pop    %rbx
    0.00 :   493a80:       pop    %rbp
    0.00 :   493a81:       pop    %r12
    0.00 :   493a83:       pop    %r13
    0.00 :   493a85:       pop    %r14
    0.00 :   493a87:       pop    %r15
    0.00 :   493a89:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (114 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a8810 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)>:
         :            _Z24MlasSgemmPackedOperation15CBLAS_TRANSPOSEmmmmfPKfmPKvmfPfm():
    0.00 :   6a8810:       push   %r15
    0.00 :   6a8812:       push   %r14
    0.00 :   6a8814:       push   %r13
    0.00 :   6a8816:       push   %r12
    0.00 :   6a8818:       push   %rbp
    0.00 :   6a8819:       push   %rbx
    0.00 :   6a881a:       sub    $0x30b8,%rsp
    0.00 :   6a8821:       mov    0x30f8(%rsp),%rax
    0.00 :   6a8829:       mov    %edi,0x64(%rsp)
    0.00 :   6a882d:       mov    %rsi,0x50(%rsp)
    0.00 :   6a8832:       mov    0x3110(%rsp),%r15
    0.00 :   6a883a:       mov    %rax,0x70(%rsp)
    0.00 :   6a883f:       mov    0x3108(%rsp),%rax
    0.00 :   6a8847:       mov    %rdx,0x90(%rsp)
    0.00 :   6a884f:       mov    %rcx,0x80(%rsp)
    0.00 :   6a8857:       mov    %r8,0x40(%rsp)
    0.00 :   6a885c:       mov    %r9,0x68(%rsp)
    0.00 :   6a8861:       mov    %rax,0x88(%rsp)
    0.00 :   6a8869:       movss  %xmm0,0x1c(%rsp)
    0.00 :   6a886f:       movss  %xmm1,0x9c(%rsp)
    0.00 :   6a8878:       mov    %fs:0x28,%rax
    0.00 :   6a8881:       mov    %rax,0x30a8(%rsp)
    0.00 :   6a8889:       xor    %eax,%eax
    0.00 :   6a888b:       test   %rcx,%rcx
    0.00 :   6a888e:       je     6a8ad8 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x2c8>
    0.00 :   6a8894:       movss  0x17e508(%rip),%xmm0        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   6a889c:       mov    $0x1,%ecx
    0.00 :   6a88a1:       movq   $0x0,0x78(%rsp)
    0.00 :   6a88aa:       ucomiss %xmm0,%xmm1
    0.00 :   6a88ad:       pxor   %xmm0,%xmm0
    0.00 :   6a88b1:       setp   %dl
    0.00 :   6a88b4:       cmovne %ecx,%edx
    0.00 :   6a88b7:       ucomiss %xmm0,%xmm1
    0.00 :   6a88ba:       setp   %al
    0.00 :   6a88bd:       cmovne %ecx,%eax
    0.00 :   6a88c0:       and    %eax,%edx
    0.00 :   6a88c2:       ucomiss %xmm0,%xmm1
    0.00 :   6a88c5:       mov    $0x0,%eax
    0.00 :   6a88ca:       mov    %dl,0x9a(%rsp)
    0.00 :   6a88d1:       setnp  %dl
    0.00 :   6a88d4:       cmove  %edx,%eax
    0.00 :   6a88d7:       mov    %al,0x9b(%rsp)
    0.00 :   6a88de:       lea    0xa0(%rsp),%rax
    0.00 :   6a88e6:       mov    %rax,0x30(%rsp)
    2.19 :   6a88eb:       mov    0x78(%rsp),%rcx
    0.00 :   6a88f0:       mov    0x90(%rsp),%rax
    0.00 :   6a88f8:       mov    0x80(%rsp),%rdi
    0.00 :   6a8900:       add    %rcx,%rax
    0.00 :   6a8903:       sub    %rcx,%rdi
    0.00 :   6a8906:       mov    %rax,0x48(%rsp)
    0.00 :   6a890b:       mov    $0x80,%eax
    0.00 :   6a8910:       cmp    $0x80,%rdi
    0.00 :   6a8917:       cmovbe %rdi,%rax
    0.00 :   6a891b:       cmpb   $0x0,0x9a(%rsp)
    0.00 :   6a8923:       mov    %rax,0x10(%rsp)
    0.00 :   6a8928:       jne    6a8b99 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x389>
    0.00 :   6a892e:       cmpq   $0x0,0x40(%rsp)
    0.00 :   6a8934:       je     6a8abb <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x2ab>
    0.00 :   6a893a:       mov    0x88(%rsp),%rax
    0.00 :   6a8942:       mov    0x78(%rsp),%rdi
    0.00 :   6a8947:       movq   $0x0,0x38(%rsp)
    0.00 :   6a8950:       lea    (%rax,%rdi,4),%rax
    0.00 :   6a8954:       mov    %rax,0x58(%rsp)
    0.00 :   6a8959:       movzbl 0x9b(%rsp),%eax
    0.00 :   6a8961:       mov    %al,0x63(%rsp)
    0.00 :   6a8965:       nopl   (%rax)
    1.94 :   6a8968:       mov    0x38(%rsp),%rsi
    0.00 :   6a896d:       mov    0x40(%rsp),%rbp
    0.00 :   6a8972:       mov    $0x100,%eax
    0.00 :   6a8977:       mov    0x48(%rsp),%rdx
    0.00 :   6a897c:       mov    0x70(%rsp),%rcx
    3.60 :   6a8981:       sub    %rsi,%rbp
    0.00 :   6a8984:       cmp    $0x100,%rbp
    0.00 :   6a898b:       cmova  %rax,%rbp
    0.00 :   6a898f:       mov    0x3100(%rsp),%rax
    2.11 :   6a8997:       imul   %rbp,%rdx
    0.00 :   6a899b:       imul   %rsi,%rax
    0.00 :   6a899f:       add    %rdx,%rax
    0.00 :   6a89a2:       cmpl   $0x6f,0x64(%rsp)
    0.00 :   6a89a7:       lea    (%rcx,%rax,4),%rax
    0.68 :   6a89ab:       mov    %rax,0x8(%rsp)
    0.00 :   6a89b0:       je     6a8b01 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x2f1>
    0.00 :   6a89b6:       mov    0x38(%rsp),%rax
    0.00 :   6a89bb:       mov    0x68(%rsp),%rcx
    0.00 :   6a89c0:       imul   0x30f0(%rsp),%rax
    0.00 :   6a89c9:       mov    0x58(%rsp),%r14
    0.00 :   6a89ce:       lea    (%rcx,%rax,4),%rax
    0.00 :   6a89d2:       mov    %rax,0x28(%rsp)
    0.00 :   6a89d7:       mov    0x50(%rsp),%rax
    0.00 :   6a89dc:       mov    %rax,0x20(%rsp)
    0.00 :   6a89e1:       mov    0x20(%rsp),%r13
    0.00 :   6a89e6:       test   %r13,%r13
    0.00 :   6a89e9:       je     6a8aa1 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x291>
    0.00 :   6a89ef:       nop
    0.00 :   6a89f0:       cmp    $0xc,%r13
    0.00 :   6a89f4:       mov    $0xc,%ebx
    0.00 :   6a89f9:       mov    %rbp,%r8
    0.00 :   6a89fc:       mov    0x28(%rsp),%r12
    0.00 :   6a8a01:       cmovbe %r13,%rbx
    0.00 :   6a8a05:       mov    0x30f0(%rsp),%rdx
    0.00 :   6a8a0d:       mov    0x30(%rsp),%rdi
    0.00 :   6a8a12:       mov    %r12,%rsi
    0.00 :   6a8a15:       mov    %rbx,%rcx
    0.00 :   6a8a18:       sub    %rbx,%r13
    0.00 :   6a8a1b:       callq  6a7610 <MlasSgemmTransposeA(float*, float const*, unsigned long, unsigned long, unsigned long)>
    0.00 :   6a8a20:       lea    (%r12,%rbx,4),%rax
    0.00 :   6a8a24:       mov    %r13,0x20(%rsp)
    0.00 :   6a8a29:       mov    0x30(%rsp),%r12
    0.00 :   6a8a2e:       mov    %rax,0x28(%rsp)
    0.00 :   6a8a33:       lea    0x582506(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8a3a:       movzbl 0x63(%rsp),%r13d
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8a40:       mov    %rax,(%rsp)
    0.00 :   6a8a44:       nopl   0x0(%rax)
    0.00 :   6a8a48:       sub    $0x8,%rsp
    0.00 :   6a8a4c:       mov    %r14,%rdx
    0.00 :   6a8a4f:       mov    %r12,%rdi
    0.00 :   6a8a52:       mov    %rbx,%r8
    0.00 :   6a8a55:       push   %r13
    0.00 :   6a8a57:       mov    %rbp,%rcx
    0.00 :   6a8a5a:       push   %r15
    0.00 :   6a8a5c:       push   %rbp
    0.00 :   6a8a5d:       mov    0x20(%rsp),%rax
    0.00 :   6a8a62:       movss  0x3c(%rsp),%xmm0
    0.00 :   6a8a68:       mov    0x30(%rsp),%r9
    0.00 :   6a8a6d:       mov    0x28(%rsp),%rsi
    0.00 :   6a8a72:       callq  *(%rax)
    0.00 :   6a8a74:       mov    %r15,%rdx
    0.00 :   6a8a77:       add    $0x20,%rsp
    0.00 :   6a8a7b:       imul   %rax,%rdx
    0.00 :   6a8a7f:       lea    (%r14,%rdx,4),%r14
    0.00 :   6a8a83:       mov    %rax,%rdx
    0.00 :   6a8a86:       imul   %rbp,%rdx
    0.00 :   6a8a8a:       lea    (%r12,%rdx,4),%r12
    0.00 :   6a8a8e:       sub    %rax,%rbx
    0.00 :   6a8a91:       jne    6a8a48 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x238>
         :            _Z24MlasSgemmPackedOperation15CBLAS_TRANSPOSEmmmmfPKfmPKvmfPfm():
    0.00 :   6a8a93:       mov    0x20(%rsp),%r13
    0.00 :   6a8a98:       test   %r13,%r13
    0.00 :   6a8a9b:       jne    6a89f0 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x1e0>
    1.41 :   6a8aa1:       add    %rbp,0x38(%rsp)
    2.12 :   6a8aa6:       mov    0x38(%rsp),%rax
    0.00 :   6a8aab:       movb   $0x0,0x63(%rsp)
    0.00 :   6a8ab0:       cmp    %rax,0x40(%rsp)
    0.00 :   6a8ab5:       ja     6a8968 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x158>
    0.00 :   6a8abb:       mov    0x10(%rsp),%rdi
    0.00 :   6a8ac0:       add    %rdi,0x78(%rsp)
    0.00 :   6a8ac5:       mov    0x78(%rsp),%rax
    0.00 :   6a8aca:       cmp    %rax,0x80(%rsp)
    0.00 :   6a8ad2:       ja     6a88eb <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0xdb>
    0.00 :   6a8ad8:       mov    0x30a8(%rsp),%rax
    0.00 :   6a8ae0:       xor    %fs:0x28,%rax
    0.00 :   6a8ae9:       jne    6a8bc5 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x3b5>
    0.00 :   6a8aef:       add    $0x30b8,%rsp
    0.00 :   6a8af6:       pop    %rbx
    0.00 :   6a8af7:       pop    %rbp
    0.00 :   6a8af8:       pop    %r12
    0.00 :   6a8afa:       pop    %r13
    0.00 :   6a8afc:       pop    %r14
    0.00 :   6a8afe:       pop    %r15
    0.00 :   6a8b00:       retq
    0.00 :   6a8b01:       mov    0x68(%rsp),%rax
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8b06:       mov    0x50(%rsp),%rbx
         :            _Z24MlasSgemmPackedOperation15CBLAS_TRANSPOSEmmmmfPKfmPKvmfPfm():
    0.00 :   6a8b0b:       movzbl 0x63(%rsp),%r12d
    0.59 :   6a8b11:       lea    (%rax,%rsi,4),%r13
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8b15:       test   %rbx,%rbx
    0.00 :   6a8b18:       je     6a8aa1 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x291>
    0.00 :   6a8b1a:       lea    0x58241f(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8b21:       mov    0x58(%rsp),%r14
    0.00 :   6a8b26:       mov    %rbp,(%rsp)
    0.00 :   6a8b2a:       mov    %r15,%rbp
    0.00 :   6a8b2d:       mov    %r13,%r15
    0.00 :   6a8b30:       mov    %r12d,%r13d
    0.00 :   6a8b33:       mov    0x30f0(%rsp),%r12
    0.00 :   6a8b3b:       mov    %rax,0x20(%rsp)
    1.06 :   6a8b40:       sub    $0x8,%rsp
    0.00 :   6a8b44:       mov    %r14,%rdx
    1.43 :   6a8b47:       mov    %r15,%rdi
    0.00 :   6a8b4a:       mov    %rbx,%r8
    3.55 :   6a8b4d:       push   %r13
    0.00 :   6a8b4f:       push   %rbp
    2.65 :   6a8b50:       push   %r12
    0.96 :   6a8b52:       mov    0x40(%rsp),%rax
   24.66 :   6a8b57:       movss  0x3c(%rsp),%xmm0
   13.96 :   6a8b5d:       mov    0x30(%rsp),%r9
    6.05 :   6a8b62:       mov    0x20(%rsp),%rcx
    6.69 :   6a8b67:       mov    0x28(%rsp),%rsi
    3.57 :   6a8b6c:       callq  *(%rax)
    6.35 :   6a8b6e:       mov    %rbp,%rdx
    3.75 :   6a8b71:       add    $0x20,%rsp
    1.21 :   6a8b75:       imul   %rax,%rdx
    2.44 :   6a8b79:       lea    (%r14,%rdx,4),%r14
    2.44 :   6a8b7d:       mov    %r12,%rdx
    0.00 :   6a8b80:       imul   %rax,%rdx
    3.04 :   6a8b84:       lea    (%r15,%rdx,4),%r15
    0.00 :   6a8b88:       sub    %rax,%rbx
    0.00 :   6a8b8b:       jne    6a8b40 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x330>
    0.00 :   6a8b8d:       mov    %rbp,%r15
    0.00 :   6a8b90:       mov    (%rsp),%rbp
    1.58 :   6a8b94:       jmpq   6a8aa1 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x291>
         :            _Z24MlasSgemmPackedOperation15CBLAS_TRANSPOSEmmmmfPKfmPKvmfPfm():
    0.00 :   6a8b99:       mov    0x88(%rsp),%rax
    0.00 :   6a8ba1:       mov    0x10(%rsp),%rdx
    0.00 :   6a8ba6:       movss  0x9c(%rsp),%xmm0
    0.00 :   6a8baf:       mov    0x50(%rsp),%rsi
    0.00 :   6a8bb4:       lea    (%rax,%rcx,4),%rdi
    0.00 :   6a8bb8:       mov    %r15,%rcx
    0.00 :   6a8bbb:       callq  6a7580 <MlasSgemmMultiplyBeta(float*, unsigned long, unsigned long, unsigned long, float)>
    0.00 :   6a8bc0:       jmpq   6a892e <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)+0x11e>
    0.00 :   6a8bc5:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (33 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004bb850 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)>:
         :            _ZZN11onnxruntime12_GLOBAL__N_126CreateScalarBroadcastFuncsIfEENS_25ProcessBroadcastSpanFuncsEvENUlRNS_15BroadcastHelperEE0_4_FUNES4_():
    0.00 :   4bb850:       mov    (%rdi),%rax
    0.00 :   4bb853:       mov    0x8(%rdi),%rcx
    0.00 :   4bb857:       cmpq   $0x0,0x50(%rdi)
    0.00 :   4bb85c:       mov    0x40(%rdi),%r10
    0.00 :   4bb860:       mov    0x88(%rax),%rdx
    0.00 :   4bb867:       setne  %sil
    0.00 :   4bb86b:       mov    0x28(%rax),%r8
    0.00 :   4bb86f:       add    0x20(%rdi),%rdx
    0.00 :   4bb873:       mov    0x18(%rcx),%r9
    0.00 :   4bb877:       mov    0x48(%rdi),%rcx
    0.00 :   4bb87b:       mov    0xe0(%rax),%rdi
    0.00 :   4bb882:       mov    0x30(%rax),%rax
    0.00 :   4bb886:       movss  (%rax,%rdi,4),%xmm1
    3.04 :   4bb88b:       test   %rcx,%rcx
    0.00 :   4bb88e:       jle    4bb8bb <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)+0x6b>
    0.00 :   4bb890:       lea    (%r9,%r10,4),%rdi
    0.00 :   4bb894:       xor    %eax,%eax
    0.00 :   4bb896:       add    %r8,%rdx
    0.00 :   4bb899:       nopl   0x0(%rax)
    0.00 :   4bb8a0:       movaps %xmm1,%xmm0
    3.10 :   4bb8a3:       cmp    (%rdx,%rax,1),%sil
    0.00 :   4bb8a7:       je     4bb8ad <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)+0x5d>
    9.35 :   4bb8a9:       pxor   %xmm0,%xmm0
   39.24 :   4bb8ad:       movss  %xmm0,(%rdi,%rax,4)
   39.93 :   4bb8b2:       add    $0x1,%rax
    5.34 :   4bb8b6:       cmp    %rax,%rcx
    0.00 :   4bb8b9:       jne    4bb8a0 <onnxruntime::(anonymous namespace)::CreateScalarBroadcastFuncs<float>()::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)+0x50>
    0.00 :   4bb8bb:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (40 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000516470 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   516470:       push   %r15
    0.00 :   516472:       mov    %rdx,%r15
    0.00 :   516475:       push   %r14
    0.00 :   516477:       push   %r13
    0.00 :   516479:       mov    %rdi,%r13
    0.00 :   51647c:       mov    %rdx,%rdi
    0.00 :   51647f:       push   %r12
    0.00 :   516481:       push   %rbp
    0.00 :   516482:       push   %rbx
    0.00 :   516483:       sub    $0x258,%rsp
    0.00 :   51648a:       mov    %rsi,0x8(%rsp)
    0.00 :   51648f:       xor    %esi,%esi
    0.00 :   516491:       mov    %fs:0x28,%rax
    0.00 :   51649a:       mov    %rax,0x248(%rsp)
    0.00 :   5164a2:       xor    %eax,%eax
    0.00 :   5164a4:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164a9:       mov    $0x1,%esi
    0.00 :   5164ae:       mov    %r15,%rdi
    0.00 :   5164b1:       mov    %rax,%r12
    0.00 :   5164b4:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164b9:       mov    $0x2,%esi
    0.00 :   5164be:       mov    %r15,%rdi
    0.00 :   5164c1:       mov    %rax,%r14
    0.00 :   5164c4:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164c9:       mov    $0x3,%esi
    0.00 :   5164ce:       mov    %r15,%rdi
    0.00 :   5164d1:       mov    %rax,0x10(%rsp)
    0.00 :   5164d6:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164db:       mov    $0x4,%esi
    0.00 :   5164e0:       mov    %r15,%rdi
    0.00 :   5164e3:       mov    %rax,%rbx
    0.00 :   5164e6:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   5164eb:       xor    %esi,%esi
    0.00 :   5164ed:       lea    0x18(%r12),%rdx
    0.00 :   5164f2:       mov    %r15,%rdi
    0.00 :   5164f5:       mov    %rax,(%rsp)
    0.00 :   5164f9:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5164fe:       mov    0x20(%r12),%rbp
    0.00 :   516503:       mov    %rax,%rsi
    0.00 :   516506:       mov    0x18(%r12),%rax
    0.00 :   51650b:       sub    %rax,%rbp
    0.00 :   51650e:       cmp    $0x18,%rbp
    0.00 :   516512:       jne    516580 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x110>
         :            *  and if corresponding elements compare equal.
         :            */
         :            template<typename _Tp, typename _Alloc>
         :            inline bool
         :            operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
         :            { return (__x.size() == __y.size()
    0.00 :   516514:       mov    0x18(%r14),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   516518:       mov    0x20(%r14),%rdx
    0.00 :   51651c:       sub    %rcx,%rdx
         :            && std::equal(__x.begin(), __x.end(), __y.begin())); }
    0.00 :   51651f:       cmp    $0x18,%rdx
    0.00 :   516523:       je     516878 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x408>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516529:       lea    0xd0(%rsp),%rbx
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516531:       lea    0x36c5c4(%rip),%rdx        # 882afc <typeinfo name for onnxruntime::contrib::SampleOp<float>+0xdc>
    0.00 :   516538:       lea    -0x2c(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51653c:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516540:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516543:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   51654b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   516550:       mov    %rbx,%rcx
    0.00 :   516553:       mov    $0x2,%edx
    0.00 :   516558:       mov    %r13,%rdi
    0.00 :   51655b:       mov    $0x2,%esi
    0.00 :   516560:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   516565:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   51656d:       add    $0x10,%rbx
    0.00 :   516571:       cmp    %rbx,%rdi
    0.00 :   516574:       jne    516825 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3b5>
    0.00 :   51657a:       jmpq   51682a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3ba>
    0.00 :   51657f:       nop
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   516580:       lea    0xd0(%rsp),%rbx
    0.00 :   516588:       lea    0x70(%rbx),%rdi
    0.00 :   51658c:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   516591:       mov    0x711590(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516598:       xor    %esi,%esi
    0.00 :   51659a:       movq   $0x0,0x218(%rsp)
    0.00 :   5165a6:       mov    %si,0x220(%rsp)
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5165ae:       xor    %esi,%esi
    0.00 :   5165b0:       movq   $0x0,0x228(%rsp)
    0.00 :   5165bc:       lea    0x10(%r15),%rax
    0.00 :   5165c0:       mov    %rax,0x140(%rsp)
    0.00 :   5165c8:       mov    0x7117d1(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5165cf:       movq   $0x0,0x230(%rsp)
    0.00 :   5165db:       movq   $0x0,0x238(%rsp)
    0.00 :   5165e7:       mov    0x8(%rax),%r14
    0.00 :   5165eb:       movq   $0x0,0x240(%rsp)
    0.00 :   5165f7:       mov    0x10(%rax),%rax
    0.00 :   5165fb:       mov    -0x18(%r14),%rdi
    0.00 :   5165ff:       mov    %r14,0xd0(%rsp)
    0.00 :   516607:       mov    %rax,0x10(%rsp)
    0.00 :   51660c:       add    %rbx,%rdi
    0.00 :   51660f:       mov    %rax,(%rdi)
    0.00 :   516612:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   516617:       mov    0x711742(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   51661e:       lea    0x40(%rbx),%rdi
    0.00 :   516622:       movq   $0x0,0xe0(%rsp)
    0.00 :   51662e:       movq   $0x0,0xe8(%rsp)
    0.00 :   51663a:       lea    0x18(%r12),%rax
    0.00 :   51663f:       movq   $0x0,0xf0(%rsp)
    0.00 :   51664b:       mov    %rax,0xd0(%rsp)
    0.00 :   516653:       lea    0x40(%r12),%rax
    0.00 :   516658:       mov    %rax,0x140(%rsp)
    0.00 :   516660:       mov    0x7115f9(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516667:       movq   $0x0,0xf8(%rsp)
    0.00 :   516673:       mov    %rax,(%rsp)
    0.00 :   516677:       add    $0x10,%rax
    0.00 :   51667b:       mov    %rax,0xd8(%rsp)
    0.00 :   516683:       movq   $0x0,0x100(%rsp)
    0.00 :   51668f:       movq   $0x0,0x108(%rsp)
    0.00 :   51669b:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5166a0:       mov    0x711931(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5166a7:       lea    0x8(%rbx),%rsi
    0.00 :   5166ab:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5166af:       movl   $0x10,0x118(%rsp)
    0.00 :   5166ba:       mov    %rax,0x8(%rsp)
    0.00 :   5166bf:       add    $0x10,%rax
    0.00 :   5166c3:       mov    %rax,0xd8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5166cb:       lea    0x60(%rbx),%rax
    0.00 :   5166cf:       mov    %rax,0x120(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5166d7:       movq   $0x0,0x128(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5166e3:       movb   $0x0,0x130(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5166eb:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5166f0:       mov    $0x2c,%edx
    0.00 :   5166f5:       lea    0x36c3a4(%rip),%rsi        # 882aa0 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x80>
    0.00 :   5166fc:       mov    %rbx,%rdi
    0.00 :   5166ff:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   516704:       mov    %rbp,%rsi
         :            { return _M_insert(__n); }
    0.00 :   516707:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51670a:       lea    0xb0(%rsp),%rbp
    0.00 :   516712:       sar    $0x3,%rsi
    0.00 :   516716:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   51671b:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   51671f:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51672b:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   516733:       mov    0x100(%rsp),%rax
    0.00 :   51673b:       movb   $0x0,0xc0(%rsp)
    0.00 :   516743:       test   %rax,%rax
    0.00 :   516746:       je     516b60 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x6f0>
         :            if (this->pptr() > this->egptr())
    0.00 :   51674c:       mov    0xf0(%rsp),%r8
    0.00 :   516754:       mov    0xf8(%rsp),%rcx
    0.00 :   51675c:       cmp    %r8,%rax
    0.00 :   51675f:       jbe    516860 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3f0>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516765:       sub    %rcx,%rax
    0.00 :   516768:       xor    %edx,%edx
    0.00 :   51676a:       xor    %esi,%esi
    0.00 :   51676c:       mov    %rbp,%rdi
    0.00 :   51676f:       mov    %rax,%r8
    0.00 :   516772:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   516777:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   51677c:       mov    0x120(%rsp),%rdi
    0.00 :   516784:       mov    %rax,0xd0(%rsp)
    0.00 :   51678c:       lea    0x40(%r12),%rax
    0.00 :   516791:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   516799:       mov    0x8(%rsp),%rax
    0.00 :   51679e:       add    $0x10,%rax
    0.00 :   5167a2:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   5167aa:       lea    0x60(%rbx),%rax
    0.00 :   5167ae:       cmp    %rax,%rdi
    0.00 :   5167b1:       je     5167b8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x348>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5167b3:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5167b8:       mov    (%rsp),%rax
    0.00 :   5167bc:       lea    0x40(%rbx),%rdi
    0.00 :   5167c0:       add    $0x10,%rax
    0.00 :   5167c4:       mov    %rax,0xd8(%rsp)
    0.00 :   5167cc:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5167d1:       mov    -0x18(%r14),%rax
    0.00 :   5167d5:       mov    0x10(%rsp),%rcx
    0.00 :   5167da:       mov    %r14,0xd0(%rsp)
         :            ~basic_ios() { }
    0.00 :   5167e2:       lea    0x70(%rbx),%rdi
    0.00 :   5167e6:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   5167ee:       lea    0x10(%r15),%rax
    0.00 :   5167f2:       mov    %rax,0x140(%rsp)
    0.00 :   5167fa:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5167ff:       mov    %rbp,%rcx
    0.00 :   516802:       mov    $0x2,%edx
    0.00 :   516807:       mov    %r13,%rdi
    0.00 :   51680a:       mov    $0x2,%esi
    0.00 :   51680f:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   516814:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   51681c:       add    $0x10,%rbp
    0.00 :   516820:       cmp    %rbp,%rdi
    0.00 :   516823:       je     51682a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3ba>
    0.00 :   516825:       callq  53300 <operator delete(void*)@plt>
    0.00 :   51682a:       mov    0x248(%rsp),%rcx
    0.00 :   516832:       xor    %fs:0x28,%rcx
    0.00 :   51683b:       mov    %r13,%rax
    0.00 :   51683e:       jne    517882 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1412>
    0.00 :   516844:       add    $0x258,%rsp
    0.00 :   51684b:       pop    %rbx
    0.00 :   51684c:       pop    %rbp
    0.00 :   51684d:       pop    %r12
    0.00 :   51684f:       pop    %r13
    0.00 :   516851:       pop    %r14
    0.00 :   516853:       pop    %r15
    0.00 :   516855:       retq
    0.00 :   516856:       nopw   %cs:0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516860:       sub    %rcx,%r8
    0.00 :   516863:       xor    %edx,%edx
    0.00 :   516865:       xor    %esi,%esi
    0.00 :   516867:       mov    %rbp,%rdi
    0.00 :   51686a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   51686f:       jmpq   516777 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x307>
    0.00 :   516874:       nopl   0x0(%rax)
         :            template<typename _Tp>
         :            static bool
         :            equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
         :            {
         :            if (const size_t __len = (__last1 - __first1))
         :            return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
    0.00 :   516878:       mov    (%rax),%rdx
    0.00 :   51687b:       mov    0x8(%rax),%rdi
    0.00 :   51687f:       xor    (%rcx),%rdx
    0.00 :   516882:       xor    0x8(%rcx),%rdi
    0.00 :   516886:       or     %rdx,%rdi
    0.00 :   516889:       jne    516529 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xb9>
    0.00 :   51688f:       mov    0x10(%rax),%rdx
    0.00 :   516893:       cmp    0x10(%rcx),%rdx
    0.00 :   516897:       jne    516529 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xb9>
    0.00 :   51689d:       mov    0x10(%rsp),%rcx
    0.00 :   5168a2:       mov    0x18(%rcx),%rdi
    0.00 :   5168a6:       mov    0x20(%rcx),%rcx
    0.00 :   5168aa:       mov    %rcx,%rbp
    0.00 :   5168ad:       mov    %rcx,0x18(%rsp)
    0.00 :   5168b2:       sub    %rdi,%rbp
    0.00 :   5168b5:       cmp    $0x8,%rbp
    0.00 :   5168b9:       je     516b71 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x701>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5168bf:       lea    0xd0(%rsp),%rbx
    0.00 :   5168c7:       lea    0x70(%rbx),%rdi
    0.00 :   5168cb:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5168d0:       mov    0x711251(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5168d7:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   5168d9:       xor    %esi,%esi
    0.00 :   5168db:       mov    %cx,0x220(%rsp)
    0.00 :   5168e3:       movq   $0x0,0x218(%rsp)
    0.00 :   5168ef:       lea    0x10(%r15),%rax
    0.00 :   5168f3:       mov    %rax,0x140(%rsp)
    0.00 :   5168fb:       mov    0x71149e(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   516902:       movq   $0x0,0x228(%rsp)
    0.00 :   51690e:       movq   $0x0,0x230(%rsp)
    0.00 :   51691a:       mov    0x8(%rax),%r14
    0.00 :   51691e:       movq   $0x0,0x238(%rsp)
    0.00 :   51692a:       mov    0x10(%rax),%rax
    0.00 :   51692e:       mov    -0x18(%r14),%rdi
    0.00 :   516932:       mov    %r14,0xd0(%rsp)
    0.00 :   51693a:       movq   $0x0,0x240(%rsp)
    0.00 :   516946:       add    %rbx,%rdi
    0.00 :   516949:       mov    %rax,0x10(%rsp)
    0.00 :   51694e:       mov    %rax,(%rdi)
    0.00 :   516951:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   516956:       mov    0x711403(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   51695d:       lea    0x40(%rbx),%rdi
    0.00 :   516961:       movq   $0x0,0xe0(%rsp)
    0.00 :   51696d:       movq   $0x0,0xe8(%rsp)
    0.00 :   516979:       lea    0x18(%r12),%rax
    0.00 :   51697e:       movq   $0x0,0xf0(%rsp)
    0.00 :   51698a:       mov    %rax,0xd0(%rsp)
    0.00 :   516992:       lea    0x40(%r12),%rax
    0.00 :   516997:       mov    %rax,0x140(%rsp)
    0.00 :   51699f:       mov    0x7112ba(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5169a6:       movq   $0x0,0xf8(%rsp)
    0.00 :   5169b2:       mov    %rax,(%rsp)
    0.00 :   5169b6:       add    $0x10,%rax
    0.00 :   5169ba:       mov    %rax,0xd8(%rsp)
    0.00 :   5169c2:       movq   $0x0,0x100(%rsp)
    0.00 :   5169ce:       movq   $0x0,0x108(%rsp)
    0.00 :   5169da:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5169df:       mov    0x7115f2(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5169e6:       lea    0x8(%rbx),%rsi
    0.00 :   5169ea:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5169ee:       movl   $0x10,0x118(%rsp)
    0.00 :   5169f9:       mov    %rax,0x8(%rsp)
    0.00 :   5169fe:       add    $0x10,%rax
    0.00 :   516a02:       mov    %rax,0xd8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   516a0a:       lea    0x60(%rbx),%rax
    0.00 :   516a0e:       mov    %rax,0x120(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   516a16:       movq   $0x0,0x128(%rsp)
    0.00 :   516a22:       movb   $0x0,0x130(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   516a2a:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   516a2f:       mov    $0x2b,%edx
    0.00 :   516a34:       lea    0x36c0c5(%rip),%rsi        # 882b00 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0xe0>
    0.00 :   516a3b:       mov    %rbx,%rdi
    0.00 :   516a3e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   516a43:       mov    %rbp,%rsi
         :            { return _M_insert(__n); }
    0.00 :   516a46:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516a49:       lea    0xb0(%rsp),%rbp
    0.00 :   516a51:       sar    $0x3,%rsi
    0.00 :   516a55:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   516a5a:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   516a5e:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516a6a:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   516a72:       mov    0x100(%rsp),%rax
    0.00 :   516a7a:       movb   $0x0,0xc0(%rsp)
    0.00 :   516a82:       test   %rax,%rax
    0.00 :   516a85:       je     5171b0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xd40>
         :            if (this->pptr() > this->egptr())
    0.00 :   516a8b:       mov    0xf0(%rsp),%r8
    0.00 :   516a93:       mov    0xf8(%rsp),%rcx
    0.00 :   516a9b:       cmp    %r8,%rax
    0.00 :   516a9e:       jbe    516e80 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xa10>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516aa4:       sub    %rcx,%rax
    0.00 :   516aa7:       xor    %edx,%edx
    0.00 :   516aa9:       xor    %esi,%esi
    0.00 :   516aab:       mov    %rbp,%rdi
    0.00 :   516aae:       mov    %rax,%r8
    0.00 :   516ab1:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   516ab6:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   516abb:       mov    0x120(%rsp),%rdi
    0.00 :   516ac3:       mov    %rax,0xd0(%rsp)
    0.00 :   516acb:       lea    0x40(%r12),%rax
    0.00 :   516ad0:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   516ad8:       mov    0x8(%rsp),%rax
    0.00 :   516add:       add    $0x10,%rax
    0.00 :   516ae1:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   516ae9:       lea    0x60(%rbx),%rax
    0.00 :   516aed:       cmp    %rax,%rdi
    0.00 :   516af0:       je     516af7 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x687>
    0.00 :   516af2:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   516af7:       mov    (%rsp),%rax
    0.00 :   516afb:       lea    0x40(%rbx),%rdi
    0.00 :   516aff:       add    $0x10,%rax
    0.00 :   516b03:       mov    %rax,0xd8(%rsp)
    0.00 :   516b0b:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   516b10:       mov    -0x18(%r14),%rax
    0.00 :   516b14:       mov    0x10(%rsp),%rcx
    0.00 :   516b19:       mov    %r14,0xd0(%rsp)
         :            ~basic_ios() { }
    0.00 :   516b21:       lea    0x70(%rbx),%rdi
    0.00 :   516b25:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   516b2d:       lea    0x10(%r15),%rax
    0.00 :   516b31:       mov    %rax,0x140(%rsp)
    0.00 :   516b39:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   516b3e:       mov    %rbp,%rcx
    0.00 :   516b41:       mov    $0x2,%edx
    0.00 :   516b46:       mov    %r13,%rdi
    0.00 :   516b49:       mov    $0x2,%esi
    0.00 :   516b4e:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   516b53:       jmpq   516814 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3a4>
    0.00 :   516b58:       nopl   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   516b60:       lea    0x50(%rbx),%rsi
    0.00 :   516b64:       mov    %rbp,%rdi
    0.00 :   516b67:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   516b6c:       jmpq   516777 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x307>
    0.00 :   516b71:       mov    %rdx,%rcx
    0.00 :   516b74:       cmp    %rdx,(%rdi)
    0.00 :   516b77:       je     516bc0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x750>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516b79:       lea    0xd0(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516b81:       lea    0x36bfd8(%rip),%rdx        # 882b60 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x140>
    0.00 :   516b88:       lea    -0x30(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516b8c:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516b90:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516b93:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   516b9b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   516ba0:       mov    %rbx,%rcx
    0.00 :   516ba3:       mov    $0x2,%edx
    0.00 :   516ba8:       mov    %r13,%rdi
    0.00 :   516bab:       mov    $0x2,%esi
    0.00 :   516bb0:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   516bb5:       jmpq   516565 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xf5>
    0.00 :   516bba:       nopw   0x0(%rax,%rax,1)
    0.00 :   516bc0:       test   %rbx,%rbx
    0.00 :   516bc3:       je     516e98 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xa28>
    0.00 :   516bc9:       mov    0x18(%rbx),%rdi
    0.00 :   516bcd:       mov    0x20(%rbx),%rbp
    0.00 :   516bd1:       sub    %rdi,%rbp
    0.00 :   516bd4:       cmp    $0x8,%rbp
    0.00 :   516bd8:       je     517160 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xcf0>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   516bde:       lea    0xd0(%rsp),%rbx
    0.00 :   516be6:       lea    0x70(%rbx),%rdi
    0.00 :   516bea:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   516bef:       mov    0x710f32(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516bf6:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   516bf8:       xor    %esi,%esi
    0.00 :   516bfa:       mov    %dx,0x220(%rsp)
    0.00 :   516c02:       movq   $0x0,0x218(%rsp)
    0.00 :   516c0e:       lea    0x10(%r15),%rax
    0.00 :   516c12:       mov    %rax,0x140(%rsp)
    0.00 :   516c1a:       mov    0x71117f(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   516c21:       movq   $0x0,0x228(%rsp)
    0.00 :   516c2d:       movq   $0x0,0x230(%rsp)
    0.00 :   516c39:       mov    0x8(%rax),%r14
    0.00 :   516c3d:       movq   $0x0,0x238(%rsp)
    0.00 :   516c49:       mov    0x10(%rax),%rax
    0.00 :   516c4d:       mov    -0x18(%r14),%rdi
    0.00 :   516c51:       mov    %r14,0xd0(%rsp)
    0.00 :   516c59:       movq   $0x0,0x240(%rsp)
    0.00 :   516c65:       add    %rbx,%rdi
    0.00 :   516c68:       mov    %rax,0x10(%rsp)
    0.00 :   516c6d:       mov    %rax,(%rdi)
    0.00 :   516c70:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   516c75:       mov    0x7110e4(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   516c7c:       lea    0x40(%rbx),%rdi
    0.00 :   516c80:       movq   $0x0,0xe0(%rsp)
    0.00 :   516c8c:       movq   $0x0,0xe8(%rsp)
    0.00 :   516c98:       lea    0x18(%r12),%rax
    0.00 :   516c9d:       movq   $0x0,0xf0(%rsp)
    0.00 :   516ca9:       mov    %rax,0xd0(%rsp)
    0.00 :   516cb1:       lea    0x40(%r12),%rax
    0.00 :   516cb6:       mov    %rax,0x140(%rsp)
    0.00 :   516cbe:       mov    0x710f9b(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516cc5:       movq   $0x0,0xf8(%rsp)
    0.00 :   516cd1:       mov    %rax,(%rsp)
    0.00 :   516cd5:       add    $0x10,%rax
    0.00 :   516cd9:       mov    %rax,0xd8(%rsp)
    0.00 :   516ce1:       movq   $0x0,0x100(%rsp)
    0.00 :   516ced:       movq   $0x0,0x108(%rsp)
    0.00 :   516cf9:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   516cfe:       mov    0x7112d3(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   516d05:       lea    0x8(%rbx),%rsi
    0.00 :   516d09:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   516d0d:       movl   $0x10,0x118(%rsp)
    0.00 :   516d18:       mov    %rax,0x8(%rsp)
    0.00 :   516d1d:       add    $0x10,%rax
    0.00 :   516d21:       mov    %rax,0xd8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   516d29:       lea    0x60(%rbx),%rax
    0.00 :   516d2d:       mov    %rax,0x120(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   516d35:       movq   $0x0,0x128(%rsp)
    0.00 :   516d41:       movb   $0x0,0x130(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   516d49:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   516d4e:       mov    $0x2a,%edx
    0.00 :   516d53:       lea    0x36be0e(%rip),%rsi        # 882b68 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x148>
    0.00 :   516d5a:       mov    %rbx,%rdi
    0.00 :   516d5d:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   516d62:       mov    %rbp,%rsi
         :            { return _M_insert(__n); }
    0.00 :   516d65:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516d68:       lea    0xb0(%rsp),%rbp
    0.00 :   516d70:       sar    $0x3,%rsi
    0.00 :   516d74:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   516d79:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   516d7d:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   516d89:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   516d91:       mov    0x100(%rsp),%rax
    0.00 :   516d99:       movb   $0x0,0xc0(%rsp)
    0.00 :   516da1:       test   %rax,%rax
    0.00 :   516da4:       je     517460 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xff0>
         :            if (this->pptr() > this->egptr())
    0.00 :   516daa:       mov    0xf0(%rsp),%r8
    0.00 :   516db2:       mov    0xf8(%rsp),%rcx
    0.00 :   516dba:       cmp    %r8,%rax
    0.00 :   516dbd:       jbe    517438 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfc8>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516dc3:       sub    %rcx,%rax
    0.00 :   516dc6:       xor    %edx,%edx
    0.00 :   516dc8:       xor    %esi,%esi
    0.00 :   516dca:       mov    %rbp,%rdi
    0.00 :   516dcd:       mov    %rax,%r8
    0.00 :   516dd0:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   516dd5:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   516dda:       mov    0x120(%rsp),%rdi
    0.00 :   516de2:       mov    %rax,0xd0(%rsp)
    0.00 :   516dea:       lea    0x40(%r12),%rax
    0.00 :   516def:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   516df7:       mov    0x8(%rsp),%rax
    0.00 :   516dfc:       add    $0x10,%rax
    0.00 :   516e00:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   516e08:       lea    0x60(%rbx),%rax
    0.00 :   516e0c:       cmp    %rax,%rdi
    0.00 :   516e0f:       je     516e16 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x9a6>
    0.00 :   516e11:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   516e16:       mov    (%rsp),%rax
    0.00 :   516e1a:       lea    0x40(%rbx),%rdi
    0.00 :   516e1e:       add    $0x10,%rax
    0.00 :   516e22:       mov    %rax,0xd8(%rsp)
    0.00 :   516e2a:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   516e2f:       mov    -0x18(%r14),%rax
    0.00 :   516e33:       mov    0x10(%rsp),%rcx
    0.00 :   516e38:       mov    %r14,0xd0(%rsp)
         :            ~basic_ios() { }
    0.00 :   516e40:       lea    0x70(%rbx),%rdi
    0.00 :   516e44:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   516e4c:       lea    0x10(%r15),%rax
    0.00 :   516e50:       mov    %rax,0x140(%rsp)
    0.00 :   516e58:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   516e5d:       mov    %rbp,%rcx
    0.00 :   516e60:       mov    $0x2,%edx
    0.00 :   516e65:       mov    %r13,%rdi
    0.00 :   516e68:       mov    $0x2,%esi
    0.00 :   516e6d:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   516e72:       jmpq   516814 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3a4>
    0.00 :   516e77:       nopw   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   516e80:       sub    %rcx,%r8
    0.00 :   516e83:       xor    %edx,%edx
    0.00 :   516e85:       xor    %esi,%esi
    0.00 :   516e87:       mov    %rbp,%rdi
    0.00 :   516e8a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   516e8f:       jmpq   516ab6 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x646>
    0.00 :   516e94:       nopl   0x0(%rax)
    0.00 :   516e98:       mov    (%rsp),%rdi
    0.00 :   516e9c:       test   %rdi,%rdi
    0.00 :   516e9f:       je     517210 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xda0>
    0.00 :   516ea5:       mov    0x18(%rdi),%rdx
    0.00 :   516ea9:       mov    0x20(%rdi),%rdi
    0.00 :   516ead:       mov    %rdi,%rbp
    0.00 :   516eb0:       mov    %rdi,0x18(%rsp)
    0.00 :   516eb5:       sub    %rdx,%rbp
    0.00 :   516eb8:       cmp    $0x8,%rbp
    0.00 :   516ebc:       je     5171c8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xd58>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   516ec2:       lea    0xd0(%rsp),%rbx
    0.00 :   516eca:       lea    0x70(%rbx),%rdi
    0.00 :   516ece:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   516ed3:       mov    0x710c4e(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            { this->init(0); }
    0.00 :   516eda:       xor    %esi,%esi
    0.00 :   516edc:       movq   $0x0,0x218(%rsp)
    0.00 :   516ee8:       movq   $0x0,0x228(%rsp)
    0.00 :   516ef4:       movq   $0x0,0x230(%rsp)
    0.00 :   516f00:       lea    0x10(%r15),%rax
    0.00 :   516f04:       mov    %rax,0x140(%rsp)
    0.00 :   516f0c:       xor    %eax,%eax
    0.00 :   516f0e:       mov    %ax,0x220(%rsp)
    0.00 :   516f16:       mov    0x710e83(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   516f1d:       movq   $0x0,0x238(%rsp)
    0.00 :   516f29:       movq   $0x0,0x240(%rsp)
    0.00 :   516f35:       mov    0x8(%rax),%r14
    0.00 :   516f39:       mov    0x10(%rax),%rax
    0.00 :   516f3d:       mov    -0x18(%r14),%rdi
    0.00 :   516f41:       mov    %r14,0xd0(%rsp)
    0.00 :   516f49:       mov    %rax,0x10(%rsp)
    0.00 :   516f4e:       add    %rbx,%rdi
    0.00 :   516f51:       mov    %rax,(%rdi)
    0.00 :   516f54:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   516f59:       mov    0x710e00(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   516f60:       lea    0x40(%rbx),%rdi
    0.00 :   516f64:       movq   $0x0,0xe0(%rsp)
    0.00 :   516f70:       movq   $0x0,0xe8(%rsp)
    0.00 :   516f7c:       lea    0x18(%r12),%rax
    0.00 :   516f81:       movq   $0x0,0xf0(%rsp)
    0.00 :   516f8d:       mov    %rax,0xd0(%rsp)
    0.00 :   516f95:       lea    0x40(%r12),%rax
    0.00 :   516f9a:       mov    %rax,0x140(%rsp)
    0.00 :   516fa2:       mov    0x710cb7(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   516fa9:       movq   $0x0,0xf8(%rsp)
    0.00 :   516fb5:       mov    %rax,(%rsp)
    0.00 :   516fb9:       add    $0x10,%rax
    0.00 :   516fbd:       mov    %rax,0xd8(%rsp)
    0.00 :   516fc5:       movq   $0x0,0x100(%rsp)
    0.00 :   516fd1:       movq   $0x0,0x108(%rsp)
    0.00 :   516fdd:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   516fe2:       mov    0x710fef(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   516fe9:       lea    0x8(%rbx),%rsi
    0.00 :   516fed:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   516ff1:       movl   $0x10,0x118(%rsp)
    0.00 :   516ffc:       mov    %rax,0x8(%rsp)
    0.00 :   517001:       add    $0x10,%rax
    0.00 :   517005:       mov    %rax,0xd8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   51700d:       lea    0x60(%rbx),%rax
    0.00 :   517011:       mov    %rax,0x120(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   517019:       movq   $0x0,0x128(%rsp)
    0.00 :   517025:       movb   $0x0,0x130(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   51702d:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   517032:       mov    $0x2a,%edx
    0.00 :   517037:       lea    0x36bb8a(%rip),%rsi        # 882bc8 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x1a8>
    0.00 :   51703e:       mov    %rbx,%rdi
    0.00 :   517041:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   517046:       mov    %rbp,%rsi
         :            { return _M_insert(__n); }
    0.00 :   517049:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51704c:       lea    0xb0(%rsp),%rbp
    0.00 :   517054:       sar    $0x3,%rsi
    0.00 :   517058:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   51705d:       lea    0x10(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   517061:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51706d:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   517075:       mov    0x100(%rsp),%rax
    0.00 :   51707d:       movb   $0x0,0xc0(%rsp)
    0.00 :   517085:       test   %rax,%rax
    0.00 :   517088:       je     517600 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1190>
         :            if (this->pptr() > this->egptr())
    0.00 :   51708e:       mov    0xf0(%rsp),%r8
    0.00 :   517096:       mov    0xf8(%rsp),%rcx
    0.00 :   51709e:       cmp    %r8,%rax
    0.00 :   5170a1:       jbe    51744c <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfdc>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5170a7:       sub    %rcx,%rax
    0.00 :   5170aa:       xor    %edx,%edx
    0.00 :   5170ac:       xor    %esi,%esi
    0.00 :   5170ae:       mov    %rbp,%rdi
    0.00 :   5170b1:       mov    %rax,%r8
    0.00 :   5170b4:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   5170b9:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5170be:       mov    0x120(%rsp),%rdi
    0.00 :   5170c6:       mov    %rax,0xd0(%rsp)
    0.00 :   5170ce:       lea    0x40(%r12),%rax
    0.00 :   5170d3:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5170db:       mov    0x8(%rsp),%rax
    0.00 :   5170e0:       add    $0x10,%rax
    0.00 :   5170e4:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   5170ec:       lea    0x60(%rbx),%rax
    0.00 :   5170f0:       cmp    %rax,%rdi
    0.00 :   5170f3:       je     5170fa <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xc8a>
    0.00 :   5170f5:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5170fa:       mov    (%rsp),%rax
    0.00 :   5170fe:       lea    0x40(%rbx),%rdi
    0.00 :   517102:       add    $0x10,%rax
    0.00 :   517106:       mov    %rax,0xd8(%rsp)
    0.00 :   51710e:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   517113:       mov    -0x18(%r14),%rax
    0.00 :   517117:       mov    0x10(%rsp),%rcx
    0.00 :   51711c:       mov    %r14,0xd0(%rsp)
         :            ~basic_ios() { }
    0.00 :   517124:       lea    0x70(%rbx),%rdi
    0.00 :   517128:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   517130:       lea    0x10(%r15),%rax
    0.00 :   517134:       mov    %rax,0x140(%rsp)
    0.00 :   51713c:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   517141:       mov    %rbp,%rcx
    0.00 :   517144:       mov    $0x2,%edx
    0.00 :   517149:       mov    %r13,%rdi
    0.00 :   51714c:       mov    $0x2,%esi
    0.00 :   517151:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517156:       jmpq   516814 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3a4>
    0.00 :   51715b:       nopl   0x0(%rax,%rax,1)
    0.00 :   517160:       cmp    (%rdi),%rdx
    0.00 :   517163:       je     516e98 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xa28>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   517169:       lea    0xd0(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   517171:       lea    0x36ba4f(%rip),%rdx        # 882bc7 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x1a7>
    0.00 :   517178:       lea    -0x2f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   51717c:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   517180:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   517183:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   51718b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   517190:       mov    %rbx,%rcx
    0.00 :   517193:       mov    $0x2,%edx
    0.00 :   517198:       mov    %r13,%rdi
    0.00 :   51719b:       mov    $0x2,%esi
    0.00 :   5171a0:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5171a5:       jmpq   516565 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xf5>
    0.00 :   5171aa:       nopw   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   5171b0:       lea    0x50(%rbx),%rsi
    0.00 :   5171b4:       mov    %rbp,%rdi
    0.00 :   5171b7:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5171bc:       jmpq   516ab6 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x646>
    0.00 :   5171c1:       nopl   0x0(%rax)
    0.00 :   5171c8:       cmp    (%rdx),%rcx
    0.00 :   5171cb:       je     517210 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xda0>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5171cd:       lea    0xd0(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5171d5:       lea    0x36ba4b(%rip),%rdx        # 882c27 <typeinfo name for onnxruntime::contrib::SampleOp<float>+0x207>
    0.00 :   5171dc:       lea    -0x2f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5171e0:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5171e4:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5171e7:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5171ef:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5171f4:       mov    %rbx,%rcx
    0.00 :   5171f7:       mov    $0x2,%edx
    0.00 :   5171fc:       mov    %r13,%rdi
    0.00 :   5171ff:       mov    $0x2,%esi
    0.00 :   517204:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517209:       jmpq   516565 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xf5>
    0.00 :   51720e:       xchg   %ax,%ax
    0.00 :   517210:       mov    (%rax),%rdx
    0.00 :   517213:       imul   0x8(%rax),%rdx
    0.00 :   517218:       mov    %rcx,0x28(%rsp)
    0.00 :   51721d:       mov    0x30(%r12),%rax
    0.00 :   517222:       cmpl   $0x1,0x8(%rax)
    0.00 :   517226:       jne    5179ca <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x155a>
    0.00 :   51722c:       mov    0x30(%r14),%rdi
    0.00 :   517230:       mov    0x50(%r12),%rax
    0.00 :   517235:       add    (%r12),%rax
    0.00 :   517239:       cmpl   $0x1,0x8(%rdi)
    0.00 :   51723d:       mov    %rax,0x30(%rsp)
    0.00 :   517242:       jne    5178f4 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1484>
    0.00 :   517248:       mov    0x10(%rsp),%r11
    0.00 :   51724d:       mov    0x50(%r14),%rdi
    0.00 :   517251:       add    (%r14),%rdi
    0.00 :   517254:       mov    0x30(%r11),%r8
    0.00 :   517258:       mov    %rdi,0x38(%rsp)
    0.00 :   51725d:       cmpl   $0x1,0x8(%r8)
    0.00 :   517262:       jne    517be7 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1777>
    0.00 :   517268:       mov    0x10(%rsp),%r10
    0.00 :   51726d:       mov    0x50(%r10),%r8
    0.00 :   517271:       add    (%r10),%r8
    0.00 :   517274:       mov    %r8,0x40(%rsp)
    0.00 :   517279:       test   %rbx,%rbx
    0.00 :   51727c:       je     517297 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xe27>
    0.00 :   51727e:       mov    0x30(%rbx),%r8
    0.00 :   517282:       cmpl   $0x1,0x8(%r8)
    0.00 :   517287:       jne    517aa1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1631>
    0.00 :   51728d:       mov    0x50(%rbx),%r8
    0.00 :   517291:       add    (%rbx),%r8
    0.00 :   517294:       mov    %r8,%rbx
    0.00 :   517297:       mov    %rbx,0x48(%rsp)
    0.00 :   51729c:       mov    (%rsp),%rbx
    0.00 :   5172a0:       test   %rbx,%rbx
    0.00 :   5172a3:       je     5172c3 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xe53>
    0.00 :   5172a5:       mov    0x30(%rbx),%r8
    0.00 :   5172a9:       cmpl   $0x1,0x8(%r8)
    0.00 :   5172ae:       jne    517c8b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x181b>
    0.00 :   5172b4:       mov    (%rsp),%rbx
    0.00 :   5172b8:       mov    0x50(%rbx),%r8
    0.00 :   5172bc:       add    (%rbx),%r8
    0.00 :   5172bf:       mov    %r8,(%rsp)
    0.00 :   5172c3:       mov    0x30(%rsi),%r8
    0.00 :   5172c7:       mov    (%rsp),%rbx
    0.00 :   5172cb:       cmpl   $0x1,0x8(%r8)
    0.00 :   5172d0:       mov    %rbx,0x50(%rsp)
    0.00 :   5172d5:       jne    517b40 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x16d0>
    0.00 :   5172db:       mov    0x50(%rsi),%rbx
    0.00 :   5172df:       add    (%rsi),%rbx
    0.00 :   5172e2:       lea    0x28(%rsp),%rsi
    0.00 :   5172e7:       movslq %edx,%rdx
    0.00 :   5172ea:       mov    %rsi,0x70(%rsp)
    0.00 :   5172ef:       mov    0x8(%rsp),%rsi
    0.00 :   5172f4:       mov    0x18(%r15),%rbp
    0.00 :   5172f8:       mov    %rbx,0x58(%rsp)
    0.00 :   5172fd:       mov    %rsi,0x78(%rsp)
    0.00 :   517302:       lea    0x30(%rsp),%rsi
    0.00 :   517307:       mov    %rsi,0x80(%rsp)
    0.00 :   51730f:       lea    0x38(%rsp),%rsi
    0.00 :   517314:       mov    %rsi,0x88(%rsp)
    0.00 :   51731c:       lea    0x58(%rsp),%rsi
    0.00 :   517321:       mov    %rsi,0x90(%rsp)
    0.00 :   517329:       lea    0x50(%rsp),%rsi
    0.00 :   51732e:       mov    %rsi,0x98(%rsp)
    0.00 :   517336:       lea    0x48(%rsp),%rsi
    0.00 :   51733b:       mov    %rsi,0xa0(%rsp)
    0.00 :   517343:       lea    0x40(%rsp),%rsi
    0.00 :   517348:       mov    %rsi,0xa8(%rsp)
    0.00 :   517350:       mov    %rdx,0x60(%rsp)
    0.00 :   517355:       movq   $0x0,0x68(%rsp)
    0.00 :   51735e:       test   %rbp,%rbp
    0.00 :   517361:       je     517611 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x11a1>
    0.00 :   517367:       test   %rdx,%rdx
    0.00 :   51736a:       jle    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
    0.00 :   517370:       cmp    $0x1,%rdx
    0.00 :   517374:       je     5177b8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1348>
    0.00 :   51737a:       mov    %rbp,%rdi
    0.00 :   51737d:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            if (__b < __a)
    0.00 :   517382:       mov    0x60(%rsp),%rdx
    0.00 :   517387:       cltq
    0.00 :   517389:       cmp    %rdx,%rax
    0.00 :   51738c:       cmovg  %rdx,%rax
    0.00 :   517390:       mov    %rax,0x68(%rsp)
    0.00 :   517395:       cmp    $0x1,%rax
    0.00 :   517399:       jle    517471 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1001>
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
         :            { ::new (__functor._M_access()) _Functor(std::move(__f)); }
         :
         :            static void
         :            _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   51739f:       mov    $0x18,%edi
         :            };
         :
         :            _Function_base() : _M_manager(nullptr) { }
    0.00 :   5173a4:       movq   $0x0,0xe0(%rsp)
         :            { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
    0.00 :   5173b0:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5173b5:       lea    0x68(%rsp),%rdx
    0.00 :   5173ba:       mov    %rax,0xd0(%rsp)
    0.00 :   5173c2:       mov    0x68(%rsp),%rsi
    0.00 :   5173c7:       mov    %rbp,%rdi
    0.00 :   5173ca:       mov    %rdx,(%rax)
    0.00 :   5173cd:       lea    0x60(%rsp),%rdx
    0.00 :   5173d2:       lea    0xd0(%rsp),%rbx
    0.00 :   5173da:       mov    %rdx,0x8(%rax)
    0.00 :   5173de:       lea    0x70(%rsp),%rdx
    0.00 :   5173e3:       mov    %rdx,0x10(%rax)
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   5173e7:       lea    -0x1c3e(%rip),%rax        # 5157b0 <std::_Function_handler<void (long), onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   5173ee:       mov    %rbx,%rdx
    0.00 :   5173f1:       mov    %rax,0xe8(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   5173f9:       lea    -0x1ed0(%rip),%rax        # 515530 <std::_Function_base::_Base_manager<onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1}>::_M_manager(std::_Any_data&, onnxruntime::concurrency::ThreadPool::TryBatchParallelFor<onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}>(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}&&, long)::{lambda(long)#1} const&, std::_Manager_operation)>
    0.00 :   517400:       mov    %rax,0xe0(%rsp)
    0.00 :   517408:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
         :            if (_M_manager)
    0.00 :   51740d:       mov    0xe0(%rsp),%rax
    0.00 :   517415:       test   %rax,%rax
    0.00 :   517418:       je     517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   51741a:       mov    $0x3,%edx
    0.00 :   51741f:       mov    %rbx,%rsi
    0.00 :   517422:       mov    %rbx,%rdi
    0.00 :   517425:       callq  *%rax
    0.00 :   517427:       movq   $0x0,0x0(%r13)
         :            };
         :
         :            template<std::size_t _Idx, typename _Head>
         :            struct _Head_base<_Idx, _Head, false>
         :            {
         :            constexpr _Head_base()
    0.00 :   51742f:       jmpq   51682a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3ba>
    0.00 :   517434:       nopl   0x0(%rax)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   517438:       sub    %rcx,%r8
    0.00 :   51743b:       xor    %edx,%edx
    0.00 :   51743d:       xor    %esi,%esi
    0.00 :   51743f:       mov    %rbp,%rdi
    0.00 :   517442:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   517447:       jmpq   516dd5 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x965>
    0.00 :   51744c:       sub    %rcx,%r8
    0.00 :   51744f:       xor    %edx,%edx
    0.00 :   517451:       xor    %esi,%esi
    0.00 :   517453:       mov    %rbp,%rdi
    0.00 :   517456:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   51745b:       jmpq   5170b9 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xc49>
         :            this->_M_assign(__str);
    0.00 :   517460:       lea    0x50(%rbx),%rsi
    0.00 :   517464:       mov    %rbp,%rdi
    0.00 :   517467:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   51746c:       jmpq   516dd5 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x965>
    0.00 :   517471:       test   %rdx,%rdx
    0.00 :   517474:       jle    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
    0.00 :   517476:       mov    0x70(%rsp),%r8
    0.00 :   51747b:       xor    %ebp,%ebp
    0.00 :   51747d:       pxor   %xmm1,%xmm1
    0.00 :   517481:       nopl   0x0(%rax)
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   517488:       mov    (%r8),%rcx
    0.00 :   51748b:       mov    %rbp,%rsi
    0.00 :   51748e:       pxor   %xmm4,%xmm4
    0.00 :   517492:       mov    0x78(%rsp),%r9
    0.00 :   517497:       mov    0x80(%rsp),%rax
    0.00 :   51749f:       mov    0x88(%rsp),%rdx
    0.00 :   5174a7:       imul   %rcx,%rsi
    0.00 :   5174ab:       mov    (%rax),%rdi
    0.00 :   5174ae:       cvtsi2ss %rcx,%xmm4
    0.00 :   5174b3:       lea    0x0(,%rsi,4),%rax
    0.00 :   5174bb:       mov    (%rdx),%rsi
    0.00 :   5174be:       mov    0x90(%rsp),%rdx
    0.00 :   5174c6:       mov    (%rdx),%rbx
    0.00 :   5174c9:       add    %rax,%rbx
    0.00 :   5174cc:       test   %rcx,%rcx
    0.00 :   5174cf:       jle    51759e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x112e>
    0.00 :   5174d5:       add    %rax,%rdi
    0.00 :   5174d8:       pxor   %xmm2,%xmm2
    0.00 :   5174dc:       pxor   %xmm3,%xmm3
    0.00 :   5174e0:       add    %rax,%rsi
    0.00 :   5174e3:       mov    0x98(%rsp),%rdx
    0.00 :   5174eb:       xor    %eax,%eax
    0.00 :   5174ed:       mov    (%rdx),%rdx
    0.00 :   5174f0:       movss  (%rdi,%rax,4),%xmm0
    0.00 :   5174f5:       addss  (%rsi,%rax,4),%xmm0
    0.00 :   5174fa:       test   %rdx,%rdx
    0.00 :   5174fd:       je     517504 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1094>
    0.00 :   5174ff:       addss  (%rdx,%rax,4),%xmm0
    0.00 :   517504:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   517509:       addss  %xmm0,%xmm3
    0.00 :   51750d:       mulss  %xmm0,%xmm0
    0.00 :   517511:       add    $0x1,%rax
    0.00 :   517515:       addss  %xmm0,%xmm2
    0.00 :   517519:       cmp    %rax,%rcx
    0.00 :   51751c:       jne    5174f0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1080>
    0.00 :   51751e:       divss  %xmm4,%xmm3
    0.00 :   517522:       divss  %xmm4,%xmm2
    0.00 :   517526:       movaps %xmm3,%xmm0
    0.00 :   517529:       mulss  %xmm3,%xmm0
    0.00 :   51752d:       subss  %xmm0,%xmm2
    0.00 :   517531:       addss  0x10(%r9),%xmm2
    0.00 :   517537:       ucomiss %xmm2,%xmm1
    0.00 :   51753a:       sqrtss %xmm2,%xmm4
    0.00 :   51753e:       ja     5175c2 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1152>
    0.00 :   517544:       mov    0xa0(%rsp),%rax
    0.00 :   51754c:       mov    (%rax),%rdx
    0.00 :   51754f:       mov    0xa8(%rsp),%rax
    0.00 :   517557:       mov    (%rax),%rsi
    0.00 :   51755a:       xor    %eax,%eax
    0.00 :   51755c:       nopl   0x0(%rax)
    0.00 :   517560:       movss  (%rbx,%rax,4),%xmm0
    0.00 :   517565:       subss  %xmm3,%xmm0
    0.00 :   517569:       divss  %xmm4,%xmm0
    0.00 :   51756d:       mulss  (%rsi,%rax,4),%xmm0
    0.00 :   517572:       test   %rdx,%rdx
    0.00 :   517575:       je     51757c <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x110c>
    0.00 :   517577:       addss  (%rdx,%rax,4),%xmm0
    0.00 :   51757c:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   517581:       add    $0x1,%rax
    0.00 :   517585:       cmp    %rax,%rcx
    0.00 :   517588:       jg     517560 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x10f0>
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   51758a:       add    $0x1,%rbp
    0.00 :   51758e:       cmp    %rbp,0x60(%rsp)
    0.00 :   517593:       jg     517488 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1018>
    0.00 :   517599:       jmpq   517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   51759e:       movaps %xmm1,%xmm3
    0.00 :   5175a1:       divss  %xmm4,%xmm3
    0.00 :   5175a5:       movaps %xmm3,%xmm0
    0.00 :   5175a8:       movaps %xmm3,%xmm2
    0.00 :   5175ab:       mulss  %xmm3,%xmm0
    0.00 :   5175af:       subss  %xmm0,%xmm2
    0.00 :   5175b3:       addss  0x10(%r9),%xmm2
    0.00 :   5175b9:       ucomiss %xmm2,%xmm1
    0.00 :   5175bc:       jbe    51758a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x111a>
    0.00 :   5175be:       sqrtss %xmm2,%xmm4
    0.00 :   5175c2:       movaps %xmm2,%xmm0
    0.00 :   5175c5:       movss  %xmm1,0x10(%rsp)
    0.00 :   5175cb:       movss  %xmm4,0x8(%rsp)
    0.00 :   5175d1:       movss  %xmm3,(%rsp)
    0.00 :   5175d6:       callq  53cd0 <sqrtf@plt>
    0.00 :   5175db:       mov    0x70(%rsp),%r8
    0.00 :   5175e0:       movss  (%rsp),%xmm3
    0.00 :   5175e5:       movss  0x8(%rsp),%xmm4
    0.00 :   5175eb:       movss  0x10(%rsp),%xmm1
    0.00 :   5175f1:       mov    (%r8),%rcx
    0.00 :   5175f4:       test   %rcx,%rcx
    0.00 :   5175f7:       jg     517544 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x10d4>
    0.00 :   5175fd:       jmp    51758a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x111a>
    0.00 :   5175ff:       nop
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   517600:       lea    0x50(%rbx),%rsi
    0.00 :   517604:       mov    %rbp,%rdi
    0.00 :   517607:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   51760c:       jmpq   5170b9 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xc49>
    0.00 :   517611:       xor    %ebp,%ebp
    0.00 :   517613:       pxor   %xmm1,%xmm1
    0.00 :   517617:       test   %rdx,%rdx
    0.00 :   51761a:       jle    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   517620:       mov    %rcx,%rsi
    0.00 :   517623:       pxor   %xmm4,%xmm4
    0.00 :   517627:       imul   %rbp,%rsi
    0.00 :   51762b:       cvtsi2ss %rcx,%xmm4
    0.00 :   517630:       shl    $0x2,%rsi
    0.00 :   517634:       add    %rsi,%rbx
    0.00 :   517637:       test   %rcx,%rcx
    0.00 :   51763a:       jle    517749 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x12d9>
    0.00 :   517640:       mov    0x98(%rsp),%rdx
    0.00 :   517648:       lea    (%rax,%rsi,1),%r8
    0.00 :   51764c:       pxor   %xmm2,%xmm2
    0.00 :   517650:       add    %rdi,%rsi
    0.00 :   517653:       pxor   %xmm3,%xmm3
    0.00 :   517657:       xor    %eax,%eax
    0.00 :   517659:       mov    (%rdx),%rdx
    0.00 :   51765c:       nopl   0x0(%rax)
    0.00 :   517660:       movss  (%r8,%rax,4),%xmm0
    0.00 :   517666:       addss  (%rsi,%rax,4),%xmm0
    0.00 :   51766b:       test   %rdx,%rdx
    0.00 :   51766e:       je     517675 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1205>
    0.00 :   517670:       addss  (%rdx,%rax,4),%xmm0
   32.00 :   517675:       movss  %xmm0,(%rbx,%rax,4)
    0.00 :   51767a:       addss  %xmm0,%xmm3
    0.00 :   51767e:       mulss  %xmm0,%xmm0
    0.00 :   517682:       add    $0x1,%rax
   18.05 :   517686:       addss  %xmm0,%xmm2
   49.95 :   51768a:       cmp    %rax,%rcx
    0.00 :   51768d:       jne    517660 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x11f0>
    0.00 :   51768f:       divss  %xmm4,%xmm3
    0.00 :   517693:       mov    0x8(%rsp),%rcx
    0.00 :   517698:       divss  %xmm4,%xmm2
    0.00 :   51769c:       movaps %xmm3,%xmm0
    0.00 :   51769f:       mulss  %xmm3,%xmm0
    0.00 :   5176a3:       subss  %xmm0,%xmm2
    0.00 :   5176a7:       addss  0x10(%rcx),%xmm2
    0.00 :   5176ac:       ucomiss %xmm2,%xmm1
    0.00 :   5176af:       sqrtss %xmm2,%xmm4
    0.00 :   5176b3:       ja     517771 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1301>
    0.00 :   5176b9:       mov    0xa0(%rsp),%rdx
    0.00 :   5176c1:       mov    (%rdx),%rcx
    0.00 :   5176c4:       mov    0xa8(%rsp),%rdx
    0.00 :   5176cc:       mov    (%rdx),%rsi
    0.00 :   5176cf:       xor    %edx,%edx
    0.00 :   5176d1:       nopl   0x0(%rax)
    0.00 :   5176d8:       movss  (%rbx,%rdx,4),%xmm0
    0.00 :   5176dd:       subss  %xmm3,%xmm0
    0.00 :   5176e1:       divss  %xmm4,%xmm0
    0.00 :   5176e5:       mulss  (%rsi,%rdx,4),%xmm0
    0.00 :   5176ea:       test   %rcx,%rcx
    0.00 :   5176ed:       je     5176f4 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1284>
    0.00 :   5176ef:       addss  (%rcx,%rdx,4),%xmm0
    0.00 :   5176f4:       movss  %xmm0,(%rbx,%rdx,4)
    0.00 :   5176f9:       add    $0x1,%rdx
    0.00 :   5176fd:       cmp    %rax,%rdx
    0.00 :   517700:       jl     5176d8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1268>
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   517702:       add    $0x1,%rbp
    0.00 :   517706:       cmp    %rbp,0x60(%rsp)
    0.00 :   51770b:       jle    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
    0.00 :   517711:       mov    0x70(%rsp),%rdx
    0.00 :   517716:       mov    0x80(%rsp),%rax
    0.00 :   51771e:       mov    (%rdx),%rcx
    0.00 :   517721:       mov    0x88(%rsp),%rdx
    0.00 :   517729:       mov    (%rax),%rax
    0.00 :   51772c:       mov    (%rdx),%rdi
    0.00 :   51772f:       mov    0x90(%rsp),%rdx
    0.00 :   517737:       mov    (%rdx),%rbx
    0.00 :   51773a:       mov    0x78(%rsp),%rdx
    0.00 :   51773f:       mov    %rdx,0x8(%rsp)
    0.00 :   517744:       jmpq   517620 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x11b0>
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   517749:       movaps %xmm1,%xmm3
    0.00 :   51774c:       mov    0x8(%rsp),%rax
    0.00 :   517751:       divss  %xmm4,%xmm3
    0.00 :   517755:       movaps %xmm3,%xmm0
    0.00 :   517758:       movaps %xmm3,%xmm2
    0.00 :   51775b:       mulss  %xmm3,%xmm0
    0.00 :   51775f:       subss  %xmm0,%xmm2
    0.00 :   517763:       addss  0x10(%rax),%xmm2
    0.00 :   517768:       ucomiss %xmm2,%xmm1
    0.00 :   51776b:       jbe    517702 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1292>
    0.00 :   51776d:       sqrtss %xmm2,%xmm4
    0.00 :   517771:       movaps %xmm2,%xmm0
    0.00 :   517774:       movss  %xmm1,0x10(%rsp)
    0.00 :   51777a:       movss  %xmm4,0x8(%rsp)
    0.00 :   517780:       movss  %xmm3,(%rsp)
    0.00 :   517785:       callq  53cd0 <sqrtf@plt>
    0.00 :   51778a:       mov    0x70(%rsp),%rax
    0.00 :   51778f:       movss  (%rsp),%xmm3
    0.00 :   517794:       movss  0x8(%rsp),%xmm4
    0.00 :   51779a:       movss  0x10(%rsp),%xmm1
    0.00 :   5177a0:       mov    (%rax),%rax
    0.00 :   5177a3:       test   %rax,%rax
    0.00 :   5177a6:       jg     5176b9 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1249>
    0.00 :   5177ac:       jmpq   517702 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1292>
    0.00 :   5177b1:       nopl   0x0(%rax)
    0.00 :   5177b8:       test   %rcx,%rcx
    0.00 :   5177bb:       jle    517887 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1417>
    0.00 :   5177c1:       pxor   %xmm1,%xmm1
    0.00 :   5177c5:       pxor   %xmm2,%xmm2
    0.00 :   5177c9:       pxor   %xmm3,%xmm3
    0.00 :   5177cd:       xor    %edx,%edx
    0.00 :   5177cf:       mov    (%rsp),%rsi
    0.00 :   5177d3:       movss  (%rax,%rdx,4),%xmm0
    0.00 :   5177d8:       addss  (%rdi,%rdx,4),%xmm0
    0.00 :   5177dd:       test   %rsi,%rsi
    0.00 :   5177e0:       je     5177e7 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1377>
    0.00 :   5177e2:       addss  (%rsi,%rdx,4),%xmm0
    0.00 :   5177e7:       movss  %xmm0,(%rbx,%rdx,4)
    0.00 :   5177ec:       addss  %xmm0,%xmm3
    0.00 :   5177f0:       mulss  %xmm0,%xmm0
    0.00 :   5177f4:       add    $0x1,%rdx
    0.00 :   5177f8:       addss  %xmm0,%xmm2
    0.00 :   5177fc:       cmp    %rdx,%rcx
    0.00 :   5177ff:       jne    5177cf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x135f>
    0.00 :   517801:       pxor   %xmm0,%xmm0
    0.00 :   517805:       mov    0x8(%rsp),%rax
    0.00 :   51780a:       cvtsi2ss %rcx,%xmm0
    0.00 :   51780f:       divss  %xmm0,%xmm3
    0.00 :   517813:       divss  %xmm0,%xmm2
    0.00 :   517817:       movaps %xmm2,%xmm0
    0.00 :   51781a:       movaps %xmm3,%xmm2
    0.00 :   51781d:       mulss  %xmm3,%xmm2
    0.00 :   517821:       subss  %xmm2,%xmm0
    0.00 :   517825:       addss  0x10(%rax),%xmm0
    0.00 :   51782a:       ucomiss %xmm0,%xmm1
    0.00 :   51782d:       sqrtss %xmm0,%xmm2
    0.00 :   517831:       ja     5178c3 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1453>
    0.00 :   517837:       mov    0xa0(%rsp),%rax
    0.00 :   51783f:       shl    $0x2,%rcx
    0.00 :   517843:       mov    (%rax),%rdx
    0.00 :   517846:       mov    0xa8(%rsp),%rax
    0.00 :   51784e:       mov    (%rax),%rsi
    0.00 :   517851:       xor    %eax,%eax
    0.00 :   517853:       movss  (%rbx,%rax,1),%xmm0
    0.00 :   517858:       subss  %xmm3,%xmm0
    0.00 :   51785c:       divss  %xmm2,%xmm0
    0.00 :   517860:       mulss  (%rsi,%rax,1),%xmm0
    0.00 :   517865:       test   %rdx,%rdx
    0.00 :   517868:       je     51786f <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x13ff>
    0.00 :   51786a:       addss  (%rdx,%rax,1),%xmm0
    0.00 :   51786f:       movss  %xmm0,(%rbx,%rax,1)
    0.00 :   517874:       add    $0x4,%rax
    0.00 :   517878:       cmp    %rax,%rcx
    0.00 :   51787b:       jne    517853 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x13e3>
    0.00 :   51787d:       jmpq   517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   517882:       callq  53460 <__stack_chk_fail@plt>
         :            _ZZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextEENKUllE_clEl():
    0.00 :   517887:       pxor   %xmm0,%xmm0
    0.00 :   51788b:       pxor   %xmm1,%xmm1
    0.00 :   51788f:       mov    0x8(%rsp),%rax
    0.00 :   517894:       cvtsi2ss %rcx,%xmm0
    0.00 :   517899:       movaps %xmm1,%xmm3
    0.00 :   51789c:       divss  %xmm0,%xmm3
    0.00 :   5178a0:       movaps %xmm3,%xmm0
    0.00 :   5178a3:       movaps %xmm3,%xmm5
    0.00 :   5178a6:       mulss  %xmm3,%xmm0
    0.00 :   5178aa:       subss  %xmm0,%xmm5
    0.00 :   5178ae:       movaps %xmm5,%xmm0
    0.00 :   5178b1:       addss  0x10(%rax),%xmm0
    0.00 :   5178b6:       ucomiss %xmm0,%xmm1
    0.00 :   5178b9:       sqrtss %xmm0,%xmm2
    0.00 :   5178bd:       jbe    517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
    0.00 :   5178c3:       movss  %xmm3,0x8(%rsp)
    0.00 :   5178c9:       movss  %xmm2,(%rsp)
    0.00 :   5178ce:       callq  53cd0 <sqrtf@plt>
    0.00 :   5178d3:       mov    0x70(%rsp),%rax
    0.00 :   5178d8:       movss  (%rsp),%xmm2
    0.00 :   5178dd:       movss  0x8(%rsp),%xmm3
    0.00 :   5178e3:       mov    (%rax),%rcx
    0.00 :   5178e6:       test   %rcx,%rcx
    0.00 :   5178e9:       jg     517837 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x13c7>
    0.00 :   5178ef:       jmpq   517427 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0xfb7>
         :            _ZNK11onnxruntime7contrib13SkipLayerNormIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   5178f4:       mov    $0xa0,%edi
    0.00 :   5178f9:       lea    0x70(%rsp),%r13
    0.00 :   5178fe:       lea    0xb0(%rsp),%rbp
    0.00 :   517906:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   51790b:       mov    %rbp,%rdi
    0.00 :   51790e:       lea    0x60(%rsp),%rcx
    0.00 :   517913:       mov    %r13,%rsi
    0.00 :   517916:       mov    %rax,%r12
    0.00 :   517919:       lea    0x30deeb(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517920:       lea    0x68(%rsp),%rdx
    0.00 :   517925:       mov    %rax,0x60(%rsp)
    0.00 :   51792a:       lea    0x30ded7(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517931:       lea    0x30(%r14),%r8
    0.00 :   517935:       mov    %rax,0x68(%rsp)
    0.00 :   51793a:       lea    0x30deb0(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517941:       mov    %rax,0x70(%rsp)
    0.00 :   517946:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   51794b:       mov    %r13,%rdi
    0.00 :   51794e:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517953:       lea    0xd0(%rsp),%rbx
    0.00 :   51795b:       mov    %r13,%r8
    0.00 :   51795e:       lea    0x36b41b(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517965:       mov    $0x97,%edx
    0.00 :   51796a:       lea    0x30de9f(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517971:       mov    %rbx,%rdi
    0.00 :   517974:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517979:       mov    %rbp,%rcx
    0.00 :   51797c:       lea    0x30decd(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517983:       mov    %rbx,%rsi
    0.00 :   517986:       mov    %r12,%rdi
    0.00 :   517989:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   51798e:       mov    %rbx,%rdi
         :            if (!_M_is_local())
    0.00 :   517991:       add    $0x10,%rbp
    0.00 :   517995:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   51799a:       mov    %r13,%rdi
    0.00 :   51799d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5179a2:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5179aa:       cmp    %rbp,%rdi
    0.00 :   5179ad:       je     5179b4 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1544>
    0.00 :   5179af:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5179b4:       lea    -0x41e29b(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   5179bb:       lea    0x6f9c6e(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   5179c2:       mov    %r12,%rdi
    0.00 :   5179c5:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   5179ca:       mov    $0xa0,%edi
    0.00 :   5179cf:       lea    0x70(%rsp),%r13
    0.00 :   5179d4:       lea    0xb0(%rsp),%rbp
    0.00 :   5179dc:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5179e1:       mov    %rbp,%rdi
    0.00 :   5179e4:       lea    0x60(%rsp),%rcx
    0.00 :   5179e9:       mov    %r13,%rsi
    0.00 :   5179ec:       mov    %rax,%r15
    0.00 :   5179ef:       lea    0x30de15(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   5179f6:       lea    0x68(%rsp),%rdx
    0.00 :   5179fb:       mov    %rax,0x60(%rsp)
    0.00 :   517a00:       lea    0x30de01(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517a07:       lea    0x30(%r12),%r8
    0.00 :   517a0c:       mov    %rax,0x68(%rsp)
    0.00 :   517a11:       lea    0x30ddd9(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517a18:       mov    %rax,0x70(%rsp)
    0.00 :   517a1d:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517a22:       mov    %r13,%rdi
    0.00 :   517a25:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517a2a:       lea    0xd0(%rsp),%rbx
    0.00 :   517a32:       mov    %r13,%r8
    0.00 :   517a35:       lea    0x36b344(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517a3c:       mov    $0x97,%edx
    0.00 :   517a41:       lea    0x30ddc8(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517a48:       mov    %rbx,%rdi
    0.00 :   517a4b:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517a50:       mov    %rbp,%rcx
    0.00 :   517a53:       lea    0x30ddf6(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517a5a:       mov    %rbx,%rsi
    0.00 :   517a5d:       mov    %r15,%rdi
    0.00 :   517a60:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517a65:       mov    %rbx,%rdi
    0.00 :   517a68:       add    $0x10,%rbp
    0.00 :   517a6c:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517a71:       mov    %r13,%rdi
    0.00 :   517a74:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517a79:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517a81:       cmp    %rbp,%rdi
    0.00 :   517a84:       je     517a8b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x161b>
    0.00 :   517a86:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517a8b:       lea    -0x41e372(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   517a92:       lea    0x6f9b97(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   517a99:       mov    %r15,%rdi
    0.00 :   517a9c:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   517aa1:       mov    $0xa0,%edi
    0.00 :   517aa6:       lea    0x70(%rsp),%r13
    0.00 :   517aab:       lea    0xb0(%rsp),%rbp
    0.00 :   517ab3:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   517ab8:       mov    %rbp,%rdi
    0.00 :   517abb:       lea    0x60(%rsp),%rcx
    0.00 :   517ac0:       mov    %r13,%rsi
    0.00 :   517ac3:       mov    %rax,%r12
    0.00 :   517ac6:       lea    0x30dd3e(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517acd:       lea    0x68(%rsp),%rdx
    0.00 :   517ad2:       mov    %rax,0x60(%rsp)
    0.00 :   517ad7:       lea    0x30dd2a(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517ade:       lea    0x30(%rbx),%r8
    0.00 :   517ae2:       mov    %rax,0x68(%rsp)
    0.00 :   517ae7:       lea    0x30dd03(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517aee:       mov    %rax,0x70(%rsp)
    0.00 :   517af3:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517af8:       mov    %r13,%rdi
    0.00 :   517afb:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517b00:       lea    0xd0(%rsp),%rbx
    0.00 :   517b08:       mov    %r13,%r8
    0.00 :   517b0b:       lea    0x36b26e(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517b12:       mov    $0x97,%edx
    0.00 :   517b17:       lea    0x30dcf2(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517b1e:       mov    %rbx,%rdi
    0.00 :   517b21:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517b26:       mov    %rbp,%rcx
    0.00 :   517b29:       lea    0x30dd20(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517b30:       mov    %rbx,%rsi
    0.00 :   517b33:       mov    %r12,%rdi
    0.00 :   517b36:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517b3b:       jmpq   51798e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x151e>
    0.00 :   517b40:       mov    $0xa0,%edi
    0.00 :   517b45:       mov    %rsi,(%rsp)
    0.00 :   517b49:       lea    0x70(%rsp),%r13
    0.00 :   517b4e:       lea    0xb0(%rsp),%rbp
    0.00 :   517b56:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   517b5b:       mov    (%rsp),%rsi
    0.00 :   517b5f:       mov    %rbp,%rdi
    0.00 :   517b62:       lea    0x60(%rsp),%rcx
    0.00 :   517b67:       mov    %rax,%r12
    0.00 :   517b6a:       lea    0x30dc9a(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517b71:       lea    0x68(%rsp),%rdx
    0.00 :   517b76:       mov    %rax,0x60(%rsp)
    0.00 :   517b7b:       lea    0x30dc86(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517b82:       lea    0x30(%rsi),%r8
    0.00 :   517b86:       mov    %r13,%rsi
    0.00 :   517b89:       mov    %rax,0x68(%rsp)
    0.00 :   517b8e:       lea    0x30dc5c(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517b95:       mov    %rax,0x70(%rsp)
    0.00 :   517b9a:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517b9f:       mov    %r13,%rdi
    0.00 :   517ba2:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517ba7:       lea    0xd0(%rsp),%rbx
    0.00 :   517baf:       mov    %r13,%r8
    0.00 :   517bb2:       lea    0x36b187(%rip),%rcx        # 882d40 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   517bb9:       mov    $0x83,%edx
    0.00 :   517bbe:       lea    0x30dc4b(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517bc5:       mov    %rbx,%rdi
    0.00 :   517bc8:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517bcd:       mov    %rbp,%rcx
    0.00 :   517bd0:       lea    0x30dc79(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517bd7:       mov    %rbx,%rsi
    0.00 :   517bda:       mov    %r12,%rdi
    0.00 :   517bdd:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517be2:       jmpq   51798e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x151e>
    0.00 :   517be7:       mov    $0xa0,%edi
    0.00 :   517bec:       lea    0x70(%rsp),%r13
    0.00 :   517bf1:       lea    0xb0(%rsp),%rbp
    0.00 :   517bf9:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   517bfe:       mov    %rbp,%rdi
    0.00 :   517c01:       lea    0x60(%rsp),%rcx
    0.00 :   517c06:       mov    %r13,%rsi
    0.00 :   517c09:       mov    %rax,%r12
    0.00 :   517c0c:       lea    0x30dbf8(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517c13:       lea    0x68(%rsp),%rdx
    0.00 :   517c18:       mov    %rax,0x60(%rsp)
    0.00 :   517c1d:       lea    0x30dbe4(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517c24:       mov    %rax,0x68(%rsp)
    0.00 :   517c29:       lea    0x30dbc1(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517c30:       mov    %rax,0x70(%rsp)
    0.00 :   517c35:       mov    0x10(%rsp),%rax
    0.00 :   517c3a:       lea    0x30(%rax),%r8
    0.00 :   517c3e:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517c43:       mov    %r13,%rdi
    0.00 :   517c46:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517c4b:       lea    0xd0(%rsp),%rbx
    0.00 :   517c53:       mov    %r13,%r8
    0.00 :   517c56:       lea    0x36b123(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517c5d:       mov    $0x97,%edx
    0.00 :   517c62:       lea    0x30dba7(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517c69:       mov    %rbx,%rdi
    0.00 :   517c6c:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517c71:       mov    %rbp,%rcx
    0.00 :   517c74:       lea    0x30dbd5(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517c7b:       mov    %rbx,%rsi
    0.00 :   517c7e:       mov    %r12,%rdi
    0.00 :   517c81:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517c86:       jmpq   51798e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x151e>
    0.00 :   517c8b:       mov    $0xa0,%edi
    0.00 :   517c90:       lea    0x70(%rsp),%r13
    0.00 :   517c95:       lea    0xb0(%rsp),%rbp
    0.00 :   517c9d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   517ca2:       mov    %rbp,%rdi
    0.00 :   517ca5:       lea    0x60(%rsp),%rcx
    0.00 :   517caa:       mov    %r13,%rsi
    0.00 :   517cad:       mov    %rax,%r14
    0.00 :   517cb0:       lea    0x30db54(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   517cb7:       lea    0x68(%rsp),%rdx
    0.00 :   517cbc:       mov    %rax,0x60(%rsp)
    0.00 :   517cc1:       lea    0x30db40(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   517cc8:       mov    %rax,0x68(%rsp)
    0.00 :   517ccd:       lea    0x30db1d(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   517cd4:       mov    %rax,0x70(%rsp)
    0.00 :   517cd9:       mov    (%rsp),%rax
    0.00 :   517cdd:       lea    0x30(%rax),%r8
    0.00 :   517ce1:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   517ce6:       mov    %r13,%rdi
    0.00 :   517ce9:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   517cee:       lea    0xd0(%rsp),%rbx
    0.00 :   517cf6:       mov    %r13,%r8
    0.00 :   517cf9:       lea    0x36b080(%rip),%rcx        # 882d80 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   517d00:       mov    $0x97,%edx
    0.00 :   517d05:       lea    0x30db04(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   517d0c:       mov    %rbx,%rdi
    0.00 :   517d0f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   517d14:       mov    %rbp,%rcx
    0.00 :   517d17:       lea    0x30db32(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   517d1e:       mov    %rbx,%rsi
    0.00 :   517d21:       mov    %r14,%rdi
    0.00 :   517d24:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   517d29:       mov    %rbx,%rdi
    0.00 :   517d2c:       add    $0x10,%rbp
    0.00 :   517d30:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517d35:       mov    %r13,%rdi
    0.00 :   517d38:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517d3d:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517d45:       cmp    %rbp,%rdi
    0.00 :   517d48:       je     517d4f <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x18df>
    0.00 :   517d4a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517d4f:       lea    -0x41e636(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   517d56:       lea    0x6f98d3(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   517d5d:       mov    %r14,%rdi
    0.00 :   517d60:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   517d65:       mov    %rax,%r12
    0.00 :   517d68:       jmp    517d6f <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x18ff>
    0.00 :   517d6a:       mov    %rax,%rbx
    0.00 :   517d6d:       jmp    517d7a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x190a>
    0.00 :   517d6f:       mov    %rbx,%rdi
    0.00 :   517d72:       mov    %r12,%rbx
    0.00 :   517d75:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517d7a:       mov    %r13,%rdi
    0.00 :   517d7d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517d82:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517d8a:       add    $0x10,%rbp
    0.00 :   517d8e:       cmp    %rbp,%rdi
    0.00 :   517d91:       je     517d98 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1928>
    0.00 :   517d93:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517d98:       mov    %r14,%rdi
    0.00 :   517d9b:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   517da0:       mov    %rbx,%rdi
    0.00 :   517da3:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517da8:       mov    %rax,%rbx
    0.00 :   517dab:       jmp    517d82 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1912>
    0.00 :   517dad:       jmp    517dd1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1961>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   517daf:       lea    0x8(%rbx),%rdi
    0.00 :   517db3:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   517db8:       mov    -0x18(%r14),%rax
    0.00 :   517dbc:       mov    0x10(%rsp),%rcx
    0.00 :   517dc1:       mov    %r14,0xd0(%rsp)
    0.00 :   517dc9:       mov    %rcx,0xd0(%rsp,%rax,1)
    0.00 :   517dd1:       lea    0x10(%r15),%rax
    0.00 :   517dd5:       lea    0x70(%rbx),%rdi
    0.00 :   517dd9:       mov    %rax,0x140(%rsp)
    0.00 :   517de1:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   517de6:       callq  52a50 <std::terminate()@plt>
    0.00 :   517deb:       mov    %rax,%r14
    0.00 :   517dee:       jmp    517df5 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1985>
    0.00 :   517df0:       mov    %rax,%rbx
    0.00 :   517df3:       jmp    517e00 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1990>
    0.00 :   517df5:       mov    %rbx,%rdi
    0.00 :   517df8:       mov    %r14,%rbx
    0.00 :   517dfb:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517e00:       mov    %r13,%rdi
    0.00 :   517e03:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517e08:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517e10:       add    $0x10,%rbp
    0.00 :   517e14:       cmp    %rbp,%rdi
    0.00 :   517e17:       je     517e1e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19ae>
    0.00 :   517e19:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517e1e:       mov    %r12,%rdi
    0.00 :   517e21:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   517e26:       mov    %rbx,%rdi
    0.00 :   517e29:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517e2e:       jmp    517df0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1980>
    0.00 :   517e30:       mov    %rax,%rbx
    0.00 :   517e33:       jmp    517e08 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1998>
    0.00 :   517e35:       jmp    517e3c <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19cc>
    0.00 :   517e37:       jmpq   517daf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x193f>
    0.00 :   517e3c:       jmpq   517daf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x193f>
    0.00 :   517e41:       mov    %rax,%rbx
    0.00 :   517e44:       jmp    517e48 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19d8>
    0.00 :   517e46:       jmp    517dd1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1961>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517e48:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517e50:       add    $0x10,%rbp
    0.00 :   517e54:       cmp    %rbp,%rdi
    0.00 :   517e57:       je     517e5e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19ee>
    0.00 :   517e59:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   517e5e:       mov    %rbx,%rdi
    0.00 :   517e61:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517e66:       mov    %rax,%rbp
    0.00 :   517e69:       jmp    517e8a <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a1a>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517e6b:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517e73:       add    $0x10,%rbp
    0.00 :   517e77:       cmp    %rbp,%rdi
    0.00 :   517e7a:       je     517de6 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1976>
         :            ::operator delete(__p);
    0.00 :   517e80:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   517e85:       jmpq   517de6 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1976>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517e8a:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517e92:       add    $0x10,%rbx
    0.00 :   517e96:       cmp    %rbx,%rdi
    0.00 :   517e99:       je     517ea0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a30>
         :            ::operator delete(__p);
    0.00 :   517e9b:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   517ea0:       mov    %rbp,%rdi
    0.00 :   517ea3:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517ea8:       jmp    517eac <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a3c>
    0.00 :   517eaa:       jmp    517e41 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19d1>
    0.00 :   517eac:       jmpq   517dd1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1961>
    0.00 :   517eb1:       jmp    517eb5 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a45>
    0.00 :   517eb3:       jmp    517e41 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19d1>
         :            _M_is_local() const
    0.00 :   517eb5:       jmp    517e6b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19fb>
    0.00 :   517eb7:       jmp    517ebb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a4b>
    0.00 :   517eb9:       jmp    517e66 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19f6>
    0.00 :   517ebb:       jmpq   517daf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x193f>
    0.00 :   517ec0:       jmpq   517daf <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x193f>
    0.00 :   517ec5:       jmpq   517deb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x197b>
    0.00 :   517eca:       jmpq   517df0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1980>
    0.00 :   517ecf:       jmpq   517e30 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19c0>
    0.00 :   517ed4:       jmp    517edb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a6b>
    0.00 :   517ed6:       jmpq   517e41 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19d1>
    0.00 :   517edb:       jmpq   517dd1 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1961>
    0.00 :   517ee0:       jmp    517e66 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19f6>
    0.00 :   517ee2:       jmp    517e66 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19f6>
    0.00 :   517ee4:       jmp    517ee8 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a78>
    0.00 :   517ee6:       jmp    517e6b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19fb>
    0.00 :   517ee8:       jmp    517e6b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19fb>
    0.00 :   517eea:       mov    %rax,%rbp
    0.00 :   517eed:       jmp    517ef4 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a84>
    0.00 :   517eef:       mov    %rax,%rbx
    0.00 :   517ef2:       jmp    517f10 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1aa0>
         :            if (_M_manager)
    0.00 :   517ef4:       mov    0xe0(%rsp),%rax
    0.00 :   517efc:       test   %rax,%rax
    0.00 :   517eff:       je     517ea0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a30>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   517f01:       mov    $0x3,%edx
    0.00 :   517f06:       mov    %rbx,%rsi
    0.00 :   517f09:       mov    %rbx,%rdi
    0.00 :   517f0c:       callq  *%rax
    0.00 :   517f0e:       jmp    517ea0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1a30>
         :            if (_M_manager)
    0.00 :   517f10:       mov    0xe0(%rsp),%rax
    0.00 :   517f18:       test   %rax,%rax
    0.00 :   517f1b:       je     517e5e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19ee>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   517f21:       lea    0xd0(%rsp),%rdi
    0.00 :   517f29:       mov    $0x3,%edx
    0.00 :   517f2e:       mov    %rdi,%rsi
    0.00 :   517f31:       callq  *%rax
    0.00 :   517f33:       jmpq   517e5e <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19ee>
    0.00 :   517f38:       mov    %rax,%r14
    0.00 :   517f3b:       jmp    517f42 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1ad2>
    0.00 :   517f3d:       mov    %rax,%rbx
    0.00 :   517f40:       jmp    517f4d <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1add>
    0.00 :   517f42:       mov    %rbx,%rdi
    0.00 :   517f45:       mov    %r14,%rbx
    0.00 :   517f48:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   517f4d:       mov    %r13,%rdi
    0.00 :   517f50:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   517f55:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   517f5d:       add    $0x10,%rbp
    0.00 :   517f61:       cmp    %rbp,%rdi
    0.00 :   517f64:       je     517f6b <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1afb>
         :            ::operator delete(__p);
    0.00 :   517f66:       callq  53300 <operator delete(void*)@plt>
    0.00 :   517f6b:       mov    %r15,%rdi
    0.00 :   517f6e:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   517f73:       mov    %rbx,%rdi
    0.00 :   517f76:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   517f7b:       mov    %rax,%rbx
    0.00 :   517f7e:       jmp    517f55 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1ae5>
    0.00 :   517f80:       jmpq   517e30 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19c0>
    0.00 :   517f85:       jmpq   517deb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x197b>
    0.00 :   517f8a:       jmpq   517deb <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x197b>
    0.00 :   517f8f:       jmpq   517df0 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1980>
    0.00 :   517f94:       jmpq   517e30 <onnxruntime::contrib::SkipLayerNorm<float>::Compute(onnxruntime::OpKernelContext*) const+0x19c0>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (12 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .plt:
         :
         :           0000000000053150 <memcpy@plt>:
  100.00 :   53150:       jmpq   *0xbd531a(%rip)        # c28470 <memcpy@GLIBC_2.14>
    0.00 :   53156:       pushq  $0x8b
    0.00 :   5315b:       jmpq   52890 <.plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (10 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006b4770 <MlasComputeSoftmaxThreaded(void*, int)>:
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b4770:       push   %r15
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b4772:       xor    %edx,%edx
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b4774:       push   %r14
    0.00 :   6b4776:       push   %r13
    0.00 :   6b4778:       push   %r12
    0.00 :   6b477a:       push   %rbp
    0.00 :   6b477b:       movslq %esi,%rbp
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b477e:       mov    %esi,%esi
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b4780:       push   %rbx
    0.00 :   6b4781:       sub    $0x48,%rsp
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b4785:       movslq (%rdi),%rcx
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b4788:       mov    %fs:0x28,%rax
    0.00 :   6b4791:       mov    %rax,0x38(%rsp)
    0.00 :   6b4796:       xor    %eax,%eax
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b4798:       mov    0x18(%rdi),%rax
    0.00 :   6b479c:       div    %rcx
    0.00 :   6b479f:       mov    %rax,%r12
    0.00 :   6b47a2:       cmp    %rsi,%rdx
    0.00 :   6b47a5:       jbe    6b48d0 <MlasComputeSoftmaxThreaded(void*, int)+0x160>
    0.00 :   6b47ab:       add    $0x1,%r12
    0.00 :   6b47af:       imul   %r12,%rbp
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b47b3:       mov    0x20(%rdi),%r13
    0.00 :   6b47b7:       movzbl 0x4(%rdi),%eax
    0.00 :   6b47bb:       mov    0x8(%rdi),%rbx
    0.00 :   6b47bf:       lea    0x0(,%r13,4),%r15
    0.00 :   6b47c7:       mov    %al,0xf(%rsp)
    0.00 :   6b47cb:       imul   %r15,%rbp
    0.00 :   6b47cf:       add    %rbp,%rbx
    0.00 :   6b47d2:       add    0x10(%rdi),%rbp
    0.00 :   6b47d6:       test   %r12,%r12
    0.00 :   6b47d9:       je     6b48a7 <MlasComputeSoftmaxThreaded(void*, int)+0x137>
    0.00 :   6b47df:       lea    0x2c(%rsp),%rax
    0.00 :   6b47e4:       lea    0x576755(%rip),%r14        # c2af40 <MlasPlatform>
    0.00 :   6b47eb:       mov    %rax,0x10(%rsp)
    0.00 :   6b47f0:       lea    0x30(%rsp),%rax
    0.00 :   6b47f5:       mov    %rax,0x18(%rsp)
    0.00 :   6b47fa:       jmp    6b483f <MlasComputeSoftmaxThreaded(void*, int)+0xcf>
    0.00 :   6b47fc:       nopl   0x0(%rax)
    0.00 :   6b4800:       mov    %rbx,%rdi
    0.00 :   6b4803:       xor    %esi,%esi
    0.00 :   6b4805:       callq  *%rax
    0.00 :   6b4807:       movss  0x2c(%rsp),%xmm1
    0.00 :   6b480d:       movss  %xmm1,0x30(%rsp)
         :            using ::log;
         :
         :            #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
         :            inline _GLIBCXX_CONSTEXPR float
         :            log(float __x)
         :            { return __builtin_logf(__x); }
    0.00 :   6b4813:       callq  53d90 <logf@plt>
    0.00 :   6b4818:       mov    %rbp,%rsi
    0.00 :   6b481b:       mov    %rbx,%rdi
    0.00 :   6b481e:       mov    0x18(%rsp),%rcx
    0.00 :   6b4823:       movss  %xmm0,0x34(%rsp)
    0.00 :   6b4829:       mov    %r13,%rdx
    0.00 :   6b482c:       add    %r15,%rbx
    0.00 :   6b482f:       add    %r15,%rbp
    0.00 :   6b4832:       callq  *0xd8(%r14)
    0.00 :   6b4839:       sub    $0x1,%r12
    0.00 :   6b483d:       je     6b48a7 <MlasComputeSoftmaxThreaded(void*, int)+0x137>
    0.00 :   6b483f:       mov    %r13,%rsi
    0.00 :   6b4842:       mov    %rbx,%rdi
    0.00 :   6b4845:       callq  *0xe0(%r14)
    0.00 :   6b484c:       cmpb   $0x0,0xf(%rsp)
    9.97 :   6b4851:       mov    %r13,%rdx
    9.46 :   6b4854:       xorps  0x1955f5(%rip),%xmm0        # 849e50 <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0xd0>
    0.00 :   6b485b:       mov    0xc8(%r14),%rax
    0.00 :   6b4862:       mov    0x10(%rsp),%rcx
   20.49 :   6b4867:       movss  %xmm0,0x2c(%rsp)
   10.07 :   6b486d:       jne    6b4800 <MlasComputeSoftmaxThreaded(void*, int)+0x90>
    0.00 :   6b486f:       mov    %rbp,%rsi
    0.00 :   6b4872:       mov    %rbx,%rdi
   30.07 :   6b4875:       add    %r15,%rbx
   10.36 :   6b4878:       callq  *%rax
    0.00 :   6b487a:       movss  0x172522(%rip),%xmm2        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   6b4882:       mov    %rbp,%rdi
    0.00 :   6b4885:       mov    %r13,%rsi
    0.00 :   6b4888:       mov    0x18(%rsp),%rdx
    0.00 :   6b488d:       add    %r15,%rbp
    0.00 :   6b4890:       divss  %xmm0,%xmm2
    9.58 :   6b4894:       movss  %xmm2,0x30(%rsp)
    0.00 :   6b489a:       callq  *0xd0(%r14)
    0.00 :   6b48a1:       sub    $0x1,%r12
    0.00 :   6b48a5:       jne    6b483f <MlasComputeSoftmaxThreaded(void*, int)+0xcf>
    0.00 :   6b48a7:       mov    0x38(%rsp),%rax
    0.00 :   6b48ac:       xor    %fs:0x28,%rax
    0.00 :   6b48b5:       jne    6b48dc <MlasComputeSoftmaxThreaded(void*, int)+0x16c>
    0.00 :   6b48b7:       add    $0x48,%rsp
    0.00 :   6b48bb:       pop    %rbx
    0.00 :   6b48bc:       pop    %rbp
    0.00 :   6b48bd:       pop    %r12
    0.00 :   6b48bf:       pop    %r13
    0.00 :   6b48c1:       pop    %r14
    0.00 :   6b48c3:       pop    %r15
    0.00 :   6b48c5:       retq
    0.00 :   6b48c6:       nopw   %cs:0x0(%rax,%rax,1)
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6b48d0:       imul   %rax,%rbp
    0.00 :   6b48d4:       add    %rdx,%rbp
    0.00 :   6b48d7:       jmpq   6b47b3 <MlasComputeSoftmaxThreaded(void*, int)+0x43>
         :            _Z26MlasComputeSoftmaxThreadedPvi():
    0.00 :   6b48dc:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000097a30 <__libc_free@@GLIBC_2.2.5>:
   21.90 :   97a30:       push   %r15
    0.00 :   97a32:       push   %r14
    0.00 :   97a34:       push   %r13
    0.00 :   97a36:       push   %r12
    0.00 :   97a38:       mov    %rdi,%r12
    0.00 :   97a3b:       push   %rbp
    0.00 :   97a3c:       push   %rbx
    0.00 :   97a3d:       sub    $0x38,%rsp
    8.30 :   97a41:       mov    %fs:0x28,%rax
    0.00 :   97a4a:       mov    %rax,0x28(%rsp)
    0.00 :   97a4f:       xor    %eax,%eax
    0.00 :   97a51:       mov    0x353498(%rip),%rax        # 3eaef0 <__free_hook@@GLIBC_2.2.5-0x29f8>
    0.00 :   97a58:       mov    (%rax),%rax
   11.49 :   97a5b:       test   %rax,%rax
    0.00 :   97a5e:       jne    97d10 <__libc_free@@GLIBC_2.2.5+0x2e0>
    0.00 :   97a64:       test   %rdi,%rdi
    0.00 :   97a67:       je     97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97a6d:       mov    -0x8(%rdi),%rsi
    0.00 :   97a71:       lea    -0x10(%rdi),%r13
    0.00 :   97a75:       test   $0x2,%sil
    0.00 :   97a79:       jne    97bb8 <__libc_free@@GLIBC_2.2.5+0x188>
    0.00 :   97a7f:       mov    0x3532f2(%rip),%rbp        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   97a86:       cmpq   $0x0,%fs:0x0(%rbp)
    0.00 :   97a8c:       je     97f80 <__libc_free@@GLIBC_2.2.5+0x550>
    0.00 :   97a92:       test   $0x4,%sil
    0.00 :   97a96:       lea    0x3541a3(%rip),%rbx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   97a9d:       jne    97ce8 <__libc_free@@GLIBC_2.2.5+0x2b8>
    0.00 :   97aa3:       mov    %rsi,%r14
    0.00 :   97aa6:       and    $0xfffffffffffffff8,%r14
    0.00 :   97aaa:       mov    %r14,%rax
    0.00 :   97aad:       neg    %rax
    0.00 :   97ab0:       cmp    %r13,%rax
    0.00 :   97ab3:       jb     97f00 <__libc_free@@GLIBC_2.2.5+0x4d0>
    0.00 :   97ab9:       test   $0xf,%r13b
    0.00 :   97abd:       jne    97f00 <__libc_free@@GLIBC_2.2.5+0x4d0>
    0.00 :   97ac3:       cmp    $0x1f,%r14
    0.00 :   97ac7:       jbe    97f10 <__libc_free@@GLIBC_2.2.5+0x4e0>
    0.00 :   97acd:       and    $0x8,%esi
    0.00 :   97ad0:       jne    97f10 <__libc_free@@GLIBC_2.2.5+0x4e0>
    0.00 :   97ad6:       mov    %fs:0x0(%rbp),%rdx
    0.00 :   97adb:       test   %rdx,%rdx
    0.00 :   97ade:       je     97b11 <__libc_free@@GLIBC_2.2.5+0xe1>
    0.00 :   97ae0:       lea    -0x11(%r14),%rax
    0.00 :   97ae4:       shr    $0x4,%rax
    0.00 :   97ae8:       cmp    0x3537e1(%rip),%rax        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   97aef:       jae    97b11 <__libc_free@@GLIBC_2.2.5+0xe1>
    0.00 :   97af1:       cmp    0x8(%r12),%rdx
    0.00 :   97af6:       je     981db <__libc_free@@GLIBC_2.2.5+0x7ab>
    0.00 :   97afc:       movsbq (%rdx,%rax,1),%rsi
   29.47 :   97b01:       cmp    0x3537d8(%rip),%rsi        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   97b08:       mov    %rsi,%rcx
    0.00 :   97b0b:       jb     97f20 <__libc_free@@GLIBC_2.2.5+0x4f0>
    0.00 :   97b11:       cmp    0x355e28(%rip),%r14        # 3ed940 <__malloc_initialize_hook@GLIBC_2.2.5+0x50>
    0.00 :   97b18:       ja     97d20 <__libc_free@@GLIBC_2.2.5+0x2f0>
    0.00 :   97b1e:       lea    0x0(%r13,%r14,1),%rdx
    0.00 :   97b23:       mov    0x8(%rdx),%rax
    0.00 :   97b27:       cmp    $0x10,%rax
    0.00 :   97b2b:       jbe    97fc0 <__libc_free@@GLIBC_2.2.5+0x590>
    0.00 :   97b31:       and    $0xfffffffffffffff8,%rax
    0.00 :   97b35:       cmp    0x888(%rbx),%rax
   11.13 :   97b3c:       jae    97fc0 <__libc_free@@GLIBC_2.2.5+0x590>
    0.00 :   97b42:       mov    0x355de4(%rip),%eax        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   97b48:       test   %eax,%eax
    0.00 :   97b4a:       jne    9819d <__libc_free@@GLIBC_2.2.5+0x76d>
    0.00 :   97b50:       movl   $0x1,0x8(%rbx)
    0.00 :   97b57:       lea    0x358e7a(%rip),%rsi        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   97b5e:       shr    $0x4,%r14d
    0.00 :   97b62:       lea    -0x2(%r14),%ecx
    0.00 :   97b66:       mov    (%rsi),%esi
    0.00 :   97b68:       lea    (%rbx,%rcx,8),%rax
    0.00 :   97b6c:       mov    0x10(%rax),%rdx
    0.00 :   97b70:       test   %esi,%esi
    0.00 :   97b72:       jne    9808f <__libc_free@@GLIBC_2.2.5+0x65f>
    0.00 :   97b78:       cmp    %rdx,%r13
    0.00 :   97b7b:       je     980e8 <__libc_free@@GLIBC_2.2.5+0x6b8>
    0.00 :   97b81:       mov    %rdx,(%r12)
    0.00 :   97b85:       mov    %r13,0x10(%rax)
    0.00 :   97b89:       nopl   0x0(%rax)
    0.00 :   97b90:       mov    0x28(%rsp),%rax
    0.00 :   97b95:       xor    %fs:0x28,%rax
    0.00 :   97b9e:       jne    9852c <__libc_free@@GLIBC_2.2.5+0xafc>
    0.00 :   97ba4:       add    $0x38,%rsp
    0.00 :   97ba8:       pop    %rbx
    0.00 :   97ba9:       pop    %rbp
    0.00 :   97baa:       pop    %r12
    0.00 :   97bac:       pop    %r13
    0.00 :   97bae:       pop    %r14
    0.00 :   97bb0:       pop    %r15
    0.00 :   97bb2:       retq
    0.00 :   97bb3:       nopl   0x0(%rax,%rax,1)
    0.00 :   97bb8:       mov    0x3536f6(%rip),%edi        # 3eb2b4 <__fpu_control@@GLIBC_2.2.5+0x110>
    0.00 :   97bbe:       mov    0x355d73(%rip),%rax        # 3ed938 <__malloc_initialize_hook@GLIBC_2.2.5+0x48>
    0.00 :   97bc5:       test   %edi,%edi
    0.00 :   97bc7:       jne    97c90 <__libc_free@@GLIBC_2.2.5+0x260>
    0.00 :   97bcd:       cmp    0x3536bc(%rip),%rsi        # 3eb290 <__fpu_control@@GLIBC_2.2.5+0xec>
    0.00 :   97bd4:       jbe    97c90 <__libc_free@@GLIBC_2.2.5+0x260>
    0.00 :   97bda:       cmp    $0x2000000,%rsi
    0.00 :   97be1:       ja     97c90 <__libc_free@@GLIBC_2.2.5+0x260>
    0.00 :   97be7:       cmp    %rax,%r13
    0.00 :   97bea:       jae    97c80 <__libc_free@@GLIBC_2.2.5+0x250>
    0.00 :   97bf0:       and    $0xfffffffffffffff8,%rsi
    0.00 :   97bf4:       lea    (%rsi,%rsi,1),%rax
    0.00 :   97bf8:       mov    %rsi,0x353691(%rip)        # 3eb290 <__fpu_control@@GLIBC_2.2.5+0xec>
    0.00 :   97bff:       mov    %rax,0x35367a(%rip)        # 3eb280 <__fpu_control@@GLIBC_2.2.5+0xdc>
    0.00 :   97c06:       nop
    0.00 :   97c07:       mov    -0x8(%r12),%rsi
    0.00 :   97c0c:       test   $0x2,%sil
    0.00 :   97c10:       jne    987ee <__libc_free@@GLIBC_2.2.5+0xdbe>
    0.00 :   97c16:       mov    0x3531d3(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   97c1d:       lea    0x11bfd5(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   97c24:       lea    0x11d095(%rip),%rbx        # 1b4cc0 <_libc_intl_domainname@@GLIBC_2.2.5+0x102c>
    0.00 :   97c2b:       mov    $0xb0f,%r9d
    0.00 :   97c31:       mov    (%rax),%rdx
    0.00 :   97c34:       lea    0x11c215(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   97c3b:       cmpb   $0x0,(%rdx)
    0.00 :   97c3e:       cmovne %rax,%rcx
    0.00 :   97c42:       sub    $0x8,%rsp
    0.00 :   97c46:       push   %rbx
    0.00 :   97c47:       push   %rax
    0.00 :   97c48:       lea    0x1213c1(%rip),%rax        # 1b9010 <_libc_intl_domainname@@GLIBC_2.2.5+0x537c>
    0.00 :   97c4f:       push   %rax
    0.00 :   97c50:       lea    0x11d021(%rip),%r8        # 1b4c78 <_libc_intl_domainname@@GLIBC_2.2.5+0xfe4>
    0.00 :   97c57:       lea    0x120a72(%rip),%rsi        # 1b86d0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4a3c>
    0.00 :   97c5e:       xor    %edi,%edi
    0.00 :   97c60:       xor    %eax,%eax
    0.00 :   97c62:       callq  7deb0 <psiginfo@@GLIBC_2.10+0x1780>
    0.00 :   97c67:       mov    0x353142(%rip),%rax        # 3eadb0 <stderr@@GLIBC_2.2.5-0x1a90>
    0.00 :   97c6e:       add    $0x20,%rsp
    0.00 :   97c72:       mov    (%rax),%rdi
    0.00 :   97c75:       callq  7e8c0 <_IO_fflush@@GLIBC_2.2.5>
    0.00 :   97c7a:       callq  407e0 <abort@@GLIBC_2.2.5>
    0.00 :   97c7f:       nop
    0.00 :   97c80:       cmp    0x355ca9(%rip),%r13        # 3ed930 <__malloc_initialize_hook@GLIBC_2.2.5+0x40>
    0.00 :   97c87:       jae    97bf0 <__libc_free@@GLIBC_2.2.5+0x1c0>
    0.00 :   97c8d:       nopl   (%rax)
    0.00 :   97c90:       and    $0xfffffffffffffff8,%rsi
    0.00 :   97c94:       cmp    %rax,%r13
    0.00 :   97c97:       jae    97d00 <__libc_free@@GLIBC_2.2.5+0x2d0>
    0.00 :   97c99:       mov    -0x10(%r12),%rax
    0.00 :   97c9e:       mov    %r13,%rdi
    0.00 :   97ca1:       sub    %rax,%rdi
    0.00 :   97ca4:       add    %rax,%rsi
    0.00 :   97ca7:       mov    0x3531aa(%rip),%rax        # 3eae58 <_rtld_global_ro@GLIBC_PRIVATE>
    0.00 :   97cae:       mov    %rdi,%rdx
    0.00 :   97cb1:       or     %rsi,%rdx
    0.00 :   97cb4:       mov    0x18(%rax),%rax
    0.00 :   97cb8:       sub    $0x1,%rax
    0.00 :   97cbc:       test   %rdx,%rax
    0.00 :   97cbf:       jne    97fb0 <__libc_free@@GLIBC_2.2.5+0x580>
    0.00 :   97cc5:       lock decl 0x3535dc(%rip)        # 3eb2a8 <__fpu_control@@GLIBC_2.2.5+0x104>
    0.00 :   97ccc:       mov    %rsi,%rax
    0.00 :   97ccf:       neg    %rax
    0.00 :   97cd2:       lock add %rax,0x3535de(%rip)        # 3eb2b8 <__fpu_control@@GLIBC_2.2.5+0x114>
    0.00 :   97cda:       callq  11b8b0 <__munmap@@GLIBC_PRIVATE>
    0.00 :   97cdf:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97ce4:       nopl   0x0(%rax)
    0.00 :   97ce8:       mov    %r13,%rax
    0.00 :   97ceb:       and    $0xfffffffffc000000,%rax
    0.00 :   97cf1:       mov    (%rax),%rbx
    0.00 :   97cf4:       jmpq   97aa3 <__libc_free@@GLIBC_2.2.5+0x73>
    0.00 :   97cf9:       nopl   0x0(%rax)
    0.00 :   97d00:       cmp    0x355c29(%rip),%r13        # 3ed930 <__malloc_initialize_hook@GLIBC_2.2.5+0x40>
    0.00 :   97d07:       jae    97c99 <__libc_free@@GLIBC_2.2.5+0x269>
    0.00 :   97d09:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97d0e:       xchg   %ax,%ax
    0.00 :   97d10:       mov    0x68(%rsp),%rsi
    0.00 :   97d15:       callq  *%rax
    0.00 :   97d17:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97d1c:       nopl   0x0(%rax)
    0.00 :   97d20:       testb  $0x2,-0x8(%r12)
    0.00 :   97d26:       jne    97fa0 <__libc_free@@GLIBC_2.2.5+0x570>
    0.00 :   97d2c:       lea    0x358ca5(%rip),%rax        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   97d33:       mov    $0x1,%ebp
    0.00 :   97d38:       mov    (%rax),%eax
    0.00 :   97d3a:       test   %eax,%eax
    0.00 :   97d3c:       jne    9821c <__libc_free@@GLIBC_2.2.5+0x7ec>
    0.00 :   97d42:       mov    0x60(%rbx),%rax
    0.00 :   97d46:       lea    0x0(%r13,%r14,1),%r15
    0.00 :   97d4b:       cmp    %rax,%r13
    0.00 :   97d4e:       je     98210 <__libc_free@@GLIBC_2.2.5+0x7e0>
    0.00 :   97d54:       testb  $0x2,0x4(%rbx)
    0.00 :   97d58:       je     97f4a <__libc_free@@GLIBC_2.2.5+0x51a>
    0.00 :   97d5e:       mov    0x8(%r15),%rax
    0.00 :   97d62:       test   $0x1,%al
    0.00 :   97d64:       je     97f70 <__libc_free@@GLIBC_2.2.5+0x540>
    0.00 :   97d6a:       mov    %rax,%rcx
    0.00 :   97d6d:       and    $0xfffffffffffffff8,%rcx
    0.00 :   97d71:       cmp    $0x10,%rax
    0.00 :   97d75:       jbe    98191 <__libc_free@@GLIBC_2.2.5+0x761>
    0.00 :   97d7b:       cmp    0x888(%rbx),%rcx
    0.00 :   97d82:       jae    98191 <__libc_free@@GLIBC_2.2.5+0x761>
    0.00 :   97d88:       mov    0x355b9e(%rip),%esi        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   97d8e:       test   %esi,%esi
    0.00 :   97d90:       jne    9825f <__libc_free@@GLIBC_2.2.5+0x82f>
    0.00 :   97d96:       testb  $0x1,-0x8(%r12)
    0.00 :   97d9c:       jne    97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   97d9e:       mov    -0x10(%r12),%rax
    0.00 :   97da3:       sub    %rax,%r13
    0.00 :   97da6:       add    %rax,%r14
    0.00 :   97da9:       mov    0x8(%r13),%rsi
    0.00 :   97dad:       mov    %rsi,%rax
    0.00 :   97db0:       and    $0xfffffffffffffff8,%rax
    0.00 :   97db4:       cmp    0x0(%r13,%rax,1),%rax
    0.00 :   97db9:       jne    98278 <__libc_free@@GLIBC_2.2.5+0x848>
    0.00 :   97dbf:       mov    0x10(%r13),%rax
    0.00 :   97dc3:       mov    0x18(%r13),%rdx
    0.00 :   97dc7:       cmp    0x18(%rax),%r13
    0.00 :   97dcb:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   97dd1:       cmp    0x10(%rdx),%r13
    0.00 :   97dd5:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   97ddb:       cmp    $0x3ff,%rsi
    0.00 :   97de2:       mov    %rdx,0x18(%rax)
    0.00 :   97de6:       mov    %rax,0x10(%rdx)
    0.00 :   97dea:       jbe    97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   97dec:       mov    0x20(%r13),%rdx
    0.00 :   97df0:       test   %rdx,%rdx
    0.00 :   97df3:       jne    984b4 <__libc_free@@GLIBC_2.2.5+0xa84>
    0.00 :   97df9:       nopl   0x0(%rax)
    0.00 :   97e00:       cmp    0x60(%rbx),%r15
    0.00 :   97e04:       je     98105 <__libc_free@@GLIBC_2.2.5+0x6d5>
    0.00 :   97e0a:       testb  $0x1,0x8(%r15,%rcx,1)
    0.00 :   97e10:       mov    0x8(%r15),%rax
    0.00 :   97e14:       jne    980f8 <__libc_free@@GLIBC_2.2.5+0x6c8>
    0.00 :   97e1a:       mov    %rax,%rdx
    0.00 :   97e1d:       and    $0xfffffffffffffff8,%rdx
    0.00 :   97e21:       cmp    (%r15,%rdx,1),%rdx
    0.00 :   97e25:       jne    98278 <__libc_free@@GLIBC_2.2.5+0x848>
    0.00 :   97e2b:       mov    0x10(%r15),%rdx
    0.00 :   97e2f:       mov    0x18(%r15),%rsi
    0.00 :   97e33:       cmp    0x18(%rdx),%r15
    0.00 :   97e37:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   97e3d:       cmp    0x10(%rsi),%r15
    0.00 :   97e41:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   97e47:       cmp    $0x3ff,%rax
    0.00 :   97e4d:       mov    %rsi,0x18(%rdx)
    0.00 :   97e51:       mov    %rdx,0x10(%rsi)
    0.00 :   97e55:       jbe    97e64 <__libc_free@@GLIBC_2.2.5+0x434>
    0.00 :   97e57:       mov    0x20(%r15),%rax
    0.00 :   97e5b:       test   %rax,%rax
    0.00 :   97e5e:       jne    98531 <__libc_free@@GLIBC_2.2.5+0xb01>
    0.00 :   97e64:       add    %rcx,%r14
    0.00 :   97e67:       mov    0x70(%rbx),%rax
    0.00 :   97e6b:       lea    0x60(%rbx),%rdx
    0.00 :   97e6f:       cmp    0x18(%rax),%rdx
    0.00 :   97e73:       jne    98462 <__libc_free@@GLIBC_2.2.5+0xa32>
    0.00 :   97e79:       cmp    $0x3ff,%r14
    0.00 :   97e80:       mov    %rax,0x10(%r13)
    0.00 :   97e84:       mov    %rdx,0x18(%r13)
    0.00 :   97e88:       jbe    97e9a <__libc_free@@GLIBC_2.2.5+0x46a>
    0.00 :   97e8a:       movq   $0x0,0x20(%r13)
    0.00 :   97e92:       movq   $0x0,0x28(%r13)
    0.00 :   97e9a:       mov    %r13,0x70(%rbx)
    0.00 :   97e9e:       mov    %r13,0x18(%rax)
    0.00 :   97ea2:       mov    %r14,%rax
    0.00 :   97ea5:       or     $0x1,%rax
    0.00 :   97ea9:       mov    %rax,0x8(%r13)
    0.00 :   97ead:       mov    %r14,0x0(%r13,%r14,1)
    0.00 :   97eb2:       cmp    $0xffff,%r14
    0.00 :   97eb9:       ja     9811c <__libc_free@@GLIBC_2.2.5+0x6ec>
    0.00 :   97ebf:       test   %ebp,%ebp
    0.00 :   97ec1:       jne    97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97ec7:       cmpl   $0x0,0x358b0a(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   97ece:       je     97ed7 <__libc_free@@GLIBC_2.2.5+0x4a7>
    0.00 :   97ed0:       lock decl (%rbx)
    0.00 :   97ed3:       jne    97edb <__libc_free@@GLIBC_2.2.5+0x4ab>
    0.00 :   97ed5:       jmp    97ef1 <__libc_free@@GLIBC_2.2.5+0x4c1>
    0.00 :   97ed7:       decl   (%rbx)
    0.00 :   97ed9:       je     97ef1 <__libc_free@@GLIBC_2.2.5+0x4c1>
    0.00 :   97edb:       lea    (%rbx),%rdi
    0.00 :   97ede:       sub    $0x80,%rsp
    0.00 :   97ee5:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   97eea:       add    $0x80,%rsp
    0.00 :   97ef1:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97ef6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   97f00:       lea    0x11ce01(%rip),%rdi        # 1b4d08 <_libc_intl_domainname@@GLIBC_2.2.5+0x1074>
    0.00 :   97f07:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97f0c:       nopl   0x0(%rax)
    0.00 :   97f10:       lea    0x11ce09(%rip),%rdi        # 1b4d20 <_libc_intl_domainname@@GLIBC_2.2.5+0x108c>
    0.00 :   97f17:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97f1c:       nopl   0x0(%rax)
    0.00 :   97f20:       cmp    $0x3f,%rax
    0.00 :   97f24:       ja     98050 <__libc_free@@GLIBC_2.2.5+0x620>
    0.00 :   97f2a:       lea    (%rdx,%rax,8),%rsi
    0.00 :   97f2e:       add    $0x1,%ecx
    0.00 :   97f31:       mov    %rdx,0x8(%r12)
    0.00 :   97f36:       mov    0x40(%rsi),%rdi
    0.00 :   97f3a:       mov    %rdi,(%r12)
    0.00 :   97f3e:       mov    %r12,0x40(%rsi)
    0.00 :   97f42:       mov    %cl,(%rdx,%rax,1)
    0.00 :   97f45:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97f4a:       mov    0x8(%rax),%rdx
    8.93 :   97f4e:       and    $0xfffffffffffffff8,%rdx
    0.00 :   97f52:       add    %rdx,%rax
    0.00 :   97f55:       cmp    %rax,%r15
    0.00 :   97f58:       jb     97d5e <__libc_free@@GLIBC_2.2.5+0x32e>
    0.00 :   97f5e:       lea    0x1208b3(%rip),%rdi        # 1b8818 <_libc_intl_domainname@@GLIBC_2.2.5+0x4b84>
    0.00 :   97f65:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97f6a:       nopw   0x0(%rax,%rax,1)
    0.00 :   97f70:       lea    0x1208c1(%rip),%rdi        # 1b8838 <_libc_intl_domainname@@GLIBC_2.2.5+0x4ba4>
    0.00 :   97f77:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97f7c:       nopl   0x0(%rax)
    0.00 :   97f80:       mov    0x352df9(%rip),%rax        # 3ead80 <h_errlist@@GLIBC_2.2.5+0xce0>
    0.00 :   97f87:       cmpb   $0x0,%fs:(%rax)
    0.00 :   97f8b:       jne    97a92 <__libc_free@@GLIBC_2.2.5+0x62>
    0.00 :   97f91:       callq  96530 <_IO_str_seekoff@@GLIBC_2.2.5+0x6040>
    0.00 :   97f96:       mov    -0x8(%r12),%rsi
    0.00 :   97f9b:       jmpq   97a92 <__libc_free@@GLIBC_2.2.5+0x62>
    0.00 :   97fa0:       mov    %r13,%rdi
    0.00 :   97fa3:       callq  92170 <_IO_str_seekoff@@GLIBC_2.2.5+0x1c80>
    0.00 :   97fa8:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   97fad:       nopl   (%rax)
    0.00 :   97fb0:       lea    0x120769(%rip),%rdi        # 1b8720 <_libc_intl_domainname@@GLIBC_2.2.5+0x4a8c>
    0.00 :   97fb7:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   97fbc:       nopl   0x0(%rax)
    0.00 :   97fc0:       mov    $0x1,%esi
    0.00 :   97fc5:       xor    %eax,%eax
    0.00 :   97fc7:       cmpl   $0x0,0x358a0a(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   97fce:       je     97fd8 <__libc_free@@GLIBC_2.2.5+0x5a8>
    0.00 :   97fd0:       lock cmpxchg %esi,(%rbx)
    0.00 :   97fd4:       jne    97fdd <__libc_free@@GLIBC_2.2.5+0x5ad>
    0.00 :   97fd6:       jmp    97ff3 <__libc_free@@GLIBC_2.2.5+0x5c3>
    0.00 :   97fd8:       cmpxchg %esi,(%rbx)
    0.00 :   97fdb:       je     97ff3 <__libc_free@@GLIBC_2.2.5+0x5c3>
    0.00 :   97fdd:       lea    (%rbx),%rdi
    0.00 :   97fe0:       sub    $0x80,%rsp
    0.00 :   97fe7:       callq  130520 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   97fec:       add    $0x80,%rsp
    0.00 :   97ff3:       mov    0x8(%rdx),%rax
    0.00 :   97ff7:       mov    $0x1,%edx
    0.00 :   97ffc:       cmp    $0x10,%rax
    0.00 :   98000:       jbe    98012 <__libc_free@@GLIBC_2.2.5+0x5e2>
    0.00 :   98002:       xor    %edx,%edx
    0.00 :   98004:       and    $0xfffffffffffffff8,%rax
    0.00 :   98008:       cmp    0x888(%rbx),%rax
    0.00 :   9800f:       setae  %dl
    0.00 :   98012:       cmpl   $0x0,0x3589bf(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   98019:       je     98022 <__libc_free@@GLIBC_2.2.5+0x5f2>
    0.00 :   9801b:       lock decl (%rbx)
    0.00 :   9801e:       jne    98026 <__libc_free@@GLIBC_2.2.5+0x5f6>
    0.00 :   98020:       jmp    9803c <__libc_free@@GLIBC_2.2.5+0x60c>
    0.00 :   98022:       decl   (%rbx)
    0.00 :   98024:       je     9803c <__libc_free@@GLIBC_2.2.5+0x60c>
    0.00 :   98026:       lea    (%rbx),%rdi
    0.00 :   98029:       sub    $0x80,%rsp
    0.00 :   98030:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   98035:       add    $0x80,%rsp
    0.00 :   9803c:       test   %edx,%edx
    0.00 :   9803e:       je     97b42 <__libc_free@@GLIBC_2.2.5+0x112>
    0.00 :   98044:       lea    0x12075d(%rip),%rdi        # 1b87a8 <_libc_intl_domainname@@GLIBC_2.2.5+0x4b14>
    0.00 :   9804b:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   98050:       mov    0x352d99(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   98057:       lea    0x11bb9b(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   9805e:       lea    0x11ccd0(%rip),%rbx        # 1b4d35 <_libc_intl_domainname@@GLIBC_2.2.5+0x10a1>
    0.00 :   98065:       mov    $0xb75,%r9d
    0.00 :   9806b:       mov    (%rax),%rdx
    0.00 :   9806e:       lea    0x11bddb(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98075:       cmpb   $0x0,(%rdx)
    0.00 :   98078:       cmovne %rax,%rcx
    0.00 :   9807c:       sub    $0x8,%rsp
    0.00 :   98080:       push   %rbx
    0.00 :   98081:       push   %rax
    0.00 :   98082:       lea    0x120fd7(%rip),%rax        # 1b9060 <_libc_intl_domainname@@GLIBC_2.2.5+0x53cc>
    0.00 :   98089:       push   %rax
    0.00 :   9808a:       jmpq   97c50 <__libc_free@@GLIBC_2.2.5+0x220>
    0.00 :   9808f:       cmp    %rdx,%r13
    0.00 :   98092:       je     980e8 <__libc_free@@GLIBC_2.2.5+0x6b8>
    0.00 :   98094:       lea    0x10(%rbx,%rcx,8),%rsi
    0.00 :   98099:       mov    %rdx,(%r12)
    0.00 :   9809d:       mov    %rdx,%rax
    0.00 :   980a0:       cmpl   $0x0,%fs:0x18
    0.00 :   980a9:       je     980ac <__libc_free@@GLIBC_2.2.5+0x67c>
    0.00 :   980ab:       lock cmpxchg %r13,(%rsi)
    8.77 :   980b0:       cmp    %rdx,%rax
    0.00 :   980b3:       mov    %rax,%rcx
    0.00 :   980b6:       jne    980e3 <__libc_free@@GLIBC_2.2.5+0x6b3>
    0.00 :   980b8:       jmpq   97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   980bd:       nopl   (%rax)
    0.00 :   980c0:       mov    %rcx,(%r12)
    0.00 :   980c4:       mov    %rcx,%rax
    0.00 :   980c7:       cmpl   $0x0,%fs:0x18
    0.00 :   980d0:       je     980d3 <__libc_free@@GLIBC_2.2.5+0x6a3>
    0.00 :   980d2:       lock cmpxchg %r13,(%rsi)
    0.00 :   980d7:       cmp    %rcx,%rax
    0.00 :   980da:       je     97b90 <__libc_free@@GLIBC_2.2.5+0x160>
    0.00 :   980e0:       mov    %rax,%rcx
    0.00 :   980e3:       cmp    %rcx,%r13
    0.00 :   980e6:       jne    980c0 <__libc_free@@GLIBC_2.2.5+0x690>
    0.00 :   980e8:       lea    0x1206e1(%rip),%rdi        # 1b87d0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4b3c>
    0.00 :   980ef:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   980f4:       nopl   0x0(%rax)
    0.00 :   980f8:       and    $0xfffffffffffffffe,%rax
    0.00 :   980fc:       mov    %rax,0x8(%r15)
    0.00 :   98100:       jmpq   97e67 <__libc_free@@GLIBC_2.2.5+0x437>
    0.00 :   98105:       add    %rcx,%r14
    0.00 :   98108:       mov    %r14,%rax
    0.00 :   9810b:       or     $0x1,%rax
    0.00 :   9810f:       mov    %rax,0x8(%r13)
    0.00 :   98113:       mov    %r13,0x60(%rbx)
    0.00 :   98117:       jmpq   97eb2 <__libc_free@@GLIBC_2.2.5+0x482>
    0.00 :   9811c:       mov    0x8(%rbx),%eax
    0.00 :   9811f:       test   %eax,%eax
    0.00 :   98121:       je     9812b <__libc_free@@GLIBC_2.2.5+0x6fb>
    0.00 :   98123:       mov    %rbx,%rdi
    0.00 :   98126:       callq  909e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0>
    0.00 :   9812b:       lea    0x353b0e(%rip),%rax        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   98132:       cmp    %rax,%rbx
    0.00 :   98135:       je     98438 <__libc_free@@GLIBC_2.2.5+0xa08>
    0.00 :   9813b:       mov    0x60(%rbx),%r12
    0.00 :   9813f:       mov    %r12,%r14
    0.00 :   98142:       and    $0xfffffffffc000000,%r14
    0.00 :   98149:       cmp    (%r14),%rbx
    0.00 :   9814c:       je     98284 <__libc_free@@GLIBC_2.2.5+0x854>
    0.00 :   98152:       mov    0x352c97(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   98159:       lea    0x11ba99(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   98160:       lea    0x11cc04(%rip),%rbx        # 1b4d6b <_libc_intl_domainname@@GLIBC_2.2.5+0x10d7>
    0.00 :   98167:       mov    $0x1135,%r9d
    0.00 :   9816d:       mov    (%rax),%rdx
    0.00 :   98170:       lea    0x11bcd9(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98177:       cmpb   $0x0,(%rdx)
    0.00 :   9817a:       cmovne %rax,%rcx
    0.00 :   9817e:       sub    $0x8,%rsp
    0.00 :   98182:       push   %rbx
    0.00 :   98183:       push   %rax
    0.00 :   98184:       lea    0x120ea5(%rip),%rax        # 1b9030 <_libc_intl_domainname@@GLIBC_2.2.5+0x539c>
    0.00 :   9818b:       push   %rax
    0.00 :   9818c:       jmpq   97c50 <__libc_free@@GLIBC_2.2.5+0x220>
    0.00 :   98191:       lea    0x1206c8(%rip),%rdi        # 1b8860 <_libc_intl_domainname@@GLIBC_2.2.5+0x4bcc>
    0.00 :   98198:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9819d:       movabs $0x101010101010101,%rcx
    0.00 :   981a7:       movzbl %al,%eax
    0.00 :   981aa:       lea    -0x10(%r14),%rdx
    0.00 :   981ae:       imul   %rcx,%rax
    0.00 :   981b2:       lea    0x8(%r12),%rdi
    0.00 :   981b7:       mov    %edx,%ecx
    0.00 :   981b9:       and    $0xfffffffffffffff8,%rdi
    0.00 :   981bd:       mov    %rax,(%r12)
    0.00 :   981c1:       mov    %rax,-0x8(%r12,%rcx,1)
    0.00 :   981c6:       mov    %r12,%rcx
    0.00 :   981c9:       sub    %rdi,%rcx
    0.00 :   981cc:       add    %ecx,%edx
    0.00 :   981ce:       shr    $0x3,%edx
    0.00 :   981d1:       mov    %edx,%ecx
    0.00 :   981d3:       rep stos %rax,%es:(%rdi)
    0.00 :   981d6:       jmpq   97b50 <__libc_free@@GLIBC_2.2.5+0x120>
    0.00 :   981db:       nop
    0.00 :   981dc:       mov    %fs:0x0(%rbp),%rdx
    0.00 :   981e1:       mov    0x40(%rdx,%rax,8),%rcx
    0.00 :   981e6:       test   %rcx,%rcx
    0.00 :   981e9:       jne    981fc <__libc_free@@GLIBC_2.2.5+0x7cc>
    0.00 :   981eb:       jmpq   97afc <__libc_free@@GLIBC_2.2.5+0xcc>
    0.00 :   981f0:       mov    (%rcx),%rcx
    0.00 :   981f3:       test   %rcx,%rcx
    0.00 :   981f6:       je     97afc <__libc_free@@GLIBC_2.2.5+0xcc>
    0.00 :   981fc:       cmp    %rcx,%r12
    0.00 :   981ff:       jne    981f0 <__libc_free@@GLIBC_2.2.5+0x7c0>
    0.00 :   98201:       lea    0x120570(%rip),%rdi        # 1b8778 <_libc_intl_domainname@@GLIBC_2.2.5+0x4ae4>
    0.00 :   98208:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9820d:       nopl   (%rax)
    0.00 :   98210:       lea    0x1205e1(%rip),%rdi        # 1b87f8 <_libc_intl_domainname@@GLIBC_2.2.5+0x4b64>
    0.00 :   98217:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9821c:       mov    %ebp,%esi
    0.00 :   9821e:       xor    %eax,%eax
    0.00 :   98220:       cmpl   $0x0,0x3587b1(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   98227:       je     98231 <__libc_free@@GLIBC_2.2.5+0x801>
    0.00 :   98229:       lock cmpxchg %esi,(%rbx)
    0.00 :   9822d:       jne    98236 <__libc_free@@GLIBC_2.2.5+0x806>
    0.00 :   9822f:       jmp    9824c <__libc_free@@GLIBC_2.2.5+0x81c>
    0.00 :   98231:       cmpxchg %esi,(%rbx)
    0.00 :   98234:       je     9824c <__libc_free@@GLIBC_2.2.5+0x81c>
    0.00 :   98236:       lea    (%rbx),%rdi
    0.00 :   98239:       sub    $0x80,%rsp
    0.00 :   98240:       callq  130520 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   98245:       add    $0x80,%rsp
    0.00 :   9824c:       xor    %ebp,%ebp
    0.00 :   9824e:       jmpq   97d42 <__libc_free@@GLIBC_2.2.5+0x312>
    0.00 :   98253:       lea    0x11c9e0(%rip),%rdi        # 1b4c3a <_libc_intl_domainname@@GLIBC_2.2.5+0xfa6>
    0.00 :   9825a:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9825f:       lea    -0x10(%r14),%rdx
    0.00 :   98263:       mov    %r12,%rdi
    0.00 :   98266:       mov    %rcx,(%rsp)
    0.00 :   9826a:       callq  211f0 <*ABS*+0x9ec40@plt>
    0.00 :   9826f:       mov    (%rsp),%rcx
    0.00 :   98273:       jmpq   97d96 <__libc_free@@GLIBC_2.2.5+0x366>
    0.00 :   98278:       lea    0x11c99e(%rip),%rdi        # 1b4c1d <_libc_intl_domainname@@GLIBC_2.2.5+0xf89>
    0.00 :   9827f:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   98284:       mov    0x352bcd(%rip),%rax        # 3eae58 <_rtld_global_ro@GLIBC_PRIVATE>
    0.00 :   9828b:       lea    0x20(%r14),%rsi
    0.00 :   9828f:       mov    0x352ff2(%rip),%r15        # 3eb288 <__fpu_control@@GLIBC_2.2.5+0xe4>
    0.00 :   98296:       cmp    %r12,%rsi
    0.00 :   98299:       mov    0x18(%rax),%rdx
    0.00 :   9829d:       jne    986de <__libc_free@@GLIBC_2.2.5+0xcae>
    0.00 :   982a3:       mov    0x8(%r14),%r13
    0.00 :   982a7:       mov    0x10(%r13),%rdi
    0.00 :   982ab:       lea    -0x10(%rdi),%rax
    0.00 :   982af:       lea    0x0(%r13,%rax,1),%r9
    0.00 :   982b4:       and    $0xf,%r9d
    0.00 :   982b8:       sub    %r9,%rax
    0.00 :   982bb:       add    %r13,%rax
    0.00 :   982be:       cmpq   $0x1,0x8(%rax)
    0.00 :   982c3:       jne    9846e <__libc_free@@GLIBC_2.2.5+0xa3e>
    0.00 :   982c9:       lea    0x20(%r15,%rdx,1),%rcx
    0.00 :   982ce:       mov    %rcx,(%rsp)
    0.00 :   982d2:       lea    -0x1(%rdx),%rcx
    0.00 :   982d6:       mov    %rcx,0x8(%rsp)
    0.00 :   982db:       sub    (%rax),%rax
    0.00 :   982de:       mov    %rax,%r12
    0.00 :   982e1:       mov    0x8(%rax),%rax
    0.00 :   982e5:       mov    %rax,%r11
    0.00 :   982e8:       and    $0xfffffffffffffff8,%r11
    0.00 :   982ec:       add    %r11,%r9
    0.00 :   982ef:       lea    0xf(%r9),%r11
    0.00 :   982f3:       cmp    $0x3e,%r11
    0.00 :   982f7:       ja     984e8 <__libc_free@@GLIBC_2.2.5+0xab8>
    0.00 :   982fd:       add    $0x10,%r9
    0.00 :   98301:       test   $0x1,%al
    0.00 :   98303:       jne    98309 <__libc_free@@GLIBC_2.2.5+0x8d9>
    0.00 :   98305:       add    (%r12),%r9
    0.00 :   98309:       lea    -0x1(%r9),%rax
    0.00 :   9830d:       cmp    $0x3fffffe,%rax
    0.00 :   98313:       ja     98565 <__libc_free@@GLIBC_2.2.5+0xb35>
    0.00 :   98319:       mov    $0x4000000,%eax
    0.00 :   9831e:       sub    %rdi,%rax
    0.00 :   98321:       add    %r9,%rax
    0.00 :   98324:       cmp    (%rsp),%rax
    0.00 :   98328:       jb     986db <__libc_free@@GLIBC_2.2.5+0xcab>
    0.00 :   9832e:       mov    0x10(%r14),%rax
    0.00 :   98332:       sub    %rax,0x888(%rbx)
    0.00 :   98339:       nop
    0.00 :   9833a:       lea    0x4000000(%r14),%rax
    0.00 :   98341:       cmp    %rax,0x3555c8(%rip)        # 3ed910 <__malloc_initialize_hook@GLIBC_2.2.5+0x20>
    0.00 :   98348:       je     98673 <__libc_free@@GLIBC_2.2.5+0xc43>
    0.00 :   9834e:       mov    $0x4000000,%esi
    0.00 :   98353:       mov    %r14,%rdi
    0.00 :   98356:       mov    %r9,0x18(%rsp)
    0.00 :   9835b:       mov    %rdx,0x10(%rsp)
    0.00 :   98360:       callq  11b8b0 <__munmap@@GLIBC_PRIVATE>
    0.00 :   98365:       testb  $0x1,0x8(%r12)
    0.00 :   9836b:       mov    0x10(%rsp),%rdx
    0.00 :   98370:       mov    0x18(%rsp),%r9
    0.00 :   98375:       jne    983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   98377:       sub    (%r12),%r12
    0.00 :   9837b:       mov    0x8(%r12),%rdi
    0.00 :   98380:       mov    %rdi,%rax
    0.00 :   98383:       and    $0xfffffffffffffff8,%rax
    0.00 :   98387:       cmp    (%r12,%rax,1),%rax
    0.00 :   9838b:       jne    98278 <__libc_free@@GLIBC_2.2.5+0x848>
    0.00 :   98391:       mov    0x10(%r12),%rax
    0.00 :   98396:       mov    0x18(%r12),%rsi
    0.00 :   9839b:       cmp    0x18(%rax),%r12
    0.00 :   9839f:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   983a5:       cmp    0x10(%rsi),%r12
    0.00 :   983a9:       jne    98253 <__libc_free@@GLIBC_2.2.5+0x823>
    0.00 :   983af:       cmp    $0x3ff,%rdi
    0.00 :   983b6:       mov    %rsi,0x18(%rax)
    0.00 :   983ba:       mov    %rax,0x10(%rsi)
    0.00 :   983be:       jbe    983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   983c0:       mov    0x20(%r12),%rsi
    0.00 :   983c5:       test   %rsi,%rsi
    0.00 :   983c8:       jne    98798 <__libc_free@@GLIBC_2.2.5+0xd68>
    0.00 :   983ce:       lea    (%r12,%r9,1),%rax
    0.00 :   983d2:       test   %rax,0x8(%rsp)
    0.00 :   983d7:       jne    98609 <__libc_free@@GLIBC_2.2.5+0xbd9>
    0.00 :   983dd:       mov    0x10(%r13),%rsi
    0.00 :   983e1:       add    %r13,%rsi
    0.00 :   983e4:       cmp    %rsi,%rax
    0.00 :   983e7:       je     985bc <__libc_free@@GLIBC_2.2.5+0xb8c>
    0.00 :   983ed:       mov    0x3529fc(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   983f4:       mov    (%rax),%rdx
    0.00 :   983f7:       cmpb   $0x0,(%rdx)
    0.00 :   983fa:       je     98778 <__libc_free@@GLIBC_2.2.5+0xd48>
    0.00 :   98400:       lea    0x11ba49(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98407:       mov    %rax,%rcx
    0.00 :   9840a:       lea    0x12056f(%rip),%rbx        # 1b8980 <_libc_intl_domainname@@GLIBC_2.2.5+0x4cec>
    0.00 :   98411:       sub    $0x8,%rsp
    0.00 :   98415:       mov    $0x277,%r9d
    0.00 :   9841b:       lea    0x11c85f(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   98422:       push   %rbx
    0.00 :   98423:       push   %rax
    0.00 :   98424:       lea    0x120bf5(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   9842b:       push   %rax
    0.00 :   9842c:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   98431:       nopl   0x0(%rax)
    0.00 :   98438:       mov    0x60(%rbx),%rax
    0.00 :   9843c:       mov    0x8(%rax),%rax
    0.00 :   98440:       and    $0xfffffffffffffff8,%rax
    0.00 :   98444:       cmp    0x352e35(%rip),%rax        # 3eb280 <__fpu_control@@GLIBC_2.2.5+0xdc>
    0.00 :   9844b:       jb     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98451:       mov    0x352e30(%rip),%rdi        # 3eb288 <__fpu_control@@GLIBC_2.2.5+0xe4>
    0.00 :   98458:       callq  913e0 <_IO_str_seekoff@@GLIBC_2.2.5+0xef0>
    0.00 :   9845d:       jmpq   97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98462:       lea    0x12041f(%rip),%rdi        # 1b8888 <_libc_intl_domainname@@GLIBC_2.2.5+0x4bf4>
    0.00 :   98469:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9846e:       mov    0x35297b(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   98475:       lea    0x11b77d(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   9847c:       lea    0x12042d(%rip),%rbx        # 1b88b0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4c1c>
    0.00 :   98483:       mov    $0x264,%r9d
    0.00 :   98489:       lea    0x11c7f1(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   98490:       mov    (%rax),%rdx
    0.00 :   98493:       lea    0x11b9b6(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9849a:       cmpb   $0x0,(%rdx)
    0.00 :   9849d:       cmovne %rax,%rcx
    0.00 :   984a1:       sub    $0x8,%rsp
    0.00 :   984a5:       push   %rbx
    0.00 :   984a6:       push   %rax
    0.00 :   984a7:       lea    0x120b72(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   984ae:       push   %rax
    0.00 :   984af:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   984b4:       cmp    0x28(%rdx),%r13
    0.00 :   984b8:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   984be:       mov    0x28(%r13),%rsi
    0.00 :   984c2:       cmp    0x20(%rsi),%r13
    0.00 :   984c6:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   984cc:       cmpq   $0x0,0x20(%rax)
    0.00 :   984d1:       je     9864d <__libc_free@@GLIBC_2.2.5+0xc1d>
    0.00 :   984d7:       mov    %rsi,0x28(%rdx)
    0.00 :   984db:       mov    0x28(%r13),%rax
    0.00 :   984df:       mov    %rdx,0x20(%rax)
    0.00 :   984e3:       jmpq   97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   984e8:       mov    0x352901(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   984ef:       mov    (%rax),%rdx
    0.00 :   984f2:       cmpb   $0x0,(%rdx)
    0.00 :   984f5:       je     985a9 <__libc_free@@GLIBC_2.2.5+0xb79>
    0.00 :   984fb:       lea    0x11b94e(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98502:       mov    %rax,%rcx
    0.00 :   98505:       lea    0x1203d4(%rip),%rbx        # 1b88e0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4c4c>
    0.00 :   9850c:       sub    $0x8,%rsp
    0.00 :   98510:       mov    $0x267,%r9d
    0.00 :   98516:       lea    0x11c764(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   9851d:       push   %rbx
    0.00 :   9851e:       push   %rax
    0.00 :   9851f:       lea    0x120afa(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   98526:       push   %rax
    0.00 :   98527:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   9852c:       callq  134b10 <__stack_chk_fail@@GLIBC_2.4>
    0.00 :   98531:       cmp    0x28(%rax),%r15
    0.00 :   98535:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   9853b:       mov    0x28(%r15),%rsi
    0.00 :   9853f:       cmp    0x20(%rsi),%r15
    0.00 :   98543:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   98549:       cmpq   $0x0,0x20(%rdx)
    0.00 :   9854e:       je     986a2 <__libc_free@@GLIBC_2.2.5+0xc72>
    0.00 :   98554:       mov    %rsi,0x28(%rax)
    0.00 :   98558:       mov    0x28(%r15),%rdx
    0.00 :   9855c:       mov    %rax,0x20(%rdx)
    0.00 :   98560:       jmpq   97e64 <__libc_free@@GLIBC_2.2.5+0x434>
    0.00 :   98565:       mov    0x352884(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   9856c:       mov    (%rax),%rdx
    0.00 :   9856f:       cmpb   $0x0,(%rdx)
    0.00 :   98572:       je     9868f <__libc_free@@GLIBC_2.2.5+0xc5f>
    0.00 :   98578:       lea    0x11b8d1(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9857f:       mov    %rax,%rcx
    0.00 :   98582:       lea    0x120387(%rip),%rbx        # 1b8910 <_libc_intl_domainname@@GLIBC_2.2.5+0x4c7c>
    0.00 :   98589:       sub    $0x8,%rsp
    0.00 :   9858d:       mov    $0x26a,%r9d
    0.00 :   98593:       lea    0x11c6e7(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   9859a:       push   %rbx
    0.00 :   9859b:       push   %rax
    0.00 :   9859c:       lea    0x120a7d(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   985a3:       push   %rax
    0.00 :   985a4:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   985a9:       lea    0x11b649(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   985b0:       lea    0x11b899(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   985b7:       jmpq   98505 <__libc_free@@GLIBC_2.2.5+0xad5>
    0.00 :   985bc:       lea    0x20(%r13),%rax
    0.00 :   985c0:       or     $0x1,%r9
    0.00 :   985c4:       mov    %r12,0x60(%rbx)
    0.00 :   985c8:       mov    %r9,0x8(%r12)
    0.00 :   985cd:       cmp    %rax,%r12
    0.00 :   985d0:       jne    98818 <__libc_free@@GLIBC_2.2.5+0xde8>
    0.00 :   985d6:       mov    0x8(%r13),%r11
    0.00 :   985da:       mov    %r13,%r14
    0.00 :   985dd:       mov    %r12,%rsi
    0.00 :   985e0:       mov    0x10(%r11),%rdi
    0.00 :   985e4:       lea    -0x10(%rdi),%rax
    0.00 :   985e8:       lea    (%r11,%rax,1),%r9
    0.00 :   985ec:       and    $0xf,%r9d
    0.00 :   985f0:       sub    %r9,%rax
    0.00 :   985f3:       add    %r11,%rax
    0.00 :   985f6:       cmpq   $0x1,0x8(%rax)
    0.00 :   985fb:       jne    9846e <__libc_free@@GLIBC_2.2.5+0xa3e>
    0.00 :   98601:       mov    %r11,%r13
    0.00 :   98604:       jmpq   982db <__libc_free@@GLIBC_2.2.5+0x8ab>
    0.00 :   98609:       mov    0x3527e0(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   98610:       mov    (%rax),%rdx
    0.00 :   98613:       cmpb   $0x0,(%rdx)
    0.00 :   98616:       je     986c8 <__libc_free@@GLIBC_2.2.5+0xc98>
    0.00 :   9861c:       lea    0x11b82d(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98623:       mov    %rax,%rcx
    0.00 :   98626:       lea    0x120313(%rip),%rbx        # 1b8940 <_libc_intl_domainname@@GLIBC_2.2.5+0x4cac>
    0.00 :   9862d:       sub    $0x8,%rsp
    0.00 :   98631:       mov    $0x276,%r9d
    0.00 :   98637:       lea    0x11c643(%rip),%r8        # 1b4c81 <_libc_intl_domainname@@GLIBC_2.2.5+0xfed>
    0.00 :   9863e:       push   %rbx
    0.00 :   9863f:       push   %rax
    0.00 :   98640:       lea    0x1209d9(%rip),%rax        # 1b9020 <_libc_intl_domainname@@GLIBC_2.2.5+0x538c>
    0.00 :   98647:       push   %rax
    0.00 :   98648:       jmpq   97c57 <__libc_free@@GLIBC_2.2.5+0x227>
    0.00 :   9864d:       cmp    %rdx,%r13
    0.00 :   98650:       je     9878b <__libc_free@@GLIBC_2.2.5+0xd5b>
    0.00 :   98656:       mov    %rdx,0x20(%rax)
    0.00 :   9865a:       mov    0x20(%r13),%rdx
    0.00 :   9865e:       mov    %rsi,0x28(%rax)
    0.00 :   98662:       mov    %rax,0x28(%rdx)
    0.00 :   98666:       mov    0x28(%r13),%rdx
    0.00 :   9866a:       mov    %rax,0x20(%rdx)
    0.00 :   9866e:       jmpq   97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   98673:       movq   $0x0,0x355292(%rip)        # 3ed910 <__malloc_initialize_hook@GLIBC_2.2.5+0x20>
    0.00 :   9867e:       jmpq   9834e <__libc_free@@GLIBC_2.2.5+0x91e>
    0.00 :   98683:       lea    0x11fd0e(%rip),%rdi        # 1b8398 <_libc_intl_domainname@@GLIBC_2.2.5+0x4704>
    0.00 :   9868a:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9868f:       lea    0x11b563(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   98696:       lea    0x11b7b3(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9869d:       jmpq   98582 <__libc_free@@GLIBC_2.2.5+0xb52>
    0.00 :   986a2:       cmp    %rax,%r15
    0.00 :   986a5:       je     987fe <__libc_free@@GLIBC_2.2.5+0xdce>
    0.00 :   986ab:       mov    %rax,0x20(%rdx)
    0.00 :   986af:       mov    0x20(%r15),%rax
    0.00 :   986b3:       mov    %rsi,0x28(%rdx)
    0.00 :   986b7:       mov    %rdx,0x28(%rax)
    0.00 :   986bb:       mov    0x28(%r15),%rax
    0.00 :   986bf:       mov    %rdx,0x20(%rax)
    0.00 :   986c3:       jmpq   97e64 <__libc_free@@GLIBC_2.2.5+0x434>
    0.00 :   986c8:       lea    0x11b52a(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   986cf:       lea    0x11b77a(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   986d6:       jmpq   98626 <__libc_free@@GLIBC_2.2.5+0xbf6>
    0.00 :   986db:       mov    %rsi,%r12
    0.00 :   986de:       mov    0x8(%r12),%rax
    0.00 :   986e3:       and    $0xfffffffffffffff8,%rax
    0.00 :   986e7:       cmp    %rax,0x352b92(%rip)        # 3eb280 <__fpu_control@@GLIBC_2.2.5+0xdc>
    0.00 :   986ee:       mov    %rax,(%rsp)
    0.00 :   986f2:       ja     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   986f8:       sub    $0x21,%rax
    0.00 :   986fc:       mov    %rax,%r13
    0.00 :   986ff:       js     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98705:       cmp    %rax,%r15
    0.00 :   98708:       jae    97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   9870e:       sub    %r15,%r13
    0.00 :   98711:       neg    %rdx
    0.00 :   98714:       and    %rdx,%r13
    0.00 :   98717:       je     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   9871d:       mov    0x10(%r14),%r15
    0.00 :   98721:       sub    %r13,%r15
    0.00 :   98724:       cmp    $0x1f,%r15
    0.00 :   98728:       jle    97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   9872e:       cmpl   $0x0,0x352b2b(%rip)        # 3eb260 <__fpu_control@@GLIBC_2.2.5+0xbc>
    0.00 :   98735:       js     98849 <__libc_free@@GLIBC_2.2.5+0xe19>
    0.00 :   9873b:       setne  %al
    0.00 :   9873e:       test   %al,%al
    0.00 :   98740:       lea    (%r14,%r15,1),%rdi
    0.00 :   98744:       jne    98820 <__libc_free@@GLIBC_2.2.5+0xdf0>
    0.00 :   9874a:       mov    $0x4,%edx
    0.00 :   9874f:       mov    %r13,%rsi
    0.00 :   98752:       callq  11b9b0 <__madvise@@GLIBC_PRIVATE>
    0.00 :   98757:       mov    %r15,0x10(%r14)
    0.00 :   9875b:       nop
    0.00 :   9875c:       mov    (%rsp),%rax
    0.00 :   98760:       sub    %r13,0x888(%rbx)
    0.00 :   98767:       sub    %r13,%rax
    0.00 :   9876a:       or     $0x1,%rax
    0.00 :   9876e:       mov    %rax,0x8(%r12)
    0.00 :   98773:       jmpq   97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98778:       lea    0x11b47a(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   9877f:       lea    0x11b6ca(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   98786:       jmpq   9840a <__libc_free@@GLIBC_2.2.5+0x9da>
    0.00 :   9878b:       mov    %rax,0x28(%rax)
    0.00 :   9878f:       mov    %rax,0x20(%rax)
    0.00 :   98793:       jmpq   97e00 <__libc_free@@GLIBC_2.2.5+0x3d0>
    0.00 :   98798:       cmp    0x28(%rsi),%r12
    0.00 :   9879c:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   987a2:       mov    0x28(%r12),%rdi
    0.00 :   987a7:       cmp    0x20(%rdi),%r12
    0.00 :   987ab:       jne    98683 <__libc_free@@GLIBC_2.2.5+0xc53>
    0.00 :   987b1:       cmpq   $0x0,0x20(%rax)
    0.00 :   987b6:       je     987ca <__libc_free@@GLIBC_2.2.5+0xd9a>
    0.00 :   987b8:       mov    %rdi,0x28(%rsi)
    0.00 :   987bc:       mov    0x28(%r12),%rax
    0.00 :   987c1:       mov    %rsi,0x20(%rax)
    0.00 :   987c5:       jmpq   983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   987ca:       cmp    %rsi,%r12
    0.00 :   987cd:       je     9880b <__libc_free@@GLIBC_2.2.5+0xddb>
    0.00 :   987cf:       mov    %rsi,0x20(%rax)
    0.00 :   987d3:       mov    0x20(%r12),%rsi
    0.00 :   987d8:       mov    %rdi,0x28(%rax)
    0.00 :   987dc:       mov    %rax,0x28(%rsi)
    0.00 :   987e0:       mov    0x28(%r12),%rsi
    0.00 :   987e5:       mov    %rax,0x20(%rsi)
    0.00 :   987e9:       jmpq   983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   987ee:       and    $0xfffffffffffffff8,%rsi
    0.00 :   987f2:       mov    0x35513f(%rip),%rax        # 3ed938 <__malloc_initialize_hook@GLIBC_2.2.5+0x48>
    0.00 :   987f9:       jmpq   97c94 <__libc_free@@GLIBC_2.2.5+0x264>
    0.00 :   987fe:       mov    %rdx,0x28(%rdx)
    0.00 :   98802:       mov    %rdx,0x20(%rdx)
    0.00 :   98806:       jmpq   97e64 <__libc_free@@GLIBC_2.2.5+0x434>
    0.00 :   9880b:       mov    %rax,0x28(%rax)
    0.00 :   9880f:       mov    %rax,0x20(%rax)
    0.00 :   98813:       jmpq   983ce <__libc_free@@GLIBC_2.2.5+0x99e>
    0.00 :   98818:       mov    %r13,%r14
    0.00 :   9881b:       jmpq   986de <__libc_free@@GLIBC_2.2.5+0xcae>
    0.00 :   98820:       xor    %r9d,%r9d
    0.00 :   98823:       or     $0xffffffff,%r8d
    0.00 :   98827:       xor    %edx,%edx
    0.00 :   98829:       mov    $0x32,%ecx
    0.00 :   9882e:       mov    %r13,%rsi
    0.00 :   98831:       callq  11b7d0 <__mmap@@GLIBC_PRIVATE>
    0.00 :   98836:       add    $0x1,%rax
    0.00 :   9883a:       je     97ebf <__libc_free@@GLIBC_2.2.5+0x48f>
    0.00 :   98840:       mov    %r15,0x18(%r14)
    0.00 :   98844:       jmpq   98757 <__libc_free@@GLIBC_2.2.5+0xd27>
    0.00 :   98849:       mov    0x3525c8(%rip),%rax        # 3eae18 <__libc_enable_secure@GLIBC_PRIVATE>
    0.00 :   98850:       mov    (%rax),%ecx
    0.00 :   98852:       test   %ecx,%ecx
    0.00 :   98854:       mov    %ecx,0x352a06(%rip)        # 3eb260 <__fpu_control@@GLIBC_2.2.5+0xbc>
    0.00 :   9885a:       mov    %ecx,0x10(%rsp)
    0.00 :   9885e:       jne    98877 <__libc_free@@GLIBC_2.2.5+0xe47>
    0.00 :   98860:       lea    0x120151(%rip),%rdi        # 1b89b8 <_libc_intl_domainname@@GLIBC_2.2.5+0x4d24>
    0.00 :   98867:       xor    %eax,%eax
    0.00 :   98869:       mov    $0x80000,%esi
    0.00 :   9886e:       callq  10fe40 <__open_nocancel@@GLIBC_PRIVATE>
    0.00 :   98873:       test   %eax,%eax
    0.00 :   98875:       jns    98886 <__libc_free@@GLIBC_2.2.5+0xe56>
    0.00 :   98877:       cmpl   $0x0,0x3529e2(%rip)        # 3eb260 <__fpu_control@@GLIBC_2.2.5+0xbc>
    0.00 :   9887e:       setne  %al
    0.00 :   98881:       jmpq   9873e <__libc_free@@GLIBC_2.2.5+0xd0e>
    0.00 :   98886:       lea    0x27(%rsp),%rsi
    0.00 :   9888b:       mov    $0x1,%edx
    0.00 :   98890:       mov    %eax,%edi
    0.00 :   98892:       mov    %eax,0x8(%rsp)
    0.00 :   98896:       callq  1101e0 <__read_nocancel@@GLIBC_PRIVATE>
    0.00 :   9889b:       test   %rax,%rax
    0.00 :   9889e:       mov    0x8(%rsp),%r8d
    0.00 :   988a3:       mov    0x10(%rsp),%ecx
    0.00 :   988a7:       jle    988b3 <__libc_free@@GLIBC_2.2.5+0xe83>
    0.00 :   988a9:       xor    %ecx,%ecx
    0.00 :   988ab:       cmpb   $0x32,0x27(%rsp)
    0.00 :   988b0:       sete   %cl
    0.00 :   988b3:       mov    %r8d,%edi
    0.00 :   988b6:       mov    %ecx,0x3529a4(%rip)        # 3eb260 <__fpu_control@@GLIBC_2.2.5+0xbc>
    0.00 :   988bc:       callq  110a10 <__close_nocancel@@GLIBC_PRIVATE>
    0.00 :   988c1:       jmp    98877 <__libc_free@@GLIBC_2.2.5+0xe47>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (15 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000097140 <__libc_malloc@@GLIBC_2.2.5>:
    6.90 :   97140:       push   %rbp
    3.34 :   97141:       push   %rbx
    0.00 :   97142:       sub    $0x18,%rsp
    0.00 :   97146:       mov    0x353d9b(%rip),%rax        # 3eaee8 <__malloc_hook@@GLIBC_2.2.5-0xd48>
    8.34 :   9714d:       mov    (%rax),%rax
    7.74 :   97150:       test   %rax,%rax
    0.00 :   97153:       jne    97350 <__libc_malloc@@GLIBC_2.2.5+0x210>
    0.00 :   97159:       lea    0x17(%rdi),%rax
    0.00 :   9715d:       cmp    $0x1f,%rax
    0.00 :   97161:       ja     97270 <__libc_malloc@@GLIBC_2.2.5+0x130>
    0.00 :   97167:       xor    %edx,%edx
    0.00 :   97169:       mov    $0x20,%eax
    0.00 :   9716e:       cmp    %rdi,%rax
    0.00 :   97171:       jb     97360 <__libc_malloc@@GLIBC_2.2.5+0x220>
    0.00 :   97177:       test   %dl,%dl
    0.00 :   97179:       jne    97360 <__libc_malloc@@GLIBC_2.2.5+0x220>
    0.00 :   9717f:       mov    0x353bf2(%rip),%rbp        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   97186:       sub    $0x11,%rax
    0.00 :   9718a:       mov    %rdi,%rbx
    0.00 :   9718d:       shr    $0x4,%rax
    0.00 :   97191:       mov    %fs:0x0(%rbp),%rcx
    0.00 :   97196:       test   %rcx,%rcx
    0.00 :   97199:       je     97280 <__libc_malloc@@GLIBC_2.2.5+0x140>
    0.00 :   9719f:       cmp    0x35412a(%rip),%rax        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   971a6:       jb     972c0 <__libc_malloc@@GLIBC_2.2.5+0x180>
    0.00 :   971ac:       lea    0x359825(%rip),%rax        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   971b3:       mov    (%rax),%eax
    3.24 :   971b5:       test   %eax,%eax
    0.00 :   971b7:       jne    97378 <__libc_malloc@@GLIBC_2.2.5+0x238>
    0.00 :   971bd:       lea    0x354a7c(%rip),%rdi        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   971c4:       mov    %rbx,%rsi
    0.00 :   971c7:       callq  94450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>
    0.00 :   971cc:       test   %rax,%rax
    0.00 :   971cf:       mov    %rax,%rdx
    0.00 :   971d2:       je     97340 <__libc_malloc@@GLIBC_2.2.5+0x200>
    0.00 :   971d8:       mov    -0x8(%rax),%rax
    0.00 :   971dc:       test   $0x2,%al
    0.00 :   971de:       jne    972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   971e4:       test   $0x4,%al
    0.00 :   971e6:       je     972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   971ec:       lea    -0x10(%rdx),%rax
    0.00 :   971f0:       lea    0x354a49(%rip),%rcx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   971f7:       and    $0xfffffffffc000000,%rax
    0.00 :   971fd:       cmp    %rcx,(%rax)
    0.00 :   97200:       je     972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   97206:       mov    0x353be3(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   9720d:       lea    0x11c9e5(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   97214:       lea    0x121aa5(%rip),%rbx        # 1b8cc0 <_libc_intl_domainname@@GLIBC_2.2.5+0x502c>
    0.00 :   9721b:       mov    $0xbfd,%r9d
    0.00 :   97221:       mov    (%rax),%rdx
    0.00 :   97224:       lea    0x11cc25(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9722b:       cmpb   $0x0,(%rdx)
    0.00 :   9722e:       cmovne %rax,%rcx
    0.00 :   97232:       sub    $0x8,%rsp
    0.00 :   97236:       push   %rbx
    0.00 :   97237:       push   %rax
    0.00 :   97238:       lea    0x121da1(%rip),%rax        # 1b8fe0 <_libc_intl_domainname@@GLIBC_2.2.5+0x534c>
    0.00 :   9723f:       push   %rax
    0.00 :   97240:       lea    0x11da31(%rip),%r8        # 1b4c78 <_libc_intl_domainname@@GLIBC_2.2.5+0xfe4>
    0.00 :   97247:       lea    0x121482(%rip),%rsi        # 1b86d0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4a3c>
    0.00 :   9724e:       xor    %edi,%edi
    0.00 :   97250:       xor    %eax,%eax
    0.00 :   97252:       callq  7deb0 <psiginfo@@GLIBC_2.10+0x1780>
    0.00 :   97257:       mov    0x353b52(%rip),%rax        # 3eadb0 <stderr@@GLIBC_2.2.5-0x1a90>
    0.00 :   9725e:       add    $0x20,%rsp
    0.00 :   97262:       mov    (%rax),%rdi
    0.00 :   97265:       callq  7e8c0 <_IO_fflush@@GLIBC_2.2.5>
    0.00 :   9726a:       callq  407e0 <abort@@GLIBC_2.2.5>
    0.00 :   9726f:       nop
    0.00 :   97270:       and    $0xfffffffffffffff0,%rax
    0.00 :   97274:       cmp    $0xffffffffffffffbf,%rax
    0.00 :   97278:       seta   %dl
    0.00 :   9727b:       jmpq   9716e <__libc_malloc@@GLIBC_2.2.5+0x2e>
    0.00 :   97280:       mov    0x353af9(%rip),%rdx        # 3ead80 <h_errlist@@GLIBC_2.2.5+0xce0>
    0.00 :   97287:       cmpb   $0x0,%fs:(%rdx)
    0.00 :   9728b:       jne    971ac <__libc_malloc@@GLIBC_2.2.5+0x6c>
    0.00 :   97291:       mov    %rax,0x8(%rsp)
    0.00 :   97296:       callq  96530 <_IO_str_seekoff@@GLIBC_2.2.5+0x6040>
    0.00 :   9729b:       mov    0x8(%rsp),%rax
    0.00 :   972a0:       cmp    %rax,0x354029(%rip)        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   972a7:       jbe    971ac <__libc_malloc@@GLIBC_2.2.5+0x6c>
    0.00 :   972ad:       mov    %fs:0x0(%rbp),%rcx
    0.00 :   972b2:       test   %rcx,%rcx
    0.00 :   972b5:       je     971ac <__libc_malloc@@GLIBC_2.2.5+0x6c>
    0.00 :   972bb:       nopl   0x0(%rax,%rax,1)
    0.00 :   972c0:       lea    (%rcx,%rax,8),%rsi
    0.00 :   972c4:       mov    0x40(%rsi),%rdx
    2.75 :   972c8:       test   %rdx,%rdx
    0.00 :   972cb:       je     971ac <__libc_malloc@@GLIBC_2.2.5+0x6c>
    0.00 :   972d1:       cmp    $0x3f,%rax
    0.00 :   972d5:       ja     972f8 <__libc_malloc@@GLIBC_2.2.5+0x1b8>
    0.00 :   972d7:       mov    (%rdx),%rdi
   16.69 :   972da:       mov    %rdi,0x40(%rsi)
    0.00 :   972de:       subb   $0x1,(%rcx,%rax,1)
    0.00 :   972e2:       movq   $0x0,0x8(%rdx)
    0.00 :   972ea:       add    $0x18,%rsp
    0.00 :   972ee:       mov    %rdx,%rax
    0.00 :   972f1:       pop    %rbx
    0.00 :   972f2:       pop    %rbp
    0.00 :   972f3:       retq
    0.00 :   972f4:       nopl   0x0(%rax)
    0.00 :   972f8:       mov    0x353af1(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   972ff:       lea    0x11c8f3(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   97306:       lea    0x11da28(%rip),%rbx        # 1b4d35 <_libc_intl_domainname@@GLIBC_2.2.5+0x10a1>
    0.00 :   9730d:       mov    $0xb86,%r9d
    0.00 :   97313:       mov    (%rax),%rdx
    0.00 :   97316:       lea    0x11cb33(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   9731d:       cmpb   $0x0,(%rdx)
    0.00 :   97320:       cmovne %rax,%rcx
    0.00 :   97324:       sub    $0x8,%rsp
    0.00 :   97328:       push   %rbx
    0.00 :   97329:       push   %rax
    0.00 :   9732a:       lea    0x121d1f(%rip),%rax        # 1b9050 <_libc_intl_domainname@@GLIBC_2.2.5+0x53bc>
    0.00 :   97331:       push   %rax
    0.00 :   97332:       jmpq   97240 <__libc_malloc@@GLIBC_2.2.5+0x100>
    0.00 :   97337:       nopw   0x0(%rax,%rax,1)
    0.00 :   97340:       add    $0x18,%rsp
    0.00 :   97344:       xor    %edx,%edx
    0.00 :   97346:       mov    %rdx,%rax
    0.00 :   97349:       pop    %rbx
    0.00 :   9734a:       pop    %rbp
    0.00 :   9734b:       retq
    0.00 :   9734c:       nopl   0x0(%rax)
    0.00 :   97350:       mov    0x28(%rsp),%rsi
    0.00 :   97355:       add    $0x18,%rsp
    0.00 :   97359:       pop    %rbx
    0.00 :   9735a:       pop    %rbp
    0.00 :   9735b:       jmpq   *%rax
    0.00 :   9735d:       nopl   (%rax)
    0.00 :   97360:       mov    0x353b01(%rip),%rax        # 3eae68 <h_errlist@@GLIBC_2.2.5+0xdc8>
    0.00 :   97367:       xor    %edx,%edx
    0.00 :   97369:       movl   $0xc,%fs:(%rax)
    0.00 :   97370:       jmpq   972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   97375:       nopl   (%rax)
    0.00 :   97378:       mov    0x3539f1(%rip),%rax        # 3ead70 <h_errlist@@GLIBC_2.2.5+0xcd0>
    0.00 :   9737f:       mov    %fs:(%rax),%rbp
    0.00 :   97383:       test   %rbp,%rbp
    0.00 :   97386:       je     97480 <__libc_malloc@@GLIBC_2.2.5+0x340>
    0.00 :   9738c:       mov    $0x1,%esi
    0.00 :   97391:       xor    %eax,%eax
    0.00 :   97393:       cmpl   $0x0,0x35963e(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   9739a:       je     973a5 <__libc_malloc@@GLIBC_2.2.5+0x265>
    0.00 :   9739c:       lock cmpxchg %esi,0x0(%rbp)
   11.03 :   973a1:       jne    973ab <__libc_malloc@@GLIBC_2.2.5+0x26b>
    0.00 :   973a3:       jmp    973c2 <__libc_malloc@@GLIBC_2.2.5+0x282>
    0.00 :   973a5:       cmpxchg %esi,0x0(%rbp)
    0.00 :   973a9:       je     973c2 <__libc_malloc@@GLIBC_2.2.5+0x282>
    0.00 :   973ab:       lea    0x0(%rbp),%rdi
    0.00 :   973af:       sub    $0x80,%rsp
    0.00 :   973b6:       callq  130520 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   973bb:       add    $0x80,%rsp
    0.00 :   973c2:       mov    %rbx,%rsi
    0.00 :   973c5:       mov    %rbp,%rdi
    0.00 :   973c8:       callq  94450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>
    0.00 :   973cd:       test   %rax,%rax
    0.00 :   973d0:       mov    %rax,%rdx
    0.00 :   973d3:       je     974c0 <__libc_malloc@@GLIBC_2.2.5+0x380>
    0.00 :   973d9:       cmpl   $0x0,0x3595f8(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   973e0:       je     973ea <__libc_malloc@@GLIBC_2.2.5+0x2aa>
    0.00 :   973e2:       lock decl 0x0(%rbp)
   39.97 :   973e6:       jne    973ef <__libc_malloc@@GLIBC_2.2.5+0x2af>
    0.00 :   973e8:       jmp    97406 <__libc_malloc@@GLIBC_2.2.5+0x2c6>
    0.00 :   973ea:       decl   0x0(%rbp)
    0.00 :   973ed:       je     97406 <__libc_malloc@@GLIBC_2.2.5+0x2c6>
    0.00 :   973ef:       lea    0x0(%rbp),%rdi
    0.00 :   973f3:       sub    $0x80,%rsp
    0.00 :   973fa:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   973ff:       add    $0x80,%rsp
    0.00 :   97406:       test   %rdx,%rdx
    0.00 :   97409:       je     97340 <__libc_malloc@@GLIBC_2.2.5+0x200>
    0.00 :   9740f:       mov    -0x8(%rdx),%rax
    0.00 :   97413:       test   $0x2,%al
    0.00 :   97415:       jne    972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   9741b:       test   $0x4,%al
    0.00 :   9741d:       lea    0x35481c(%rip),%rcx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   97424:       je     97433 <__libc_malloc@@GLIBC_2.2.5+0x2f3>
    0.00 :   97426:       lea    -0x10(%rdx),%rax
    0.00 :   9742a:       and    $0xfffffffffc000000,%rax
    0.00 :   97430:       mov    (%rax),%rcx
    0.00 :   97433:       cmp    %rbp,%rcx
    0.00 :   97436:       je     972ea <__libc_malloc@@GLIBC_2.2.5+0x1aa>
    0.00 :   9743c:       mov    0x3539ad(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   97443:       lea    0x11c7af(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   9744a:       lea    0x1218d7(%rip),%rsi        # 1b8d28 <_libc_intl_domainname@@GLIBC_2.2.5+0x5094>
    0.00 :   97451:       mov    $0xc11,%r9d
    0.00 :   97457:       mov    (%rax),%rdx
    0.00 :   9745a:       lea    0x11c9ef(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   97461:       cmpb   $0x0,(%rdx)
    0.00 :   97464:       cmovne %rax,%rcx
    0.00 :   97468:       sub    $0x8,%rsp
    0.00 :   9746c:       push   %rsi
    0.00 :   9746d:       push   %rax
    0.00 :   9746e:       lea    0x121b6b(%rip),%rax        # 1b8fe0 <_libc_intl_domainname@@GLIBC_2.2.5+0x534c>
    0.00 :   97475:       push   %rax
    0.00 :   97476:       jmpq   97240 <__libc_malloc@@GLIBC_2.2.5+0x100>
    0.00 :   9747b:       nopl   0x0(%rax,%rax,1)
    0.00 :   97480:       callq  91e70 <_IO_str_seekoff@@GLIBC_2.2.5+0x1980>
    0.00 :   97485:       test   %rax,%rax
    0.00 :   97488:       mov    %rax,%rbp
    0.00 :   9748b:       jne    973c2 <__libc_malloc@@GLIBC_2.2.5+0x282>
    0.00 :   97491:       xor    %esi,%esi
    0.00 :   97493:       mov    %rbx,%rdi
    0.00 :   97496:       callq  917b0 <_IO_str_seekoff@@GLIBC_2.2.5+0x12c0>
    0.00 :   9749b:       mov    %rbx,%rsi
    0.00 :   9749e:       mov    %rax,%rdi
    0.00 :   974a1:       mov    %rax,%rbp
    0.00 :   974a4:       callq  94450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>
    0.00 :   974a9:       test   %rax,%rax
    0.00 :   974ac:       mov    %rax,%rdx
    0.00 :   974af:       jne    974dd <__libc_malloc@@GLIBC_2.2.5+0x39d>
    0.00 :   974b1:       test   %rbp,%rbp
    0.00 :   974b4:       je     974dd <__libc_malloc@@GLIBC_2.2.5+0x39d>
    0.00 :   974b6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   974c0:       nop
    0.00 :   974c1:       mov    %rbp,%rdi
    0.00 :   974c4:       mov    %rbx,%rsi
    0.00 :   974c7:       callq  92090 <_IO_str_seekoff@@GLIBC_2.2.5+0x1ba0>
    0.00 :   974cc:       mov    %rbx,%rsi
    0.00 :   974cf:       mov    %rax,%rdi
    0.00 :   974d2:       mov    %rax,%rbp
    0.00 :   974d5:       callq  94450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>
    0.00 :   974da:       mov    %rax,%rdx
    0.00 :   974dd:       test   %rbp,%rbp
    0.00 :   974e0:       je     97406 <__libc_malloc@@GLIBC_2.2.5+0x2c6>
    0.00 :   974e6:       jmpq   973d9 <__libc_malloc@@GLIBC_2.2.5+0x299>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (13 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000614020 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)>:
         :            _ZN11onnxruntime18SequentialExecutor7ExecuteERKNS_12SessionStateERKSt6vectorIiSaIiEERKS4_I8OrtValueSaIS9_EES8_RSB_RKSt13unordered_mapImSt8functionIFNS_6common6StatusERKNS_11TensorShapeERK13OrtMemoryInfoRS9_RbEESt4hashImESt8equal_toImESaISt4pairIKmSS_EEERKNS_7logging6LoggerE():
    0.00 :   614020:       push   %r15
    0.00 :   614022:       push   %r14
    0.00 :   614024:       push   %r13
    0.00 :   614026:       push   %r12
    0.00 :   614028:       push   %rbp
    0.00 :   614029:       mov    %rcx,%rbp
    0.00 :   61402c:       push   %rbx
    0.00 :   61402d:       mov    %r9,%rbx
    0.00 :   614030:       sub    $0x7c8,%rsp
    0.00 :   614037:       mov    0x800(%rsp),%rax
    0.00 :   61403f:       mov    %rdi,0x70(%rsp)
    0.00 :   614044:       mov    %rsi,0x30(%rsp)
    0.00 :   614049:       mov    0x218(%rdx),%rdi
    0.00 :   614050:       mov    %rax,0x88(%rsp)
    0.00 :   614058:       mov    0x810(%rsp),%rax
    0.00 :   614060:       mov    %rdx,0x28(%rsp)
    0.00 :   614065:       mov    0x808(%rsp),%r9
    0.00 :   61406d:       mov    %r8,0x90(%rsp)
    0.00 :   614075:       mov    %rax,0x40(%rsp)
    0.00 :   61407a:       mov    %fs:0x28,%rax
    0.00 :   614083:       mov    %rax,0x7b8(%rsp)
    0.00 :   61408b:       xor    %eax,%eax
    0.00 :   61408d:       movzbl 0x10(%rdi),%eax
    0.00 :   614091:       movq   $0x0,0xe0(%rsp)
    0.00 :   61409d:       movq   $0x0,0xe8(%rsp)
    0.00 :   6140a9:       mov    %al,0xdf(%rsp)
    0.00 :   6140b0:       movq   $0x0,0xf0(%rsp)
    0.00 :   6140bc:       test   %al,%al
    0.00 :   6140be:       jne    615e20 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e00>
    0.00 :   6140c4:       lea    0x420(%rsp),%rax
    0.00 :   6140cc:       sub    $0x8,%rsp
    0.00 :   6140d0:       mov    %rbp,%rsi
    0.00 :   6140d3:       mov    %rbx,%rcx
    0.00 :   6140d6:       mov    %rax,0x20(%rsp)
    0.00 :   6140db:       mov    0x30(%rsp),%r14
    0.00 :   6140e0:       mov    %rax,%rdi
    0.00 :   6140e3:       push   %r14
    0.00 :   6140e5:       mov    0x98(%rsp),%r8
    0.00 :   6140ed:       mov    0xa0(%rsp),%rdx
    0.00 :   6140f5:       callq  5b09e0 <onnxruntime::ExecutionFrame::ExecutionFrame(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::SessionState const&)>
    0.00 :   6140fa:       pop    %rsi
    0.00 :   6140fb:       mov    %rbx,%rsi
    0.00 :   6140fe:       pop    %rdi
    0.00 :   6140ff:       mov    %r14,%rdi
    0.00 :   614102:       callq  5e4cf0 <onnxruntime::SessionState::GetToBeExecutedNodes(std::vector<int, std::allocator<int> > const&) const>
    0.00 :   614107:       mov    0x30(%rsp),%rcx
    0.00 :   61410c:       mov    0x40(%rsp),%rbx
    0.00 :   614111:       test   %rax,%rax
    0.00 :   614114:       mov    %rax,0x80(%rsp)
    0.00 :   61411c:       setne  %al
    0.00 :   61411f:       and    0x10(%rcx),%al
    0.00 :   614122:       cmpl   $0x1,0x28(%rbx)
    0.00 :   614126:       mov    %al,0x4f(%rsp)
    0.00 :   61412a:       jg     614341 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x321>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614130:       lea    0x2a0(%rsp),%rbp
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614138:       lea    0x2843cc(%rip),%rdx        # 89850b <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xab>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61413f:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614143:       lea    -0x43(%rdx),%rsi
    0.00 :   614147:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61414a:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614152:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   614157:       lea    0x284579(%rip),%rdx        # 8986d7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61415e:       lea    0x38(%rbp),%rax
    0.00 :   614162:       movl   $0x9d,0x2c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61416d:       lea    0x28(%rbp),%rdi
    0.00 :   614171:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614175:       mov    %rax,0x2c8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61417d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   614182:       lea    0x614b1f(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614189:       mov    0x2a0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614191:       lea    0x5c0(%rsp),%r13
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   614199:       movq   $0x0,0x2e8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6141a5:       mov    0x2a8(%rsp),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6141ad:       lea    0x20(%r13),%rdi
    0.00 :   6141b1:       movq   $0x0,0x2f0(%rsp)
    0.00 :   6141bd:       mov    (%rax),%rax
    0.00 :   6141c0:       movq   $0x0,0x2f8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6141cc:       add    %rsi,%rdx
    0.00 :   6141cf:       mov    %rbx,0x5c0(%rsp)
    0.00 :   6141d7:       mov    %rax,0x5d0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6141df:       lea    0x30(%r13),%rax
    0.00 :   6141e3:       movl   $0x1,0x5c8(%rsp)
    0.00 :   6141ee:       movl   $0x0,0x5d8(%rsp)
    0.00 :   6141f9:       mov    %rax,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614201:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   614206:       mov    0x2c0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61420d:       mov    0x2c8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614215:       lea    0x48(%r13),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614219:       mov    0x2d0(%rsp),%rdx
    0.00 :   614221:       mov    %eax,0x600(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614228:       lea    0x58(%r13),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61422c:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61422f:       mov    %rax,0x608(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614237:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   61423c:       mov    0x2f0(%rsp),%r15
    0.00 :   614244:       mov    0x2e8(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   61424c:       movq   $0x0,0x628(%rsp)
    0.00 :   614258:       movq   $0x0,0x630(%rsp)
    0.00 :   614264:       movq   $0x0,0x638(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614270:       mov    %r15,%r12
    0.00 :   614273:       sub    %rbx,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   614276:       mov    %r12,%rax
    0.00 :   614279:       sar    $0x5,%rax
    0.00 :   61427d:       je     615e4a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e2a>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   614283:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   61428d:       cmp    %rdx,%rax
    0.00 :   614290:       ja     616fa9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f89>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   614296:       mov    %r12,%rdi
    0.00 :   614299:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   61429e:       mov    0x2f0(%rsp),%r15
    0.00 :   6142a6:       mov    0x2e8(%rsp),%rbx
    0.00 :   6142ae:       mov    %rax,%r14
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6142b1:       add    %r14,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   6142b4:       mov    %r14,0x628(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6142bc:       mov    %r12,0x638(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   6142c4:       mov    %r14,%r12
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   6142c7:       mov    %r14,0x630(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   6142cf:       cmp    %r15,%rbx
    0.00 :   6142d2:       je     614300 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2e0>
    0.00 :   6142d4:       nopl   0x0(%rax)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6142d8:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6142dd:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6142e0:       mov    %rax,(%r12)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6142e4:       mov    (%rbx),%rsi
    0.00 :   6142e7:       mov    0x8(%rbx),%rdx
    0.00 :   6142eb:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6142ee:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6142f3:       add    $0x20,%rbx
    0.00 :   6142f7:       add    $0x20,%r12
    0.00 :   6142fb:       cmp    %rbx,%r15
    0.00 :   6142fe:       jne    6142d8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b8>
    0.00 :   614300:       lea    0x80(%r13),%rdi
    0.00 :   614307:       mov    $0x10,%esi
         :            this->_M_impl._M_finish =
    0.00 :   61430c:       mov    %r12,0x630(%rsp)
    0.00 :   614314:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   614319:       lea    0x80(%r13),%rdi
    0.00 :   614320:       mov    $0xf,%edx
    0.00 :   614325:       lea    0x283dd9(%rip),%rsi        # 898105 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x245>
    0.00 :   61432c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   614331:       mov    %r13,%rdi
    0.00 :   614334:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   614339:       mov    %rbp,%rdi
    0.00 :   61433c:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   614341:       mov    0x28(%rsp),%rbx
    0.00 :   614346:       mov    %rbx,%rdi
    0.00 :   614349:       callq  5d95c0 <onnxruntime::SessionState::GetExecutionPlan() const>
    0.00 :   61434e:       mov    %rax,%r14
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   614351:       mov    0x90(%rbx),%rax
    0.00 :   614358:       mov    0x58(%r14),%rcx
    0.00 :   61435c:       mov    %rax,0x58(%rsp)
    0.00 :   614361:       mov    0x50(%r14),%rax
    0.00 :   614365:       mov    %rcx,0x60(%rsp)
    0.00 :   61436a:       mov    %rax,0x8(%rsp)
    0.00 :   61436f:       cmp    %rcx,%rax
    0.00 :   614372:       je     615ee0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ec0>
    0.00 :   614378:       mov    0x30(%rsp),%rax
    0.00 :   61437d:       mov    0x8(%rax),%rax
    0.00 :   614381:       cmpb   $0x0,(%rax)
    0.00 :   614384:       jne    6148b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x890>
    0.00 :   61438a:       lea    0x2a0(%rsp),%rax
    0.00 :   614392:       movq   $0x0,0xa0(%rsp)
    0.00 :   61439e:       mov    %rax,0x78(%rsp)
         :            if (!_M_is_local())
    0.00 :   6143a3:       lea    0x2b0(%rsp),%rax
    0.00 :   6143ab:       movq   $0x0,0x98(%rsp)
    0.00 :   6143b7:       mov    %rax,0x68(%rsp)
    0.00 :   6143bc:       mov    0x8(%rsp),%rax
    0.00 :   6143c1:       cmpb   $0x0,0x4f(%rsp)
    0.00 :   6143c6:       mov    (%rax),%r12
    0.00 :   6143c9:       mov    %r12,0xf8(%rsp)
    0.00 :   6143d1:       je     614449 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x429>
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            count(const key_type& __k) const
         :            -> size_type
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   6143d3:       mov    0x80(%rsp),%rcx
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   6143db:       mov    %r12,%rax
    0.00 :   6143de:       xor    %edx,%edx
    0.00 :   6143e0:       mov    0x8(%rcx),%rdi
    0.00 :   6143e4:       div    %rdi
         :            __node_base* __n = _M_buckets[__bkt];
    0.00 :   6143e7:       mov    (%rcx),%rax
    0.00 :   6143ea:       mov    (%rax,%rdx,8),%rax
    0.00 :   6143ee:       mov    %rdx,%r9
         :            return __n ? static_cast<__node_type*>(__n->_M_nxt) : nullptr;
    0.00 :   6143f1:       test   %rax,%rax
    0.00 :   6143f4:       je     614888 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x868>
    0.00 :   6143fa:       mov    (%rax),%rcx
         :            __node_type* __p = _M_bucket_begin(__n);
         :            if (!__p)
    0.00 :   6143fd:       test   %rcx,%rcx
    0.00 :   614400:       je     614888 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x868>
    0.00 :   614406:       mov    0x8(%rcx),%rsi
         :            return 0;
         :
         :            std::size_t __result = 0;
    0.00 :   61440a:       xor    %r8d,%r8d
    0.00 :   61440d:       jmp    61442e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x40e>
    0.00 :   61440f:       nop
         :            for (;; __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            ++__result;
         :            else if (__result)
    0.00 :   614410:       test   %r8,%r8
    0.00 :   614413:       jne    614449 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x429>
         :            // All equivalent values are next to each other, if we
         :            // found a non-equivalent value after an equivalent one it
         :            // means that we won't find any new equivalent value.
         :            break;
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   614415:       mov    (%rcx),%rcx
    0.00 :   614418:       test   %rcx,%rcx
    0.00 :   61441b:       je     614440 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x420>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   61441d:       mov    0x8(%rcx),%rsi
         :            { return __num % __den; }
    0.00 :   614421:       xor    %edx,%edx
    0.00 :   614423:       mov    %rsi,%rax
    0.00 :   614426:       div    %rdi
    0.00 :   614429:       cmp    %rdx,%r9
    0.00 :   61442c:       jne    614440 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x420>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   61442e:       cmp    %rsi,%r12
    0.00 :   614431:       jne    614410 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x3f0>
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   614433:       mov    (%rcx),%rcx
         :            ++__result;
    0.00 :   614436:       add    $0x1,%r8
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   61443a:       test   %rcx,%rcx
    0.00 :   61443d:       jne    61441d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x3fd>
    0.00 :   61443f:       nop
    0.00 :   614440:       test   %r8,%r8
    0.00 :   614443:       je     614888 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x868>
    0.00 :   614449:       mov    0x58(%rsp),%rdi
    0.00 :   61444e:       mov    %r12,%rsi
    0.00 :   614451:       callq  676a20 <onnxruntime::GraphViewer::GetNode(unsigned long) const>
    0.00 :   614456:       mov    %rax,0x38(%rsp)
    0.00 :   61445b:       mov    0x28(%rsp),%rax
    0.00 :   614460:       mov    0x70(%rax),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614464:       mov    0x78(%rax),%rax
    0.00 :   614468:       mov    %rax,0x10(%rsp)
    0.00 :   61446d:       sub    %rdx,%rax
    0.00 :   614470:       sar    $0x3,%rax
    0.00 :   614474:       cmp    %rax,%r12
    0.00 :   614477:       jae    614f30 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xf10>
    0.00 :   61447d:       mov    (%rdx,%r12,8),%rax
   12.32 :   614481:       mov    %rax,0x10(%rsp)
    0.00 :   614486:       test   %rax,%rax
    0.00 :   614489:       je     614f30 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xf10>
    0.00 :   61448f:       mov    0x28(%rsp),%rbp
    0.00 :   614494:       mov    0x10(%rsp),%r13
    0.00 :   614499:       lea    0x140(%rsp),%r15
    0.00 :   6144a1:       mov    0x30(%rsp),%rax
    0.00 :   6144a6:       mov    0x40(%rsp),%r8
    0.00 :   6144ab:       mov    %r15,%rdi
    0.00 :   6144ae:       mov    0x340(%rbp),%rcx
    0.00 :   6144b5:       mov    0x18(%rsp),%rsi
    0.00 :   6144ba:       mov    %r13,%rdx
    0.00 :   6144bd:       mov    0x8(%rax),%rbx
    0.00 :   6144c1:       callq  5c76c0 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)>
    0.00 :   6144c6:       lea    0x61009b(%rip),%rax        # c24568 <vtable for onnxruntime::OpKernelContextInternal>
    0.00 :   6144cd:       mov    %r13,%rdi
    0.00 :   6144d0:       mov    %rbp,0x178(%rsp)
    0.00 :   6144d8:       mov    %rbx,0x180(%rsp)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   6144e0:       movq   $0x0,0x188(%rsp)
    0.00 :   6144ec:       add    $0x10,%rax
    0.00 :   6144f0:       mov    %rax,0x140(%rsp)
    0.00 :   6144f8:       movq   $0x0,0x190(%rsp)
    0.00 :   614504:       movq   $0x0,0x198(%rsp)
    0.00 :   614510:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614515:       mov    0xf8(%rax),%rbx
    0.00 :   61451c:       sub    0xf0(%rax),%rbx
    0.00 :   614523:       mov    %rax,0x50(%rsp)
         :            template<typename _Tp, typename _Alloc>
         :            void
         :            vector<_Tp, _Alloc>::
         :            reserve(size_type __n)
         :            {
         :            if (__n > this->max_size())
    0.00 :   614528:       movabs $0x1fffffffffffffff,%rax
    0.00 :   614532:       sar    $0x3,%rbx
    0.00 :   614536:       movslq %ebx,%rdx
    0.00 :   614539:       mov    %ebx,%r13d
    0.00 :   61453c:       cmp    %rax,%rdx
    0.00 :   61453f:       ja     616f8b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f6b>
         :            __throw_length_error(__N("vector::reserve"));
         :            if (this->capacity() < __n)
    0.00 :   614545:       mov    0x188(%rsp),%rbp
         :            *  hold before needing to allocate more memory.
         :            */
         :            size_type
         :            capacity() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start); }
    0.00 :   61454d:       mov    0x198(%rsp),%rax
    0.00 :   614555:       sub    %rbp,%rax
    0.00 :   614558:       sar    $0x3,%rax
    0.00 :   61455c:       cmp    %rax,%rdx
    0.00 :   61455f:       ja     615350 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1330>
    0.00 :   614565:       test   %ebx,%ebx
    0.00 :   614567:       jle    6145e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x5c0>
         :            __x);
         :            ++this->_M_impl._M_finish;
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         :            }
         :            else
         :            _M_realloc_insert(end(), __x);
    0.00 :   614569:       lea    0x118(%rsp),%rax
    0.00 :   614571:       xor    %ebp,%ebp
    0.00 :   614573:       mov    %rax,0x20(%rsp)
    0.00 :   614578:       jmp    614597 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x577>
    0.00 :   61457a:       nopw   0x0(%rax,%rax,1)
         :            #endif // __cpp_sized_deallocation
         :            #endif // __cpp_aligned_new
         :
         :            // Default placement versions of operator new.
         :            inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :            { return __p; }
    0.00 :   614580:       mov    %rax,(%rsi)
    0.00 :   614583:       add    $0x1,%ebp
         :            ++this->_M_impl._M_finish;
    0.00 :   614586:       add    $0x8,%rsi
    0.00 :   61458a:       mov    %rsi,0x190(%rsp)
    0.00 :   614592:       cmp    %ebp,%r13d
    0.00 :   614595:       je     6145e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x5c0>
    0.00 :   614597:       mov    %ebp,%esi
    0.00 :   614599:       mov    %r15,%rdi
    0.00 :   61459c:       callq  5c75e0 <onnxruntime::OpKernelContext::GetImplicitInputMLValue(int) const>
    0.00 :   6145a1:       mov    %rax,%rbx
    0.00 :   6145a4:       mov    %rax,0x118(%rsp)
    0.00 :   6145ac:       test   %rax,%rax
    0.00 :   6145af:       je     616b75 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b55>
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   6145b5:       mov    0x190(%rsp),%rsi
    0.00 :   6145bd:       cmp    0x198(%rsp),%rsi
    0.00 :   6145c5:       jne    614580 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x560>
         :            _M_realloc_insert(end(), __x);
    0.00 :   6145c7:       mov    0x20(%rsp),%rdx
    0.00 :   6145cc:       lea    0x48(%r15),%rdi
    0.00 :   6145d0:       callq  60f1d0 <void std::vector<OrtValue const*, std::allocator<OrtValue const*> >::_M_realloc_insert<OrtValue const* const&>(__gnu_cxx::__normal_iterator<OrtValue const**, std::vector<OrtValue const*, std::allocator<OrtValue const*> > >, OrtValue const* const&)>
    0.00 :   6145d5:       add    $0x1,%ebp
    0.00 :   6145d8:       cmp    %ebp,%r13d
    0.00 :   6145db:       jne    614597 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x577>
    0.00 :   6145dd:       nopl   (%rax)
    0.00 :   6145e0:       movzbl 0xdf(%rsp),%eax
    0.00 :   6145e8:       mov    %al,0x50(%rsp)
    0.00 :   6145ec:       test   %al,%al
    0.00 :   6145ee:       je     614609 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x5e9>
    0.00 :   6145f0:       mov    0x28(%rsp),%rax
    0.00 :   6145f5:       mov    0x218(%rax),%rdi
    0.00 :   6145fc:       callq  695530 <onnxruntime::profiling::Profiler::StartTime() const>
    0.00 :   614601:       mov    %rax,0xe8(%rsp)
    0.00 :   614609:       mov    0x10(%rsp),%rdi
    0.00 :   61460e:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
    0.00 :   614613:       mov    0x168(%rax),%eax
         :
         :            const_reference
         :            operator[](size_type __n) const
         :            {
         :            return *const_iterator(this->_M_impl._M_start._M_p
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
   14.23 :   614619:       mov    %r12,%rsi
         :            { return !!(*_M_p & _M_mask); }
    0.00 :   61461c:       mov    0x68(%r14),%rdx
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   614620:       mov    %r12d,%ecx
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   614623:       shr    $0x6,%rsi
    0.00 :   614627:       mov    %eax,0x20(%rsp)
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   61462b:       mov    $0x1,%eax
    0.00 :   614630:       shl    %cl,%rax
    0.00 :   614633:       test   %rax,(%rdx,%rsi,8)
    0.00 :   614637:       jne    615060 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1040>
    0.00 :   61463d:       lea    0xdf(%rsp),%rax
         :            operator()():
    0.00 :   614645:       cmpb   $0x0,0x50(%rsp)
         :            _ZN11onnxruntime18SequentialExecutor7ExecuteERKNS_12SessionStateERKSt6vectorIiSaIiEERKS4_I8OrtValueSaIS9_EES8_RSB_RKSt13unordered_mapImSt8functionIFNS_6common6StatusERKNS_11TensorShapeERK13OrtMemoryInfoRS9_RbEESt4hashImESt8equal_toImESaISt4pairIKmSS_EEERKNS_7logging6LoggerE():
    0.00 :   61464a:       mov    %rax,0x120(%rsp)
    0.00 :   614652:       mov    0x38(%rsp),%rax
    0.00 :   614657:       mov    %rax,0x128(%rsp)
    0.00 :   61465f:       lea    0xf8(%rsp),%rax
    0.00 :   614667:       mov    %rax,0x130(%rsp)
         :            operator()():
    0.00 :   61466f:       jne    614cc0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xca0>
         :            _ZN11onnxruntime18SequentialExecutor7ExecuteERKNS_12SessionStateERKSt6vectorIiSaIiEERKS4_I8OrtValueSaIS9_EES8_RSB_RKSt13unordered_mapImSt8functionIFNS_6common6StatusERKNS_11TensorShapeERK13OrtMemoryInfoRS9_RbEESt4hashImESt8equal_toImESaISt4pairIKmSS_EEERKNS_7logging6LoggerE():
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614675:       lea    0x1a0(%rsp),%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   61467d:       movb   $0x0,0x1b0(%rsp)
    0.00 :   614685:       mov    %rax,0x50(%rsp)
    0.00 :   61468a:       lea    0x1b0(%rsp),%rax
    0.00 :   614692:       mov    %rax,0x1a0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   61469a:       movq   $0x0,0x1a8(%rsp)
    0.00 :   6146a6:       mov    0x10(%rsp),%rsi
    0.00 :   6146ab:       lea    0x108(%rsp),%rdi
    0.00 :   6146b3:       mov    %r15,%rdx
    0.00 :   6146b6:       movq   $0x0,0x100(%rsp)
    0.00 :   6146c2:       mov    (%rsi),%rax
    0.00 :   6146c5:       callq  *0x10(%rax)
   19.15 :   6146c8:       mov    0x108(%rsp),%rax
         :            #endif
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
   11.36 :   6146d0:       mov    0x100(%rsp),%rbx
         :            /// Release ownership of any stored pointer.
         :            pointer
         :            release() noexcept
         :            {
         :            pointer __p = get();
         :            _M_t._M_ptr() = pointer();
    0.00 :   6146d8:       movq   $0x0,0x108(%rsp)
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   6146e4:       mov    %rax,0x100(%rsp)
         :            void
         :            reset(pointer __p = pointer()) noexcept
         :            {
         :            using std::swap;
         :            swap(_M_t._M_ptr(), __p);
         :            if (__p != pointer())
    0.00 :   6146ec:       test   %rbx,%rbx
    0.00 :   6146ef:       je     614748 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x728>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   6146f1:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   6146f5:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   6146f9:       cmp    %rax,%rdi
    0.00 :   6146fc:       je     614703 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x6e3>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   6146fe:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   614703:       mov    %rbx,%rdi
    0.00 :   614706:       mov    $0x28,%esi
    0.00 :   61470b:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            if (__ptr != nullptr)
    0.00 :   614710:       mov    0x108(%rsp),%rbx
    0.00 :   614718:       test   %rbx,%rbx
    0.00 :   61471b:       je     616f9c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f7c>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614721:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   614725:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   614729:       cmp    %rax,%rdi
    0.00 :   61472c:       je     614733 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x713>
    0.00 :   61472e:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   614733:       mov    $0x28,%esi
    0.00 :   614738:       mov    %rbx,%rdi
    0.00 :   61473b:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   614740:       mov    0x100(%rsp),%rax
    0.00 :   614748:       test   %rax,%rax
    0.00 :   61474b:       jne    61694d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x292d>
    0.00 :   614751:       movzbl 0xdf(%rsp),%ebp
    0.00 :   614759:       test   %bpl,%bpl
    0.00 :   61475c:       jne    615518 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x14f8>
    0.00 :   614762:       mov    0xf8(%rsp),%rcx
         :            { return !!(*_M_p & _M_mask); }
    0.00 :   61476a:       mov    0x68(%r14),%rdx
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
   19.33 :   61476e:       mov    $0x1,%eax
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   614773:       mov    %rcx,%rsi
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   614776:       shl    %cl,%rax
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   614779:       shr    $0x6,%rsi
    0.00 :   61477d:       test   %rax,(%rdx,%rsi,8)
    0.00 :   614781:       jne    615be8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1bc8>
   11.72 :   614787:       mov    0x8(%rsp),%rax
    0.00 :   61478c:       mov    0x8(%rax),%r12d
    0.00 :   614790:       cmp    0xc(%rax),%r12d
    0.00 :   614794:       jg     61481c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x7fc>
    0.00 :   61479a:       movslq %r12d,%rbp
    0.00 :   61479d:       lea    0x118(%rsp),%rbx
    0.00 :   6147a5:       shl    $0x2,%rbp
    0.00 :   6147a9:       jmp    6147c3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x7a3>
    0.00 :   6147ab:       nopl   0x0(%rax,%rax,1)
    0.00 :   6147b0:       mov    0x8(%rsp),%rax
    0.00 :   6147b5:       add    $0x1,%r12d
    0.00 :   6147b9:       add    $0x4,%rbp
    0.00 :   6147bd:       cmp    %r12d,0xc(%rax)
    0.00 :   6147c1:       jl     61481c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x7fc>
    0.00 :   6147c3:       mov    0x90(%r14),%rax
    0.00 :   6147ca:       mov    0x18(%rsp),%rsi
    0.00 :   6147cf:       mov    %rbx,%rdi
    0.00 :   6147d2:       mov    (%rax,%rbp,1),%edx
    0.00 :   6147d5:       callq  5a8a70 <onnxruntime::IExecutionFrame::ReleaseMLValue(int)>
    0.00 :   6147da:       cmpq   $0x0,0x118(%rsp)
    0.00 :   6147e3:       je     6147b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x790>
    0.00 :   6147e5:       mov    $0x1f4,%r8d
    0.00 :   6147eb:       lea    0x283dee(%rip),%rcx        # 8985e0 <onnxruntime::ReleaseNodeMLValues(onnxruntime::ExecutionFrame&, onnxruntime::SequentialExecutionPlan const&, onnxruntime::SequentialExecutionPlan::NodeExecutionPlan const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   6147f2:       mov    %rbx,%rsi
    0.00 :   6147f5:       xor    %edi,%edi
    0.00 :   6147f7:       lea    0x283cca(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   6147fe:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   614803:       mov    0x118(%rsp),%rax
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   61480b:       mov    %rax,0x120(%rsp)
    0.00 :   614813:       test   %rax,%rax
    0.00 :   614816:       jne    616b2d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b0d>
         :            if (__ptr != nullptr)
    0.00 :   61481c:       mov    0x100(%rsp),%rbx
    0.00 :   614824:       test   %rbx,%rbx
    0.00 :   614827:       je     614848 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x828>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614829:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   61482d:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   614831:       cmp    %rax,%rdi
    0.00 :   614834:       je     61483b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x81b>
    0.00 :   614836:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   61483b:       mov    $0x28,%esi
    0.00 :   614840:       mov    %rbx,%rdi
    0.00 :   614843:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   614848:       mov    0x50(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   61484d:       mov    0x1a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614855:       add    $0x10,%rax
    0.00 :   614859:       cmp    %rax,%rdi
    0.00 :   61485c:       je     614863 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x843>
    0.00 :   61485e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   614863:       lea    0x60fcfe(%rip),%rax        # c24568 <vtable for onnxruntime::OpKernelContextInternal>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   61486a:       mov    0x188(%rsp),%rdi
    0.00 :   614872:       add    $0x10,%rax
    0.00 :   614876:       mov    %rax,0x140(%rsp)
         :            if (__p)
    0.00 :   61487e:       test   %rdi,%rdi
    0.00 :   614881:       je     614888 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x868>
    0.00 :   614883:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_current; }
         :
         :            __normal_iterator&
         :            operator++() _GLIBCXX_NOEXCEPT
         :            {
         :            ++_M_current;
    0.00 :   614888:       addq   $0x10,0x8(%rsp)
    0.00 :   61488e:       mov    0x8(%rsp),%rax
    0.00 :   614893:       cmp    %rax,0x60(%rsp)
    0.00 :   614898:       je     615ee0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ec0>
    0.00 :   61489e:       mov    0x30(%rsp),%rax
    0.00 :   6148a3:       mov    0x8(%rax),%rax
    0.00 :   6148a7:       cmpb   $0x0,(%rax)
   11.89 :   6148aa:       je     6143bc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x39c>
    0.00 :   6148b0:       mov    0x40(%rsp),%rax
    0.00 :   6148b5:       lea    0x5c0(%rsp),%r13
    0.00 :   6148bd:       cmpl   $0x2,0x28(%rax)
    0.00 :   6148c1:       jg     614c35 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc15>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6148c7:       lea    0x2a0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6148cf:       lea    0x283c35(%rip),%rdx        # 89850b <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xab>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6148d6:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6148da:       lea    -0x43(%rdx),%rsi
    0.00 :   6148de:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6148e1:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6148e9:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   6148ee:       lea    0x283de2(%rip),%rdx        # 8986d7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6148f5:       lea    0x38(%rbp),%rax
    0.00 :   6148f9:       movl   $0xc1,0x2c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614904:       lea    0x28(%rbp),%rdi
    0.00 :   614908:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61490c:       mov    %rax,0x2c8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614914:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   614919:       lea    0x614388(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614920:       mov    0x2a0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614928:       lea    0x5c0(%rsp),%r13
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   614930:       movq   $0x0,0x2e8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61493c:       mov    0x2a8(%rsp),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614944:       lea    0x20(%r13),%rdi
    0.00 :   614948:       mov    0x40(%rsp),%rcx
    0.00 :   61494d:       movq   $0x0,0x2f0(%rsp)
    0.00 :   614959:       movq   $0x0,0x2f8(%rsp)
    0.00 :   614965:       mov    (%rax),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614968:       add    %rsi,%rdx
    0.00 :   61496b:       mov    %rcx,0x5c0(%rsp)
    0.00 :   614973:       mov    %rax,0x5d0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61497b:       lea    0x30(%r13),%rax
    0.00 :   61497f:       movl   $0x2,0x5c8(%rsp)
    0.00 :   61498a:       movl   $0x0,0x5d8(%rsp)
    0.00 :   614995:       mov    %rax,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61499d:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6149a2:       mov    0x2c0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6149a9:       mov    0x2c8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6149b1:       lea    0x48(%r13),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6149b5:       mov    0x2d0(%rsp),%rdx
    0.00 :   6149bd:       mov    %eax,0x600(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6149c4:       lea    0x58(%r13),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6149c8:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6149cb:       mov    %rax,0x608(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6149d3:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   6149d8:       mov    0x2f0(%rsp),%r15
    0.00 :   6149e0:       mov    0x2e8(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   6149e8:       movq   $0x0,0x628(%rsp)
    0.00 :   6149f4:       movq   $0x0,0x630(%rsp)
    0.00 :   614a00:       movq   $0x0,0x638(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614a0c:       mov    %r15,%r12
    0.00 :   614a0f:       sub    %rbx,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   614a12:       mov    %r12,%rdx
    0.00 :   614a15:       sar    $0x5,%rdx
    0.00 :   614a19:       je     616e3e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2e1e>
         :            if (__n > this->max_size())
    0.00 :   614a1f:       movabs $0x7ffffffffffffff,%rax
    0.00 :   614a29:       cmp    %rax,%rdx
    0.00 :   614a2c:       ja     616fd5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2fb5>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   614a32:       mov    %r12,%rdi
    0.00 :   614a35:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   614a3a:       mov    0x2f0(%rsp),%r15
    0.00 :   614a42:       mov    0x2e8(%rsp),%rbx
    0.00 :   614a4a:       mov    %rax,%r14
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   614a4d:       add    %r14,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   614a50:       mov    %r14,0x628(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   614a58:       mov    %r12,0x638(%rsp)
         :            _ForwardIterator __cur = __result;
    0.00 :   614a60:       mov    %r14,%r12
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   614a63:       mov    %r14,0x630(%rsp)
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   614a6b:       cmp    %rbx,%r15
    0.00 :   614a6e:       je     614a98 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xa78>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614a70:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614a75:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614a78:       mov    %rax,(%r12)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614a7c:       mov    (%rbx),%rsi
    0.00 :   614a7f:       mov    0x8(%rbx),%rdx
    0.00 :   614a83:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614a86:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   614a8b:       add    $0x20,%rbx
    0.00 :   614a8f:       add    $0x20,%r12
    0.00 :   614a93:       cmp    %rbx,%r15
    0.00 :   614a96:       jne    614a70 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xa50>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   614a98:       lea    0xf0(%r13),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   614a9f:       mov    %r12,0x630(%rsp)
    0.00 :   614aa7:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   614aac:       mov    0x613075(%rip),%rbx        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   614ab3:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   614ab5:       xor    %esi,%esi
    0.00 :   614ab7:       mov    %cx,0x790(%rsp)
    0.00 :   614abf:       movq   $0x0,0x788(%rsp)
    0.00 :   614acb:       lea    0x10(%rbx),%rax
    0.00 :   614acf:       mov    %rax,0x6b0(%rsp)
    0.00 :   614ad7:       mov    0x6132c2(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   614ade:       movq   $0x0,0x798(%rsp)
    0.00 :   614aea:       mov    0x8(%rax),%r12
    0.00 :   614aee:       mov    0x10(%rax),%r15
    0.00 :   614af2:       movq   $0x0,0x7a0(%rsp)
    0.00 :   614afe:       movq   $0x0,0x7a8(%rsp)
    0.00 :   614b0a:       mov    -0x18(%r12),%rdx
    0.00 :   614b0f:       mov    %r12,0x640(%rsp)
    0.00 :   614b17:       movq   $0x0,0x7b0(%rsp)
    0.00 :   614b23:       lea    0x80(%r13,%rdx,1),%rdi
    0.00 :   614b2b:       mov    %r15,(%rdi)
    0.00 :   614b2e:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   614b33:       mov    0x613226(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   614b3a:       lea    0xc0(%r13),%rdi
    0.00 :   614b41:       movq   $0x0,0x650(%rsp)
    0.00 :   614b4d:       movq   $0x0,0x658(%rsp)
    0.00 :   614b59:       movq   $0x0,0x660(%rsp)
    0.00 :   614b65:       lea    0x18(%rax),%rdx
    0.00 :   614b69:       add    $0x40,%rax
    0.00 :   614b6d:       mov    %rax,0x6b0(%rsp)
    0.00 :   614b75:       mov    0x6130e4(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   614b7c:       mov    %rdx,0x640(%rsp)
    0.00 :   614b84:       movq   $0x0,0x668(%rsp)
    0.00 :   614b90:       add    $0x10,%rax
    0.00 :   614b94:       mov    %rax,0x648(%rsp)
    0.00 :   614b9c:       movq   $0x0,0x670(%rsp)
    0.00 :   614ba8:       movq   $0x0,0x678(%rsp)
    0.00 :   614bb4:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   614bb9:       mov    0x613418(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   614bc0:       lea    0x88(%r13),%rsi
    0.00 :   614bc7:       lea    0xf0(%r13),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   614bce:       movl   $0x10,0x688(%rsp)
    0.00 :   614bd9:       add    $0x10,%rax
    0.00 :   614bdd:       movb   $0x0,0x6a0(%rsp)
    0.00 :   614be5:       mov    %rax,0x648(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614bed:       lea    0xe0(%r13),%rax
    0.00 :   614bf4:       mov    %rax,0x690(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   614bfc:       movq   $0x0,0x698(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   614c08:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   614c0d:       lea    0x80(%r13),%rdi
    0.00 :   614c14:       mov    $0x30,%edx
    0.00 :   614c19:       lea    0x2833c8(%rip),%rsi        # 897fe8 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x128>
    0.00 :   614c20:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   614c25:       mov    %r13,%rdi
    0.00 :   614c28:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   614c2d:       mov    %rbp,%rdi
    0.00 :   614c30:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614c35:       lea    0x2833dc(%rip),%rdx        # 898018 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x158>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614c3c:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614c40:       mov    %r13,%rdi
    0.00 :   614c43:       lea    -0x30(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614c47:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614c4f:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   614c54:       mov    0x70(%rsp),%rdi
    0.00 :   614c59:       mov    %r13,%rcx
    0.00 :   614c5c:       mov    $0x1,%edx
    0.00 :   614c61:       mov    $0x2,%esi
    0.00 :   614c66:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614c6b:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614c73:       lea    0x10(%r13),%rax
    0.00 :   614c77:       cmp    %rax,%rdi
    0.00 :   614c7a:       je     614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
         :            ::operator delete(__p);
    0.00 :   614c7c:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   614c81:       nopl   0x0(%rax)
    0.00 :   614c88:       mov    0x18(%rsp),%rdi
    0.00 :   614c8d:       callq  5b0400 <onnxruntime::ExecutionFrame::~ExecutionFrame()>
    0.00 :   614c92:       mov    0x70(%rsp),%rax
    0.00 :   614c97:       mov    0x7b8(%rsp),%rcx
    0.00 :   614c9f:       xor    %fs:0x28,%rcx
    0.00 :   614ca8:       jne    616f97 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f77>
    0.00 :   614cae:       add    $0x7c8,%rsp
    0.00 :   614cb5:       pop    %rbx
    0.00 :   614cb6:       pop    %rbp
    0.00 :   614cb7:       pop    %r12
    0.00 :   614cb9:       pop    %r13
    0.00 :   614cbb:       pop    %r14
    0.00 :   614cbd:       pop    %r15
    0.00 :   614cbf:       retq
         :            *  Returns true if the %string is empty.  Equivalent to
         :            *  <code>*this == ""</code>.
         :            */
         :            bool
         :            empty() const _GLIBCXX_NOEXCEPT
         :            { return this->size() == 0; }
    0.00 :   614cc0:       mov    0x38(%rsp),%rbx
    0.00 :   614cc5:       mov    0x10(%rbx),%rdx
         :            operator()():
    0.00 :   614cc9:       test   %rdx,%rdx
    0.00 :   614ccc:       je     615410 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x13f0>
         :            _ZN11onnxruntime18SequentialExecutor7ExecuteERKNS_12SessionStateERKSt6vectorIiSaIiEERKS4_I8OrtValueSaIS9_EES8_RSB_RKSt13unordered_mapImSt8functionIFNS_6common6StatusERKNS_11TensorShapeERK13OrtMemoryInfoRS9_RbEESt4hashImESt8equal_toImESaISt4pairIKmSS_EEERKNS_7logging6LoggerE():
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614cd2:       lea    0x1a0(%rsp),%rdi
    0.00 :   614cda:       lea    0x10(%rdi),%rax
    0.00 :   614cde:       mov    %rdi,0x50(%rsp)
    0.00 :   614ce3:       mov    %rax,0x1a0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614ceb:       mov    0x38(%rsp),%rax
    0.00 :   614cf0:       mov    0x8(%rax),%rsi
    0.00 :   614cf4:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614cf7:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   614cfc:       mov    0x28(%rsp),%rax
    0.00 :   614d01:       mov    0x10(%rsp),%rdi
    0.00 :   614d06:       mov    0x218(%rax),%rbp
    0.00 :   614d0d:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614d12:       lea    0x5c0(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d1a:       lea    0x283417(%rip),%rdx        # 898138 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x278>
    0.00 :   614d21:       mov    %rax,%rbx
    0.00 :   614d24:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614d28:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d2c:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   614d2f:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d37:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614d3c:       lea    0x30(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d40:       lea    0x20(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614d44:       mov    %rax,0x5e0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614d4c:       mov    (%rbx),%rsi
    0.00 :   614d4f:       mov    0x8(%rbx),%rdx
    0.00 :   614d53:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d56:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614d5b:       mov    0x1a0(%rsp),%rsi
    0.00 :   614d63:       mov    0x1a8(%rsp),%rdx
    0.00 :   614d6b:       mov    %r13,0x120(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614d73:       mov    0x68(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d78:       mov    0x78(%rsp),%rdi
    0.00 :   614d7d:       movq   $0x1,0x128(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   614d89:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   614d8c:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   614d94:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            if (this->max_size() - (this->size() - __n1) < __n2)
    0.00 :   614d99:       movabs $0x7fffffffffffffff,%rax
    0.00 :   614da3:       sub    0x2a8(%rsp),%rax
    0.00 :   614dab:       cmp    $0xc,%rax
    0.00 :   614daf:       jbe    616fbd <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f9d>
         :            append(const _CharT* __s)
         :            {
         :            __glibcxx_requires_string(__s);
         :            const size_type __n = traits_type::length(__s);
         :            _M_check_length(size_type(0), __n, "basic_string::append");
         :            return _M_append(__s, __n);
    0.00 :   614db5:       mov    0x78(%rsp),%rbx
    0.00 :   614dba:       mov    $0xd,%edx
    0.00 :   614dbf:       lea    0x283373(%rip),%rsi        # 898139 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x279>
    0.00 :   614dc6:       mov    %rbx,%rdi
    0.00 :   614dc9:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
    0.00 :   614dce:       xor    %r9d,%r9d
    0.00 :   614dd1:       mov    %rbx,%rdx
    0.00 :   614dd4:       mov    $0x1,%esi
    0.00 :   614dd9:       mov    %rbp,%rdi
    0.00 :   614ddc:       lea    0xe8(%rsp),%rcx
    0.00 :   614de4:       lea    0x120(%rsp),%r8
    0.00 :   614dec:       callq  6966b0 <onnxruntime::profiling::Profiler::EndTimeAndRecordEvent(onnxruntime::profiling::EventCategory, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614df1:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614df9:       cmp    0x68(%rsp),%rdi
    0.00 :   614dfe:       je     614e05 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xde5>
         :            ::operator delete(__p);
    0.00 :   614e00:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614e05:       mov    0x5e0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614e0d:       lea    0x30(%r13),%rax
    0.00 :   614e11:       cmp    %rax,%rdi
    0.00 :   614e14:       je     614e1b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xdfb>
    0.00 :   614e16:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614e1b:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   614e23:       lea    0x10(%r13),%rax
    0.00 :   614e27:       cmp    %rax,%rdi
    0.00 :   614e2a:       je     614e31 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe11>
    0.00 :   614e2c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   614e31:       mov    0x28(%rsp),%rax
    0.00 :   614e36:       mov    0x218(%rax),%rdi
    0.00 :   614e3d:       callq  695530 <onnxruntime::profiling::Profiler::StartTime() const>
    0.00 :   614e42:       mov    0x150(%rsp),%rdi
    0.00 :   614e4a:       mov    %rax,0xf0(%rsp)
    0.00 :   614e52:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   614e57:       mov    0xb0(%rax),%rdx
    0.00 :   614e5e:       sub    0xa8(%rax),%rdx
    0.00 :   614e65:       movq   $0x0,0xa0(%rsp)
    0.00 :   614e71:       movq   $0x0,0x98(%rsp)
    0.00 :   614e7d:       mov    %rdx,%rax
    0.00 :   614e80:       sar    $0x3,%rax
    0.00 :   614e84:       mov    %eax,%r12d
    0.00 :   614e87:       test   %eax,%eax
    0.00 :   614e89:       jle    6146a6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x686>
    0.00 :   614e8f:       lea    0x110(%rsp),%rax
    0.00 :   614e97:       xor    %ebx,%ebx
    0.00 :   614e99:       mov    %rax,0xa8(%rsp)
    0.00 :   614ea1:       jmp    614ebc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe9c>
    0.00 :   614ea3:       nopl   0x0(%rax,%rax,1)
    0.00 :   614ea8:       add    %rax,0xa0(%rsp)
    0.00 :   614eb0:       add    $0x1,%ebx
    0.00 :   614eb3:       cmp    %ebx,%r12d
    0.00 :   614eb6:       je     6146a6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x686>
    0.00 :   614ebc:       mov    %ebx,%esi
    0.00 :   614ebe:       mov    %r15,%rdi
    0.00 :   614ec1:       callq  5c7570 <onnxruntime::OpKernelContext::GetInputMLValue(int) const>
    0.00 :   614ec6:       mov    %rax,%rbp
    0.00 :   614ec9:       test   %rax,%rax
    0.00 :   614ecc:       je     614eb0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe90>
    0.00 :   614ece:       mov    0x10(%rax),%rdi
    0.00 :   614ed2:       test   %rdi,%rdi
    0.00 :   614ed5:       je     614eb0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe90>
    0.00 :   614ed7:       mov    (%rdi),%rax
    0.00 :   614eda:       callq  *0x30(%rax)
    0.00 :   614edd:       test   %al,%al
    0.00 :   614edf:       je     614eb0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe90>
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   614ee1:       mov    0x10(%rsp),%rax
    0.00 :   614ee6:       mov    %ebx,%esi
    0.00 :   614ee8:       mov    0xa8(%rsp),%rdx
    0.00 :   614ef0:       movq   $0x0,0x110(%rsp)
    0.00 :   614efc:       mov    0x8(%rax),%rdi
    0.00 :   614f00:       callq  5c8790 <onnxruntime::OpKernelInfo::TryGetConstantInput(int, onnxruntime::Tensor const**) const>
    0.00 :   614f05:       mov    %eax,%r13d
    0.00 :   614f08:       test   %al,%al
    0.00 :   614f0a:       je     615e70 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e50>
    0.00 :   614f10:       mov    0x110(%rsp),%rdi
    0.00 :   614f18:       callq  5ede70 <onnxruntime::Tensor::SizeInBytes() const>
    0.00 :   614f1d:       test   %r13b,%r13b
    0.00 :   614f20:       jne    614ea8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe88>
    0.00 :   614f22:       add    %rax,0x98(%rsp)
    0.00 :   614f2a:       jmp    614eb0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xe90>
    0.00 :   614f2c:       nopl   0x0(%rax)
    0.00 :   614f30:       lea    0x5c0(%rsp),%r13
    0.00 :   614f38:       mov    $0x10,%esi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   614f3d:       lea    0x2a0(%rsp),%rbp
    0.00 :   614f45:       mov    %r13,%rdi
    0.00 :   614f48:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   614f4d:       mov    $0x25,%edx
    0.00 :   614f52:       lea    0x2830c7(%rip),%rsi        # 898020 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x160>
    0.00 :   614f59:       mov    %r13,%rdi
    0.00 :   614f5c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   614f61:       mov    0x38(%rsp),%rax
    0.00 :   614f66:       mov    %r13,%rdi
    0.00 :   614f69:       mov    0x10(%rax),%rdx
    0.00 :   614f6d:       mov    0x8(%rax),%rsi
    0.00 :   614f71:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   614f76:       mov    %rbp,%rdi
    0.00 :   614f79:       lea    0x8(%r13),%rsi
    0.00 :   614f7d:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
         :            { }
    0.00 :   614f82:       mov    0x612dd7(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   614f89:       mov    0x610(%rsp),%rdi
    0.00 :   614f91:       lea    0x18(%rax),%rdx
    0.00 :   614f95:       add    $0x40,%rax
    0.00 :   614f99:       mov    %rax,0x630(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   614fa1:       mov    0x613030(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { }
    0.00 :   614fa8:       mov    %rdx,0x5c0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   614fb0:       add    $0x10,%rax
    0.00 :   614fb4:       mov    %rax,0x5c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   614fbc:       lea    0x60(%r13),%rax
    0.00 :   614fc0:       cmp    %rax,%rdi
    0.00 :   614fc3:       je     614fca <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xfaa>
    0.00 :   614fc5:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   614fca:       mov    0x612c8f(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   614fd1:       lea    0x40(%r13),%rdi
    0.00 :   614fd5:       add    $0x10,%rax
    0.00 :   614fd9:       mov    %rax,0x5c8(%rsp)
    0.00 :   614fe1:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   614fe6:       mov    0x612db3(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            ~basic_ios() { }
    0.00 :   614fed:       lea    0x70(%r13),%rdi
    0.00 :   614ff1:       mov    0x8(%rax),%rdx
    0.00 :   614ff5:       mov    0x10(%rax),%rax
    0.00 :   614ff9:       mov    %rdx,0x5c0(%rsp)
    0.00 :   615001:       mov    -0x18(%rdx),%rdx
    0.00 :   615005:       mov    %rax,0x5c0(%rsp,%rdx,1)
    0.00 :   61500d:       mov    0x612b14(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   615014:       add    $0x10,%rax
    0.00 :   615018:       mov    %rax,0x630(%rsp)
    0.00 :   615020:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   615025:       mov    0x70(%rsp),%rdi
    0.00 :   61502a:       mov    %rbp,%rcx
    0.00 :   61502d:       mov    $0x1,%edx
    0.00 :   615032:       mov    $0x2,%esi
    0.00 :   615037:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   61503c:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615044:       add    $0x10,%rbp
    0.00 :   615048:       cmp    %rbp,%rdi
    0.00 :   61504b:       je     614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
    0.00 :   615051:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   615056:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
    0.00 :   61505b:       nopl   0x0(%rax,%rax,1)
    0.00 :   615060:       xor    %ebx,%ebx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615062:       lea    0x5c0(%rsp),%r13
    0.00 :   61506a:       jmp    615074 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1054>
    0.00 :   61506c:       nopl   0x0(%rax)
    0.00 :   615070:       add    $0x1,%rbx
    0.00 :   615074:       mov    0x150(%rsp),%rdi
    0.00 :   61507c:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   615081:       mov    0xb0(%rax),%rdx
    0.00 :   615088:       sub    0xa8(%rax),%rdx
    0.00 :   61508f:       sar    $0x3,%rdx
    0.00 :   615093:       cmp    %ebx,%edx
    0.00 :   615095:       jle    6151a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1180>
    0.00 :   61509b:       mov    %ebx,%esi
    0.00 :   61509d:       mov    %r15,%rdi
    0.00 :   6150a0:       callq  5c7410 <onnxruntime::OpKernelContext::InputFence(int) const>
    0.00 :   6150a5:       mov    %rax,%rbp
    0.00 :   6150a8:       test   %rax,%rax
    0.00 :   6150ab:       je     615070 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1050>
    0.00 :   6150ad:       mov    0x10(%rsp),%rdi
    0.00 :   6150b2:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   6150b7:       lea    0x10(%r13),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6150bb:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6150be:       mov    %rdx,0x5c0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6150c6:       mov    0x198(%rax),%rsi
    0.00 :   6150cd:       mov    0x1a0(%rax),%rdx
    0.00 :   6150d4:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6150d7:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6150dc:       mov    0x10(%rsp),%rdi
    0.00 :   6150e1:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :            _Compare, _Alloc>::const_iterator
         :            _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         :            find(const _Key& __k) const
         :            {
         :            const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
    0.00 :   6150e6:       mov    0x118(%rax),%rdx
         :            { return &this->_M_impl._M_header; }
    0.00 :   6150ed:       lea    0x110(%rax),%rsi
         :            while (__x != 0)
    0.00 :   6150f4:       test   %rdx,%rdx
    0.00 :   6150f7:       je     615126 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1106>
         :            { return &this->_M_impl._M_header; }
    0.00 :   6150f9:       mov    %rsi,%rcx
    0.00 :   6150fc:       jmp    61510c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x10ec>
    0.00 :   6150fe:       xchg   %ax,%ax
         :            __y = __x, __x = _S_left(__x);
    0.00 :   615100:       mov    %rdx,%rcx
    0.00 :   615103:       mov    0x10(%rdx),%rdx
         :            while (__x != 0)
    0.00 :   615107:       test   %rdx,%rdx
    0.00 :   61510a:       je     61511b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x10fb>
         :            if (!_M_impl._M_key_compare(_S_key(__x), __k))
    0.00 :   61510c:       cmp    %rbx,0x20(%rdx)
    0.00 :   615110:       jae    615100 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x10e0>
         :            __x = _S_right(__x);
    0.00 :   615112:       mov    0x18(%rdx),%rdx
         :            while (__x != 0)
    0.00 :   615116:       test   %rdx,%rdx
    0.00 :   615119:       jne    61510c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x10ec>
         :            return (__j == end()
         :            || _M_impl._M_key_compare(__k,
         :            _S_key(__j._M_node))) ? end() : __j;
    0.00 :   61511b:       cmp    %rcx,%rsi
    0.00 :   61511e:       je     615126 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1106>
         :            || _M_impl._M_key_compare(__k,
    0.00 :   615120:       cmp    %rbx,0x20(%rcx)
    0.00 :   615124:       jbe    615170 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1150>
    0.00 :   615126:       mov    0x16c(%rax),%eax
    0.00 :   61512c:       cmp    $0xfffffffe,%eax
    0.00 :   61512f:       je     615178 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1158>
    0.00 :   615131:       nopl   0x0(%rax)
    0.00 :   615138:       mov    0x0(%rbp),%rax
    0.00 :   61513c:       mov    0x20(%rsp),%edx
    0.00 :   615140:       mov    %r13,%rsi
    0.00 :   615143:       mov    %rbp,%rdi
    0.00 :   615146:       callq  *0x10(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615149:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615151:       lea    0x10(%r13),%rax
    0.00 :   615155:       cmp    %rax,%rdi
    0.00 :   615158:       je     615070 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1050>
         :            ::operator delete(__p);
    0.00 :   61515e:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   615163:       jmpq   615070 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1050>
    0.00 :   615168:       nopl   0x0(%rax,%rax,1)
    0.00 :   615170:       mov    0x28(%rcx),%eax
    0.00 :   615173:       cmp    $0xfffffffe,%eax
    0.00 :   615176:       jne    615138 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1118>
         :            traits_type::length(__s));
    0.00 :   615178:       mov    0x5c8(%rsp),%rdx
    0.00 :   615180:       mov    $0x14,%r8d
    0.00 :   615186:       xor    %esi,%esi
    0.00 :   615188:       mov    %r13,%rdi
    0.00 :   61518b:       lea    0x2145fd(%rip),%rcx        # 82978f <std::piecewise_construct+0x29ef>
    0.00 :   615192:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   615197:       jmp    615138 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1118>
    0.00 :   615199:       nopl   0x0(%rax)
    0.00 :   6151a0:       xor    %ebx,%ebx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6151a2:       lea    0x5c0(%rsp),%r13
    0.00 :   6151aa:       jmp    6151b4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1194>
    0.00 :   6151ac:       nopl   0x0(%rax)
    0.00 :   6151b0:       add    $0x1,%rbx
    0.00 :   6151b4:       mov    0x150(%rsp),%rdi
    0.00 :   6151bc:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   6151c1:       mov    0xf8(%rax),%rdx
    0.00 :   6151c8:       sub    0xf0(%rax),%rdx
    0.00 :   6151cf:       sar    $0x3,%rdx
    0.00 :   6151d3:       cmp    %ebx,%edx
    0.00 :   6151d5:       jle    6152e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x12c0>
    0.00 :   6151db:       mov    %ebx,%esi
    0.00 :   6151dd:       mov    %r15,%rdi
    0.00 :   6151e0:       callq  5c7480 <onnxruntime::OpKernelContext::ImplicitInputFence(int) const>
    0.00 :   6151e5:       mov    %rax,%rbp
    0.00 :   6151e8:       test   %rax,%rax
    0.00 :   6151eb:       je     6151b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1190>
    0.00 :   6151ed:       mov    0x10(%rsp),%rdi
    0.00 :   6151f2:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   6151f7:       lea    0x10(%r13),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6151fb:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6151fe:       mov    %rdx,0x5c0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615206:       mov    0x198(%rax),%rsi
    0.00 :   61520d:       mov    0x1a0(%rax),%rdx
    0.00 :   615214:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615217:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   61521c:       mov    0x10(%rsp),%rdi
    0.00 :   615221:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
    0.00 :   615226:       mov    0x118(%rax),%rdx
         :            { return &this->_M_impl._M_header; }
    0.00 :   61522d:       lea    0x110(%rax),%rsi
         :            while (__x != 0)
    0.00 :   615234:       test   %rdx,%rdx
    0.00 :   615237:       je     615266 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1246>
         :            { return &this->_M_impl._M_header; }
    0.00 :   615239:       mov    %rsi,%rcx
    0.00 :   61523c:       jmp    61524c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x122c>
    0.00 :   61523e:       xchg   %ax,%ax
         :            __y = __x, __x = _S_left(__x);
    0.00 :   615240:       mov    %rdx,%rcx
    0.00 :   615243:       mov    0x10(%rdx),%rdx
         :            while (__x != 0)
    0.00 :   615247:       test   %rdx,%rdx
    0.00 :   61524a:       je     61525b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x123b>
         :            if (!_M_impl._M_key_compare(_S_key(__x), __k))
    0.00 :   61524c:       cmp    %rbx,0x20(%rdx)
    0.00 :   615250:       jae    615240 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1220>
         :            __x = _S_right(__x);
    0.00 :   615252:       mov    0x18(%rdx),%rdx
         :            while (__x != 0)
    0.00 :   615256:       test   %rdx,%rdx
    0.00 :   615259:       jne    61524c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x122c>
         :            _S_key(__j._M_node))) ? end() : __j;
    0.00 :   61525b:       cmp    %rcx,%rsi
    0.00 :   61525e:       je     615266 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1246>
         :            || _M_impl._M_key_compare(__k,
    0.00 :   615260:       cmp    %rbx,0x20(%rcx)
    0.00 :   615264:       jbe    6152b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1290>
    0.00 :   615266:       mov    0x16c(%rax),%eax
    0.00 :   61526c:       cmp    $0xfffffffe,%eax
    0.00 :   61526f:       je     6152b8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1298>
    0.00 :   615271:       nopl   0x0(%rax)
    0.00 :   615278:       mov    0x0(%rbp),%rax
    0.00 :   61527c:       mov    0x20(%rsp),%edx
    0.00 :   615280:       mov    %r13,%rsi
    0.00 :   615283:       mov    %rbp,%rdi
    0.00 :   615286:       callq  *0x10(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615289:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615291:       lea    0x10(%r13),%rax
    0.00 :   615295:       cmp    %rax,%rdi
    0.00 :   615298:       je     6151b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1190>
         :            ::operator delete(__p);
    0.00 :   61529e:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   6152a3:       jmpq   6151b0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1190>
    0.00 :   6152a8:       nopl   0x0(%rax,%rax,1)
    0.00 :   6152b0:       mov    0x28(%rcx),%eax
    0.00 :   6152b3:       cmp    $0xfffffffe,%eax
    0.00 :   6152b6:       jne    615278 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1258>
         :            traits_type::length(__s));
    0.00 :   6152b8:       mov    0x5c8(%rsp),%rdx
    0.00 :   6152c0:       mov    $0x14,%r8d
    0.00 :   6152c6:       xor    %esi,%esi
    0.00 :   6152c8:       mov    %r13,%rdi
    0.00 :   6152cb:       lea    0x2144bd(%rip),%rcx        # 82978f <std::piecewise_construct+0x29ef>
    0.00 :   6152d2:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   6152d7:       jmp    615278 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1258>
    0.00 :   6152d9:       nopl   0x0(%rax)
    0.00 :   6152e0:       xor    %ebx,%ebx
    0.00 :   6152e2:       jmp    61531f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x12ff>
    0.00 :   6152e4:       nopl   0x0(%rax)
    0.00 :   6152e8:       mov    %ebx,%esi
    0.00 :   6152ea:       mov    %r15,%rdi
    0.00 :   6152ed:       callq  5c74f0 <onnxruntime::OpKernelContext::OutputFence(int) const>
    0.00 :   6152f2:       mov    %rax,%rbp
    0.00 :   6152f5:       test   %rax,%rax
    0.00 :   6152f8:       je     61531c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x12fc>
    0.00 :   6152fa:       mov    (%rax),%rax
    0.00 :   6152fd:       mov    0x10(%rsp),%rdi
    0.00 :   615302:       mov    0x18(%rax),%r13
    0.00 :   615306:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   61530b:       lea    0x198(%rax),%rsi
    0.00 :   615312:       mov    0x20(%rsp),%edx
    0.00 :   615316:       mov    %rbp,%rdi
    0.00 :   615319:       callq  *%r13
    0.00 :   61531c:       add    $0x1,%ebx
    0.00 :   61531f:       mov    0x150(%rsp),%rdi
    0.00 :   615327:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   61532c:       mov    0xe0(%rax),%rdx
    0.00 :   615333:       sub    0xd8(%rax),%rdx
    0.00 :   61533a:       sar    $0x3,%rdx
    0.00 :   61533e:       cmp    %edx,%ebx
    0.00 :   615340:       jl     6152e8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x12c8>
    0.00 :   615342:       jmpq   61463d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x61d>
    0.00 :   615347:       nopw   0x0(%rax,%rax,1)
         :            {
         :            const size_type __old_size = size();
    0.00 :   615350:       mov    0x190(%rsp),%rax
    0.00 :   615358:       lea    0x0(,%rdx,8),%rdi
    0.00 :   615360:       mov    %rdi,0xa8(%rsp)
    0.00 :   615368:       mov    %rax,0xb0(%rsp)
    0.00 :   615370:       sub    %rbp,%rax
    0.00 :   615373:       mov    %rax,0x20(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   615378:       test   %rdx,%rdx
    0.00 :   61537b:       je     615e40 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e20>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   615381:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   615386:       mov    0x188(%rsp),%r8
    0.00 :   61538e:       mov    %rax,%rcx
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   615391:       cmp    0xb0(%rsp),%rbp
    0.00 :   615399:       je     6153be <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x139e>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   61539b:       mov    0x20(%rsp),%rdx
    0.00 :   6153a0:       mov    %rcx,%rdi
    0.00 :   6153a3:       mov    %rbp,%rsi
    0.00 :   6153a6:       mov    %r8,0xb0(%rsp)
    0.00 :   6153ae:       callq  53aa0 <memmove@plt>
    0.00 :   6153b3:       mov    0xb0(%rsp),%r8
    0.00 :   6153bb:       mov    %rax,%rcx
         :            if (__p)
    0.00 :   6153be:       test   %r8,%r8
    0.00 :   6153c1:       je     6153db <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x13bb>
         :            ::operator delete(__p);
    0.00 :   6153c3:       mov    %r8,%rdi
    0.00 :   6153c6:       mov    %rcx,0xb0(%rsp)
    0.00 :   6153ce:       callq  53300 <operator delete(void*)@plt>
    0.00 :   6153d3:       mov    0xb0(%rsp),%rcx
         :            _M_get_Tp_allocator());
         :            _M_deallocate(this->_M_impl._M_start,
         :            this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start);
         :            this->_M_impl._M_start = __tmp;
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   6153db:       mov    0x20(%rsp),%rax
         :            this->_M_impl._M_start = __tmp;
    0.00 :   6153e0:       mov    %rcx,0x188(%rsp)
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   6153e8:       add    %rcx,%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6153eb:       add    0xa8(%rsp),%rcx
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   6153f3:       mov    %rax,0x190(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6153fb:       mov    %rcx,0x198(%rsp)
    0.00 :   615403:       jmpq   614565 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x545>
    0.00 :   615408:       nopl   0x0(%rax,%rax,1)
    0.00 :   615410:       lea    0x5c0(%rsp),%r13
    0.00 :   615418:       mov    $0x10,%esi
    0.00 :   61541d:       mov    %r13,%rdi
    0.00 :   615420:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   615425:       mov    0x30(%rbx),%rdx
    0.00 :   615429:       mov    0x28(%rbx),%rsi
    0.00 :   61542d:       mov    %r13,%rdi
    0.00 :   615430:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   615435:       mov    $0x1,%edx
    0.00 :   61543a:       lea    0x226d00(%rip),%rsi        # 83c141 <typeinfo name for onnxruntime::ConvAddFusion+0x841>
    0.00 :   615441:       mov    %r13,%rdi
    0.00 :   615444:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   615449:       mov    %r12,%rsi
    0.00 :   61544c:       mov    %r13,%rdi
    0.00 :   61544f:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            { return _M_stringbuf.str(); }
    0.00 :   615454:       lea    0x1a0(%rsp),%rax
    0.00 :   61545c:       lea    0x8(%r13),%rsi
    0.00 :   615460:       mov    %rax,%rdi
    0.00 :   615463:       mov    %rax,0x50(%rsp)
    0.00 :   615468:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
         :            { }
    0.00 :   61546d:       mov    0x6128ec(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615474:       mov    0x610(%rsp),%rdi
    0.00 :   61547c:       lea    0x18(%rax),%rdx
    0.00 :   615480:       add    $0x40,%rax
    0.00 :   615484:       mov    %rax,0x630(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   61548c:       mov    0x612b45(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { }
    0.00 :   615493:       mov    %rdx,0x5c0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   61549b:       add    $0x10,%rax
    0.00 :   61549f:       mov    %rax,0x5c8(%rsp)
         :            if (!_M_is_local())
    0.00 :   6154a7:       lea    0x60(%r13),%rax
    0.00 :   6154ab:       cmp    %rax,%rdi
    0.00 :   6154ae:       je     6154b5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1495>
    0.00 :   6154b0:       callq  53300 <operator delete(void*)@plt>
    0.00 :   6154b5:       mov    0x6127a4(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   6154bc:       lea    0x40(%r13),%rdi
    0.00 :   6154c0:       add    $0x10,%rax
    0.00 :   6154c4:       mov    %rax,0x5c8(%rsp)
    0.00 :   6154cc:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   6154d1:       mov    0x6128c8(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   6154d8:       lea    0x70(%r13),%rdi
    0.00 :   6154dc:       mov    0x8(%rax),%rdx
    0.00 :   6154e0:       mov    0x10(%rax),%rax
    0.00 :   6154e4:       mov    %rdx,0x5c0(%rsp)
    0.00 :   6154ec:       mov    -0x18(%rdx),%rdx
    0.00 :   6154f0:       mov    %rax,0x5c0(%rsp,%rdx,1)
    0.00 :   6154f8:       mov    0x612629(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   6154ff:       add    $0x10,%rax
    0.00 :   615503:       mov    %rax,0x630(%rsp)
    0.00 :   61550b:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   615510:       jmpq   614cfc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xcdc>
    0.00 :   615515:       nopl   (%rax)
    0.00 :   615518:       xor    %r12d,%r12d
    0.00 :   61551b:       xor    %ebx,%ebx
    0.00 :   61551d:       jmp    61555b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x153b>
    0.00 :   61551f:       nop
    0.00 :   615520:       mov    %ebx,%esi
    0.00 :   615522:       mov    %r15,%rdi
    0.00 :   615525:       callq  5c7650 <onnxruntime::OpKernelContext::GetOutputMLValue(int)>
    0.00 :   61552a:       mov    %rax,%r13
    0.00 :   61552d:       test   %rax,%rax
    0.00 :   615530:       je     615558 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1538>
    0.00 :   615532:       mov    0x10(%rax),%rdi
    0.00 :   615536:       test   %rdi,%rdi
    0.00 :   615539:       je     615558 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1538>
    0.00 :   61553b:       mov    (%rdi),%rax
    0.00 :   61553e:       callq  *0x30(%rax)
    0.00 :   615541:       test   %al,%al
    0.00 :   615543:       je     615558 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1538>
    0.00 :   615545:       mov    %r13,%rdi
    0.00 :   615548:       callq  1158d0 <onnxruntime::Tensor const& OrtValue::Get<onnxruntime::Tensor>() const>
    0.00 :   61554d:       mov    %rax,%rdi
    0.00 :   615550:       callq  5ede70 <onnxruntime::Tensor::SizeInBytes() const>
    0.00 :   615555:       add    %rax,%r12
    0.00 :   615558:       add    $0x1,%ebx
    0.00 :   61555b:       mov    0x150(%rsp),%rdi
    0.00 :   615563:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   615568:       mov    0xe0(%rax),%rdx
    0.00 :   61556f:       sub    0xd8(%rax),%rdx
    0.00 :   615576:       sar    $0x3,%rdx
    0.00 :   61557a:       cmp    %edx,%ebx
    0.00 :   61557c:       jl     615520 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1500>
    0.00 :   61557e:       mov    0x28(%rsp),%rax
    0.00 :   615583:       mov    0x10(%rsp),%rdi
    0.00 :   615588:       mov    0x218(%rax),%rax
    0.00 :   61558f:       mov    %rax,0xc8(%rsp)
    0.00 :   615597:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61559c:       lea    0x5c0(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155a4:       lea    0x282b8d(%rip),%rdx        # 898138 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x278>
    0.00 :   6155ab:       mov    %rax,%rbx
    0.00 :   6155ae:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6155b2:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155b6:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6155b9:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155c1:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6155c6:       lea    0x30(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155ca:       lea    0x20(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6155ce:       mov    %rax,0x5e0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6155d6:       mov    (%rbx),%rsi
    0.00 :   6155d9:       mov    0x8(%rbx),%rdx
    0.00 :   6155dd:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6155e0:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6155e5:       mov    0x10(%rsp),%rdi
    0.00 :   6155ea:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
    0.00 :   6155ef:       lea    0x281c3b(%rip),%rdx        # 897231 <onnxruntime::utils::FindMemoryInfoForValue(onnxruntime::SessionState const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::__PRETTY_FUNCTION__+0x351>
    0.00 :   6155f6:       mov    %rax,%rbx
    0.00 :   6155f9:       lea    0x40(%r13),%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6155fd:       lea    0x50(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615601:       lea    -0x8(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615605:       mov    %rax,0x600(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61560d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615612:       lea    0x70(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615616:       lea    0x60(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61561a:       mov    %rax,0x620(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615622:       mov    0x48(%rbx),%rsi
    0.00 :   615626:       mov    0x50(%rbx),%rdx
    0.00 :   61562a:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61562d:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   615632:       mov    0x10(%rsp),%rdi
    0.00 :   615637:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :
         :            inline string
         :            to_string(unsigned long __val)
         :            { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
         :            4 * sizeof(unsigned long),
         :            "%lu", __val); }
    0.00 :   61563c:       mov    0x612605(%rip),%rbx        # c27c48 <vsnprintf@GLIBC_2.2.5>
    0.00 :   615643:       mov    (%rax),%r8
    0.00 :   615646:       xor    %eax,%eax
    0.00 :   615648:       lea    0x1e0(%rsp),%rdi
    0.00 :   615650:       lea    0x210450(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   615657:       mov    $0x20,%edx
    0.00 :   61565c:       mov    %rdi,0xb8(%rsp)
    0.00 :   615664:       mov    %rbx,%rsi
    0.00 :   615667:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61566c:       lea    0x282f07(%rip),%rdx        # 89857a <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x11a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615673:       lea    0x90(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61567a:       lea    0x80(%r13),%rdi
    0.00 :   615681:       lea    -0xb(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615685:       mov    %rax,0x640(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61568d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615692:       lea    0xb0(%r13),%rax
         :            if (__str._M_is_local())
    0.00 :   615699:       mov    0xb8(%rsp),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6156a1:       mov    %rax,0x660(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   6156a9:       mov    0x1e0(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   6156b1:       lea    0x10(%rdi),%rdx
    0.00 :   6156b5:       cmp    %rdx,%rax
    0.00 :   6156b8:       je     615e52 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e32>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6156be:       mov    %rax,0x660(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   6156c6:       mov    0x1f0(%rsp),%rax
    0.00 :   6156ce:       mov    %rax,0x670(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6156d6:       mov    0x1e8(%rsp),%rax
    0.00 :   6156de:       mov    0xf8(%rsp),%r8
         :            "%lu", __val); }
    0.00 :   6156e6:       mov    $0x20,%edx
    0.00 :   6156eb:       mov    %rbx,%rsi
    0.00 :   6156ee:       lea    0x2103b2(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   6156f5:       movb   $0x0,0x1f0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6156fd:       mov    %rax,0x668(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615705:       mov    0xb8(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   61570d:       movq   $0x0,0x1e8(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615719:       add    $0x10,%rax
    0.00 :   61571d:       mov    %r8,0xc0(%rsp)
    0.00 :   615725:       mov    %rax,0x1e0(%rsp)
         :            "%lu", __val); }
    0.00 :   61572d:       lea    0x200(%rsp),%rax
    0.00 :   615735:       mov    %rax,0xb0(%rsp)
    0.00 :   61573d:       mov    %rax,%rdi
    0.00 :   615740:       xor    %eax,%eax
    0.00 :   615742:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615747:       lea    0x282e3c(%rip),%rdx        # 89858a <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x12a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61574e:       lea    0xd0(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615755:       lea    0xc0(%r13),%rdi
    0.00 :   61575c:       lea    -0xf(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615760:       mov    %rax,0x680(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615768:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61576d:       lea    0xf0(%r13),%rax
         :            if (__str._M_is_local())
    0.00 :   615774:       mov    0xb0(%rsp),%rcx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61577c:       mov    %rax,0x6a0(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615784:       mov    0x200(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   61578c:       lea    0x10(%rcx),%rdx
    0.00 :   615790:       cmp    %rdx,%rax
    0.00 :   615793:       je     615e9e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e7e>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615799:       mov    %rax,0x6a0(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   6157a1:       mov    0x210(%rsp),%rax
    0.00 :   6157a9:       mov    %rax,0x6b0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6157b1:       mov    0x208(%rsp),%rax
         :            "%lu", __val); }
    0.00 :   6157b9:       mov    0x98(%rsp),%r8
    0.00 :   6157c1:       mov    $0x20,%edx
    0.00 :   6157c6:       mov    %rbx,%rsi
    0.00 :   6157c9:       lea    0x2102d7(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   6157d0:       movb   $0x0,0x210(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6157d8:       mov    %rax,0x6a8(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6157e0:       mov    0xb0(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   6157e8:       movq   $0x0,0x208(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6157f4:       add    $0x10,%rax
    0.00 :   6157f8:       mov    %rax,0x200(%rsp)
         :            "%lu", __val); }
    0.00 :   615800:       lea    0x220(%rsp),%rax
    0.00 :   615808:       mov    %rax,0xa8(%rsp)
    0.00 :   615810:       mov    %rax,%rdi
    0.00 :   615813:       xor    %eax,%eax
    0.00 :   615815:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61581a:       lea    0x282d79(%rip),%rdx        # 89859a <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x13a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615821:       lea    0x110(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615828:       lea    0x100(%r13),%rdi
    0.00 :   61582f:       lea    -0xf(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615833:       mov    %rax,0x6c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61583b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615840:       lea    0x130(%r13),%rax
         :            if (__str._M_is_local())
    0.00 :   615847:       mov    0xa8(%rsp),%rcx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61584f:       mov    %rax,0x6e0(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615857:       mov    0x220(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   61585f:       lea    0x10(%rcx),%rdx
    0.00 :   615863:       cmp    %rdx,%rax
    0.00 :   615866:       je     615e88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e68>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   61586c:       mov    %rax,0x6e0(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   615874:       mov    0x230(%rsp),%rax
    0.00 :   61587c:       mov    %rax,0x6f0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   615884:       mov    0x228(%rsp),%rax
         :            "%lu", __val); }
    0.00 :   61588c:       mov    0xa0(%rsp),%r8
    0.00 :   615894:       mov    $0x20,%edx
    0.00 :   615899:       mov    %rbx,%rsi
    0.00 :   61589c:       lea    0x210204(%rip),%rcx        # 825aa7 <_fini+0x80f>
    0.00 :   6158a3:       movb   $0x0,0x230(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6158ab:       mov    %rax,0x6e8(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6158b3:       mov    0xa8(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   6158bb:       movq   $0x0,0x228(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6158c7:       add    $0x10,%rax
    0.00 :   6158cb:       mov    %rax,0x220(%rsp)
         :            "%lu", __val); }
    0.00 :   6158d3:       lea    0x240(%rsp),%rax
    0.00 :   6158db:       mov    %rax,0x38(%rsp)
    0.00 :   6158e0:       mov    %rax,%rdi
    0.00 :   6158e3:       xor    %eax,%eax
    0.00 :   6158e5:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6158ea:       lea    0x282cb8(%rip),%rdx        # 8985a9 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x149>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6158f1:       lea    0x150(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6158f8:       lea    0x140(%r13),%rdi
    0.00 :   6158ff:       lea    -0xe(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615903:       mov    %rax,0x700(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61590b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615910:       lea    0x170(%r13),%rax
         :            if (__str._M_is_local())
    0.00 :   615917:       mov    0x38(%rsp),%rcx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61591c:       mov    %rax,0x720(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615924:       mov    0x240(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   61592c:       lea    0x10(%rcx),%rdx
    0.00 :   615930:       cmp    %rdx,%rax
    0.00 :   615933:       je     615eca <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1eaa>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615939:       mov    %rax,0x720(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   615941:       mov    0x250(%rsp),%rax
    0.00 :   615949:       mov    %rax,0x730(%rsp)
         :            "%lu", __val); }
    0.00 :   615951:       mov    0x78(%rsp),%rdi
    0.00 :   615956:       mov    %r12,%r8
    0.00 :   615959:       mov    $0x20,%edx
    0.00 :   61595e:       mov    %rbx,%rsi
         :            { _M_string_length = __length; }
    0.00 :   615961:       mov    0x248(%rsp),%rax
         :            "%lu", __val); }
    0.00 :   615969:       lea    0x210137(%rip),%rcx        # 825aa7 <_fini+0x80f>
         :            { _M_string_length = __length; }
    0.00 :   615970:       movq   $0x0,0x248(%rsp)
    0.00 :   61597c:       movb   $0x0,0x250(%rsp)
    0.00 :   615984:       mov    %rax,0x728(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   61598c:       mov    0x38(%rsp),%rax
    0.00 :   615991:       add    $0x10,%rax
    0.00 :   615995:       mov    %rax,0x240(%rsp)
         :            "%lu", __val); }
    0.00 :   61599d:       xor    %eax,%eax
    0.00 :   61599f:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6159a4:       lea    0x282c0a(%rip),%rdx        # 8985b5 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x155>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6159ab:       lea    0x190(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6159b2:       lea    0x180(%r13),%rdi
    0.00 :   6159b9:       lea    -0xb(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6159bd:       mov    %rax,0x740(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6159c5:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6159ca:       lea    0x1b0(%r13),%rax
    0.00 :   6159d1:       mov    %rax,0x760(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   6159d9:       mov    0x2a0(%rsp),%rax
         :            if (__str._M_is_local())
    0.00 :   6159e1:       cmp    0x68(%rsp),%rax
    0.00 :   6159e6:       je     615eb4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1e94>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   6159ec:       mov    %rax,0x760(%rsp)
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   6159f4:       mov    0x2b0(%rsp),%rax
    0.00 :   6159fc:       mov    %rax,0x770(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   615a04:       mov    0x2a8(%rsp),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615a0c:       mov    0x1a0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615a14:       lea    0x1c0(%rsp),%rbx
         :            { _M_string_length = __length; }
    0.00 :   615a1c:       movq   $0x0,0x2a8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615a28:       mov    0x1a8(%rsp),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615a30:       mov    %rbx,%rdi
    0.00 :   615a33:       movb   $0x0,0x2b0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   615a3b:       mov    %rax,0x768(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615a43:       mov    0x68(%rsp),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615a48:       add    %rsi,%rdx
    0.00 :   615a4b:       mov    %r13,0x120(%rsp)
         :            { _M_dataplus._M_p = __p; }
    0.00 :   615a53:       mov    %rax,0x2a0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615a5b:       lea    0x10(%rbx),%rax
    0.00 :   615a5f:       movq   $0x7,0x128(%rsp)
    0.00 :   615a6b:       mov    %rax,0x1c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615a73:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            if (this->max_size() - (this->size() - __n1) < __n2)
    0.00 :   615a78:       movabs $0x7fffffffffffffff,%rax
    0.00 :   615a82:       sub    0x1c8(%rsp),%rax
    0.00 :   615a8a:       cmp    $0xb,%rax
    0.00 :   615a8e:       jbe    616fda <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2fba>
         :            return _M_append(__s, __n);
    0.00 :   615a94:       mov    $0xc,%edx
    0.00 :   615a99:       lea    0x2826c8(%rip),%rsi        # 898168 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x2a8>
    0.00 :   615aa0:       mov    %rbx,%rdi
    0.00 :   615aa3:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
    0.00 :   615aa8:       mov    0xc8(%rsp),%rdi
    0.00 :   615ab0:       xor    %r9d,%r9d
    0.00 :   615ab3:       mov    %rbx,%rdx
    0.00 :   615ab6:       lea    0xf0(%rsp),%rcx
    0.00 :   615abe:       lea    0x120(%rsp),%r8
    0.00 :   615ac6:       mov    $0x1,%esi
    0.00 :   615acb:       callq  6966b0 <onnxruntime::profiling::Profiler::EndTimeAndRecordEvent(onnxruntime::profiling::EventCategory, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615ad0:       mov    0x1c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615ad8:       add    $0x10,%rbx
    0.00 :   615adc:       cmp    %rbx,%rdi
    0.00 :   615adf:       je     615ae6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ac6>
    0.00 :   615ae1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615ae6:       lea    0x1c0(%r13),%rbx
    0.00 :   615aed:       nopl   (%rax)
    0.00 :   615af0:       sub    $0x40,%rbx
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615af4:       mov    0x20(%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   615af8:       lea    0x30(%rbx),%rax
    0.00 :   615afc:       cmp    %rax,%rdi
    0.00 :   615aff:       je     615b06 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ae6>
    0.00 :   615b01:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b06:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   615b09:       lea    0x10(%rbx),%rax
    0.00 :   615b0d:       cmp    %rax,%rdi
    0.00 :   615b10:       je     615b17 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1af7>
    0.00 :   615b12:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b17:       cmp    %r13,%rbx
    0.00 :   615b1a:       jne    615af0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ad0>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b1c:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b24:       cmp    0x68(%rsp),%rdi
    0.00 :   615b29:       je     615b30 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b10>
    0.00 :   615b2b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b30:       mov    0x38(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b35:       mov    0x240(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b3d:       add    $0x10,%rax
    0.00 :   615b41:       cmp    %rax,%rdi
    0.00 :   615b44:       je     615b4b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b2b>
    0.00 :   615b46:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b4b:       mov    0xa8(%rsp),%r13
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b53:       mov    0x220(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b5b:       add    $0x10,%r13
    0.00 :   615b5f:       cmp    %r13,%rdi
    0.00 :   615b62:       je     615b69 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b49>
    0.00 :   615b64:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b69:       mov    0xb0(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b71:       mov    0x200(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b79:       add    $0x10,%rax
    0.00 :   615b7d:       cmp    %rax,%rdi
    0.00 :   615b80:       je     615b87 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b67>
    0.00 :   615b82:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615b87:       mov    0xb8(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615b8f:       mov    0x1e0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615b97:       add    $0x10,%rax
    0.00 :   615b9b:       cmp    %rax,%rdi
    0.00 :   615b9e:       je     615ba5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1b85>
    0.00 :   615ba0:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615ba5:       mov    0x28(%rsp),%rax
    0.00 :   615baa:       mov    0x218(%rax),%rdi
    0.00 :   615bb1:       callq  695530 <onnxruntime::profiling::Profiler::StartTime() const>
    0.00 :   615bb6:       mov    0xc0(%rsp),%rcx
         :            { return !!(*_M_p & _M_mask); }
    0.00 :   615bbe:       mov    0x68(%r14),%rdx
    0.00 :   615bc2:       mov    %rax,0xe8(%rsp)
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   615bca:       mov    $0x1,%eax
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   615bcf:       mov    %rcx,%rsi
         :            { return _Bit_reference(_M_p, 1UL << _M_offset); }
    0.00 :   615bd2:       shl    %cl,%rax
         :            + __n / int(_S_word_bit), __n % int(_S_word_bit));
    0.00 :   615bd5:       shr    $0x6,%rsi
    0.00 :   615bd9:       test   %rax,(%rdx,%rsi,8)
    0.00 :   615bdd:       je     615cdb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1cbb>
    0.00 :   615be3:       nopl   0x0(%rax,%rax,1)
    0.00 :   615be8:       xor    %ebx,%ebx
    0.00 :   615bea:       jmp    615c0f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1bef>
    0.00 :   615bec:       nopl   0x0(%rax)
    0.00 :   615bf0:       mov    %ebx,%esi
    0.00 :   615bf2:       mov    %r15,%rdi
    0.00 :   615bf5:       callq  5c7410 <onnxruntime::OpKernelContext::InputFence(int) const>
    0.00 :   615bfa:       test   %rax,%rax
    0.00 :   615bfd:       je     615c0c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1bec>
    0.00 :   615bff:       mov    (%rax),%rdx
    0.00 :   615c02:       mov    0x20(%rsp),%esi
    0.00 :   615c06:       mov    %rax,%rdi
    0.00 :   615c09:       callq  *0x20(%rdx)
    0.00 :   615c0c:       add    $0x1,%ebx
    0.00 :   615c0f:       mov    0x150(%rsp),%rdi
    0.00 :   615c17:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   615c1c:       mov    0xb0(%rax),%rdx
    0.00 :   615c23:       sub    0xa8(%rax),%rdx
    0.00 :   615c2a:       sar    $0x3,%rdx
    0.00 :   615c2e:       cmp    %edx,%ebx
    0.00 :   615c30:       jl     615bf0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1bd0>
    0.00 :   615c32:       xor    %ebx,%ebx
    0.00 :   615c34:       jmp    615c5f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c3f>
    0.00 :   615c36:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   615c40:       mov    %ebx,%esi
    0.00 :   615c42:       mov    %r15,%rdi
    0.00 :   615c45:       callq  5c7480 <onnxruntime::OpKernelContext::ImplicitInputFence(int) const>
    0.00 :   615c4a:       test   %rax,%rax
    0.00 :   615c4d:       je     615c5c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c3c>
    0.00 :   615c4f:       mov    (%rax),%rdx
    0.00 :   615c52:       mov    0x20(%rsp),%esi
    0.00 :   615c56:       mov    %rax,%rdi
    0.00 :   615c59:       callq  *0x20(%rdx)
    0.00 :   615c5c:       add    $0x1,%ebx
    0.00 :   615c5f:       mov    0x150(%rsp),%rdi
    0.00 :   615c67:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   615c6c:       mov    0xf8(%rax),%rdx
    0.00 :   615c73:       sub    0xf0(%rax),%rdx
    0.00 :   615c7a:       sar    $0x3,%rdx
    0.00 :   615c7e:       cmp    %edx,%ebx
    0.00 :   615c80:       jl     615c40 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c20>
    0.00 :   615c82:       xor    %ebx,%ebx
    0.00 :   615c84:       jmp    615caf <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c8f>
    0.00 :   615c86:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   615c90:       mov    %ebx,%esi
    0.00 :   615c92:       mov    %r15,%rdi
    0.00 :   615c95:       callq  5c74f0 <onnxruntime::OpKernelContext::OutputFence(int) const>
    0.00 :   615c9a:       test   %rax,%rax
    0.00 :   615c9d:       je     615cac <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c8c>
    0.00 :   615c9f:       mov    (%rax),%rdx
    0.00 :   615ca2:       mov    0x20(%rsp),%esi
    0.00 :   615ca6:       mov    %rax,%rdi
    0.00 :   615ca9:       callq  *0x28(%rdx)
    0.00 :   615cac:       add    $0x1,%ebx
    0.00 :   615caf:       mov    0x150(%rsp),%rdi
    0.00 :   615cb7:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   615cbc:       mov    0xe0(%rax),%rdx
    0.00 :   615cc3:       sub    0xd8(%rax),%rdx
    0.00 :   615cca:       sar    $0x3,%rdx
    0.00 :   615cce:       cmp    %edx,%ebx
    0.00 :   615cd0:       jl     615c90 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1c70>
    0.00 :   615cd2:       test   %bpl,%bpl
    0.00 :   615cd5:       je     614787 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x767>
    0.00 :   615cdb:       mov    0x28(%rsp),%rax
    0.00 :   615ce0:       mov    0x10(%rsp),%rdi
    0.00 :   615ce5:       mov    0x218(%rax),%rbx
    0.00 :   615cec:       callq  5c7210 <onnxruntime::OpKernel::KernelDef() const>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615cf1:       lea    0x5c0(%rsp),%r13
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615cf9:       lea    0x282438(%rip),%rdx        # 898138 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x278>
    0.00 :   615d00:       mov    %rax,%rbp
    0.00 :   615d03:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615d07:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d0b:       mov    %r13,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615d0e:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d16:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615d1b:       lea    0x30(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d1f:       lea    0x20(%r13),%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615d23:       mov    %rax,0x5e0(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615d2b:       mov    0x0(%rbp),%rsi
    0.00 :   615d2f:       mov    0x8(%rbp),%rdx
    0.00 :   615d33:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d36:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615d3b:       mov    0x1a0(%rsp),%rsi
    0.00 :   615d43:       mov    0x1a8(%rsp),%rdx
    0.00 :   615d4b:       mov    %r13,0x120(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615d53:       mov    0x68(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d58:       mov    0x78(%rsp),%rdi
    0.00 :   615d5d:       movq   $0x1,0x128(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   615d69:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615d6c:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   615d74:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            if (this->max_size() - (this->size() - __n1) < __n2)
    0.00 :   615d79:       movabs $0x7fffffffffffffff,%rax
    0.00 :   615d83:       sub    0x2a8(%rsp),%rax
    0.00 :   615d8b:       cmp    $0xb,%rax
    0.00 :   615d8f:       jbe    616fc9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2fa9>
         :            return _M_append(__s, __n);
    0.00 :   615d95:       mov    0x78(%rsp),%r15
    0.00 :   615d9a:       mov    $0xc,%edx
    0.00 :   615d9f:       lea    0x2823cf(%rip),%rsi        # 898175 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x2b5>
    0.00 :   615da6:       mov    %r15,%rdi
    0.00 :   615da9:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
    0.00 :   615dae:       xor    %r9d,%r9d
    0.00 :   615db1:       mov    %r15,%rdx
    0.00 :   615db4:       mov    $0x1,%esi
    0.00 :   615db9:       mov    %rbx,%rdi
    0.00 :   615dbc:       lea    0xe8(%rsp),%rcx
    0.00 :   615dc4:       lea    0x120(%rsp),%r8
    0.00 :   615dcc:       callq  6966b0 <onnxruntime::profiling::Profiler::EndTimeAndRecordEvent(onnxruntime::profiling::EventCategory, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615dd1:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615dd9:       cmp    0x68(%rsp),%rdi
    0.00 :   615dde:       je     615de5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1dc5>
    0.00 :   615de0:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615de5:       mov    0x5e0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615ded:       lea    0x30(%r13),%rax
    0.00 :   615df1:       cmp    %rax,%rdi
    0.00 :   615df4:       je     615dfb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1ddb>
    0.00 :   615df6:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   615dfb:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   615e03:       lea    0x10(%r13),%rax
    0.00 :   615e07:       cmp    %rax,%rdi
    0.00 :   615e0a:       je     614787 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x767>
    0.00 :   615e10:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   615e15:       jmpq   614787 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x767>
    0.00 :   615e1a:       nopw   0x0(%rax,%rax,1)
    0.00 :   615e20:       mov    %r9,0x8(%rsp)
    0.00 :   615e25:       callq  695530 <onnxruntime::profiling::Profiler::StartTime() const>
    0.00 :   615e2a:       mov    0x8(%rsp),%r9
    0.00 :   615e2f:       mov    %rax,0xe0(%rsp)
    0.00 :   615e37:       jmpq   6140c4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xa4>
    0.00 :   615e3c:       nopl   0x0(%rax)
         :            if (this->capacity() < __n)
    0.00 :   615e40:       mov    %rbp,%r8
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   615e43:       xor    %ecx,%ecx
    0.00 :   615e45:       jmpq   615391 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1371>
    0.00 :   615e4a:       xor    %r14d,%r14d
    0.00 :   615e4d:       jmpq   6142b1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x291>
         :            static char_type*
         :            copy(char_type* __s1, const char_type* __s2, size_t __n)
         :            {
         :            if (__n == 0)
         :            return __s1;
         :            return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    0.00 :   615e52:       movdqa 0x1f0(%rsp),%xmm0
    0.00 :   615e5b:       movaps %xmm0,0x670(%rsp)
    0.00 :   615e63:       jmpq   6156d6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x16b6>
    0.00 :   615e68:       nopl   0x0(%rax,%rax,1)
    0.00 :   615e70:       mov    %rbp,%rdi
    0.00 :   615e73:       callq  1158d0 <onnxruntime::Tensor const& OrtValue::Get<onnxruntime::Tensor>() const>
    0.00 :   615e78:       mov    %rax,%rdi
    0.00 :   615e7b:       mov    %rax,0x110(%rsp)
    0.00 :   615e83:       jmpq   614f18 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xef8>
    0.00 :   615e88:       movdqa 0x230(%rsp),%xmm2
    0.00 :   615e91:       movaps %xmm2,0x6f0(%rsp)
    0.00 :   615e99:       jmpq   615884 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1864>
    0.00 :   615e9e:       movdqa 0x210(%rsp),%xmm1
    0.00 :   615ea7:       movaps %xmm1,0x6b0(%rsp)
    0.00 :   615eaf:       jmpq   6157b1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1791>
    0.00 :   615eb4:       movdqa 0x2b0(%rsp),%xmm4
    0.00 :   615ebd:       movaps %xmm4,0x770(%rsp)
    0.00 :   615ec5:       jmpq   615a04 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x19e4>
    0.00 :   615eca:       movdqa 0x250(%rsp),%xmm3
    0.00 :   615ed3:       movaps %xmm3,0x730(%rsp)
    0.00 :   615edb:       jmpq   615951 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1931>
    0.00 :   615ee0:       lea    0x140(%rsp),%r15
    0.00 :   615ee8:       mov    0x88(%rsp),%rdx
    0.00 :   615ef0:       mov    0x18(%rsp),%rsi
    0.00 :   615ef5:       mov    %r15,%rdi
    0.00 :   615ef8:       callq  5a9db0 <onnxruntime::IExecutionFrame::GetOutputs(std::vector<OrtValue, std::allocator<OrtValue> >&)>
    0.00 :   615efd:       cmpq   $0x0,0x140(%rsp)
    0.00 :   615f06:       je     615f3b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f1b>
    0.00 :   615f08:       mov    $0x1c0,%r8d
    0.00 :   615f0e:       lea    0x2827bb(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   615f15:       mov    %r15,%rsi
    0.00 :   615f18:       xor    %edi,%edi
    0.00 :   615f1a:       lea    0x2825a7(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   615f21:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   615f26:       mov    0x140(%rsp),%rax
    0.00 :   615f2e:       mov    0x70(%rsp),%rcx
    0.00 :   615f33:       mov    %rax,(%rcx)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   615f36:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
    0.00 :   615f3b:       cmpq   $0x0,0x4b0(%rsp)
    0.00 :   615f44:       je     615fa7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f87>
    0.00 :   615f46:       mov    0x90(%rsp),%rax
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   615f4e:       movq   $0x0,0x148(%rsp)
    0.00 :   615f5a:       movq   $0x0,0x150(%rsp)
    0.00 :   615f66:       mov    (%rax),%rbx
    0.00 :   615f69:       mov    0x8(%rax),%rbp
    0.00 :   615f6d:       cmp    %rbp,%rbx
    0.00 :   615f70:       je     616e46 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2e26>
    0.00 :   615f76:       mov    0x10(%rbx),%rdi
         :            std::forward<_Args>(__args)...);
         :            ++this->_M_impl._M_finish;
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         :            }
         :            else
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    0.00 :   615f7a:       lea    0x120(%rsp),%r12
    0.00 :   615f82:       test   %rdi,%rdi
    0.00 :   615f85:       je     615fa7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f87>
    0.00 :   615f87:       mov    (%rdi),%rax
    0.00 :   615f8a:       callq  *0x30(%rax)
    0.00 :   615f8d:       test   %al,%al
    0.00 :   615f8f:       jne    616d6d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2d4d>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   615f95:       mov    0x140(%rsp),%rdi
         :            if (__p)
    0.00 :   615f9d:       test   %rdi,%rdi
    0.00 :   615fa0:       je     615fa7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f87>
         :            ::operator delete(__p);
    0.00 :   615fa2:       callq  53300 <operator delete(void*)@plt>
    0.00 :   615fa7:       cmpb   $0x0,0xdf(%rsp)
    0.00 :   615faf:       jne    616dc5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2da5>
         :            { return const_iterator(_M_begin()); }
    0.00 :   615fb5:       mov    0x530(%rsp),%r13
    0.00 :   615fbd:       lea    0x240(%rsp),%rax
    0.00 :   615fc5:       mov    %rax,0x38(%rsp)
    0.00 :   615fca:       test   %r13,%r13
    0.00 :   615fcd:       je     616448 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2428>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615fd3:       lea    0x2a0(%rsp),%rax
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615fdb:       lea    0x5c0(%rsp),%r12
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   615fe3:       mov    %rax,0x8(%rsp)
    0.00 :   615fe8:       lea    0x2b0(%rsp),%rax
    0.00 :   615ff0:       mov    %rax,0x10(%rsp)
    0.00 :   615ff5:       nopl   (%rax)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   615ff8:       mov    0x38(%rsp),%rdi
    0.00 :   615ffd:       lea    0x10(%rdi),%rax
    0.00 :   616001:       mov    %rax,0x240(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616009:       mov    0x8(%r13),%rsi
    0.00 :   61600d:       mov    0x10(%r13),%rdx
    0.00 :   616011:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616014:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   616019:       mov    0x40(%rsp),%rbx
         :            _ImplicitlyConvertiblePair<_U1, _U2>(),
         :            bool>::type=false>
         :            explicit constexpr pair(const pair<_U1, _U2>& __p)
         :            : first(__p.first), second(__p.second) { }
         :
         :            constexpr pair(const pair&) = default;
    0.00 :   61601e:       mov    0x28(%r13),%rax
    0.00 :   616022:       cmpl   $0x1,0x28(%rbx)
    0.00 :   616026:       mov    %rax,0x260(%rsp)
    0.00 :   61602e:       jg     616420 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2400>
    0.00 :   616034:       mov    0x8(%rsp),%r14
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616039:       mov    0x10(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61603e:       lea    0x2824c6(%rip),%rdx        # 89850b <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xab>
    0.00 :   616045:       lea    -0x43(%rdx),%rsi
    0.00 :   616049:       mov    %r14,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61604c:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616054:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   616059:       lea    0x282677(%rip),%rdx        # 8986d7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616060:       lea    0x38(%r14),%rax
    0.00 :   616064:       movl   $0x1e1,0x2c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61606f:       lea    0x28(%r14),%rdi
    0.00 :   616073:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616077:       mov    %rax,0x2c8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61607f:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   616084:       lea    0x612c1d(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61608b:       mov    0x2a0(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616093:       lea    0x20(%r12),%rdi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   616098:       movq   $0x0,0x2e8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6160a4:       mov    0x2a8(%rsp),%rdx
    0.00 :   6160ac:       mov    %rbx,0x5c0(%rsp)
    0.00 :   6160b4:       movq   $0x0,0x2f0(%rsp)
    0.00 :   6160c0:       mov    (%rax),%rax
    0.00 :   6160c3:       movq   $0x0,0x2f8(%rsp)
    0.00 :   6160cf:       add    %rsi,%rdx
    0.00 :   6160d2:       mov    %rax,0x5d0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6160da:       lea    0x30(%r12),%rax
    0.00 :   6160df:       movl   $0x1,0x5c8(%rsp)
    0.00 :   6160ea:       movl   $0x0,0x5d8(%rsp)
    0.00 :   6160f5:       mov    %rax,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6160fd:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   616102:       mov    0x2c0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616109:       mov    0x2c8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616111:       lea    0x48(%r12),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616116:       mov    0x2d0(%rsp),%rdx
    0.00 :   61611e:       mov    %eax,0x600(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616125:       lea    0x58(%r12),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61612a:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61612d:       mov    %rax,0x608(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616135:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   61613a:       mov    0x2f0(%rsp),%r14
    0.00 :   616142:       mov    0x2e8(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   61614a:       movq   $0x0,0x628(%rsp)
    0.00 :   616156:       movq   $0x0,0x630(%rsp)
    0.00 :   616162:       movq   $0x0,0x638(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   61616e:       mov    %r14,%rbp
    0.00 :   616171:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   616174:       mov    %rbp,%rax
    0.00 :   616177:       sar    $0x5,%rax
    0.00 :   61617b:       je     616b65 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b45>
         :            if (__n > this->max_size())
    0.00 :   616181:       movabs $0x7ffffffffffffff,%rcx
    0.00 :   61618b:       cmp    %rcx,%rax
    0.00 :   61618e:       ja     616f86 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f66>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   616194:       mov    %rbp,%rdi
    0.00 :   616197:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   61619c:       mov    0x2f0(%rsp),%r14
    0.00 :   6161a4:       mov    0x2e8(%rsp),%rbx
    0.00 :   6161ac:       mov    %rax,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6161af:       add    %r15,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   6161b2:       mov    %r15,0x628(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   6161ba:       mov    %rbp,0x638(%rsp)
    0.00 :   6161c2:       mov    %r15,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   6161c5:       mov    %r15,0x630(%rsp)
    0.00 :   6161cd:       cmp    %r14,%rbx
    0.00 :   6161d0:       je     6161ff <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x21df>
    0.00 :   6161d2:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6161d8:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6161dc:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6161df:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6161e3:       mov    (%rbx),%rsi
    0.00 :   6161e6:       mov    0x8(%rbx),%rdx
    0.00 :   6161ea:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6161ed:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6161f2:       add    $0x20,%rbx
    0.00 :   6161f6:       add    $0x20,%rbp
    0.00 :   6161fa:       cmp    %rbx,%r14
    0.00 :   6161fd:       jne    6161d8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x21b8>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   6161ff:       lea    0xf0(%r12),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   616207:       mov    %rbp,0x630(%rsp)
    0.00 :   61620f:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   616214:       mov    0x61190d(%rip),%rbx        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   61621b:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   61621d:       xor    %esi,%esi
    0.00 :   61621f:       mov    %dx,0x790(%rsp)
    0.00 :   616227:       movq   $0x0,0x788(%rsp)
    0.00 :   616233:       lea    0x10(%rbx),%rax
    0.00 :   616237:       mov    %rax,0x6b0(%rsp)
    0.00 :   61623f:       mov    0x611b5a(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   616246:       movq   $0x0,0x798(%rsp)
    0.00 :   616252:       mov    0x8(%rax),%rbp
    0.00 :   616256:       mov    0x10(%rax),%r14
    0.00 :   61625a:       movq   $0x0,0x7a0(%rsp)
    0.00 :   616266:       movq   $0x0,0x7a8(%rsp)
    0.00 :   616272:       mov    -0x18(%rbp),%rdx
    0.00 :   616276:       mov    %rbp,0x640(%rsp)
    0.00 :   61627e:       movq   $0x0,0x7b0(%rsp)
    0.00 :   61628a:       lea    0x80(%r12,%rdx,1),%rdi
    0.00 :   616292:       mov    %r14,(%rdi)
    0.00 :   616295:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   61629a:       mov    0x611abf(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   6162a1:       lea    0xc0(%r12),%rdi
    0.00 :   6162a9:       movq   $0x0,0x650(%rsp)
    0.00 :   6162b5:       movq   $0x0,0x658(%rsp)
    0.00 :   6162c1:       movq   $0x0,0x660(%rsp)
    0.00 :   6162cd:       lea    0x18(%rax),%rdx
    0.00 :   6162d1:       add    $0x40,%rax
    0.00 :   6162d5:       mov    %rax,0x6b0(%rsp)
    0.00 :   6162dd:       mov    0x61197c(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   6162e4:       mov    %rdx,0x640(%rsp)
    0.00 :   6162ec:       movq   $0x0,0x668(%rsp)
    0.00 :   6162f8:       add    $0x10,%rax
    0.00 :   6162fc:       mov    %rax,0x648(%rsp)
    0.00 :   616304:       movq   $0x0,0x670(%rsp)
    0.00 :   616310:       movq   $0x0,0x678(%rsp)
    0.00 :   61631c:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   616321:       mov    0x611cb0(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   616328:       lea    0x88(%r12),%rsi
    0.00 :   616330:       lea    0xf0(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   616338:       movl   $0x10,0x688(%rsp)
    0.00 :   616343:       add    $0x10,%rax
         :            { __c1 = __c2; }
    0.00 :   616347:       movb   $0x0,0x6a0(%rsp)
    0.00 :   61634f:       mov    %rax,0x648(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616357:       lea    0xe0(%r12),%rax
    0.00 :   61635f:       mov    %rax,0x690(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   616367:       movq   $0x0,0x698(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   616373:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   616378:       lea    0x80(%r12),%rdi
    0.00 :   616380:       mov    $0x2d,%edx
    0.00 :   616385:       lea    0x282184(%rip),%rsi        # 898510 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xb0>
    0.00 :   61638c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   616391:       mov    0x260(%rsp),%rsi
    0.00 :   616399:       lea    0x80(%r12),%rdi
    0.00 :   6163a1:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   6163a6:       mov    $0xb,%edx
    0.00 :   6163ab:       lea    0x27e735(%rip),%rsi        # 894ae7 <std::piecewise_construct+0x183>
    0.00 :   6163b2:       mov    %rax,%rdi
         :            { return _M_insert(__n); }
    0.00 :   6163b5:       mov    %rax,%rbx
         :            __ostream_insert(__out, __s,
    0.00 :   6163b8:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   6163bd:       mov    0x248(%rsp),%rdx
    0.00 :   6163c5:       mov    0x240(%rsp),%rsi
    0.00 :   6163cd:       mov    %rbx,%rdi
    0.00 :   6163d0:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   6163d5:       mov    %rax,%rbp
         :            *  for more on this subject.
         :            */
         :            template<typename _CharT, typename _Traits>
         :            inline basic_ostream<_CharT, _Traits>&
         :            endl(basic_ostream<_CharT, _Traits>& __os)
         :            { return flush(__os.put(__os.widen('\n'))); }
    0.00 :   6163d8:       mov    (%rax),%rax
         :            { return __check_facet(_M_ctype).widen(__c); }
    0.00 :   6163db:       mov    -0x18(%rax),%rax
    0.00 :   6163df:       mov    0xf0(%rbp,%rax,1),%rbx
         :            if (!__f)
    0.00 :   6163e7:       test   %rbx,%rbx
    0.00 :   6163ea:       je     616fb8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f98>
         :            *  @return  The converted character.
         :            */
         :            char_type
         :            widen(char __c) const
         :            {
         :            if (_M_widen_ok)
    0.00 :   6163f0:       cmpb   $0x0,0x38(%rbx)
    0.00 :   6163f4:       je     6168f1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x28d1>
         :            return _M_widen[static_cast<unsigned char>(__c)];
    0.00 :   6163fa:       movsbl 0x43(%rbx),%esi
    0.00 :   6163fe:       mov    %rbp,%rdi
    0.00 :   616401:       callq  528b0 <std::ostream::put(char)@plt>
         :            *  This manipulator simply calls the stream's @c flush() member function.
         :            */
         :            template<typename _CharT, typename _Traits>
         :            inline basic_ostream<_CharT, _Traits>&
         :            flush(basic_ostream<_CharT, _Traits>& __os)
         :            { return __os.flush(); }
    0.00 :   616406:       mov    %rax,%rdi
    0.00 :   616409:       callq  52f60 <std::ostream::flush()@plt>
    0.00 :   61640e:       mov    %r12,%rdi
    0.00 :   616411:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   616416:       mov    0x8(%rsp),%rdi
    0.00 :   61641b:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
         :            if (!_M_is_local())
    0.00 :   616420:       mov    0x38(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616425:       mov    0x240(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   61642d:       add    $0x10,%rax
    0.00 :   616431:       cmp    %rax,%rdi
    0.00 :   616434:       je     61643b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x241b>
         :            ::operator delete(__p);
    0.00 :   616436:       callq  53300 <operator delete(void*)@plt>
         :            { _M_cur = _M_cur->_M_next(); }
    0.00 :   61643b:       mov    0x0(%r13),%r13
    0.00 :   61643f:       test   %r13,%r13
    0.00 :   616442:       jne    615ff8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1fd8>
    0.00 :   616448:       mov    0x568(%rsp),%r13
    0.00 :   616450:       lea    0x240(%rsp),%rax
    0.00 :   616458:       mov    %rax,0x38(%rsp)
    0.00 :   61645d:       test   %r13,%r13
    0.00 :   616460:       je     6168e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x28c0>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616466:       lea    0x2a0(%rsp),%rax
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   61646e:       lea    0x5c0(%rsp),%r12
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616476:       mov    %rax,0x8(%rsp)
    0.00 :   61647b:       lea    0x2b0(%rsp),%rax
    0.00 :   616483:       mov    %rax,0x10(%rsp)
    0.00 :   616488:       nopl   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616490:       mov    0x38(%rsp),%rdi
    0.00 :   616495:       lea    0x10(%rdi),%rax
    0.00 :   616499:       mov    %rax,0x240(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6164a1:       mov    0x8(%r13),%rsi
    0.00 :   6164a5:       mov    0x10(%r13),%rdx
    0.00 :   6164a9:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6164ac:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   6164b1:       mov    0x40(%rsp),%rbx
    0.00 :   6164b6:       mov    0x28(%r13),%rax
    0.00 :   6164ba:       cmpl   $0x1,0x28(%rbx)
    0.00 :   6164be:       mov    %rax,0x260(%rsp)
    0.00 :   6164c6:       jg     6168b8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2898>
    0.00 :   6164cc:       mov    0x8(%rsp),%r14
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6164d1:       mov    0x10(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6164d6:       lea    0x28202e(%rip),%rdx        # 89850b <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xab>
    0.00 :   6164dd:       lea    -0x43(%rdx),%rsi
    0.00 :   6164e1:       mov    %r14,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6164e4:       mov    %rax,0x2a0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6164ec:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   6164f1:       lea    0x2821df(%rip),%rdx        # 8986d7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   6164f8:       lea    0x38(%r14),%rax
    0.00 :   6164fc:       movl   $0x1e6,0x2c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616507:       lea    0x28(%r14),%rdi
    0.00 :   61650b:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   61650f:       mov    %rax,0x2c8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616517:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   61651c:       lea    0x612785(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616523:       mov    0x2a0(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   61652b:       lea    0x20(%r12),%rdi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   616530:       movq   $0x0,0x2e8(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61653c:       mov    0x2a8(%rsp),%rdx
    0.00 :   616544:       mov    %rbx,0x5c0(%rsp)
    0.00 :   61654c:       movq   $0x0,0x2f0(%rsp)
    0.00 :   616558:       mov    (%rax),%rax
    0.00 :   61655b:       movq   $0x0,0x2f8(%rsp)
    0.00 :   616567:       add    %rsi,%rdx
    0.00 :   61656a:       mov    %rax,0x5d0(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616572:       lea    0x30(%r12),%rax
    0.00 :   616577:       movl   $0x1,0x5c8(%rsp)
    0.00 :   616582:       movl   $0x0,0x5d8(%rsp)
    0.00 :   61658d:       mov    %rax,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616595:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   61659a:       mov    0x2c0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6165a1:       mov    0x2c8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6165a9:       lea    0x48(%r12),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6165ae:       mov    0x2d0(%rsp),%rdx
    0.00 :   6165b6:       mov    %eax,0x600(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6165bd:       lea    0x58(%r12),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   6165c2:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6165c5:       mov    %rax,0x608(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   6165cd:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   6165d2:       mov    0x2f0(%rsp),%r14
    0.00 :   6165da:       mov    0x2e8(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   6165e2:       movq   $0x0,0x628(%rsp)
    0.00 :   6165ee:       movq   $0x0,0x630(%rsp)
    0.00 :   6165fa:       movq   $0x0,0x638(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   616606:       mov    %r14,%rbp
    0.00 :   616609:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   61660c:       mov    %rbp,%rax
    0.00 :   61660f:       sar    $0x5,%rax
    0.00 :   616613:       je     616b6d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2b4d>
         :            if (__n > this->max_size())
    0.00 :   616619:       movabs $0x7ffffffffffffff,%rcx
    0.00 :   616623:       cmp    %rcx,%rax
    0.00 :   616626:       ja     616fae <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f8e>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   61662c:       mov    %rbp,%rdi
    0.00 :   61662f:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   616634:       mov    0x2f0(%rsp),%r14
    0.00 :   61663c:       mov    0x2e8(%rsp),%rbx
    0.00 :   616644:       mov    %rax,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   616647:       add    %r15,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   61664a:       mov    %r15,0x628(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   616652:       mov    %rbp,0x638(%rsp)
    0.00 :   61665a:       mov    %r15,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   61665d:       mov    %r15,0x630(%rsp)
    0.00 :   616665:       cmp    %r14,%rbx
    0.00 :   616668:       je     616697 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2677>
    0.00 :   61666a:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616670:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616674:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616677:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   61667b:       mov    (%rbx),%rsi
    0.00 :   61667e:       mov    0x8(%rbx),%rdx
    0.00 :   616682:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616685:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   61668a:       add    $0x20,%rbx
    0.00 :   61668e:       add    $0x20,%rbp
    0.00 :   616692:       cmp    %rbx,%r14
    0.00 :   616695:       jne    616670 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2650>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   616697:       lea    0xf0(%r12),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   61669f:       mov    %rbp,0x630(%rsp)
    0.00 :   6166a7:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   6166ac:       mov    0x611475(%rip),%rbx        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            { this->init(0); }
    0.00 :   6166b3:       xor    %esi,%esi
    0.00 :   6166b5:       movq   $0x0,0x788(%rsp)
    0.00 :   6166c1:       movq   $0x0,0x798(%rsp)
    0.00 :   6166cd:       movq   $0x0,0x7a0(%rsp)
    0.00 :   6166d9:       lea    0x10(%rbx),%rax
    0.00 :   6166dd:       mov    %rax,0x6b0(%rsp)
    0.00 :   6166e5:       xor    %eax,%eax
    0.00 :   6166e7:       mov    %ax,0x790(%rsp)
    0.00 :   6166ef:       mov    0x6116aa(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   6166f6:       movq   $0x0,0x7a8(%rsp)
    0.00 :   616702:       mov    0x8(%rax),%rbp
    0.00 :   616706:       mov    0x10(%rax),%r14
    0.00 :   61670a:       movq   $0x0,0x7b0(%rsp)
    0.00 :   616716:       mov    -0x18(%rbp),%rdx
    0.00 :   61671a:       mov    %rbp,0x640(%rsp)
    0.00 :   616722:       lea    0x80(%r12,%rdx,1),%rdi
    0.00 :   61672a:       mov    %r14,(%rdi)
    0.00 :   61672d:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   616732:       mov    0x611627(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   616739:       lea    0xc0(%r12),%rdi
    0.00 :   616741:       movq   $0x0,0x650(%rsp)
    0.00 :   61674d:       movq   $0x0,0x658(%rsp)
    0.00 :   616759:       movq   $0x0,0x660(%rsp)
    0.00 :   616765:       lea    0x18(%rax),%rdx
    0.00 :   616769:       add    $0x40,%rax
    0.00 :   61676d:       mov    %rax,0x6b0(%rsp)
    0.00 :   616775:       mov    0x6114e4(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   61677c:       mov    %rdx,0x640(%rsp)
    0.00 :   616784:       movq   $0x0,0x668(%rsp)
    0.00 :   616790:       add    $0x10,%rax
    0.00 :   616794:       mov    %rax,0x648(%rsp)
    0.00 :   61679c:       movq   $0x0,0x670(%rsp)
    0.00 :   6167a8:       movq   $0x0,0x678(%rsp)
    0.00 :   6167b4:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   6167b9:       mov    0x611818(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   6167c0:       lea    0x88(%r12),%rsi
    0.00 :   6167c8:       lea    0xf0(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   6167d0:       movl   $0x10,0x688(%rsp)
    0.00 :   6167db:       add    $0x10,%rax
    0.00 :   6167df:       movb   $0x0,0x6a0(%rsp)
    0.00 :   6167e7:       mov    %rax,0x648(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   6167ef:       lea    0xe0(%r12),%rax
    0.00 :   6167f7:       mov    %rax,0x690(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   6167ff:       movq   $0x0,0x698(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   61680b:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   616810:       lea    0x80(%r12),%rdi
    0.00 :   616818:       mov    $0x2e,%edx
    0.00 :   61681d:       lea    0x281d1c(%rip),%rsi        # 898540 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0xe0>
    0.00 :   616824:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   616829:       mov    0x260(%rsp),%rsi
    0.00 :   616831:       lea    0x80(%r12),%rdi
    0.00 :   616839:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   61683e:       mov    $0xb,%edx
    0.00 :   616843:       lea    0x27e29d(%rip),%rsi        # 894ae7 <std::piecewise_construct+0x183>
    0.00 :   61684a:       mov    %rax,%rdi
         :            { return _M_insert(__n); }
    0.00 :   61684d:       mov    %rax,%rbx
         :            __ostream_insert(__out, __s,
    0.00 :   616850:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   616855:       mov    0x248(%rsp),%rdx
    0.00 :   61685d:       mov    0x240(%rsp),%rsi
    0.00 :   616865:       mov    %rbx,%rdi
    0.00 :   616868:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   61686d:       mov    %rax,%rbp
         :            { return flush(__os.put(__os.widen('\n'))); }
    0.00 :   616870:       mov    (%rax),%rax
         :            { return __check_facet(_M_ctype).widen(__c); }
    0.00 :   616873:       mov    -0x18(%rax),%rax
    0.00 :   616877:       mov    0xf0(%rbp,%rax,1),%rbx
         :            if (!__f)
    0.00 :   61687f:       test   %rbx,%rbx
    0.00 :   616882:       je     616fb3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f93>
         :            if (_M_widen_ok)
    0.00 :   616888:       cmpb   $0x0,0x38(%rbx)
    0.00 :   61688c:       je     61691f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x28ff>
         :            return _M_widen[static_cast<unsigned char>(__c)];
    0.00 :   616892:       movsbl 0x43(%rbx),%esi
    0.00 :   616896:       mov    %rbp,%rdi
    0.00 :   616899:       callq  528b0 <std::ostream::put(char)@plt>
         :            { return __os.flush(); }
    0.00 :   61689e:       mov    %rax,%rdi
    0.00 :   6168a1:       callq  52f60 <std::ostream::flush()@plt>
    0.00 :   6168a6:       mov    %r12,%rdi
    0.00 :   6168a9:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   6168ae:       mov    0x8(%rsp),%rdi
    0.00 :   6168b3:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
         :            if (!_M_is_local())
    0.00 :   6168b8:       mov    0x38(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   6168bd:       mov    0x240(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   6168c5:       add    $0x10,%rax
    0.00 :   6168c9:       cmp    %rax,%rdi
    0.00 :   6168cc:       je     6168d3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x28b3>
         :            ::operator delete(__p);
    0.00 :   6168ce:       callq  53300 <operator delete(void*)@plt>
    0.00 :   6168d3:       mov    0x0(%r13),%r13
    0.00 :   6168d7:       test   %r13,%r13
    0.00 :   6168da:       jne    616490 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2470>
    0.00 :   6168e0:       mov    0x70(%rsp),%rax
    0.00 :   6168e5:       movq   $0x0,(%rax)
         :            constexpr _Head_base()
    0.00 :   6168ec:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
         :            this->_M_widen_init();
    0.00 :   6168f1:       mov    %rbx,%rdi
    0.00 :   6168f4:       callq  534b0 <std::ctype<char>::_M_widen_init() const@plt>
         :            return this->do_widen(__c);
    0.00 :   6168f9:       mov    (%rbx),%rax
    0.00 :   6168fc:       mov    $0xa,%esi
    0.00 :   616901:       mov    0x30(%rax),%rax
    0.00 :   616905:       cmp    0x611414(%rip),%rax        # c27d20 <.got+0x260>
    0.00 :   61690c:       je     6163fe <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x23de>
    0.00 :   616912:       mov    %rbx,%rdi
    0.00 :   616915:       callq  *%rax
    0.00 :   616917:       movsbl %al,%esi
    0.00 :   61691a:       jmpq   6163fe <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x23de>
         :            this->_M_widen_init();
    0.00 :   61691f:       mov    %rbx,%rdi
    0.00 :   616922:       callq  534b0 <std::ctype<char>::_M_widen_init() const@plt>
         :            return this->do_widen(__c);
    0.00 :   616927:       mov    (%rbx),%rax
    0.00 :   61692a:       mov    $0xa,%esi
    0.00 :   61692f:       mov    0x30(%rax),%rax
    0.00 :   616933:       cmp    0x6113e6(%rip),%rax        # c27d20 <.got+0x260>
    0.00 :   61693a:       je     616896 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2876>
    0.00 :   616940:       mov    %rbx,%rdi
    0.00 :   616943:       callq  *%rax
    0.00 :   616945:       movsbl %al,%esi
    0.00 :   616948:       jmpq   616896 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2876>
    0.00 :   61694d:       lea    0x2a0(%rsp),%rbp
    0.00 :   616955:       mov    $0x10,%esi
    0.00 :   61695a:       mov    %rbp,%rdi
    0.00 :   61695d:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   616962:       mov    $0x2c,%edx
    0.00 :   616967:       lea    0x28176a(%rip),%rsi        # 8980d8 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x218>
    0.00 :   61696e:       mov    %rbp,%rdi
    0.00 :   616971:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   616976:       mov    0x38(%rsp),%r14
    0.00 :   61697b:       mov    %rbp,%rdi
    0.00 :   61697e:       mov    0x30(%r14),%rdx
    0.00 :   616982:       mov    0x28(%r14),%rsi
    0.00 :   616986:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   61698b:       mov    $0xd,%edx
    0.00 :   616990:       lea    0x2817b0(%rip),%rsi        # 898147 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x287>
    0.00 :   616997:       mov    %rax,%rdi
    0.00 :   61699a:       mov    %rax,%rbx
    0.00 :   61699d:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   6169a2:       mov    0x10(%r14),%rdx
    0.00 :   6169a6:       mov    0x8(%r14),%rsi
    0.00 :   6169aa:       mov    %rbx,%rdi
    0.00 :   6169ad:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   6169b2:       mov    $0x12,%edx
    0.00 :   6169b7:       lea    0x281797(%rip),%rsi        # 898155 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x295>
    0.00 :   6169be:       mov    %rax,%rdi
    0.00 :   6169c1:       mov    %rax,%r12
    0.00 :   6169c4:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   6169c9:       lea    0x100(%rsp),%rbx
    0.00 :   6169d1:       mov    %rbx,%rdi
    0.00 :   6169d4:       callq  697000 <onnxruntime::common::Status::ErrorMessage[abi:cxx11]() const>
    0.00 :   6169d9:       mov    %r12,%rdi
    0.00 :   6169dc:       mov    0x8(%rax),%rdx
    0.00 :   6169e0:       mov    (%rax),%rsi
    0.00 :   6169e3:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_stringbuf.str(); }
    0.00 :   6169e8:       lea    0x220(%rsp),%rax
    0.00 :   6169f0:       lea    0x8(%rbp),%rsi
    0.00 :   6169f4:       mov    %rax,%rdi
    0.00 :   6169f7:       mov    %rax,0xa8(%rsp)
    0.00 :   6169ff:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   616a04:       mov    0x40(%rsp),%r14
    0.00 :   616a09:       cmpl   $0x3,0x28(%r14)
    0.00 :   616a0e:       jg     616a8c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2a6c>
    0.00 :   616a10:       lea    0x240(%rsp),%r15
    0.00 :   616a18:       lea    0x281cb1(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   616a1f:       mov    $0x153,%edx
    0.00 :   616a24:       lea    0x281a9d(%rip),%rsi        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   616a2b:       mov    %r15,%rdi
    0.00 :   616a2e:       mov    %r15,0x38(%rsp)
    0.00 :   616a33:       callq  167570 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*)>
    0.00 :   616a38:       lea    0x612269(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
    0.00 :   616a3f:       mov    %r15,%r9
    0.00 :   616a42:       xor    %r8d,%r8d
    0.00 :   616a45:       mov    %r14,%rsi
    0.00 :   616a48:       lea    0x5c0(%rsp),%r13
    0.00 :   616a50:       mov    $0x3,%edx
    0.00 :   616a55:       mov    (%rax),%rcx
    0.00 :   616a58:       mov    %r13,%rdi
    0.00 :   616a5b:       callq  168f90 <onnxruntime::logging::Capture::Capture(onnxruntime::logging::Logger const&, onnxruntime::logging::Severity, char const*, onnxruntime::logging::DataType, onnxruntime::CodeLocation const&)>
    0.00 :   616a60:       mov    0x228(%rsp),%rdx
    0.00 :   616a68:       mov    0x220(%rsp),%rsi
    0.00 :   616a70:       lea    0x80(%r13),%rdi
    0.00 :   616a77:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   616a7c:       mov    %r13,%rdi
    0.00 :   616a7f:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   616a84:       mov    %r15,%rdi
    0.00 :   616a87:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   616a8c:       mov    %rbx,%rdi
    0.00 :   616a8f:       callq  696f50 <onnxruntime::common::Status::Code() const>
    0.00 :   616a94:       mov    %rbx,%rdi
    0.00 :   616a97:       mov    %eax,%r12d
    0.00 :   616a9a:       callq  696f40 <onnxruntime::common::Status::Category() const>
    0.00 :   616a9f:       mov    0xa8(%rsp),%rbx
    0.00 :   616aa7:       mov    0x70(%rsp),%rdi
    0.00 :   616aac:       mov    %r12d,%edx
    0.00 :   616aaf:       mov    %eax,%esi
    0.00 :   616ab1:       mov    %rbx,%rcx
    0.00 :   616ab4:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616ab9:       mov    0x220(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   616ac1:       add    $0x10,%rbx
    0.00 :   616ac5:       cmp    %rbx,%rdi
    0.00 :   616ac8:       je     616acf <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2aaf>
    0.00 :   616aca:       callq  53300 <operator delete(void*)@plt>
    0.00 :   616acf:       mov    %rbp,%rdi
    0.00 :   616ad2:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
         :            if (__ptr != nullptr)
    0.00 :   616ad7:       mov    0x100(%rsp),%rdi
    0.00 :   616adf:       test   %rdi,%rdi
    0.00 :   616ae2:       je     616ae9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ac9>
         :            get_deleter()(__ptr);
    0.00 :   616ae4:       callq  613ed0 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.115]>
    0.00 :   616ae9:       mov    0x50(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616aee:       mov    0x1a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   616af6:       add    $0x10,%rax
    0.00 :   616afa:       cmp    %rax,%rdi
    0.00 :   616afd:       je     616b04 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ae4>
    0.00 :   616aff:       callq  53300 <operator delete(void*)@plt>
    0.00 :   616b04:       lea    0x60da5d(%rip),%rax        # c24568 <vtable for onnxruntime::OpKernelContextInternal>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   616b0b:       mov    0x188(%rsp),%rdi
    0.00 :   616b13:       add    $0x10,%rax
    0.00 :   616b17:       mov    %rax,0x140(%rsp)
         :            if (__p)
    0.00 :   616b1f:       test   %rdi,%rdi
    0.00 :   616b22:       jne    614c7c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc5c>
    0.00 :   616b28:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
    0.00 :   616b2d:       lea    0x120(%rsp),%rsi
    0.00 :   616b35:       mov    $0x1aa,%r8d
    0.00 :   616b3b:       lea    0x281b8e(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   616b42:       xor    %edi,%edi
    0.00 :   616b44:       lea    0x28197d(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   616b4b:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   616b50:       mov    0x120(%rsp),%rax
    0.00 :   616b58:       mov    0x70(%rsp),%rcx
    0.00 :   616b5d:       mov    %rax,(%rcx)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   616b60:       jmpq   616ad7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ab7>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   616b65:       xor    %r15d,%r15d
    0.00 :   616b68:       jmpq   6161af <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x218f>
    0.00 :   616b6d:       xor    %r15d,%r15d
    0.00 :   616b70:       jmpq   616647 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2627>
    0.00 :   616b75:       mov    $0xa0,%edi
    0.00 :   616b7a:       movslq %ebp,%rbp
    0.00 :   616b7d:       lea    0x5c0(%rsp),%r13
    0.00 :   616b85:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   616b8a:       mov    %rax,0x10(%rsp)
    0.00 :   616b8f:       mov    0x50(%rsp),%rax
    0.00 :   616b94:       mov    0xf0(%rax),%rax
    0.00 :   616b9b:       mov    (%rax,%rbp,8),%rdi
    0.00 :   616b9f:       callq  63d050 <onnxruntime::NodeArg::Name[abi:cxx11]() const>
    0.00 :   616ba4:       mov    $0x10,%esi
    0.00 :   616ba9:       mov    %r13,%rdi
    0.00 :   616bac:       mov    %rax,%rbp
    0.00 :   616baf:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   616bb4:       lea    0x28148d(%rip),%rsi        # 898048 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x188>
    0.00 :   616bbb:       mov    %r13,%rdi
    0.00 :   616bbe:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   616bc3:       mov    0x8(%rbp),%rdx
    0.00 :   616bc7:       mov    0x0(%rbp),%rsi
    0.00 :   616bcb:       mov    %r13,%rdi
    0.00 :   616bce:       lea    0x2a0(%rsp),%rbp
    0.00 :   616bd6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   616bdb:       lea    0x281533(%rip),%rsi        # 898115 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x255>
    0.00 :   616be2:       mov    %r13,%rdi
    0.00 :   616be5:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   616bea:       lea    0x8(%r13),%rsi
    0.00 :   616bee:       mov    %rbp,%rdi
    0.00 :   616bf1:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   616bf6:       mov    %r13,%rdi
    0.00 :   616bf9:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   616bfe:       lea    0x120(%rsp),%rax
    0.00 :   616c06:       mov    %rax,%rdi
    0.00 :   616c09:       mov    %rax,0x8(%rsp)
    0.00 :   616c0e:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c13:       lea    0x2814b7(%rip),%rdx        # 8980d1 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x211>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616c1a:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c1e:       mov    %r13,%rdi
    0.00 :   616c21:       lea    -0x49(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616c25:       mov    %rax,0x5c0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c2d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   616c32:       lea    0x281a95(%rip),%rdx        # 8986ce <onnxruntime::OpKernelContextInternal::OpKernelContextInternal(onnxruntime::SessionState const&, onnxruntime::IExecutionFrame&, onnxruntime::OpKernel const&, onnxruntime::logging::Logger const&, bool const&)::__PRETTY_FUNCTION__+0xce>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616c39:       lea    0x38(%r13),%rax
    0.00 :   616c3d:       movl   $0x23,0x5e0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c48:       lea    0x28(%r13),%rdi
    0.00 :   616c4c:       lea    -0xce(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   616c53:       mov    %rax,0x5e8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616c5b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   616c60:       mov    0x128(%rsp),%r14
    0.00 :   616c68:       mov    0x120(%rsp),%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   616c70:       movq   $0x0,0x608(%rsp)
    0.00 :   616c7c:       movq   $0x0,0x610(%rsp)
    0.00 :   616c88:       movq   $0x0,0x618(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   616c94:       mov    %r14,%r15
    0.00 :   616c97:       sub    %r12,%r15
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   616c9a:       mov    %r15,%rdx
    0.00 :   616c9d:       sar    $0x5,%rdx
    0.00 :   616ca1:       je     616cd1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2cb1>
         :            if (__n > this->max_size())
    0.00 :   616ca3:       movabs $0x7ffffffffffffff,%rax
    0.00 :   616cad:       cmp    %rax,%rdx
    0.00 :   616cb0:       ja     616f81 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f61>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   616cb6:       mov    %r15,%rdi
    0.00 :   616cb9:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   616cbe:       mov    0x128(%rsp),%r14
    0.00 :   616cc6:       mov    0x120(%rsp),%r12
    0.00 :   616cce:       mov    %rax,%rbx
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   616cd1:       lea    (%rbx,%r15,1),%rax
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   616cd5:       mov    %rbx,0x608(%rsp)
         :            _ForwardIterator __cur = __result;
    0.00 :   616cdd:       mov    %rbx,%r15
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   616ce0:       mov    %rbx,0x610(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   616ce8:       mov    %rax,0x618(%rsp)
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   616cf0:       cmp    %r14,%r12
    0.00 :   616cf3:       je     616d1d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2cfd>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616cf5:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616cf9:       mov    %r15,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   616cfc:       mov    %rax,(%r15)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   616cff:       mov    (%r12),%rsi
    0.00 :   616d03:       mov    0x8(%r12),%rdx
    0.00 :   616d08:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   616d0b:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   616d10:       add    $0x20,%r12
    0.00 :   616d14:       add    $0x20,%r15
    0.00 :   616d18:       cmp    %r12,%r14
    0.00 :   616d1b:       jne    616cf5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2cd5>
    0.00 :   616d1d:       mov    0x10(%rsp),%rdi
    0.00 :   616d22:       mov    %rbp,%rcx
    0.00 :   616d25:       lea    0x2813f4(%rip),%rdx        # 898120 <typeinfo name for onnxruntime::FuncManager::GetFuncs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::NodeComputeInfo*&) const::{lambda(void*)#3}+0x260>
    0.00 :   616d2c:       mov    %r13,%rsi
         :            this->_M_impl._M_finish =
    0.00 :   616d2f:       mov    %r15,0x610(%rsp)
    0.00 :   616d37:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   616d3c:       mov    %r13,%rdi
         :            if (!_M_is_local())
    0.00 :   616d3f:       add    $0x10,%rbp
    0.00 :   616d43:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   616d48:       mov    0x8(%rsp),%rdi
    0.00 :   616d4d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616d52:       mov    0x2a0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   616d5a:       cmp    %rbp,%rdi
    0.00 :   616d5d:       je     bb6a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x44c>
         :            ::operator delete(__p);
    0.00 :   616d63:       callq  53300 <operator delete(void*)@plt>
    0.00 :   616d68:       jmpq   bb6a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x44c>
    0.00 :   616d6d:       mov    %rbx,%rdi
    0.00 :   616d70:       callq  1158d0 <onnxruntime::Tensor const& OrtValue::Get<onnxruntime::Tensor>() const>
    0.00 :   616d75:       add    $0x18,%rax
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   616d79:       mov    0x148(%rsp),%rsi
    0.00 :   616d81:       mov    %rax,0x120(%rsp)
    0.00 :   616d89:       cmp    0x150(%rsp),%rsi
    0.00 :   616d91:       je     616ef8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ed8>
    0.00 :   616d97:       mov    %rax,(%rsi)
         :            ++this->_M_impl._M_finish;
    0.00 :   616d9a:       add    $0x8,%rsi
    0.00 :   616d9e:       mov    %rsi,0x148(%rsp)
    0.00 :   616da6:       add    $0x28,%rbx
    0.00 :   616daa:       cmp    %rbx,%rbp
    0.00 :   616dad:       je     616e46 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2e26>
    0.00 :   616db3:       mov    0x10(%rbx),%rdi
    0.00 :   616db7:       test   %rdi,%rdi
    0.00 :   616dba:       jne    615f87 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f67>
    0.00 :   616dc0:       jmpq   615f95 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f75>
    0.00 :   616dc5:       mov    0x28(%rsp),%rax
    0.00 :   616dca:       lea    0x5c0(%rsp),%r13
    0.00 :   616dd2:       lea    0x2817dd(%rip),%rsi        # 8985b6 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x156>
    0.00 :   616dd9:       movq   $0x0,0x148(%rsp)
    0.00 :   616de5:       mov    %r13,%rdi
    0.00 :   616de8:       mov    0x218(%rax),%rbx
    0.00 :   616def:       lea    0x2a0(%rsp),%rax
    0.00 :   616df7:       mov    %rax,0x140(%rsp)
    0.00 :   616dff:       callq  613fe0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.119]>
    0.00 :   616e04:       lea    0xe0(%rsp),%rcx
    0.00 :   616e0c:       xor    %r9d,%r9d
    0.00 :   616e0f:       mov    %r15,%r8
    0.00 :   616e12:       xor    %esi,%esi
    0.00 :   616e14:       mov    %r13,%rdx
    0.00 :   616e17:       mov    %rbx,%rdi
    0.00 :   616e1a:       callq  6966b0 <onnxruntime::profiling::Profiler::EndTimeAndRecordEvent(onnxruntime::profiling::EventCategory, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   616e1f:       mov    0x5c0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   616e27:       lea    0x10(%r13),%rax
    0.00 :   616e2b:       cmp    %rax,%rdi
    0.00 :   616e2e:       je     615fb5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f95>
    0.00 :   616e34:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   616e39:       jmpq   615fb5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f95>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   616e3e:       xor    %r14d,%r14d
    0.00 :   616e41:       jmpq   614a4d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xa2d>
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   616e46:       mov    $0x30,%edi
    0.00 :   616e4b:       callq  53340 <operator new(unsigned long)@plt>
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   616e50:       movq   $0x0,(%rax)
    0.00 :   616e57:       mov    %rax,%rbx
    0.00 :   616e5a:       mov    0x18(%rsp),%rsi
    0.00 :   616e5f:       movq   $0x0,0x8(%rax)
    0.00 :   616e67:       mov    %rbx,%rdx
    0.00 :   616e6a:       movq   $0x0,0x10(%rax)
    0.00 :   616e72:       movq   $0x0,0x18(%rax)
    0.00 :   616e7a:       movq   $0x0,0x20(%rax)
    0.00 :   616e82:       movq   $0x0,0x28(%rax)
    0.00 :   616e8a:       lea    0x120(%rsp),%rax
    0.00 :   616e92:       mov    %rax,%rdi
    0.00 :   616e95:       mov    %rax,0x8(%rsp)
    0.00 :   616e9a:       callq  5a8d00 <onnxruntime::ExecutionFrame::GeneratePatterns(onnxruntime::MemoryPatternGroup*) const>
    0.00 :   616e9f:       cmpq   $0x0,0x120(%rsp)
    0.00 :   616ea8:       je     616f08 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ee8>
    0.00 :   616eaa:       mov    0x8(%rsp),%rsi
    0.00 :   616eaf:       mov    $0x1d7,%r8d
    0.00 :   616eb5:       lea    0x281814(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   616ebc:       xor    %edi,%edi
    0.00 :   616ebe:       lea    0x281603(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   616ec5:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   616eca:       mov    0x120(%rsp),%rax
    0.00 :   616ed2:       mov    0x70(%rsp),%rcx
         :            get_deleter()(__ptr);
    0.00 :   616ed7:       mov    %rbx,%rdi
    0.00 :   616eda:       mov    %rax,(%rcx)
    0.00 :   616edd:       callq  613f10 <std::default_delete<onnxruntime::MemoryPatternGroup>::operator()(onnxruntime::MemoryPatternGroup*) const [clone .isra.176]>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   616ee2:       mov    0x140(%rsp),%rdi
         :            if (__p)
    0.00 :   616eea:       test   %rdi,%rdi
    0.00 :   616eed:       jne    614c7c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc5c>
    0.00 :   616ef3:       jmpq   614c88 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0xc68>
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    0.00 :   616ef8:       mov    %r12,%rdx
    0.00 :   616efb:       mov    %r15,%rdi
    0.00 :   616efe:       callq  5a9020 <void std::vector<std::reference_wrapper<onnxruntime::TensorShape const>, std::allocator<std::reference_wrapper<onnxruntime::TensorShape const> > >::_M_realloc_insert<std::reference_wrapper<onnxruntime::TensorShape const> >(__gnu_cxx::__normal_iterator<std::reference_wrapper<onnxruntime::TensorShape const>*, std::vector<std::reference_wrapper<onnxruntime::TensorShape const>, std::allocator<std::reference_wrapper<onnxruntime::TensorShape const> > > >, std::reference_wrapper<onnxruntime::TensorShape const>&&)>
    0.00 :   616f03:       jmpq   616da6 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2d86>
    0.00 :   616f08:       mov    %rbx,0x120(%rsp)
    0.00 :   616f10:       mov    0x8(%rsp),%rcx
    0.00 :   616f15:       lea    0x118(%rsp),%rbx
    0.00 :   616f1d:       mov    %r15,%rdx
    0.00 :   616f20:       mov    0x28(%rsp),%rsi
    0.00 :   616f25:       mov    %rbx,%rdi
    0.00 :   616f28:       callq  5de950 <onnxruntime::SessionState::UpdateMemoryPatternGroupCache(std::vector<std::reference_wrapper<onnxruntime::TensorShape const>, std::allocator<std::reference_wrapper<onnxruntime::TensorShape const> > > const&, std::unique_ptr<onnxruntime::MemoryPatternGroup, std::default_delete<onnxruntime::MemoryPatternGroup> >) const>
         :            if (__ptr != nullptr)
    0.00 :   616f2d:       mov    0x120(%rsp),%rdi
    0.00 :   616f35:       test   %rdi,%rdi
    0.00 :   616f38:       je     616f3f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2f1f>
         :            get_deleter()(__ptr);
    0.00 :   616f3a:       callq  613f10 <std::default_delete<onnxruntime::MemoryPatternGroup>::operator()(onnxruntime::MemoryPatternGroup*) const [clone .isra.176]>
    0.00 :   616f3f:       cmpq   $0x0,0x118(%rsp)
    0.00 :   616f48:       je     615f95 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x1f75>
    0.00 :   616f4e:       mov    $0x1d8,%r8d
    0.00 :   616f54:       lea    0x281775(%rip),%rcx        # 8986d0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)::__FUNCTION__>
    0.00 :   616f5b:       mov    %rbx,%rsi
    0.00 :   616f5e:       xor    %edi,%edi
    0.00 :   616f60:       lea    0x281561(%rip),%rdx        # 8984c8 <typeinfo name for onnxruntime::ParallelExecutor::EnqueueNode(unsigned long, onnxruntime::SessionState const&, onnxruntime::logging::Logger const&)::{lambda()#1}+0x68>
    0.00 :   616f67:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   616f6c:       mov    0x118(%rsp),%rax
    0.00 :   616f74:       mov    0x70(%rsp),%rcx
    0.00 :   616f79:       mov    %rax,(%rcx)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   616f7c:       jmpq   616ee2 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x2ec2>
         :            std::__throw_bad_alloc();
    0.00 :   616f81:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   616f86:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            __throw_length_error(__N("vector::reserve"));
    0.00 :   616f8b:       lea    0x2100b6(%rip),%rdi        # 827048 <std::piecewise_construct+0x2a8>
    0.00 :   616f92:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   616f97:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   616f9c:       mov    0x100(%rsp),%rax
    0.00 :   616fa4:       jmpq   614748 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&)+0x728>
    0.00 :   616fa9:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   616fae:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            __throw_bad_cast();
    0.00 :   616fb3:       callq  535d0 <std::__throw_bad_cast()@plt>
    0.00 :   616fb8:       callq  535d0 <std::__throw_bad_cast()@plt>
         :            __throw_length_error(__N(__s));
    0.00 :   616fbd:       lea    0x20e3f0(%rip),%rdi        # 8253b4 <_fini+0x11c>
    0.00 :   616fc4:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   616fc9:       lea    0x20e3e4(%rip),%rdi        # 8253b4 <_fini+0x11c>
    0.00 :   616fd0:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   616fd5:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   616fda:       lea    0x20e3d3(%rip),%rdi        # 8253b4 <_fini+0x11c>
    0.00 :   616fe1:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   616fe6:       mov    %rax,%rbx
    0.00 :   616fe9:       jmpq   bb26d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x19>
    0.00 :   616fee:       jmpq   bb379 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x125>
    0.00 :   616ff3:       mov    %rax,%rbp
    0.00 :   616ff6:       jmpq   bb38f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x13b>
    0.00 :   616ffb:       mov    %rax,%rbx
    0.00 :   616ffe:       jmpq   bb4a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x24c>
    0.00 :   617003:       mov    %rax,%rbx
    0.00 :   617006:       jmpq   bb500 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2ac>
    0.00 :   61700b:       mov    %rax,%rbx
    0.00 :   61700e:       jmpq   bb551 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2fd>
    0.00 :   617013:       mov    %rax,%rbx
    0.00 :   617016:       jmpq   bb3e4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x190>
    0.00 :   61701b:       mov    %rax,%rbx
    0.00 :   61701e:       jmpq   bb474 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x220>
    0.00 :   617023:       mov    %rax,%rbx
    0.00 :   617026:       jmpq   bb525 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2d1>
    0.00 :   61702b:       mov    %rax,%rbx
    0.00 :   61702e:       jmpq   bb549 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2f5>
    0.00 :   617033:       mov    %rax,%rbx
    0.00 :   617036:       jmpq   bb3cd <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x179>
    0.00 :   61703b:       mov    %rax,%rbx
    0.00 :   61703e:       jmpq   bb4aa <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x256>
    0.00 :   617043:       mov    %rax,%rbx
    0.00 :   617046:       jmpq   bb516 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x2c2>
    0.00 :   61704b:       mov    %rax,%rbx
    0.00 :   61704e:       jmpq   bb55b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x307>
    0.00 :   617053:       mov    %rax,%rbx
    0.00 :   617056:       jmpq   bb41e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x1ca>
    0.00 :   61705b:       mov    %rax,%rbp
    0.00 :   61705e:       jmpq   bb586 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x332>
    0.00 :   617063:       mov    %rax,%rbx
    0.00 :   617066:       jmpq   bb3ff <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x1ab>
    0.00 :   61706b:       jmpq   bb5a1 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x34d>
    0.00 :   617070:       mov    %rax,%rbx
    0.00 :   617073:       jmpq   bb5b3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x35f>
    0.00 :   617078:       mov    %rax,%rbx
    0.00 :   61707b:       jmpq   bb628 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x3d4>
    0.00 :   617080:       mov    %rax,%rbx
    0.00 :   617083:       jmpq   bb64c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x3f8>
    0.00 :   617088:       mov    %rax,%rbx
    0.00 :   61708b:       jmpq   bb681 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x42d>
    0.00 :   617090:       mov    %rax,%rbx
    0.00 :   617093:       jmpq   bb5fa <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x3a6>
    0.00 :   617098:       mov    %rax,%rbx
    0.00 :   61709b:       jmpq   bb2bb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x67>
    0.00 :   6170a0:       mov    %rax,%rbx
    0.00 :   6170a3:       jmpq   bb48a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x236>
    0.00 :   6170a8:       mov    %rax,%rbx
    0.00 :   6170ab:       jmpq   bb6b8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x464>
    0.00 :   6170b0:       mov    %rax,%rbx
    0.00 :   6170b3:       jmpq   bb6fb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x4a7>
    0.00 :   6170b8:       jmpq   bb708 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x4b4>
    0.00 :   6170bd:       jmpq   bb710 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x4bc>
    0.00 :   6170c2:       mov    %rax,%rbx
    0.00 :   6170c5:       jmpq   bb342 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0xee>
    0.00 :   6170ca:       mov    %rax,%rbx
    0.00 :   6170cd:       jmpq   bb7c2 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x56e>
    0.00 :   6170d2:       mov    %rax,%rbx
    0.00 :   6170d5:       jmpq   bb610 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x3bc>
    0.00 :   6170da:       mov    %rax,%rbx
    0.00 :   6170dd:       jmpq   bb7dc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x588>
    0.00 :   6170e2:       mov    %rax,%rbx
    0.00 :   6170e5:       jmpq   bb7c2 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x56e>
    0.00 :   6170ea:       mov    %rax,%rbx
    0.00 :   6170ed:       jmpq   bb327 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0xd3>
    0.00 :   6170f2:       mov    %rax,%rbx
    0.00 :   6170f5:       jmpq   bb81f <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x5cb>
    0.00 :   6170fa:       mov    %rax,%rbx
    0.00 :   6170fd:       jmpq   bb6d3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x47f>
    0.00 :   617102:       mov    %rax,%rbx
    0.00 :   617105:       jmpq   bb367 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x113>
    0.00 :   61710a:       mov    %rax,%rbx
    0.00 :   61710d:       jmpq   bb5bc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x368>
    0.00 :   617112:       mov    %rax,%rbp
    0.00 :   617115:       jmpq   bb83e <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x5ea>
    0.00 :   61711a:       mov    %rax,%rbp
    0.00 :   61711d:       jmpq   bb254 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]>
    0.00 :   617122:       mov    %rax,%rbx
    0.00 :   617125:       jmpq   bb85c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x608>
    0.00 :   61712a:       mov    %rax,%rbx
    0.00 :   61712d:       jmpq   bb876 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x622>
    0.00 :   617132:       mov    %rax,%rbx
    0.00 :   617135:       jmpq   bb2f7 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0xa3>
    0.00 :   61713a:       mov    %rax,%rbx
    0.00 :   61713d:       jmpq   bb890 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x63c>
    0.00 :   617142:       mov    %rax,%rbx
    0.00 :   617145:       jmpq   bb6e0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x48c>
    0.00 :   61714a:       mov    %rax,%rbx
    0.00 :   61714d:       jmpq   bb2d9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x85>
    0.00 :   617152:       mov    %rax,%rbx
    0.00 :   617155:       jmpq   bb8b4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x660>
    0.00 :   61715a:       mov    %rax,%rbx
    0.00 :   61715d:       jmpq   bb285 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x31>
    0.00 :   617162:       mov    %rax,%rbx
    0.00 :   617165:       jmpq   bb2a0 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x4c>
    0.00 :   61716a:       mov    %rax,%rbx
    0.00 :   61716d:       jmpq   bb8f3 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x69f>
    0.00 :   617172:       mov    %rax,%rbx
    0.00 :   617175:       jmpq   bb8d8 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x684>
    0.00 :   61717a:       mov    %rax,%rbx
    0.00 :   61717d:       jmpq   bb579 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x325>
    0.00 :   617182:       mov    %rax,%rbx
    0.00 :   617185:       jmpq   bb90d <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x6b9>
    0.00 :   61718a:       mov    %rax,%r13
    0.00 :   61718d:       jmpq   bb91a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x6c6>
    0.00 :   617192:       mov    %rax,%r13
    0.00 :   617195:       jmpq   bb93b <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x6e7>
    0.00 :   61719a:       jmpq   bb966 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x712>
    0.00 :   61719f:       mov    %rax,%rbp
    0.00 :   6171a2:       jmpq   bb98a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x736>
    0.00 :   6171a7:       mov    %rax,%rbx
    0.00 :   6171aa:       jmpq   bb3a4 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x150>
    0.00 :   6171af:       mov    %rax,%rbp
    0.00 :   6171b2:       jmpq   bb978 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x724>
    0.00 :   6171b7:       mov    %rax,%r13
    0.00 :   6171ba:       jmpq   bb9ca <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x776>
    0.00 :   6171bf:       mov    %rax,%rbx
    0.00 :   6171c2:       jmpq   bb3ff <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x1ab>
    0.00 :   6171c7:       mov    %rax,%rbx
    0.00 :   6171ca:       jmpq   bb3f5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x1a1>
    0.00 :   6171cf:       mov    %rax,%rbx
    0.00 :   6171d2:       jmpq   bb9f5 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x7a1>
    0.00 :   6171d7:       mov    %rax,%r14
    0.00 :   6171da:       jmpq   bba26 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x7d2>
    0.00 :   6171df:       mov    %rax,%rbx
    0.00 :   6171e2:       jmpq   bba19 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x7c5>
    0.00 :   6171e7:       mov    %rax,%r14
    0.00 :   6171ea:       jmpq   bba47 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x7f3>
    0.00 :   6171ef:       mov    %rax,%rbx
    0.00 :   6171f2:       jmpq   bb5bc <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x368>
    0.00 :   6171f7:       mov    %rax,%rbx
    0.00 :   6171fa:       jmpq   bb7c2 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x56e>
    0.00 :   6171ff:       mov    %rax,%rbx
    0.00 :   617202:       jmpq   bb662 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x40e>
    0.00 :   617207:       mov    %rax,%rbx
    0.00 :   61720a:       jmpq   bba70 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x81c>
    0.00 :   61720f:       mov    %rax,%rbx
    0.00 :   617212:       jmpq   bb4e9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x295>
    0.00 :   617217:       jmpq   bba8a <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x836>
    0.00 :   61721c:       mov    %rax,%rbx
    0.00 :   61721f:       jmpq   bb315 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0xc1>
    0.00 :   617224:       mov    %rax,%rbx
    0.00 :   617227:       jmpq   bbabb <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x867>
    0.00 :   61722c:       mov    %rax,%rbx
    0.00 :   61722f:       jmpq   bba9c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x848>
    0.00 :   617234:       jmpq   bbaa9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x855>
    0.00 :   617239:       mov    %rax,%r13
    0.00 :   61723c:       jmpq   bb9a9 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x755>
    0.00 :   617241:       mov    %rax,%rbx
    0.00 :   617244:       jmpq   bbb08 <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x8b4>
    0.00 :   617249:       mov    %rax,%rbx
    0.00 :   61724c:       jmpq   bb85c <onnxruntime::SequentialExecutor::Execute(onnxruntime::SessionState const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> >&, std::unordered_map<unsigned long, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::function<onnxruntime::common::Status (onnxruntime::TensorShape const&, OrtMemoryInfo const&, OrtValue&, bool&)> > > > const&, onnxruntime::logging::Logger const&) [clone .cold.195]+0x608>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (13 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005aed90 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)>:
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aed90:       push   %r15
    0.00 :   5aed92:       mov    %rsi,%r15
    0.00 :   5aed95:       push   %r14
    0.00 :   5aed97:       mov    %rdx,%r14
    0.00 :   5aed9a:       push   %r13
    0.00 :   5aed9c:       mov    %rdi,%r13
    0.00 :   5aed9f:       push   %r12
    0.00 :   5aeda1:       push   %rbp
    0.00 :   5aeda2:       mov    %ecx,%ebp
    0.00 :   5aeda4:       push   %rbx
    0.00 :   5aeda5:       sub    $0x208,%rsp
    0.00 :   5aedac:       mov    0x48(%rsi),%rdi
    0.00 :   5aedb0:       mov    %r8,(%rsp)
    0.00 :   5aedb4:       mov    %r9,0x10(%rsp)
    0.00 :   5aedb9:       mov    %fs:0x28,%rax
    0.00 :   5aedc2:       mov    %rax,0x1f8(%rsp)
    0.00 :   5aedca:       xor    %eax,%eax
    0.00 :   5aedcc:       callq  5d95c0 <onnxruntime::SessionState::GetExecutionPlan() const>
    0.00 :   5aedd1:       test   %ebp,%ebp
    0.00 :   5aedd3:       js     5af9af <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc1f>
    0.00 :   5aedd9:       mov    0x8(%rax),%rcx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    3.80 :   5aeddd:       mov    0x10(%rax),%rdx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aede1:       movslq %ebp,%r9
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5aede4:       movabs $0xaaaaaaaaaaaaaaab,%rax
    0.00 :   5aedee:       sub    %rcx,%rdx
    0.00 :   5aedf1:       sar    $0x5,%rdx
    0.00 :   5aedf5:       imul   %rax,%rdx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aedf9:       cmp    %rdx,%r9
    0.00 :   5aedfc:       jae    5af9af <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc1f>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5aee02:       lea    (%r9,%r9,2),%rbx
    0.00 :   5aee06:       shl    $0x5,%rbx
    0.00 :   5aee0a:       add    %rcx,%rbx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aee0d:       mov    0x8(%rbx),%r12
   15.57 :   5aee11:       test   %r12,%r12
    0.00 :   5aee14:       je     5aef10 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x180>
    0.00 :   5aee1a:       lea    0x10(%rbx),%rax
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            find(const key_type& __k)
         :            -> iterator
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   5aee1e:       mov    0x58(%r15),%rsi
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   5aee22:       xor    %edx,%edx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aee24:       mov    %rax,0x8(%rsp)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5aee29:       mov    %r9,%rax
    0.00 :   5aee2c:       div    %rsi
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __n, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__n];
   16.09 :   5aee2f:       mov    0x50(%r15),%rax
    0.00 :   5aee33:       mov    (%rax,%rdx,8),%r8
    0.00 :   5aee37:       mov    %rdx,%r9
         :            if (!__prev_p)
    0.00 :   5aee3a:       test   %r8,%r8
    0.00 :   5aee3d:       je     5aeff0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x260>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   5aee43:       mov    (%r8),%rcx
    0.00 :   5aee46:       mov    0x8(%rcx),%edi
    0.00 :   5aee49:       jmp    5aee76 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xe6>
    0.00 :   5aee4b:       nopl   0x0(%rax,%rax,1)
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   5aee50:       mov    (%rcx),%rax
    0.00 :   5aee53:       test   %rax,%rax
    0.00 :   5aee56:       je     5aeff0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x260>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   5aee5c:       mov    0x8(%rax),%edi
         :            { return __num % __den; }
    0.00 :   5aee5f:       mov    %rcx,%r8
    0.00 :   5aee62:       xor    %edx,%edx
    0.00 :   5aee64:       mov    %rax,%rcx
         :
         :            /// Explicit specialization for short.
         :            _Cxx_hashtable_define_trivial_hash(short)
         :
         :            /// Explicit specialization for int.
         :            _Cxx_hashtable_define_trivial_hash(int)
    0.00 :   5aee67:       movslq %edi,%rax
    0.00 :   5aee6a:       div    %rsi
    0.00 :   5aee6d:       cmp    %rdx,%r9
    0.00 :   5aee70:       jne    5aeff0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x260>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   5aee76:       cmp    %ebp,%edi
    0.00 :   5aee78:       jne    5aee50 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc0>
         :            return static_cast<__node_type*>(__before_n->_M_nxt);
    0.00 :   5aee7a:       mov    (%r8),%rax
         :            return __p ? iterator(__p) : end();
    0.00 :   5aee7d:       test   %rax,%rax
    0.00 :   5aee80:       je     5aeff0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x260>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aee86:       cmpq   $0x0,(%rsp)
    0.00 :   5aee8b:       je     5afa51 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xcc1>
    0.00 :   5aee91:       movb   $0x0,0x30(%rsp)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            template<typename _Res, typename... _ArgTypes>
         :            _Res
         :            function<_Res(_ArgTypes...)>::
         :            operator()(_ArgTypes... __args) const
         :            {
         :            if (_M_empty())
    0.00 :   5aee96:       cmpq   $0x0,0x20(%rax)
    0.00 :   5aee9b:       je     5afa4c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xcbc>
         :            __throw_bad_function_call();
         :            return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    0.00 :   5aeea1:       lea    0x40(%rsp),%rsi
    0.00 :   5aeea6:       lea    0x30(%rsp),%r9
    0.00 :   5aeeab:       mov    %r14,%r8
    0.00 :   5aeeae:       mov    (%rsp),%rdx
    0.00 :   5aeeb2:       mov    %rsi,%rdi
    0.00 :   5aeeb5:       mov    0x8(%rsp),%rcx
    0.00 :   5aeeba:       lea    0x10(%rax),%rsi
    0.00 :   5aeebe:       callq  *0x28(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aeec1:       cmpb   $0x0,0x30(%rsp)
    0.00 :   5aeec6:       mov    0x40(%rsp),%rax
    0.00 :   5aeecb:       jne    5aeed6 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x146>
    0.00 :   5aeecd:       test   %rax,%rax
    0.00 :   5aeed0:       je     5af120 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x390>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5aeed6:       mov    %rax,0x0(%r13)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    3.12 :   5aeeda:       mov    0x1f8(%rsp),%rsi
    4.09 :   5aeee2:       xor    %fs:0x28,%rsi
    0.00 :   5aeeeb:       mov    %r13,%rax
    0.00 :   5aeeee:       jne    5afa47 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xcb7>
    0.00 :   5aeef4:       add    $0x208,%rsp
    0.00 :   5aeefb:       pop    %rbx
    0.00 :   5aeefc:       pop    %rbp
    0.00 :   5aeefd:       pop    %r12
    0.00 :   5aeeff:       pop    %r13
    0.00 :   5aef01:       pop    %r14
    0.00 :   5aef03:       pop    %r15
    0.00 :   5aef05:       retq
    0.00 :   5aef06:       nopw   %cs:0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :
         :            // DR 1261.
         :            inline string
         :            to_string(int __val)
         :            { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
         :            "%d", __val); }
    0.00 :   5aef10:       lea    0x60(%rsp),%r12
    0.00 :   5aef15:       mov    %ebp,%r8d
    0.00 :   5aef18:       mov    $0x10,%edx
    0.00 :   5aef1d:       xor    %eax,%eax
    0.00 :   5aef1f:       mov    0x678d22(%rip),%rsi        # c27c48 <vsnprintf@GLIBC_2.2.5>
    0.00 :   5aef26:       lea    0x318600(%rip),%rcx        # 8c752d <typeinfo name for google::protobuf::MessageLite+0xcd>
    0.00 :   5aef2d:       mov    %r12,%rdi
    0.00 :   5aef30:       callq  fd340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5aef35:       mov    $0x42,%r8d
    0.00 :   5aef3b:       xor    %edx,%edx
    0.00 :   5aef3d:       xor    %esi,%esi
    0.00 :   5aef3f:       lea    0x28f1f2(%rip),%rcx        # 83e138 <onnxruntime::Initializer::ReadExternalRawData(onnx::TensorProto const&, onnxruntime::Path const&, std::vector<char, std::allocator<char> >&)::__FUNCTION__+0x18>
    0.00 :   5aef46:       mov    %r12,%rdi
    0.00 :   5aef49:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5aef4e:       lea    0x80(%rsp),%rbx
    0.00 :   5aef56:       lea    0x10(%rbx),%rdx
    0.00 :   5aef5a:       mov    %rdx,0x80(%rsp)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aef62:       mov    (%rax),%rcx
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   5aef65:       lea    0x10(%rax),%rdx
         :            if (__str._M_is_local())
    0.00 :   5aef69:       cmp    %rdx,%rcx
    0.00 :   5aef6c:       je     5af330 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x5a0>
         :            { _M_dataplus._M_p = __p; }
    0.00 :   5aef72:       mov    %rcx,0x80(%rsp)
         :            _M_capacity(__str._M_allocated_capacity);
    0.00 :   5aef7a:       mov    0x10(%rax),%rcx
         :            { _M_allocated_capacity = __capacity; }
    0.00 :   5aef7e:       mov    %rcx,0x90(%rsp)
         :            _M_length(__str.length());
    0.00 :   5aef86:       mov    0x8(%rax),%rcx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aef8a:       mov    $0x2,%esi
    0.00 :   5aef8f:       mov    %r13,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { _M_string_length = __length; }
    0.00 :   5aef92:       mov    %rcx,0x88(%rsp)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aef9a:       mov    %rbx,%rcx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { _M_dataplus._M_p = __p; }
    0.00 :   5aef9d:       mov    %rdx,(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aefa0:       mov    $0x2,%edx
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { _M_string_length = __length; }
    0.00 :   5aefa5:       movq   $0x0,0x8(%rax)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5aefad:       movb   $0x0,0x10(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aefb1:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aefb6:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5aefbe:       add    $0x10,%rbx
    0.00 :   5aefc2:       cmp    %rbx,%rdi
    0.00 :   5aefc5:       je     5aefcc <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x23c>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5aefc7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aefcc:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5aefd1:       add    $0x10,%r12
    0.00 :   5aefd5:       cmp    %r12,%rdi
    0.00 :   5aefd8:       je     5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5aefde:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   5aefe3:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5aefe8:       nopl   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5aeff0:       mov    (%r12),%rax
    4.06 :   5aeff4:       mov    %r12,%rdi
    0.00 :   5aeff7:       callq  *0x30(%rax)
    0.00 :   5aeffa:       test   %al,%al
    0.00 :   5aeffc:       je     5af132 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x3a2>
    0.00 :   5af002:       cmpq   $0x0,(%rsp)
    0.00 :   5af007:       je     5afaeb <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xd5b>
    0.00 :   5af00d:       mov    (%r12),%rax
    0.00 :   5af011:       mov    %r12,%rdi
    0.00 :   5af014:       callq  *0x70(%rax)
    0.00 :   5af017:       mov    (%rbx),%r12d
    0.00 :   5af01a:       mov    %rax,%r11
    0.00 :   5af01d:       cmp    $0x1,%r12d
    0.00 :   5af021:       je     5af618 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x888>
    0.00 :   5af027:       jle    5af210 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x480>
    0.00 :   5af02d:       cmp    $0x4,%r12d
    0.00 :   5af031:       je     5af5b8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x828>
    0.00 :   5af037:       cmp    $0x5,%r12d
    0.00 :   5af03b:       jne    5af219 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x489>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af041:       mov    0x28(%rbx),%esi
    0.00 :   5af044:       mov    %r15,%rdi
    0.00 :   5af047:       callq  5a91d0 <onnxruntime::IExecutionFrame::GetMLValue(int) const>
         :
         :            __shared_count&
         :            operator=(const __shared_count& __r) noexcept
         :            {
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
         :            if (__tmp != _M_pi)
    0.00 :   5af04c:       mov    0x8(%r14),%rbp
         :            _M_get() const noexcept
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
         :            };
         :
         :            template<typename _Tp, _Lock_policy _Lp>
         :            class __shared_ptr
    0.00 :   5af050:       mov    (%rax),%rdx
    0.00 :   5af053:       mov    %rdx,(%r14)
    0.00 :   5af056:       mov    0x8(%rax),%r12
         :            if (__tmp != _M_pi)
    0.00 :   5af05a:       cmp    %rbp,%r12
    0.00 :   5af05d:       je     5af0a9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x319>
         :            if (__tmp != 0)
    0.00 :   5af05f:       test   %r12,%r12
    0.00 :   5af062:       je     5af07d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x2ed>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5af064:       cmpq   $0x0,0x678e9c(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af06c:       je     5af7e7 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa57>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af072:       lock addl $0x1,0x8(%r12)
    0.00 :   5af079:       mov    0x8(%r14),%rbp
         :            if (_M_pi != 0)
    0.00 :   5af07d:       test   %rbp,%rbp
    0.00 :   5af080:       je     5af0a5 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x315>
         :            if (__gthread_active_p())
    0.00 :   5af082:       mov    0x678e7f(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af089:       test   %rbx,%rbx
    0.00 :   5af08c:       je     5af7fd <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa6d>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af092:       mov    $0xffffffff,%edx
    0.00 :   5af097:       lock xadd %edx,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af09c:       cmp    $0x1,%edx
    0.00 :   5af09f:       je     5af88f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xaff>
         :            _M_pi = __tmp;
    0.00 :   5af0a5:       mov    %r12,0x8(%r14)
    0.00 :   5af0a9:       mov    0x10(%rax),%rdx
         :            class __shared_ptr
    0.00 :   5af0ad:       mov    0x20(%rax),%r12
         :            if (__tmp != _M_pi)
    0.00 :   5af0b1:       mov    0x20(%r14),%rbp
    0.00 :   5af0b5:       mov    %rdx,0x10(%r14)
         :            class __shared_ptr
    0.00 :   5af0b9:       mov    0x18(%rax),%rdx
    0.00 :   5af0bd:       mov    %rdx,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5af0c1:       cmp    %rbp,%r12
    0.00 :   5af0c4:       je     5af1fe <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46e>
         :            if (__tmp != 0)
    0.00 :   5af0ca:       test   %r12,%r12
    0.00 :   5af0cd:       je     5af0e8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x358>
         :            if (__gthread_active_p())
    0.00 :   5af0cf:       cmpq   $0x0,0x678e31(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af0d7:       je     5af7f2 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa62>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af0dd:       lock addl $0x1,0x8(%r12)
    0.00 :   5af0e4:       mov    0x20(%r14),%rbp
         :            if (_M_pi != 0)
    0.00 :   5af0e8:       test   %rbp,%rbp
    0.00 :   5af0eb:       je     5af110 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x380>
         :            if (__gthread_active_p())
    0.00 :   5af0ed:       mov    0x678e14(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af0f4:       test   %rbx,%rbx
    0.00 :   5af0f7:       je     5af80b <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa7b>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af0fd:       mov    $0xffffffff,%eax
    0.00 :   5af102:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af107:       cmp    $0x1,%eax
    0.00 :   5af10a:       je     5af8d4 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb44>
         :            _M_pi = __tmp;
    0.00 :   5af110:       mov    %r12,0x20(%r14)
    0.00 :   5af114:       jmpq   5af1fe <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46e>
    0.00 :   5af119:       nopl   0x0(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af120:       mov    (%r12),%rax
    0.00 :   5af124:       mov    %r12,%rdi
    0.00 :   5af127:       callq  *0x30(%rax)
    0.00 :   5af12a:       test   %al,%al
    0.00 :   5af12c:       jne    5af00d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x27d>
    0.00 :   5af132:       mov    (%r12),%rax
    0.00 :   5af136:       mov    %r12,%rdi
    0.00 :   5af139:       callq  *0x40(%rax)
    0.00 :   5af13c:       test   %al,%al
    0.00 :   5af13e:       jne    5af3e0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x650>
    0.00 :   5af144:       mov    (%r12),%rax
    0.00 :   5af148:       mov    %r12,%rdi
    0.00 :   5af14b:       callq  *0x38(%rax)
    0.00 :   5af14e:       test   %al,%al
    0.00 :   5af150:       je     5af348 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x5b8>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af156:       callq  59c110 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::TensorSeq>()>
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   5af15b:       mov    $0x20,%edi
    0.00 :   5af160:       mov    %rax,%rbp
    0.00 :   5af163:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5af168:       mov    %rbp,%rdi
    0.00 :   5af16b:       mov    %rax,%rbx
    0.00 :   5af16e:       movq   $0x0,(%rax)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5af175:       movq   $0x0,0x8(%rax)
    0.00 :   5af17d:       movq   $0x0,0x10(%rax)
    0.00 :   5af185:       movq   $0x0,0x18(%rax)
    0.00 :   5af18d:       mov    0x0(%rbp),%rax
    0.00 :   5af191:       callq  *0x20(%rax)
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5af194:       mov    $0x20,%edi
    0.00 :   5af199:       mov    %rax,%r12
    0.00 :   5af19c:       callq  53340 <operator new(unsigned long)@plt>
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af1a1:       lea    0x662608(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5af1a8:       mov    %r12,0x10(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af1ac:       movabs $0x100000001,%rsi
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5af1b6:       mov    0x8(%r14),%r12
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af1ba:       mov    %rsi,0x8(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af1be:       add    $0x10,%rdx
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5af1c2:       mov    %rbx,0x18(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af1c6:       mov    %rdx,(%rax)
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   5af1c9:       mov    %rbx,(%r14)
         :            __r._M_pi = _M_pi;
    0.00 :   5af1cc:       mov    %rax,0x8(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5af1d0:       test   %r12,%r12
    0.00 :   5af1d3:       je     5af1fa <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46a>
         :            if (__gthread_active_p())
    0.00 :   5af1d5:       mov    0x678d2c(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af1dc:       test   %rbx,%rbx
    0.00 :   5af1df:       je     5af720 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x990>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af1e5:       mov    $0xffffffff,%eax
    0.00 :   5af1ea:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af1f1:       cmp    $0x1,%eax
    0.00 :   5af1f4:       je     5af746 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x9b6>
    0.00 :   5af1fa:       mov    %rbp,0x10(%r14)
    4.96 :   5af1fe:       movq   $0x0,0x0(%r13)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   5af206:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5af20b:       nopl   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af210:       test   %r12d,%r12d
    0.00 :   5af213:       je     5af5b8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x828>
    0.00 :   5af219:       lea    0x80(%rsp),%rbx
    0.00 :   5af221:       mov    $0x10,%esi
    0.00 :   5af226:       mov    %rbx,%rdi
    0.00 :   5af229:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5af22e:       mov    $0x19,%edx
    0.00 :   5af233:       lea    0x2e0d43(%rip),%rsi        # 88ff7d <std::piecewise_construct+0x6a0>
    0.00 :   5af23a:       mov    %rbx,%rdi
    0.00 :   5af23d:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af242:       mov    %r12d,%esi
    0.00 :   5af245:       mov    %rbx,%rdi
    0.00 :   5af248:       callq  53be0 <std::ostream::operator<<(int)@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   5af24d:       lea    0x60(%rsp),%r12
    0.00 :   5af252:       lea    0x8(%rbx),%rsi
    0.00 :   5af256:       mov    %r12,%rdi
    0.00 :   5af259:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af25e:       mov    %r12,%rcx
    0.00 :   5af261:       mov    $0x1,%edx
    0.00 :   5af266:       mov    $0x2,%esi
    0.00 :   5af26b:       mov    %r13,%rdi
    0.00 :   5af26e:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5af273:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5af278:       add    $0x10,%r12
    0.00 :   5af27c:       cmp    %r12,%rdi
    0.00 :   5af27f:       je     5af286 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x4f6>
         :            ::operator delete(__p);
    0.00 :   5af281:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5af286:       mov    0x678ad3(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5af28d:       mov    0xd0(%rsp),%rdi
    0.00 :   5af295:       lea    0x18(%rax),%rdx
    0.00 :   5af299:       add    $0x40,%rax
    0.00 :   5af29d:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5af2a5:       mov    0x678d2c(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { }
    0.00 :   5af2ac:       mov    %rdx,0x80(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5af2b4:       add    $0x10,%rax
    0.00 :   5af2b8:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   5af2c0:       lea    0x60(%rbx),%rax
    0.00 :   5af2c4:       cmp    %rax,%rdi
    0.00 :   5af2c7:       je     5af2ce <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x53e>
    0.00 :   5af2c9:       callq  53300 <operator delete(void*)@plt>
         :
         :            public:
         :            /// Destructor deallocates no buffer space.
         :            virtual
         :            ~basic_streambuf()
         :            { }
    0.00 :   5af2ce:       mov    0x67898b(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5af2d5:       lea    0x40(%rbx),%rdi
    0.00 :   5af2d9:       add    $0x10,%rax
    0.00 :   5af2dd:       mov    %rax,0x88(%rsp)
    0.00 :   5af2e5:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5af2ea:       mov    0x678aaf(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *
         :            *  The destructor does nothing.  More specifically, it does not
         :            *  destroy the streambuf held by rdbuf().
         :            */
         :            virtual
         :            ~basic_ios() { }
    0.00 :   5af2f1:       lea    0x70(%rbx),%rdi
    0.00 :   5af2f5:       mov    0x8(%rax),%rdx
    0.00 :   5af2f9:       mov    0x10(%rax),%rax
    0.00 :   5af2fd:       mov    %rdx,0x80(%rsp)
    0.00 :   5af305:       mov    -0x18(%rdx),%rdx
    0.00 :   5af309:       mov    %rax,0x80(%rsp,%rdx,1)
    0.00 :   5af311:       mov    0x678810(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5af318:       add    $0x10,%rax
    0.00 :   5af31c:       mov    %rax,0xf0(%rsp)
    0.00 :   5af324:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5af329:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5af32e:       xchg   %ax,%ax
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
         :            static char_type*
         :            copy(char_type* __s1, const char_type* __s2, size_t __n)
         :            {
         :            if (__n == 0)
         :            return __s1;
         :            return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    0.00 :   5af330:       movdqu 0x10(%rax),%xmm0
    0.00 :   5af335:       movaps %xmm0,0x90(%rsp)
    0.00 :   5af33d:       jmpq   5aef86 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x1f6>
    0.00 :   5af342:       nopw   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af348:       mov    (%r12),%rax
    0.00 :   5af34c:       mov    %r12,%rdi
    0.00 :   5af34f:       callq  *0x70(%rax)
    0.00 :   5af352:       mov    %r12,%rdi
    0.00 :   5af355:       mov    %rax,%rbx
    0.00 :   5af358:       mov    (%r12),%rax
    0.00 :   5af35c:       callq  *0x20(%rax)
    0.00 :   5af35f:       mov    %rax,%rbp
    0.00 :   5af362:       callq  *%rbx
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5af364:       mov    $0x20,%edi
    0.00 :   5af369:       mov    %rax,%rbx
    0.00 :   5af36c:       callq  53340 <operator new(unsigned long)@plt>
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af371:       lea    0x662438(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5af378:       mov    %rbp,0x10(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af37c:       movabs $0x100000001,%rsi
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5af386:       mov    0x8(%r14),%rbp
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af38a:       mov    %rsi,0x8(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af38e:       add    $0x10,%rdx
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5af392:       mov    %rbx,0x18(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af396:       mov    %rdx,(%rax)
    0.00 :   5af399:       mov    %rbx,(%r14)
         :            __r._M_pi = _M_pi;
    0.00 :   5af39c:       mov    %rax,0x8(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5af3a0:       test   %rbp,%rbp
    0.00 :   5af3a3:       je     5af3c8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x638>
         :            if (__gthread_active_p())
    0.00 :   5af3a5:       mov    0x678b5c(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af3ac:       test   %rbx,%rbx
    0.00 :   5af3af:       je     5af710 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x980>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af3b5:       mov    $0xffffffff,%eax
    0.00 :   5af3ba:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af3bf:       cmp    $0x1,%eax
    0.00 :   5af3c2:       je     5af77d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x9ed>
    0.00 :   5af3c8:       mov    %r12,0x10(%r14)
    0.00 :   5af3cc:       movq   $0x0,0x0(%r13)
         :            constexpr _Head_base()
    0.00 :   5af3d4:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5af3d9:       nopl   0x0(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af3e0:       mov    0x48(%r15),%rax
    0.00 :   5af3e4:       mov    0x8(%rsp),%rdx
    0.00 :   5af3e9:       lea    0x30(%rsp),%rdi
    0.00 :   5af3ee:       mov    %r15,%rsi
    0.00 :   5af3f1:       mov    %rax,0x28(%rsp)
    0.00 :   5af3f6:       movzbl 0x2c(%rbx),%eax
    0.00 :   5af3fa:       mov    %al,0x20(%rsp)
    0.00 :   5af3fe:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af403:       mov    (%r12),%rax
    0.00 :   5af407:       mov    %r12,%rdi
    0.00 :   5af40a:       callq  *0x58(%rax)
    0.00 :   5af40d:       mov    (%rax),%rdx
    0.00 :   5af410:       mov    %rax,%rdi
    0.00 :   5af413:       callq  *0x70(%rdx)
    0.00 :   5af416:       mov    %rax,%rbp
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5af419:       mov    0x30(%rsp),%rax
    0.00 :   5af41e:       mov    %rax,0x40(%rsp)
         :            : _M_pi(__r._M_pi)
    0.00 :   5af423:       mov    0x38(%rsp),%rax
    0.00 :   5af428:       mov    %rax,0x48(%rsp)
         :            if (_M_pi != 0)
    0.00 :   5af42d:       test   %rax,%rax
    0.00 :   5af430:       je     5af445 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x6b5>
         :            if (__gthread_active_p())
    0.00 :   5af432:       cmpq   $0x0,0x678ace(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af43a:       je     5af700 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x970>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af440:       lock addl $0x1,0x8(%rax)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   5af445:       mov    $0xc8,%edi
    0.00 :   5af44a:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5af44f:       mov    %rax,%rbx
    0.00 :   5af452:       mov    0x10(%rsp),%rcx
    0.00 :   5af457:       lea    0x40(%rsp),%rax
    0.00 :   5af45c:       mov    %rbp,%rsi
    0.00 :   5af45f:       mov    (%rsp),%rdx
    0.00 :   5af463:       mov    %rax,%r8
    0.00 :   5af466:       mov    %rbx,%rdi
    0.00 :   5af469:       mov    %rax,0x18(%rsp)
    0.00 :   5af46e:       callq  5ed410 <onnxruntime::SparseTensor::SparseTensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, unsigned long, std::shared_ptr<onnxruntime::IAllocator>)>
         :            if (_M_pi != nullptr)
    0.00 :   5af473:       mov    0x48(%rsp),%rdi
    0.00 :   5af478:       test   %rdi,%rdi
    0.00 :   5af47b:       je     5af482 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x6f2>
         :            _M_pi->_M_release();
    0.00 :   5af47d:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   5af482:       callq  59c020 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::SparseTensor>()>
    0.00 :   5af487:       mov    (%rax),%rdx
    0.00 :   5af48a:       mov    %rax,%rdi
    0.00 :   5af48d:       callq  *0x20(%rdx)
    0.00 :   5af490:       mov    %rax,%rbp
    0.00 :   5af493:       callq  59c020 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::SparseTensor>()>
    0.00 :   5af498:       mov    $0x20,%edi
    0.00 :   5af49d:       mov    %rax,%r12
    0.00 :   5af4a0:       callq  53340 <operator new(unsigned long)@plt>
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af4a5:       lea    0x662304(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5af4ac:       mov    %rbp,0x10(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af4b0:       movabs $0x100000001,%rsi
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5af4ba:       mov    0x8(%r14),%rbp
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5af4be:       mov    %rsi,0x8(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af4c2:       add    $0x10,%rdx
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5af4c6:       mov    %rbx,0x18(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5af4ca:       mov    %rdx,(%rax)
    0.00 :   5af4cd:       mov    %rbx,(%r14)
         :            __r._M_pi = _M_pi;
    0.00 :   5af4d0:       mov    %rax,0x8(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5af4d4:       test   %rbp,%rbp
    0.00 :   5af4d7:       je     5af4fc <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x76c>
         :            if (__gthread_active_p())
    0.00 :   5af4d9:       mov    0x678a28(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5af4e0:       test   %rbx,%rbx
    0.00 :   5af4e3:       je     5af738 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x9a8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af4e9:       mov    $0xffffffff,%eax
    0.00 :   5af4ee:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af4f3:       cmp    $0x1,%eax
    0.00 :   5af4f6:       je     5af7b2 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa22>
    0.00 :   5af4fc:       cmpb   $0x0,0x20(%rsp)
    0.00 :   5af501:       mov    %r12,0x10(%r14)
    0.00 :   5af505:       je     5af593 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x803>
    0.00 :   5af50b:       mov    0x18(%r14),%rbp
    0.00 :   5af50f:       test   %rbp,%rbp
    0.00 :   5af512:       jne    5afb8d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xdfd>
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    0.00 :   5af518:       mov    0x30(%rsp),%rsi
    0.00 :   5af51d:       mov    (%rsi),%rax
    0.00 :   5af520:       mov    0x20(%rax),%rax
    0.00 :   5af524:       cmp    0x6785d5(%rip),%rax        # c27b00 <.got+0x40>
    0.00 :   5af52b:       jne    5af819 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa89>
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5af531:       movq   $0x0,0x40(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5af53a:       xor    %edx,%edx
    0.00 :   5af53c:       movq   $0x0,0x48(%rsp)
         :            if (__tmp != _M_pi)
    0.00 :   5af545:       mov    0x20(%r14),%r12
         :            class __shared_ptr
    0.00 :   5af549:       mov    %rdx,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5af54d:       test   %r12,%r12
    0.00 :   5af550:       je     5af593 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x803>
    0.00 :   5af552:       mov    0x6789af(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            if (__gthread_active_p())
    0.00 :   5af559:       test   %rbx,%rbx
    0.00 :   5af55c:       je     5af909 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb79>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af562:       mov    $0xffffffff,%eax
    0.00 :   5af567:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5af56e:       cmp    $0x1,%eax
    0.00 :   5af571:       je     5af951 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xbc1>
         :            _M_pi = __tmp;
    0.00 :   5af577:       mov    %rbp,0x20(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5af57b:       test   %rbp,%rbp
    0.00 :   5af57e:       jne    5afb85 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xdf5>
    0.00 :   5af584:       mov    0x48(%rsp),%rdi
    0.00 :   5af589:       test   %rdi,%rdi
    0.00 :   5af58c:       je     5af593 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x803>
         :            _M_pi->_M_release();
    0.00 :   5af58e:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            if (_M_pi != nullptr)
    0.00 :   5af593:       mov    0x38(%rsp),%rdi
    0.00 :   5af598:       movq   $0x0,0x0(%r13)
    0.00 :   5af5a0:       test   %rdi,%rdi
    0.00 :   5af5a3:       je     5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
         :            _M_pi->_M_release();
    0.00 :   5af5a9:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   5af5ae:       jmpq   5aeeda <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x14a>
    0.00 :   5af5b3:       nopl   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af5b8:       movzbl 0x2c(%rbx),%eax
    0.00 :   5af5bc:       lea    0x40(%rsp),%r12
    0.00 :   5af5c1:       mov    %ebp,%ecx
    0.00 :   5af5c3:       mov    %r15,%rsi
    0.00 :   5af5c6:       mov    %r11,%r8
    0.00 :   5af5c9:       mov    %r14,%rdx
    0.00 :   5af5cc:       mov    %r12,%rdi
    0.00 :   5af5cf:       push   %rax
    0.00 :   5af5d0:       pushq  0x8(%rsp)
    0.00 :   5af5d4:       mov    0x18(%rsp),%r9
    0.00 :   5af5d9:       callq  5aed40 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>
    0.00 :   5af5de:       pop    %rcx
    0.00 :   5af5df:       pop    %rsi
    0.00 :   5af5e0:       cmpq   $0x0,0x40(%rsp)
    0.00 :   5af5e6:       je     5af1fe <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46e>
    0.00 :   5af5ec:       mov    $0x22c,%r8d
    0.00 :   5af5f2:       lea    0x2e0d27(%rip),%rcx        # 890320 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__FUNCTION__>
    0.00 :   5af5f9:       mov    %r12,%rsi
    0.00 :   5af5fc:       xor    %edi,%edi
    0.00 :   5af5fe:       lea    0x2e0433(%rip),%rdx        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5af605:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5af60a:       mov    0x40(%rsp),%rax
    0.00 :   5af60f:       jmpq   5aeed6 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x146>
    0.00 :   5af614:       nopl   0x0(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af618:       mov    0x28(%rbx),%ebp
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
   18.92 :   5af61b:       mov    %r15,%rdi
    0.00 :   5af61e:       mov    %rax,0x18(%rsp)
    0.00 :   5af623:       mov    %ebp,%esi
    0.00 :   5af625:       callq  5a91d0 <onnxruntime::IExecutionFrame::GetMLValue(int) const>
    0.00 :   5af62a:       mov    0x18(%rsp),%r11
    0.00 :   5af62f:       cmpq   $0x0,(%rax)
   29.41 :   5af633:       je     5af6a0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x910>
    0.00 :   5af635:       lea    0x40(%rsp),%rsi
    0.00 :   5af63a:       cmpq   $0x0,0x10(%rax)
    0.00 :   5af63f:       mov    %rsi,0x18(%rsp)
    0.00 :   5af644:       je     5af6a0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x910>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af646:       movzbl 0x2c(%rbx),%eax
    0.00 :   5af64a:       mov    %r14,%rdx
    0.00 :   5af64d:       mov    %r11,%r8
    0.00 :   5af650:       mov    %ebp,%ecx
    0.00 :   5af652:       mov    %r15,%rsi
    0.00 :   5af655:       push   %rax
    0.00 :   5af656:       pushq  0x8(%rsp)
    0.00 :   5af65a:       mov    0x28(%rsp),%rbx
    0.00 :   5af65f:       mov    0x18(%rsp),%r9
    0.00 :   5af664:       mov    %rbx,%rdi
    0.00 :   5af667:       callq  5ac9c0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>
    0.00 :   5af66c:       pop    %rax
    0.00 :   5af66d:       pop    %rdx
    0.00 :   5af66e:       cmpq   $0x0,0x40(%rsp)
    0.00 :   5af674:       je     5af1fe <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46e>
    0.00 :   5af67a:       mov    $0x23a,%r8d
    0.00 :   5af680:       lea    0x2e0c99(%rip),%rcx        # 890320 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__FUNCTION__>
    0.00 :   5af687:       mov    %rbx,%rsi
    0.00 :   5af68a:       xor    %edi,%edi
    0.00 :   5af68c:       lea    0x2e03a5(%rip),%rdx        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5af693:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   5af698:       jmpq   5af60a <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x87a>
    0.00 :   5af69d:       nopl   (%rax)
    0.00 :   5af6a0:       lea    0x40(%rsp),%r12
    0.00 :   5af6a5:       mov    0x10(%rsp),%r9
    0.00 :   5af6aa:       mov    (%rsp),%r8
    0.00 :   5af6ae:       mov    %ebp,%ecx
    0.00 :   5af6b0:       mov    %rax,%rdx
    0.00 :   5af6b3:       mov    %r15,%rsi
    0.00 :   5af6b6:       mov    %r12,%rdi
    0.00 :   5af6b9:       mov    %r11,0x20(%rsp)
    0.00 :   5af6be:       mov    %r12,0x18(%rsp)
    0.00 :   5af6c3:       callq  5aed90 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)>
    0.00 :   5af6c8:       cmpq   $0x0,0x40(%rsp)
    0.00 :   5af6ce:       mov    0x20(%rsp),%r11
    0.00 :   5af6d3:       je     5af646 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x8b6>
    0.00 :   5af6d9:       mov    $0x237,%r8d
    0.00 :   5af6df:       lea    0x2e0c3a(%rip),%rcx        # 890320 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__FUNCTION__>
    0.00 :   5af6e6:       mov    %r12,%rsi
    0.00 :   5af6e9:       xor    %edi,%edi
    0.00 :   5af6eb:       lea    0x2e0346(%rip),%rdx        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5af6f2:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   5af6f7:       jmpq   5af60a <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x87a>
    0.00 :   5af6fc:       nopl   0x0(%rax)
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { *__mem += __val; }
    0.00 :   5af700:       addl   $0x1,0x8(%rax)
    0.00 :   5af704:       jmpq   5af445 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x6b5>
    0.00 :   5af709:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5af710:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af713:       lea    -0x1(%rax),%edx
    0.00 :   5af716:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   5af719:       jmpq   5af3bf <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x62f>
    0.00 :   5af71e:       xchg   %ax,%ax
         :            _Atomic_word __result = *__mem;
    0.00 :   5af720:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5af725:       lea    -0x1(%rax),%edx
    0.00 :   5af728:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5af72d:       jmpq   5af1f1 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x461>
    0.00 :   5af732:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5af738:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af73b:       lea    -0x1(%rax),%edx
    0.00 :   5af73e:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   5af741:       jmpq   5af4f3 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x763>
         :            _M_dispose();
    0.00 :   5af746:       mov    (%r12),%rax
    0.00 :   5af74a:       mov    %r12,%rdi
    0.00 :   5af74d:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af750:       test   %rbx,%rbx
    0.00 :   5af753:       je     5af937 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xba7>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af759:       mov    $0xffffffff,%eax
    0.00 :   5af75e:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af765:       cmp    $0x1,%eax
    0.00 :   5af768:       jne    5af1fa <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46a>
         :            _M_destroy();
    0.00 :   5af76e:       mov    (%r12),%rax
    0.00 :   5af772:       mov    %r12,%rdi
    0.00 :   5af775:       callq  *0x18(%rax)
    0.00 :   5af778:       jmpq   5af1fa <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x46a>
         :            _M_dispose();
    0.00 :   5af77d:       mov    0x0(%rbp),%rax
    0.00 :   5af781:       mov    %rbp,%rdi
    0.00 :   5af784:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af787:       test   %rbx,%rbx
    0.00 :   5af78a:       je     5af91b <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb8b>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af790:       mov    $0xffffffff,%eax
    0.00 :   5af795:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af79a:       cmp    $0x1,%eax
    0.00 :   5af79d:       jne    5af3c8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x638>
         :            _M_destroy();
    0.00 :   5af7a3:       mov    0x0(%rbp),%rax
    0.00 :   5af7a7:       mov    %rbp,%rdi
    0.00 :   5af7aa:       callq  *0x18(%rax)
    0.00 :   5af7ad:       jmpq   5af3c8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x638>
         :            _M_dispose();
    0.00 :   5af7b2:       mov    0x0(%rbp),%rax
    0.00 :   5af7b6:       mov    %rbp,%rdi
    0.00 :   5af7b9:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af7bc:       test   %rbx,%rbx
    0.00 :   5af7bf:       je     5af929 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb99>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af7c5:       mov    $0xffffffff,%eax
    0.00 :   5af7ca:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af7cf:       cmp    $0x1,%eax
    0.00 :   5af7d2:       jne    5af4fc <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x76c>
         :            _M_destroy();
    0.00 :   5af7d8:       mov    0x0(%rbp),%rax
    0.00 :   5af7dc:       mov    %rbp,%rdi
    0.00 :   5af7df:       callq  *0x18(%rax)
    0.00 :   5af7e2:       jmpq   5af4fc <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x76c>
         :            { *__mem += __val; }
    0.00 :   5af7e7:       addl   $0x1,0x8(%r12)
    0.00 :   5af7ed:       jmpq   5af07d <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x2ed>
    0.00 :   5af7f2:       addl   $0x1,0x8(%r12)
    0.00 :   5af7f8:       jmpq   5af0e8 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x358>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af7fd:       mov    0x8(%rbp),%edx
         :            *__mem += __val;
    0.00 :   5af800:       lea    -0x1(%rdx),%ecx
    0.00 :   5af803:       mov    %ecx,0x8(%rbp)
         :            return __result;
    0.00 :   5af806:       jmpq   5af09c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x30c>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af80b:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af80e:       lea    -0x1(%rax),%edx
    0.00 :   5af811:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   5af814:       jmpq   5af107 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x377>
    0.00 :   5af819:       mov    0x28(%rsp),%rdx
    0.00 :   5af81e:       mov    0x18(%rsp),%rdi
    0.00 :   5af823:       callq  *%rax
    0.00 :   5af825:       mov    0x48(%rsp),%rax
         :            __shared_count(const __shared_count& __r) noexcept
    0.00 :   5af82a:       mov    0x40(%rsp),%rdx
         :            if (_M_pi != 0)
    0.00 :   5af82f:       test   %rax,%rax
    0.00 :   5af832:       je     5af545 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7b5>
         :            if (__gthread_active_p())
    0.00 :   5af838:       mov    0x6786c9(%rip),%rbx        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   5af83f:       lea    0x8(%rax),%rcx
    0.00 :   5af843:       test   %rbx,%rbx
    0.00 :   5af846:       je     5af883 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xaf3>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af848:       lock addl $0x1,(%rcx)
         :            if (__tmp != _M_pi)
    0.00 :   5af84c:       mov    0x20(%r14),%r12
         :            class __shared_ptr
    0.00 :   5af850:       mov    %rdx,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5af854:       cmp    %r12,%rax
    0.00 :   5af857:       je     5af876 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xae6>
         :            if (__gthread_active_p())
    0.00 :   5af859:       test   %rbx,%rbx
    0.00 :   5af85c:       je     5af889 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xaf9>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af85e:       lock addl $0x1,(%rcx)
    0.00 :   5af862:       mov    0x20(%r14),%r12
         :            if (_M_pi != 0)
    0.00 :   5af866:       test   %r12,%r12
    0.00 :   5af869:       jne    5af949 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xbb9>
         :            _M_pi = __tmp;
    0.00 :   5af86f:       mov    %rax,0x20(%r14)
    0.00 :   5af873:       mov    %rax,%r12
         :            _M_pi->_M_release();
    0.00 :   5af876:       mov    %r12,%rdi
    0.00 :   5af879:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   5af87e:       jmpq   5af584 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7f4>
         :            { *__mem += __val; }
    0.00 :   5af883:       addl   $0x1,0x8(%rax)
    0.00 :   5af887:       jmp    5af84c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xabc>
    0.00 :   5af889:       addl   $0x1,0x8(%rax)
    0.00 :   5af88d:       jmp    5af866 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xad6>
         :            _M_dispose();
    0.00 :   5af88f:       mov    0x0(%rbp),%rdx
    0.00 :   5af893:       mov    %rax,(%rsp)
    0.00 :   5af897:       mov    %rbp,%rdi
    0.00 :   5af89a:       callq  *0x10(%rdx)
         :            if (__gthread_active_p())
    0.00 :   5af89d:       test   %rbx,%rbx
    0.00 :   5af8a0:       mov    (%rsp),%rax
    0.00 :   5af8a4:       je     5af992 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc02>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af8aa:       mov    $0xffffffff,%edx
    0.00 :   5af8af:       lock xadd %edx,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af8b4:       cmp    $0x1,%edx
    0.00 :   5af8b7:       jne    5af0a5 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x315>
         :            _M_destroy();
    0.00 :   5af8bd:       mov    0x0(%rbp),%rdx
    0.00 :   5af8c1:       mov    %rax,(%rsp)
    0.00 :   5af8c5:       mov    %rbp,%rdi
    0.00 :   5af8c8:       callq  *0x18(%rdx)
    0.00 :   5af8cb:       mov    (%rsp),%rax
    0.00 :   5af8cf:       jmpq   5af0a5 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x315>
         :            _M_dispose();
    0.00 :   5af8d4:       mov    0x0(%rbp),%rax
    0.00 :   5af8d8:       mov    %rbp,%rdi
    0.00 :   5af8db:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af8de:       test   %rbx,%rbx
    0.00 :   5af8e1:       je     5af984 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xbf4>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af8e7:       mov    $0xffffffff,%eax
    0.00 :   5af8ec:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af8f1:       cmp    $0x1,%eax
    0.00 :   5af8f4:       jne    5af110 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x380>
         :            _M_destroy();
    0.00 :   5af8fa:       mov    0x0(%rbp),%rax
    0.00 :   5af8fe:       mov    %rbp,%rdi
    0.00 :   5af901:       callq  *0x18(%rax)
    0.00 :   5af904:       jmpq   5af110 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x380>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af909:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5af90e:       lea    -0x1(%rax),%edx
    0.00 :   5af911:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5af916:       jmpq   5af56e <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7de>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af91b:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af91e:       lea    -0x1(%rax),%edx
    0.00 :   5af921:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5af924:       jmpq   5af79a <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa0a>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af929:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af92c:       lea    -0x1(%rax),%edx
    0.00 :   5af92f:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5af932:       jmpq   5af7cf <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xa3f>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af937:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5af93c:       lea    -0x1(%rax),%edx
    0.00 :   5af93f:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5af944:       jmpq   5af765 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x9d5>
         :            if (_M_pi != 0)
    0.00 :   5af949:       mov    %rax,%rbp
    0.00 :   5af94c:       jmpq   5af559 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7c9>
         :            _M_dispose();
    0.00 :   5af951:       mov    (%r12),%rax
    0.00 :   5af955:       mov    %r12,%rdi
    0.00 :   5af958:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5af95b:       test   %rbx,%rbx
    0.00 :   5af95e:       je     5af9a0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xc10>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5af960:       mov    $0xffffffff,%eax
    0.00 :   5af965:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5af96c:       cmp    $0x1,%eax
    0.00 :   5af96f:       jne    5af577 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7e7>
         :            _M_destroy();
    0.00 :   5af975:       mov    (%r12),%rax
    0.00 :   5af979:       mov    %r12,%rdi
    0.00 :   5af97c:       callq  *0x18(%rax)
    0.00 :   5af97f:       jmpq   5af577 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0x7e7>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af984:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5af987:       lea    -0x1(%rax),%edx
    0.00 :   5af98a:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5af98d:       jmpq   5af8f1 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb61>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af992:       mov    0xc(%rbp),%edx
         :            *__mem += __val;
    0.00 :   5af995:       lea    -0x1(%rdx),%ecx
    0.00 :   5af998:       mov    %ecx,0xc(%rbp)
         :            return __result;
    0.00 :   5af99b:       jmpq   5af8b4 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xb24>
         :            _Atomic_word __result = *__mem;
    0.00 :   5af9a0:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5af9a5:       lea    -0x1(%rax),%edx
    0.00 :   5af9a8:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5af9ad:       jmp    5af96c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xbdc>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af9af:       mov    $0xa0,%edi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af9b4:       lea    0x60(%rsp),%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af9b9:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af9be:       mov    %r12,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af9c1:       mov    %rax,%rbp
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5af9c4:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5af9c9:       lea    0x40(%rsp),%rax
    0.00 :   5af9ce:       mov    %rax,%rdi
    0.00 :   5af9d1:       mov    %rax,0x18(%rsp)
    0.00 :   5af9d6:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5af9db:       mov    0x18(%rsp),%r14
    0.00 :   5af9e0:       lea    0x80(%rsp),%rbx
    0.00 :   5af9e8:       lea    0x2e0951(%rip),%rcx        # 890340 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5af9ef:       mov    $0x209,%edx
    0.00 :   5af9f4:       lea    0x2e003d(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5af9fb:       mov    %rbx,%rdi
    0.00 :   5af9fe:       mov    %r14,%r8
    0.00 :   5afa01:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5afa06:       mov    %r12,%rcx
    0.00 :   5afa09:       lea    0x2e0490(%rip),%rdx        # 88fea0 <std::piecewise_construct+0x5c3>
    0.00 :   5afa10:       mov    %rbx,%rsi
    0.00 :   5afa13:       mov    %rbp,%rdi
    0.00 :   5afa16:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5afa1b:       mov    %rbx,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afa1e:       add    $0x10,%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa22:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5afa27:       mov    %r14,%rdi
    0.00 :   5afa2a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5afa2f:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5afa34:       cmp    %r12,%rdi
    0.00 :   5afa37:       je     b20d0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x22a>
         :            ::operator delete(__p);
    0.00 :   5afa3d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5afa42:       jmpq   b20d0 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x22a>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa47:       callq  53460 <__stack_chk_fail@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            __throw_bad_function_call();
    0.00 :   5afa4c:       callq  52bd0 <std::__throw_bad_function_call()@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa51:       mov    $0xa0,%edi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afa56:       lea    0x60(%rsp),%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa5b:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afa60:       lea    0x2e0491(%rip),%rsi        # 88fef8 <std::piecewise_construct+0x61b>
    0.00 :   5afa67:       mov    %r12,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa6a:       mov    %rax,%rbp
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afa6d:       callq  5a9190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.189]>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afa72:       lea    0x40(%rsp),%r14
    0.00 :   5afa77:       mov    %r14,%rdi
    0.00 :   5afa7a:       mov    %r14,0x18(%rsp)
    0.00 :   5afa7f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5afa84:       lea    0x80(%rsp),%rbx
    0.00 :   5afa8c:       mov    %r14,%r8
    0.00 :   5afa8f:       lea    0x2e08aa(%rip),%rcx        # 890340 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5afa96:       mov    $0x217,%edx
    0.00 :   5afa9b:       lea    0x2dff96(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5afaa2:       mov    %rbx,%rdi
    0.00 :   5afaa5:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5afaaa:       mov    %r12,%rcx
    0.00 :   5afaad:       lea    0x295552(%rip),%rdx        # 845006 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x786>
    0.00 :   5afab4:       mov    %rbx,%rsi
    0.00 :   5afab7:       mov    %rbp,%rdi
    0.00 :   5afaba:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5afabf:       mov    %rbx,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afac2:       add    $0x10,%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afac6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5afacb:       mov    %r14,%rdi
    0.00 :   5aface:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5afad3:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5afad8:       cmp    %r12,%rdi
    0.00 :   5afadb:       je     b1f3f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x99>
    0.00 :   5afae1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5afae6:       jmpq   b1f3f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x99>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afaeb:       mov    $0xa0,%edi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afaf0:       lea    0x60(%rsp),%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afaf5:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afafa:       lea    0x2e044f(%rip),%rsi        # 88ff50 <std::piecewise_construct+0x673>
    0.00 :   5afb01:       mov    %r12,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afb04:       mov    %rax,%rbp
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afb07:       callq  5a9190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.189]>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afb0c:       lea    0x40(%rsp),%r14
    0.00 :   5afb11:       mov    %r14,%rdi
    0.00 :   5afb14:       mov    %r14,0x18(%rsp)
    0.00 :   5afb19:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5afb1e:       lea    0x80(%rsp),%rbx
    0.00 :   5afb26:       mov    %r14,%r8
    0.00 :   5afb29:       lea    0x2e0810(%rip),%rcx        # 890340 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5afb30:       mov    $0x220,%edx
    0.00 :   5afb35:       lea    0x2dfefc(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5afb3c:       mov    %rbx,%rdi
    0.00 :   5afb3f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5afb44:       mov    %r12,%rcx
    0.00 :   5afb47:       lea    0x2954b8(%rip),%rdx        # 845006 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x786>
    0.00 :   5afb4e:       mov    %rbx,%rsi
    0.00 :   5afb51:       mov    %rbp,%rdi
    0.00 :   5afb54:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5afb59:       mov    %rbx,%rdi
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
    0.00 :   5afb5c:       add    $0x10,%r12
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm():
    0.00 :   5afb60:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5afb65:       mov    %r14,%rdi
    0.00 :   5afb68:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime14ExecutionFrame27AllocateAsPerAllocationPlanER8OrtValueiPKNS_11TensorShapeEm.localalias.418():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5afb6d:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5afb72:       cmp    %r12,%rdi
    0.00 :   5afb75:       je     b2156 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x2b0>
    0.00 :   5afb7b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5afb80:       jmpq   b2156 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x2b0>
         :            if (_M_pi != nullptr)
    0.00 :   5afb85:       mov    %rbp,%r12
    0.00 :   5afb88:       jmpq   5af876 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)+0xae6>
    0.00 :   5afb8d:       mov    $0xa0,%edi
    0.00 :   5afb92:       lea    0x60(%rsp),%r12
    0.00 :   5afb97:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5afb9c:       mov    %r12,%rdi
    0.00 :   5afb9f:       mov    %rax,%r13
    0.00 :   5afba2:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5afba7:       mov    0x18(%rsp),%r14
    0.00 :   5afbac:       mov    %r14,%rdi
    0.00 :   5afbaf:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5afbb4:       lea    0x80(%rsp),%rbx
    0.00 :   5afbbc:       mov    %r14,%r8
    0.00 :   5afbbf:       lea    0x2e067a(%rip),%rcx        # 890240 <onnxruntime::AllocateSparseTensor(OrtValue&, onnxruntime::DataTypeImpl const&, std::shared_ptr<onnxruntime::IAllocator>, onnxruntime::TensorShape const&, unsigned long, bool, onnxruntime::SessionState const&)::__PRETTY_FUNCTION__>
    0.00 :   5afbc6:       mov    $0x1fc,%edx
    0.00 :   5afbcb:       lea    0x2dfe66(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5afbd2:       mov    %rbx,%rdi
    0.00 :   5afbd5:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5afbda:       mov    %r12,%rcx
    0.00 :   5afbdd:       lea    0x2e03b3(%rip),%rdx        # 88ff97 <std::piecewise_construct+0x6ba>
    0.00 :   5afbe4:       mov    %rbx,%rsi
    0.00 :   5afbe7:       mov    %r13,%rdi
    0.00 :   5afbea:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5afbef:       mov    %rbx,%rdi
    0.00 :   5afbf2:       add    $0x10,%r12
    0.00 :   5afbf6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5afbfb:       mov    %r14,%rdi
    0.00 :   5afbfe:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5afc03:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5afc08:       cmp    %r12,%rdi
    0.00 :   5afc0b:       je     b1ec9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x23>
    0.00 :   5afc11:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5afc16:       jmpq   b1ec9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x23>
    0.00 :   5afc1b:       mov    %rax,%rbp
    0.00 :   5afc1e:       jmpq   b1ea6 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]>
    0.00 :   5afc23:       mov    %rax,%rbp
    0.00 :   5afc26:       jmpq   b1eb9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x13>
    0.00 :   5afc2b:       mov    %rax,%rbp
    0.00 :   5afc2e:       jmpq   b1ef9 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x53>
    0.00 :   5afc33:       mov    %rax,%rbx
    0.00 :   5afc36:       jmpq   b1f28 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x82>
    0.00 :   5afc3b:       mov    %rax,%rbp
    0.00 :   5afc3e:       jmpq   b1ee2 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x3c>
    0.00 :   5afc43:       jmpq   b1f55 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xaf>
    0.00 :   5afc48:       mov    %rax,%r13
    0.00 :   5afc4b:       jmpq   b1f77 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xd1>
    0.00 :   5afc50:       mov    %rax,%rbx
    0.00 :   5afc53:       jmpq   b1f82 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xdc>
    0.00 :   5afc58:       mov    %rax,%rbx
    0.00 :   5afc5b:       jmpq   b1f8c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xe6>
    0.00 :   5afc60:       mov    %rax,%rbx
    0.00 :   5afc63:       jmpq   b1f9f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0xf9>
    0.00 :   5afc68:       mov    %rax,%r12
    0.00 :   5afc6b:       jmpq   b1faf <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x109>
    0.00 :   5afc70:       jmpq   b1fdf <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x139>
    0.00 :   5afc75:       jmpq   b2010 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x16a>
    0.00 :   5afc7a:       mov    %rax,%rbp
    0.00 :   5afc7d:       jmpq   b2022 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x17c>
    0.00 :   5afc82:       mov    %rax,%rbp
    0.00 :   5afc85:       jmpq   b2063 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x1bd>
    0.00 :   5afc8a:       mov    %rax,%rbp
    0.00 :   5afc8d:       jmpq   b2070 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x1ca>
    0.00 :   5afc92:       mov    %rax,%rbp
    0.00 :   5afc95:       jmpq   b1ee2 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x3c>
    0.00 :   5afc9a:       mov    %rax,%rbx
    0.00 :   5afc9d:       jmpq   b2088 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x1e2>
    0.00 :   5afca2:       mov    %rax,%rbp
    0.00 :   5afca5:       jmpq   b209f <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x1f9>
    0.00 :   5afcaa:       mov    %rax,%rbp
    0.00 :   5afcad:       jmpq   b20b5 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x20f>
    0.00 :   5afcb2:       mov    %rax,%r13
    0.00 :   5afcb5:       jmpq   b20e6 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x240>
    0.00 :   5afcba:       mov    %rax,%rbx
    0.00 :   5afcbd:       jmpq   b20f1 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x24b>
    0.00 :   5afcc2:       mov    %rax,%rbx
    0.00 :   5afcc5:       jmpq   b20fb <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x255>
    0.00 :   5afcca:       mov    %rax,%rbp
    0.00 :   5afccd:       jmpq   b1f01 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x5b>
    0.00 :   5afcd2:       mov    %rax,%rbp
    0.00 :   5afcd5:       jmpq   b1f0b <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x65>
    0.00 :   5afcda:       mov    %rax,%r13
    0.00 :   5afcdd:       jmpq   b211e <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x278>
    0.00 :   5afce2:       mov    %rax,%rbx
    0.00 :   5afce5:       jmpq   b2129 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x283>
    0.00 :   5afcea:       mov    %rax,%rbx
    0.00 :   5afced:       jmpq   b2133 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x28d>
    0.00 :   5afcf2:       mov    %rax,%rbx
    0.00 :   5afcf5:       jmpq   b2146 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x2a0>
    0.00 :   5afcfa:       mov    %rax,%rbx
    0.00 :   5afcfd:       jmpq   b216c <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long) [clone .cold.438]+0x2c6>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (8 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c76c0 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)>:
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c76c0:       push   %r14
    0.00 :   5c76c2:       push   %r13
    0.00 :   5c76c4:       push   %r12
    0.00 :   5c76c6:       push   %rbp
    0.00 :   5c76c7:       push   %rbx
    0.00 :   5c76c8:       mov    %rdi,%rbx
    0.00 :   5c76cb:       sub    $0x1c0,%rsp
    0.00 :   5c76d2:       mov    %fs:0x28,%rax
    0.00 :   5c76db:       mov    %rax,0x1b8(%rsp)
    0.00 :   5c76e3:       xor    %eax,%eax
    0.00 :   5c76e5:       lea    0x65c324(%rip),%rax        # c23a10 <vtable for onnxruntime::OpKernelContext>
    0.00 :   5c76ec:       mov    %rsi,0x8(%rdi)
    0.00 :   5c76f0:       mov    %rdx,0x10(%rdi)
    0.00 :   5c76f4:       add    $0x10,%rax
    0.00 :   5c76f8:       mov    %rcx,0x18(%rdi)
    0.00 :   5c76fc:       mov    %rax,(%rdi)
    0.00 :   5c76ff:       mov    $0xffffffffffffffff,%rax
    0.00 :   5c7706:       mov    %r8,0x20(%rdi)
    0.00 :   5c770a:       mov    %rax,0x28(%rdi)
    0.00 :   5c770e:       mov    %eax,0x30(%rdi)
    0.00 :   5c7711:       test   %rsi,%rsi
    0.00 :   5c7714:       je     5c77b7 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)+0xf7>
    0.00 :   5c771a:       test   %rdx,%rdx
    0.00 :   5c771d:       je     5c78fb <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)+0x23b>
    0.00 :   5c7723:       mov    %rsi,%rbp
    0.00 :   5c7726:       mov    %rdx,%rdi
    0.00 :   5c7729:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   5c772e:       mov    0x8(%rbp),%rdx
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7732:       mov    (%rax),%rax
   59.76 :   5c7735:       sub    0x18(%rdx),%rax
    0.00 :   5c7739:       cmp    0x48(%rdx),%rax
    0.00 :   5c773d:       jae    5c7859 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)+0x199>
    0.00 :   5c7743:       mov    0x20(%rdx),%rdx
    0.00 :   5c7747:       mov    0x10(%rbx),%rdi
    0.00 :   5c774b:       mov    (%rdx,%rax,4),%r12d
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
   40.24 :   5c774f:       mov    %r12d,0x28(%rbx)
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7753:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   5c7758:       mov    0x10(%rbx),%rdi
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5c775c:       mov    0xb0(%rax),%rbp
    0.00 :   5c7763:       sub    0xa8(%rax),%rbp
    0.00 :   5c776a:       sar    $0x3,%rbp
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c776e:       add    %r12d,%ebp
    0.00 :   5c7771:       mov    %ebp,0x2c(%rbx)
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7774:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   5c7779:       mov    0xf8(%rax),%rdx
    0.00 :   5c7780:       sub    0xf0(%rax),%rdx
    0.00 :   5c7787:       sar    $0x3,%rdx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c778b:       add    %edx,%ebp
    0.00 :   5c778d:       mov    %ebp,0x30(%rbx)
    0.00 :   5c7790:       mov    0x1b8(%rsp),%rax
    0.00 :   5c7798:       xor    %fs:0x28,%rax
    0.00 :   5c77a1:       jne    5c7854 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)+0x194>
    0.00 :   5c77a7:       add    $0x1c0,%rsp
    0.00 :   5c77ae:       pop    %rbx
    0.00 :   5c77af:       pop    %rbp
    0.00 :   5c77b0:       pop    %r12
    0.00 :   5c77b2:       pop    %r13
    0.00 :   5c77b4:       pop    %r14
    0.00 :   5c77b6:       retq
    0.00 :   5c77b7:       mov    $0xa0,%edi
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5c77bc:       lea    0x20(%rsp),%rbx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c77c1:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c77c6:       lea    0x2cb0ad(%rip),%rdx        # 89287a <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0x7a>
    0.00 :   5c77cd:       mov    %rbx,%rdi
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c77d0:       mov    %rax,%r13
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c77d3:       lea    -0x18(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5c77d7:       lea    0x10(%rbx),%rax
    0.00 :   5c77db:       mov    %rax,0x20(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c77e0:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c77e5:       mov    %rsp,%r12
    0.00 :   5c77e8:       mov    %r12,%rdi
    0.00 :   5c77eb:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5c77f0:       lea    0x40(%rsp),%rbp
    0.00 :   5c77f5:       mov    %r12,%r8
    0.00 :   5c77f8:       lea    0x2cb301(%rip),%rcx        # 892b00 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)::__PRETTY_FUNCTION__>
    0.00 :   5c77ff:       mov    $0x1f,%edx
    0.00 :   5c7804:       lea    0x2cb0a5(%rip),%rsi        # 8928b0 <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0xb0>
    0.00 :   5c780b:       mov    %rbp,%rdi
    0.00 :   5c780e:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5c7813:       mov    %rbx,%rcx
    0.00 :   5c7816:       lea    0x2cb05e(%rip),%rdx        # 89287b <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0x7b>
    0.00 :   5c781d:       mov    %rbp,%rsi
    0.00 :   5c7820:       mov    %r13,%rdi
    0.00 :   5c7823:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5c7828:       mov    %rbp,%rdi
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            if (!_M_is_local())
    0.00 :   5c782b:       add    $0x10,%rbx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c782f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5c7834:       mov    %r12,%rdi
    0.00 :   5c7837:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5c783c:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5c7841:       cmp    %rbx,%rdi
    0.00 :   5c7844:       je     b4964 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5c784a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5c784f:       jmpq   b4964 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]>
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7854:       callq  53460 <__stack_chk_fail@plt>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7859:       lea    0x40(%rsp),%rbp
    0.00 :   5c785e:       mov    $0xa0,%edi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   5c7863:       lea    0x20(%rsp),%rbx
    0.00 :   5c7868:       mov    %rsp,%r12
    0.00 :   5c786b:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5c7870:       mov    $0x10,%esi
    0.00 :   5c7875:       mov    %rbp,%rdi
    0.00 :   5c7878:       mov    %rax,%r13
    0.00 :   5c787b:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   5c7880:       lea    0x8(%rbp),%rsi
    0.00 :   5c7884:       mov    %rbx,%rdi
    0.00 :   5c7887:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   5c788c:       mov    %rbp,%rdi
    0.00 :   5c788f:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   5c7894:       mov    %r12,%rdi
    0.00 :   5c7897:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5c789c:       mov    %r12,%r8
    0.00 :   5c789f:       mov    $0x23,%edx
    0.00 :   5c78a4:       mov    %rbp,%rdi
    0.00 :   5c78a7:       lea    0x2cb1f2(%rip),%rcx        # 892aa0 <onnxruntime::NodeIndexInfo::GetNodeOffset(unsigned long) const::__PRETTY_FUNCTION__>
    0.00 :   5c78ae:       lea    0x2c8103(%rip),%rsi        # 88f9b8 <std::piecewise_construct+0xdb>
    0.00 :   5c78b5:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5c78ba:       mov    %rbx,%rcx
    0.00 :   5c78bd:       lea    0x2cb02c(%rip),%rdx        # 8928f0 <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0xf0>
    0.00 :   5c78c4:       mov    %rbp,%rsi
    0.00 :   5c78c7:       mov    %r13,%rdi
    0.00 :   5c78ca:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5c78cf:       mov    %rbp,%rdi
    0.00 :   5c78d2:       add    $0x10,%rbx
    0.00 :   5c78d6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5c78db:       mov    %r12,%rdi
    0.00 :   5c78de:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5c78e3:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5c78e8:       cmp    %rbx,%rdi
    0.00 :   5c78eb:       je     b49fc <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x98>
    0.00 :   5c78f1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5c78f6:       jmpq   b49fc <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x98>
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c78fb:       mov    $0xa0,%edi
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5c7900:       lea    0x20(%rsp),%rbx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7905:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c790a:       lea    0x2caf8c(%rip),%rdx        # 89289d <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0x9d>
    0.00 :   5c7911:       mov    %rbx,%rdi
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7914:       mov    %rax,%r13
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7917:       lea    -0x11(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5c791b:       lea    0x10(%rbx),%rax
    0.00 :   5c791f:       mov    %rax,0x20(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c7924:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7929:       mov    %rsp,%r12
    0.00 :   5c792c:       mov    %r12,%rdi
    0.00 :   5c792f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5c7934:       lea    0x40(%rsp),%rbp
    0.00 :   5c7939:       mov    %r12,%r8
    0.00 :   5c793c:       lea    0x2cb1bd(%rip),%rcx        # 892b00 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&)::__PRETTY_FUNCTION__>
    0.00 :   5c7943:       mov    $0x20,%edx
    0.00 :   5c7948:       lea    0x2caf61(%rip),%rsi        # 8928b0 <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0xb0>
    0.00 :   5c794f:       mov    %rbp,%rdi
    0.00 :   5c7952:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5c7957:       mov    %rbx,%rcx
    0.00 :   5c795a:       lea    0x2caf3d(%rip),%rdx        # 89289e <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0x9e>
    0.00 :   5c7961:       mov    %rbp,%rsi
    0.00 :   5c7964:       mov    %r13,%rdi
    0.00 :   5c7967:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5c796c:       mov    %rbp,%rdi
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            if (!_M_is_local())
    0.00 :   5c796f:       add    $0x10,%rbx
         :            _ZN11onnxruntime15OpKernelContextC2EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
    0.00 :   5c7973:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5c7978:       mov    %r12,%rdi
    0.00 :   5c797b:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime15OpKernelContextC1EPNS_15IExecutionFrameEPKNS_8OpKernelEPNS_11concurrency10ThreadPoolERKNS_7logging6LoggerE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5c7980:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5c7985:       cmp    %rbx,%rdi
    0.00 :   5c7988:       je     b497a <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x16>
    0.00 :   5c798e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5c7993:       jmpq   b497a <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x16>
    0.00 :   5c7998:       mov    %rax,%r14
    0.00 :   5c799b:       jmpq   b4990 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x2c>
    0.00 :   5c79a0:       mov    %rax,%rbp
    0.00 :   5c79a3:       jmpq   b499b <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x37>
    0.00 :   5c79a8:       mov    %rax,%rbp
    0.00 :   5c79ab:       jmpq   b49a3 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x3f>
    0.00 :   5c79b0:       mov    %rax,%rbp
    0.00 :   5c79b3:       jmpq   b49b6 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x52>
    0.00 :   5c79b8:       mov    %rax,%r14
    0.00 :   5c79bb:       jmpq   b49c6 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x62>
    0.00 :   5c79c0:       mov    %rax,%rbp
    0.00 :   5c79c3:       jmpq   b49d1 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x6d>
    0.00 :   5c79c8:       mov    %rax,%rbp
    0.00 :   5c79cb:       jmpq   b49d9 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x75>
    0.00 :   5c79d0:       mov    %rax,%rbp
    0.00 :   5c79d3:       jmpq   b49ec <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0x88>
    0.00 :   5c79d8:       mov    %rax,%r14
    0.00 :   5c79db:       jmpq   b4a12 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0xae>
    0.00 :   5c79e0:       mov    %rax,%rbp
    0.00 :   5c79e3:       jmpq   b4a1d <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0xb9>
    0.00 :   5c79e8:       mov    %rax,%rbp
    0.00 :   5c79eb:       jmpq   b4a25 <onnxruntime::OpKernelContext::OpKernelContext(onnxruntime::IExecutionFrame*, onnxruntime::OpKernel const*, onnxruntime::concurrency::ThreadPool*, onnxruntime::logging::Logger const&) [clone .cold.130]+0xc1>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (12 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000461340 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime7Reshape7ComputeEPNS_15OpKernelContextE():
    4.06 :   461340:       push   %r15
    0.00 :   461342:       mov    $0x1,%esi
    0.00 :   461347:       push   %r14
    0.00 :   461349:       push   %r13
    0.00 :   46134b:       push   %r12
    0.00 :   46134d:       mov    %rdi,%r12
    0.00 :   461350:       mov    %rdx,%rdi
    0.00 :   461353:       push   %rbp
    0.00 :   461354:       mov    %rdx,%rbp
    0.00 :   461357:       push   %rbx
    0.00 :   461358:       sub    $0x1f8,%rsp
    0.00 :   46135f:       mov    %fs:0x28,%rax
    0.00 :   461368:       mov    %rax,0x1e8(%rsp)
    0.00 :   461370:       xor    %eax,%eax
    0.00 :   461372:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   461377:       mov    0x18(%rax),%rdx
   63.03 :   46137b:       mov    %rax,%r13
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   46137e:       mov    0x20(%rax),%rax
    0.00 :   461382:       sub    %rdx,%rax
    0.00 :   461385:       cmp    $0x8,%rax
    0.00 :   461389:       jne    4616ed <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x3ad>
    0.00 :   46138f:       mov    0x30(%r13),%rax
    0.00 :   461393:       mov    (%rdx),%rbx
   12.90 :   461396:       cmpl   $0x7,0x8(%rax)
   13.49 :   46139a:       jne    461603 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x2c3>
    0.00 :   4613a0:       shl    $0x3,%rbx
    0.00 :   4613a4:       mov    0x0(%r13),%r14
    0.00 :   4613a8:       mov    0x50(%r13),%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4613ac:       movq   $0x0,0x10(%rsp)
    0.00 :   4613b5:       movq   $0x0,0x18(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4613be:       mov    %rbx,%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4613c1:       movq   $0x0,0x20(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4613ca:       sar    $0x3,%rax
    0.00 :   4613ce:       je     461590 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x250>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   4613d4:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   4613de:       cmp    %rdx,%rax
    0.00 :   4613e1:       ja     46176f <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x42f>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4613e7:       mov    %rbx,%rdi
    0.00 :   4613ea:       callq  53340 <operator new(unsigned long)@plt>
         :            _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
         :            std::forward_iterator_tag)
         :            {
         :            const size_type __n = std::distance(__first, __last);
         :            this->_M_impl._M_start = this->_M_allocate(__n);
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4613ef:       lea    (%rax,%rbx,1),%r15
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4613f3:       mov    %rax,0x10(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4613f8:       mov    %r15,0x20(%rsp)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   4613fd:       test   %rbx,%rbx
    0.00 :   461400:       je     461411 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0xd1>
    0.00 :   461402:       lea    (%r14,%r13,1),%rsi
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   461406:       mov    %rbx,%rdx
    0.00 :   461409:       mov    %rax,%rdi
    0.00 :   46140c:       callq  53aa0 <memmove@plt>
    0.00 :   461411:       xor    %esi,%esi
    0.00 :   461413:       mov    %rbp,%rdi
         :            this->_M_impl._M_finish =
    0.00 :   461416:       mov    %r15,0x18(%rsp)
    0.00 :   46141b:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   461420:       lea    0x18(%rax),%r13
    0.00 :   461424:       lea    0x10(%rsp),%rdx
    0.00 :   461429:       mov    %rax,%rbx
    0.00 :   46142c:       lea    0xf(%rsp),%rdi
    0.00 :   461431:       mov    %r13,%rsi
    0.00 :   461434:       callq  460170 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   461439:       mov    0x18(%rsp),%rax
    0.00 :   46143e:       mov    0x10(%rsp),%rsi
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   461443:       movq   $0x0,0x30(%rsp)
    0.00 :   46144c:       movq   $0x0,0x38(%rsp)
    0.00 :   461455:       movq   $0x0,0x40(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   46145e:       mov    %rax,%r14
    0.00 :   461461:       sub    %rsi,%r14
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   461464:       mov    %r14,%rdx
    0.00 :   461467:       sar    $0x3,%rdx
    0.00 :   46146b:       je     4615a0 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x260>
         :            if (__n > this->max_size())
    0.00 :   461471:       movabs $0x1fffffffffffffff,%rax
    0.00 :   46147b:       cmp    %rax,%rdx
    0.00 :   46147e:       ja     46176a <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x42a>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   461484:       mov    %r14,%rdi
    0.00 :   461487:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   46148c:       mov    %rax,%rcx
    0.00 :   46148f:       mov    0x18(%rsp),%rax
    0.00 :   461494:       mov    0x10(%rsp),%rsi
    0.00 :   461499:       mov    %rax,%r15
    0.00 :   46149c:       sub    %rsi,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   46149f:       add    %rcx,%r14
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4614a2:       mov    %rcx,0x30(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   4614a7:       mov    %rcx,0x38(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4614ac:       mov    %r14,0x40(%rsp)
         :            if (_Num)
    0.00 :   4614b1:       cmp    %rax,%rsi
    0.00 :   4614b4:       je     4614c4 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x184>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   4614b6:       mov    %rcx,%rdi
    6.52 :   4614b9:       mov    %r15,%rdx
    0.00 :   4614bc:       callq  53aa0 <memmove@plt>
    0.00 :   4614c1:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   4614c4:       add    %r15,%rcx
    0.00 :   4614c7:       lea    0x30(%rsp),%rdx
    0.00 :   4614cc:       xor    %esi,%esi
    0.00 :   4614ce:       mov    %rbp,%rdi
    0.00 :   4614d1:       mov    %rcx,0x38(%rsp)
    0.00 :   4614d6:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4614db:       mov    0x30(%rsp),%rdi
    0.00 :   4614e0:       mov    %rax,%r14
         :            if (__p)
    0.00 :   4614e3:       test   %rdi,%rdi
    0.00 :   4614e6:       je     4614ed <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x1ad>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   4614e8:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4614ed:       mov    0x50(%r14),%rbp
    0.00 :   4614f1:       add    (%r14),%rbp
    0.00 :   4614f4:       mov    0x50(%rbx),%r14
    0.00 :   4614f8:       add    (%rbx),%r14
    0.00 :   4614fb:       cmp    %r14,%rbp
    0.00 :   4614fe:       je     461549 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x209>
    0.00 :   461500:       mov    0x30(%rbx),%rax
    0.00 :   461504:       mov    (%rax),%rdx
    0.00 :   461507:       mov    0x68(%rdx),%rdx
    0.00 :   46150b:       cmp    0x7c6a86(%rip),%rdx        # c27f98 <.got+0x4d8>
    0.00 :   461512:       jne    4615f0 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x2b0>
    0.00 :   461518:       cmpl   $0x8,0x8(%rax)
    0.00 :   46151c:       je     4615b0 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x270>
    0.00 :   461522:       mov    %r13,%rdi
    0.00 :   461525:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   46152a:       mov    0x30(%rbx),%rdi
    0.00 :   46152e:       mov    %rax,%r13
    0.00 :   461531:       mov    (%rdi),%rax
    0.00 :   461534:       callq  *0x18(%rax)
    0.00 :   461537:       mov    %r13,%rdx
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   46153a:       mov    %r14,%rsi
    0.00 :   46153d:       mov    %rbp,%rdi
         :            _ZNK11onnxruntime7Reshape7ComputeEPNS_15OpKernelContextE():
    0.00 :   461540:       imul   %rax,%rdx
         :            memcpy():
    0.00 :   461544:       callq  53150 <memcpy@plt>
         :            _ZNK11onnxruntime7Reshape7ComputeEPNS_15OpKernelContextE():
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   461549:       mov    0x10(%rsp),%rdi
    0.00 :   46154e:       movq   $0x0,(%r12)
         :            if (__p)
    0.00 :   461556:       test   %rdi,%rdi
    0.00 :   461559:       je     461560 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x220>
    0.00 :   46155b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   461560:       mov    0x1e8(%rsp),%rcx
    0.00 :   461568:       xor    %fs:0x28,%rcx
    0.00 :   461571:       mov    %r12,%rax
    0.00 :   461574:       jne    461765 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x425>
    0.00 :   46157a:       add    $0x1f8,%rsp
    0.00 :   461581:       pop    %rbx
    0.00 :   461582:       pop    %rbp
    0.00 :   461583:       pop    %r12
    0.00 :   461585:       pop    %r13
    0.00 :   461587:       pop    %r14
    0.00 :   461589:       pop    %r15
    0.00 :   46158b:       retq
    0.00 :   46158c:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   461590:       xor    %eax,%eax
    0.00 :   461592:       jmpq   4613ef <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0xaf>
    0.00 :   461597:       nopw   0x0(%rax,%rax,1)
    0.00 :   4615a0:       mov    %r14,%r15
    0.00 :   4615a3:       xor    %ecx,%ecx
    0.00 :   4615a5:       jmpq   46149f <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x15f>
    0.00 :   4615aa:       nopw   0x0(%rax,%rax,1)
    0.00 :   4615b0:       mov    %r14,%rbx
    0.00 :   4615b3:       xor    %r14d,%r14d
    0.00 :   4615b6:       jmp    4615d7 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x297>
    0.00 :   4615b8:       nopl   0x0(%rax,%rax,1)
         :            *  @return  Reference to this string.
         :            */
         :            basic_string&
         :            assign(const basic_string& __str)
         :            {
         :            this->_M_assign(__str);
    0.00 :   4615c0:       mov    %rbx,%rsi
    0.00 :   4615c3:       mov    %rbp,%rdi
    0.00 :   4615c6:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   4615cb:       add    $0x1,%r14
    0.00 :   4615cf:       add    $0x20,%rbp
    0.00 :   4615d3:       add    $0x20,%rbx
    0.00 :   4615d7:       mov    %r13,%rdi
    0.00 :   4615da:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   4615df:       cmp    %r14,%rax
    0.00 :   4615e2:       jg     4615c0 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x280>
    0.00 :   4615e4:       jmpq   461549 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x209>
    0.00 :   4615e9:       nopl   0x0(%rax)
    0.00 :   4615f0:       mov    %rax,%rdi
    0.00 :   4615f3:       callq  *%rdx
    0.00 :   4615f5:       test   %rax,%rax
    0.00 :   4615f8:       je     461522 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x1e2>
    0.00 :   4615fe:       jmpq   461518 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x1d8>
    0.00 :   461603:       lea    0x70(%rsp),%rbp
    0.00 :   461608:       mov    $0xa0,%edi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   46160d:       lea    0x50(%rsp),%rbx
    0.00 :   461612:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   461617:       mov    $0x10,%esi
    0.00 :   46161c:       mov    %rbp,%rdi
    0.00 :   46161f:       lea    0x30(%rsp),%r14
    0.00 :   461624:       mov    %rax,%r12
    0.00 :   461627:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   46162c:       lea    0x3c41be(%rip),%rsi        # 8257f1 <_fini+0x559>
    0.00 :   461633:       mov    %rbp,%rdi
    0.00 :   461636:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   46163b:       lea    0x3c41c6(%rip),%rsi        # 825808 <_fini+0x570>
    0.00 :   461642:       mov    %rbp,%rdi
    0.00 :   461645:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   46164a:       lea    0x3c41ba(%rip),%rsi        # 82580b <_fini+0x573>
    0.00 :   461651:       mov    %rbp,%rdi
    0.00 :   461654:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   461659:       mov    0x30(%r13),%rsi
    0.00 :   46165d:       mov    %rbp,%rdi
    0.00 :   461660:       callq  59ce30 <onnxruntime::operator<<(std::ostream&, onnxruntime::DataTypeImpl const*)>
    0.00 :   461665:       lea    0x8(%rbp),%rsi
    0.00 :   461669:       mov    %rbx,%rdi
    0.00 :   46166c:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   461671:       mov    %rbp,%rdi
    0.00 :   461674:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   461679:       mov    %r14,%rdi
    0.00 :   46167c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   461681:       mov    %r14,%r8
    0.00 :   461684:       mov    $0x97,%edx
    0.00 :   461689:       mov    %rbp,%rdi
    0.00 :   46168c:       lea    0x41412d(%rip),%rcx        # 8757c0 <onnxruntime::Tensor::Data<long>() const::__PRETTY_FUNCTION__>
    0.00 :   461693:       lea    0x3c4176(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   46169a:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   46169f:       mov    %rbx,%rcx
    0.00 :   4616a2:       lea    0x3c41a7(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   4616a9:       mov    %rbp,%rsi
    0.00 :   4616ac:       mov    %r12,%rdi
    0.00 :   4616af:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   4616b4:       mov    %rbp,%rdi
         :            if (!_M_is_local())
    0.00 :   4616b7:       add    $0x10,%rbx
    0.00 :   4616bb:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   4616c0:       mov    %r14,%rdi
    0.00 :   4616c3:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4616c8:       mov    0x50(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4616cd:       cmp    %rbx,%rdi
    0.00 :   4616d0:       je     4616d7 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x397>
    0.00 :   4616d2:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4616d7:       lea    -0x367fbe(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   4616de:       lea    0x7aff4b(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   4616e5:       mov    %r12,%rdi
    0.00 :   4616e8:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   4616ed:       mov    $0xa0,%edi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4616f2:       lea    0x50(%rsp),%rbx
    0.00 :   4616f7:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4616fc:       lea    0x413f9c(%rip),%rdx        # 87569f <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x2bf>
    0.00 :   461703:       mov    %rbx,%rdi
    0.00 :   461706:       mov    %rax,%r12
    0.00 :   461709:       lea    -0x27(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   46170d:       lea    0x10(%rbx),%rax
    0.00 :   461711:       mov    %rax,0x50(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   461716:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   46171b:       lea    0x30(%rsp),%r14
    0.00 :   461720:       mov    %r14,%rdi
    0.00 :   461723:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   461728:       lea    0x70(%rsp),%rbp
    0.00 :   46172d:       mov    %r14,%r8
    0.00 :   461730:       lea    0x4140c9(%rip),%rcx        # 875800 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const::__PRETTY_FUNCTION__>
    0.00 :   461737:       mov    $0x18,%edx
    0.00 :   46173c:       lea    0x413cdd(%rip),%rsi        # 875420 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x40>
    0.00 :   461743:       mov    %rbp,%rdi
    0.00 :   461746:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   46174b:       mov    %rbx,%rcx
    0.00 :   46174e:       lea    0x413f4b(%rip),%rdx        # 8756a0 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x2c0>
    0.00 :   461755:       mov    %rbp,%rsi
    0.00 :   461758:       mov    %r12,%rdi
    0.00 :   46175b:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   461760:       jmpq   4616b4 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x374>
    0.00 :   461765:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   46176a:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   46176f:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   461774:       mov    %rax,%r13
    0.00 :   461777:       jmp    46177e <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x43e>
    0.00 :   461779:       mov    %rax,%rbp
    0.00 :   46177c:       jmp    461789 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x449>
    0.00 :   46177e:       mov    %rbp,%rdi
    0.00 :   461781:       mov    %r13,%rbp
    0.00 :   461784:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   461789:       mov    %r14,%rdi
    0.00 :   46178c:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   461791:       mov    0x50(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   461796:       add    $0x10,%rbx
    0.00 :   46179a:       cmp    %rbx,%rdi
    0.00 :   46179d:       je     4617a4 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x464>
         :            ::operator delete(__p);
    0.00 :   46179f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4617a4:       mov    %r12,%rdi
    0.00 :   4617a7:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   4617ac:       mov    %rbp,%rdi
    0.00 :   4617af:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4617b4:       jmp    461774 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x434>
    0.00 :   4617b6:       jmp    461779 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x439>
    0.00 :   4617b8:       mov    %rax,%rbp
    0.00 :   4617bb:       jmp    461791 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x451>
    0.00 :   4617bd:       mov    %rax,%rbx
    0.00 :   4617c0:       jmp    4617d6 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x496>
    0.00 :   4617c2:       jmp    4617bd <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x47d>
    0.00 :   4617c4:       mov    %rax,%rbx
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4617c7:       mov    0x30(%rsp),%rdi
         :            if (__p)
    0.00 :   4617cc:       test   %rdi,%rdi
    0.00 :   4617cf:       je     4617d6 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x496>
    0.00 :   4617d1:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4617d6:       mov    0x10(%rsp),%rdi
         :            if (__p)
    0.00 :   4617db:       test   %rdi,%rdi
    0.00 :   4617de:       je     4617e5 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x4a5>
    0.00 :   4617e0:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   4617e5:       mov    %rbx,%rdi
    0.00 :   4617e8:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   4617ed:       jmp    4617b8 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x478>
    0.00 :   4617ef:       mov    %rax,%rbp
    0.00 :   4617f2:       jmp    4617a4 <onnxruntime::Reshape::Compute(onnxruntime::OpKernelContext*) const+0x464>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (8 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>:
         :            _ZNK11onnxruntime15OpKernelContext5InputINS_6TensorEEEPKT_i():
   28.56 :   221800:       push   %r15
   11.60 :   221802:       push   %r14
    0.00 :   221804:       push   %r13
    0.00 :   221806:       push   %r12
    0.00 :   221808:       push   %rbp
    0.00 :   221809:       push   %rbx
    0.00 :   22180a:       sub    $0x208,%rsp
    0.00 :   221811:       mov    %rdi,(%rsp)
    0.00 :   221815:       mov    %esi,0xc(%rsp)
    0.00 :   221819:       mov    %fs:0x28,%rax
    0.00 :   221822:       mov    %rax,0x1f8(%rsp)
    0.00 :   22182a:       xor    %eax,%eax
    0.00 :   22182c:       callq  5c7570 <onnxruntime::OpKernelContext::GetInputMLValue(int) const>
    0.00 :   221831:       mov    %rax,%rbx
    0.00 :   221834:       test   %rax,%rax
    0.00 :   221837:       je     221d03 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x503>
    0.00 :   22183d:       mov    0x10(%rax),%rdi
   59.83 :   221841:       test   %rdi,%rdi
    0.00 :   221844:       je     221854 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x54>
    0.00 :   221846:       mov    (%rdi),%rax
    0.00 :   221849:       callq  *0x30(%rax)
    0.00 :   22184c:       test   %al,%al
    0.00 :   22184e:       jne    221d00 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x500>
    0.00 :   221854:       mov    $0xa0,%edi
    0.00 :   221859:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   22185e:       mov    0x10(%rbx),%rdi
    0.00 :   221862:       mov    %rax,0x10(%rsp)
    0.00 :   221867:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   22186c:       lea    0x80(%rsp),%rbx
    0.00 :   221874:       mov    %rax,%r13
    0.00 :   221877:       lea    0x70(%rbx),%rdi
    0.00 :   22187b:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   221880:       mov    0xa062a1(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   221887:       xor    %esi,%esi
    0.00 :   221889:       movq   $0x0,0x1c8(%rsp)
    0.00 :   221895:       movq   $0x0,0x1d8(%rsp)
    0.00 :   2218a1:       movq   $0x0,0x1e0(%rsp)
    0.00 :   2218ad:       add    $0x10,%rax
    0.00 :   2218b1:       mov    %rax,0xf0(%rsp)
    0.00 :   2218b9:       xor    %eax,%eax
    0.00 :   2218bb:       mov    %ax,0x1d0(%rsp)
    0.00 :   2218c3:       mov    0xa064d6(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2218ca:       movq   $0x0,0x1e8(%rsp)
    0.00 :   2218d6:       mov    0x8(%rax),%rbp
    0.00 :   2218da:       mov    0x10(%rax),%r12
    0.00 :   2218de:       movq   $0x0,0x1f0(%rsp)
    0.00 :   2218ea:       mov    -0x18(%rbp),%rdi
    0.00 :   2218ee:       mov    %rbp,0x80(%rsp)
    0.00 :   2218f6:       add    %rbx,%rdi
    0.00 :   2218f9:       mov    %r12,(%rdi)
    0.00 :   2218fc:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   221901:       mov    0xa06458(%rip),%r14        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   221908:       lea    0x40(%rbx),%rdi
    0.00 :   22190c:       movq   $0x0,0x90(%rsp)
    0.00 :   221918:       movq   $0x0,0x98(%rsp)
    0.00 :   221924:       movq   $0x0,0xa0(%rsp)
    0.00 :   221930:       lea    0x18(%r14),%rax
    0.00 :   221934:       mov    %rax,0x80(%rsp)
    0.00 :   22193c:       lea    0x40(%r14),%rax
    0.00 :   221940:       mov    %rax,0xf0(%rsp)
    0.00 :   221948:       mov    0xa06311(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   22194f:       movq   $0x0,0xa8(%rsp)
    0.00 :   22195b:       movq   $0x0,0xb0(%rsp)
    0.00 :   221967:       add    $0x10,%rax
    0.00 :   22196b:       mov    %rax,0x88(%rsp)
    0.00 :   221973:       movq   $0x0,0xb8(%rsp)
    0.00 :   22197f:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   221984:       mov    0xa0664d(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   22198b:       lea    0x8(%rbx),%rsi
    0.00 :   22198f:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   221993:       movl   $0x10,0xc8(%rsp)
    0.00 :   22199e:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   2219a2:       movb   $0x0,0xe0(%rsp)
    0.00 :   2219aa:       mov    %rax,0x88(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2219b2:       lea    0x60(%rbx),%rax
    0.00 :   2219b6:       mov    %rax,0xd0(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   2219be:       movq   $0x0,0xd8(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2219ca:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   2219cf:       mov    $0x21,%edx
    0.00 :   2219d4:       lea    0x605935(%rip),%rsi        # 827310 <std::piecewise_construct+0x570>
    0.00 :   2219db:       mov    %rbx,%rdi
    0.00 :   2219de:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!__s)
    0.00 :   2219e3:       test   %r13,%r13
    0.00 :   2219e6:       je     221d50 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x550>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   2219ec:       mov    %r13,%rdi
    0.00 :   2219ef:       callq  52c60 <strlen@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2219f4:       mov    %r13,%rsi
    0.00 :   2219f7:       mov    %rbx,%rdi
    0.00 :   2219fa:       mov    %rax,%rdx
    0.00 :   2219fd:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221a02:       lea    0x60(%rsp),%r15
         :            { __c1 = __c2; }
    0.00 :   221a07:       movb   $0x0,0x70(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   221a0c:       movq   $0x0,0x68(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221a15:       lea    0x10(%r15),%rax
    0.00 :   221a19:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   221a1e:       mov    0xb0(%rsp),%rax
    0.00 :   221a26:       test   %rax,%rax
    0.00 :   221a29:       je     221d80 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x580>
         :            if (this->pptr() > this->egptr())
    0.00 :   221a2f:       mov    0xa0(%rsp),%r8
    0.00 :   221a37:       mov    0xa8(%rsp),%rcx
    0.00 :   221a3f:       cmp    %r8,%rax
    0.00 :   221a42:       ja     221d30 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x530>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   221a48:       sub    %rcx,%r8
    0.00 :   221a4b:       xor    %edx,%edx
    0.00 :   221a4d:       xor    %esi,%esi
    0.00 :   221a4f:       mov    %r15,%rdi
    0.00 :   221a52:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   221a57:       lea    0x18(%r14),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221a5b:       mov    0xd0(%rsp),%rdi
    0.00 :   221a63:       mov    %rax,0x80(%rsp)
    0.00 :   221a6b:       lea    0x40(%r14),%rax
    0.00 :   221a6f:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   221a77:       mov    0xa0655a(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   221a7e:       add    $0x10,%rax
    0.00 :   221a82:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   221a8a:       lea    0x60(%rbx),%rax
    0.00 :   221a8e:       cmp    %rax,%rdi
    0.00 :   221a91:       je     221a98 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x298>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   221a93:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   221a98:       mov    0xa061c1(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   221a9f:       lea    0x40(%rbx),%rdi
    0.00 :   221aa3:       add    $0x10,%rax
    0.00 :   221aa7:       mov    %rax,0x88(%rsp)
    0.00 :   221aaf:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   221ab4:       mov    -0x18(%rbp),%rax
         :            ~basic_ios() { }
    0.00 :   221ab8:       lea    0x70(%rbx),%rdi
    0.00 :   221abc:       mov    %rbp,0x80(%rsp)
    0.00 :   221ac4:       mov    %r12,0x80(%rsp,%rax,1)
    0.00 :   221acc:       mov    0xa06055(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   221ad3:       add    $0x10,%rax
    0.00 :   221ad7:       mov    %rax,0xf0(%rsp)
    0.00 :   221adf:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   221ae4:       lea    0x20(%rsp),%rdi
    0.00 :   221ae9:       mov    %rdi,0x18(%rsp)
    0.00 :   221aee:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221af3:       lea    0x60587d(%rip),%rdx        # 827377 <std::piecewise_construct+0x5d7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221afa:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221afe:       mov    %rbx,%rdi
    0.00 :   221b01:       lea    -0x3f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221b05:       mov    %rax,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221b0d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   221b12:       lea    0x61d984(%rip),%rdx        # 83f49d <OrtValue::Get<onnxruntime::Tensor>() const::__PRETTY_FUNCTION__+0x3d>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221b19:       lea    0x38(%rbx),%rax
    0.00 :   221b1d:       movl   $0x57,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221b28:       lea    0x28(%rbx),%rdi
    0.00 :   221b2c:       lea    -0x3d(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   221b30:       mov    %rax,0xa8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221b38:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   221b3d:       mov    0x28(%rsp),%r13
    0.00 :   221b42:       mov    0x20(%rsp),%rbp
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   221b47:       movq   $0x0,0xc8(%rsp)
    0.00 :   221b53:       movq   $0x0,0xd0(%rsp)
    0.00 :   221b5f:       movq   $0x0,0xd8(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   221b6b:       mov    %r13,%r12
    0.00 :   221b6e:       sub    %rbp,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   221b71:       mov    %r12,%rax
    0.00 :   221b74:       sar    $0x5,%rax
    0.00 :   221b78:       je     221d70 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x570>
         :            if (__n > this->max_size())
    0.00 :   221b7e:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   221b88:       cmp    %rdx,%rax
    0.00 :   221b8b:       ja     221d96 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x596>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   221b91:       mov    %r12,%rdi
    0.00 :   221b94:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   221b99:       mov    0x28(%rsp),%r13
    0.00 :   221b9e:       mov    0x20(%rsp),%rbp
    0.00 :   221ba3:       mov    %rax,%r14
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   221ba6:       add    %r14,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   221ba9:       mov    %r14,0xc8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   221bb1:       mov    %r12,0xd8(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   221bb9:       mov    %r14,%r12
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   221bbc:       mov    %r14,0xd0(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   221bc4:       cmp    %r13,%rbp
    0.00 :   221bc7:       je     221bf9 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x3f9>
    0.00 :   221bc9:       nopl   0x0(%rax)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221bd0:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221bd5:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221bd8:       mov    %rax,(%r12)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   221bdc:       mov    0x0(%rbp),%rsi
    0.00 :   221be0:       mov    0x8(%rbp),%rdx
    0.00 :   221be4:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221be7:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   221bec:       add    $0x20,%rbp
    0.00 :   221bf0:       add    $0x20,%r12
    0.00 :   221bf4:       cmp    %rbp,%r13
    0.00 :   221bf7:       jne    221bd0 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x3d0>
    0.00 :   221bf9:       mov    0x10(%rsp),%rdi
    0.00 :   221bfe:       mov    %r15,%rcx
    0.00 :   221c01:       lea    0x67136d(%rip),%rdx        # 892f75 <onnxruntime::MemPatternPlanner::TraceAllocation(int, unsigned long)::__PRETTY_FUNCTION__+0x175>
    0.00 :   221c08:       mov    %rbx,%rsi
         :            this->_M_impl._M_finish =
    0.00 :   221c0b:       mov    %r12,0xd0(%rsp)
    0.00 :   221c13:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   221c18:       mov    0xd0(%rsp),%rbp
    0.00 :   221c20:       mov    0xc8(%rsp),%r12
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   221c28:       cmp    %r12,%rbp
    0.00 :   221c2b:       je     221c54 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x454>
    0.00 :   221c2d:       nopl   (%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221c30:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   221c34:       lea    0x10(%r12),%rax
    0.00 :   221c39:       cmp    %rax,%rdi
    0.00 :   221c3c:       je     221c43 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x443>
         :            ::operator delete(__p);
    0.00 :   221c3e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221c43:       add    $0x20,%r12
    0.00 :   221c47:       cmp    %r12,%rbp
    0.00 :   221c4a:       jne    221c30 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x430>
    0.00 :   221c4c:       mov    0xc8(%rsp),%r12
         :            if (__p)
    0.00 :   221c54:       test   %r12,%r12
    0.00 :   221c57:       je     221c61 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x461>
    0.00 :   221c59:       mov    %r12,%rdi
    0.00 :   221c5c:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221c61:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221c69:       lea    0x38(%rbx),%rax
    0.00 :   221c6d:       cmp    %rax,%rdi
    0.00 :   221c70:       je     221c77 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x477>
    0.00 :   221c72:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221c77:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221c7f:       add    $0x10,%rbx
    0.00 :   221c83:       cmp    %rbx,%rdi
    0.00 :   221c86:       je     221c8d <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x48d>
    0.00 :   221c88:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   221c8d:       mov    0x28(%rsp),%rbp
    0.00 :   221c92:       mov    0x20(%rsp),%rbx
    0.00 :   221c97:       cmp    %rbx,%rbp
    0.00 :   221c9a:       je     221cbf <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4bf>
    0.00 :   221c9c:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221ca0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   221ca3:       lea    0x10(%rbx),%rax
    0.00 :   221ca7:       cmp    %rax,%rdi
    0.00 :   221caa:       je     221cb1 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4b1>
    0.00 :   221cac:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221cb1:       add    $0x20,%rbx
    0.00 :   221cb5:       cmp    %rbx,%rbp
    0.00 :   221cb8:       jne    221ca0 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4a0>
    0.00 :   221cba:       mov    0x20(%rsp),%rbx
         :            if (__p)
    0.00 :   221cbf:       test   %rbx,%rbx
    0.00 :   221cc2:       je     221ccc <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4cc>
    0.00 :   221cc4:       mov    %rbx,%rdi
    0.00 :   221cc7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221ccc:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221cd1:       lea    0x10(%r15),%rax
    0.00 :   221cd5:       cmp    %rax,%rdi
    0.00 :   221cd8:       je     221cdf <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x4df>
    0.00 :   221cda:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221cdf:       lea    -0x1285c6(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   221ce6:       lea    0x9ef943(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   221ced:       mov    0x10(%rsp),%rdi
    0.00 :   221cf2:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   221cf7:       nopw   0x0(%rax,%rax,1)
    0.00 :   221d00:       mov    (%rbx),%rbx
    0.00 :   221d03:       mov    0x1f8(%rsp),%rcx
    0.00 :   221d0b:       xor    %fs:0x28,%rcx
    0.00 :   221d14:       mov    %rbx,%rax
    0.00 :   221d17:       jne    221d91 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x591>
    0.00 :   221d19:       add    $0x208,%rsp
    0.00 :   221d20:       pop    %rbx
    0.00 :   221d21:       pop    %rbp
    0.00 :   221d22:       pop    %r12
    0.00 :   221d24:       pop    %r13
    0.00 :   221d26:       pop    %r14
    0.00 :   221d28:       pop    %r15
    0.00 :   221d2a:       retq
    0.00 :   221d2b:       nopl   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   221d30:       sub    %rcx,%rax
    0.00 :   221d33:       xor    %edx,%edx
    0.00 :   221d35:       xor    %esi,%esi
    0.00 :   221d37:       mov    %r15,%rdi
    0.00 :   221d3a:       mov    %rax,%r8
    0.00 :   221d3d:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   221d42:       jmpq   221a57 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x257>
    0.00 :   221d47:       nopw   0x0(%rax,%rax,1)
         :            __out.setstate(ios_base::badbit);
    0.00 :   221d50:       mov    0x80(%rsp),%rax
    0.00 :   221d58:       mov    -0x18(%rax),%rdi
    0.00 :   221d5c:       add    %rbx,%rdi
         :            operator&(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
         :
         :            inline _GLIBCXX_CONSTEXPR _Ios_Iostate
         :            operator|(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
    0.00 :   221d5f:       mov    0x20(%rdi),%esi
    0.00 :   221d62:       or     $0x1,%esi
         :            { this->clear(this->rdstate() | __state); }
    0.00 :   221d65:       callq  53b90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   221d6a:       jmpq   221a02 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x202>
    0.00 :   221d6f:       nop
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   221d70:       xor    %r14d,%r14d
    0.00 :   221d73:       jmpq   221ba6 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x3a6>
    0.00 :   221d78:       nopl   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   221d80:       lea    0x50(%rbx),%rsi
    0.00 :   221d84:       mov    %r15,%rdi
    0.00 :   221d87:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   221d8c:       jmpq   221a57 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x257>
    0.00 :   221d91:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   221d96:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   221d9b:       mov    %rax,%rbp
    0.00 :   221d9e:       mov    %rdx,%r12
    0.00 :   221da1:       jmp    221dca <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5ca>
    0.00 :   221da3:       mov    %rax,%r12
    0.00 :   221da6:       mov    %rdx,%rbp
    0.00 :   221da9:       jmpq   221f8b <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x78b>
    0.00 :   221dae:       jmpq   221f9b <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x79b>
         :            std::_Construct(std::__addressof(*__cur), *__first);
         :            return __cur;
         :            }
         :            __catch(...)
    0.00 :   221db3:       callq  53ad0 <__cxa_end_catch@plt>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   221db8:       mov    0xc8(%rsp),%rdi
         :            if (__p)
    0.00 :   221dc0:       test   %rdi,%rdi
    0.00 :   221dc3:       je     221dca <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5ca>
         :            ::operator delete(__p);
    0.00 :   221dc5:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221dca:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221dd2:       lea    0x38(%rbx),%rax
    0.00 :   221dd6:       cmp    %rax,%rdi
    0.00 :   221dd9:       je     221de0 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5e0>
    0.00 :   221ddb:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221de0:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221de8:       add    $0x10,%rbx
    0.00 :   221dec:       cmp    %rbx,%rdi
    0.00 :   221def:       je     221df6 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5f6>
    0.00 :   221df1:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   221df6:       mov    %rbp,%rbx
    0.00 :   221df9:       mov    %r12,%rbp
    0.00 :   221dfc:       mov    0x18(%rsp),%rdi
    0.00 :   221e01:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221e06:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221e0b:       lea    0x10(%r15),%rax
    0.00 :   221e0f:       cmp    %rax,%rdi
    0.00 :   221e12:       je     221e19 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x619>
         :            ::operator delete(__p);
    0.00 :   221e14:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221e19:       mov    0x10(%rsp),%rdi
    0.00 :   221e1e:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   221e23:       mov    %rbx,%rdi
    0.00 :   221e26:       mov    %rbp,%rdx
    0.00 :   221e29:       sub    $0x1,%rdx
    0.00 :   221e2d:       jne    22200f <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x80f>
    0.00 :   221e33:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   221e38:       mov    $0xa0,%edi
    0.00 :   221e3d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   221e42:       movslq 0xc(%rsp),%rbx
    0.00 :   221e47:       mov    %rax,%rbp
    0.00 :   221e4a:       mov    (%rsp),%rax
    0.00 :   221e4e:       mov    0x10(%rax),%rdi
    0.00 :   221e52:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   221e57:       mov    0xa8(%rax),%rax
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221e5e:       lea    0x40(%rsp),%r12
    0.00 :   221e63:       mov    (%rax,%rbx,8),%rdi
    0.00 :   221e67:       callq  63d050 <onnxruntime::NodeArg::Name[abi:cxx11]() const>
    0.00 :   221e6c:       movb   $0x0,0x50(%rsp)
         :            __glibcxx_requires_string(__lhs);
         :            typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
         :            typedef typename __string_type::size_type   __size_type;
         :            const __size_type __len = _Traits::length(__lhs);
         :            __string_type __str;
         :            __str.reserve(__len + __rhs.size());
    0.00 :   221e71:       mov    %r12,%rdi
         :            { _M_string_length = __length; }
    0.00 :   221e74:       movq   $0x0,0x48(%rsp)
    0.00 :   221e7d:       mov    %rax,%rbx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221e80:       lea    0x10(%r12),%rax
    0.00 :   221e85:       mov    %rax,0x40(%rsp)
    0.00 :   221e8a:       mov    0x8(%rbx),%rax
    0.00 :   221e8e:       lea    0xf(%rax),%rsi
    0.00 :   221e92:       callq  539d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@plt>
         :            if (this->max_size() - (this->size() - __n1) < __n2)
    0.00 :   221e97:       movabs $0x7fffffffffffffff,%rax
    0.00 :   221ea1:       sub    0x48(%rsp),%rax
    0.00 :   221ea6:       cmp    $0xe,%rax
    0.00 :   221eaa:       jbe    222014 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x814>
         :            return _M_append(__s, __n);
    0.00 :   221eb0:       mov    $0xf,%edx
    0.00 :   221eb5:       lea    0x61c973(%rip),%rsi        # 83e82f <typeinfo name for std::_Sp_counted_ptr_inplace<onnxruntime::CpuProviderFactory, std::allocator<onnxruntime::CpuProviderFactory>, (__gnu_cxx::_Lock_policy)2>+0x14f>
    0.00 :   221ebc:       mov    %r12,%rdi
    0.00 :   221ebf:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
         :            { return _M_append(__str._M_data(), __str.size()); }
    0.00 :   221ec4:       mov    0x8(%rbx),%rdx
    0.00 :   221ec8:       mov    (%rbx),%rsi
    0.00 :   221ecb:       mov    %r12,%rdi
    0.00 :   221ece:       callq  52af0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   221ed3:       mov    0x40(%rsp),%rsi
    0.00 :   221ed8:       mov    0x48(%rsp),%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221edd:       lea    0x60(%rsp),%r15
    0.00 :   221ee2:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221ee6:       mov    %r15,%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   221ee9:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   221eec:       mov    %rax,0x60(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   221ef1:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   221ef6:       lea    0x20(%rsp),%rdi
    0.00 :   221efb:       mov    %rdi,0x18(%rsp)
    0.00 :   221f00:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   221f05:       lea    0x80(%rsp),%rbx
    0.00 :   221f0d:       mov    0x18(%rsp),%r8
    0.00 :   221f12:       lea    0x61d587(%rip),%rcx        # 83f4a0 <onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const::__PRETTY_FUNCTION__>
    0.00 :   221f19:       mov    $0x24,%edx
    0.00 :   221f1e:       lea    0x61c843(%rip),%rsi        # 83e768 <typeinfo name for std::_Sp_counted_ptr_inplace<onnxruntime::CpuProviderFactory, std::allocator<onnxruntime::CpuProviderFactory>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   221f25:       mov    %rbx,%rdi
    0.00 :   221f28:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   221f2d:       mov    %r15,%rcx
    0.00 :   221f30:       xor    %edx,%edx
    0.00 :   221f32:       mov    %rbx,%rsi
    0.00 :   221f35:       mov    %rbp,%rdi
    0.00 :   221f38:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   221f3d:       mov    %rbx,%rdi
    0.00 :   221f40:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   221f45:       mov    0x18(%rsp),%rdi
    0.00 :   221f4a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221f4f:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221f54:       lea    0x10(%r15),%rax
    0.00 :   221f58:       cmp    %rax,%rdi
    0.00 :   221f5b:       je     221f62 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x762>
    0.00 :   221f5d:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221f62:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221f67:       add    $0x10,%r12
    0.00 :   221f6b:       cmp    %r12,%rdi
    0.00 :   221f6e:       je     221f75 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x775>
    0.00 :   221f70:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221f75:       lea    -0x12885c(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   221f7c:       lea    0x9ef6ad(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   221f83:       mov    %rbp,%rdi
    0.00 :   221f86:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   221f8b:       mov    %rbx,%rdi
    0.00 :   221f8e:       mov    %r12,%rbx
    0.00 :   221f91:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   221f96:       jmpq   221dfc <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5fc>
    0.00 :   221f9b:       mov    %rax,%rdi
    0.00 :   221f9e:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   221fa3:       cmp    %r12,%r14
    0.00 :   221fa6:       jne    221fad <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ad>
         :            {
         :            std::_Destroy(__result, __cur);
         :            __throw_exception_again;
    0.00 :   221fa8:       callq  53870 <__cxa_rethrow@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221fad:       mov    (%r14),%rdi
         :            if (!_M_is_local())
    0.00 :   221fb0:       lea    0x10(%r14),%rax
    0.00 :   221fb4:       cmp    %rax,%rdi
    0.00 :   221fb7:       je     221fbe <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7be>
    0.00 :   221fb9:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221fbe:       add    $0x20,%r14
    0.00 :   221fc2:       jmp    221fa3 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7a3>
    0.00 :   221fc4:       mov    %rax,%rbp
    0.00 :   221fc7:       mov    %rdx,%r12
    0.00 :   221fca:       jmpq   221db3 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5b3>
    0.00 :   221fcf:       mov    0x18(%rsp),%rdi
    0.00 :   221fd4:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221fd9:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221fde:       lea    0x10(%r15),%rdx
    0.00 :   221fe2:       cmp    %rdx,%rdi
    0.00 :   221fe5:       je     221fec <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ec>
    0.00 :   221fe7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   221fec:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   221ff1:       add    $0x10,%r12
    0.00 :   221ff5:       cmp    %r12,%rdi
    0.00 :   221ff8:       je     221fff <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ff>
    0.00 :   221ffa:       callq  53300 <operator delete(void*)@plt>
    0.00 :   221fff:       mov    %rbp,%rdi
    0.00 :   222002:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   222007:       callq  53ad0 <__cxa_end_catch@plt>
    0.00 :   22200c:       mov    %rbx,%rdi
    0.00 :   22200f:       callq  53c30 <_Unwind_Resume@plt>
         :            __throw_length_error(__N(__s));
    0.00 :   222014:       lea    0x603399(%rip),%rdi        # 8253b4 <_fini+0x11c>
    0.00 :   22201b:       callq  52d80 <std::__throw_length_error(char const*)@plt>
    0.00 :   222020:       mov    %rax,%rbx
    0.00 :   222023:       jmp    221fcf <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7cf>
    0.00 :   222025:       mov    %rax,%rbx
    0.00 :   222028:       jmp    222007 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x807>
    0.00 :   22202a:       mov    %rax,%rbx
    0.00 :   22202d:       jmp    221fd9 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7d9>
    0.00 :   22202f:       mov    %rax,%rbx
    0.00 :   222032:       jmp    221fec <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ec>
    0.00 :   222034:       jmp    22202f <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x82f>
    0.00 :   222036:       mov    %rax,%rbx
    0.00 :   222039:       jmp    221fff <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x7ff>
    0.00 :   22203b:       mov    %rax,%rdi
    0.00 :   22203e:       jmpq   221e29 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x629>
    0.00 :   222043:       jmp    22206f <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x86f>
    0.00 :   222045:       jmp    222052 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x852>
    0.00 :   222047:       mov    %rax,%rbx
    0.00 :   22204a:       mov    %rdx,%rbp
    0.00 :   22204d:       jmpq   221e19 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x619>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   222052:       lea    0x8(%rbx),%rdi
    0.00 :   222056:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
         :            ~basic_ostream() { }
    0.00 :   22205b:       mov    -0x18(%rbp),%rax
    0.00 :   22205f:       mov    %rbp,0x80(%rsp)
    0.00 :   222067:       mov    %r12,0x80(%rsp,%rax,1)
         :            ~basic_ios() { }
    0.00 :   22206f:       mov    0xa05ab2(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   222076:       lea    0x70(%rbx),%rdi
    0.00 :   22207a:       add    $0x10,%rax
    0.00 :   22207e:       mov    %rax,0xf0(%rsp)
    0.00 :   222086:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   22208b:       callq  52a50 <std::terminate()@plt>
    0.00 :   222090:       mov    %rax,%rbp
    0.00 :   222093:       mov    %rdx,%r12
    0.00 :   222096:       jmpq   221de0 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5e0>
    0.00 :   22209b:       mov    %rax,%rbx
    0.00 :   22209e:       mov    %rdx,%rbp
    0.00 :   2220a1:       jmpq   221dfc <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x5fc>
    0.00 :   2220a6:       mov    %rax,%rbx
    0.00 :   2220a9:       mov    %rdx,%rbp
    0.00 :   2220ac:       jmpq   221e06 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x606>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2220b1:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2220b6:       lea    0x10(%r15),%rax
    0.00 :   2220ba:       cmp    %rax,%rdi
    0.00 :   2220bd:       je     22208b <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x88b>
    0.00 :   2220bf:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2220c4:       jmp    22208b <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const+0x88b>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (5 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a80a0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)>:
         :            _Z18MlasSgemmOperation15CBLAS_TRANSPOSES_mmmfPKfmS1_mfPfm():
    0.00 :   6a80a0:       lea    0x8(%rsp),%r10
    0.00 :   6a80a5:       and    $0xffffffffffffffc0,%rsp
    0.00 :   6a80a9:       pushq  -0x8(%r10)
    0.00 :   6a80ad:       push   %rbp
    0.00 :   6a80ae:       mov    %rsp,%rbp
    0.00 :   6a80b1:       push   %r15
    0.00 :   6a80b3:       push   %r14
    0.00 :   6a80b5:       push   %r13
    0.00 :   6a80b7:       push   %r12
    0.00 :   6a80b9:       push   %r10
    0.00 :   6a80bb:       push   %rbx
    0.00 :   6a80bc:       sub    $0x11900,%rsp
    0.00 :   6a80c3:       mov    (%r10),%rax
    0.00 :   6a80c6:       mov    %edi,-0x118e4(%rbp)
   29.07 :   6a80cc:       mov    %esi,-0x118e8(%rbp)
    0.00 :   6a80d2:       mov    0x20(%r10),%r15
    0.00 :   6a80d6:       mov    %rax,-0x118b8(%rbp)
    0.00 :   6a80dd:       mov    0x8(%r10),%rax
    0.00 :   6a80e1:       mov    %rdx,-0x118d8(%rbp)
    0.00 :   6a80e8:       mov    %rax,-0x118f8(%rbp)
    0.00 :   6a80ef:       mov    0x10(%r10),%rax
    0.00 :   6a80f3:       mov    %rcx,-0x11918(%rbp)
    0.00 :   6a80fa:       mov    %rax,-0x118e0(%rbp)
    0.00 :   6a8101:       mov    0x18(%r10),%rax
    0.00 :   6a8105:       mov    %r8,-0x118c8(%rbp)
    0.00 :   6a810c:       mov    %r9,-0x118f0(%rbp)
    0.00 :   6a8113:       mov    %rax,-0x11930(%rbp)
    0.00 :   6a811a:       movss  %xmm0,-0x11894(%rbp)
    0.00 :   6a8122:       movss  %xmm1,-0x11924(%rbp)
    0.00 :   6a812a:       mov    %fs:0x28,%rax
    0.00 :   6a8133:       mov    %rax,-0x38(%rbp)
    0.00 :   6a8137:       xor    %eax,%eax
    0.00 :   6a8139:       test   %r8,%r8
    0.00 :   6a813c:       je     6a8671 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x5d1>
    0.00 :   6a8142:       movss  0x17ec5a(%rip),%xmm0        # 826da4 <std::piecewise_construct+0x4>
    0.00 :   6a814a:       movss  -0x11894(%rbp),%xmm5
    0.00 :   6a8152:       mov    $0x0,%ecx
    0.00 :   6a8157:       ucomiss %xmm0,%xmm5
    0.00 :   6a815a:       setnp  %dl
    0.00 :   6a815d:       cmovne %ecx,%edx
    0.00 :   6a8160:       cmpq   $0x1,-0x118d8(%rbp)
    0.00 :   6a8168:       sete   %sil
    0.00 :   6a816c:       cmpl   $0x6f,-0x118e4(%rbp)
    0.00 :   6a8173:       sete   %al
    0.00 :   6a8176:       test   %al,%sil
    0.00 :   6a8179:       je     6a8183 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0xe3>
    0.00 :   6a817b:       test   %dl,%dl
    0.00 :   6a817d:       jne    6a8696 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x5f6>
    0.00 :   6a8183:       cmpq   $0x1,-0x11918(%rbp)
    0.00 :   6a818b:       jne    6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a818d:       cmpq   $0x1,-0x118e0(%rbp)
    0.00 :   6a8195:       jne    6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a8197:       cmp    $0x1,%r15
    0.00 :   6a819b:       jne    6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a819d:       test   %dl,%dl
    0.00 :   6a819f:       je     6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a81a1:       movss  -0x11924(%rbp),%xmm4
    0.00 :   6a81a9:       pxor   %xmm1,%xmm1
    0.00 :   6a81ad:       mov    $0x0,%edx
    0.00 :   6a81b2:       ucomiss %xmm1,%xmm4
    0.00 :   6a81b5:       setnp  %al
    0.00 :   6a81b8:       cmovne %edx,%eax
    0.00 :   6a81bb:       test   %al,%al
    0.00 :   6a81bd:       jne    6a876b <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x6cb>
    0.00 :   6a81c3:       ucomiss %xmm0,%xmm4
    0.00 :   6a81c6:       setnp  %dl
    0.00 :   6a81c9:       cmove  %edx,%eax
    0.00 :   6a81cc:       test   %al,%al
    0.00 :   6a81ce:       jne    6a876b <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x6cb>
    0.00 :   6a81d4:       mov    -0x118c8(%rbp),%rax
    0.00 :   6a81db:       mov    -0x11918(%rbp),%rcx
    0.00 :   6a81e2:       cmp    %rcx,%rax
    0.00 :   6a81e5:       jbe    6a84f6 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x456>
    0.00 :   6a81eb:       cmpl   $0x6f,-0x118e4(%rbp)
    0.00 :   6a81f2:       movq   $0x80,-0x118d0(%rbp)
    0.00 :   6a81fd:       movq   $0x80,-0x11920(%rbp)
    0.00 :   6a8208:       je     6a871a <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x67a>
    0.00 :   6a820e:       cmpq   $0x0,-0x11918(%rbp)
    0.00 :   6a8216:       je     6a84ce <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x42e>
    0.00 :   6a821c:       pxor   %xmm1,%xmm1
    0.00 :   6a8220:       mov    $0x0,%eax
    0.00 :   6a8225:       mov    $0x1,%ecx
    0.00 :   6a822a:       movss  -0x11924(%rbp),%xmm2
    0.00 :   6a8232:       movq   $0x0,-0x11908(%rbp)
    0.00 :   6a823d:       ucomiss %xmm1,%xmm2
    0.00 :   6a8240:       setnp  %dl
    0.00 :   6a8243:       cmove  %edx,%eax
    0.00 :   6a8246:       ucomiss %xmm0,%xmm2
    0.00 :   6a8249:       mov    %al,-0x11925(%rbp)
    0.00 :   6a824f:       setp   %dl
    0.00 :   6a8252:       cmovne %ecx,%edx
    0.00 :   6a8255:       ucomiss %xmm1,%xmm2
    0.00 :   6a8258:       setp   %al
    0.00 :   6a825b:       cmovne %ecx,%eax
    0.00 :   6a825e:       and    %eax,%edx
    0.00 :   6a8260:       lea    -0x10070(%rbp),%rax
    0.00 :   6a8267:       mov    %rax,-0x11890(%rbp)
    0.00 :   6a826e:       lea    -0x11870(%rbp),%rax
    0.00 :   6a8275:       mov    %dl,-0x11926(%rbp)
    0.00 :   6a827b:       mov    %rax,-0x118b0(%rbp)
    0.00 :   6a8282:       mov    -0x11908(%rbp),%rdi
    0.00 :   6a8289:       mov    -0x11918(%rbp),%rax
    0.00 :   6a8290:       mov    -0x11920(%rbp),%rsi
    0.00 :   6a8297:       sub    %rdi,%rax
    0.00 :   6a829a:       cmp    %rsi,%rax
    0.00 :   6a829d:       cmova  %rsi,%rax
    0.00 :   6a82a1:       cmpb   $0x0,-0x11926(%rbp)
    0.00 :   6a82a8:       mov    %rax,-0x11888(%rbp)
    0.00 :   6a82af:       mov    -0x11930(%rbp),%rax
    0.00 :   6a82b6:       lea    (%rax,%rdi,4),%rax
    0.00 :   6a82ba:       mov    %rax,-0x11900(%rbp)
    0.00 :   6a82c1:       jne    6a864b <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x5ab>
    0.00 :   6a82c7:       mov    -0x118e0(%rbp),%rax
    0.00 :   6a82ce:       imul   -0x11908(%rbp),%rax
    0.00 :   6a82d6:       movq   $0x0,-0x118c0(%rbp)
    0.00 :   6a82e1:       mov    %rax,-0x11910(%rbp)
    0.00 :   6a82e8:       movzbl -0x11925(%rbp),%eax
    0.00 :   6a82ef:       mov    %al,-0x11895(%rbp)
    0.00 :   6a82f5:       nopl   (%rax)
    0.00 :   6a82f8:       mov    -0x118d0(%rbp),%rax
    0.00 :   6a82ff:       mov    -0x118c8(%rbp),%r12
    0.00 :   6a8306:       sub    -0x118c0(%rbp),%r12
    0.00 :   6a830d:       cmp    %rax,%r12
    0.00 :   6a8310:       cmova  %rax,%r12
    0.00 :   6a8314:       cmpl   $0x6f,-0x118e8(%rbp)
    0.00 :   6a831b:       je     6a860c <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x56c>
    0.00 :   6a8321:       mov    -0x118f8(%rbp),%rcx
    0.00 :   6a8328:       mov    -0x11910(%rbp),%rax
    0.00 :   6a832f:       mov    %r12,%r8
    0.00 :   6a8332:       add    -0x118c0(%rbp),%rax
    0.00 :   6a8339:       mov    -0x118e0(%rbp),%rdx
    0.00 :   6a8340:       lea    (%rcx,%rax,4),%rsi
    0.00 :   6a8344:       mov    -0x11890(%rbp),%rdi
    0.00 :   6a834b:       mov    -0x11888(%rbp),%rcx
    0.00 :   6a8352:       callq  6a78d0 <MlasSgemmTransposePackB(float*, float const*, unsigned long, unsigned long, unsigned long)>
    0.00 :   6a8357:       cmpl   $0x6f,-0x118e4(%rbp)
    0.00 :   6a835e:       je     6a8540 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x4a0>
    0.00 :   6a8364:       mov    -0x118b8(%rbp),%rax
    0.00 :   6a836b:       imul   -0x118c0(%rbp),%rax
    0.00 :   6a8373:       mov    -0x118f0(%rbp),%rsi
    0.00 :   6a837a:       mov    -0x11900(%rbp),%r13
    0.00 :   6a8381:       lea    (%rsi,%rax,4),%rax
    0.00 :   6a8385:       mov    %rax,-0x118a0(%rbp)
    0.00 :   6a838c:       mov    -0x118d8(%rbp),%rax
    0.00 :   6a8393:       mov    %rax,-0x118a8(%rbp)
    0.00 :   6a839a:       mov    -0x118a8(%rbp),%r14
    0.00 :   6a83a1:       test   %r14,%r14
    0.00 :   6a83a4:       je     6a848a <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x3ea>
    0.00 :   6a83aa:       nopw   0x0(%rax,%rax,1)
    0.00 :   6a83b0:       cmp    $0xc,%r14
    0.00 :   6a83b4:       mov    $0xc,%ebx
    0.00 :   6a83b9:       mov    -0x118b8(%rbp),%rdx
    0.00 :   6a83c0:       mov    -0x118a0(%rbp),%rsi
    0.00 :   6a83c7:       cmovbe %r14,%rbx
    0.00 :   6a83cb:       mov    -0x118b0(%rbp),%rdi
    0.00 :   6a83d2:       mov    %r12,%r8
    0.00 :   6a83d5:       mov    %rbx,%rcx
    0.00 :   6a83d8:       callq  6a7610 <MlasSgemmTransposeA(float*, float const*, unsigned long, unsigned long, unsigned long)>
    0.00 :   6a83dd:       mov    %r14,%rax
    0.00 :   6a83e0:       mov    -0x118b0(%rbp),%r14
    0.00 :   6a83e7:       sub    %rbx,%rax
    0.00 :   6a83ea:       mov    %rax,-0x118a8(%rbp)
    0.00 :   6a83f1:       mov    -0x118a0(%rbp),%rax
    0.00 :   6a83f8:       lea    (%rax,%rbx,4),%rax
    0.00 :   6a83fc:       mov    %rax,-0x118a0(%rbp)
    0.00 :   6a8403:       movzbl -0x11895(%rbp),%eax
    0.00 :   6a840a:       mov    %eax,-0x11878(%rbp)
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8410:       lea    0x582b29(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8417:       mov    %rax,-0x11880(%rbp)
    0.00 :   6a841e:       xchg   %ax,%ax
    0.00 :   6a8420:       mov    -0x11878(%rbp),%eax
    0.00 :   6a8426:       sub    $0x8,%rsp
    0.00 :   6a842a:       mov    %r13,%rdx
    0.00 :   6a842d:       mov    %r14,%rdi
    0.00 :   6a8430:       movss  -0x11894(%rbp),%xmm0
    0.00 :   6a8438:       mov    -0x11888(%rbp),%r9
    0.00 :   6a843f:       mov    %rbx,%r8
    0.00 :   6a8442:       mov    %r12,%rcx
    0.00 :   6a8445:       push   %rax
    0.00 :   6a8446:       mov    -0x11880(%rbp),%rax
    0.00 :   6a844d:       push   %r15
    0.00 :   6a844f:       mov    -0x11890(%rbp),%rsi
    0.00 :   6a8456:       push   %r12
    0.00 :   6a8458:       callq  *(%rax)
    0.00 :   6a845a:       mov    %r15,%rdx
    0.00 :   6a845d:       imul   %rax,%rdx
    0.00 :   6a8461:       add    $0x20,%rsp
    0.00 :   6a8465:       lea    0x0(%r13,%rdx,4),%r13
    0.00 :   6a846a:       mov    %rax,%rdx
    0.00 :   6a846d:       imul   %r12,%rdx
    0.00 :   6a8471:       lea    (%r14,%rdx,4),%r14
    0.00 :   6a8475:       sub    %rax,%rbx
    0.00 :   6a8478:       jne    6a8420 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x380>
         :            _Z18MlasSgemmOperation15CBLAS_TRANSPOSES_mmmfPKfmS1_mfPfm():
    0.00 :   6a847a:       mov    -0x118a8(%rbp),%r14
    0.00 :   6a8481:       test   %r14,%r14
    0.00 :   6a8484:       jne    6a83b0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x310>
    0.00 :   6a848a:       add    %r12,-0x118c0(%rbp)
    0.00 :   6a8491:       mov    -0x118c0(%rbp),%rax
    0.00 :   6a8498:       movb   $0x0,-0x11895(%rbp)
    0.00 :   6a849f:       cmp    %rax,-0x118c8(%rbp)
    0.00 :   6a84a6:       ja     6a82f8 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x258>
    0.00 :   6a84ac:       mov    -0x11888(%rbp),%rsi
    0.00 :   6a84b3:       add    %rsi,-0x11908(%rbp)
    0.00 :   6a84ba:       mov    -0x11908(%rbp),%rax
    0.00 :   6a84c1:       cmp    %rax,-0x11918(%rbp)
    0.00 :   6a84c8:       ja     6a8282 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x1e2>
    0.00 :   6a84ce:       mov    -0x38(%rbp),%rax
    0.00 :   6a84d2:       xor    %fs:0x28,%rax
    0.00 :   6a84db:       jne    6a87e2 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x742>
    0.00 :   6a84e1:       lea    -0x30(%rbp),%rsp
    0.00 :   6a84e5:       pop    %rbx
    0.00 :   6a84e6:       pop    %r10
    0.00 :   6a84e8:       pop    %r12
    0.00 :   6a84ea:       pop    %r13
    0.00 :   6a84ec:       pop    %r14
    0.00 :   6a84ee:       pop    %r15
    0.00 :   6a84f0:       pop    %rbp
    0.00 :   6a84f1:       lea    -0x8(%r10),%rsp
    0.00 :   6a84f5:       retq
    0.00 :   6a84f6:       cmp    $0x40,%rax
    0.00 :   6a84fa:       ja     6a87f0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x750>
    0.00 :   6a8500:       movq   $0x80,-0x11920(%rbp)
    0.00 :   6a850b:       movq   $0x40,-0x118d0(%rbp)
    0.00 :   6a8516:       jmp    6a851f <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x47f>
    0.00 :   6a8518:       mov    %rax,-0x118d0(%rbp)
    0.00 :   6a851f:       mov    -0x118d0(%rbp),%rax
    0.00 :   6a8526:       shlq   -0x11920(%rbp)
    0.00 :   6a852d:       shr    %rax
    0.00 :   6a8530:       cmp    -0x118c8(%rbp),%rax
    0.00 :   6a8537:       jae    6a8518 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x478>
    0.00 :   6a8539:       jmpq   6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
    0.00 :   6a853e:       xchg   %ax,%ax
    0.00 :   6a8540:       movzbl -0x11895(%rbp),%eax
    0.00 :   6a8547:       mov    -0x118c0(%rbp),%rcx
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a854e:       mov    -0x118d8(%rbp),%rbx
         :            _Z18MlasSgemmOperation15CBLAS_TRANSPOSES_mmmfPKfmS1_mfPfm():
    0.00 :   6a8555:       mov    %eax,-0x11880(%rbp)
    0.00 :   6a855b:       mov    -0x118f0(%rbp),%rax
    0.00 :   6a8562:       lea    (%rax,%rcx,4),%r13
         :            _Z19MlasSgemmKernelLoopPKfS0_Pfmmmmmfb():
    0.00 :   6a8566:       test   %rbx,%rbx
    0.00 :   6a8569:       je     6a848a <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x3ea>
    0.00 :   6a856f:       lea    0x5829ca(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8576:       mov    %r12,-0x11878(%rbp)
    0.00 :   6a857d:       mov    %r15,%r12
    0.00 :   6a8580:       mov    %r13,%r15
    0.00 :   6a8583:       mov    -0x11900(%rbp),%r14
    0.00 :   6a858a:       mov    -0x118b8(%rbp),%r13
    0.00 :   6a8591:       mov    %rax,-0x118a0(%rbp)
    0.00 :   6a8598:       nopl   0x0(%rax,%rax,1)
    0.00 :   6a85a0:       mov    -0x11880(%rbp),%eax
    0.00 :   6a85a6:       sub    $0x8,%rsp
    0.00 :   6a85aa:       mov    %r14,%rdx
    0.00 :   6a85ad:       mov    %r15,%rdi
    0.00 :   6a85b0:       movss  -0x11894(%rbp),%xmm0
   38.47 :   6a85b8:       mov    -0x11888(%rbp),%r9
    0.00 :   6a85bf:       mov    %rbx,%r8
    0.00 :   6a85c2:       mov    -0x11878(%rbp),%rcx
    0.00 :   6a85c9:       mov    -0x11890(%rbp),%rsi
    0.00 :   6a85d0:       push   %rax
    0.00 :   6a85d1:       mov    -0x118a0(%rbp),%rax
    0.00 :   6a85d8:       push   %r12
    0.00 :   6a85da:       push   %r13
   15.83 :   6a85dc:       callq  *(%rax)
    0.00 :   6a85de:       mov    %r12,%rdx
    0.00 :   6a85e1:       imul   %rax,%rdx
    0.00 :   6a85e5:       add    $0x20,%rsp
    0.00 :   6a85e9:       lea    (%r14,%rdx,4),%r14
    0.00 :   6a85ed:       mov    %r13,%rdx
    0.00 :   6a85f0:       imul   %rax,%rdx
    0.00 :   6a85f4:       lea    (%r15,%rdx,4),%r15
    0.00 :   6a85f8:       sub    %rax,%rbx
    0.00 :   6a85fb:       jne    6a85a0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x500>
    0.00 :   6a85fd:       mov    %r12,%r15
    0.00 :   6a8600:       mov    -0x11878(%rbp),%r12
    0.00 :   6a8607:       jmpq   6a848a <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x3ea>
         :            _Z18MlasSgemmOperation15CBLAS_TRANSPOSES_mmmfPKfmS1_mfPfm():
    0.00 :   6a860c:       mov    -0x118e0(%rbp),%rdx
    0.00 :   6a8613:       mov    -0x118c0(%rbp),%rax
    0.00 :   6a861a:       mov    %r12,%r8
    0.00 :   6a861d:       mov    -0x118f8(%rbp),%rsi
    0.00 :   6a8624:       mov    -0x11888(%rbp),%rcx
    0.00 :   6a862b:       imul   %rdx,%rax
    0.00 :   6a862f:       mov    -0x11890(%rbp),%rdi
    0.00 :   6a8636:       add    -0x11908(%rbp),%rax
   16.63 :   6a863d:       lea    (%rsi,%rax,4),%rsi
    0.00 :   6a8641:       callq  6a7780 <MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long)>
    0.00 :   6a8646:       jmpq   6a8357 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x2b7>
    0.00 :   6a864b:       movss  -0x11924(%rbp),%xmm0
    0.00 :   6a8653:       mov    -0x11888(%rbp),%rdx
    0.00 :   6a865a:       mov    %r15,%rcx
    0.00 :   6a865d:       mov    %rax,%rdi
    0.00 :   6a8660:       mov    -0x118d8(%rbp),%rsi
    0.00 :   6a8667:       callq  6a7580 <MlasSgemmMultiplyBeta(float*, unsigned long, unsigned long, unsigned long, float)>
    0.00 :   6a866c:       jmpq   6a82c7 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x227>
    0.00 :   6a8671:       mov    -0x11918(%rbp),%rdx
    0.00 :   6a8678:       mov    -0x118d8(%rbp),%rsi
    0.00 :   6a867f:       movaps %xmm1,%xmm0
    0.00 :   6a8682:       mov    %r15,%rcx
    0.00 :   6a8685:       mov    -0x11930(%rbp),%rdi
    0.00 :   6a868c:       callq  6a7580 <MlasSgemmMultiplyBeta(float*, unsigned long, unsigned long, unsigned long, float)>
    0.00 :   6a8691:       jmpq   6a84ce <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x42e>
    0.00 :   6a8696:       movss  -0x11924(%rbp),%xmm3
    0.00 :   6a869e:       pxor   %xmm1,%xmm1
    0.00 :   6a86a2:       ucomiss %xmm1,%xmm3
    0.00 :   6a86a5:       setnp  %al
    0.00 :   6a86a8:       cmovne %ecx,%eax
    0.00 :   6a86ab:       test   %al,%al
    0.00 :   6a86ad:       jne    6a86c0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x620>
    0.00 :   6a86af:       ucomiss %xmm0,%xmm3
    0.00 :   6a86b2:       setnp  %cl
    0.00 :   6a86b5:       cmove  %ecx,%eax
    0.00 :   6a86b8:       test   %al,%al
    0.00 :   6a86ba:       je     6a8183 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0xe3>
    0.00 :   6a86c0:       lea    0x582879(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a86c7:       cmpl   $0x6f,-0x118e8(%rbp)
    0.00 :   6a86ce:       mov    0x10(%rax),%r10
    0.00 :   6a86d2:       cmove  0x8(%rax),%r10
    0.00 :   6a86d7:       test   %r10,%r10
    0.00 :   6a86da:       je     6a8183 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0xe3>
    0.00 :   6a86e0:       movss  -0x11924(%rbp),%xmm0
    0.00 :   6a86e8:       mov    -0x118e0(%rbp),%r9
    0.00 :   6a86ef:       mov    -0x11918(%rbp),%r8
    0.00 :   6a86f6:       mov    -0x118c8(%rbp),%rcx
    0.00 :   6a86fd:       mov    -0x11930(%rbp),%rdx
    0.00 :   6a8704:       mov    -0x118f8(%rbp),%rsi
    0.00 :   6a870b:       mov    -0x118f0(%rbp),%rdi
    0.00 :   6a8712:       callq  *%r10
    0.00 :   6a8715:       jmpq   6a84ce <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x42e>
    0.00 :   6a871a:       mov    -0x11918(%rbp),%rax
    0.00 :   6a8721:       cmp    $0x40,%rax
    0.00 :   6a8725:       ja     6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
    0.00 :   6a872b:       cmp    $0x20,%rax
    0.00 :   6a872f:       ja     6a87c7 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x727>
    0.00 :   6a8735:       cmp    $0x11,%rax
    0.00 :   6a8739:       sbb    %rcx,%rcx
    0.00 :   6a873c:       and    $0x200,%ecx
    0.00 :   6a8742:       add    $0x200,%rcx
    0.00 :   6a8749:       cmp    $0x11,%rax
    0.00 :   6a874d:       sbb    %rax,%rax
    0.00 :   6a8750:       mov    %rcx,-0x118d0(%rbp)
    0.00 :   6a8757:       and    $0xfffffffffffffff0,%rax
    0.00 :   6a875b:       add    $0x20,%rax
    0.00 :   6a875f:       mov    %rax,-0x11920(%rbp)
    0.00 :   6a8766:       jmpq   6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
    0.00 :   6a876b:       lea    0x5827ce(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8772:       cmpl   $0x6f,-0x118e4(%rbp)
    0.00 :   6a8779:       mov    0x10(%rax),%rdx
    0.00 :   6a877d:       cmovne 0x8(%rax),%rdx
    0.00 :   6a8782:       mov    %rdx,%rax
    0.00 :   6a8785:       test   %rdx,%rdx
    0.00 :   6a8788:       je     6a81d4 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x134>
    0.00 :   6a878e:       movss  -0x11924(%rbp),%xmm0
    0.00 :   6a8796:       mov    -0x118b8(%rbp),%r9
    0.00 :   6a879d:       mov    -0x118d8(%rbp),%r8
    0.00 :   6a87a4:       mov    -0x118c8(%rbp),%rcx
    0.00 :   6a87ab:       mov    -0x11930(%rbp),%rdx
    0.00 :   6a87b2:       mov    -0x118f0(%rbp),%rsi
    0.00 :   6a87b9:       mov    -0x118f8(%rbp),%rdi
    0.00 :   6a87c0:       callq  *%rax
    0.00 :   6a87c2:       jmpq   6a84ce <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x42e>
    0.00 :   6a87c7:       movq   $0x100,-0x118d0(%rbp)
    0.00 :   6a87d2:       movq   $0x40,-0x11920(%rbp)
    0.00 :   6a87dd:       jmpq   6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
    0.00 :   6a87e2:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   6a87e7:       nopw   0x0(%rax,%rax,1)
    0.00 :   6a87f0:       movq   $0x80,-0x118d0(%rbp)
    0.00 :   6a87fb:       movq   $0x80,-0x11920(%rbp)
    0.00 :   6a8806:       jmpq   6a820e <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)+0x16e>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (9 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005f2730 <onnxruntime::TensorShape::Size() const>:
         :            _ZNK11onnxruntime11TensorShape4SizeEv():
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5f2730:       mov    0x8(%rdi),%rdx
  100.00 :   5f2734:       sub    (%rdi),%rdx
    0.00 :   5f2737:       xor    %esi,%esi
    0.00 :   5f2739:       sar    $0x3,%rdx
    0.00 :   5f273d:       jmpq   5f2670 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (12 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000094450 <_IO_str_seekoff@@GLIBC_2.2.5+0x3f60>:
    0.00 :   94450:       push   %r15
    0.00 :   94452:       push   %r14
    0.00 :   94454:       push   %r13
    0.00 :   94456:       push   %r12
    0.00 :   94458:       push   %rbp
    0.00 :   94459:       push   %rbx
    0.00 :   9445a:       lea    0x17(%rsi),%rbx
    0.00 :   9445e:       sub    $0x88,%rsp
    0.00 :   94465:       cmp    $0x1f,%rbx
    0.00 :   94469:       jbe    945d0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40e0>
    0.00 :   9446f:       and    $0xfffffffffffffff0,%rbx
    0.00 :   94473:       cmp    $0xffffffffffffffbf,%rbx
    0.00 :   94477:       seta   %al
    0.00 :   9447a:       cmp    %rsi,%rbx
    0.00 :   9447d:       jb     94b78 <_IO_str_seekoff@@GLIBC_2.2.5+0x4688>
    0.00 :   94483:       test   %al,%al
    0.00 :   94485:       jne    94b78 <_IO_str_seekoff@@GLIBC_2.2.5+0x4688>
    0.00 :   9448b:       test   %rdi,%rdi
    0.00 :   9448e:       mov    %rsi,0x8(%rsp)
    0.00 :   94493:       mov    %rdi,%r14
    0.00 :   94496:       je     94b58 <_IO_str_seekoff@@GLIBC_2.2.5+0x4668>
    0.00 :   9449c:       mov    %ebx,%r15d
    0.00 :   9449f:       shr    $0x4,%r15d
    0.00 :   944a3:       cmp    0x359496(%rip),%rbx        # 3ed940 <__malloc_initialize_hook@GLIBC_2.2.5+0x50>
    0.00 :   944aa:       ja     945e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40f0>
    0.00 :   944b0:       lea    -0x2(%r15),%eax
    0.00 :   944b4:       lea    (%rdi,%rax,8),%rsi
    0.00 :   944b8:       mov    %rax,%rdx
    0.00 :   944bb:       mov    0x10(%rsi),%rcx
    0.00 :   944bf:       test   %rcx,%rcx
    0.00 :   944c2:       je     94860 <_IO_str_seekoff@@GLIBC_2.2.5+0x4370>
    0.00 :   944c8:       lea    0x35c509(%rip),%r8        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   944cf:       lea    0x10(%rdi,%rax,8),%rdi
    0.00 :   944d4:       mov    0x10(%rcx),%r9
    0.00 :   944d8:       mov    (%r8),%r10d
    0.00 :   944db:       test   %r10d,%r10d
    0.00 :   944de:       jne    9483f <_IO_str_seekoff@@GLIBC_2.2.5+0x434f>
    0.00 :   944e4:       mov    %r9,0x10(%rsi)
    0.00 :   944e8:       mov    0x8(%rcx),%eax
    0.00 :   944eb:       shr    $0x4,%eax
    0.00 :   944ee:       sub    $0x2,%eax
    0.00 :   944f1:       cmp    %edx,%eax
    0.00 :   944f3:       jne    94df0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4900>
    0.00 :   944f9:       mov    0x356878(%rip),%rbp        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   94500:       mov    %fs:0x0(%rbp),%rax
    0.00 :   94505:       test   %rax,%rax
    0.00 :   94508:       je     945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   9450e:       sub    $0x11,%rbx
    0.00 :   94512:       shr    $0x4,%rbx
    0.00 :   94516:       cmp    %rbx,0x356db3(%rip)        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   9451d:       jbe    945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   94523:       movsbq (%rax,%rbx,1),%rax
    0.00 :   94528:       cmp    %rax,0x356db1(%rip)        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   9452f:       jbe    945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   94531:       mov    0x10(%rsi),%rdx
    0.00 :   94535:       test   %rdx,%rdx
    0.00 :   94538:       je     945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   9453a:       lea    0x0(,%rbx,8),%r10
    0.00 :   94542:       mov    (%r8),%eax
    0.00 :   94545:       mov    0x10(%rdx),%r9
    5.13 :   94549:       test   %eax,%eax
    0.00 :   9454b:       jne    94937 <_IO_str_seekoff@@GLIBC_2.2.5+0x4447>
    0.00 :   94551:       mov    %r9,0x10(%rsi)
    0.00 :   94555:       cmp    $0x3f,%rbx
    0.00 :   94559:       ja     94b9a <_IO_str_seekoff@@GLIBC_2.2.5+0x46aa>
    0.00 :   9455f:       mov    %fs:0x0(%rbp),%r9
    0.00 :   94564:       add    $0x10,%rdx
    0.00 :   94568:       lea    (%r9,%r10,1),%rax
    0.00 :   9456c:       mov    %r9,0x8(%rdx)
    0.00 :   94570:       mov    0x40(%rax),%r11
    0.00 :   94574:       mov    %r11,(%rdx)
    0.00 :   94577:       mov    %rdx,0x40(%rax)
    0.00 :   9457b:       movzbl (%r9,%rbx,1),%eax
    0.00 :   94580:       add    $0x1,%eax
    0.00 :   94583:       mov    %al,(%r9,%rbx,1)
    0.00 :   94587:       movsbq %al,%rax
    0.00 :   9458b:       cmp    0x356d4e(%rip),%rax        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   94592:       jae    945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   94594:       mov    0x10(%rsi),%rdx
    0.00 :   94598:       test   %rdx,%rdx
    0.00 :   9459b:       jne    94542 <_IO_str_seekoff@@GLIBC_2.2.5+0x4052>
    0.00 :   9459d:       nopl   (%rax)
    0.00 :   945a0:       mov    0x359386(%rip),%esi        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   945a6:       add    $0x10,%rcx
    0.00 :   945aa:       test   %esi,%esi
    0.00 :   945ac:       jne    94a34 <_IO_str_seekoff@@GLIBC_2.2.5+0x4544>
    0.00 :   945b2:       add    $0x88,%rsp
    0.00 :   945b9:       mov    %rcx,%rax
    0.00 :   945bc:       pop    %rbx
    0.00 :   945bd:       pop    %rbp
    0.00 :   945be:       pop    %r12
    0.00 :   945c0:       pop    %r13
    0.00 :   945c2:       pop    %r14
    0.00 :   945c4:       pop    %r15
    0.00 :   945c6:       retq
    0.00 :   945c7:       nopw   0x0(%rax,%rax,1)
    0.00 :   945d0:       xor    %eax,%eax
    0.00 :   945d2:       mov    $0x20,%ebx
    0.00 :   945d7:       jmpq   9447a <_IO_str_seekoff@@GLIBC_2.2.5+0x3f8a>
    0.00 :   945dc:       nopl   0x0(%rax)
    0.00 :   945e0:       cmp    $0x3ff,%rbx
    0.00 :   945e7:       jbe    94860 <_IO_str_seekoff@@GLIBC_2.2.5+0x4370>
    0.00 :   945ed:       mov    %rbx,%rax
    0.00 :   945f0:       mov    %rbx,%rdi
    0.00 :   945f3:       mov    %rbx,%rcx
    0.00 :   945f6:       shr    $0x12,%rax
    0.00 :   945fa:       mov    %rbx,%rsi
    0.00 :   945fd:       mov    %rbx,%r11
    0.00 :   94600:       shr    $0xc,%rsi
    0.00 :   94604:       shr    $0x6,%rdi
    0.00 :   94608:       shr    $0x9,%rcx
    0.00 :   9460c:       shr    $0xf,%r11
    0.00 :   94610:       mov    $0x2,%edx
    0.00 :   94615:       cmp    $0x2,%rax
    0.00 :   94619:       cmova  %rdx,%rax
    0.00 :   9461d:       lea    0x30(%rdi),%r10d
    0.00 :   94621:       lea    0x6e(%rsi),%r9d
    0.00 :   94625:       lea    0x7c(%rax),%ebp
    0.00 :   94628:       mov    %rsi,0x58(%rsp)
    0.00 :   9462d:       lea    0x77(%r11),%r8d
    0.00 :   94631:       mov    %rsi,%rax
    0.00 :   94634:       mov    %ecx,%esi
    0.00 :   94636:       mov    %rdi,0x40(%rsp)
    0.00 :   9463b:       add    $0x5b,%esi
    0.00 :   9463e:       cmp    $0x30,%rdi
    0.00 :   94642:       mov    %rcx,0x50(%rsp)
    0.00 :   94647:       mov    %r10d,0x4c(%rsp)
    0.00 :   9464c:       mov    %r11,0x60(%rsp)
    0.00 :   94651:       mov    %ebp,0x68(%rsp)
    0.00 :   94655:       mov    %r8d,0x6c(%rsp)
    0.00 :   9465a:       mov    %r9d,0x70(%rsp)
    0.00 :   9465f:       mov    %esi,0x74(%rsp)
    0.00 :   94663:       mov    %r10d,0x14(%rsp)
    0.00 :   94668:       jbe    94688 <_IO_str_seekoff@@GLIBC_2.2.5+0x4198>
    0.00 :   9466a:       cmp    $0x14,%rcx
    0.00 :   9466e:       mov    %esi,0x14(%rsp)
    0.00 :   94672:       jbe    94688 <_IO_str_seekoff@@GLIBC_2.2.5+0x4198>
    0.00 :   94674:       cmp    $0xa,%rax
    0.00 :   94678:       mov    %r9d,0x14(%rsp)
    0.00 :   9467d:       ja     94d20 <_IO_str_seekoff@@GLIBC_2.2.5+0x4830>
    0.00 :   94683:       nopl   0x0(%rax,%rax,1)
    0.00 :   94688:       mov    0x8(%r14),%eax
    0.00 :   9468c:       test   %eax,%eax
    0.00 :   9468e:       jne    94960 <_IO_str_seekoff@@GLIBC_2.2.5+0x4470>
    0.00 :   94694:       mov    0x3566dd(%rip),%rbp        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   9469b:       lea    -0x11(%rbx),%rax
    0.00 :   9469f:       shr    $0x4,%rax
    0.00 :   946a3:       mov    %fs:0x0(%rbp),%r10
    0.00 :   946a8:       mov    %rax,%r12
    0.00 :   946ab:       test   %r10,%r10
    0.00 :   946ae:       je     94cb8 <_IO_str_seekoff@@GLIBC_2.2.5+0x47c8>
    0.00 :   946b4:       cmp    %rax,0x356c15(%rip)        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   946bb:       mov    $0x0,%eax
    0.00 :   946c0:       cmova  %rbx,%rax
    0.00 :   946c4:       mov    %rax,0x20(%rsp)
    0.00 :   946c9:       lea    0x60(%r14),%r13
    0.00 :   946cd:       xor    %r11d,%r11d
    0.00 :   946d0:       mov    %r15d,0x48(%rsp)
    0.00 :   946d5:       mov    %rbp,0x38(%rsp)
    0.00 :   946da:       mov    0x356bff(%rip),%rax        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   946e1:       lea    0x20(%rbx),%rcx
    0.00 :   946e5:       lea    (%r10,%r12,8),%rdi
    0.00 :   946e9:       mov    0x356bf8(%rip),%r15        # 3eb2e8 <__fpu_control@@GLIBC_2.2.5+0x144>
    0.00 :   946f0:       xor    %esi,%esi
    0.00 :   946f2:       xor    %r9d,%r9d
    0.00 :   946f5:       mov    %rcx,0x30(%rsp)
    0.00 :   946fa:       mov    %rdi,0x28(%rsp)
    0.00 :   946ff:       mov    %rax,0x18(%rsp)
    0.00 :   94704:       mov    0x78(%r14),%rax
   11.65 :   94708:       cmp    %rax,%r13
    0.00 :   9470b:       je     94e78 <_IO_str_seekoff@@GLIBC_2.2.5+0x4988>
    0.00 :   94711:       mov    0x8(%rax),%rdx
    0.00 :   94715:       cmp    $0x10,%rdx
    0.00 :   94719:       jbe    94b18 <_IO_str_seekoff@@GLIBC_2.2.5+0x4628>
    0.00 :   9471f:       cmp    0x888(%r14),%rdx
    0.00 :   94726:       ja     94b18 <_IO_str_seekoff@@GLIBC_2.2.5+0x4628>
   11.36 :   9472c:       and    $0xfffffffffffffff8,%rdx
    0.00 :   94730:       cmp    $0x3ff,%rbx
    0.00 :   94737:       mov    0x18(%rax),%rdi
    0.00 :   9473b:       ja     94746 <_IO_str_seekoff@@GLIBC_2.2.5+0x4256>
    0.00 :   9473d:       cmp    %r13,%rdi
    0.00 :   94740:       je     94c08 <_IO_str_seekoff@@GLIBC_2.2.5+0x4718>
    0.00 :   94746:       cmp    %rdx,%rbx
    0.00 :   94749:       mov    %rdi,0x78(%r14)
    0.00 :   9474d:       mov    %r13,0x10(%rdi)
    0.00 :   94751:       je     949f0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4500>
    0.00 :   94757:       cmp    $0x3ff,%rdx
    0.00 :   9475e:       jbe    94910 <_IO_str_seekoff@@GLIBC_2.2.5+0x4420>
    0.00 :   94764:       mov    %rdx,%rcx
    0.00 :   94767:       shr    $0x6,%rcx
    0.00 :   9476b:       cmp    $0x30,%rcx
    0.00 :   9476f:       ja     94b28 <_IO_str_seekoff@@GLIBC_2.2.5+0x4638>
    0.00 :   94775:       add    $0x30,%ecx
    0.00 :   94778:       lea    -0x2(%rcx,%rcx,1),%edi
    0.00 :   9477c:       movslq %edi,%rdi
    0.00 :   9477f:       lea    0x70(%r14,%rdi,8),%r8
    0.00 :   94784:       mov    (%r8),%rbp
    0.00 :   94787:       lea    -0x10(%r8),%rdi
    0.00 :   9478b:       cmp    %rbp,%rdi
    0.00 :   9478e:       mov    %rbp,0x78(%rsp)
    0.00 :   94793:       je     94cd0 <_IO_str_seekoff@@GLIBC_2.2.5+0x47e0>
    0.00 :   94799:       mov    0x8(%r8),%r8
    0.00 :   9479d:       mov    0x8(%r8),%rbp
    0.00 :   947a1:       test   $0x4,%bpl
    0.00 :   947a5:       jne    94d38 <_IO_str_seekoff@@GLIBC_2.2.5+0x4848>
    0.00 :   947ab:       or     $0x1,%rdx
    0.00 :   947af:       cmp    %rdx,%rbp
    0.00 :   947b2:       jbe    94d80 <_IO_str_seekoff@@GLIBC_2.2.5+0x4890>
    0.00 :   947b8:       mov    0x78(%rsp),%rbp
    0.00 :   947bd:       mov    0x28(%rbp),%rdx
    0.00 :   947c1:       mov    %rbp,0x20(%rax)
    0.00 :   947c5:       mov    %rdx,0x28(%rax)
    0.00 :   947c9:       mov    %rax,0x20(%rdx)
    0.00 :   947cd:       mov    %rax,0x28(%rbp)
    0.00 :   947d1:       nopl   0x0(%rax)
    0.00 :   947d8:       mov    %ecx,%edx
    0.00 :   947da:       mov    $0x1,%ebp
    0.00 :   947df:       add    $0x1,%r11
    0.00 :   947e3:       sar    $0x5,%edx
    0.00 :   947e6:       shl    %cl,%ebp
    0.00 :   947e8:       movslq %edx,%rdx
    0.00 :   947eb:       or     %ebp,0x860(%r14,%rdx,4)
    0.00 :   947f3:       test   %r9d,%r9d
    0.00 :   947f6:       mov    %r8,0x18(%rax)
    0.00 :   947fa:       mov    %rdi,0x10(%rax)
    0.00 :   947fe:       mov    %rax,0x18(%rdi)
    0.00 :   94802:       mov    %rax,0x10(%r8)
    0.00 :   94806:       je     94a50 <_IO_str_seekoff@@GLIBC_2.2.5+0x4560>
    0.00 :   9480c:       test   %r15,%r15
    0.00 :   9480f:       je     9481a <_IO_str_seekoff@@GLIBC_2.2.5+0x432a>
    0.00 :   94811:       cmp    %r11,%r15
    0.00 :   94814:       jb     94e81 <_IO_str_seekoff@@GLIBC_2.2.5+0x4991>
    0.00 :   9481a:       add    $0x1,%esi
    0.00 :   9481d:       cmp    $0x270f,%esi
    0.00 :   94823:       jg     94e81 <_IO_str_seekoff@@GLIBC_2.2.5+0x4991>
    0.00 :   94829:       mov    0x78(%r14),%rax
    0.00 :   9482d:       jmpq   94708 <_IO_str_seekoff@@GLIBC_2.2.5+0x4218>
    0.00 :   94832:       nopw   0x0(%rax,%rax,1)
    0.00 :   94838:       mov    0x10(%rax),%r9
    0.00 :   9483c:       mov    %rax,%rcx
    0.00 :   9483f:       mov    %rcx,%rax
    0.00 :   94842:       cmpl   $0x0,%fs:0x18
    0.00 :   9484b:       je     9484e <_IO_str_seekoff@@GLIBC_2.2.5+0x435e>
    0.00 :   9484d:       lock cmpxchg %r9,(%rdi)
    0.00 :   94852:       cmp    %rcx,%rax
    0.00 :   94855:       je     944e8 <_IO_str_seekoff@@GLIBC_2.2.5+0x3ff8>
    0.00 :   9485b:       test   %rax,%rax
    0.00 :   9485e:       jne    94838 <_IO_str_seekoff@@GLIBC_2.2.5+0x4348>
    0.00 :   94860:       lea    0x7fffffff(%r15),%eax
    0.00 :   94867:       add    %eax,%eax
    0.00 :   94869:       lea    0x70(%r14,%rax,8),%rsi
    4.78 :   9486e:       mov    0x8(%rsi),%rcx
   12.94 :   94872:       lea    -0x10(%rsi),%rdx
    0.00 :   94876:       cmp    %rcx,%rdx
    0.00 :   94879:       je     94970 <_IO_str_seekoff@@GLIBC_2.2.5+0x4480>
    0.00 :   9487f:       mov    0x18(%rcx),%rax
    0.00 :   94883:       cmp    %rcx,0x10(%rax)
    0.00 :   94887:       jne    94e68 <_IO_str_seekoff@@GLIBC_2.2.5+0x4978>
    0.00 :   9488d:       lea    0x3573ac(%rip),%r9        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   94894:       orq    $0x1,0x8(%rcx,%rbx,1)
    0.00 :   9489a:       mov    %rax,0x8(%rsi)
    0.00 :   9489e:       mov    %rdx,0x10(%rax)
    0.00 :   948a2:       cmp    %r9,%r14
    0.00 :   948a5:       je     948ac <_IO_str_seekoff@@GLIBC_2.2.5+0x43bc>
    0.00 :   948a7:       orq    $0x4,0x8(%rcx)
    0.00 :   948ac:       mov    0x3564c5(%rip),%rdi        # 3ead78 <h_errlist@@GLIBC_2.2.5+0xcd8>
    0.00 :   948b3:       mov    %fs:(%rdi),%r8
    0.00 :   948b7:       test   %r8,%r8
    0.00 :   948ba:       je     945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   948c0:       lea    -0x11(%rbx),%rdi
    0.00 :   948c4:       shr    $0x4,%rdi
    0.00 :   948c8:       cmp    %rdi,0x356a01(%rip)        # 3eb2d0 <__fpu_control@@GLIBC_2.2.5+0x12c>
    0.00 :   948cf:       jbe    945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   948d5:       movzbl (%r8,%rdi,1),%r10d
    0.00 :   948da:       mov    0x3569ff(%rip),%rbp        # 3eb2e0 <__fpu_control@@GLIBC_2.2.5+0x13c>
    0.00 :   948e1:       lea    (%r8,%rdi,8),%r12
    0.00 :   948e5:       movsbq %r10b,%r11
    0.00 :   948e9:       cmp    %rbp,%r11
    0.00 :   948ec:       jb     94901 <_IO_str_seekoff@@GLIBC_2.2.5+0x4411>
    0.00 :   948ee:       jmpq   945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   948f3:       nopl   0x0(%rax,%rax,1)
    0.00 :   948f8:       test   %rax,%rax
    0.00 :   948fb:       jne    94e00 <_IO_str_seekoff@@GLIBC_2.2.5+0x4910>
    0.00 :   94901:       cmp    %rax,%rdx
    0.00 :   94904:       jne    948f8 <_IO_str_seekoff@@GLIBC_2.2.5+0x4408>
    0.00 :   94906:       jmpq   945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   9490b:       nopl   0x0(%rax,%rax,1)
    0.00 :   94910:       mov    %edx,%ecx
    0.00 :   94912:       shr    $0x4,%ecx
    0.00 :   94915:       lea    -0x2(%rcx,%rcx,1),%edx
    0.00 :   94919:       movslq %edx,%rdx
    0.00 :   9491c:       lea    0x70(%r14,%rdx,8),%rdx
    0.00 :   94921:       lea    -0x10(%rdx),%r8
    0.00 :   94925:       mov    (%rdx),%rdi
    0.00 :   94928:       jmpq   947d8 <_IO_str_seekoff@@GLIBC_2.2.5+0x42e8>
    0.00 :   9492d:       nopl   (%rax)
    0.00 :   94930:       mov    0x10(%rax),%r9
    0.00 :   94934:       mov    %rax,%rdx
    0.00 :   94937:       mov    %rdx,%rax
    0.00 :   9493a:       cmpl   $0x0,%fs:0x18
    0.00 :   94943:       je     94946 <_IO_str_seekoff@@GLIBC_2.2.5+0x4456>
    0.00 :   94945:       lock cmpxchg %r9,(%rdi)
    0.00 :   9494a:       cmp    %rdx,%rax
    0.00 :   9494d:       je     94555 <_IO_str_seekoff@@GLIBC_2.2.5+0x4065>
    0.00 :   94953:       test   %rax,%rax
    0.00 :   94956:       jne    94930 <_IO_str_seekoff@@GLIBC_2.2.5+0x4440>
    0.00 :   94958:       jmpq   945a0 <_IO_str_seekoff@@GLIBC_2.2.5+0x40b0>
    0.00 :   9495d:       nopl   (%rax)
    0.00 :   94960:       mov    %r14,%rdi
    0.00 :   94963:       callq  909e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0>
    0.00 :   94968:       jmpq   94694 <_IO_str_seekoff@@GLIBC_2.2.5+0x41a4>
    0.00 :   9496d:       nopl   (%rax)
    0.00 :   94970:       mov    %rbx,%rax
    0.00 :   94973:       mov    %rbx,%rdi
    0.00 :   94976:       mov    %rbx,%rcx
    0.00 :   94979:       shr    $0x12,%rax
    0.00 :   9497d:       mov    %rbx,%rsi
    0.00 :   94980:       mov    %rbx,%r11
    0.00 :   94983:       shr    $0x6,%rdi
    0.00 :   94987:       shr    $0x9,%rcx
    0.00 :   9498b:       shr    $0xc,%rsi
    0.00 :   9498f:       shr    $0xf,%r11
    0.00 :   94993:       mov    $0x2,%edx
    0.00 :   94998:       cmp    $0x2,%rax
    0.00 :   9499c:       cmova  %rdx,%rax
    0.00 :   949a0:       mov    %rdi,0x40(%rsp)
    0.00 :   949a5:       mov    %rcx,0x50(%rsp)
    0.00 :   949aa:       add    $0x7c,%eax
    0.00 :   949ad:       mov    %rsi,0x58(%rsp)
    0.00 :   949b2:       mov    %r11,0x60(%rsp)
    0.00 :   949b7:       mov    %eax,0x68(%rsp)
    0.00 :   949bb:       mov    %r11d,%eax
    0.00 :   949be:       mov    %r15d,0x14(%rsp)
    0.00 :   949c3:       add    $0x77,%eax
    0.00 :   949c6:       mov    %eax,0x6c(%rsp)
    0.00 :   949ca:       mov    %esi,%eax
    0.00 :   949cc:       add    $0x6e,%eax
    0.00 :   949cf:       mov    %eax,0x70(%rsp)
    0.00 :   949d3:       mov    %ecx,%eax
    0.00 :   949d5:       add    $0x5b,%eax
    0.00 :   949d8:       mov    %eax,0x74(%rsp)
    0.00 :   949dc:       mov    %edi,%eax
    0.00 :   949de:       add    $0x30,%eax
    7.03 :   949e1:       mov    %eax,0x4c(%rsp)
    0.00 :   949e5:       jmpq   94694 <_IO_str_seekoff@@GLIBC_2.2.5+0x41a4>
    0.00 :   949ea:       nopw   0x0(%rax,%rax,1)
    0.00 :   949f0:       lea    0x357249(%rip),%rcx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   949f7:       orq    $0x1,0x8(%rax,%rbx,1)
    0.00 :   949fd:       cmp    %rcx,%r14
    0.00 :   94a00:       je     94a07 <_IO_str_seekoff@@GLIBC_2.2.5+0x4517>
    0.00 :   94a02:       orq    $0x4,0x8(%rax)
    0.00 :   94a07:       cmpq   $0x0,0x20(%rsp)
    0.00 :   94a0d:       lea    0x10(%rax),%rcx
    0.00 :   94a11:       je     94a26 <_IO_str_seekoff@@GLIBC_2.2.5+0x4536>
    0.00 :   94a13:       movsbq (%r10,%r12,1),%r8
    0.00 :   94a18:       cmp    0x18(%rsp),%r8
    0.00 :   94a1d:       mov    %r8,%rdx
    0.00 :   94a20:       jb     94b90 <_IO_str_seekoff@@GLIBC_2.2.5+0x46a0>
    0.00 :   94a26:       mov    0x358f00(%rip),%esi        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   94a2c:       test   %esi,%esi
    0.00 :   94a2e:       je     945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94a34:       mov    0x8(%rsp),%rdx
    0.00 :   94a39:       mov    %rcx,%rdi
    0.00 :   94a3c:       xor    $0xff,%sil
    0.00 :   94a40:       callq  211f0 <*ABS*+0x9ec40@plt>
    0.00 :   94a45:       mov    %rax,%rcx
    0.00 :   94a48:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94a4d:       nopl   (%rax)
    0.00 :   94a50:       add    $0x1,%esi
    0.00 :   94a53:       cmp    $0x270f,%esi
    0.00 :   94a59:       jle    94829 <_IO_str_seekoff@@GLIBC_2.2.5+0x4339>
    0.00 :   94a5f:       cmp    $0x3ff,%rbx
    0.00 :   94a66:       jbe    94a8e <_IO_str_seekoff@@GLIBC_2.2.5+0x459e>
    0.00 :   94a68:       mov    0x14(%rsp),%eax
    0.00 :   94a6c:       add    $0x7fffffff,%eax
    0.00 :   94a71:       add    %eax,%eax
    0.00 :   94a73:       lea    0x70(%r14,%rax,8),%rax
    0.00 :   94a78:       mov    (%rax),%rdx
    0.00 :   94a7b:       lea    -0x10(%rax),%rcx
    0.00 :   94a7f:       cmp    %rcx,%rdx
    0.00 :   94a82:       je     94a8e <_IO_str_seekoff@@GLIBC_2.2.5+0x459e>
    0.00 :   94a84:       cmp    %rbx,0x8(%rdx)
    0.00 :   94a88:       jae    95276 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d86>
    0.00 :   94a8e:       mov    0x14(%rsp),%eax
    0.00 :   94a92:       lea    0x1(%rax),%ecx
    0.00 :   94a95:       add    %eax,%eax
    0.00 :   94a97:       lea    0x60(%r14,%rax,8),%rsi
    0.00 :   94a9c:       mov    %ecx,%edi
    0.00 :   94a9e:       shr    $0x5,%edi
    0.00 :   94aa1:       mov    %edi,%eax
    0.00 :   94aa3:       mov    0x860(%r14,%rax,4),%edx
    0.00 :   94aab:       mov    $0x1,%eax
    0.00 :   94ab0:       shl    %cl,%eax
    0.00 :   94ab2:       cmp    %edx,%eax
    0.00 :   94ab4:       ja     94f1b <_IO_str_seekoff@@GLIBC_2.2.5+0x4a2b>
    0.00 :   94aba:       test   %eax,%eax
    0.00 :   94abc:       je     94f1b <_IO_str_seekoff@@GLIBC_2.2.5+0x4a2b>
    0.00 :   94ac2:       test   %edx,%eax
    0.00 :   94ac4:       jne    94ffc <_IO_str_seekoff@@GLIBC_2.2.5+0x4b0c>
    0.00 :   94aca:       add    $0x10,%rsi
    0.00 :   94ace:       add    %eax,%eax
    0.00 :   94ad0:       jne    94ac2 <_IO_str_seekoff@@GLIBC_2.2.5+0x45d2>
    0.00 :   94ad2:       mov    0x356317(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94ad9:       lea    0x11f119(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94ae0:       lea    0x120311(%rip),%rdi        # 1b4df8 <_libc_intl_domainname@@GLIBC_2.2.5+0x1164>
    0.00 :   94ae7:       mov    $0xfae,%r9d
    0.00 :   94aed:       mov    (%rax),%rdx
    0.00 :   94af0:       lea    0x11f359(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94af7:       cmpb   $0x0,(%rdx)
    0.00 :   94afa:       cmovne %rax,%rcx
    0.00 :   94afe:       sub    $0x8,%rsp
    0.00 :   94b02:       push   %rdi
    0.00 :   94b03:       push   %rax
    0.00 :   94b04:       lea    0x124565(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   94b0b:       push   %rax
    0.00 :   94b0c:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   94b11:       nopl   0x0(%rax)
    0.00 :   94b18:       lea    0x12026f(%rip),%rdi        # 1b4d8e <_libc_intl_domainname@@GLIBC_2.2.5+0x10fa>
    0.00 :   94b1f:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   94b24:       nopl   0x0(%rax)
    0.00 :   94b28:       mov    %rdx,%rcx
    0.00 :   94b2b:       shr    $0x9,%rcx
    0.00 :   94b2f:       cmp    $0x14,%rcx
    0.00 :   94b33:       jbe    94ce0 <_IO_str_seekoff@@GLIBC_2.2.5+0x47f0>
    0.00 :   94b39:       mov    %rdx,%rcx
    0.00 :   94b3c:       shr    $0xc,%rcx
    0.00 :   94b40:       cmp    $0xa,%rcx
    0.00 :   94b44:       ja     94e50 <_IO_str_seekoff@@GLIBC_2.2.5+0x4960>
    0.00 :   94b4a:       add    $0x6e,%ecx
    0.00 :   94b4d:       jmpq   94778 <_IO_str_seekoff@@GLIBC_2.2.5+0x4288>
    0.00 :   94b52:       nopw   0x0(%rax,%rax,1)
    0.00 :   94b58:       xor    %esi,%esi
    0.00 :   94b5a:       mov    %rbx,%rdi
    0.00 :   94b5d:       callq  93b20 <_IO_str_seekoff@@GLIBC_2.2.5+0x3630>
    0.00 :   94b62:       test   %rax,%rax
    0.00 :   94b65:       mov    %rax,%rcx
    0.00 :   94b68:       jne    94a26 <_IO_str_seekoff@@GLIBC_2.2.5+0x4536>
    0.00 :   94b6e:       xor    %ecx,%ecx
    0.00 :   94b70:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94b75:       nopl   (%rax)
    0.00 :   94b78:       mov    0x3562e9(%rip),%rax        # 3eae68 <h_errlist@@GLIBC_2.2.5+0xdc8>
    0.00 :   94b7f:       xor    %ecx,%ecx
    0.00 :   94b81:       movl   $0xc,%fs:(%rax)
    0.00 :   94b88:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94b8d:       nopl   (%rax)
    0.00 :   94b90:       cmp    $0x3f,%r12
    0.00 :   94b94:       jbe    94cf0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4800>
    0.00 :   94b9a:       mov    0x35624f(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94ba1:       lea    0x11f051(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94ba8:       lea    0x120186(%rip),%rdi        # 1b4d35 <_libc_intl_domainname@@GLIBC_2.2.5+0x10a1>
    0.00 :   94baf:       mov    $0xb75,%r9d
    0.00 :   94bb5:       mov    (%rax),%rdx
    0.00 :   94bb8:       lea    0x11f291(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94bbf:       cmpb   $0x0,(%rdx)
    0.00 :   94bc2:       cmovne %rax,%rcx
    0.00 :   94bc6:       sub    $0x8,%rsp
    0.00 :   94bca:       push   %rdi
    0.00 :   94bcb:       push   %rax
    0.00 :   94bcc:       lea    0x12448d(%rip),%rax        # 1b9060 <_libc_intl_domainname@@GLIBC_2.2.5+0x53cc>
    0.00 :   94bd3:       push   %rax
    0.00 :   94bd4:       lea    0x12009d(%rip),%r8        # 1b4c78 <_libc_intl_domainname@@GLIBC_2.2.5+0xfe4>
    0.00 :   94bdb:       lea    0x123aee(%rip),%rsi        # 1b86d0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4a3c>
    0.00 :   94be2:       xor    %edi,%edi
    0.00 :   94be4:       xor    %eax,%eax
    0.00 :   94be6:       callq  7deb0 <psiginfo@@GLIBC_2.10+0x1780>
    0.00 :   94beb:       mov    0x3561be(%rip),%rax        # 3eadb0 <stderr@@GLIBC_2.2.5-0x1a90>
    0.00 :   94bf2:       add    $0x20,%rsp
    0.00 :   94bf6:       mov    (%rax),%rdi
    0.00 :   94bf9:       callq  7e8c0 <_IO_fflush@@GLIBC_2.2.5>
    0.00 :   94bfe:       callq  407e0 <abort@@GLIBC_2.2.5>
    0.00 :   94c03:       nopl   0x0(%rax,%rax,1)
    0.00 :   94c08:       mov    0x68(%r14),%rcx
    0.00 :   94c0c:       cmp    %rax,%rcx
    0.00 :   94c0f:       jne    94746 <_IO_str_seekoff@@GLIBC_2.2.5+0x4256>
    0.00 :   94c15:       cmp    %rdx,0x30(%rsp)
    0.00 :   94c1a:       jae    94746 <_IO_str_seekoff@@GLIBC_2.2.5+0x4256>
    0.00 :   94c20:       mov    %rdx,%rsi
    0.00 :   94c23:       add    %rbx,%rax
    0.00 :   94c26:       sub    %rbx,%rsi
    0.00 :   94c29:       mov    %rax,0x70(%r14)
    0.00 :   94c2d:       mov    %rax,0x78(%r14)
    0.00 :   94c31:       cmp    $0x3ff,%rsi
    0.00 :   94c38:       mov    %rax,0x68(%r14)
    0.00 :   94c3c:       mov    %r13,0x10(%rax)
    0.00 :   94c40:       mov    %r13,0x18(%rax)
    0.00 :   94c44:       jbe    94c56 <_IO_str_seekoff@@GLIBC_2.2.5+0x4766>
    0.00 :   94c46:       movq   $0x0,0x20(%rax)
    0.00 :   94c4e:       movq   $0x0,0x28(%rax)
    0.00 :   94c56:       lea    0x356fe3(%rip),%rdi        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   94c5d:       xor    %r8d,%r8d
    0.00 :   94c60:       cmp    %rdi,%r14
    0.00 :   94c63:       mov    %rbx,%rdi
    0.00 :   94c66:       setne  %r8b
    0.00 :   94c6a:       or     $0x1,%rdi
    0.00 :   94c6e:       add    $0x10,%rcx
    0.00 :   94c72:       shl    $0x2,%r8
    0.00 :   94c76:       or     %r8,%rdi
    0.00 :   94c79:       mov    %rdi,-0x8(%rcx)
    0.00 :   94c7d:       mov    %rsi,%rdi
    0.00 :   94c80:       or     $0x1,%rdi
    0.00 :   94c84:       mov    %rdi,0x8(%rax)
    0.00 :   94c88:       mov    0x358c9e(%rip),%eax        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   94c8e:       mov    %rsi,-0x10(%rcx,%rdx,1)
   23.46 :   94c93:       test   %eax,%eax
    0.00 :   94c95:       je     945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94c9b:       mov    0x8(%rsp),%rdx
    0.00 :   94ca0:       xor    $0xff,%al
    0.00 :   94ca2:       mov    %rcx,%rdi
    0.00 :   94ca5:       mov    %eax,%esi
    0.00 :   94ca7:       callq  211f0 <*ABS*+0x9ec40@plt>
    0.00 :   94cac:       mov    %rax,%rcx
    0.00 :   94caf:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94cb4:       nopl   0x0(%rax)
    0.00 :   94cb8:       movq   $0x0,0x20(%rsp)
    0.00 :   94cc1:       jmpq   946c9 <_IO_str_seekoff@@GLIBC_2.2.5+0x41d9>
    0.00 :   94cc6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   94cd0:       mov    %rax,0x28(%rax)
    0.00 :   94cd4:       mov    %rax,0x20(%rax)
    0.00 :   94cd8:       mov    %rdi,%r8
    0.00 :   94cdb:       jmpq   947d8 <_IO_str_seekoff@@GLIBC_2.2.5+0x42e8>
    0.00 :   94ce0:       add    $0x5b,%ecx
    0.00 :   94ce3:       jmpq   94778 <_IO_str_seekoff@@GLIBC_2.2.5+0x4288>
    0.00 :   94ce8:       nopl   0x0(%rax,%rax,1)
    0.00 :   94cf0:       mov    0x28(%rsp),%r9
    0.00 :   94cf5:       add    $0x1,%edx
    0.00 :   94cf8:       mov    %r10,0x18(%rax)
    0.00 :   94cfc:       mov    0x40(%r9),%r8
    0.00 :   94d00:       mov    %r8,0x10(%rax)
    0.00 :   94d04:       mov    %rcx,0x40(%r9)
    0.00 :   94d08:       mov    %rdi,%rax
    0.00 :   94d0b:       mov    %dl,(%r10,%r12,1)
    0.00 :   94d0f:       mov    $0x1,%r9d
    0.00 :   94d15:       jmpq   94708 <_IO_str_seekoff@@GLIBC_2.2.5+0x4218>
    0.00 :   94d1a:       nopw   0x0(%rax,%rax,1)
    0.00 :   94d20:       cmp    $0x4,%r11
    0.00 :   94d24:       cmova  %ebp,%r8d
    0.00 :   94d28:       mov    %r8d,0x14(%rsp)
    0.00 :   94d2d:       jmpq   94688 <_IO_str_seekoff@@GLIBC_2.2.5+0x4198>
    0.00 :   94d32:       nopw   0x0(%rax,%rax,1)
    0.00 :   94d38:       mov    0x3560b1(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94d3f:       lea    0x11eeb3(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94d46:       lea    0x12005d(%rip),%rdi        # 1b4daa <_libc_intl_domainname@@GLIBC_2.2.5+0x1116>
    0.00 :   94d4d:       mov    $0xf00,%r9d
    0.00 :   94d53:       mov    (%rax),%rdx
    0.00 :   94d56:       lea    0x11f0f3(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94d5d:       cmpb   $0x0,(%rdx)
    0.00 :   94d60:       cmovne %rax,%rcx
    0.00 :   94d64:       sub    $0x8,%rsp
    0.00 :   94d68:       push   %rdi
    0.00 :   94d69:       push   %rax
    0.00 :   94d6a:       lea    0x1242ff(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   94d71:       push   %rax
    0.00 :   94d72:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   94d77:       nopw   0x0(%rax,%rax,1)
    0.00 :   94d80:       mov    0x78(%rsp),%rdi
    0.00 :   94d85:       mov    0x8(%rdi),%rdi
    0.00 :   94d89:       test   $0x4,%dil
    0.00 :   94d8d:       jne    94edc <_IO_str_seekoff@@GLIBC_2.2.5+0x49ec>
    0.00 :   94d93:       mov    0x78(%rsp),%rbp
    0.00 :   94d98:       cmp    %rdi,%rdx
    0.00 :   94d9b:       jae    95020 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b30>
    0.00 :   94da1:       mov    0x20(%rbp),%rbp
    0.00 :   94da5:       mov    0x8(%rbp),%rdi
    0.00 :   94da9:       test   $0x4,%dil
    0.00 :   94dad:       je     94d98 <_IO_str_seekoff@@GLIBC_2.2.5+0x48a8>
    0.00 :   94daf:       mov    0x35603a(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94db6:       lea    0x11ee3c(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94dbd:       lea    0x120001(%rip),%rdi        # 1b4dc5 <_libc_intl_domainname@@GLIBC_2.2.5+0x1131>
    0.00 :   94dc4:       mov    $0xf11,%r9d
    0.00 :   94dca:       mov    (%rax),%rdx
    0.00 :   94dcd:       lea    0x11f07c(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94dd4:       cmpb   $0x0,(%rdx)
    0.00 :   94dd7:       cmovne %rax,%rcx
    0.00 :   94ddb:       sub    $0x8,%rsp
    0.00 :   94ddf:       push   %rdi
    0.00 :   94de0:       push   %rax
    0.00 :   94de1:       lea    0x124288(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   94de8:       push   %rax
    0.00 :   94de9:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   94dee:       xchg   %ax,%ax
    0.00 :   94df0:       lea    0x123d71(%rip),%rdi        # 1b8b68 <_libc_intl_domainname@@GLIBC_2.2.5+0x4ed4>
    0.00 :   94df7:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   94dfc:       nopl   0x0(%rax)
    0.00 :   94e00:       mov    0x18(%rax),%r11
    6.46 :   94e04:       orq    $0x1,0x8(%rax,%rbx,1)
    0.00 :   94e0a:       cmp    %r9,%r14
    0.00 :   94e0d:       je     94e14 <_IO_str_seekoff@@GLIBC_2.2.5+0x4924>
    0.00 :   94e0f:       orq    $0x4,0x8(%rax)
    0.00 :   94e14:       add    $0x1,%r10d
    0.00 :   94e18:       cmp    $0x3f,%rdi
    0.00 :   94e1c:       mov    %r11,0x8(%rsi)
    0.00 :   94e20:       mov    %rdx,0x10(%r11)
    0.00 :   94e24:       ja     94b9a <_IO_str_seekoff@@GLIBC_2.2.5+0x46aa>
    0.00 :   94e2a:       mov    0x40(%r12),%r13
    0.00 :   94e2f:       add    $0x10,%rax
    0.00 :   94e33:       mov    %r8,0x8(%rax)
    0.00 :   94e37:       mov    %r13,(%rax)
    0.00 :   94e3a:       mov    %rax,0x40(%r12)
    0.00 :   94e3f:       mov    %r11,%rax
    0.00 :   94e42:       mov    %r10b,(%r8,%rdi,1)
    0.00 :   94e46:       jmpq   948e5 <_IO_str_seekoff@@GLIBC_2.2.5+0x43f5>
    0.00 :   94e4b:       nopl   0x0(%rax,%rax,1)
    0.00 :   94e50:       mov    %rdx,%rcx
    0.00 :   94e53:       shr    $0xf,%rcx
    0.00 :   94e57:       cmp    $0x4,%rcx
    0.00 :   94e5b:       ja     94ec0 <_IO_str_seekoff@@GLIBC_2.2.5+0x49d0>
    0.00 :   94e5d:       add    $0x77,%ecx
    0.00 :   94e60:       jmpq   94778 <_IO_str_seekoff@@GLIBC_2.2.5+0x4288>
    0.00 :   94e65:       nopl   (%rax)
    0.00 :   94e68:       lea    0x123d21(%rip),%rdi        # 1b8b90 <_libc_intl_domainname@@GLIBC_2.2.5+0x4efc>
    0.00 :   94e6f:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   94e74:       nopl   0x0(%rax)
    0.00 :   94e78:       test   %r9d,%r9d
    0.00 :   94e7b:       je     94a5f <_IO_str_seekoff@@GLIBC_2.2.5+0x456f>
    0.00 :   94e81:       cmp    $0x3f,%r12
    0.00 :   94e85:       mov    0x38(%rsp),%rbp
    0.00 :   94e8a:       ja     9506a <_IO_str_seekoff@@GLIBC_2.2.5+0x4b7a>
    0.00 :   94e90:       mov    %fs:0x0(%rbp),%rax
    0.00 :   94e95:       lea    (%rax,%r12,8),%rdx
    0.00 :   94e99:       mov    0x40(%rdx),%rcx
    0.00 :   94e9d:       test   %rcx,%rcx
    0.00 :   94ea0:       je     95124 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c34>
    0.00 :   94ea6:       mov    (%rcx),%rsi
    0.00 :   94ea9:       mov    %rsi,0x40(%rdx)
    0.00 :   94ead:       subb   $0x1,(%rax,%r12,1)
    0.00 :   94eb2:       movq   $0x0,0x8(%rcx)
    0.00 :   94eba:       jmpq   945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   94ebf:       nop
    0.00 :   94ec0:       mov    %rdx,%rcx
    0.00 :   94ec3:       mov    $0x2,%edi
    0.00 :   94ec8:       shr    $0x12,%rcx
    0.00 :   94ecc:       cmp    $0x2,%rcx
    0.00 :   94ed0:       cmova  %rdi,%rcx
    0.00 :   94ed4:       add    $0x7c,%ecx
    0.00 :   94ed7:       jmpq   94778 <_IO_str_seekoff@@GLIBC_2.2.5+0x4288>
    0.00 :   94edc:       mov    0x355f0d(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   94ee3:       lea    0x11ed0f(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   94eea:       lea    0x11fed4(%rip),%rdi        # 1b4dc5 <_libc_intl_domainname@@GLIBC_2.2.5+0x1131>
    0.00 :   94ef1:       mov    $0xf0d,%r9d
    0.00 :   94ef7:       mov    (%rax),%rdx
    0.00 :   94efa:       lea    0x11ef4f(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   94f01:       cmpb   $0x0,(%rdx)
    0.00 :   94f04:       cmovne %rax,%rcx
    0.00 :   94f08:       sub    $0x8,%rsp
    0.00 :   94f0c:       push   %rdi
    0.00 :   94f0d:       push   %rax
    0.00 :   94f0e:       lea    0x12415b(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   94f15:       push   %rax
    0.00 :   94f16:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   94f1b:       lea    0x1(%rdi),%eax
    0.00 :   94f1e:       cmp    $0x4,%eax
    0.00 :   94f21:       je     94f63 <_IO_str_seekoff@@GLIBC_2.2.5+0x4a73>
    0.00 :   94f23:       mov    %eax,%edx
    0.00 :   94f25:       mov    0x860(%r14,%rdx,4),%edx
    0.00 :   94f2d:       test   %edx,%edx
    0.00 :   94f2f:       jne    95051 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b61>
    0.00 :   94f35:       lea    0x2(%rdi),%eax
    0.00 :   94f38:       cmp    $0x4,%eax
    0.00 :   94f3b:       je     94f63 <_IO_str_seekoff@@GLIBC_2.2.5+0x4a73>
    0.00 :   94f3d:       mov    %eax,%edx
    0.00 :   94f3f:       mov    0x860(%r14,%rdx,4),%edx
    0.00 :   94f47:       test   %edx,%edx
    0.00 :   94f49:       jne    95051 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b61>
    0.00 :   94f4f:       cmp    $0x1,%edi
    0.00 :   94f52:       je     94f63 <_IO_str_seekoff@@GLIBC_2.2.5+0x4a73>
    0.00 :   94f54:       mov    0x86c(%r14),%edx
    0.00 :   94f5b:       test   %edx,%edx
    0.00 :   94f5d:       jne    9511a <_IO_str_seekoff@@GLIBC_2.2.5+0x4c2a>
    0.00 :   94f63:       mov    0x60(%r14),%rcx
    0.00 :   94f67:       lea    0x20(%rbx),%rax
    0.00 :   94f6b:       mov    0x8(%rcx),%rdx
    0.00 :   94f6f:       and    $0xfffffffffffffff8,%rdx
    0.00 :   94f73:       cmp    %rdx,%rax
    0.00 :   94f76:       jbe    95239 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d49>
    0.00 :   94f7c:       mov    %r11,0x18(%rsp)
    0.00 :   94f81:       mov    0x8(%r14),%eax
    0.00 :   94f85:       test   %eax,%eax
    0.00 :   94f87:       je     95175 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c85>
    0.00 :   94f8d:       mov    %r14,%rdi
    0.00 :   94f90:       callq  909e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0>
    0.00 :   94f95:       mov    0x48(%rsp),%eax
    0.00 :   94f99:       cmp    $0x3ff,%rbx
    0.00 :   94fa0:       mov    0x18(%rsp),%r11
    0.00 :   94fa5:       mov    %eax,0x14(%rsp)
    0.00 :   94fa9:       jbe    94fee <_IO_str_seekoff@@GLIBC_2.2.5+0x4afe>
    0.00 :   94fab:       cmpq   $0x30,0x40(%rsp)
    0.00 :   94fb1:       mov    0x4c(%rsp),%eax
    0.00 :   94fb5:       mov    %eax,0x14(%rsp)
    0.00 :   94fb9:       jbe    94fee <_IO_str_seekoff@@GLIBC_2.2.5+0x4afe>
    0.00 :   94fbb:       cmpq   $0x14,0x50(%rsp)
    0.00 :   94fc1:       mov    0x74(%rsp),%eax
    0.00 :   94fc5:       mov    %eax,0x14(%rsp)
    0.00 :   94fc9:       jbe    94fee <_IO_str_seekoff@@GLIBC_2.2.5+0x4afe>
    0.00 :   94fcb:       cmpq   $0xa,0x58(%rsp)
    0.00 :   94fd1:       mov    0x70(%rsp),%eax
    0.00 :   94fd5:       mov    %eax,0x14(%rsp)
    0.00 :   94fd9:       jbe    94fee <_IO_str_seekoff@@GLIBC_2.2.5+0x4afe>
    0.00 :   94fdb:       cmpq   $0x5,0x60(%rsp)
    0.00 :   94fe1:       mov    0x68(%rsp),%eax
    0.00 :   94fe5:       cmovb  0x6c(%rsp),%eax
    0.00 :   94fea:       mov    %eax,0x14(%rsp)
    0.00 :   94fee:       mov    0x38(%rsp),%rax
    0.00 :   94ff3:       mov    %fs:(%rax),%r10
    0.00 :   94ff7:       jmpq   946da <_IO_str_seekoff@@GLIBC_2.2.5+0x41ea>
    0.00 :   94ffc:       mov    0x18(%rsi),%rcx
    0.00 :   95000:       cmp    %rcx,%rsi
    0.00 :   95003:       jne    95082 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b92>
    0.00 :   95005:       mov    %eax,%ecx
    0.00 :   95007:       add    $0x10,%rsi
    0.00 :   9500b:       add    %eax,%eax
    0.00 :   9500d:       not    %ecx
    0.00 :   9500f:       and    %ecx,%edx
    0.00 :   95011:       mov    %edi,%ecx
    0.00 :   95013:       mov    %edx,0x860(%r14,%rcx,4)
    0.00 :   9501b:       jmpq   94ab2 <_IO_str_seekoff@@GLIBC_2.2.5+0x45c2>
    0.00 :   95020:       mov    %rbp,0x78(%rsp)
    0.00 :   95025:       mov    %rbp,%rdi
    0.00 :   95028:       je     9504b <_IO_str_seekoff@@GLIBC_2.2.5+0x4b5b>
    0.00 :   9502a:       mov    0x28(%rbp),%rdx
    0.00 :   9502e:       mov    %rbp,0x20(%rax)
    0.00 :   95032:       mov    %rdx,0x28(%rax)
    0.00 :   95036:       mov    %rax,0x28(%rbp)
    0.00 :   9503a:       mov    0x28(%rax),%rdx
    0.00 :   9503e:       mov    %rax,0x20(%rdx)
    0.00 :   95042:       mov    0x18(%rdi),%r8
    0.00 :   95046:       jmpq   947d8 <_IO_str_seekoff@@GLIBC_2.2.5+0x42e8>
    0.00 :   9504b:       mov    0x10(%rbp),%rdi
    0.00 :   9504f:       jmp    95042 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b52>
    0.00 :   95051:       mov    %eax,%edi
    0.00 :   95053:       mov    %edi,%eax
    0.00 :   95055:       shl    $0x6,%eax
    0.00 :   95058:       sub    $0x2,%eax
    0.00 :   9505b:       lea    0x60(%r14,%rax,8),%rsi
    0.00 :   95060:       mov    $0x1,%eax
    0.00 :   95065:       jmpq   94ac2 <_IO_str_seekoff@@GLIBC_2.2.5+0x45d2>
    0.00 :   9506a:       lea    0x123fdf(%rip),%rdx        # 1b9050 <_libc_intl_domainname@@GLIBC_2.2.5+0x53bc>
    0.00 :   95071:       lea    0x11fcbd(%rip),%rdi        # 1b4d35 <_libc_intl_domainname@@GLIBC_2.2.5+0x10a1>
    0.00 :   95078:       mov    $0xb86,%esi
    0.00 :   9507d:       callq  21379 <free@plt+0xb1>
    0.00 :   95082:       mov    0x8(%rcx),%r8
    6.26 :   95086:       mov    %r8,%rax
    0.00 :   95089:       and    $0xfffffffffffffff8,%rax
    0.00 :   9508d:       cmp    %rax,%rbx
    0.00 :   95090:       ja     9513c <_IO_str_seekoff@@GLIBC_2.2.5+0x4c4c>
    0.00 :   95096:       lea    (%rcx,%rax,1),%rsi
    0.00 :   9509a:       mov    %rax,%rdi
    0.00 :   9509d:       sub    %rbx,%rdi
    0.00 :   950a0:       cmp    %rax,(%rsi)
    0.00 :   950a3:       jne    95392 <_IO_str_seekoff@@GLIBC_2.2.5+0x4ea2>
    0.00 :   950a9:       mov    0x10(%rcx),%rax
    0.00 :   950ad:       mov    0x18(%rcx),%rdx
    0.00 :   950b1:       cmp    %rcx,0x18(%rax)
    0.00 :   950b5:       jne    9522d <_IO_str_seekoff@@GLIBC_2.2.5+0x4d3d>
    0.00 :   950bb:       cmp    %rcx,0x10(%rdx)
    0.00 :   950bf:       jne    9522d <_IO_str_seekoff@@GLIBC_2.2.5+0x4d3d>
   10.93 :   950c5:       cmp    $0x3ff,%r8
    0.00 :   950cc:       mov    %rdx,0x18(%rax)
    0.00 :   950d0:       mov    %rax,0x10(%rdx)
    0.00 :   950d4:       jbe    950e3 <_IO_str_seekoff@@GLIBC_2.2.5+0x4bf3>
    0.00 :   950d6:       mov    0x20(%rcx),%rdx
    0.00 :   950da:       test   %rdx,%rdx
    0.00 :   950dd:       jne    9539e <_IO_str_seekoff@@GLIBC_2.2.5+0x4eae>
    0.00 :   950e3:       cmp    $0x1f,%rdi
    0.00 :   950e7:       ja     951af <_IO_str_seekoff@@GLIBC_2.2.5+0x4cbf>
    0.00 :   950ed:       lea    0x356b4c(%rip),%rax        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   950f4:       orq    $0x1,0x8(%rsi)
    0.00 :   950f9:       cmp    %rax,%r14
    0.00 :   950fc:       je     95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   950fe:       orq    $0x4,0x8(%rcx)
    0.00 :   95103:       mov    0x358823(%rip),%eax        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   95109:       add    $0x10,%rcx
    0.00 :   9510d:       test   %eax,%eax
    0.00 :   9510f:       je     945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   95115:       jmpq   94c9b <_IO_str_seekoff@@GLIBC_2.2.5+0x47ab>
    0.00 :   9511a:       mov    $0x3,%edi
    0.00 :   9511f:       jmpq   95053 <_IO_str_seekoff@@GLIBC_2.2.5+0x4b63>
    0.00 :   95124:       lea    0x123f25(%rip),%rdx        # 1b9050 <_libc_intl_domainname@@GLIBC_2.2.5+0x53bc>
    0.00 :   9512b:       lea    0x11fcaa(%rip),%rdi        # 1b4ddc <_libc_intl_domainname@@GLIBC_2.2.5+0x1148>
    0.00 :   95132:       mov    $0xb87,%esi
    0.00 :   95137:       callq  21379 <free@plt+0xb1>
    0.00 :   9513c:       mov    0x355cad(%rip),%rax        # 3eadf0 <__progname@@GLIBC_2.2.5-0x1710>
    0.00 :   95143:       mov    (%rax),%rdx
    0.00 :   95146:       cmpb   $0x0,(%rdx)
    0.00 :   95149:       je     9519f <_IO_str_seekoff@@GLIBC_2.2.5+0x4caf>
    0.00 :   9514b:       lea    0x11ecfe(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   95152:       mov    %rax,%rcx
    0.00 :   95155:       lea    0x123a8c(%rip),%rdi        # 1b8be8 <_libc_intl_domainname@@GLIBC_2.2.5+0x4f54>
    0.00 :   9515c:       sub    $0x8,%rsp
    0.00 :   95160:       mov    $0xfc1,%r9d
    0.00 :   95166:       push   %rdi
    0.00 :   95167:       push   %rax
    0.00 :   95168:       lea    0x123f01(%rip),%rax        # 1b9070 <_libc_intl_domainname@@GLIBC_2.2.5+0x53dc>
    0.00 :   9516f:       push   %rax
    0.00 :   95170:       jmpq   94bd4 <_IO_str_seekoff@@GLIBC_2.2.5+0x46e4>
    0.00 :   95175:       mov    %r14,%rsi
    0.00 :   95178:       mov    %rbx,%rdi
    0.00 :   9517b:       callq  93b20 <_IO_str_seekoff@@GLIBC_2.2.5+0x3630>
    0.00 :   95180:       test   %rax,%rax
    0.00 :   95183:       mov    %rax,%rcx
    0.00 :   95186:       je     94b6e <_IO_str_seekoff@@GLIBC_2.2.5+0x467e>
    0.00 :   9518c:       mov    0x35879a(%rip),%eax        # 3ed92c <__malloc_initialize_hook@GLIBC_2.2.5+0x3c>
    0.00 :   95192:       test   %eax,%eax
    0.00 :   95194:       je     945b2 <_IO_str_seekoff@@GLIBC_2.2.5+0x40c2>
    0.00 :   9519a:       jmpq   94c9b <_IO_str_seekoff@@GLIBC_2.2.5+0x47ab>
    0.00 :   9519f:       lea    0x11ea53(%rip),%rcx        # 1b3bf9 <_itoa_lower_digits@@GLIBC_PRIVATE+0x66d9>
    0.00 :   951a6:       lea    0x11eca3(%rip),%rax        # 1b3e50 <_libc_intl_domainname@@GLIBC_2.2.5+0x1bc>
    0.00 :   951ad:       jmp    95155 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c65>
    0.00 :   951af:       mov    0x70(%r14),%rdx
    0.00 :   951b3:       lea    (%rcx,%rbx,1),%rax
    0.00 :   951b7:       cmp    %r13,0x18(%rdx)
    0.00 :   951bb:       jne    953c6 <_IO_str_seekoff@@GLIBC_2.2.5+0x4ed6>
    0.00 :   951c1:       cmp    $0x3ff,%rbx
    0.00 :   951c8:       mov    %r13,0x18(%rax)
    0.00 :   951cc:       mov    %rdx,0x10(%rax)
    0.00 :   951d0:       mov    %rax,0x70(%r14)
    0.00 :   951d4:       mov    %rax,0x18(%rdx)
    0.00 :   951d8:       ja     951de <_IO_str_seekoff@@GLIBC_2.2.5+0x4cee>
    0.00 :   951da:       mov    %rax,0x68(%r14)
    0.00 :   951de:       cmp    $0x3ff,%rdi
    0.00 :   951e5:       jbe    951f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d07>
    0.00 :   951e7:       movq   $0x0,0x20(%rax)
    0.00 :   951ef:       movq   $0x0,0x28(%rax)
    0.00 :   951f7:       lea    0x356a42(%rip),%rdx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   951fe:       xor    %r8d,%r8d
    0.00 :   95201:       cmp    %rdx,%r14
    0.00 :   95204:       setne  %r8b
    0.00 :   95208:       or     $0x1,%rbx
    0.00 :   9520c:       shl    $0x2,%r8
    0.00 :   95210:       mov    %rbx,%rdx
    0.00 :   95213:       or     %r8,%rdx
    0.00 :   95216:       mov    %rdx,0x8(%rcx)
    0.00 :   9521a:       mov    %rdi,%rdx
    0.00 :   9521d:       or     $0x1,%rdx
    0.00 :   95221:       mov    %rdx,0x8(%rax)
    0.00 :   95225:       mov    %rdi,(%rsi)
    0.00 :   95228:       jmpq   95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   9522d:       lea    0x11fa06(%rip),%rdi        # 1b4c3a <_libc_intl_domainname@@GLIBC_2.2.5+0xfa6>
    0.00 :   95234:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   95239:       mov    %rdx,%rax
    0.00 :   9523c:       lea    0x3569fd(%rip),%rdx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   95243:       xor    %esi,%esi
    0.00 :   95245:       sub    %rbx,%rax
    0.00 :   95248:       lea    (%rcx,%rbx,1),%rdi
    0.00 :   9524c:       cmp    %rdx,%r14
    0.00 :   9524f:       setne  %sil
    0.00 :   95253:       or     $0x1,%rbx
    0.00 :   95257:       or     $0x1,%rax
    0.00 :   9525b:       shl    $0x2,%rsi
    0.00 :   9525f:       mov    %rbx,%rdx
    0.00 :   95262:       mov    %rdi,0x60(%r14)
    0.00 :   95266:       or     %rsi,%rdx
    0.00 :   95269:       mov    %rdx,0x8(%rcx)
    0.00 :   9526d:       mov    %rax,0x8(%rdi)
    0.00 :   95271:       jmpq   95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   95276:       mov    0x28(%rdx),%rcx
    0.00 :   9527a:       jmp    95280 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d90>
    0.00 :   9527c:       mov    0x28(%rcx),%rcx
    0.00 :   95280:       mov    0x8(%rcx),%rdx
    0.00 :   95284:       mov    %rdx,%rsi
    0.00 :   95287:       and    $0xfffffffffffffff8,%rsi
    0.00 :   9528b:       cmp    %rsi,%rbx
    0.00 :   9528e:       ja     9527c <_IO_str_seekoff@@GLIBC_2.2.5+0x4d8c>
    0.00 :   95290:       cmp    %rcx,0x8(%rax)
    0.00 :   95294:       je     952a2 <_IO_str_seekoff@@GLIBC_2.2.5+0x4db2>
    0.00 :   95296:       mov    0x10(%rcx),%rax
    0.00 :   9529a:       cmp    0x8(%rax),%rdx
    0.00 :   9529e:       cmove  %rax,%rcx
    0.00 :   952a2:       mov    0x8(%rcx),%r8
    0.00 :   952a6:       mov    %rsi,%rdi
    0.00 :   952a9:       sub    %rbx,%rdi
    0.00 :   952ac:       mov    %r8,%rax
    0.00 :   952af:       and    $0xfffffffffffffff8,%rax
    0.00 :   952b3:       cmp    (%rcx,%rax,1),%rax
    0.00 :   952b7:       jne    95392 <_IO_str_seekoff@@GLIBC_2.2.5+0x4ea2>
    0.00 :   952bd:       mov    0x10(%rcx),%rax
    0.00 :   952c1:       mov    0x18(%rcx),%rdx
    0.00 :   952c5:       cmp    %rcx,0x18(%rax)
    0.00 :   952c9:       jne    9522d <_IO_str_seekoff@@GLIBC_2.2.5+0x4d3d>
    0.00 :   952cf:       cmp    %rcx,0x10(%rdx)
    0.00 :   952d3:       jne    9522d <_IO_str_seekoff@@GLIBC_2.2.5+0x4d3d>
    0.00 :   952d9:       cmp    $0x3ff,%r8
    0.00 :   952e0:       mov    %rdx,0x18(%rax)
    0.00 :   952e4:       mov    %rax,0x10(%rdx)
    0.00 :   952e8:       jbe    952f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e07>
    0.00 :   952ea:       mov    0x20(%rcx),%rdx
    0.00 :   952ee:       test   %rdx,%rdx
    0.00 :   952f1:       jne    953d2 <_IO_str_seekoff@@GLIBC_2.2.5+0x4ee2>
    0.00 :   952f7:       cmp    $0x1f,%rdi
    0.00 :   952fb:       ja     95318 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e28>
    0.00 :   952fd:       lea    0x35693c(%rip),%rax        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   95304:       orq    $0x1,0x8(%rcx,%rsi,1)
    0.00 :   9530a:       cmp    %rax,%r14
    0.00 :   9530d:       jne    950fe <_IO_str_seekoff@@GLIBC_2.2.5+0x4c0e>
    0.00 :   95313:       jmpq   95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   95318:       mov    0x70(%r14),%rdx
    0.00 :   9531c:       cmp    %r13,0x18(%rdx)
    0.00 :   95320:       jne    95386 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e96>
    0.00 :   95322:       lea    (%rcx,%rbx,1),%rax
    0.00 :   95326:       cmp    $0x3ff,%rdi
    0.00 :   9532d:       mov    %r13,0x18(%rax)
    0.00 :   95331:       mov    %rdx,0x10(%rax)
    0.00 :   95335:       mov    %rax,0x70(%r14)
    0.00 :   95339:       mov    %rax,0x18(%rdx)
    0.00 :   9533d:       jbe    9534f <_IO_str_seekoff@@GLIBC_2.2.5+0x4e5f>
    0.00 :   9533f:       movq   $0x0,0x20(%rax)
    0.00 :   95347:       movq   $0x0,0x28(%rax)
    0.00 :   9534f:       lea    0x3568ea(%rip),%rdx        # 3ebc40 <__malloc_hook@@GLIBC_2.2.5+0x10>
    0.00 :   95356:       xor    %r8d,%r8d
    0.00 :   95359:       cmp    %rdx,%r14
    0.00 :   9535c:       setne  %r8b
    0.00 :   95360:       or     $0x1,%rbx
    0.00 :   95364:       shl    $0x2,%r8
    0.00 :   95368:       mov    %rbx,%rdx
    0.00 :   9536b:       or     %r8,%rdx
    0.00 :   9536e:       mov    %rdx,0x8(%rcx)
    0.00 :   95372:       mov    %rdi,%rdx
    0.00 :   95375:       or     $0x1,%rdx
    0.00 :   95379:       mov    %rdx,0x8(%rax)
    0.00 :   9537d:       mov    %rdi,(%rcx,%rsi,1)
    0.00 :   95381:       jmpq   95103 <_IO_str_seekoff@@GLIBC_2.2.5+0x4c13>
    0.00 :   95386:       lea    0x123833(%rip),%rdi        # 1b8bc0 <_libc_intl_domainname@@GLIBC_2.2.5+0x4f2c>
    0.00 :   9538d:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   95392:       lea    0x11f884(%rip),%rdi        # 1b4c1d <_libc_intl_domainname@@GLIBC_2.2.5+0xf89>
    0.00 :   95399:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   9539e:       cmp    %rcx,0x28(%rdx)
    0.00 :   953a2:       jne    9541c <_IO_str_seekoff@@GLIBC_2.2.5+0x4f2c>
    0.00 :   953a4:       mov    0x28(%rcx),%r8
    0.00 :   953a8:       cmp    %rcx,0x20(%r8)
    0.00 :   953ac:       jne    9541c <_IO_str_seekoff@@GLIBC_2.2.5+0x4f2c>
    0.00 :   953ae:       cmpq   $0x0,0x20(%rax)
    0.00 :   953b3:       je     953fa <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0a>
    0.00 :   953b5:       mov    %r8,0x28(%rdx)
    0.00 :   953b9:       mov    0x28(%rcx),%rax
    0.00 :   953bd:       mov    %rdx,0x20(%rax)
    0.00 :   953c1:       jmpq   950e3 <_IO_str_seekoff@@GLIBC_2.2.5+0x4bf3>
    0.00 :   953c6:       lea    0x12384b(%rip),%rdi        # 1b8c18 <_libc_intl_domainname@@GLIBC_2.2.5+0x4f84>
    0.00 :   953cd:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   953d2:       cmp    %rcx,0x28(%rdx)
    0.00 :   953d6:       jne    9541c <_IO_str_seekoff@@GLIBC_2.2.5+0x4f2c>
    0.00 :   953d8:       mov    0x28(%rcx),%r8
    0.00 :   953dc:       cmp    %rcx,0x20(%r8)
    0.00 :   953e0:       jne    9541c <_IO_str_seekoff@@GLIBC_2.2.5+0x4f2c>
    0.00 :   953e2:       cmpq   $0x0,0x20(%rax)
    0.00 :   953e7:       je     95428 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f38>
    0.00 :   953e9:       mov    %r8,0x28(%rdx)
    0.00 :   953ed:       mov    0x28(%rcx),%rax
    0.00 :   953f1:       mov    %rdx,0x20(%rax)
    0.00 :   953f5:       jmpq   952f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e07>
    0.00 :   953fa:       cmp    %rcx,%rdx
    0.00 :   953fd:       je     9544a <_IO_str_seekoff@@GLIBC_2.2.5+0x4f5a>
    0.00 :   953ff:       mov    %rdx,0x20(%rax)
    0.00 :   95403:       mov    0x20(%rcx),%rdx
    0.00 :   95407:       mov    %r8,0x28(%rax)
    0.00 :   9540b:       mov    %rax,0x28(%rdx)
    0.00 :   9540f:       mov    0x28(%rcx),%rdx
    0.00 :   95413:       mov    %rax,0x20(%rdx)
    0.00 :   95417:       jmpq   950e3 <_IO_str_seekoff@@GLIBC_2.2.5+0x4bf3>
    0.00 :   9541c:       lea    0x122f75(%rip),%rdi        # 1b8398 <_libc_intl_domainname@@GLIBC_2.2.5+0x4704>
    0.00 :   95423:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   95428:       cmp    %rcx,%rdx
    0.00 :   9542b:       je     95457 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f67>
    0.00 :   9542d:       mov    %rdx,0x20(%rax)
    0.00 :   95431:       mov    0x20(%rcx),%rdx
    0.00 :   95435:       mov    %r8,0x28(%rax)
    0.00 :   95439:       mov    %rax,0x28(%rdx)
    0.00 :   9543d:       mov    0x28(%rcx),%rdx
    0.00 :   95441:       mov    %rax,0x20(%rdx)
    0.00 :   95445:       jmpq   952f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e07>
    0.00 :   9544a:       mov    %rax,0x28(%rax)
    0.00 :   9544e:       mov    %rax,0x20(%rax)
    0.00 :   95452:       jmpq   950e3 <_IO_str_seekoff@@GLIBC_2.2.5+0x4bf3>
    0.00 :   95457:       mov    %rax,0x28(%rax)
    0.00 :   9545b:       mov    %rax,0x20(%rax)
    0.00 :   9545f:       jmpq   952f7 <_IO_str_seekoff@@GLIBC_2.2.5+0x4e07>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (5 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005904e0 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)>:
         :            _ZN11onnxruntime8BFCArena12FindChunkPtrEimm():
    0.00 :   5904e0:       push   %r15
    0.00 :   5904e2:       push   %r14
    0.00 :   5904e4:       push   %r13
    0.00 :   5904e6:       push   %r12
    0.00 :   5904e8:       push   %rbp
    0.00 :   5904e9:       push   %rbx
    0.00 :   5904ea:       sub    $0xd8,%rsp
    0.00 :   5904f1:       mov    %fs:0x28,%rax
    0.00 :   5904fa:       mov    %rax,0xc8(%rsp)
    0.00 :   590502:       xor    %eax,%eax
    0.00 :   590504:       cmp    $0x14,%esi
    0.00 :   590507:       jg     59069f <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x1bf>
    0.00 :   59050d:       mov    %rdx,%r13
    0.00 :   590510:       movslq %esi,%rdx
    0.00 :   590513:       mov    %rdi,%rbp
    0.00 :   590516:       mov    %rcx,%r15
    0.00 :   590519:       lea    0x0(,%rdx,8),%rax
    0.00 :   590521:       sub    %rdx,%rax
    0.00 :   590524:       lea    0x3c(%rdi,%rax,8),%r12
    0.00 :   590529:       mov    $0x14,%eax
    0.00 :   59052e:       sub    %esi,%eax
    0.00 :   590530:       add    %rdx,%rax
    0.00 :   590533:       lea    0x0(,%rax,8),%rdx
    0.00 :   59053b:       sub    %rax,%rdx
    0.00 :   59053e:       lea    0x74(%rdi,%rdx,8),%rax
    0.00 :   590543:       mov    %rax,0x8(%rsp)
         :            *  element in the %set.  Iteration is done in ascending order according
         :            *  to the keys.
         :            */
         :            iterator
         :            begin() const _GLIBCXX_NOEXCEPT
         :            { return _M_t.begin(); }
    0.00 :   590548:       mov    0x10(%r12),%rax
    0.00 :   59054d:       lea    -0x10(%r12),%r14
    0.00 :   590552:       mov    %rax,0x18(%rsp)
    0.00 :   590557:       cmp    %rax,%r12
    0.00 :   59055a:       jne    590580 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0xa0>
    0.00 :   59055c:       jmpq   590690 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x1b0>
    0.00 :   590561:       nopl   0x0(%rax)
         :            { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
         :
         :            _Self&
         :            operator++() _GLIBCXX_NOEXCEPT
         :            {
         :            _M_node = _Rb_tree_increment(_M_node);
    0.00 :   590568:       mov    0x18(%rsp),%rdi
    0.00 :   59056d:       callq  534d0 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
    0.00 :   590572:       mov    %rax,0x18(%rsp)
    0.00 :   590577:       cmp    %rax,%r12
    0.00 :   59057a:       je     590690 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x1b0>
    0.00 :   590580:       mov    0x20(%rax),%rbx
    0.00 :   590584:       mov    %rbp,%rdi
    0.00 :   590587:       mov    %rbx,%rsi
    0.00 :   59058a:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   59058f:       cmpq   $0xffffffffffffffff,0x10(%rax)
   81.04 :   590594:       jne    5906a3 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x1c3>
    0.00 :   59059a:       cmp    %r13,(%rax)
    0.00 :   59059d:       jb     590568 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x88>
    0.00 :   59059f:       lea    0x18(%rsp),%rdx
    0.00 :   5905a4:       lea    0x8(%r14),%rsi
    0.00 :   5905a8:       mov    %rbp,%rdi
    0.00 :   5905ab:       mov    %rax,0x8(%rsp)
    0.00 :   5905b0:       callq  58fb20 <onnxruntime::BFCArena::RemoveFreeChunkIterFromBin(std::set<unsigned long, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >*, std::_Rb_tree_const_iterator<unsigned long> const&)>
    0.00 :   5905b5:       mov    0x8(%rsp),%rax
    0.00 :   5905ba:       lea    0x0(%r13,%r13,1),%rcx
    0.00 :   5905bf:       mov    (%rax),%rdx
    0.00 :   5905c2:       cmp    %rcx,%rdx
    0.00 :   5905c5:       jae    590670 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x190>
    0.00 :   5905cb:       movslq 0x594(%rbp),%rcx
    0.00 :   5905d2:       sub    %r13,%rdx
    0.00 :   5905d5:       cmp    %rcx,%rdx
    0.00 :   5905d8:       jge    590670 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x190>
    0.00 :   5905de:       mov    %r15,0x8(%rax)
    0.00 :   5905e2:       mov    0x520(%rbp),%rdx
    0.00 :   5905e9:       lea    0x1(%rdx),%rcx
    0.00 :   5905ed:       mov    %rcx,0x520(%rbp)
    0.00 :   5905f4:       mov    %rdx,0x10(%rax)
    0.00 :   5905f8:       addq   $0x1,0x528(%rbp)
    0.00 :   590600:       mov    (%rax),%rdx
    0.00 :   590603:       add    0x530(%rbp),%rdx
    0.00 :   59060a:       cmp    %rdx,0x540(%rbp)
    0.00 :   590611:       mov    %rdx,0x530(%rbp)
    0.00 :   590618:       cmovge 0x540(%rbp),%rdx
    0.00 :   590620:       mov    %rdx,0x540(%rbp)
    0.00 :   590627:       mov    0x548(%rbp),%rdx
    0.00 :   59062e:       cmp    %rdx,(%rax)
    0.00 :   590631:       cmovge (%rax),%rdx
    0.00 :   590635:       mov    %rdx,0x548(%rbp)
    0.00 :   59063c:       mov    0x18(%rax),%rax
    0.00 :   590640:       mov    0xc8(%rsp),%rcx
    0.00 :   590648:       xor    %fs:0x28,%rcx
    0.00 :   590651:       jne    59072e <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x24e>
    0.00 :   590657:       add    $0xd8,%rsp
    0.00 :   59065e:       pop    %rbx
    0.00 :   59065f:       pop    %rbp
    0.00 :   590660:       pop    %r12
    0.00 :   590662:       pop    %r13
    0.00 :   590664:       pop    %r14
    0.00 :   590666:       pop    %r15
    0.00 :   590668:       retq
    0.00 :   590669:       nopl   0x0(%rax)
    0.00 :   590670:       mov    %rbx,%rsi
    0.00 :   590673:       mov    %rbp,%rdi
    0.00 :   590676:       mov    %r13,%rdx
    0.00 :   590679:       callq  590070 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)>
    0.00 :   59067e:       mov    %rbx,%rsi
    0.00 :   590681:       mov    %rbp,%rdi
    0.00 :   590684:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   590689:       jmpq   5905de <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0xfe>
    0.00 :   59068e:       xchg   %ax,%ax
   18.96 :   590690:       add    $0x38,%r12
    0.00 :   590694:       cmp    0x8(%rsp),%r12
    0.00 :   590699:       jne    590548 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x68>
    0.00 :   59069f:       xor    %eax,%eax
    0.00 :   5906a1:       jmp    590640 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)+0x160>
    0.00 :   5906a3:       mov    $0xa0,%edi
    0.00 :   5906a8:       lea    0x40(%rsp),%rbx
    0.00 :   5906ad:       lea    0x20(%rsp),%r13
    0.00 :   5906b2:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5906b7:       mov    %rbx,%rdi
    0.00 :   5906ba:       mov    %rax,%r12
    0.00 :   5906bd:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5906c2:       mov    %r13,%rdi
    0.00 :   5906c5:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5906ca:       lea    0x60(%rsp),%r14
    0.00 :   5906cf:       mov    %r13,%r8
    0.00 :   5906d2:       lea    0x2fbb47(%rip),%rcx        # 88c220 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5906d9:       mov    $0x144,%edx
    0.00 :   5906de:       lea    0x2faf43(%rip),%rsi        # 88b628 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   5906e5:       mov    %r14,%rdi
    0.00 :   5906e8:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5906ed:       mov    %rbx,%rcx
    0.00 :   5906f0:       lea    0x2fb103(%rip),%rdx        # 88b7fa <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x25a>
    0.00 :   5906f7:       mov    %r14,%rsi
    0.00 :   5906fa:       mov    %r12,%rdi
    0.00 :   5906fd:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   590702:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   590705:       add    $0x10,%rbx
    0.00 :   590709:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   59070e:       mov    %r13,%rdi
    0.00 :   590711:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   590716:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   59071b:       cmp    %rbx,%rdi
    0.00 :   59071e:       je     ad028 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   590724:       callq  53300 <operator delete(void*)@plt>
    0.00 :   590729:       jmpq   ad028 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]>
    0.00 :   59072e:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   590733:       mov    %rax,%rbp
    0.00 :   590736:       jmpq   ad03e <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]+0x16>
    0.00 :   59073b:       mov    %rax,%rbp
    0.00 :   59073e:       jmpq   ad046 <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]+0x1e>
    0.00 :   590743:       mov    %rax,%rbp
    0.00 :   590746:       jmpq   ad04e <onnxruntime::BFCArena::FindChunkPtr(int, unsigned long, unsigned long) [clone .cold.256]+0x26>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (9 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005afd50 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)>:
         :            _ZN11onnxruntime15IExecutionFrame28GetOrCreateNodeOutputMLValueEiPKNS_11TensorShapeERP8OrtValuem():
    0.00 :   5afd50:       push   %r15
    0.00 :   5afd52:       push   %r14
    0.00 :   5afd54:       mov    %r9,%r14
    0.00 :   5afd57:       push   %r13
    0.00 :   5afd59:       mov    %rcx,%r13
    0.00 :   5afd5c:       push   %r12
    0.00 :   5afd5e:       mov    %r8,%r12
    0.00 :   5afd61:       push   %rbp
    0.00 :   5afd62:       mov    %rsi,%rbp
    0.00 :   5afd65:       mov    %edx,%esi
    0.00 :   5afd67:       push   %rbx
    0.00 :   5afd68:       mov    %rdi,%rbx
    5.76 :   5afd6b:       sub    $0x1f8,%rsp
    0.00 :   5afd72:       mov    %fs:0x28,%rax
    0.00 :   5afd7b:       mov    %rax,0x1e8(%rsp)
    0.00 :   5afd83:       xor    %eax,%eax
    0.00 :   5afd85:       movq   $0x0,(%rdi)
    0.00 :   5afd8c:       mov    %rbp,%rdi
    0.00 :   5afd8f:       callq  5a9310 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const>
    0.00 :   5afd94:       cmp    $0xffffffff,%eax
    0.00 :   5afd97:       je     5b0288 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x538>
    0.00 :   5afd9d:       movslq %eax,%rdx
         :            */
         :            reference
         :            operator[](size_type __n) _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5afda0:       lea    (%rdx,%rdx,4),%rcx
    0.00 :   5afda4:       mov    0x10(%rbp),%rdx
    0.00 :   5afda8:       lea    (%rdx,%rcx,8),%rdx
    0.00 :   5afdac:       mov    %rdx,(%r12)
    0.00 :   5afdb0:       cmpq   $0x0,(%rdx)
    4.91 :   5afdb4:       je     5b01c8 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x478>
    0.00 :   5afdba:       mov    0x10(%rdx),%rdi
    0.00 :   5afdbe:       test   %rdi,%rdi
    0.00 :   5afdc1:       je     5b01c8 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x478>
    0.00 :   5afdc7:       mov    (%rdi),%rax
    0.00 :   5afdca:       callq  *0x30(%rax)
    0.00 :   5afdcd:       test   %al,%al
    0.00 :   5afdcf:       je     5b0256 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x506>
    0.00 :   5afdd5:       mov    (%r12),%rdi
    0.00 :   5afdd9:       callq  1158d0 <onnxruntime::Tensor const& OrtValue::Get<onnxruntime::Tensor>() const>
    0.00 :   5afdde:       mov    %rax,%r12
    0.00 :   5afde1:       test   %r13,%r13
    0.00 :   5afde4:       je     5b02d8 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x588>
         :            *  and if corresponding elements compare equal.
         :            */
         :            template<typename _Tp, typename _Alloc>
         :            inline bool
         :            operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
         :            { return (__x.size() == __y.size()
    0.00 :   5afdea:       mov    0x18(%rax),%rdi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5afdee:       mov    0x20(%rax),%rdx
         :            { return (__x.size() == __y.size()
    0.00 :   5afdf2:       mov    0x0(%r13),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5afdf6:       mov    0x8(%r13),%rax
    0.00 :   5afdfa:       sub    %rdi,%rdx
    0.00 :   5afdfd:       sub    %rsi,%rax
         :            && std::equal(__x.begin(), __x.end(), __y.begin())); }
    0.00 :   5afe00:       cmp    %rax,%rdx
    0.00 :   5afe03:       je     5b02c0 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x570>
    0.00 :   5afe09:       mov    $0xa0,%edi
    0.00 :   5afe0e:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5afe13:       mov    %r13,%rsi
    0.00 :   5afe16:       mov    %rax,(%rsp)
    0.00 :   5afe1a:       lea    0x30(%rsp),%rax
    0.00 :   5afe1f:       mov    %rax,%rdi
    0.00 :   5afe22:       mov    %rax,0x8(%rsp)
    0.00 :   5afe27:       callq  5f2480 <onnxruntime::TensorShape::ToString[abi:cxx11]() const>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5afe2c:       lea    0x70(%rsp),%rbp
    0.00 :   5afe31:       add    $0x18,%r12
    0.00 :   5afe35:       lea    0x70(%rbp),%rdi
    0.00 :   5afe39:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5afe3e:       mov    0x677ce3(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5afe45:       xor    %esi,%esi
    0.00 :   5afe47:       movq   $0x0,0x1b8(%rsp)
    0.00 :   5afe53:       movq   $0x0,0x1c8(%rsp)
    0.00 :   5afe5f:       movq   $0x0,0x1d0(%rsp)
    0.00 :   5afe6b:       add    $0x10,%rax
    0.00 :   5afe6f:       mov    %rax,0xe0(%rsp)
    0.00 :   5afe77:       xor    %eax,%eax
    0.00 :   5afe79:       mov    %ax,0x1c0(%rsp)
    0.00 :   5afe81:       mov    0x677f18(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5afe88:       movq   $0x0,0x1d8(%rsp)
    0.00 :   5afe94:       mov    0x8(%rax),%r13
    0.00 :   5afe98:       mov    0x10(%rax),%r15
    0.00 :   5afe9c:       movq   $0x0,0x1e0(%rsp)
    0.00 :   5afea8:       mov    -0x18(%r13),%rdi
    0.00 :   5afeac:       mov    %r13,0x70(%rsp)
    0.00 :   5afeb1:       add    %rbp,%rdi
    0.00 :   5afeb4:       mov    %r15,(%rdi)
    0.00 :   5afeb7:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5afebc:       mov    0x677e9d(%rip),%r14        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5afec3:       lea    0x40(%rbp),%rdi
    0.00 :   5afec7:       movq   $0x0,0x80(%rsp)
    0.00 :   5afed3:       movq   $0x0,0x88(%rsp)
    0.00 :   5afedf:       movq   $0x0,0x90(%rsp)
    0.00 :   5afeeb:       lea    0x18(%r14),%rax
    0.00 :   5afeef:       mov    %rax,0x70(%rsp)
    0.00 :   5afef4:       lea    0x40(%r14),%rax
    0.00 :   5afef8:       mov    %rax,0xe0(%rsp)
    0.00 :   5aff00:       mov    0x677d59(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5aff07:       movq   $0x0,0x98(%rsp)
    0.00 :   5aff13:       movq   $0x0,0xa0(%rsp)
    0.00 :   5aff1f:       add    $0x10,%rax
    0.00 :   5aff23:       mov    %rax,0x78(%rsp)
    0.00 :   5aff28:       movq   $0x0,0xa8(%rsp)
    0.00 :   5aff34:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5aff39:       mov    0x678098(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5aff40:       lea    0x8(%rbp),%rsi
    0.00 :   5aff44:       lea    0x70(%rbp),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5aff48:       movl   $0x10,0xb8(%rsp)
    0.00 :   5aff53:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5aff57:       movb   $0x0,0xd0(%rsp)
    0.00 :   5aff5f:       mov    %rax,0x78(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5aff64:       lea    0x60(%rbp),%rax
    0.00 :   5aff68:       mov    %rax,0xc0(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   5aff70:       movq   $0x0,0xc8(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5aff7c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5aff81:       mov    $0x32,%edx
    0.00 :   5aff86:       lea    0x2e002b(%rip),%rsi        # 88ffb8 <std::piecewise_construct+0x6db>
    0.00 :   5aff8d:       mov    %rbp,%rdi
    0.00 :   5aff90:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5aff95:       mov    %r12,%rsi
    0.00 :   5aff98:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5aff9b:       lea    0x50(%rsp),%r12
    0.00 :   5affa0:       callq  5f25f0 <onnxruntime::operator<<(std::ostream&, onnxruntime::TensorShape const&)>
    0.00 :   5affa5:       mov    $0x11,%edx
    0.00 :   5affaa:       lea    0x2e0061(%rip),%rsi        # 890012 <std::piecewise_construct+0x735>
    0.00 :   5affb1:       mov    %rbp,%rdi
    0.00 :   5affb4:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   5affb9:       mov    0x38(%rsp),%rdx
    0.00 :   5affbe:       mov    0x30(%rsp),%rsi
    0.00 :   5affc3:       mov    %rbp,%rdi
    0.00 :   5affc6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5affcb:       lea    0x10(%r12),%rax
    0.00 :   5affd0:       movb   $0x0,0x60(%rsp)
    0.00 :   5affd5:       mov    %rax,0x50(%rsp)
         :            if (this->pptr())
    0.00 :   5affda:       mov    0xa0(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   5affe2:       movq   $0x0,0x58(%rsp)
    0.00 :   5affeb:       test   %rax,%rax
    0.00 :   5affee:       je     5b0310 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x5c0>
         :            if (this->pptr() > this->egptr())
    0.00 :   5afff4:       mov    0x90(%rsp),%r8
    0.00 :   5afffc:       mov    0x98(%rsp),%rcx
    0.00 :   5b0004:       cmp    %r8,%rax
    0.00 :   5b0007:       ja     5b02a0 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x550>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5b000d:       sub    %rcx,%r8
    0.00 :   5b0010:       xor    %edx,%edx
    0.00 :   5b0012:       xor    %esi,%esi
    0.00 :   5b0014:       mov    %r12,%rdi
    0.00 :   5b0017:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   5b001c:       lea    0x18(%r14),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b0020:       mov    0xc0(%rsp),%rdi
    0.00 :   5b0028:       mov    %rax,0x70(%rsp)
    0.00 :   5b002d:       lea    0x40(%r14),%rax
    0.00 :   5b0031:       mov    %rax,0xe0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5b0039:       mov    0x677f98(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5b0040:       add    $0x10,%rax
    0.00 :   5b0044:       mov    %rax,0x78(%rsp)
         :            if (!_M_is_local())
    0.00 :   5b0049:       lea    0x60(%rbp),%rax
    0.00 :   5b004d:       cmp    %rax,%rdi
    0.00 :   5b0050:       je     5b0057 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x307>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5b0052:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5b0057:       mov    0x677c02(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5b005e:       lea    0x40(%rbp),%rdi
    0.00 :   5b0062:       add    $0x10,%rax
    0.00 :   5b0066:       mov    %rax,0x78(%rsp)
    0.00 :   5b006b:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5b0070:       mov    -0x18(%r13),%rax
    0.00 :   5b0074:       mov    %r13,0x70(%rsp)
         :            ~basic_ios() { }
    0.00 :   5b0079:       lea    0x70(%rbp),%rdi
    0.00 :   5b007d:       lea    0x10(%rsp),%r13
    0.00 :   5b0082:       mov    %r15,0x70(%rsp,%rax,1)
    0.00 :   5b0087:       mov    0x677a9a(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5b008e:       add    $0x10,%rax
    0.00 :   5b0092:       mov    %rax,0xe0(%rsp)
    0.00 :   5b009a:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5b009f:       mov    %r13,%rdi
    0.00 :   5b00a2:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5b00a7:       mov    %r13,%r8
    0.00 :   5b00aa:       mov    $0x45,%edx
    0.00 :   5b00af:       mov    %rbp,%rdi
    0.00 :   5b00b2:       lea    0x2e07e7(%rip),%rcx        # 8908a0 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5b00b9:       lea    0x2df978(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5b00c0:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5b00c5:       mov    (%rsp),%rdi
    0.00 :   5b00c9:       mov    %r12,%rcx
    0.00 :   5b00cc:       lea    0x2dff1d(%rip),%rdx        # 88fff0 <std::piecewise_construct+0x713>
    0.00 :   5b00d3:       mov    %rbp,%rsi
    0.00 :   5b00d6:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5b00db:       mov    0xc0(%rsp),%r13
    0.00 :   5b00e3:       mov    0xb8(%rsp),%r14
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   5b00eb:       cmp    %r14,%r13
    0.00 :   5b00ee:       je     5b0112 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x3c2>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b00f0:       mov    (%r14),%rdi
         :            if (!_M_is_local())
    0.00 :   5b00f3:       lea    0x10(%r14),%rax
    0.00 :   5b00f7:       cmp    %rax,%rdi
    0.00 :   5b00fa:       je     5b0101 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x3b1>
    0.00 :   5b00fc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5b0101:       add    $0x20,%r14
    0.00 :   5b0105:       cmp    %r14,%r13
    0.00 :   5b0108:       jne    5b00f0 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x3a0>
    0.00 :   5b010a:       mov    0xb8(%rsp),%r14
         :            if (__p)
    0.00 :   5b0112:       test   %r14,%r14
    0.00 :   5b0115:       je     5b011f <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x3cf>
    0.00 :   5b0117:       mov    %r14,%rdi
    0.00 :   5b011a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b011f:       mov    0x98(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5b0127:       lea    0x38(%rbp),%rax
    0.00 :   5b012b:       cmp    %rax,%rdi
    0.00 :   5b012e:       je     5b0135 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x3e5>
    0.00 :   5b0130:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b0135:       mov    0x70(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5b013a:       add    $0x10,%rbp
    0.00 :   5b013e:       cmp    %rbp,%rdi
    0.00 :   5b0141:       je     5b0148 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x3f8>
    0.00 :   5b0143:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5b0148:       mov    0x18(%rsp),%r13
    0.00 :   5b014d:       mov    0x10(%rsp),%rbp
    0.00 :   5b0152:       cmp    %rbp,%r13
    0.00 :   5b0155:       je     5b0180 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x430>
    0.00 :   5b0157:       nopw   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b0160:       mov    0x0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   5b0164:       lea    0x10(%rbp),%rax
    0.00 :   5b0168:       cmp    %rax,%rdi
    0.00 :   5b016b:       je     5b0172 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x422>
    0.00 :   5b016d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5b0172:       add    $0x20,%rbp
    0.00 :   5b0176:       cmp    %rbp,%r13
    0.00 :   5b0179:       jne    5b0160 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x410>
    0.00 :   5b017b:       mov    0x10(%rsp),%rbp
         :            if (__p)
    0.00 :   5b0180:       test   %rbp,%rbp
    0.00 :   5b0183:       je     5b018d <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x43d>
    0.00 :   5b0185:       mov    %rbp,%rdi
    0.00 :   5b0188:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b018d:       mov    0x50(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5b0192:       add    $0x10,%r12
    0.00 :   5b0196:       cmp    %r12,%rdi
    0.00 :   5b0199:       je     5b01a0 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x450>
    0.00 :   5b019b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5b01a0:       mov    0x8(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b01a5:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5b01aa:       add    $0x10,%rax
    0.00 :   5b01ae:       cmp    %rax,%rdi
    0.00 :   5b01b1:       je     b2184 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]>
    0.00 :   5b01b7:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5b01bc:       jmpq   b2184 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]>
    0.00 :   5b01c1:       nopl   0x0(%rax)
   47.14 :   5b01c8:       mov    0x0(%rbp),%rcx
   14.09 :   5b01cc:       lea    0x10(%rsp),%rdi
    0.00 :   5b01d1:       mov    %r14,%r9
    0.00 :   5b01d4:       mov    %r13,%r8
    0.00 :   5b01d7:       mov    %rbp,%rsi
    0.00 :   5b01da:       mov    0x28(%rcx),%r10
   28.10 :   5b01de:       lea    -0x4d5(%rip),%rcx        # 5afd10 <onnxruntime::ExecutionFrame::CreateNodeOutputMLValueImpl(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)>
    0.00 :   5b01e5:       cmp    %rcx,%r10
    0.00 :   5b01e8:       mov    %eax,%ecx
    0.00 :   5b01ea:       jne    5b0298 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x548>
    0.00 :   5b01f0:       callq  5aed90 <onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan(OrtValue&, int, onnxruntime::TensorShape const*, unsigned long)>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   5b01f5:       mov    0x10(%rsp),%rax
         :            #endif
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   5b01fa:       mov    (%rbx),%rbp
         :            /// Release ownership of any stored pointer.
         :            pointer
         :            release() noexcept
         :            {
         :            pointer __p = get();
         :            _M_t._M_ptr() = pointer();
    0.00 :   5b01fd:       movq   $0x0,0x10(%rsp)
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   5b0206:       mov    %rax,(%rbx)
         :            void
         :            reset(pointer __p = pointer()) noexcept
         :            {
         :            using std::swap;
         :            swap(_M_t._M_ptr(), __p);
         :            if (__p != pointer())
    0.00 :   5b0209:       test   %rbp,%rbp
    0.00 :   5b020c:       je     5b0256 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x506>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b020e:       mov    0x8(%rbp),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   5b0212:       lea    0x18(%rbp),%rax
         :            if (!_M_is_local())
    0.00 :   5b0216:       cmp    %rax,%rdi
    0.00 :   5b0219:       je     5b0220 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x4d0>
    0.00 :   5b021b:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   5b0220:       mov    %rbp,%rdi
    0.00 :   5b0223:       mov    $0x28,%esi
    0.00 :   5b0228:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            if (__ptr != nullptr)
    0.00 :   5b022d:       mov    0x10(%rsp),%rbp
    0.00 :   5b0232:       test   %rbp,%rbp
    0.00 :   5b0235:       je     5b0256 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x506>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5b0237:       mov    0x8(%rbp),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   5b023b:       lea    0x18(%rbp),%rax
         :            if (!_M_is_local())
    0.00 :   5b023f:       cmp    %rax,%rdi
    0.00 :   5b0242:       je     5b0249 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x4f9>
    0.00 :   5b0244:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   5b0249:       mov    $0x28,%esi
    0.00 :   5b024e:       mov    %rbp,%rdi
    0.00 :   5b0251:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   5b0256:       mov    0x1e8(%rsp),%rsi
    0.00 :   5b025e:       xor    %fs:0x28,%rsi
    0.00 :   5b0267:       mov    %rbx,%rax
    0.00 :   5b026a:       jne    5b0321 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x5d1>
    0.00 :   5b0270:       add    $0x1f8,%rsp
    0.00 :   5b0277:       pop    %rbx
    0.00 :   5b0278:       pop    %rbp
    0.00 :   5b0279:       pop    %r12
    0.00 :   5b027b:       pop    %r13
    0.00 :   5b027d:       pop    %r14
    0.00 :   5b027f:       pop    %r15
    0.00 :   5b0281:       retq
    0.00 :   5b0282:       nopw   0x0(%rax,%rax,1)
    0.00 :   5b0288:       movq   $0x0,(%r12)
    0.00 :   5b0290:       jmp    5b0256 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x506>
    0.00 :   5b0292:       nopw   0x0(%rax,%rax,1)
    0.00 :   5b0298:       callq  *%r10
    0.00 :   5b029b:       jmpq   5b01f5 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x4a5>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5b02a0:       sub    %rcx,%rax
    0.00 :   5b02a3:       xor    %edx,%edx
    0.00 :   5b02a5:       xor    %esi,%esi
    0.00 :   5b02a7:       mov    %r12,%rdi
    0.00 :   5b02aa:       mov    %rax,%r8
    0.00 :   5b02ad:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   5b02b2:       jmpq   5b001c <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x2cc>
    0.00 :   5b02b7:       nopw   0x0(%rax,%rax,1)
         :            {
         :            template<typename _Tp>
         :            static bool
         :            equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
         :            {
         :            if (const size_t __len = (__last1 - __first1))
    0.00 :   5b02c0:       test   %rdx,%rdx
    0.00 :   5b02c3:       je     5b0256 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x506>
         :            return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
    0.00 :   5b02c5:       callq  52c80 <memcmp@plt>
         :            && std::equal(__x.begin(), __x.end(), __y.begin())); }
    0.00 :   5b02ca:       test   %eax,%eax
    0.00 :   5b02cc:       je     5b0256 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x506>
    0.00 :   5b02ce:       jmpq   5afe09 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0xb9>
    0.00 :   5b02d3:       nopl   0x0(%rax,%rax,1)
    0.00 :   5b02d8:       mov    $0xa0,%edi
    0.00 :   5b02dd:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5b02e2:       lea    0x30(%rsp),%rdi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5b02e7:       lea    0x2f0a08(%rip),%rdx        # 8a0cf6 <typeinfo name for onnxruntime::contrib::RegisterRangeOpSchema(onnx::OpSchema&&)::{lambda(onnx::InferenceContext&)#1}+0x596>
    0.00 :   5b02ee:       mov    %rax,(%rsp)
    0.00 :   5b02f2:       lea    -0x4(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5b02f6:       lea    0x10(%rdi),%rax
    0.00 :   5b02fa:       mov    %rdi,0x8(%rsp)
    0.00 :   5b02ff:       mov    %rax,0x30(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5b0304:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5b0309:       jmpq   5afe2c <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0xdc>
    0.00 :   5b030e:       xchg   %ax,%ax
         :            this->_M_assign(__str);
    0.00 :   5b0310:       lea    0x50(%rbp),%rsi
    0.00 :   5b0314:       mov    %r12,%rdi
    0.00 :   5b0317:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5b031c:       jmpq   5b001c <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)+0x2cc>
    0.00 :   5b0321:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5b0326:       jmpq   b219b <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]+0x17>
    0.00 :   5b032b:       mov    %rax,%r14
    0.00 :   5b032e:       jmpq   b21a0 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]+0x1c>
    0.00 :   5b0333:       mov    %rax,%rbp
    0.00 :   5b0336:       jmpq   b21ab <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]+0x27>
    0.00 :   5b033b:       jmpq   b222b <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]+0xa7>
    0.00 :   5b0340:       jmpq   b21fc <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]+0x78>
    0.00 :   5b0345:       jmpq   b2214 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]+0x90>
    0.00 :   5b034a:       mov    %rax,%rbp
    0.00 :   5b034d:       jmpq   b21b3 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]+0x2f>
    0.00 :   5b0352:       mov    %rax,%rbp
    0.00 :   5b0355:       jmpq   b21de <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long) [clone .cold.439]+0x5a>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (8 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000048a720 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const>:
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48a720:       push   %rbp
    0.00 :   48a721:       mov    %rsp,%rbp
    0.00 :   48a724:       push   %r15
    0.00 :   48a726:       mov    %rdx,%r15
    0.00 :   48a729:       push   %r14
    0.00 :   48a72b:       push   %r13
    0.00 :   48a72d:       mov    %rcx,%r13
    0.00 :   48a730:       push   %r12
    0.00 :   48a732:       mov    %rsi,%r12
    0.00 :   48a735:       push   %rbx
    0.00 :   48a736:       sub    $0x288,%rsp
    0.00 :   48a73d:       mov    %rdi,-0x2a0(%rbp)
    0.00 :   48a744:       mov    0x10(%rdx),%rdi
    0.00 :   48a748:       mov    %rsi,-0x248(%rbp)
    0.00 :   48a74f:       mov    %rdx,-0x270(%rbp)
    0.00 :   48a756:       mov    %fs:0x28,%rax
    0.00 :   48a75f:       mov    %rax,-0x38(%rbp)
    0.00 :   48a763:       xor    %eax,%eax
    0.00 :   48a765:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   48a76a:       mov    0x10(%r15),%rdi
    0.00 :   48a76e:       movl   $0x0,-0x234(%rbp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a778:       mov    0xe0(%rax),%rbx
    0.00 :   48a77f:       sub    0xd8(%rax),%rbx
    0.00 :   48a786:       movl   $0x0,-0x230(%rbp)
    0.00 :   48a790:       mov    0x10(%r12),%rax
    0.00 :   48a795:       sar    $0x3,%rbx
    0.00 :   48a799:       movl   $0x0,-0x22c(%rbp)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   48a7a3:       movq   $0x0,-0x210(%rbp)
    0.00 :   48a7ae:       mov    %rax,-0x228(%rbp)
    0.00 :   48a7b5:       movq   $0x0,-0x208(%rbp)
    0.00 :   48a7c0:       movq   $0x0,-0x200(%rbp)
    0.00 :   48a7cb:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a7d0:       mov    0xb0(%rax),%rdx
    0.00 :   48a7d7:       sub    0xa8(%rax),%rdx
    0.00 :   48a7de:       lea    0x18(%r13),%r14
    0.00 :   48a7e2:       sar    $0x3,%rdx
    0.00 :   48a7e6:       cmp    $0x2,%edx
    0.00 :   48a7e9:       je     48a8e0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x1c0>
    0.00 :   48a7ef:       mov    -0x248(%rbp),%rax
         :            // Called by the range assign to implement [23.1.1]/9
         :            template<typename _InputIterator>
         :            void
         :            _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
         :            __false_type)
         :            { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
    0.00 :   48a7f6:       lea    -0x210(%rbp),%r12
    0.00 :   48a7fd:       mov    %r12,%rdi
    0.00 :   48a800:       mov    0x20(%rax),%rdx
         :            assign(_InputIterator __first, _InputIterator __last)
    0.00 :   48a804:       mov    0x18(%rax),%rsi
         :            { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
    0.00 :   48a808:       callq  34f6c0 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)>
    0.00 :   48a80d:       sub    $0x8,%rsp
    0.00 :   48a811:       lea    -0x22c(%rbp),%rax
    0.00 :   48a818:       mov    %r14,%rdx
    0.00 :   48a81b:       mov    %ebx,%ecx
    0.00 :   48a81d:       push   %r12
    0.00 :   48a81f:       mov    -0x248(%rbp),%rsi
    0.00 :   48a826:       lea    -0x1f0(%rbp),%rdi
    0.00 :   48a82d:       lea    -0x234(%rbp),%r9
    0.00 :   48a834:       push   %rax
    0.00 :   48a835:       lea    -0x230(%rbp),%rax
    0.00 :   48a83c:       lea    -0x228(%rbp),%r8
    0.00 :   48a843:       mov    %rdi,%r14
    0.00 :   48a846:       push   %rax
    0.00 :   48a847:       add    $0x10,%rsi
    0.00 :   48a84b:       mov    %rdi,-0x278(%rbp)
    0.00 :   48a852:       callq  4893c0 <onnxruntime::SplitBase::PrepareForCompute(onnxruntime::TensorShape const&, int, long&, int&, int&, int&, std::vector<long, std::allocator<long> >&) const>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   48a857:       mov    -0x1f0(%rbp),%rax
    0.00 :   48a85e:       add    $0x20,%rsp
    0.00 :   48a862:       mov    %rax,-0x2a8(%rbp)
    0.00 :   48a869:       test   %rax,%rax
    0.00 :   48a86c:       je     48a940 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x220>
    0.00 :   48a872:       mov    $0x9f,%r8d
    0.00 :   48a878:       lea    0x3eee41(%rip),%rcx        # 8796c0 <onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const::__FUNCTION__>
    0.00 :   48a87f:       mov    %r14,%rsi
    0.00 :   48a882:       xor    %edi,%edi
    0.00 :   48a884:       lea    0x3ee7a5(%rip),%rdx        # 879030 <typeinfo name for onnxruntime::DepthToSpace<float>+0x270>
    0.00 :   48a88b:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   48a890:       mov    -0x1f0(%rbp),%rax
    0.00 :   48a897:       mov    -0x2a0(%rbp),%rsi
    0.00 :   48a89e:       mov    %rax,(%rsi)
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48a8a1:       mov    -0x210(%rbp),%rdi
         :            if (__p)
    0.00 :   48a8a8:       test   %rdi,%rdi
    0.00 :   48a8ab:       je     48a8b2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x192>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   48a8ad:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48a8b2:       mov    -0x38(%rbp),%rsi
    0.00 :   48a8b6:       xor    %fs:0x28,%rsi
    0.00 :   48a8bf:       mov    -0x2a0(%rbp),%rax
    0.00 :   48a8c6:       jne    48b13a <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xa1a>
    0.00 :   48a8cc:       lea    -0x28(%rbp),%rsp
    0.00 :   48a8d0:       pop    %rbx
    0.00 :   48a8d1:       pop    %r12
    0.00 :   48a8d3:       pop    %r13
    0.00 :   48a8d5:       pop    %r14
    0.00 :   48a8d7:       pop    %r15
    0.00 :   48a8d9:       pop    %rbp
    0.00 :   48a8da:       retq
    0.00 :   48a8db:       nopl   0x0(%rax,%rax,1)
    0.00 :   48a8e0:       mov    -0x270(%rbp),%rdi
    0.00 :   48a8e7:       mov    $0x1,%esi
    0.00 :   48a8ec:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   48a8f1:       mov    0x18(%rax),%rdx
    0.00 :   48a8f5:       mov    %rax,%r12
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a8f8:       mov    0x20(%rax),%rax
    0.00 :   48a8fc:       sub    %rdx,%rax
    0.00 :   48a8ff:       cmp    $0x8,%rax
    0.00 :   48a903:       jne    48b229 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xb09>
    0.00 :   48a909:       mov    (%rdx),%rax
    0.00 :   48a90c:       mov    0x30(%r12),%rdx
    0.00 :   48a911:       cmpl   $0x7,0x8(%rdx)
    0.00 :   48a915:       jne    48b2da <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xbba>
    0.00 :   48a91b:       mov    0x50(%r12),%rsi
    0.00 :   48a920:       add    (%r12),%rsi
         :            { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
    0.00 :   48a924:       lea    -0x210(%rbp),%r12
    0.00 :   48a92b:       lea    (%rsi,%rax,8),%rdx
    0.00 :   48a92f:       mov    %r12,%rdi
    0.00 :   48a932:       callq  48a5e0 <void std::vector<long, std::allocator<long> >::_M_assign_aux<long const*>(long const*, long const*, std::forward_iterator_tag)>
    0.00 :   48a937:       jmpq   48a80d <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xed>
    0.00 :   48a93c:       nopl   0x0(%rax)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   48a940:       mov    0x20(%r13),%rax
    0.00 :   48a944:       mov    0x18(%r13),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a948:       mov    %rax,%r12
    0.00 :   48a94b:       sub    %rsi,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48a94e:       mov    %r12,%rdx
    0.00 :   48a951:       sar    $0x3,%rdx
    0.00 :   48a955:       je     48ac40 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x520>
         :            if (__n > this->max_size())
    0.00 :   48a95b:       movabs $0x1fffffffffffffff,%rax
    0.00 :   48a965:       cmp    %rax,%rdx
    0.00 :   48a968:       ja     48b3c1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xca1>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   48a96e:       mov    %r12,%rdi
    0.00 :   48a971:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   48a976:       mov    %rax,-0x258(%rbp)
    0.00 :   48a97d:       mov    0x20(%r13),%rax
    0.00 :   48a981:       mov    0x18(%r13),%rsi
    0.00 :   48a985:       mov    %rax,%r12
    0.00 :   48a988:       sub    %rsi,%r12
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   48a98b:       cmp    %rax,%rsi
    0.00 :   48a98e:       je     48a99f <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x27f>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   48a990:       mov    -0x258(%rbp),%rdi
    0.00 :   48a997:       mov    %r12,%rdx
    0.00 :   48a99a:       callq  53aa0 <memmove@plt>
    0.00 :   48a99f:       mov    0x30(%r13),%rax
    0.00 :   48a9a3:       cmpl   $0x1,0x8(%rax)
    0.00 :   48a9a7:       jne    48b13f <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xa1f>
    0.00 :   48a9ad:       mov    0x0(%r13),%rax
    0.00 :   48a9b1:       mov    %rax,-0x280(%rbp)
    0.00 :   48a9b8:       mov    0x50(%r13),%rax
    0.00 :   48a9bc:       mov    %rax,-0x288(%rbp)
    0.00 :   48a9c3:       test   %ebx,%ebx
    0.00 :   48a9c5:       jle    48ac10 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4f0>
    0.00 :   48a9cb:       mov    -0x210(%rbp),%rax
    0.00 :   48a9d2:       mov    (%rax),%rdx
    0.00 :   48a9d5:       movslq %edx,%rax
    0.00 :   48a9d8:       mov    %edx,%r14d
    0.00 :   48a9db:       cmp    %rdx,%rax
    0.00 :   48a9de:       jne    48abcb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4ab>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48a9e4:       mov    %r12,%rax
    0.00 :   48a9e7:       xor    %r13d,%r13d
    0.00 :   48a9ea:       sar    $0x3,%rax
    0.00 :   48a9ee:       mov    %rax,-0x290(%rbp)
    0.00 :   48a9f5:       lea    -0x1(%rbx),%eax
    0.00 :   48a9f8:       xor    %ebx,%ebx
    0.00 :   48a9fa:       mov    %rax,-0x298(%rbp)
    0.00 :   48aa01:       nopl   0x0(%rax)
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   48aa08:       mov    -0x228(%rbp),%rax
    0.00 :   48aa0f:       mov    -0x258(%rbp),%rcx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   48aa16:       movq   $0x0,-0x1f0(%rbp)
    0.00 :   48aa21:       movq   $0x0,-0x1e8(%rbp)
    0.00 :   48aa2c:       mov    %rdx,(%rcx,%rax,8)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48aa30:       mov    -0x290(%rbp),%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   48aa37:       movq   $0x0,-0x1e0(%rbp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48aa42:       test   %rax,%rax
    0.00 :   48aa45:       je     48abd0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4b0>
         :            if (__n > this->max_size())
    0.00 :   48aa4b:       movabs $0x1fffffffffffffff,%rsi
    0.00 :   48aa55:       cmp    %rsi,%rax
    0.00 :   48aa58:       ja     48b110 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9f0>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   48aa5e:       mov    %r12,%rdi
    0.00 :   48aa61:       callq  53340 <operator new(unsigned long)@plt>
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48aa66:       lea    (%rax,%r12,1),%r15
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   48aa6a:       mov    %rax,-0x1f0(%rbp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   48aa71:       mov    %rax,-0x1e8(%rbp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48aa78:       mov    %r15,-0x1e0(%rbp)
         :            if (_Num)
    0.00 :   48aa7f:       test   %r12,%r12
    0.00 :   48aa82:       je     48aa96 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x376>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   48aa84:       mov    -0x258(%rbp),%rsi
    0.00 :   48aa8b:       mov    %r12,%rdx
    0.00 :   48aa8e:       mov    %rax,%rdi
    0.00 :   48aa91:       callq  53150 <memcpy@plt>
    0.00 :   48aa96:       mov    -0x278(%rbp),%rdx
    0.00 :   48aa9d:       mov    -0x270(%rbp),%rdi
    0.00 :   48aaa4:       mov    %ebx,%esi
         :            this->_M_impl._M_finish =
    0.00 :   48aaa6:       mov    %r15,-0x1e8(%rbp)
    0.00 :   48aaad:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48aab2:       mov    -0x1f0(%rbp),%rdi
    0.00 :   48aab9:       mov    %rax,-0x248(%rbp)
         :            if (__p)
    0.00 :   48aac0:       test   %rdi,%rdi
    0.00 :   48aac3:       je     48aaca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x3aa>
         :            ::operator delete(__p);
    0.00 :   48aac5:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48aaca:       mov    -0x248(%rbp),%rax
    0.00 :   48aad1:       mov    0x30(%rax),%rax
    0.00 :   48aad5:       cmpl   $0x1,0x8(%rax)
    0.00 :   48aad9:       jne    48ac50 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x530>
    0.00 :   48aadf:       mov    -0x22c(%rbp),%edx
    0.00 :   48aae5:       mov    -0x248(%rbp),%rax
    0.00 :   48aaec:       mov    -0x288(%rbp),%rcx
    0.00 :   48aaf3:       mov    -0x234(%rbp),%r8d
    0.00 :   48aafa:       imul   %r14d,%edx
    0.00 :   48aafe:       mov    0x50(%rax),%rdi
    0.00 :   48ab02:       add    (%rax),%rdi
    0.00 :   48ab05:       lea    (%rcx,%r13,4),%rsi
    0.00 :   48ab09:       movslq -0x230(%rbp),%rax
    0.00 :   48ab10:       mov    -0x280(%rbp),%rcx
    0.00 :   48ab17:       mov    %rdi,%r10
    0.00 :   48ab1a:       lea    (%rcx,%rsi,1),%r15
    0.00 :   48ab1e:       cmp    %eax,%edx
    0.00 :   48ab20:       je     48abe0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4c0>
    0.00 :   48ab26:       test   %r8d,%r8d
    0.00 :   48ab29:       jle    48ab9e <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x47e>
    0.00 :   48ab2b:       shl    $0x2,%rax
    0.00 :   48ab2f:       movslq %edx,%rcx
    0.00 :   48ab32:       mov    %r8d,-0x24c(%rbp)
    0.00 :   48ab39:       shl    $0x2,%rcx
    0.00 :   48ab3d:       mov    %rax,-0x248(%rbp)
    0.00 :   48ab44:       xor    %eax,%eax
    0.00 :   48ab46:       mov    %rbx,-0x260(%rbp)
    0.00 :   48ab4d:       mov    %eax,%ebx
    0.00 :   48ab4f:       mov    %r12,-0x268(%rbp)
    0.00 :   48ab56:       mov    %rcx,%r12
    0.00 :   48ab59:       nopl   0x0(%rax)
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   48ab60:       mov    %r15,%rsi
   25.15 :   48ab63:       mov    %r10,%rdi
    5.69 :   48ab66:       mov    %r12,%rdx
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48ab69:       add    $0x1,%ebx
         :            memcpy():
   28.51 :   48ab6c:       callq  53150 <memcpy@plt>
    5.98 :   48ab71:       add    -0x248(%rbp),%r15
    9.33 :   48ab78:       mov    %rax,%r10
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48ab7b:       add    %r12,%r10
    0.00 :   48ab7e:       cmp    %ebx,-0x24c(%rbp)
    0.00 :   48ab84:       jne    48ab60 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x440>
    0.00 :   48ab86:       mov    -0x22c(%rbp),%edx
    0.00 :   48ab8c:       mov    -0x260(%rbp),%rbx
    0.00 :   48ab93:       mov    -0x268(%rbp),%r12
    0.00 :   48ab9a:       imul   %r14d,%edx
    0.00 :   48ab9e:       movslq %edx,%rdx
    0.00 :   48aba1:       add    %rdx,%r13
    0.00 :   48aba4:       cmp    -0x298(%rbp),%rbx
    0.00 :   48abab:       je     48ac10 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4f0>
    0.00 :   48abad:       mov    -0x210(%rbp),%rax
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   48abb4:       add    $0x1,%rbx
    0.00 :   48abb8:       mov    (%rax,%rbx,8),%rax
   25.34 :   48abbc:       movslq %eax,%rdx
    0.00 :   48abbf:       mov    %eax,%r14d
    0.00 :   48abc2:       cmp    %rdx,%rax
    0.00 :   48abc5:       je     48aa08 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x2e8>
    0.00 :   48abcb:       callq  52a50 <std::terminate()@plt>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48abd0:       xor    %eax,%eax
    0.00 :   48abd2:       jmpq   48aa66 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x346>
    0.00 :   48abd7:       nopw   0x0(%rax,%rax,1)
    0.00 :   48abe0:       imul   %r8d,%edx
         :            memcpy():
    0.00 :   48abe4:       mov    %r15,%rsi
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48abe7:       movslq %edx,%rdx
    0.00 :   48abea:       shl    $0x2,%rdx
         :            memcpy():
    0.00 :   48abee:       callq  53150 <memcpy@plt>
    0.00 :   48abf3:       mov    -0x22c(%rbp),%edx
    0.00 :   48abf9:       imul   %r14d,%edx
         :            _ZNK11onnxruntime5Split11ComputeImplIfEENS_6common6StatusERNS_15OpKernelContextERKNS_6TensorE():
    0.00 :   48abfd:       movslq %edx,%rdx
    0.00 :   48ac00:       add    %rdx,%r13
    0.00 :   48ac03:       cmp    -0x298(%rbp),%rbx
    0.00 :   48ac0a:       jne    48abad <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x48d>
    0.00 :   48ac0c:       nopl   0x0(%rax)
    0.00 :   48ac10:       mov    -0x2a0(%rbp),%rax
         :            if (__p)
    0.00 :   48ac17:       cmpq   $0x0,-0x258(%rbp)
    0.00 :   48ac1f:       movq   $0x0,(%rax)
    0.00 :   48ac26:       je     48a8a1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x181>
    0.00 :   48ac2c:       mov    -0x258(%rbp),%rdi
    0.00 :   48ac33:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48ac38:       jmpq   48a8a1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x181>
    0.00 :   48ac3d:       nopl   (%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48ac40:       movq   $0x0,-0x258(%rbp)
    0.00 :   48ac4b:       jmpq   48a98b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x26b>
    0.00 :   48ac50:       mov    $0xa0,%edi
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   48ac55:       lea    -0x1b0(%rbp),%rbx
    0.00 :   48ac5c:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   48ac61:       lea    0x70(%rbx),%rdi
    0.00 :   48ac65:       mov    %rax,%r15
    0.00 :   48ac68:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   48ac6d:       mov    0x79ceb4(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   48ac74:       xor    %esi,%esi
    0.00 :   48ac76:       movq   $0x0,-0x68(%rbp)
    0.00 :   48ac7e:       movq   $0x0,-0x58(%rbp)
    0.00 :   48ac86:       add    $0x10,%rax
    0.00 :   48ac8a:       movq   $0x0,-0x50(%rbp)
    0.00 :   48ac92:       mov    %rax,-0x140(%rbp)
    0.00 :   48ac99:       xor    %eax,%eax
    0.00 :   48ac9b:       mov    %ax,-0x60(%rbp)
    0.00 :   48ac9f:       mov    0x79d0fa(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   48aca6:       movq   $0x0,-0x48(%rbp)
    0.00 :   48acae:       mov    0x8(%rax),%r12
    0.00 :   48acb2:       mov    0x10(%rax),%r13
    0.00 :   48acb6:       movq   $0x0,-0x40(%rbp)
    0.00 :   48acbe:       mov    -0x18(%r12),%rdi
    0.00 :   48acc3:       mov    %r12,-0x1b0(%rbp)
    0.00 :   48acca:       add    %rbx,%rdi
    0.00 :   48accd:       mov    %r13,(%rdi)
    0.00 :   48acd0:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   48acd5:       mov    0x79d084(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   48acdc:       lea    0x40(%rbx),%rdi
    0.00 :   48ace0:       movq   $0x0,-0x1a0(%rbp)
    0.00 :   48aceb:       movq   $0x0,-0x198(%rbp)
    0.00 :   48acf6:       movq   $0x0,-0x190(%rbp)
    0.00 :   48ad01:       add    $0x18,%rax
    0.00 :   48ad05:       mov    %rax,-0x1b0(%rbp)
    0.00 :   48ad0c:       mov    0x79d04d(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   48ad13:       movq   $0x0,-0x188(%rbp)
    0.00 :   48ad1e:       movq   $0x0,-0x180(%rbp)
    0.00 :   48ad29:       add    $0x40,%rax
    0.00 :   48ad2d:       mov    %rax,-0x140(%rbp)
    0.00 :   48ad34:       mov    0x79cf25(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   48ad3b:       movq   $0x0,-0x178(%rbp)
    0.00 :   48ad46:       add    $0x10,%rax
    0.00 :   48ad4a:       mov    %rax,-0x1a8(%rbp)
    0.00 :   48ad51:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   48ad56:       mov    0x79d27b(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   48ad5d:       lea    0x8(%rbx),%rsi
    0.00 :   48ad61:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   48ad65:       movl   $0x10,-0x168(%rbp)
    0.00 :   48ad6f:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   48ad73:       movb   $0x0,-0x150(%rbp)
    0.00 :   48ad7a:       mov    %rax,-0x1a8(%rbp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   48ad81:       lea    0x60(%rbx),%rax
    0.00 :   48ad85:       mov    %rax,-0x160(%rbp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   48ad8c:       movq   $0x0,-0x158(%rbp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   48ad97:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   48ad9c:       mov    $0x16,%edx
    0.00 :   48ada1:       lea    0x39aa49(%rip),%rsi        # 8257f1 <_fini+0x559>
    0.00 :   48ada8:       mov    %rbx,%rdi
    0.00 :   48adab:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   48adb0:       mov    $0x2,%edx
    0.00 :   48adb5:       mov    %rbx,%rdi
    0.00 :   48adb8:       lea    0x39aa49(%rip),%rsi        # 825808 <_fini+0x570>
    0.00 :   48adbf:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   48adc4:       mov    $0x2,%edx
    0.00 :   48adc9:       mov    %rbx,%rdi
    0.00 :   48adcc:       lea    0x39aa38(%rip),%rsi        # 82580b <_fini+0x573>
    0.00 :   48add3:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   48add8:       mov    -0x248(%rbp),%rax
    0.00 :   48addf:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48ade2:       lea    -0x1d0(%rbp),%r14
    0.00 :   48ade9:       mov    0x30(%rax),%rsi
    0.00 :   48aded:       callq  59ce30 <onnxruntime::operator<<(std::ostream&, onnxruntime::DataTypeImpl const*)>
    0.00 :   48adf2:       lea    0x10(%r14),%rax
    0.00 :   48adf6:       movb   $0x0,-0x1c0(%rbp)
    0.00 :   48adfd:       mov    %rax,-0x1d0(%rbp)
         :            if (this->pptr())
    0.00 :   48ae04:       mov    -0x180(%rbp),%rax
         :            { _M_string_length = __length; }
    0.00 :   48ae0b:       movq   $0x0,-0x1c8(%rbp)
    0.00 :   48ae16:       test   %rax,%rax
    0.00 :   48ae19:       je     48b129 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xa09>
         :            if (this->pptr() > this->egptr())
    0.00 :   48ae1f:       mov    -0x190(%rbp),%r8
    0.00 :   48ae26:       mov    -0x188(%rbp),%rcx
    0.00 :   48ae2d:       cmp    %r8,%rax
    0.00 :   48ae30:       jbe    48b115 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9f5>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   48ae36:       sub    %rcx,%rax
    0.00 :   48ae39:       xor    %edx,%edx
    0.00 :   48ae3b:       xor    %esi,%esi
    0.00 :   48ae3d:       mov    %r14,%rdi
    0.00 :   48ae40:       mov    %rax,%r8
    0.00 :   48ae43:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   48ae48:       mov    0x79cf11(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48ae4f:       mov    -0x160(%rbp),%rdi
    0.00 :   48ae56:       add    $0x18,%rax
    0.00 :   48ae5a:       mov    %rax,-0x1b0(%rbp)
    0.00 :   48ae61:       mov    0x79cef8(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   48ae68:       add    $0x40,%rax
    0.00 :   48ae6c:       mov    %rax,-0x140(%rbp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   48ae73:       mov    0x79d15e(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   48ae7a:       add    $0x10,%rax
    0.00 :   48ae7e:       mov    %rax,-0x1a8(%rbp)
         :            if (!_M_is_local())
    0.00 :   48ae85:       lea    0x60(%rbx),%rax
    0.00 :   48ae89:       cmp    %rax,%rdi
    0.00 :   48ae8c:       je     48ae93 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x773>
         :            ::operator delete(__p);
    0.00 :   48ae8e:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   48ae93:       mov    0x79cdc6(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   48ae9a:       lea    0x40(%rbx),%rdi
    0.00 :   48ae9e:       add    $0x10,%rax
    0.00 :   48aea2:       mov    %rax,-0x1a8(%rbp)
    0.00 :   48aea9:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   48aeae:       mov    -0x18(%r12),%rax
    0.00 :   48aeb3:       mov    %r12,-0x1b0(%rbp)
         :            ~basic_ios() { }
    0.00 :   48aeba:       lea    0x70(%rbx),%rdi
    0.00 :   48aebe:       mov    %r13,-0x1b0(%rbp,%rax,1)
    0.00 :   48aec6:       mov    0x79cc5b(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   48aecd:       add    $0x10,%rax
    0.00 :   48aed1:       mov    %rax,-0x140(%rbp)
    0.00 :   48aed8:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   48aedd:       mov    -0x278(%rbp),%rdi
    0.00 :   48aee4:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48aee9:       lea    0x39a95d(%rip),%rdx        # 82584d <_fini+0x5b5>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48aef0:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48aef4:       mov    %rbx,%rdi
    0.00 :   48aef7:       lea    -0x3d(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48aefb:       mov    %rax,-0x1b0(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48af02:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   48af07:       lea    0x3ee728(%rip),%rdx        # 879636 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__+0x36>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48af0e:       lea    0x38(%rbx),%rax
    0.00 :   48af12:       movl   $0x83,-0x190(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48af1c:       lea    0x28(%rbx),%rdi
    0.00 :   48af20:       lea    -0x36(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   48af24:       mov    %rax,-0x188(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48af2b:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48af30:       mov    -0x1e8(%rbp),%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   48af37:       movq   $0x0,-0x168(%rbp)
    0.00 :   48af42:       movq   $0x0,-0x160(%rbp)
    0.00 :   48af4d:       movq   $0x0,-0x158(%rbp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   48af58:       mov    %r13,%rax
    0.00 :   48af5b:       sub    -0x1f0(%rbp),%rax
    0.00 :   48af62:       mov    %rax,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   48af65:       sar    $0x5,%rax
    0.00 :   48af69:       mov    %rax,%rdx
    0.00 :   48af6c:       je     48af97 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x877>
         :            if (__n > this->max_size())
    0.00 :   48af6e:       movabs $0x7ffffffffffffff,%rax
    0.00 :   48af78:       cmp    %rax,%rdx
    0.00 :   48af7b:       ja     48b3d9 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcb9>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   48af81:       mov    %r12,%rdi
    0.00 :   48af84:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   48af89:       mov    %rax,-0x2a8(%rbp)
    0.00 :   48af90:       mov    -0x1e8(%rbp),%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   48af97:       mov    -0x2a8(%rbp),%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48af9e:       mov    %r12,%rcx
         :            std::__uninitialized_copy_a(__x.begin(), __x.end(),
    0.00 :   48afa1:       mov    -0x1f0(%rbp),%r12
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48afa8:       add    %rax,%rcx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   48afab:       mov    %rax,-0x168(%rbp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   48afb2:       mov    %rax,-0x160(%rbp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   48afb9:       mov    %rcx,-0x158(%rbp)
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   48afc0:       cmp    %r12,%r13
    0.00 :   48afc3:       je     48b3c6 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xca6>
         :            _ForwardIterator __cur = __result;
    0.00 :   48afc9:       mov    %rax,-0x248(%rbp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   48afd0:       mov    -0x248(%rbp),%rcx
    0.00 :   48afd7:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48afdb:       mov    %rcx,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   48afde:       mov    %rax,(%rcx)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   48afe1:       mov    (%r12),%rsi
    0.00 :   48afe5:       mov    0x8(%r12),%rdx
    0.00 :   48afea:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   48afed:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   48aff2:       add    $0x20,%r12
    0.00 :   48aff6:       addq   $0x20,-0x248(%rbp)
    0.00 :   48affe:       cmp    %r12,%r13
    0.00 :   48b001:       jne    48afd0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x8b0>
         :            this->_M_impl._M_finish =
    0.00 :   48b003:       mov    -0x248(%rbp),%rax
    0.00 :   48b00a:       mov    %r14,%rcx
    0.00 :   48b00d:       mov    %rbx,%rsi
    0.00 :   48b010:       mov    %r15,%rdi
    0.00 :   48b013:       lea    0x39a836(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   48b01a:       mov    %rax,-0x160(%rbp)
    0.00 :   48b021:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48b026:       mov    -0x168(%rbp),%rax
    0.00 :   48b02d:       mov    -0x160(%rbp),%r12
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   48b034:       mov    %rax,%r13
    0.00 :   48b037:       cmp    %rax,%r12
    0.00 :   48b03a:       je     48b060 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x940>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b03c:       mov    %r13,%rax
    0.00 :   48b03f:       mov    0x0(%r13),%rdi
         :            if (!_M_is_local())
    0.00 :   48b043:       add    $0x10,%rax
    0.00 :   48b047:       cmp    %rax,%rdi
    0.00 :   48b04a:       je     48b051 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x931>
         :            ::operator delete(__p);
    0.00 :   48b04c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b051:       mov    %r13,%rax
    0.00 :   48b054:       add    $0x20,%rax
    0.00 :   48b058:       mov    %rax,%r13
    0.00 :   48b05b:       cmp    %rax,%r12
    0.00 :   48b05e:       jne    48b03c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x91c>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   48b060:       mov    -0x168(%rbp),%rdi
         :            if (__p)
    0.00 :   48b067:       test   %rdi,%rdi
    0.00 :   48b06a:       je     48b071 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x951>
    0.00 :   48b06c:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b071:       mov    -0x188(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b078:       lea    0x38(%rbx),%rax
    0.00 :   48b07c:       cmp    %rax,%rdi
    0.00 :   48b07f:       je     48b086 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x966>
    0.00 :   48b081:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b086:       mov    -0x1b0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b08d:       add    $0x10,%rbx
    0.00 :   48b091:       cmp    %rbx,%rdi
    0.00 :   48b094:       je     48b09b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x97b>
    0.00 :   48b096:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48b09b:       mov    -0x1e8(%rbp),%rax
    0.00 :   48b0a2:       mov    -0x1f0(%rbp),%rbx
    0.00 :   48b0a9:       mov    %rax,%r13
    0.00 :   48b0ac:       cmp    %rbx,%rax
    0.00 :   48b0af:       je     48b0cb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9ab>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b0b1:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   48b0b4:       lea    0x10(%rbx),%rax
    0.00 :   48b0b8:       cmp    %rax,%rdi
    0.00 :   48b0bb:       je     48b0c2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9a2>
    0.00 :   48b0bd:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b0c2:       add    $0x20,%rbx
    0.00 :   48b0c6:       cmp    %rbx,%r13
    0.00 :   48b0c9:       jne    48b0b1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x991>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   48b0cb:       mov    -0x1f0(%rbp),%rdi
         :            if (__p)
    0.00 :   48b0d2:       test   %rdi,%rdi
    0.00 :   48b0d5:       je     48b0dc <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9bc>
    0.00 :   48b0d7:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b0dc:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b0e3:       add    $0x10,%r14
    0.00 :   48b0e7:       cmp    %r14,%rdi
    0.00 :   48b0ea:       je     48b0f1 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x9d1>
    0.00 :   48b0ec:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b0f1:       lea    -0x3919d8(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   48b0f8:       lea    0x786531(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   48b0ff:       mov    %r15,%rdi
    0.00 :   48b102:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   48b107:       nopw   0x0(%rax,%rax,1)
         :            std::__throw_bad_alloc();
    0.00 :   48b110:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   48b115:       sub    %rcx,%r8
    0.00 :   48b118:       xor    %edx,%edx
    0.00 :   48b11a:       xor    %esi,%esi
    0.00 :   48b11c:       mov    %r14,%rdi
    0.00 :   48b11f:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   48b124:       jmpq   48ae48 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x728>
         :            this->_M_assign(__str);
    0.00 :   48b129:       lea    0x50(%rbx),%rsi
    0.00 :   48b12d:       mov    %r14,%rdi
    0.00 :   48b130:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   48b135:       jmpq   48ae48 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x728>
    0.00 :   48b13a:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   48b13f:       mov    $0xa0,%edi
    0.00 :   48b144:       lea    -0x1d0(%rbp),%r14
    0.00 :   48b14b:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   48b150:       mov    -0x278(%rbp),%r15
    0.00 :   48b157:       mov    %r14,%rdi
    0.00 :   48b15a:       lea    -0x220(%rbp),%rcx
    0.00 :   48b161:       mov    %rax,-0x248(%rbp)
    0.00 :   48b168:       mov    %rax,%r12
    0.00 :   48b16b:       lea    0x39a699(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   48b172:       lea    0x30(%r13),%r8
    0.00 :   48b176:       mov    %rax,-0x220(%rbp)
    0.00 :   48b17d:       lea    0x39a684(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   48b184:       lea    -0x218(%rbp),%rdx
    0.00 :   48b18b:       mov    %r15,%rsi
    0.00 :   48b18e:       mov    %rax,-0x218(%rbp)
    0.00 :   48b195:       lea    0x39a655(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   48b19c:       mov    %rax,-0x1f0(%rbp)
    0.00 :   48b1a3:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   48b1a8:       mov    %r15,%rdi
    0.00 :   48b1ab:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   48b1b0:       lea    -0x1b0(%rbp),%rbx
    0.00 :   48b1b7:       mov    %r15,%r8
    0.00 :   48b1ba:       lea    0x3ee47f(%rip),%rcx        # 879640 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   48b1c1:       mov    $0x97,%edx
    0.00 :   48b1c6:       lea    0x39a643(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   48b1cd:       mov    %rbx,%rdi
    0.00 :   48b1d0:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   48b1d5:       mov    %r14,%rcx
    0.00 :   48b1d8:       lea    0x39a671(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   48b1df:       mov    %rbx,%rsi
    0.00 :   48b1e2:       mov    %r12,%rdi
    0.00 :   48b1e5:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   48b1ea:       mov    %rbx,%rdi
         :            if (!_M_is_local())
    0.00 :   48b1ed:       add    $0x10,%r14
    0.00 :   48b1f1:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b1f6:       mov    %r15,%rdi
    0.00 :   48b1f9:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b1fe:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b205:       cmp    %r14,%rdi
    0.00 :   48b208:       je     48b20f <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xaef>
         :            ::operator delete(__p);
    0.00 :   48b20a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b20f:       lea    -0x391af6(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   48b216:       lea    0x786413(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   48b21d:       mov    -0x248(%rbp),%rdi
    0.00 :   48b224:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   48b229:       mov    $0xa0,%edi
    0.00 :   48b22e:       lea    -0x1d0(%rbp),%r14
    0.00 :   48b235:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   48b23a:       lea    0x3eddbf(%rip),%rsi        # 879000 <typeinfo name for onnxruntime::DepthToSpace<float>+0x240>
    0.00 :   48b241:       mov    %r14,%rdi
    0.00 :   48b244:       mov    %rax,%r13
    0.00 :   48b247:       callq  488f70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.122]>
    0.00 :   48b24c:       lea    -0x1f0(%rbp),%rcx
    0.00 :   48b253:       mov    %rcx,%rdi
    0.00 :   48b256:       mov    %rcx,%r15
    0.00 :   48b259:       mov    %rcx,-0x278(%rbp)
    0.00 :   48b260:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   48b265:       lea    -0x1b0(%rbp),%rbx
    0.00 :   48b26c:       mov    %r15,%r8
    0.00 :   48b26f:       lea    0x3ee46a(%rip),%rcx        # 8796e0 <onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const::__PRETTY_FUNCTION__>
    0.00 :   48b276:       mov    $0x91,%edx
    0.00 :   48b27b:       lea    0x3eddae(%rip),%rsi        # 879030 <typeinfo name for onnxruntime::DepthToSpace<float>+0x270>
    0.00 :   48b282:       mov    %rbx,%rdi
    0.00 :   48b285:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   48b28a:       mov    %r14,%rcx
    0.00 :   48b28d:       lea    0x3edde4(%rip),%rdx        # 879078 <typeinfo name for onnxruntime::DepthToSpace<float>+0x2b8>
    0.00 :   48b294:       mov    %rbx,%rsi
    0.00 :   48b297:       mov    %r13,%rdi
    0.00 :   48b29a:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   48b29f:       mov    %rbx,%rdi
    0.00 :   48b2a2:       add    $0x10,%r14
    0.00 :   48b2a6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b2ab:       mov    %r15,%rdi
    0.00 :   48b2ae:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b2b3:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b2ba:       cmp    %r14,%rdi
    0.00 :   48b2bd:       je     48b2c4 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xba4>
    0.00 :   48b2bf:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b2c4:       lea    -0x391bab(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   48b2cb:       lea    0x78635e(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   48b2d2:       mov    %r13,%rdi
    0.00 :   48b2d5:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   48b2da:       mov    $0xa0,%edi
    0.00 :   48b2df:       lea    -0x1d0(%rbp),%r14
    0.00 :   48b2e6:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   48b2eb:       lea    -0x1f0(%rbp),%rsi
    0.00 :   48b2f2:       mov    %r14,%rdi
    0.00 :   48b2f5:       lea    -0x220(%rbp),%rcx
    0.00 :   48b2fc:       mov    %rax,%r13
    0.00 :   48b2ff:       lea    0x39a505(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   48b306:       mov    %rsi,%r15
    0.00 :   48b309:       mov    %rsi,-0x278(%rbp)
    0.00 :   48b310:       mov    %rax,-0x220(%rbp)
    0.00 :   48b317:       lea    0x39a4ea(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   48b31e:       lea    0x30(%r12),%r8
    0.00 :   48b323:       mov    %rax,-0x218(%rbp)
    0.00 :   48b32a:       lea    -0x218(%rbp),%rdx
    0.00 :   48b331:       lea    0x39a4b9(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   48b338:       mov    %rax,-0x1f0(%rbp)
    0.00 :   48b33f:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   48b344:       mov    %r15,%rdi
    0.00 :   48b347:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   48b34c:       lea    -0x1b0(%rbp),%rbx
    0.00 :   48b353:       mov    %r15,%r8
    0.00 :   48b356:       lea    0x3ee323(%rip),%rcx        # 879680 <onnxruntime::Tensor::Data<long>() const::__PRETTY_FUNCTION__>
    0.00 :   48b35d:       mov    $0x97,%edx
    0.00 :   48b362:       lea    0x39a4a7(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   48b369:       mov    %rbx,%rdi
    0.00 :   48b36c:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   48b371:       mov    %r14,%rcx
    0.00 :   48b374:       lea    0x39a4d5(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   48b37b:       mov    %rbx,%rsi
    0.00 :   48b37e:       mov    %r13,%rdi
    0.00 :   48b381:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   48b386:       mov    %rbx,%rdi
    0.00 :   48b389:       add    $0x10,%r14
    0.00 :   48b38d:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b392:       mov    %r15,%rdi
    0.00 :   48b395:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b39a:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b3a1:       cmp    %r14,%rdi
    0.00 :   48b3a4:       je     48b3ab <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xc8b>
    0.00 :   48b3a6:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b3ab:       lea    -0x391c92(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   48b3b2:       lea    0x786277(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   48b3b9:       mov    %r13,%rdi
    0.00 :   48b3bc:       callq  53bc0 <__cxa_throw@plt>
         :            std::__throw_bad_alloc();
    0.00 :   48b3c1:       callq  52ba0 <std::__throw_bad_alloc()@plt>
         :            _ForwardIterator __cur = __result;
    0.00 :   48b3c6:       mov    -0x2a8(%rbp),%rax
    0.00 :   48b3cd:       mov    %rax,-0x248(%rbp)
    0.00 :   48b3d4:       jmpq   48b003 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x8e3>
    0.00 :   48b3d9:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   48b3de:       mov    %rax,%r13
    0.00 :   48b3e1:       jmp    48b406 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xce6>
    0.00 :   48b3e3:       mov    %rax,%rbx
    0.00 :   48b3e6:       jmpq   48b4b2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd92>
    0.00 :   48b3eb:       jmpq   48b474 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd54>
         :            std::_Construct(std::__addressof(*__cur), *__first);
         :            return __cur;
         :            }
         :            __catch(...)
    0.00 :   48b3f0:       callq  53ad0 <__cxa_end_catch@plt>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   48b3f5:       mov    -0x168(%rbp),%rdi
         :            if (__p)
    0.00 :   48b3fc:       test   %rdi,%rdi
    0.00 :   48b3ff:       je     48b406 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xce6>
         :            ::operator delete(__p);
    0.00 :   48b401:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b406:       mov    -0x188(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b40d:       lea    0x38(%rbx),%rax
    0.00 :   48b411:       cmp    %rax,%rdi
    0.00 :   48b414:       je     48b41b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcfb>
    0.00 :   48b416:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b41b:       mov    -0x1b0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b422:       add    $0x10,%rbx
    0.00 :   48b426:       cmp    %rbx,%rdi
    0.00 :   48b429:       je     48b430 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd10>
    0.00 :   48b42b:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b430:       mov    %r13,%rbx
    0.00 :   48b433:       mov    -0x278(%rbp),%rdi
    0.00 :   48b43a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b43f:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b446:       add    $0x10,%r14
    0.00 :   48b44a:       cmp    %r14,%rdi
    0.00 :   48b44d:       je     48b454 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd34>
         :            ::operator delete(__p);
    0.00 :   48b44f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b454:       mov    %r15,%rdi
    0.00 :   48b457:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   48b45c:       cmpq   $0x0,-0x258(%rbp)
    0.00 :   48b464:       je     48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
    0.00 :   48b466:       mov    -0x258(%rbp),%rdi
    0.00 :   48b46d:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b472:       jmp    48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
    0.00 :   48b474:       mov    %rax,%rdi
    0.00 :   48b477:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   48b47c:       mov    -0x248(%rbp),%rax
    0.00 :   48b483:       mov    -0x2a8(%rbp),%r12
    0.00 :   48b48a:       mov    %rax,%r13
    0.00 :   48b48d:       cmp    %r13,%r12
    0.00 :   48b490:       jne    48b535 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe15>
         :            {
         :            std::_Destroy(__result, __cur);
         :            __throw_exception_again;
    0.00 :   48b496:       callq  53870 <__cxa_rethrow@plt>
    0.00 :   48b49b:       mov    %rbx,%rdi
    0.00 :   48b49e:       mov    %r12,%rbx
    0.00 :   48b4a1:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b4a6:       mov    -0x278(%rbp),%rdi
    0.00 :   48b4ad:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b4b2:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b4b9:       add    $0x10,%r14
    0.00 :   48b4bd:       cmp    %r14,%rdi
    0.00 :   48b4c0:       jne    48b4e3 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdc3>
    0.00 :   48b4c2:       mov    %r13,%rdi
    0.00 :   48b4c5:       callq  52fe0 <__cxa_free_exception@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48b4ca:       mov    -0x210(%rbp),%rdi
         :            if (__p)
    0.00 :   48b4d1:       test   %rdi,%rdi
    0.00 :   48b4d4:       je     48b4db <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdbb>
         :            ::operator delete(__p);
    0.00 :   48b4d6:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b4db:       mov    %rbx,%rdi
    0.00 :   48b4de:       callq  53c30 <_Unwind_Resume@plt>
         :            ::operator delete(__p);
    0.00 :   48b4e3:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b4e8:       jmp    48b4c2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xda2>
    0.00 :   48b4ea:       jmp    48b4ee <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdce>
    0.00 :   48b4ec:       jmp    48b50b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdeb>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   48b4ee:       lea    0x8(%rbx),%rdi
    0.00 :   48b4f2:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   48b4f7:       mov    -0x18(%r12),%rax
    0.00 :   48b4fc:       mov    %r12,-0x1b0(%rbp)
    0.00 :   48b503:       mov    %r13,-0x1b0(%rbp,%rax,1)
    0.00 :   48b50b:       mov    0x79c616(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   48b512:       lea    0x70(%rbx),%rdi
    0.00 :   48b516:       add    $0x10,%rax
    0.00 :   48b51a:       mov    %rax,-0x140(%rbp)
    0.00 :   48b521:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   48b526:       jmpq   48abcb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4ab>
    0.00 :   48b52b:       mov    %rax,%rbx
    0.00 :   48b52e:       jmp    48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
    0.00 :   48b530:       mov    %rax,%rbx
    0.00 :   48b533:       jmp    48b559 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe39>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b535:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   48b539:       lea    0x10(%r12),%rax
    0.00 :   48b53e:       cmp    %rax,%rdi
    0.00 :   48b541:       je     48b548 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe28>
         :            ::operator delete(__p);
    0.00 :   48b543:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b548:       add    $0x20,%r12
    0.00 :   48b54c:       jmpq   48b48d <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd6d>
    0.00 :   48b551:       mov    %rax,%r13
    0.00 :   48b554:       jmpq   48b3f0 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcd0>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   48b559:       mov    -0x1f0(%rbp),%rdi
         :            if (__p)
    0.00 :   48b560:       test   %rdi,%rdi
    0.00 :   48b563:       je     48b45c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd3c>
    0.00 :   48b569:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b56e:       jmpq   48b45c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd3c>
    0.00 :   48b573:       mov    %rax,%r12
    0.00 :   48b576:       jmpq   48b49b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd7b>
    0.00 :   48b57b:       mov    %rax,%rbx
    0.00 :   48b57e:       jmpq   48b4a6 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd86>
    0.00 :   48b583:       mov    %rax,%r12
    0.00 :   48b586:       jmp    48b590 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe70>
    0.00 :   48b588:       mov    %rax,%rbx
    0.00 :   48b58b:       jmpq   48b45c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd3c>
    0.00 :   48b590:       mov    %rbx,%rdi
    0.00 :   48b593:       mov    %r12,%rbx
    0.00 :   48b596:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b59b:       mov    -0x278(%rbp),%rdi
    0.00 :   48b5a2:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b5a7:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b5ae:       add    $0x10,%r14
    0.00 :   48b5b2:       cmp    %r14,%rdi
    0.00 :   48b5b5:       je     48b5bc <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe9c>
         :            ::operator delete(__p);
    0.00 :   48b5b7:       callq  53300 <operator delete(void*)@plt>
    0.00 :   48b5bc:       mov    -0x248(%rbp),%rdi
    0.00 :   48b5c3:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   48b5c8:       jmpq   48b45c <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd3c>
    0.00 :   48b5cd:       mov    %rax,%r13
    0.00 :   48b5d0:       jmpq   48b41b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcfb>
    0.00 :   48b5d5:       mov    %rax,%rbx
    0.00 :   48b5d8:       jmpq   48b43f <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd1f>
    0.00 :   48b5dd:       jmp    48b5e7 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xec7>
    0.00 :   48b5df:       mov    %rax,%rbx
    0.00 :   48b5e2:       jmpq   48b433 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd13>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   48b5e7:       mov    -0x1d0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   48b5ee:       add    $0x10,%r14
    0.00 :   48b5f2:       cmp    %r14,%rdi
    0.00 :   48b5f5:       je     48abcb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4ab>
    0.00 :   48b5fb:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   48b600:       jmpq   48abcb <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0x4ab>
    0.00 :   48b605:       jmpq   48b573 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe53>
    0.00 :   48b60a:       jmpq   48b57b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe5b>
    0.00 :   48b60f:       jmpq   48b3e3 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xcc3>
    0.00 :   48b614:       mov    %rax,%rbx
    0.00 :   48b617:       jmpq   48b4c2 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xda2>
    0.00 :   48b61c:       mov    %rax,%rbx
    0.00 :   48b61f:       jmpq   48b59b <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe7b>
    0.00 :   48b624:       mov    %rax,%rbx
    0.00 :   48b627:       jmpq   48b5a7 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xe87>
    0.00 :   48b62c:       mov    %rax,%r13
    0.00 :   48b62f:       jmp    48b636 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xf16>
    0.00 :   48b631:       mov    %rax,%rbx
    0.00 :   48b634:       jmp    48b643 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xf23>
    0.00 :   48b636:       mov    %rbx,%rdi
    0.00 :   48b639:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   48b63e:       jmpq   48b430 <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xd10>
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   48b643:       mov    -0x1f0(%rbp),%rdi
    0.00 :   48b64a:       test   %rdi,%rdi
    0.00 :   48b64d:       je     48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
         :            get_deleter()(__ptr);
    0.00 :   48b653:       callq  98f38 <std::default_delete<onnxruntime::common::Status::State>::operator()(onnxruntime::common::Status::State*) const [clone .isra.119]>
    0.00 :   48b658:       jmpq   48b4ca <onnxruntime::common::Status onnxruntime::Split::ComputeImpl<float>(onnxruntime::OpKernelContext&, onnxruntime::Tensor const&) const+0xdaa>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (5 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000001abf20 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const>:
         :            _ZNK11onnxruntime5Graph15NodeAtIndexImplEm():
    0.00 :   1abf20:       push   %r14
    0.00 :   1abf22:       push   %r13
    0.00 :   1abf24:       push   %r12
    0.00 :   1abf26:       push   %rbp
    0.00 :   1abf27:       mov    %rsi,%rbp
    0.00 :   1abf2a:       push   %rbx
    0.00 :   1abf2b:       sub    $0x1c0,%rsp
    0.00 :   1abf32:       mov    0x180(%rdi),%rdx
   83.63 :   1abf39:       mov    %fs:0x28,%rax
    0.00 :   1abf42:       mov    %rax,0x1b8(%rsp)
    0.00 :   1abf4a:       xor    %eax,%eax
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   1abf4c:       mov    0x188(%rdi),%rax
    0.00 :   1abf53:       sub    %rdx,%rax
    0.00 :   1abf56:       sar    $0x3,%rax
    0.00 :   1abf5a:       cmp    %rsi,%rax
    0.00 :   1abf5d:       jbe    1abf8a <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x6a>
    0.00 :   1abf5f:       mov    0x1b8(%rsp),%rcx
    0.00 :   1abf67:       xor    %fs:0x28,%rcx
    0.00 :   1abf70:       mov    (%rdx,%rsi,8),%rax
   16.37 :   1abf74:       jne    1ac085 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x165>
    0.00 :   1abf7a:       add    $0x1c0,%rsp
    0.00 :   1abf81:       pop    %rbx
    0.00 :   1abf82:       pop    %rbp
    0.00 :   1abf83:       pop    %r12
    0.00 :   1abf85:       pop    %r13
    0.00 :   1abf87:       pop    %r14
    0.00 :   1abf89:       retq
    0.00 :   1abf8a:       mov    %rdi,%rbx
    0.00 :   1abf8d:       mov    $0xa0,%edi
    0.00 :   1abf92:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   1abf97:       mov    $0x10,%esi
    0.00 :   1abf9c:       mov    %rax,%r12
    0.00 :   1abf9f:       mov    0x188(%rbx),%rax
    0.00 :   1abfa6:       sub    0x180(%rbx),%rax
    0.00 :   1abfad:       lea    0x40(%rsp),%rbx
    0.00 :   1abfb2:       sar    $0x3,%rax
    0.00 :   1abfb6:       mov    %rbx,%rdi
    0.00 :   1abfb9:       mov    %rax,%r13
    0.00 :   1abfbc:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   1abfc1:       lea    0x689740(%rip),%rsi        # 835708 <typeinfo name for onnxruntime::EliminateIdentity+0x28>
    0.00 :   1abfc8:       mov    %rbx,%rdi
    0.00 :   1abfcb:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            operator<<(long __n)
         :            { return _M_insert(__n); }
         :
         :            __ostream_type&
         :            operator<<(unsigned long __n)
         :            { return _M_insert(__n); }
    0.00 :   1abfd0:       mov    %rbp,%rsi
    0.00 :   1abfd3:       mov    %rbx,%rdi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   1abfd6:       lea    0x20(%rsp),%rbp
    0.00 :   1abfdb:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   1abfe0:       lea    0x689841(%rip),%rsi        # 835828 <typeinfo name for onnxruntime::EliminateIdentity+0x148>
    0.00 :   1abfe7:       mov    %rbx,%rdi
    0.00 :   1abfea:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   1abfef:       mov    %r13,%rsi
    0.00 :   1abff2:       mov    %rbx,%rdi
    0.00 :   1abff5:       mov    %rsp,%r13
    0.00 :   1abff8:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   1abffd:       lea    0x8(%rbx),%rsi
    0.00 :   1ac001:       mov    %rbp,%rdi
    0.00 :   1ac004:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   1ac009:       mov    %rbx,%rdi
    0.00 :   1ac00c:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   1ac011:       mov    %r13,%rdi
    0.00 :   1ac014:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   1ac019:       mov    %r13,%r8
    0.00 :   1ac01c:       mov    $0x51d,%edx
    0.00 :   1ac021:       mov    %rbx,%rdi
    0.00 :   1ac024:       lea    0x689cf5(%rip),%rcx        # 835d20 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const::__PRETTY_FUNCTION__>
    0.00 :   1ac02b:       lea    0x68971e(%rip),%rsi        # 835750 <typeinfo name for onnxruntime::EliminateIdentity+0x70>
    0.00 :   1ac032:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   1ac037:       mov    %rbp,%rcx
    0.00 :   1ac03a:       lea    0x6897ed(%rip),%rdx        # 83582e <typeinfo name for onnxruntime::EliminateIdentity+0x14e>
    0.00 :   1ac041:       mov    %rbx,%rsi
    0.00 :   1ac044:       mov    %r12,%rdi
    0.00 :   1ac047:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   1ac04c:       mov    %rbx,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   1ac04f:       add    $0x10,%rbp
    0.00 :   1ac053:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   1ac058:       mov    %r13,%rdi
    0.00 :   1ac05b:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   1ac060:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   1ac065:       cmp    %rbp,%rdi
    0.00 :   1ac068:       je     1ac06f <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x14f>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   1ac06a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   1ac06f:       lea    -0xb2956(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   1ac076:       lea    0xa655b3(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   1ac07d:       mov    %r12,%rdi
    0.00 :   1ac080:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   1ac085:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   1ac08a:       mov    %rax,%rbx
    0.00 :   1ac08d:       jmp    1ac0ac <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x18c>
    0.00 :   1ac08f:       mov    %rax,%r14
    0.00 :   1ac092:       jmp    1ac099 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x179>
    0.00 :   1ac094:       mov    %rax,%rbx
    0.00 :   1ac097:       jmp    1ac0a4 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x184>
    0.00 :   1ac099:       mov    %rbx,%rdi
    0.00 :   1ac09c:       mov    %r14,%rbx
    0.00 :   1ac09f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   1ac0a4:       mov    %r13,%rdi
    0.00 :   1ac0a7:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   1ac0ac:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   1ac0b1:       add    $0x10,%rbp
    0.00 :   1ac0b5:       cmp    %rbp,%rdi
    0.00 :   1ac0b8:       je     1ac0bf <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const+0x19f>
    0.00 :   1ac0ba:       callq  53300 <operator delete(void*)@plt>
    0.00 :   1ac0bf:       mov    %r12,%rdi
    0.00 :   1ac0c2:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   1ac0c7:       mov    %rbx,%rdi
    0.00 :   1ac0ca:       callq  53c30 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (7 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005f2670 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const>:
         :            _ZNK11onnxruntime11TensorShape10SizeHelperEmm():
    0.00 :   5f2670:       cmp    %rdx,%rsi
    0.00 :   5f2673:       jae    5f2721 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb1>
    0.00 :   5f2679:       mov    (%rdi),%r9
    6.82 :   5f267c:       movslq %esi,%rax
    0.00 :   5f267f:       mov    (%r9,%rax,8),%rdi
   86.04 :   5f2683:       test   %rdi,%rdi
    0.00 :   5f2686:       js     5f2710 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xa0>
    0.00 :   5f268c:       mov    $0x1,%eax
    0.00 :   5f2691:       jmp    5f26e3 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x73>
    0.00 :   5f2693:       nopl   0x0(%rax,%rax,1)
    0.00 :   5f2698:       test   %r8,%r8
    0.00 :   5f269b:       je     5f2707 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x97>
    0.00 :   5f269d:       mov    %r8,%rcx
    0.00 :   5f26a0:       mov    %eax,%r10d
    0.00 :   5f26a3:       imul   %rax,%rcx
    0.00 :   5f26a7:       test   %rcx,%rcx
    0.00 :   5f26aa:       je     5f2707 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x97>
    0.00 :   5f26ac:       mov    %rcx,%r11
    0.00 :   5f26af:       shr    $0x20,%r11
    0.00 :   5f26b3:       jne    5f2727 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb7>
    0.00 :   5f26b5:       mov    %eax,%eax
    0.00 :   5f26b7:       mov    %edi,%edi
    0.00 :   5f26b9:       shl    $0x20,%rcx
    0.00 :   5f26bd:       imul   %rdi,%rax
    0.00 :   5f26c1:       add    %rax,%rcx
    0.00 :   5f26c4:       jb     5f2727 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb7>
    0.00 :   5f26c6:       mov    %rcx,%rax
    0.00 :   5f26c9:       test   %rcx,%rcx
    0.00 :   5f26cc:       js     5f2727 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb7>
    0.00 :   5f26ce:       add    $0x1,%rsi
    0.00 :   5f26d2:       cmp    %rsi,%rdx
    0.00 :   5f26d5:       je     5f2720 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb0>
    0.00 :   5f26d7:       movslq %esi,%rcx
    0.00 :   5f26da:       mov    (%r9,%rcx,8),%rdi
    0.00 :   5f26de:       test   %rdi,%rdi
    0.00 :   5f26e1:       js     5f2710 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xa0>
    0.00 :   5f26e3:       mov    %rdi,%r8
    0.00 :   5f26e6:       mov    %rax,%rcx
    0.00 :   5f26e9:       mov    %rax,%r10
    0.00 :   5f26ec:       shr    $0x20,%r8
    7.13 :   5f26f0:       shr    $0x20,%rcx
    0.00 :   5f26f4:       je     5f2698 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x28>
    0.00 :   5f26f6:       test   %r8,%r8
    0.00 :   5f26f9:       jne    5f2727 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0xb7>
    0.00 :   5f26fb:       imul   %rdi,%rcx
    0.00 :   5f26ff:       mov    %eax,%r10d
    0.00 :   5f2702:       test   %rcx,%rcx
    0.00 :   5f2705:       jne    5f26ac <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x3c>
    0.00 :   5f2707:       mov    %edi,%ecx
    0.00 :   5f2709:       imul   %r10,%rcx
    0.00 :   5f270d:       jmp    5f26c6 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const+0x56>
    0.00 :   5f270f:       nop
    0.00 :   5f2710:       mov    $0xffffffffffffffff,%rax
    0.00 :   5f2717:       retq
    0.00 :   5f2718:       nopl   0x0(%rax,%rax,1)
    0.00 :   5f2720:       retq
    0.00 :   5f2721:       mov    $0x1,%eax
    0.00 :   5f2726:       retq
    0.00 :   5f2727:       sub    $0x8,%rsp
    0.00 :   5f272b:       callq  18ac00 <SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException>::SafeIntOnOverflow()>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000002ac7b0 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime6MatMulIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   2ac7b0:       push   %rbp
    0.00 :   2ac7b1:       mov    %rsp,%rbp
    0.00 :   2ac7b4:       push   %r15
    0.00 :   2ac7b6:       push   %r14
    0.00 :   2ac7b8:       push   %r13
    0.00 :   2ac7ba:       mov    %rdi,%r13
    0.00 :   2ac7bd:       mov    %rdx,%rdi
    0.00 :   2ac7c0:       push   %r12
    0.00 :   2ac7c2:       push   %rbx
    0.00 :   2ac7c3:       mov    %rsi,%rbx
    0.00 :   2ac7c6:       xor    %esi,%esi
    0.00 :   2ac7c8:       sub    $0x238,%rsp
    0.00 :   2ac7cf:       mov    %rdx,-0x240(%rbp)
    0.00 :   2ac7d6:       mov    %fs:0x28,%rax
    0.00 :   2ac7df:       mov    %rax,-0x38(%rbp)
    0.00 :   2ac7e3:       xor    %eax,%eax
    0.00 :   2ac7e5:       mov    0x18(%rdx),%rax
    0.00 :   2ac7e9:       mov    %rax,-0x238(%rbp)
    0.00 :   2ac7f0:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   2ac7f5:       cmpq   $0x0,0x38(%rbx)
    0.00 :   2ac7fa:       mov    %rax,%r12
    0.00 :   2ac7fd:       je     2acb88 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x3d8>
    0.00 :   2ac803:       lea    0x10(%rbx),%rcx
    0.00 :   2ac807:       xor    %r15d,%r15d
    0.00 :   2ac80a:       cmpq   $0x0,0x48(%rbx)
    0.00 :   2ac80f:       je     2acb30 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x380>
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2ac815:       mov    0x20(%r12),%rax
    0.00 :   2ac81a:       sub    0x18(%r12),%rax
    0.00 :   2ac81f:       cmp    $0x8,%rax
    0.00 :   2ac823:       setne  -0x229(%rbp)
    0.00 :   2ac82a:       movzbl -0x229(%rbp),%r8d
    0.00 :   2ac832:       cmpq   $0x0,0x50(%rbx)
    0.00 :   2ac837:       je     2acb20 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x370>
    0.00 :   2ac83d:       mov    0x8(%rcx),%rax
    0.00 :   2ac841:       sub    (%rcx),%rax
    0.00 :   2ac844:       cmp    $0x8,%rax
    0.00 :   2ac848:       setne  -0x228(%rbp)
    0.00 :   2ac84f:       movzbl -0x228(%rbp),%r9d
    0.00 :   2ac857:       lea    -0x1f0(%rbp),%rax
    0.00 :   2ac85e:       lea    0x18(%r12),%rdx
    0.00 :   2ac863:       movq   $0x0,-0x1f0(%rbp)
    0.00 :   2ac86e:       lea    -0x210(%rbp),%r14
    0.00 :   2ac875:       mov    %rax,%rsi
    0.00 :   2ac878:       movq   $0x0,-0x1e8(%rbp)
    0.00 :   2ac883:       movq   $0x0,-0x1e0(%rbp)
    0.00 :   2ac88e:       mov    %r14,%rdi
    0.00 :   2ac891:       movq   $0x0,-0x1d8(%rbp)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2ac89c:       movq   $0x0,-0x1d0(%rbp)
    0.00 :   2ac8a7:       movq   $0x0,-0x1c8(%rbp)
    0.00 :   2ac8b2:       movq   $0x0,-0x1c0(%rbp)
    0.00 :   2ac8bd:       movq   $0x0,-0x1b8(%rbp)
    0.00 :   2ac8c8:       movq   $0x0,-0x1b0(%rbp)
    0.00 :   2ac8d3:       movq   $0x0,-0x1a8(%rbp)
    0.00 :   2ac8de:       movq   $0x0,-0x1a0(%rbp)
    0.00 :   2ac8e9:       movq   $0x0,-0x198(%rbp)
    0.00 :   2ac8f4:       movq   $0x0,-0x190(%rbp)
    0.00 :   2ac8ff:       movq   $0x0,-0x188(%rbp)
    0.00 :   2ac90a:       movq   $0x0,-0x180(%rbp)
    0.00 :   2ac915:       movq   $0x0,-0x178(%rbp)
    0.00 :   2ac920:       movq   $0x0,-0x170(%rbp)
    0.00 :   2ac92b:       movq   $0x0,-0x168(%rbp)
    0.00 :   2ac936:       movq   $0x0,-0x160(%rbp)
    0.00 :   2ac941:       movq   $0x0,-0x158(%rbp)
    0.00 :   2ac94c:       movq   $0x0,-0x150(%rbp)
    0.00 :   2ac957:       movq   $0x0,-0x148(%rbp)
    0.00 :   2ac962:       movq   $0x0,-0x140(%rbp)
    0.00 :   2ac96d:       movq   $0x0,-0x138(%rbp)
    0.00 :   2ac978:       movq   $0x0,-0x130(%rbp)
    0.00 :   2ac983:       movq   $0x0,-0x128(%rbp)
    0.00 :   2ac98e:       movq   $0x0,-0x120(%rbp)
    0.00 :   2ac999:       movq   $0x0,-0x118(%rbp)
    0.00 :   2ac9a4:       movq   $0x0,-0x110(%rbp)
    0.00 :   2ac9af:       movq   $0x0,-0x108(%rbp)
    0.00 :   2ac9ba:       movq   $0x0,-0x100(%rbp)
    0.00 :   2ac9c5:       movq   $0x0,-0xf8(%rbp)
    0.00 :   2ac9d0:       movq   $0x0,-0xf0(%rbp)
    0.00 :   2ac9db:       movq   $0x0,-0xe8(%rbp)
    0.00 :   2ac9e6:       movq   $0x0,-0xe0(%rbp)
    0.00 :   2ac9f1:       movq   $0x0,-0xd8(%rbp)
    0.00 :   2ac9fc:       movq   $0x0,-0xd0(%rbp)
    0.00 :   2aca07:       mov    %rax,-0x248(%rbp)
    0.00 :   2aca0e:       callq  2a8b00 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)>
    0.00 :   2aca13:       cmpq   $0x0,-0x210(%rbp)
    0.00 :   2aca1b:       je     2acb40 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x390>
    0.00 :   2aca21:       mov    $0x97,%r8d
    0.00 :   2aca27:       lea    0x59e252(%rip),%rcx        # 84ac80 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const::__FUNCTION__>
    0.00 :   2aca2e:       mov    %r14,%rsi
    0.00 :   2aca31:       xor    %edi,%edi
    0.00 :   2aca33:       lea    0x59e186(%rip),%rdx        # 84abc0 <typeinfo name for onnxruntime::Hardmax<float>+0x1a0>
    0.00 :   2aca3a:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   2aca3f:       mov    -0x210(%rbp),%rax
    0.00 :   2aca46:       mov    -0xe0(%rbp),%rdi
    0.00 :   2aca4d:       mov    %rax,0x0(%r13)
         :            if (__p)
    0.00 :   2aca51:       test   %rdi,%rdi
    0.00 :   2aca54:       je     2aca5b <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x2ab>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2aca56:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2aca5b:       mov    -0xf8(%rbp),%rdi
         :            if (__p)
    0.00 :   2aca62:       test   %rdi,%rdi
    0.00 :   2aca65:       je     2aca6c <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x2bc>
    0.00 :   2aca67:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2aca6c:       mov    -0x110(%rbp),%rdi
         :            if (__p)
    0.00 :   2aca73:       test   %rdi,%rdi
    0.00 :   2aca76:       je     2aca7d <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x2cd>
    0.00 :   2aca78:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2aca7d:       mov    -0x140(%rbp),%rdi
         :            if (__p)
    0.00 :   2aca84:       test   %rdi,%rdi
    0.00 :   2aca87:       je     2aca8e <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x2de>
    0.00 :   2aca89:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2aca8e:       mov    -0x158(%rbp),%rdi
         :            if (__p)
    0.00 :   2aca95:       test   %rdi,%rdi
    0.00 :   2aca98:       je     2aca9f <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x2ef>
    0.00 :   2aca9a:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2aca9f:       mov    -0x170(%rbp),%rdi
         :            if (__p)
    0.00 :   2acaa6:       test   %rdi,%rdi
    0.00 :   2acaa9:       je     2acab0 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x300>
    0.00 :   2acaab:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2acab0:       mov    -0x188(%rbp),%rdi
         :            if (__p)
    0.00 :   2acab7:       test   %rdi,%rdi
    0.00 :   2acaba:       je     2acac1 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x311>
    0.00 :   2acabc:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2acac1:       mov    -0x1a0(%rbp),%rdi
         :            if (__p)
    0.00 :   2acac8:       test   %rdi,%rdi
    0.00 :   2acacb:       je     2acad2 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x322>
    0.00 :   2acacd:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2acad2:       mov    -0x1b8(%rbp),%rdi
         :            if (__p)
    0.00 :   2acad9:       test   %rdi,%rdi
    0.00 :   2acadc:       je     2acae3 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x333>
    0.00 :   2acade:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2acae3:       mov    -0x1d0(%rbp),%rdi
         :            if (__p)
    0.00 :   2acaea:       test   %rdi,%rdi
    0.00 :   2acaed:       je     2acaf4 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x344>
    0.00 :   2acaef:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2acaf4:       mov    -0x38(%rbp),%rbx
    0.00 :   2acaf8:       xor    %fs:0x28,%rbx
    0.00 :   2acb01:       mov    %r13,%rax
    0.00 :   2acb04:       jne    2acd6d <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x5bd>
    0.00 :   2acb0a:       lea    -0x28(%rbp),%rsp
    0.00 :   2acb0e:       pop    %rbx
    0.00 :   2acb0f:       pop    %r12
    0.00 :   2acb11:       pop    %r13
    0.00 :   2acb13:       pop    %r14
    0.00 :   2acb15:       pop    %r15
    0.00 :   2acb17:       pop    %rbp
    0.00 :   2acb18:       retq
    0.00 :   2acb19:       nopl   0x0(%rax)
    0.00 :   2acb20:       xor    %r9d,%r9d
    0.00 :   2acb23:       movb   $0x0,-0x228(%rbp)
    0.00 :   2acb2a:       jmpq   2ac857 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0xa7>
    0.00 :   2acb2f:       nop
    0.00 :   2acb30:       xor    %r8d,%r8d
    0.00 :   2acb33:       movb   $0x0,-0x229(%rbp)
    0.00 :   2acb3a:       jmpq   2ac832 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x82>
    0.00 :   2acb3f:       nop
    0.00 :   2acb40:       mov    -0x248(%rbp),%rax
    0.00 :   2acb47:       mov    -0x240(%rbp),%rdi
    0.00 :   2acb4e:       xor    %esi,%esi
    0.00 :   2acb50:       lea    0xb0(%rax),%rdx
    0.00 :   2acb57:       callq  5c7e50 <onnxruntime::OpKernelContext::Output(int, onnxruntime::TensorShape const&)>
    0.00 :   2acb5c:       lea    0x18(%rax),%rdi
    0.00 :   2acb60:       mov    %rax,-0x258(%rbp)
    0.00 :   2acb67:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   2acb6c:       test   %rax,%rax
    0.00 :   2acb6f:       jne    2acbb0 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x400>
    0.00 :   2acb71:       movq   $0x0,0x0(%r13)
         :            constexpr _Head_base()
    0.00 :   2acb79:       mov    -0xe0(%rbp),%rdi
    0.00 :   2acb80:       jmpq   2aca51 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x2a1>
    0.00 :   2acb85:       nopl   (%rax)
    0.00 :   2acb88:       mov    -0x240(%rbp),%rdi
    0.00 :   2acb8f:       mov    $0x1,%esi
    0.00 :   2acb94:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   2acb99:       mov    %rax,%r15
    0.00 :   2acb9c:       lea    0x18(%rax),%rcx
    0.00 :   2acba0:       test   %rax,%rax
    0.00 :   2acba3:       jne    2ac80a <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x5a>
    0.00 :   2acba9:       jmpq   2ac803 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x53>
    0.00 :   2acbae:       xchg   %ax,%ax
    0.00 :   2acbb0:       mov    0x30(%r12),%rax
    0.00 :   2acbb5:       cmpl   $0x1,0x8(%rax)
    0.00 :   2acbb9:       jne    2acf16 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x766>
   41.13 :   2acbbf:       mov    (%r12),%rax
    0.00 :   2acbc3:       mov    %rax,-0x240(%rbp)
    0.00 :   2acbca:       mov    0x50(%r12),%rax
    0.00 :   2acbcf:       mov    %rax,-0x250(%rbp)
    0.00 :   2acbd6:       test   %r15,%r15
    0.00 :   2acbd9:       je     2acbf3 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x443>
    0.00 :   2acbdb:       mov    0x30(%r15),%rax
    0.00 :   2acbdf:       cmpl   $0x1,0x8(%rax)
    0.00 :   2acbe3:       jne    2ace44 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x694>
    0.00 :   2acbe9:       mov    0x50(%r15),%rax
    0.00 :   2acbed:       add    (%r15),%rax
    0.00 :   2acbf0:       mov    %rax,%r15
    0.00 :   2acbf3:       mov    -0x258(%rbp),%rax
    0.00 :   2acbfa:       mov    0x30(%rax),%rax
    0.00 :   2acbfe:       cmpl   $0x1,0x8(%rax)
    0.00 :   2acc02:       jne    2acd72 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x5c2>
    0.00 :   2acc08:       mov    -0x258(%rbp),%rax
    0.00 :   2acc0f:       mov    -0xe0(%rbp),%rdi
    0.00 :   2acc16:       mov    (%rax),%rsi
    0.00 :   2acc19:       mov    0x50(%rax),%r14
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2acc1d:       mov    -0xd8(%rbp),%rax
    0.00 :   2acc24:       mov    %rsi,-0x258(%rbp)
    0.00 :   2acc2b:       sub    %rdi,%rax
    0.00 :   2acc2e:       sar    $0x3,%rax
    0.00 :   2acc32:       mov    %rax,-0x260(%rbp)
    0.00 :   2acc39:       je     2acd60 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x5b0>
    0.00 :   2acc3f:       cmpb   $0x1,-0x228(%rbp)
   58.87 :   2acc46:       movq   $0x0,-0x228(%rbp)
    0.00 :   2acc51:       sbb    %eax,%eax
    0.00 :   2acc53:       add    $0x70,%eax
    0.00 :   2acc56:       cmpb   $0x1,-0x229(%rbp)
    0.00 :   2acc5d:       sbb    %r12d,%r12d
    0.00 :   2acc60:       mov    %eax,-0x230(%rbp)
    0.00 :   2acc66:       add    $0x70,%r12d
    0.00 :   2acc6a:       jmp    2accbb <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x50b>
    0.00 :   2acc6c:       nopl   0x0(%rax)
    0.00 :   2acc70:       pushq  -0x238(%rbp)
    0.00 :   2acc76:       cmpb   $0x0,-0x229(%rbp)
    0.00 :   2acc7d:       pxor   %xmm1,%xmm1
    0.00 :   2acc81:       mov    %r12d,%edi
    0.00 :   2acc84:       push   %rdx
    0.00 :   2acc85:       push   %rax
    0.00 :   2acc86:       push   %r9
    0.00 :   2acc88:       mov    %rsi,%r9
    0.00 :   2acc8b:       cmove  %rcx,%r9
    0.00 :   2acc8f:       callq  6a8f50 <MlasGemm(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, float, float*, unsigned long, onnxruntime::concurrency::ThreadPool*)>
    0.00 :   2acc94:       addq   $0x1,-0x228(%rbp)
    0.00 :   2acc9c:       add    $0x20,%rsp
    0.00 :   2acca0:       mov    -0x228(%rbp),%rax
    0.00 :   2acca7:       mov    -0xe0(%rbp),%rdi
    0.00 :   2accae:       cmp    %rax,-0x260(%rbp)
    0.00 :   2accb5:       je     2acd60 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x5b0>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   2accbb:       mov    -0x228(%rbp),%r10
    0.00 :   2accc2:       mov    -0x250(%rbp),%r11
    0.00 :   2accc9:       mov    0x38(%rbx),%r9
    0.00 :   2acccd:       movss  0x40(%rbx),%xmm0
    0.00 :   2accd2:       mov    (%rdi,%r10,8),%rax
    0.00 :   2accd6:       mov    -0x110(%rbp),%rdi
    0.00 :   2accdd:       mov    -0x128(%rbp),%rsi
    0.00 :   2acce4:       mov    -0x120(%rbp),%rdx
    0.00 :   2acceb:       mov    (%rdi,%r10,8),%rdi
    0.00 :   2accef:       lea    (%r14,%rax,4),%rax
    0.00 :   2accf3:       mov    -0x118(%rbp),%rcx
    0.00 :   2accfa:       add    -0x258(%rbp),%rax
    0.00 :   2acd01:       lea    (%r11,%rdi,4),%r8
    0.00 :   2acd05:       add    -0x240(%rbp),%r8
    0.00 :   2acd0c:       test   %r9,%r9
    0.00 :   2acd0f:       jne    2acc70 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x4c0>
    0.00 :   2acd15:       sub    $0x8,%rsp
    0.00 :   2acd19:       mov    -0x228(%rbp),%rdi
    0.00 :   2acd20:       mov    %r8,%r9
    0.00 :   2acd23:       mov    %rcx,%r8
    0.00 :   2acd26:       pushq  -0x238(%rbp)
    0.00 :   2acd2c:       mov    %rdx,%rcx
    0.00 :   2acd2f:       mov    %rsi,%rdx
    0.00 :   2acd32:       pxor   %xmm1,%xmm1
    0.00 :   2acd36:       mov    -0x230(%rbp),%esi
    0.00 :   2acd3c:       push   %rax
    0.00 :   2acd3d:       mov    -0xf8(%rbp),%rax
    0.00 :   2acd44:       mov    (%rax,%rdi,8),%rax
    0.00 :   2acd48:       mov    %r12d,%edi
    0.00 :   2acd4b:       lea    (%r15,%rax,4),%rax
    0.00 :   2acd4f:       push   %rax
    0.00 :   2acd50:       callq  581cc0 <void onnxruntime::math::Gemm<float, onnxruntime::concurrency::ThreadPool>(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, long, long, long, float, float const*, float const*, float, float*, onnxruntime::concurrency::ThreadPool*)>
    0.00 :   2acd55:       jmpq   2acc94 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x4e4>
    0.00 :   2acd5a:       nopw   0x0(%rax,%rax,1)
    0.00 :   2acd60:       movq   $0x0,0x0(%r13)
    0.00 :   2acd68:       jmpq   2aca51 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const+0x2a1>
    0.00 :   2acd6d:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   2acd72:       mov    $0xa0,%edi
    0.00 :   2acd77:       lea    -0xc0(%rbp),%r13
    0.00 :   2acd7e:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2acd83:       mov    %r13,%rdi
    0.00 :   2acd86:       lea    -0x220(%rbp),%rcx
    0.00 :   2acd8d:       mov    %r14,%rsi
    0.00 :   2acd90:       mov    %rax,%r12
    0.00 :   2acd93:       lea    0x578a71(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2acd9a:       lea    -0x218(%rbp),%rdx
    0.00 :   2acda1:       mov    %rax,-0x220(%rbp)
    0.00 :   2acda8:       lea    0x578a59(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2acdaf:       mov    %rax,-0x218(%rbp)
    0.00 :   2acdb6:       lea    0x578a34(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2acdbd:       mov    %rax,-0x210(%rbp)
    0.00 :   2acdc4:       mov    -0x258(%rbp),%rax
    0.00 :   2acdcb:       lea    0x30(%rax),%r8
    0.00 :   2acdcf:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2acdd4:       mov    %r14,%rdi
    0.00 :   2acdd7:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2acddc:       lea    -0xa0(%rbp),%rbx
    0.00 :   2acde3:       mov    %r14,%r8
    0.00 :   2acde6:       lea    0x59de13(%rip),%rcx        # 84ac00 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   2acded:       mov    $0x83,%edx
    0.00 :   2acdf2:       lea    0x578a17(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2acdf9:       mov    %rbx,%rdi
    0.00 :   2acdfc:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2ace01:       mov    %r13,%rcx
    0.00 :   2ace04:       lea    0x578a45(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2ace0b:       mov    %rbx,%rsi
    0.00 :   2ace0e:       mov    %r12,%rdi
    0.00 :   2ace11:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2ace16:       mov    %rbx,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   2ace19:       add    $0x10,%r13
    0.00 :   2ace1d:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ace22:       mov    %r14,%rdi
    0.00 :   2ace25:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ace2a:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ace31:       cmp    %r13,%rdi
    0.00 :   2ace34:       je     79ae4 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0xb2>
    0.00 :   2ace3a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ace3f:       jmpq   79ae4 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0xb2>
    0.00 :   2ace44:       mov    $0xa0,%edi
    0.00 :   2ace49:       lea    -0xc0(%rbp),%r13
    0.00 :   2ace50:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2ace55:       mov    %r13,%rdi
    0.00 :   2ace58:       lea    0x30(%r15),%r8
    0.00 :   2ace5c:       mov    %r14,%rsi
    0.00 :   2ace5f:       mov    %rax,-0x228(%rbp)
    0.00 :   2ace66:       mov    %rax,%r12
    0.00 :   2ace69:       lea    0x57899b(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2ace70:       lea    -0x220(%rbp),%rcx
    0.00 :   2ace77:       mov    %rax,-0x220(%rbp)
    0.00 :   2ace7e:       lea    0x578983(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2ace85:       lea    -0x218(%rbp),%rdx
    0.00 :   2ace8c:       mov    %rax,-0x218(%rbp)
    0.00 :   2ace93:       lea    0x578957(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2ace9a:       mov    %rax,-0x210(%rbp)
    0.00 :   2acea1:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2acea6:       mov    %r14,%rdi
    0.00 :   2acea9:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2aceae:       lea    -0xa0(%rbp),%rbx
    0.00 :   2aceb5:       mov    %r14,%r8
    0.00 :   2aceb8:       lea    0x59dd81(%rip),%rcx        # 84ac40 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2acebf:       mov    $0x97,%edx
    0.00 :   2acec4:       lea    0x578945(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2acecb:       mov    %rbx,%rdi
    0.00 :   2acece:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2aced3:       mov    %r13,%rcx
    0.00 :   2aced6:       lea    0x578973(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2acedd:       mov    %rbx,%rsi
    0.00 :   2acee0:       mov    %r12,%rdi
    0.00 :   2acee3:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2acee8:       mov    %rbx,%rdi
    0.00 :   2aceeb:       add    $0x10,%r13
    0.00 :   2aceef:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2acef4:       mov    %r14,%rdi
    0.00 :   2acef7:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2acefc:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2acf03:       cmp    %r13,%rdi
    0.00 :   2acf06:       je     79a32 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]>
    0.00 :   2acf0c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2acf11:       jmpq   79a32 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]>
    0.00 :   2acf16:       mov    $0xa0,%edi
    0.00 :   2acf1b:       lea    -0xc0(%rbp),%r13
    0.00 :   2acf22:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2acf27:       mov    %r13,%rdi
    0.00 :   2acf2a:       lea    0x30(%r12),%r8
    0.00 :   2acf2f:       mov    %r14,%rsi
    0.00 :   2acf32:       mov    %rax,%r15
    0.00 :   2acf35:       lea    0x5788cf(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2acf3c:       lea    -0x220(%rbp),%rcx
    0.00 :   2acf43:       mov    %rax,-0x220(%rbp)
    0.00 :   2acf4a:       lea    0x5788b7(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2acf51:       lea    -0x218(%rbp),%rdx
    0.00 :   2acf58:       mov    %rax,-0x218(%rbp)
    0.00 :   2acf5f:       lea    0x57888b(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2acf66:       mov    %rax,-0x210(%rbp)
    0.00 :   2acf6d:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2acf72:       mov    %r14,%rdi
    0.00 :   2acf75:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2acf7a:       lea    -0xa0(%rbp),%rbx
    0.00 :   2acf81:       mov    %r14,%r8
    0.00 :   2acf84:       lea    0x59dcb5(%rip),%rcx        # 84ac40 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2acf8b:       mov    $0x97,%edx
    0.00 :   2acf90:       lea    0x578879(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2acf97:       mov    %rbx,%rdi
    0.00 :   2acf9a:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2acf9f:       mov    %r13,%rcx
    0.00 :   2acfa2:       lea    0x5788a7(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2acfa9:       mov    %rbx,%rsi
    0.00 :   2acfac:       mov    %r15,%rdi
    0.00 :   2acfaf:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2acfb4:       mov    %rbx,%rdi
    0.00 :   2acfb7:       add    $0x10,%r13
    0.00 :   2acfbb:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2acfc0:       mov    %r14,%rdi
    0.00 :   2acfc3:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2acfc8:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2acfcf:       cmp    %r13,%rdi
    0.00 :   2acfd2:       je     79a99 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x67>
    0.00 :   2acfd8:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2acfdd:       jmpq   79a99 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x67>
    0.00 :   2acfe2:       mov    %rax,%r12
    0.00 :   2acfe5:       jmpq   79a63 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x31>
    0.00 :   2acfea:       mov    %rax,%r12
    0.00 :   2acfed:       jmpq   79aaf <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x7d>
    0.00 :   2acff2:       mov    %rax,%rbx
    0.00 :   2acff5:       jmpq   79aba <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x88>
    0.00 :   2acffa:       mov    %rax,%rbx
    0.00 :   2acffd:       jmpq   79ac2 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x90>
    0.00 :   2ad002:       mov    %rax,%rbx
    0.00 :   2ad005:       jmpq   79a6e <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x3c>
    0.00 :   2ad00a:       mov    %rax,%rbx
    0.00 :   2ad00d:       jmpq   79a76 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x44>
    0.00 :   2ad012:       mov    %rax,%r15
    0.00 :   2ad015:       jmpq   79afa <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0xc8>
    0.00 :   2ad01a:       mov    %rax,%rbx
    0.00 :   2ad01d:       jmpq   79b05 <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0xd3>
    0.00 :   2ad022:       mov    %rax,%rbx
    0.00 :   2ad025:       jmpq   79b0d <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0xdb>
    0.00 :   2ad02a:       jmpq   79a4c <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0x1a>
    0.00 :   2ad02f:       mov    %rax,%rbx
    0.00 :   2ad032:       jmpq   79b2f <onnxruntime::MatMul<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.258]+0xfd>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000a9c50 <explicit_bzero@@GLIBC_2.25+0x1560>:
    0.00 :   a9c50:       mov    %edi,%eax
   39.59 :   a9c52:       xor    %edx,%edx
    0.00 :   a9c54:       pxor   %xmm7,%xmm7
    0.00 :   a9c58:       or     %esi,%eax
    0.00 :   a9c5a:       and    $0xfff,%eax
    0.00 :   a9c5f:       cmp    $0xfc0,%eax
    0.00 :   a9c64:       jg     a9ee2 <explicit_bzero@@GLIBC_2.25+0x17f2>
    0.00 :   a9c6a:       movdqu (%rdi),%xmm1
   60.41 :   a9c6e:       movdqu (%rsi),%xmm0
    0.00 :   a9c72:       pcmpeqb %xmm1,%xmm0
    0.00 :   a9c76:       pminub %xmm1,%xmm0
    0.00 :   a9c7a:       pxor   %xmm1,%xmm1
    0.00 :   a9c7e:       pcmpeqb %xmm1,%xmm0
    0.00 :   a9c82:       pmovmskb %xmm0,%eax
    0.00 :   a9c86:       test   %rax,%rax
    0.00 :   a9c89:       je     a9ca0 <explicit_bzero@@GLIBC_2.25+0x15b0>
    0.00 :   a9c8b:       bsf    %rax,%rdx
    0.00 :   a9c8f:       movzbl (%rdi,%rdx,1),%eax
    0.00 :   a9c93:       movzbl (%rsi,%rdx,1),%edx
    0.00 :   a9c97:       sub    %edx,%eax
    0.00 :   a9c99:       retq
    0.00 :   a9c9a:       nopw   0x0(%rax,%rax,1)
    0.00 :   a9ca0:       movdqu 0x10(%rdi),%xmm6
    0.00 :   a9ca5:       movdqu 0x10(%rsi),%xmm3
    0.00 :   a9caa:       movdqu 0x20(%rdi),%xmm5
    0.00 :   a9caf:       pcmpeqb %xmm6,%xmm3
    0.00 :   a9cb3:       movdqu 0x20(%rsi),%xmm2
    0.00 :   a9cb8:       pminub %xmm6,%xmm3
    0.00 :   a9cbc:       pcmpeqb %xmm1,%xmm3
    0.00 :   a9cc0:       movdqu 0x30(%rdi),%xmm4
    0.00 :   a9cc5:       pcmpeqb %xmm5,%xmm2
    0.00 :   a9cc9:       pmovmskb %xmm3,%edx
    0.00 :   a9ccd:       movdqu 0x30(%rsi),%xmm0
    0.00 :   a9cd2:       pminub %xmm5,%xmm2
    0.00 :   a9cd6:       pcmpeqb %xmm1,%xmm2
    0.00 :   a9cda:       pcmpeqb %xmm4,%xmm0
    0.00 :   a9cde:       pmovmskb %xmm2,%eax
    0.00 :   a9ce2:       shl    $0x10,%rdx
    0.00 :   a9ce6:       pminub %xmm4,%xmm0
    0.00 :   a9cea:       pcmpeqb %xmm1,%xmm0
    0.00 :   a9cee:       shl    $0x20,%rax
    0.00 :   a9cf2:       or     %rdx,%rax
    0.00 :   a9cf5:       pmovmskb %xmm0,%ecx
    0.00 :   a9cf9:       mov    %rcx,%rdx
    0.00 :   a9cfc:       shl    $0x30,%rdx
    0.00 :   a9d00:       or     %rdx,%rax
    0.00 :   a9d03:       jne    a9c8b <explicit_bzero@@GLIBC_2.25+0x159b>
    0.00 :   a9d05:       lea    0x40(%rdi),%rdx
    0.00 :   a9d09:       mov    $0x1000,%ecx
    0.00 :   a9d0e:       pxor   %xmm9,%xmm9
    0.00 :   a9d13:       and    $0xffffffffffffffc0,%rdx
    0.00 :   a9d17:       sub    %rdi,%rdx
    0.00 :   a9d1a:       lea    (%rdi,%rdx,1),%rax
    0.00 :   a9d1e:       add    %rsi,%rdx
    0.00 :   a9d21:       mov    %rdx,%rsi
    0.00 :   a9d24:       and    $0xfff,%esi
    0.00 :   a9d2a:       sub    %rsi,%rcx
    0.00 :   a9d2d:       shr    $0x6,%rcx
    0.00 :   a9d31:       mov    %rcx,%rsi
    0.00 :   a9d34:       jmp    a9d48 <explicit_bzero@@GLIBC_2.25+0x1658>
    0.00 :   a9d36:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   a9d40:       add    $0x40,%rax
    0.00 :   a9d44:       add    $0x40,%rdx
    0.00 :   a9d48:       test   %rsi,%rsi
    0.00 :   a9d4b:       lea    -0x1(%rsi),%rsi
    0.00 :   a9d4f:       je     a9e10 <explicit_bzero@@GLIBC_2.25+0x1720>
    0.00 :   a9d55:       movdqu (%rdx),%xmm0
    0.00 :   a9d59:       movdqu 0x10(%rdx),%xmm1
    0.00 :   a9d5e:       movdqa (%rax),%xmm2
    0.00 :   a9d62:       movdqa 0x10(%rax),%xmm3
    0.00 :   a9d67:       pcmpeqb %xmm2,%xmm0
    0.00 :   a9d6b:       movdqu 0x20(%rdx),%xmm5
    0.00 :   a9d70:       pcmpeqb %xmm3,%xmm1
    0.00 :   a9d74:       pminub %xmm2,%xmm0
    0.00 :   a9d78:       movdqu 0x30(%rdx),%xmm6
    0.00 :   a9d7d:       pminub %xmm3,%xmm1
    0.00 :   a9d81:       movdqa 0x20(%rax),%xmm2
    0.00 :   a9d86:       pminub %xmm1,%xmm0
    0.00 :   a9d8a:       movdqa 0x30(%rax),%xmm3
    0.00 :   a9d8f:       pcmpeqb %xmm2,%xmm5
    0.00 :   a9d93:       pcmpeqb %xmm3,%xmm6
    0.00 :   a9d97:       pminub %xmm2,%xmm5
    0.00 :   a9d9b:       pminub %xmm3,%xmm6
    0.00 :   a9d9f:       pminub %xmm5,%xmm0
    0.00 :   a9da3:       pminub %xmm6,%xmm0
    0.00 :   a9da7:       pcmpeqb %xmm7,%xmm0
    0.00 :   a9dab:       pmovmskb %xmm0,%ecx
    0.00 :   a9daf:       test   %ecx,%ecx
    0.00 :   a9db1:       je     a9d40 <explicit_bzero@@GLIBC_2.25+0x1650>
    0.00 :   a9db3:       pcmpeqb %xmm7,%xmm5
    0.00 :   a9db7:       movdqu (%rdx),%xmm0
    0.00 :   a9dbb:       pcmpeqb %xmm7,%xmm1
    0.00 :   a9dbf:       movdqa (%rax),%xmm2
    0.00 :   a9dc3:       pcmpeqb %xmm2,%xmm0
    0.00 :   a9dc7:       pminub %xmm2,%xmm0
    0.00 :   a9dcb:       pcmpeqb %xmm7,%xmm6
    0.00 :   a9dcf:       pcmpeqb %xmm7,%xmm0
    0.00 :   a9dd3:       pmovmskb %xmm1,%ecx
    0.00 :   a9dd7:       pmovmskb %xmm5,%r8d
    0.00 :   a9ddc:       pmovmskb %xmm0,%edi
    0.00 :   a9de0:       shl    $0x10,%rcx
    0.00 :   a9de4:       shl    $0x20,%r8
    0.00 :   a9de8:       pmovmskb %xmm6,%esi
    0.00 :   a9dec:       or     %r8,%rcx
    0.00 :   a9def:       or     %rdi,%rcx
    0.00 :   a9df2:       shl    $0x30,%rsi
    0.00 :   a9df6:       or     %rsi,%rcx
    0.00 :   a9df9:       bsf    %rcx,%rcx
    0.00 :   a9dfd:       movzbl (%rax,%rcx,1),%eax
    0.00 :   a9e01:       movzbl (%rdx,%rcx,1),%edx
    0.00 :   a9e05:       sub    %edx,%eax
    0.00 :   a9e07:       retq
    0.00 :   a9e08:       nopl   0x0(%rax,%rax,1)
    0.00 :   a9e10:       xor    %r10,%r10
    0.00 :   a9e13:       mov    %rdx,%r9
    0.00 :   a9e16:       and    $0x3f,%r9
    0.00 :   a9e1a:       sub    %r9,%r10
    0.00 :   a9e1d:       movdqa (%rdx,%r10,1),%xmm0
    0.00 :   a9e23:       movdqa 0x10(%rdx,%r10,1),%xmm1
    0.00 :   a9e2a:       movdqu (%rax,%r10,1),%xmm2
    0.00 :   a9e30:       movdqu 0x10(%rax,%r10,1),%xmm3
    0.00 :   a9e37:       pcmpeqb %xmm2,%xmm0
    0.00 :   a9e3b:       movdqa 0x20(%rdx,%r10,1),%xmm5
    0.00 :   a9e42:       pcmpeqb %xmm3,%xmm1
    0.00 :   a9e46:       pminub %xmm2,%xmm0
    0.00 :   a9e4a:       movdqa 0x30(%rdx,%r10,1),%xmm6
    0.00 :   a9e51:       pminub %xmm3,%xmm1
    0.00 :   a9e55:       movdqu 0x20(%rax,%r10,1),%xmm2
    0.00 :   a9e5c:       movdqu 0x30(%rax,%r10,1),%xmm3
    0.00 :   a9e63:       pcmpeqb %xmm2,%xmm5
    0.00 :   a9e67:       pcmpeqb %xmm3,%xmm6
    0.00 :   a9e6b:       pminub %xmm2,%xmm5
    0.00 :   a9e6f:       pminub %xmm3,%xmm6
    0.00 :   a9e73:       pcmpeqb %xmm7,%xmm0
    0.00 :   a9e77:       pcmpeqb %xmm7,%xmm1
    0.00 :   a9e7b:       pcmpeqb %xmm7,%xmm5
    0.00 :   a9e7f:       pcmpeqb %xmm7,%xmm6
    0.00 :   a9e83:       pmovmskb %xmm1,%ecx
    0.00 :   a9e87:       pmovmskb %xmm5,%r8d
    0.00 :   a9e8c:       pmovmskb %xmm0,%edi
    0.00 :   a9e90:       shl    $0x10,%rcx
    0.00 :   a9e94:       shl    $0x20,%r8
    0.00 :   a9e98:       pmovmskb %xmm6,%esi
    0.00 :   a9e9c:       or     %r8,%rdi
    0.00 :   a9e9f:       or     %rcx,%rdi
    0.00 :   a9ea2:       shl    $0x30,%rsi
    0.00 :   a9ea6:       or     %rsi,%rdi
    0.00 :   a9ea9:       mov    %r9,%rcx
    0.00 :   a9eac:       mov    $0x3f,%rsi
    0.00 :   a9eb3:       shr    %cl,%rdi
    0.00 :   a9eb6:       test   %rdi,%rdi
    0.00 :   a9eb9:       je     a9d55 <explicit_bzero@@GLIBC_2.25+0x1665>
    0.00 :   a9ebf:       bsf    %rdi,%rcx
    0.00 :   a9ec3:       movzbl (%rax,%rcx,1),%eax
    0.00 :   a9ec7:       movzbl (%rdx,%rcx,1),%edx
    0.00 :   a9ecb:       sub    %edx,%eax
    0.00 :   a9ecd:       retq
    0.00 :   a9ece:       xchg   %ax,%ax
    0.00 :   a9ed0:       cmp    %cl,%al
    0.00 :   a9ed2:       jne    a9ef0 <explicit_bzero@@GLIBC_2.25+0x1800>
    0.00 :   a9ed4:       add    $0x1,%rdx
    0.00 :   a9ed8:       cmp    $0x40,%rdx
    0.00 :   a9edc:       je     a9d05 <explicit_bzero@@GLIBC_2.25+0x1615>
    0.00 :   a9ee2:       movzbl (%rdi,%rdx,1),%eax
    0.00 :   a9ee6:       movzbl (%rsi,%rdx,1),%ecx
    0.00 :   a9eea:       test   %al,%al
    0.00 :   a9eec:       jne    a9ed0 <explicit_bzero@@GLIBC_2.25+0x17e0>
    0.00 :   a9eee:       xor    %eax,%eax
    0.00 :   a9ef0:       sub    %ecx,%eax
    0.00 :   a9ef2:       retq
 Percent |	Source code & Disassembly of psmouse.ko for cache-misses (4 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000001000 <psmouse_interrupt>:
         :          psmouse_interrupt():
    0.00 :   1000:       callq  1005 <psmouse_interrupt+0x5>
    0.00 :   1005:       push   %rbp
   24.84 :   1006:       mov    %rsp,%rbp
    0.00 :   1009:       push   %r13
    0.00 :   100b:       push   %r12
    0.00 :   100d:       push   %rbx
    0.00 :   100e:       mov    0x1d0(%rdi),%rbx
   25.58 :   1015:       mov    0x108(%rbx),%eax
   25.48 :   101b:       test   %eax,%eax
    0.00 :   101d:       je     10c3 <psmouse_interrupt+0xc3>
    0.00 :   1023:       test   $0x1,%dl
    0.00 :   1026:       mov    %esi,%r13d
    0.00 :   1029:       mov    %rdi,%r12
    0.00 :   102c:       jne    10cf <psmouse_interrupt+0xcf>
    0.00 :   1032:       test   $0x2,%dl
    0.00 :   1035:       jne    12a6 <psmouse_interrupt+0x2a6>
    0.00 :   103b:       and    $0x8,%edx
    0.00 :   103e:       jne    10e3 <psmouse_interrupt+0xe3>
    0.00 :   1044:       mov    0x50(%rbx),%rax
   24.10 :   1048:       test   $0x1,%al
    0.00 :   104a:       jne    12ea <psmouse_interrupt+0x2ea>
    0.00 :   1050:       test   $0x2,%al
    0.00 :   1052:       jne    1308 <psmouse_interrupt+0x308>
    0.00 :   1058:       lea    0x158(%r12),%rdi
    0.00 :   1060:       xor    %edx,%edx
    0.00 :   1062:       xor    %esi,%esi
    0.00 :   1064:       callq  1069 <psmouse_interrupt+0x69>
    0.00 :   1069:       mov    0x108(%rbx),%edx
    0.00 :   106f:       cmp    $0x2,%edx
    0.00 :   1072:       jbe    10c3 <psmouse_interrupt+0xc3>
    0.00 :   1074:       movzbl 0xe1(%rbx),%r8d
    0.00 :   107c:       cmp    $0x4,%edx
    0.00 :   107f:       mov    %r8d,%eax
    0.00 :   1082:       je     112b <psmouse_interrupt+0x12b>
    0.00 :   1088:       add    $0x1,%eax
    0.00 :   108b:       movslq %r8d,%r8
    0.00 :   108e:       mov    %al,0xe1(%rbx)
    0.00 :   1094:       mov    %r13b,0xd8(%rbx,%r8,1)
    0.00 :   109c:       cmpb   $0xaa,0xd8(%rbx)
    0.00 :   10a3:       jne    10ad <psmouse_interrupt+0xad>
    0.00 :   10a5:       cmp    $0x2,%al
    0.00 :   10a7:       jbe    117b <psmouse_interrupt+0x17b>
    0.00 :   10ad:       mov    0x0(%rip),%rax        # 10b4 <psmouse_interrupt+0xb4>
    0.00 :   10b4:       mov    %rbx,%rdi
    0.00 :   10b7:       mov    %rax,0xf0(%rbx)
    0.00 :   10be:       callq  b60 <psmouse_handle_byte>
    0.00 :   10c3:       pop    %rbx
    0.00 :   10c4:       mov    $0x1,%eax
    0.00 :   10c9:       pop    %r12
    0.00 :   10cb:       pop    %r13
    0.00 :   10cd:       pop    %rbp
    0.00 :   10ce:       retq
    0.00 :   10cf:       cmp    $0x4,%eax
    0.00 :   10d2:       je     13b1 <psmouse_interrupt+0x3b1>
    0.00 :   10d8:       lea    0x10(%rbx),%rdi
    0.00 :   10dc:       callq  10e1 <psmouse_interrupt+0xe1>
    0.00 :   10e1:       jmp    10c3 <psmouse_interrupt+0xc3>
    0.00 :   10e3:       movzbl 0xe3(%rbx),%eax
    0.00 :   10ea:       test   %al,%al
    0.00 :   10ec:       je     1122 <psmouse_interrupt+0x122>
    0.00 :   10ee:       cmp    $0x1,%al
    0.00 :   10f0:       jne    1361 <psmouse_interrupt+0x361>
    0.00 :   10f6:       mov    0x8(%rbx),%rdi
    0.00 :   10fa:       movzbl %r13b,%esi
    0.00 :   10fe:       callq  1103 <psmouse_interrupt+0x103>
    0.00 :   1103:       mov    0x8(%rbx),%rdi
    0.00 :   1107:       xor    %ecx,%ecx
    0.00 :   1109:       xor    %edx,%edx
    0.00 :   110b:       xor    %esi,%esi
    0.00 :   110d:       callq  1112 <psmouse_interrupt+0x112>
    0.00 :   1112:       mov    %r13b,0xe4(%rbx)
    0.00 :   1119:       movb   $0x0,0xe3(%rbx)
    0.00 :   1120:       jmp    10c3 <psmouse_interrupt+0xc3>
    0.00 :   1122:       mov    %r13b,0xe3(%rbx)
    0.00 :   1129:       jmp    10c3 <psmouse_interrupt+0xc3>
    0.00 :   112b:       test   %r8b,%r8b
    0.00 :   112e:       je     127b <psmouse_interrupt+0x27b>
    0.00 :   1134:       mov    0x0(%rip),%rcx        # 113b <psmouse_interrupt+0x13b>
    0.00 :   113b:       mov    $0x7d,%edx
    0.00 :   1140:       sub    %rcx,%rdx
    0.00 :   1143:       add    0xf0(%rbx),%rdx
    0.00 :   114a:       js     1387 <psmouse_interrupt+0x387>
    0.00 :   1150:       add    $0x1,%eax
    0.00 :   1153:       movslq %r8d,%r8
    0.00 :   1156:       mov    %al,0xe1(%rbx)
    0.00 :   115c:       mov    %r13b,0xd8(%rbx,%r8,1)
    0.00 :   1164:       cmpb   $0xaa,0xd8(%rbx)
    0.00 :   116b:       jne    10ad <psmouse_interrupt+0xad>
    0.00 :   1171:       cmp    $0x2,%al
    0.00 :   1173:       ja     10ad <psmouse_interrupt+0xad>
    0.00 :   1179:       jmp    1183 <psmouse_interrupt+0x183>
    0.00 :   117b:       cmp    $0x1,%al
    0.00 :   117d:       je     1293 <psmouse_interrupt+0x293>
    0.00 :   1183:       movzbl 0xd9(%rbx),%eax
    0.00 :   118a:       test   %al,%al
    0.00 :   118c:       je     1322 <psmouse_interrupt+0x322>
    0.00 :   1192:       mov    0xd0(%rbx),%rdx
    0.00 :   1199:       cmpl   $0xd,(%rdx)
    0.00 :   119c:       jne    11a6 <psmouse_interrupt+0x1a6>
    0.00 :   119e:       cmp    $0xaa,%al
    0.00 :   11a0:       je     1322 <psmouse_interrupt+0x322>
    0.00 :   11a6:       movb   $0x1,0xe1(%rbx)
    0.00 :   11ad:       mov    %rbx,%rdi
    0.00 :   11b0:       callq  b60 <psmouse_handle_byte>
    0.00 :   11b5:       test   %eax,%eax
    0.00 :   11b7:       jne    10c3 <psmouse_interrupt+0xc3>
    0.00 :   11bd:       movzbl 0xe1(%rbx),%eax
    0.00 :   11c4:       lea    0x1(%rax),%edx
    0.00 :   11c7:       mov    %dl,0xe1(%rbx)
    0.00 :   11cd:       mov    %r13b,0xd8(%rbx,%rax,1)
    0.00 :   11d5:       cmpl   $0x4,0x108(%rbx)
    0.00 :   11dc:       jne    10ad <psmouse_interrupt+0xad>
    0.00 :   11e2:       cmpb   $0x1,0xe1(%rbx)
    0.00 :   11e9:       jne    10ad <psmouse_interrupt+0xad>
    0.00 :   11ef:       mov    0x178(%rbx),%eax
    0.00 :   11f5:       test   %eax,%eax
    0.00 :   11f7:       je     10ad <psmouse_interrupt+0xad>
    0.00 :   11fd:       mov    0x0(%rip),%rdx        # 1204 <psmouse_interrupt+0x204>
    0.00 :   1204:       mov    0xf0(%rbx),%rcx
    0.00 :   120b:       imul   $0xfa,%eax,%eax
    0.00 :   1211:       sub    %rdx,%rcx
    0.00 :   1214:       mov    %rcx,%rdx
    0.00 :   1217:       add    %rax,%rdx
    0.00 :   121a:       jns    10ad <psmouse_interrupt+0xad>
    0.00 :   1220:       movzbl 0xd8(%rbx),%eax
    0.00 :   1227:       mov    0x0(%rip),%rsi        # 122e <psmouse_interrupt+0x22e>
    0.00 :   122e:       lea    0x68(%rbx),%rdx
    0.00 :   1232:       movl   $0x2,0x108(%rbx)
    0.00 :   123c:       movq   $0x0,0xf8(%rbx)
    0.00 :   1247:       xor    %ecx,%ecx
    0.00 :   1249:       movb   $0x0,0xe1(%rbx)
    0.00 :   1250:       movq   $0x0,0x50(%rbx)
    0.00 :   1258:       mov    $0x2000,%edi
    0.00 :   125d:       mov    %al,0xe0(%rbx)
    0.00 :   1263:       mov    0x0(%rip),%rax        # 126a <psmouse_interrupt+0x26a>
    0.00 :   126a:       mov    %rax,0xf0(%rbx)
    0.00 :   1271:       callq  1276 <psmouse_interrupt+0x276>
    0.00 :   1276:       jmpq   10c3 <psmouse_interrupt+0xc3>
    0.00 :   127b:       cmp    $0xaa,%r13b
    0.00 :   127f:       movb   $0x1,0xe1(%rbx)
    0.00 :   1286:       mov    %r13b,0xd8(%rbx)
    0.00 :   128d:       jne    11e2 <psmouse_interrupt+0x1e2>
    0.00 :   1293:       mov    0x0(%rip),%rax        # 129a <psmouse_interrupt+0x29a>
    0.00 :   129a:       mov    %rax,0xf0(%rbx)
    0.00 :   12a1:       jmpq   10c3 <psmouse_interrupt+0xc3>
    0.00 :   12a6:       mov    0xd0(%rbx),%rcx
    0.00 :   12ad:       cmpb   $0x0,0x5(%rcx)
    0.00 :   12b1:       jne    103b <psmouse_interrupt+0x3b>
    0.00 :   12b7:       cmp    $0x4,%eax
    0.00 :   12ba:       jne    10d8 <psmouse_interrupt+0xd8>
    0.00 :   12c0:       mov    $0x0,%rcx
    0.00 :   12c7:       mov    $0x0,%rdx
    0.00 :   12ce:       mov    0x10(%rbx),%rax
    0.00 :   12d2:       mov    $0x0,%rsi
    0.00 :   12d9:       lea    0x158(%rax),%rdi
    0.00 :   12e0:       callq  12e5 <psmouse_interrupt+0x2e5>
    0.00 :   12e5:       jmpq   10d8 <psmouse_interrupt+0xd8>
    0.00 :   12ea:       lea    0x10(%rbx),%rdi
    0.00 :   12ee:       movzbl %r13b,%esi
    0.00 :   12f2:       callq  12f7 <psmouse_interrupt+0x2f7>
    0.00 :   12f7:       test   %al,%al
    0.00 :   12f9:       jne    10c3 <psmouse_interrupt+0xc3>
    0.00 :   12ff:       mov    0x50(%rbx),%rax
    0.00 :   1303:       jmpq   1050 <psmouse_interrupt+0x50>
    0.00 :   1308:       lea    0x10(%rbx),%rdi
    0.00 :   130c:       movzbl %r13b,%esi
    0.00 :   1310:       callq  1315 <psmouse_interrupt+0x315>
    0.00 :   1315:       test   %al,%al
    0.00 :   1317:       je     1058 <psmouse_interrupt+0x58>
    0.00 :   131d:       jmpq   10c3 <psmouse_interrupt+0xc3>
    0.00 :   1322:       mov    0x0(%rip),%rax        # 1329 <psmouse_interrupt+0x329>
    0.00 :   1329:       movl   $0x0,0x108(%rbx)
    0.00 :   1333:       mov    %r12,%rdi
    0.00 :   1336:       movq   $0x0,0xf8(%rbx)
    0.00 :   1341:       movb   $0x0,0xe1(%rbx)
    0.00 :   1348:       movq   $0x0,0x50(%rbx)
    0.00 :   1350:       mov    %rax,0xf0(%rbx)
    0.00 :   1357:       callq  135c <psmouse_interrupt+0x35c>
    0.00 :   135c:       jmpq   10c3 <psmouse_interrupt+0xc3>
    0.00 :   1361:       movzbl %al,%edx
    0.00 :   1364:       mov    0x10(%rbx),%rax
    0.00 :   1368:       mov    $0x0,%rsi
    0.00 :   136f:       lea    0x158(%rax),%rdi
    0.00 :   1376:       callq  137b <psmouse_interrupt+0x37b>
    0.00 :   137b:       movb   $0x0,0xe3(%rbx)
    0.00 :   1382:       jmpq   10c3 <psmouse_interrupt+0xc3>
    0.00 :   1387:       mov    0x10(%rbx),%rax
    0.00 :   138b:       mov    0xc8(%rbx),%rdx
    0.00 :   1392:       lea    0x14c(%rbx),%rcx
    0.00 :   1399:       mov    $0x0,%rsi
    0.00 :   13a0:       lea    0x158(%rax),%rdi
    0.00 :   13a7:       callq  13ac <psmouse_interrupt+0x3ac>
    0.00 :   13ac:       jmpq   1220 <psmouse_interrupt+0x220>
    0.00 :   13b1:       and    $0x2,%dl
    0.00 :   13b4:       mov    $0x0,%rcx
    0.00 :   13bb:       mov    $0x0,%rax
    0.00 :   13c2:       cmove  %rax,%rcx
    0.00 :   13c6:       mov    $0x0,%rdx
    0.00 :   13cd:       jmpq   12ce <psmouse_interrupt+0x2ce>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005b1f40 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const>:
         :            _ZNK11onnxruntime18IExecutionProvider12GetAllocatorEi10OrtMemType():
   66.59 :   5b1f40:       shl    $0x2,%edx
    0.00 :   5b1f43:       add    $0x2,%ecx
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            find(const key_type& __k) const
         :            -> const_iterator
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   5b1f46:       mov    0x30(%rsi),%r8
    0.00 :   5b1f4a:       or     %edx,%ecx
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   5b1f4c:       xor    %edx,%edx
         :
         :            /// Explicit specialization for short.
         :            _Cxx_hashtable_define_trivial_hash(short)
         :
         :            /// Explicit specialization for int.
         :            _Cxx_hashtable_define_trivial_hash(int)
    0.00 :   5b1f4e:       movslq %ecx,%rax
    0.00 :   5b1f51:       div    %r8
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __n, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__n];
    0.00 :   5b1f54:       mov    0x28(%rsi),%rax
    0.00 :   5b1f58:       mov    (%rax,%rdx,8),%r9
   33.41 :   5b1f5c:       mov    %rdx,%r11
         :            if (!__prev_p)
    0.00 :   5b1f5f:       test   %r9,%r9
    0.00 :   5b1f62:       je     5b1fc8 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x88>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   5b1f64:       mov    (%r9),%rsi
    0.00 :   5b1f67:       mov    0x8(%rsi),%r10d
    0.00 :   5b1f6b:       jmp    5b1f8f <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x4f>
    0.00 :   5b1f6d:       nopl   (%rax)
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   5b1f70:       mov    (%rsi),%rax
    0.00 :   5b1f73:       test   %rax,%rax
    0.00 :   5b1f76:       je     5b1fc8 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x88>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   5b1f78:       mov    0x8(%rax),%r10d
         :            { return __num % __den; }
    0.00 :   5b1f7c:       mov    %rsi,%r9
    0.00 :   5b1f7f:       xor    %edx,%edx
    0.00 :   5b1f81:       mov    %rax,%rsi
    0.00 :   5b1f84:       movslq %r10d,%rax
    0.00 :   5b1f87:       div    %r8
    0.00 :   5b1f8a:       cmp    %rdx,%r11
    0.00 :   5b1f8d:       jne    5b1fc8 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x88>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   5b1f8f:       cmp    %ecx,%r10d
    0.00 :   5b1f92:       jne    5b1f70 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x30>
         :            return static_cast<__node_type*>(__before_n->_M_nxt);
    0.00 :   5b1f94:       mov    (%r9),%rax
         :            return __p ? const_iterator(__p) : end();
    0.00 :   5b1f97:       test   %rax,%rax
    0.00 :   5b1f9a:       je     5b1fc8 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x88>
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5b1f9c:       mov    0x10(%rax),%rdx
         :            : _M_pi(__r._M_pi)
    0.00 :   5b1fa0:       mov    0x18(%rax),%rax
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5b1fa4:       mov    %rdx,(%rdi)
         :            : _M_pi(__r._M_pi)
    0.00 :   5b1fa7:       mov    %rax,0x8(%rdi)
         :            if (_M_pi != 0)
    0.00 :   5b1fab:       test   %rax,%rax
    0.00 :   5b1fae:       je     5b1fbf <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0x7f>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5b1fb0:       cmpq   $0x0,0x675f50(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5b1fb8:       je     5b1fe0 <onnxruntime::IExecutionProvider::GetAllocator(int, OrtMemType) const+0xa0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5b1fba:       lock addl $0x1,0x8(%rax)
    0.00 :   5b1fbf:       mov    %rdi,%rax
    0.00 :   5b1fc2:       retq
    0.00 :   5b1fc3:       nopl   0x0(%rax,%rax,1)
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5b1fc8:       movq   $0x0,(%rdi)
    0.00 :   5b1fcf:       mov    %rdi,%rax
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5b1fd2:       movq   $0x0,0x8(%rdi)
    0.00 :   5b1fda:       retq
    0.00 :   5b1fdb:       nopl   0x0(%rax,%rax,1)
         :            { *__mem += __val; }
    0.00 :   5b1fe0:       addl   $0x1,0x8(%rax)
    0.00 :   5b1fe4:       mov    %rdi,%rax
    0.00 :   5b1fe7:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000002a8b00 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)>:
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
    0.00 :   2a8b00:       push   %r15
    0.00 :   2a8b02:       push   %r14
    0.00 :   2a8b04:       push   %r13
    0.00 :   2a8b06:       push   %r12
    0.00 :   2a8b08:       push   %rbp
    0.00 :   2a8b09:       push   %rbx
    0.00 :   2a8b0a:       sub    $0x288,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2a8b11:       mov    0x8(%rcx),%rbp
    0.00 :   2a8b15:       sub    (%rcx),%rbp
    0.00 :   2a8b18:       mov    %r8d,(%rsp)
    0.00 :   2a8b1c:       mov    0x8(%rdx),%r8
    0.00 :   2a8b20:       mov    %rdi,0x18(%rsp)
    0.00 :   2a8b25:       sub    (%rdx),%r8
    0.00 :   2a8b28:       mov    %r9d,0x8(%rsp)
    0.00 :   2a8b2d:       mov    %fs:0x28,%rax
    0.00 :   2a8b36:       mov    %rax,0x278(%rsp)
    0.00 :   2a8b3e:       xor    %eax,%eax
    0.00 :   2a8b40:       sar    $0x3,%rbp
    0.00 :   2a8b44:       sete   %r13b
    0.00 :   2a8b48:       sar    $0x3,%r8
    0.00 :   2a8b4c:       sete   %al
    0.00 :   2a8b4f:       or     %al,%r13b
    0.00 :   2a8b52:       je     2a9280 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x780>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b58:       lea    0xa0(%rsp),%rbp
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8b60:       lea    0x5a1f1e(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b67:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8b6b:       lea    -0x45(%rdx),%rsi
    0.00 :   2a8b6f:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b72:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8b7a:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a8b7f:       lea    0x5a2119(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b86:       lea    0x38(%rbp),%rax
    0.00 :   2a8b8a:       movl   $0x23,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8b95:       lea    0x28(%rbp),%rdi
    0.00 :   2a8b99:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8b9d:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8ba5:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2a8baa:       lea    0x100(%rsp),%rbx
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a8bb2:       movq   $0x0,0xe8(%rsp)
    0.00 :   2a8bbe:       movq   $0x0,0xf0(%rsp)
    0.00 :   2a8bca:       lea    0x70(%rbx),%rdi
    0.00 :   2a8bce:       movq   $0x0,0xf8(%rsp)
    0.00 :   2a8bda:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2a8bdf:       mov    0x97ef42(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a8be6:       xor    %r9d,%r9d
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   2a8be9:       xor    %esi,%esi
    0.00 :   2a8beb:       mov    %r9w,0x250(%rsp)
    0.00 :   2a8bf4:       mov    %rax,0x20(%rsp)
    0.00 :   2a8bf9:       add    $0x10,%rax
    0.00 :   2a8bfd:       mov    %rax,0x170(%rsp)
    0.00 :   2a8c05:       mov    0x97f194(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2a8c0c:       movq   $0x0,0x248(%rsp)
    0.00 :   2a8c18:       mov    0x8(%rax),%r13
    0.00 :   2a8c1c:       mov    0x10(%rax),%r14
    0.00 :   2a8c20:       movq   $0x0,0x258(%rsp)
    0.00 :   2a8c2c:       movq   $0x0,0x260(%rsp)
    0.00 :   2a8c38:       mov    -0x18(%r13),%rdi
    0.00 :   2a8c3c:       mov    %r13,0x100(%rsp)
    0.00 :   2a8c44:       movq   $0x0,0x268(%rsp)
    0.00 :   2a8c50:       movq   $0x0,0x270(%rsp)
    0.00 :   2a8c5c:       add    %rbx,%rdi
    0.00 :   2a8c5f:       mov    %r14,(%rdi)
    0.00 :   2a8c62:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2a8c67:       mov    0x97f0f2(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   2a8c6e:       lea    0x40(%rbx),%rdi
    0.00 :   2a8c72:       movq   $0x0,0x110(%rsp)
    0.00 :   2a8c7e:       movq   $0x0,0x118(%rsp)
    0.00 :   2a8c8a:       lea    0x18(%r12),%rax
    0.00 :   2a8c8f:       movq   $0x0,0x120(%rsp)
    0.00 :   2a8c9b:       mov    %rax,0x100(%rsp)
    0.00 :   2a8ca3:       lea    0x40(%r12),%rax
    0.00 :   2a8ca8:       mov    %rax,0x170(%rsp)
    0.00 :   2a8cb0:       mov    0x97efa9(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a8cb7:       movq   $0x0,0x128(%rsp)
    0.00 :   2a8cc3:       mov    %rax,0x8(%rsp)
    0.00 :   2a8cc8:       add    $0x10,%rax
    0.00 :   2a8ccc:       mov    %rax,0x108(%rsp)
    0.00 :   2a8cd4:       movq   $0x0,0x130(%rsp)
    0.00 :   2a8ce0:       movq   $0x0,0x138(%rsp)
    0.00 :   2a8cec:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a8cf1:       mov    0x97f2e0(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a8cf8:       lea    0x8(%rbx),%rsi
    0.00 :   2a8cfc:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a8d00:       movl   $0x10,0x148(%rsp)
    0.00 :   2a8d0b:       mov    %rax,0x10(%rsp)
    0.00 :   2a8d10:       add    $0x10,%rax
    0.00 :   2a8d14:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a8d1c:       lea    0x60(%rbx),%rax
    0.00 :   2a8d20:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a8d28:       movq   $0x0,0x158(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   2a8d34:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a8d3c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            size_type
         :            find_last_of(const _CharT* __s, size_type __pos = npos) const
         :            _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_string(__s);
         :            return this->find_last_of(__s, __pos, traits_type::length(__s));
    0.00 :   2a8d41:       mov    $0xffffffffffffffff,%rdx
    0.00 :   2a8d48:       mov    $0x2,%ecx
    0.00 :   2a8d4d:       lea    0x57e3b4(%rip),%rsi        # 827108 <std::piecewise_construct+0x368>
    0.00 :   2a8d54:       mov    %rbp,%rdi
    0.00 :   2a8d57:       callq  53ec0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const@plt>
         :            if (__pos > this->size())
    0.00 :   2a8d5c:       mov    0xa8(%rsp),%rdx
    0.00 :   2a8d64:       add    $0x1,%rax
    0.00 :   2a8d68:       cmp    %rdx,%rax
    0.00 :   2a8d6b:       ja     2ab6e2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2be2>
         :            + __str._M_check(__pos, "basic_string::basic_string");
    0.00 :   2a8d71:       mov    0xa0(%rsp),%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a8d79:       lea    0x80(%rsp),%rdi
    0.00 :   2a8d81:       lea    0x10(%rdi),%rcx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8d85:       mov    %rdi,(%rsp)
         :            _M_construct(__start, __start + __str._M_limit(__pos, __n));
    0.00 :   2a8d89:       add    %rsi,%rdx
         :            const _CharT* __start = __str._M_data()
    0.00 :   2a8d8c:       add    %rax,%rsi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a8d8f:       mov    %rcx,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a8d97:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2a8d9c:       mov    0x88(%rsp),%rdx
    0.00 :   2a8da4:       mov    0x80(%rsp),%rsi
    0.00 :   2a8dac:       mov    %rbx,%rdi
    0.00 :   2a8daf:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   2a8db4:       mov    $0x1,%edx
    0.00 :   2a8db9:       lea    0x5fd6f6(%rip),%rsi        # 8a64b6 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0x9a>
    0.00 :   2a8dc0:       mov    %rax,%rdi
    0.00 :   2a8dc3:       mov    %rax,%r15
    0.00 :   2a8dc6:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a8dcb:       mov    0xc0(%rsp),%esi
    0.00 :   2a8dd2:       mov    %r15,%rdi
    0.00 :   2a8dd5:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   2a8dda:       mov    $0x1,%edx
    0.00 :   2a8ddf:       lea    0x57e955(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2a8de6:       mov    %rax,%rdi
    0.00 :   2a8de9:       mov    %rax,%r15
    0.00 :   2a8dec:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a8df1:       mov    0xd0(%rsp),%rdx
    0.00 :   2a8df9:       mov    0xc8(%rsp),%rsi
    0.00 :   2a8e01:       mov    %r15,%rdi
    0.00 :   2a8e04:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!_M_is_local())
    0.00 :   2a8e09:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a8e0d:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a8e15:       add    $0x10,%rax
    0.00 :   2a8e19:       cmp    %rax,%rdi
    0.00 :   2a8e1c:       je     2a8e23 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x323>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2a8e1e:       callq  53300 <operator delete(void*)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8e23:       lea    0x60(%rsp),%r15
    0.00 :   2a8e28:       movb   $0x0,0x70(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a8e2d:       movq   $0x0,0x68(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a8e36:       lea    0x10(%r15),%rax
    0.00 :   2a8e3a:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   2a8e3f:       mov    0x130(%rsp),%rax
    0.00 :   2a8e47:       test   %rax,%rax
    0.00 :   2a8e4a:       je     2a96d0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xbd0>
         :            if (this->pptr() > this->egptr())
    0.00 :   2a8e50:       mov    0x120(%rsp),%r8
    0.00 :   2a8e58:       mov    0x128(%rsp),%rcx
    0.00 :   2a8e60:       cmp    %r8,%rax
    0.00 :   2a8e63:       ja     2a9260 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x760>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a8e69:       sub    %rcx,%r8
    0.00 :   2a8e6c:       xor    %edx,%edx
    0.00 :   2a8e6e:       xor    %esi,%esi
    0.00 :   2a8e70:       mov    %r15,%rdi
    0.00 :   2a8e73:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   2a8e78:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a8e7d:       mov    0x150(%rsp),%rdi
    0.00 :   2a8e85:       mov    %rax,0x100(%rsp)
    0.00 :   2a8e8d:       lea    0x40(%r12),%rax
    0.00 :   2a8e92:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2a8e9a:       mov    0x10(%rsp),%rax
    0.00 :   2a8e9f:       add    $0x10,%rax
    0.00 :   2a8ea3:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2a8eab:       lea    0x60(%rbx),%rax
    0.00 :   2a8eaf:       cmp    %rax,%rdi
    0.00 :   2a8eb2:       je     2a8eb9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x3b9>
    0.00 :   2a8eb4:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2a8eb9:       mov    0x8(%rsp),%rax
    0.00 :   2a8ebe:       lea    0x40(%rbx),%rdi
    0.00 :   2a8ec2:       add    $0x10,%rax
    0.00 :   2a8ec6:       mov    %rax,0x108(%rsp)
    0.00 :   2a8ece:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2a8ed3:       mov    -0x18(%r13),%rax
         :            ~basic_ios() { }
    0.00 :   2a8ed7:       lea    0x70(%rbx),%rdx
    0.00 :   2a8edb:       mov    %r13,0x100(%rsp)
    0.00 :   2a8ee3:       mov    %rdx,%rdi
    0.00 :   2a8ee6:       mov    %rdx,0x28(%rsp)
    0.00 :   2a8eeb:       mov    %r14,0x100(%rsp,%rax,1)
    0.00 :   2a8ef3:       mov    0x20(%rsp),%rax
    0.00 :   2a8ef8:       add    $0x10,%rax
    0.00 :   2a8efc:       mov    %rax,0x170(%rsp)
    0.00 :   2a8f04:       mov    %rax,0x30(%rsp)
    0.00 :   2a8f09:       callq  52b40 <std::ios_base::~ios_base()@plt>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2a8f0e:       mov    0x28(%rsp),%rdx
    0.00 :   2a8f13:       mov    %rdx,%rdi
    0.00 :   2a8f16:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2a8f1b:       xor    %r8d,%r8d
    0.00 :   2a8f1e:       mov    0x30(%rsp),%rax
         :            { this->init(0); }
    0.00 :   2a8f23:       xor    %esi,%esi
    0.00 :   2a8f25:       mov    %r8w,0x250(%rsp)
    0.00 :   2a8f2e:       mov    -0x18(%r13),%rdi
    0.00 :   2a8f32:       mov    %rax,0x170(%rsp)
    0.00 :   2a8f3a:       add    %rbx,%rdi
    0.00 :   2a8f3d:       movq   $0x0,0x248(%rsp)
    0.00 :   2a8f49:       movq   $0x0,0x258(%rsp)
    0.00 :   2a8f55:       movq   $0x0,0x260(%rsp)
    0.00 :   2a8f61:       movq   $0x0,0x268(%rsp)
    0.00 :   2a8f6d:       movq   $0x0,0x270(%rsp)
    0.00 :   2a8f79:       mov    %r13,0x100(%rsp)
    0.00 :   2a8f81:       mov    %r14,(%rdi)
    0.00 :   2a8f84:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2a8f89:       lea    0x18(%r12),%rax
         :            _M_buf_locale(locale())
    0.00 :   2a8f8e:       lea    0x40(%rbx),%rdi
    0.00 :   2a8f92:       movq   $0x0,0x110(%rsp)
    0.00 :   2a8f9e:       mov    %rax,0x100(%rsp)
    0.00 :   2a8fa6:       lea    0x40(%r12),%rax
    0.00 :   2a8fab:       mov    %rax,0x170(%rsp)
    0.00 :   2a8fb3:       mov    0x8(%rsp),%rax
    0.00 :   2a8fb8:       movq   $0x0,0x118(%rsp)
    0.00 :   2a8fc4:       movq   $0x0,0x120(%rsp)
    0.00 :   2a8fd0:       add    $0x10,%rax
    0.00 :   2a8fd4:       mov    %rax,0x108(%rsp)
    0.00 :   2a8fdc:       movq   $0x0,0x128(%rsp)
    0.00 :   2a8fe8:       movq   $0x0,0x130(%rsp)
    0.00 :   2a8ff4:       movq   $0x0,0x138(%rsp)
    0.00 :   2a9000:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a9005:       mov    0x10(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a900a:       lea    0x8(%rbx),%rsi
    0.00 :   2a900e:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a9012:       movl   $0x10,0x148(%rsp)
    0.00 :   2a901d:       add    $0x10,%rax
    0.00 :   2a9021:       movb   $0x0,0x160(%rsp)
    0.00 :   2a9029:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a9031:       lea    0x60(%rbx),%rax
    0.00 :   2a9035:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a903d:       movq   $0x0,0x158(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a9049:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2a904e:       mov    0x68(%rsp),%rdx
    0.00 :   2a9053:       mov    0x60(%rsp),%rsi
    0.00 :   2a9058:       mov    %rbx,%rdi
    0.00 :   2a905b:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2a9060:       mov    $0x1,%edx
    0.00 :   2a9065:       lea    0x57e6cf(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2a906c:       mov    %rbx,%rdi
    0.00 :   2a906f:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a9074:       mov    %rbx,%rdi
    0.00 :   2a9077:       mov    $0x2d,%edx
    0.00 :   2a907c:       lea    0x5a1a05(%rip),%rsi        # 84aa88 <typeinfo name for onnxruntime::Hardmax<float>+0x68>
    0.00 :   2a9083:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9088:       mov    (%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2a908c:       movq   $0x0,0x88(%rsp)
    0.00 :   2a9098:       movb   $0x0,0x90(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a90a0:       lea    0x10(%rdi),%rax
    0.00 :   2a90a4:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2a90ac:       mov    0x130(%rsp),%rax
    0.00 :   2a90b4:       test   %rax,%rax
    0.00 :   2a90b7:       je     2a96b8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xbb8>
         :            if (this->pptr() > this->egptr())
    0.00 :   2a90bd:       mov    0x120(%rsp),%r8
    0.00 :   2a90c5:       mov    0x128(%rsp),%rcx
    0.00 :   2a90cd:       cmp    %r8,%rax
    0.00 :   2a90d0:       jbe    2a94d8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x9d8>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a90d6:       sub    %rcx,%rax
    0.00 :   2a90d9:       xor    %edx,%edx
    0.00 :   2a90db:       xor    %esi,%esi
    0.00 :   2a90dd:       mov    %rax,%r8
    0.00 :   2a90e0:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2a90e5:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a90ea:       mov    0x150(%rsp),%rdi
    0.00 :   2a90f2:       mov    %rax,0x100(%rsp)
    0.00 :   2a90fa:       lea    0x40(%r12),%rax
    0.00 :   2a90ff:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2a9107:       mov    0x10(%rsp),%rax
    0.00 :   2a910c:       add    $0x10,%rax
    0.00 :   2a9110:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2a9118:       lea    0x60(%rbx),%rax
    0.00 :   2a911c:       cmp    %rax,%rdi
    0.00 :   2a911f:       je     2a9126 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x626>
    0.00 :   2a9121:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2a9126:       mov    0x8(%rsp),%rax
    0.00 :   2a912b:       lea    0x40(%rbx),%rdi
    0.00 :   2a912f:       add    $0x10,%rax
    0.00 :   2a9133:       mov    %rax,0x108(%rsp)
    0.00 :   2a913b:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2a9140:       mov    -0x18(%r13),%rax
         :            ~basic_ios() { }
    0.00 :   2a9144:       lea    0x70(%rbx),%rdi
    0.00 :   2a9148:       mov    %r13,0x100(%rsp)
    0.00 :   2a9150:       mov    %r14,0x100(%rsp,%rax,1)
    0.00 :   2a9158:       mov    0x20(%rsp),%rax
    0.00 :   2a915d:       add    $0x10,%rax
    0.00 :   2a9161:       mov    %rax,0x170(%rsp)
    0.00 :   2a9169:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2a916e:       mov    (%rsp),%rbx
    0.00 :   2a9172:       mov    0x18(%rsp),%rdi
    0.00 :   2a9177:       mov    $0x1,%edx
    0.00 :   2a917c:       mov    $0x2,%esi
    0.00 :   2a9181:       mov    %rbx,%rcx
    0.00 :   2a9184:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a9189:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a918c:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9194:       add    $0x10,%rax
    0.00 :   2a9198:       cmp    %rax,%rdi
    0.00 :   2a919b:       je     2a91a2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6a2>
    0.00 :   2a919d:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a91a2:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a91a7:       add    $0x10,%r15
    0.00 :   2a91ab:       cmp    %r15,%rdi
    0.00 :   2a91ae:       je     2a91b5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6b5>
    0.00 :   2a91b0:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2a91b5:       mov    0xf0(%rsp),%r12
    0.00 :   2a91bd:       mov    0xe8(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   2a91c5:       cmp    %rbx,%r12
    0.00 :   2a91c8:       je     2a91f2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6f2>
    0.00 :   2a91ca:       nopw   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a91d0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2a91d3:       lea    0x10(%rbx),%rax
    0.00 :   2a91d7:       cmp    %rax,%rdi
    0.00 :   2a91da:       je     2a91e1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6e1>
    0.00 :   2a91dc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a91e1:       add    $0x20,%rbx
    0.00 :   2a91e5:       cmp    %rbx,%r12
    0.00 :   2a91e8:       jne    2a91d0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6d0>
    0.00 :   2a91ea:       mov    0xe8(%rsp),%rbx
         :            if (__p)
    0.00 :   2a91f2:       test   %rbx,%rbx
    0.00 :   2a91f5:       je     2a91ff <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x6ff>
    0.00 :   2a91f7:       mov    %rbx,%rdi
    0.00 :   2a91fa:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a91ff:       mov    0xc8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9207:       lea    0x38(%rbp),%rax
    0.00 :   2a920b:       cmp    %rax,%rdi
    0.00 :   2a920e:       je     2a9215 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x715>
    0.00 :   2a9210:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9215:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a921d:       add    $0x10,%rbp
    0.00 :   2a9221:       cmp    %rbp,%rdi
    0.00 :   2a9224:       je     2a922b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x72b>
    0.00 :   2a9226:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a922b:       mov    0x278(%rsp),%rcx
    0.00 :   2a9233:       xor    %fs:0x28,%rcx
    0.00 :   2a923c:       mov    0x18(%rsp),%rax
    0.00 :   2a9241:       jne    2ab702 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c02>
    0.00 :   2a9247:       add    $0x288,%rsp
    0.00 :   2a924e:       pop    %rbx
    0.00 :   2a924f:       pop    %rbp
    0.00 :   2a9250:       pop    %r12
    0.00 :   2a9252:       pop    %r13
    0.00 :   2a9254:       pop    %r14
    0.00 :   2a9256:       pop    %r15
    0.00 :   2a9258:       retq
    0.00 :   2a9259:       nopl   0x0(%rax)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a9260:       sub    %rcx,%rax
    0.00 :   2a9263:       xor    %edx,%edx
    0.00 :   2a9265:       xor    %esi,%esi
    0.00 :   2a9267:       mov    %r15,%rdi
    0.00 :   2a926a:       mov    %rax,%r8
    0.00 :   2a926d:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2a9272:       jmpq   2a8e78 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x378>
    0.00 :   2a9277:       nopw   0x0(%rax,%rax,1)
   42.92 :   2a9280:       mov    %rdx,%r15
    0.00 :   2a9283:       movzbl (%rsp),%edx
    0.00 :   2a9287:       cmp    $0x1,%rbp
    0.00 :   2a928b:       mov    %rsi,%r12
    0.00 :   2a928e:       seta   %al
    0.00 :   2a9291:       xor    $0x1,%edx
    0.00 :   2a9294:       and    %edx,%eax
    0.00 :   2a9296:       cmp    $0x1,%r8
    0.00 :   2a929a:       seta   %dl
    0.00 :   2a929d:       test   %dl,%al
    0.00 :   2a929f:       je     2a92aa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x7aa>
    0.00 :   2a92a1:       cmp    %rbp,%r8
    0.00 :   2a92a4:       jae    2aa7ce <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1cce>
    0.00 :   2a92aa:       cmp    $0x1,%r8
    0.00 :   2a92ae:       mov    %rbp,%rdx
    0.00 :   2a92b1:       sete   0x10(%rsp)
    0.00 :   2a92b6:       cmp    $0x1,%rbp
    0.00 :   2a92ba:       movzbl 0x10(%rsp),%esi
    0.00 :   2a92bf:       sete   %al
    0.00 :   2a92c2:       or     %esi,%eax
    0.00 :   2a92c4:       cmp    %rbp,%r8
    0.00 :   2a92c7:       mov    %al,0x20(%rsp)
    0.00 :   2a92cb:       cmovae %r8,%rdx
    0.00 :   2a92cf:       cmp    $0x1,%rbp
    0.00 :   2a92d3:       je     2a96e8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xbe8>
    0.00 :   2a92d9:       movzbl 0x20(%rsp),%eax
    0.00 :   2a92de:       mov    %rdx,0x28(%rsp)
    0.00 :   2a92e3:       mov    %rdx,%r9
    0.00 :   2a92e6:       sub    %rax,%r9
         :            if (__n > this->max_size())
    0.00 :   2a92e9:       movabs $0x1fffffffffffffff,%rax
    0.00 :   2a92f3:       cmp    %rax,%rdx
    0.00 :   2a92f6:       ja     2ab6fd <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bfd>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2a92fc:       lea    0x0(,%rdx,8),%r14
    0.00 :   2a9304:       mov    %r8,0x48(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2a9309:       xor    %ebx,%ebx
    0.00 :   2a930b:       mov    %r14,%rdi
    0.00 :   2a930e:       mov    %rcx,0x40(%rsp)
    0.00 :   2a9313:       mov    %r9,0x38(%rsp)
    0.00 :   2a9318:       mov    %rdx,0x30(%rsp)
    0.00 :   2a931d:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a9322:       mov    0x30(%rsp),%rdx
    0.00 :   2a9327:       mov    0x38(%rsp),%r9
    0.00 :   2a932c:       mov    0x40(%rsp),%rcx
    0.00 :   2a9331:       mov    0x48(%rsp),%r8
    0.00 :   2a9336:       lea    (%rax,%r14,1),%rsi
         :            __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :            __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
         :            {
         :            const _Tp __tmp = __value;
         :            for (__decltype(__n + 0) __niter = __n;
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   2a933a:       nopw   0x0(%rax,%rax,1)
         :            *__first = __tmp;
    0.00 :   2a9340:       movq   $0x1,(%rax,%rbx,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   2a9348:       add    $0x1,%rbx
    0.00 :   2a934c:       cmp    %rbx,%rdx
    0.00 :   2a934f:       jne    2a9340 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x840>
         :            #endif
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   2a9351:       mov    0x20(%r12),%rdi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   2a9356:       mov    %rsi,0x28(%r12)
    0.00 :   2a935b:       mov    %rax,0x20(%r12)
    0.00 :   2a9360:       mov    %rsi,0x30(%r12)
         :            if (__p)
    0.00 :   2a9365:       test   %rdi,%rdi
    0.00 :   2a9368:       je     2a938d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x88d>
    0.00 :   2a936a:       mov    %r8,0x40(%rsp)
    0.00 :   2a936f:       mov    %rcx,0x38(%rsp)
    0.00 :   2a9374:       mov    %r9,0x30(%rsp)
         :            ::operator delete(__p);
    0.00 :   2a9379:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a937e:       mov    0x30(%rsp),%r9
    0.00 :   2a9383:       mov    0x38(%rsp),%rcx
    0.00 :   2a9388:       mov    0x40(%rsp),%r8
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2a938d:       test   %rbx,%rbx
    0.00 :   2a9390:       je     2aab78 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2078>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2a9396:       mov    %r14,%rdi
    0.00 :   2a9399:       mov    %r8,0x40(%rsp)
    0.00 :   2a939e:       mov    %rcx,0x38(%rsp)
    0.00 :   2a93a3:       mov    %r9,0x30(%rsp)
    0.00 :   2a93a8:       callq  53340 <operator new(unsigned long)@plt>
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2a93ad:       mov    0x30(%rsp),%r9
    0.00 :   2a93b2:       mov    0x38(%rsp),%rcx
    0.00 :   2a93b7:       xor    %edx,%edx
    0.00 :   2a93b9:       mov    0x40(%rsp),%r8
    0.00 :   2a93be:       add    %rax,%r14
    0.00 :   2a93c1:       nopl   0x0(%rax)
         :            *__first = __tmp;
    0.00 :   2a93c8:       movq   $0x1,(%rax,%rdx,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   2a93d0:       add    $0x1,%rdx
    0.00 :   2a93d4:       cmp    %rdx,%rbx
    0.00 :   2a93d7:       jne    2a93c8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x8c8>
    0.00 :   2a93d9:       lea    (%rax,%rbx,8),%rdx
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   2a93dd:       mov    0x38(%r12),%rdi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   2a93e2:       mov    %rdx,0x40(%r12)
    0.00 :   2a93e7:       mov    %rax,0x38(%r12)
    0.00 :   2a93ec:       mov    %r14,0x48(%r12)
         :            if (__p)
    0.00 :   2a93f1:       test   %rdi,%rdi
    0.00 :   2a93f4:       je     2a9419 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x919>
    0.00 :   2a93f6:       mov    %r8,0x40(%rsp)
    0.00 :   2a93fb:       mov    %rcx,0x38(%rsp)
    0.00 :   2a9400:       mov    %r9,0x30(%rsp)
         :            ::operator delete(__p);
    0.00 :   2a9405:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a940a:       mov    0x40(%rsp),%r8
    0.00 :   2a940f:       mov    0x38(%rsp),%rcx
    0.00 :   2a9414:       mov    0x30(%rsp),%r9
    0.00 :   2a9419:       mov    (%r15),%rsi
    0.00 :   2a941c:       mov    0x8(%r15),%rax
    0.00 :   2a9420:       mov    0x20(%r12),%rdi
    0.00 :   2a9425:       sub    %rsi,%rax
    0.00 :   2a9428:       sar    $0x3,%rax
    0.00 :   2a942c:       test   %r13b,%r13b
    0.00 :   2a942f:       je     2a94f0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x9f0>
    0.00 :   2a9435:       mov    (%rcx),%r10
    0.00 :   2a9438:       lea    -0x2(%rbx),%rdx
    0.00 :   2a943c:       cmpq   $0x1,0x28(%rsp)
    0.00 :   2a9442:       mov    %rcx,0x38(%rsp)
         :            */
         :            reference
         :            operator[](size_type __n) _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   2a9447:       lea    0x0(,%rdx,8),%r14
    0.00 :   2a944f:       mov    %r9,0x30(%rsp)
    0.00 :   2a9454:       mov    (%r10),%r11
    0.00 :   2a9457:       mov    0x38(%r12),%r10
    0.00 :   2a945c:       mov    %r11,(%r10,%rdx,8)
    0.00 :   2a9460:       je     2aa380 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1880>
    0.00 :   2a9466:       lea    -0x2(%r8),%r13
    0.00 :   2a946a:       mov    %r8,0x28(%rsp)
    0.00 :   2a946f:       cmp    %rax,%r13
    0.00 :   2a9472:       cmovbe %r13,%rax
    0.00 :   2a9476:       movslq %r13d,%r13
    0.00 :   2a9479:       lea    0x0(,%rax,8),%rdx
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   2a9481:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
    0.00 :   2a9486:       mov    0x28(%rsp),%r8
    0.00 :   2a948b:       cmpb   $0x0,(%rsp)
    0.00 :   2a948f:       lea    0x0(,%r13,8),%r10
    0.00 :   2a9497:       mov    (%r15),%rsi
    0.00 :   2a949a:       mov    0x20(%r12),%rdx
    0.00 :   2a949f:       lea    -0x1(%r8),%rax
    0.00 :   2a94a3:       mov    0x30(%rsp),%r9
    0.00 :   2a94a8:       mov    0x38(%rsp),%rcx
    0.00 :   2a94ad:       cltq
    0.00 :   2a94af:       lea    0x0(,%rax,8),%rdi
    0.00 :   2a94b7:       jne    2aa3c0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x18c0>
    0.00 :   2a94bd:       mov    (%rsi,%r13,8),%rax
    0.00 :   2a94c1:       mov    %rax,-0x8(%rdx,%r14,1)
    0.00 :   2a94c6:       mov    (%rsi,%rdi,1),%rax
    0.00 :   2a94ca:       mov    %rax,0x8(%rdx,%r14,1)
    0.00 :   2a94cf:       jmpq   2a9562 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xa62>
    0.00 :   2a94d4:       nopl   0x0(%rax)
    0.00 :   2a94d8:       mov    (%rsp),%rdi
    0.00 :   2a94dc:       sub    %rcx,%r8
    0.00 :   2a94df:       xor    %edx,%edx
    0.00 :   2a94e1:       xor    %esi,%esi
    0.00 :   2a94e3:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2a94e8:       jmpq   2a90e5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x5e5>
    0.00 :   2a94ed:       nopl   (%rax)
    0.00 :   2a94f0:       mov    %rbx,%rdx
    0.00 :   2a94f3:       mov    %r9,0x38(%rsp)
    0.00 :   2a94f8:       sub    %r8,%rdx
    0.00 :   2a94fb:       cmp    %rax,%r8
    0.00 :   2a94fe:       mov    %r8,0x30(%rsp)
    0.00 :   2a9503:       cmovbe %r8,%rax
    0.00 :   2a9507:       lea    (%rdi,%rdx,8),%rdi
    0.00 :   2a950b:       mov    %rcx,0x28(%rsp)
    0.00 :   2a9510:       lea    0x0(,%rax,8),%rdx
         :            memcpy():
    0.00 :   2a9518:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
    0.00 :   2a951d:       mov    0x28(%rsp),%rcx
    0.00 :   2a9522:       mov    0x38(%r12),%rax
    0.00 :   2a9527:       mov    %rbx,%rdx
    0.00 :   2a952a:       sub    %rbp,%rdx
    0.00 :   2a952d:       mov    (%rcx),%rsi
    0.00 :   2a9530:       lea    (%rax,%rdx,8),%rdi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2a9534:       mov    0x8(%rcx),%rax
    0.00 :   2a9538:       sub    %rsi,%rax
    0.00 :   2a953b:       sar    $0x3,%rax
    0.00 :   2a953f:       cmp    %rbp,%rax
    0.00 :   2a9542:       cmova  %rbp,%rax
    0.00 :   2a9546:       lea    0x0(,%rax,8),%rdx
         :            memcpy():
    0.00 :   2a954e:       callq  53150 <memcpy@plt>
    0.00 :   2a9553:       mov    0x38(%rsp),%r9
    0.00 :   2a9558:       mov    0x30(%rsp),%r8
    0.00 :   2a955d:       mov    0x28(%rsp),%rcx
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2a9562:       test   %r9,%r9
    0.00 :   2a9565:       je     2a9720 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xc20>
         :            if (__n > this->max_size())
    0.00 :   2a956b:       movabs $0x1fffffffffffffff,%rax
    0.00 :   2a9575:       mov    %r8,0x38(%rsp)
    0.00 :   2a957a:       mov    %rcx,0x30(%rsp)
    0.00 :   2a957f:       cmp    %rax,%r9
    0.00 :   2a9582:       ja     2ab6fd <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bfd>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2a9588:       lea    0x0(,%r9,8),%r13
    0.00 :   2a9590:       mov    %r9,0x28(%rsp)
    0.00 :   2a9595:       mov    %r13,%rdi
    0.00 :   2a9598:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a959d:       mov    0x28(%rsp),%r9
    0.00 :   2a95a2:       mov    0x30(%rsp),%rcx
    0.00 :   2a95a7:       mov    0x38(%rsp),%r8
    0.00 :   2a95ac:       mov    %rax,%r14
    0.00 :   2a95af:       xor    %eax,%eax
    0.00 :   2a95b1:       nopl   0x0(%rax)
         :            *__first = __tmp;
    0.00 :   2a95b8:       movq   $0x0,(%r14,%rax,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   2a95c0:       add    $0x1,%rax
    0.00 :   2a95c4:       cmp    %rax,%r9
    0.00 :   2a95c7:       jne    2a95b8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xab8>
    0.00 :   2a95c9:       lea    (%r14,%r13,1),%rax
    0.00 :   2a95cd:       mov    %rax,0x28(%rsp)
    0.00 :   2a95d2:       mov    %rbx,%r10
    0.00 :   2a95d5:       sub    $0x2,%r10
    0.00 :   2a95d9:       je     2ab2b5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x27b5>
    0.00 :   2a95df:       mov    0x38(%r12),%rdx
    0.00 :   2a95e4:       mov    0x20(%r12),%rdi
    0.00 :   2a95e9:       xor    %r13d,%r13d
    0.00 :   2a95ec:       nopl   0x0(%rax)
         :            max(const _Tp& __a, const _Tp& __b)
    0.00 :   2a95f0:       mov    (%rdi,%r13,8),%rax
    0.00 :   2a95f4:       cmp    %rax,(%rdx,%r13,8)
    0.00 :   2a95f8:       cmovge (%rdx,%r13,8),%rax
    0.00 :   2a95fd:       mov    %rax,(%r14,%r13,8)
    0.00 :   2a9601:       mov    (%rdi,%r13,8),%rsi
    0.00 :   2a9605:       cmp    %rax,%rsi
    0.00 :   2a9608:       je     2a9614 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb14>
    0.00 :   2a960a:       cmp    $0x1,%rsi
    0.00 :   2a960e:       jne    2a9738 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xc38>
    0.00 :   2a9614:       mov    (%rdx,%r13,8),%rsi
    0.00 :   2a9618:       cmp    $0x1,%rsi
    0.00 :   2a961c:       je     2a9627 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb27>
    0.00 :   2a961e:       cmp    %rax,%rsi
    0.00 :   2a9621:       jne    2a9b40 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1040>
    0.00 :   2a9627:       add    $0x1,%r13
    0.00 :   2a962b:       cmp    %r10,%r13
    0.00 :   2a962e:       jne    2a95f0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xaf0>
    0.00 :   2a9630:       mov    %r10,%rdx
    0.00 :   2a9633:       cmpb   $0x0,(%rsp)
    0.00 :   2a9637:       mov    (%r15),%rax
    0.00 :   2a963a:       mov    $0x1,%esi
    0.00 :   2a963f:       je     2a9f10 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1410>
    0.00 :   2a9645:       cmpb   $0x0,0x20(%rsp)
    0.00 :   2a964a:       je     2aa409 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1909>
    0.00 :   2a9650:       sub    $0x2,%r8
    0.00 :   2a9654:       mov    %rsi,0xc8(%r12)
    0.00 :   2a965c:       movslq %r8d,%r8
    0.00 :   2a965f:       mov    (%rax,%r8,8),%rax
    0.00 :   2a9663:       mov    %rax,0xd8(%r12)
    0.00 :   2a966b:       cmpb   $0x0,0x8(%rsp)
    0.00 :   2a9670:       je     2a9f40 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1440>
    0.00 :   2a9676:       cmp    $0x1,%rbp
    0.00 :   2a967a:       je     2aa420 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1920>
    0.00 :   2a9680:       mov    (%rcx),%rax
    0.00 :   2a9683:       lea    -0x2(%rbp),%rsi
    0.00 :   2a9687:       cmpb   $0x0,0x20(%rsp)
    0.00 :   2a968c:       movslq %esi,%rsi
    0.00 :   2a968f:       mov    (%rax,%rsi,8),%rsi
    0.00 :   2a9693:       mov    %rsi,0xd0(%r12)
    0.00 :   2a969b:       jne    2aa42c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x192c>
    0.00 :   2a96a1:       mov    0xd8(%r12),%rdx
    0.00 :   2a96a9:       sub    $0x1,%rbp
    0.00 :   2a96ad:       jmpq   2a9f77 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1477>
    0.00 :   2a96b2:       nopw   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   2a96b8:       mov    (%rsp),%rdi
    0.00 :   2a96bc:       lea    0x50(%rbx),%rsi
    0.00 :   2a96c0:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2a96c5:       jmpq   2a90e5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x5e5>
    0.00 :   2a96ca:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a96d0:       lea    0x50(%rbx),%rsi
    0.00 :   2a96d4:       mov    %r15,%rdi
    0.00 :   2a96d7:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2a96dc:       jmpq   2a8e78 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x378>
    0.00 :   2a96e1:       nopl   0x0(%rax)
    0.00 :   2a96e8:       mov    %rdx,%r14
    0.00 :   2a96eb:       lea    -0x1(%rdx),%r9
    0.00 :   2a96ef:       add    $0x1,%r14
    0.00 :   2a96f3:       jne    2ab01f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x251f>
    0.00 :   2a96f9:       xor    %ebx,%ebx
    0.00 :   2a96fb:       xor    %eax,%eax
    0.00 :   2a96fd:       mov    $0xfffffffffffffffe,%r9
    0.00 :   2a9704:       movb   $0x1,0x20(%rsp)
    0.00 :   2a9709:       movq   $0xffffffffffffffff,0x28(%rsp)
    0.00 :   2a9712:       mov    $0x1,%r13d
    0.00 :   2a9718:       xor    %esi,%esi
    0.00 :   2a971a:       jmpq   2a9351 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x851>
    0.00 :   2a971f:       nop
    0.00 :   2a9720:       movq   $0x0,0x28(%rsp)
    0.00 :   2a9729:       xor    %r14d,%r14d
    0.00 :   2a972c:       jmpq   2a95d2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xad2>
    0.00 :   2a9731:       nopl   0x0(%rax)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9738:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9740:       lea    0x5a133e(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9747:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a974b:       lea    -0x45(%rdx),%rsi
    0.00 :   2a974f:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9752:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a975a:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a975f:       lea    0x5a1539(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9766:       lea    0x38(%rbp),%rax
    0.00 :   2a976a:       movl   $0x63,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9775:       lea    0x28(%rbp),%rdi
    0.00 :   2a9779:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a977d:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9785:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a978a:       lea    0x60(%rsp),%r15
    0.00 :   2a978f:       xor    %edx,%edx
    0.00 :   2a9791:       mov    %rbp,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a9794:       movq   $0x0,0xe8(%rsp)
    0.00 :   2a97a0:       movq   $0x0,0xf0(%rsp)
    0.00 :   2a97ac:       mov    %r15,%rdi
    0.00 :   2a97af:       movq   $0x0,0xf8(%rsp)
    0.00 :   2a97bb:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2a97c0:       lea    0x100(%rsp),%rbx
    0.00 :   2a97c8:       lea    0x70(%rbx),%rdi
    0.00 :   2a97cc:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2a97d1:       mov    0x97e350(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a97d8:       xor    %edi,%edi
         :            { this->init(0); }
    0.00 :   2a97da:       xor    %esi,%esi
    0.00 :   2a97dc:       mov    %di,0x250(%rsp)
    0.00 :   2a97e4:       mov    %rax,0x20(%rsp)
    0.00 :   2a97e9:       add    $0x10,%rax
    0.00 :   2a97ed:       mov    %rax,0x170(%rsp)
    0.00 :   2a97f5:       mov    0x97e5a4(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2a97fc:       movq   $0x0,0x248(%rsp)
    0.00 :   2a9808:       movq   $0x0,0x258(%rsp)
    0.00 :   2a9814:       mov    0x8(%rax),%rcx
    0.00 :   2a9818:       movq   $0x0,0x260(%rsp)
    0.00 :   2a9824:       mov    0x10(%rax),%rax
    0.00 :   2a9828:       mov    -0x18(%rcx),%rdi
    0.00 :   2a982c:       mov    %rcx,0x100(%rsp)
    0.00 :   2a9834:       movq   $0x0,0x268(%rsp)
    0.00 :   2a9840:       add    %rbx,%rdi
    0.00 :   2a9843:       mov    %rcx,0x28(%rsp)
    0.00 :   2a9848:       movq   $0x0,0x270(%rsp)
    0.00 :   2a9854:       mov    %rax,(%rdi)
    0.00 :   2a9857:       mov    %rax,0x30(%rsp)
    0.00 :   2a985c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2a9861:       mov    0x97e4f8(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2a9868:       lea    0x40(%rbx),%rdi
    0.00 :   2a986c:       movq   $0x0,0x110(%rsp)
    0.00 :   2a9878:       movq   $0x0,0x118(%rsp)
    0.00 :   2a9884:       lea    0x18(%r12),%rax
    0.00 :   2a9889:       movq   $0x0,0x120(%rsp)
    0.00 :   2a9895:       mov    %rax,0x100(%rsp)
    0.00 :   2a989d:       lea    0x40(%r12),%rax
    0.00 :   2a98a2:       mov    %rax,0x170(%rsp)
    0.00 :   2a98aa:       mov    0x97e3af(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a98b1:       movq   $0x0,0x128(%rsp)
    0.00 :   2a98bd:       mov    %rax,0x8(%rsp)
    0.00 :   2a98c2:       add    $0x10,%rax
    0.00 :   2a98c6:       mov    %rax,0x108(%rsp)
    0.00 :   2a98ce:       movq   $0x0,0x130(%rsp)
    0.00 :   2a98da:       movq   $0x0,0x138(%rsp)
    0.00 :   2a98e6:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a98eb:       mov    0x97e6e6(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a98f2:       lea    0x8(%rbx),%rsi
    0.00 :   2a98f6:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a98fa:       movl   $0x10,0x148(%rsp)
    0.00 :   2a9905:       mov    %rax,0x10(%rsp)
    0.00 :   2a990a:       add    $0x10,%rax
    0.00 :   2a990e:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a9916:       lea    0x60(%rbx),%rax
    0.00 :   2a991a:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a9922:       movq   $0x0,0x158(%rsp)
    0.00 :   2a992e:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a9936:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2a993b:       mov    0x68(%rsp),%rdx
    0.00 :   2a9940:       mov    0x60(%rsp),%rsi
    0.00 :   2a9945:       mov    %rbx,%rdi
    0.00 :   2a9948:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2a994d:       mov    $0x1,%edx
    0.00 :   2a9952:       lea    0x57dde2(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2a9959:       mov    %rbx,%rdi
    0.00 :   2a995c:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a9961:       mov    $0x25,%edx
    0.00 :   2a9966:       lea    0x5a114b(%rip),%rsi        # 84aab8 <typeinfo name for onnxruntime::Hardmax<float>+0x98>
    0.00 :   2a996d:       mov    %rbx,%rdi
    0.00 :   2a9970:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   2a9975:       mov    %rbx,%rdi
    0.00 :   2a9978:       mov    %r13,%rsi
    0.00 :   2a997b:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9980:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2a9988:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9994:       lea    0x10(%rdi),%rax
    0.00 :   2a9998:       mov    %rdi,(%rsp)
    0.00 :   2a999c:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2a99a4:       mov    0x130(%rsp),%rax
    0.00 :   2a99ac:       movb   $0x0,0x90(%rsp)
    0.00 :   2a99b4:       test   %rax,%rax
    0.00 :   2a99b7:       je     2ab037 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2537>
         :            if (this->pptr() > this->egptr())
    0.00 :   2a99bd:       mov    0x120(%rsp),%r8
    0.00 :   2a99c5:       mov    0x128(%rsp),%rcx
    0.00 :   2a99cd:       cmp    %r8,%rax
    0.00 :   2a99d0:       ja     2aa3d1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x18d1>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a99d6:       mov    (%rsp),%rdi
    0.00 :   2a99da:       sub    %rcx,%r8
    0.00 :   2a99dd:       xor    %edx,%edx
    0.00 :   2a99df:       xor    %esi,%esi
    0.00 :   2a99e1:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2a99e6:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a99eb:       mov    0x150(%rsp),%rdi
    0.00 :   2a99f3:       mov    %rax,0x100(%rsp)
    0.00 :   2a99fb:       lea    0x40(%r12),%rax
    0.00 :   2a9a00:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2a9a08:       mov    0x10(%rsp),%rax
    0.00 :   2a9a0d:       add    $0x10,%rax
    0.00 :   2a9a11:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2a9a19:       lea    0x60(%rbx),%rax
    0.00 :   2a9a1d:       cmp    %rax,%rdi
    0.00 :   2a9a20:       je     2a9a27 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xf27>
         :            ::operator delete(__p);
    0.00 :   2a9a22:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2a9a27:       mov    0x8(%rsp),%rax
    0.00 :   2a9a2c:       lea    0x40(%rbx),%rdi
    0.00 :   2a9a30:       add    $0x10,%rax
    0.00 :   2a9a34:       mov    %rax,0x108(%rsp)
    0.00 :   2a9a3c:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2a9a41:       mov    0x28(%rsp),%rax
    0.00 :   2a9a46:       mov    0x30(%rsp),%rcx
         :            ~basic_ios() { }
    0.00 :   2a9a4b:       lea    0x70(%rbx),%rdi
    0.00 :   2a9a4f:       mov    %rax,0x100(%rsp)
    0.00 :   2a9a57:       mov    -0x18(%rax),%rax
    0.00 :   2a9a5b:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2a9a63:       mov    0x20(%rsp),%rax
    0.00 :   2a9a68:       add    $0x10,%rax
    0.00 :   2a9a6c:       mov    %rax,0x170(%rsp)
    0.00 :   2a9a74:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2a9a79:       mov    (%rsp),%rbx
    0.00 :   2a9a7d:       mov    0x18(%rsp),%rdi
    0.00 :   2a9a82:       mov    $0x1,%edx
    0.00 :   2a9a87:       mov    $0x2,%esi
    0.00 :   2a9a8c:       mov    %rbx,%rcx
    0.00 :   2a9a8f:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a9a94:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9a97:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9a9f:       add    $0x10,%rax
    0.00 :   2a9aa3:       cmp    %rax,%rdi
    0.00 :   2a9aa6:       je     2a9aad <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xfad>
    0.00 :   2a9aa8:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9aad:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9ab2:       add    $0x10,%r15
    0.00 :   2a9ab6:       cmp    %r15,%rdi
    0.00 :   2a9ab9:       je     2a9ac0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xfc0>
    0.00 :   2a9abb:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2a9ac0:       mov    0xf0(%rsp),%r12
    0.00 :   2a9ac8:       mov    0xe8(%rsp),%rbx
    0.00 :   2a9ad0:       cmp    %rbx,%r12
    0.00 :   2a9ad3:       je     2a9afa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xffa>
    0.00 :   2a9ad5:       nopl   (%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9ad8:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9adb:       lea    0x10(%rbx),%rax
    0.00 :   2a9adf:       cmp    %rax,%rdi
    0.00 :   2a9ae2:       je     2a9ae9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xfe9>
    0.00 :   2a9ae4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a9ae9:       add    $0x20,%rbx
    0.00 :   2a9aed:       cmp    %rbx,%r12
    0.00 :   2a9af0:       jne    2a9ad8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xfd8>
    0.00 :   2a9af2:       mov    0xe8(%rsp),%rbx
         :            if (__p)
    0.00 :   2a9afa:       test   %rbx,%rbx
    0.00 :   2a9afd:       je     2a9b07 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1007>
    0.00 :   2a9aff:       mov    %rbx,%rdi
    0.00 :   2a9b02:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9b07:       mov    0xc8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9b0f:       lea    0x38(%rbp),%rax
    0.00 :   2a9b13:       cmp    %rax,%rdi
    0.00 :   2a9b16:       je     2a9b1d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x101d>
    0.00 :   2a9b18:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9b1d:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9b25:       add    $0x10,%rbp
    0.00 :   2a9b29:       cmp    %rbp,%rdi
    0.00 :   2a9b2c:       je     2a9b33 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1033>
    0.00 :   2a9b2e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a9b33:       mov    %r14,%rdi
    0.00 :   2a9b36:       jmpq   2a9226 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x726>
    0.00 :   2a9b3b:       nopl   0x0(%rax,%rax,1)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b40:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b48:       lea    0x5a0f36(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b4f:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b53:       lea    -0x45(%rdx),%rsi
    0.00 :   2a9b57:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b5a:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b62:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a9b67:       lea    0x5a1131(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b6e:       lea    0x38(%rbp),%rax
    0.00 :   2a9b72:       movl   $0x65,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b7d:       lea    0x28(%rbp),%rdi
    0.00 :   2a9b81:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9b85:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9b8d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a9b92:       lea    0x60(%rsp),%r15
    0.00 :   2a9b97:       xor    %edx,%edx
    0.00 :   2a9b99:       mov    %rbp,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a9b9c:       movq   $0x0,0xe8(%rsp)
    0.00 :   2a9ba8:       movq   $0x0,0xf0(%rsp)
    0.00 :   2a9bb4:       mov    %r15,%rdi
    0.00 :   2a9bb7:       movq   $0x0,0xf8(%rsp)
    0.00 :   2a9bc3:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2a9bc8:       lea    0x100(%rsp),%rbx
    0.00 :   2a9bd0:       lea    0x70(%rbx),%rdi
    0.00 :   2a9bd4:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2a9bd9:       mov    0x97df48(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a9be0:       xor    %esi,%esi
    0.00 :   2a9be2:       movq   $0x0,0x248(%rsp)
    0.00 :   2a9bee:       mov    %si,0x250(%rsp)
         :            { this->init(0); }
    0.00 :   2a9bf6:       xor    %esi,%esi
    0.00 :   2a9bf8:       mov    %rax,0x20(%rsp)
    0.00 :   2a9bfd:       add    $0x10,%rax
    0.00 :   2a9c01:       mov    %rax,0x170(%rsp)
    0.00 :   2a9c09:       mov    0x97e190(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2a9c10:       movq   $0x0,0x258(%rsp)
    0.00 :   2a9c1c:       movq   $0x0,0x260(%rsp)
    0.00 :   2a9c28:       mov    0x8(%rax),%rcx
    0.00 :   2a9c2c:       movq   $0x0,0x268(%rsp)
    0.00 :   2a9c38:       mov    0x10(%rax),%rax
    0.00 :   2a9c3c:       mov    -0x18(%rcx),%rdi
    0.00 :   2a9c40:       mov    %rcx,0x100(%rsp)
    0.00 :   2a9c48:       movq   $0x0,0x270(%rsp)
    0.00 :   2a9c54:       add    %rbx,%rdi
    0.00 :   2a9c57:       mov    %rcx,0x28(%rsp)
    0.00 :   2a9c5c:       mov    %rax,(%rdi)
    0.00 :   2a9c5f:       mov    %rax,0x30(%rsp)
    0.00 :   2a9c64:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2a9c69:       mov    0x97e0f0(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2a9c70:       lea    0x40(%rbx),%rdi
    0.00 :   2a9c74:       movq   $0x0,0x110(%rsp)
    0.00 :   2a9c80:       movq   $0x0,0x118(%rsp)
    0.00 :   2a9c8c:       lea    0x18(%r12),%rax
    0.00 :   2a9c91:       movq   $0x0,0x120(%rsp)
    0.00 :   2a9c9d:       mov    %rax,0x100(%rsp)
    0.00 :   2a9ca5:       lea    0x40(%r12),%rax
    0.00 :   2a9caa:       mov    %rax,0x170(%rsp)
    0.00 :   2a9cb2:       mov    0x97dfa7(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2a9cb9:       movq   $0x0,0x128(%rsp)
    0.00 :   2a9cc5:       mov    %rax,0x8(%rsp)
    0.00 :   2a9cca:       add    $0x10,%rax
    0.00 :   2a9cce:       mov    %rax,0x108(%rsp)
    0.00 :   2a9cd6:       movq   $0x0,0x130(%rsp)
    0.00 :   2a9ce2:       movq   $0x0,0x138(%rsp)
    0.00 :   2a9cee:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a9cf3:       mov    0x97e2de(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a9cfa:       lea    0x8(%rbx),%rsi
    0.00 :   2a9cfe:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2a9d02:       movl   $0x10,0x148(%rsp)
    0.00 :   2a9d0d:       mov    %rax,0x10(%rsp)
    0.00 :   2a9d12:       add    $0x10,%rax
    0.00 :   2a9d16:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a9d1e:       lea    0x60(%rbx),%rax
    0.00 :   2a9d22:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2a9d2a:       movq   $0x0,0x158(%rsp)
    0.00 :   2a9d36:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2a9d3e:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2a9d43:       mov    0x68(%rsp),%rdx
    0.00 :   2a9d48:       mov    0x60(%rsp),%rsi
    0.00 :   2a9d4d:       mov    %rbx,%rdi
    0.00 :   2a9d50:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2a9d55:       mov    $0x1,%edx
    0.00 :   2a9d5a:       lea    0x57d9da(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2a9d61:       mov    %rbx,%rdi
    0.00 :   2a9d64:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2a9d69:       mov    $0x26,%edx
    0.00 :   2a9d6e:       lea    0x5a0d6b(%rip),%rsi        # 84aae0 <typeinfo name for onnxruntime::Hardmax<float>+0xc0>
    0.00 :   2a9d75:       mov    %rbx,%rdi
    0.00 :   2a9d78:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   2a9d7d:       mov    %rbx,%rdi
    0.00 :   2a9d80:       mov    %r13,%rsi
    0.00 :   2a9d83:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9d88:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2a9d90:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9d9c:       lea    0x10(%rdi),%rax
    0.00 :   2a9da0:       mov    %rdi,(%rsp)
    0.00 :   2a9da4:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2a9dac:       mov    0x130(%rsp),%rax
    0.00 :   2a9db4:       movb   $0x0,0x90(%rsp)
    0.00 :   2a9dbc:       test   %rax,%rax
    0.00 :   2a9dbf:       je     2ab049 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2549>
         :            if (this->pptr() > this->egptr())
    0.00 :   2a9dc5:       mov    0x120(%rsp),%r8
    0.00 :   2a9dcd:       mov    0x128(%rsp),%rcx
    0.00 :   2a9dd5:       cmp    %r8,%rax
    0.00 :   2a9dd8:       ja     2aa3e5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x18e5>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2a9dde:       mov    (%rsp),%rdi
    0.00 :   2a9de2:       sub    %rcx,%r8
    0.00 :   2a9de5:       xor    %edx,%edx
    0.00 :   2a9de7:       xor    %esi,%esi
    0.00 :   2a9de9:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2a9dee:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9df3:       mov    0x150(%rsp),%rdi
    0.00 :   2a9dfb:       mov    %rax,0x100(%rsp)
    0.00 :   2a9e03:       lea    0x40(%r12),%rax
    0.00 :   2a9e08:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2a9e10:       mov    0x10(%rsp),%rax
    0.00 :   2a9e15:       add    $0x10,%rax
    0.00 :   2a9e19:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2a9e21:       lea    0x60(%rbx),%rax
    0.00 :   2a9e25:       cmp    %rax,%rdi
    0.00 :   2a9e28:       je     2a9e2f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x132f>
    0.00 :   2a9e2a:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2a9e2f:       mov    0x8(%rsp),%rax
    0.00 :   2a9e34:       lea    0x40(%rbx),%rdi
    0.00 :   2a9e38:       add    $0x10,%rax
    0.00 :   2a9e3c:       mov    %rax,0x108(%rsp)
    0.00 :   2a9e44:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2a9e49:       mov    0x28(%rsp),%rax
    0.00 :   2a9e4e:       mov    0x30(%rsp),%rcx
         :            ~basic_ios() { }
    0.00 :   2a9e53:       lea    0x70(%rbx),%rdi
    0.00 :   2a9e57:       mov    %rax,0x100(%rsp)
    0.00 :   2a9e5f:       mov    -0x18(%rax),%rax
    0.00 :   2a9e63:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2a9e6b:       mov    0x20(%rsp),%rax
    0.00 :   2a9e70:       add    $0x10,%rax
    0.00 :   2a9e74:       mov    %rax,0x170(%rsp)
    0.00 :   2a9e7c:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2a9e81:       mov    (%rsp),%rbx
    0.00 :   2a9e85:       mov    0x18(%rsp),%rdi
    0.00 :   2a9e8a:       mov    $0x1,%edx
    0.00 :   2a9e8f:       mov    $0x2,%esi
    0.00 :   2a9e94:       mov    %rbx,%rcx
    0.00 :   2a9e97:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a9e9c:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9e9f:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9ea7:       add    $0x10,%rax
    0.00 :   2a9eab:       cmp    %rax,%rdi
    0.00 :   2a9eae:       je     2a9eb5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x13b5>
    0.00 :   2a9eb0:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9eb5:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9eba:       add    $0x10,%r15
    0.00 :   2a9ebe:       cmp    %r15,%rdi
    0.00 :   2a9ec1:       je     2a9ec8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x13c8>
    0.00 :   2a9ec3:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2a9ec8:       mov    0xf0(%rsp),%r12
    0.00 :   2a9ed0:       mov    0xe8(%rsp),%rbx
    0.00 :   2a9ed8:       cmp    %rbx,%r12
    0.00 :   2a9edb:       je     2a9afa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xffa>
    0.00 :   2a9ee1:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a9ee8:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2a9eeb:       lea    0x10(%rbx),%rax
    0.00 :   2a9eef:       cmp    %rax,%rdi
    0.00 :   2a9ef2:       je     2a9ef9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x13f9>
    0.00 :   2a9ef4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a9ef9:       add    $0x20,%rbx
    0.00 :   2a9efd:       cmp    %rbx,%r12
    0.00 :   2a9f00:       jne    2a9ee8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x13e8>
    0.00 :   2a9f02:       jmpq   2a9af2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xff2>
    0.00 :   2a9f07:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a9f10:       cmpb   $0x0,0x20(%rsp)
    0.00 :   2a9f15:       je     2aa3f9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x18f9>
    0.00 :   2a9f1b:       sub    $0x1,%r8
    0.00 :   2a9f1f:       mov    %rsi,0xc8(%r12)
    0.00 :   2a9f27:       movslq %r8d,%r8
    0.00 :   2a9f2a:       mov    (%rax,%r8,8),%rax
    0.00 :   2a9f2e:       mov    %rax,0xd8(%r12)
    0.00 :   2a9f36:       jmpq   2a966b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb6b>
    0.00 :   2a9f3b:       nopl   0x0(%rax,%rax,1)
    0.00 :   2a9f40:       cmp    $0x1,%rbp
    0.00 :   2a9f44:       je     2aa420 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1920>
    0.00 :   2a9f4a:       mov    (%rcx),%rax
    0.00 :   2a9f4d:       lea    -0x1(%rbp),%rsi
    0.00 :   2a9f51:       cmpb   $0x0,0x20(%rsp)
    0.00 :   2a9f56:       movslq %esi,%rsi
    0.00 :   2a9f59:       mov    (%rax,%rsi,8),%rsi
    0.00 :   2a9f5d:       mov    %rsi,0xd0(%r12)
    0.00 :   2a9f65:       jne    2aa42c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x192c>
    0.00 :   2a9f6b:       mov    0xd8(%r12),%rdx
    0.00 :   2a9f73:       sub    $0x2,%rbp
    0.00 :   2a9f77:       movslq %ebp,%rbp
    0.00 :   2a9f7a:       cmp    %rdx,(%rax,%rbp,8)
    0.00 :   2a9f7e:       je     2aa81e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1d1e>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9f84:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9f8c:       lea    0x5a0af2(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9f93:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9f97:       lea    -0x45(%rdx),%rsi
    0.00 :   2a9f9b:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9f9e:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9fa6:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a9fab:       lea    0x5a0ced(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9fb2:       lea    0x38(%rbp),%rax
    0.00 :   2a9fb6:       movl   $0x77,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9fc1:       lea    0x28(%rbp),%rdi
    0.00 :   2a9fc5:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2a9fc9:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a9fd1:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2a9fd6:       lea    0x60(%rsp),%r15
    0.00 :   2a9fdb:       xor    %edx,%edx
    0.00 :   2a9fdd:       mov    %rbp,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a9fe0:       movq   $0x0,0xe8(%rsp)
    0.00 :   2a9fec:       movq   $0x0,0xf0(%rsp)
    0.00 :   2a9ff8:       mov    %r15,%rdi
    0.00 :   2a9ffb:       movq   $0x0,0xf8(%rsp)
    0.00 :   2aa007:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2aa00c:       lea    0x100(%rsp),%rbx
    0.00 :   2aa014:       lea    0x70(%rbx),%rdi
    0.00 :   2aa018:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2aa01d:       mov    0x97db04(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa024:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   2aa026:       xor    %esi,%esi
    0.00 :   2aa028:       mov    %cx,0x250(%rsp)
    0.00 :   2aa030:       mov    %rax,0x20(%rsp)
    0.00 :   2aa035:       add    $0x10,%rax
    0.00 :   2aa039:       mov    %rax,0x170(%rsp)
    0.00 :   2aa041:       mov    0x97dd58(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2aa048:       movq   $0x0,0x248(%rsp)
    0.00 :   2aa054:       movq   $0x0,0x258(%rsp)
    0.00 :   2aa060:       mov    0x8(%rax),%r13
    0.00 :   2aa064:       movq   $0x0,0x260(%rsp)
    0.00 :   2aa070:       mov    0x10(%rax),%rax
    0.00 :   2aa074:       mov    -0x18(%r13),%rdi
    0.00 :   2aa078:       mov    %r13,0x100(%rsp)
    0.00 :   2aa080:       movq   $0x0,0x268(%rsp)
    0.00 :   2aa08c:       add    %rbx,%rdi
    0.00 :   2aa08f:       mov    %rax,0x28(%rsp)
    0.00 :   2aa094:       movq   $0x0,0x270(%rsp)
    0.00 :   2aa0a0:       mov    %rax,(%rdi)
    0.00 :   2aa0a3:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2aa0a8:       mov    0x97dcb1(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2aa0af:       lea    0x40(%rbx),%rdi
    0.00 :   2aa0b3:       movq   $0x0,0x110(%rsp)
    0.00 :   2aa0bf:       movq   $0x0,0x118(%rsp)
    0.00 :   2aa0cb:       lea    0x18(%r12),%rax
    0.00 :   2aa0d0:       movq   $0x0,0x120(%rsp)
    0.00 :   2aa0dc:       mov    %rax,0x100(%rsp)
    0.00 :   2aa0e4:       lea    0x40(%r12),%rax
    0.00 :   2aa0e9:       mov    %rax,0x170(%rsp)
    0.00 :   2aa0f1:       mov    0x97db68(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa0f8:       movq   $0x0,0x128(%rsp)
    0.00 :   2aa104:       mov    %rax,0x8(%rsp)
    0.00 :   2aa109:       add    $0x10,%rax
    0.00 :   2aa10d:       mov    %rax,0x108(%rsp)
    0.00 :   2aa115:       movq   $0x0,0x130(%rsp)
    0.00 :   2aa121:       movq   $0x0,0x138(%rsp)
    0.00 :   2aa12d:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa132:       mov    0x97de9f(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa139:       lea    0x8(%rbx),%rsi
    0.00 :   2aa13d:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa141:       movl   $0x10,0x148(%rsp)
    0.00 :   2aa14c:       mov    %rax,0x10(%rsp)
    0.00 :   2aa151:       add    $0x10,%rax
    0.00 :   2aa155:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2aa15d:       lea    0x60(%rbx),%rax
    0.00 :   2aa161:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2aa169:       movq   $0x0,0x158(%rsp)
    0.00 :   2aa175:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa17d:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2aa182:       mov    0x68(%rsp),%rdx
    0.00 :   2aa187:       mov    0x60(%rsp),%rsi
    0.00 :   2aa18c:       mov    %rbx,%rdi
    0.00 :   2aa18f:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2aa194:       mov    $0x1,%edx
    0.00 :   2aa199:       lea    0x57d59b(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2aa1a0:       mov    %rbx,%rdi
    0.00 :   2aa1a3:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2aa1a8:       mov    %rbx,%rdi
    0.00 :   2aa1ab:       mov    $0x19,%edx
    0.00 :   2aa1b0:       lea    0x5a09d2(%rip),%rsi        # 84ab89 <typeinfo name for onnxruntime::Hardmax<float>+0x169>
    0.00 :   2aa1b7:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa1bc:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2aa1c4:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa1d0:       lea    0x10(%rdi),%rax
    0.00 :   2aa1d4:       mov    %rdi,(%rsp)
    0.00 :   2aa1d8:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2aa1e0:       mov    0x130(%rsp),%rax
    0.00 :   2aa1e8:       movb   $0x0,0x90(%rsp)
    0.00 :   2aa1f0:       test   %rax,%rax
    0.00 :   2aa1f3:       je     2ab4cc <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x29cc>
         :            if (this->pptr() > this->egptr())
    0.00 :   2aa1f9:       mov    0x120(%rsp),%r8
    0.00 :   2aa201:       mov    0x128(%rsp),%rcx
    0.00 :   2aa209:       cmp    %r8,%rax
    0.00 :   2aa20c:       jbe    2ab05b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x255b>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2aa212:       sub    %rcx,%rax
    0.00 :   2aa215:       xor    %edx,%edx
    0.00 :   2aa217:       xor    %esi,%esi
    0.00 :   2aa219:       mov    %rax,%r8
    0.00 :   2aa21c:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2aa221:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa226:       mov    0x150(%rsp),%rdi
    0.00 :   2aa22e:       mov    %rax,0x100(%rsp)
    0.00 :   2aa236:       lea    0x40(%r12),%rax
    0.00 :   2aa23b:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2aa243:       mov    0x10(%rsp),%rax
    0.00 :   2aa248:       add    $0x10,%rax
    0.00 :   2aa24c:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2aa254:       lea    0x60(%rbx),%rax
    0.00 :   2aa258:       cmp    %rax,%rdi
    0.00 :   2aa25b:       je     2aa262 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1762>
    0.00 :   2aa25d:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2aa262:       mov    0x8(%rsp),%rax
    0.00 :   2aa267:       lea    0x40(%rbx),%rdi
    0.00 :   2aa26b:       add    $0x10,%rax
    0.00 :   2aa26f:       mov    %rax,0x108(%rsp)
    0.00 :   2aa277:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2aa27c:       mov    -0x18(%r13),%rax
    0.00 :   2aa280:       mov    0x28(%rsp),%rcx
    0.00 :   2aa285:       mov    %r13,0x100(%rsp)
         :            ~basic_ios() { }
    0.00 :   2aa28d:       lea    0x70(%rbx),%rdi
    0.00 :   2aa291:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2aa299:       mov    0x20(%rsp),%rax
    0.00 :   2aa29e:       add    $0x10,%rax
    0.00 :   2aa2a2:       mov    %rax,0x170(%rsp)
    0.00 :   2aa2aa:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2aa2af:       mov    (%rsp),%rbx
    0.00 :   2aa2b3:       mov    0x18(%rsp),%rdi
    0.00 :   2aa2b8:       mov    $0x1,%edx
    0.00 :   2aa2bd:       mov    $0x2,%esi
    0.00 :   2aa2c2:       mov    %rbx,%rcx
    0.00 :   2aa2c5:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2aa2ca:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa2cd:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa2d5:       add    $0x10,%rax
    0.00 :   2aa2d9:       cmp    %rax,%rdi
    0.00 :   2aa2dc:       je     2aa2e3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x17e3>
    0.00 :   2aa2de:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa2e3:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa2e8:       add    $0x10,%r15
    0.00 :   2aa2ec:       cmp    %r15,%rdi
    0.00 :   2aa2ef:       je     2aa2f6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x17f6>
    0.00 :   2aa2f1:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2aa2f6:       mov    0xf0(%rsp),%r12
    0.00 :   2aa2fe:       mov    0xe8(%rsp),%rbx
    0.00 :   2aa306:       cmp    %rbx,%r12
    0.00 :   2aa309:       je     2aa332 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1832>
    0.00 :   2aa30b:       nopl   0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa310:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa313:       lea    0x10(%rbx),%rax
    0.00 :   2aa317:       cmp    %rax,%rdi
    0.00 :   2aa31a:       je     2aa321 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1821>
    0.00 :   2aa31c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2aa321:       add    $0x20,%rbx
    0.00 :   2aa325:       cmp    %rbx,%r12
    0.00 :   2aa328:       jne    2aa310 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1810>
    0.00 :   2aa32a:       mov    0xe8(%rsp),%rbx
         :            if (__p)
    0.00 :   2aa332:       test   %rbx,%rbx
    0.00 :   2aa335:       je     2aa33f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x183f>
    0.00 :   2aa337:       mov    %rbx,%rdi
    0.00 :   2aa33a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa33f:       mov    0xc8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa347:       lea    0x38(%rbp),%rax
    0.00 :   2aa34b:       cmp    %rax,%rdi
    0.00 :   2aa34e:       je     2aa355 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1855>
    0.00 :   2aa350:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa355:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa35d:       add    $0x10,%rbp
    0.00 :   2aa361:       cmp    %rbp,%rdi
    0.00 :   2aa364:       je     2aa370 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1870>
    0.00 :   2aa366:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2aa36b:       nopl   0x0(%rax,%rax,1)
    0.00 :   2aa370:       test   %r14,%r14
    0.00 :   2aa373:       je     2a922b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x72b>
    0.00 :   2aa379:       jmpq   2a9b33 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1033>
    0.00 :   2aa37e:       xchg   %ax,%ax
    0.00 :   2aa380:       mov    %rbx,%rdx
    0.00 :   2aa383:       mov    %r8,0x28(%rsp)
    0.00 :   2aa388:       sub    %r8,%rdx
    0.00 :   2aa38b:       cmp    %rax,%r8
    0.00 :   2aa38e:       cmovbe %r8,%rax
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   2aa392:       lea    (%rdi,%rdx,8),%rdi
    0.00 :   2aa396:       lea    0x0(,%rax,8),%rdx
         :            memcpy():
    0.00 :   2aa39e:       callq  53150 <memcpy@plt>
    0.00 :   2aa3a3:       mov    0x28(%rsp),%r8
    0.00 :   2aa3a8:       mov    0x30(%rsp),%r9
    0.00 :   2aa3ad:       mov    0x38(%rsp),%rcx
    0.00 :   2aa3b2:       jmpq   2a9562 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xa62>
    0.00 :   2aa3b7:       nopw   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime19MatMulComputeHelper7ComputeERKNS_11TensorShapeES3_bb():
    0.00 :   2aa3c0:       mov    (%rsi,%rax,8),%rax
    0.00 :   2aa3c4:       mov    %r10,%rdi
    0.00 :   2aa3c7:       mov    %rax,-0x8(%rdx,%r14,1)
    0.00 :   2aa3cc:       jmpq   2a94c6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x9c6>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2aa3d1:       sub    %rcx,%rax
    0.00 :   2aa3d4:       xor    %edx,%edx
    0.00 :   2aa3d6:       xor    %esi,%esi
    0.00 :   2aa3d8:       mov    %rax,%r8
    0.00 :   2aa3db:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2aa3e0:       jmpq   2a99e6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xee6>
    0.00 :   2aa3e5:       sub    %rcx,%rax
    0.00 :   2aa3e8:       xor    %edx,%edx
    0.00 :   2aa3ea:       xor    %esi,%esi
    0.00 :   2aa3ec:       mov    %rax,%r8
    0.00 :   2aa3ef:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2aa3f4:       jmpq   2a9dee <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x12ee>
   57.08 :   2aa3f9:       lea    -0x2(%r8),%rsi
    0.00 :   2aa3fd:       movslq %esi,%rsi
    0.00 :   2aa400:       mov    (%rax,%rsi,8),%rsi
    0.00 :   2aa404:       jmpq   2a9f1b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x141b>
    0.00 :   2aa409:       lea    -0x1(%r8),%rsi
    0.00 :   2aa40d:       movslq %esi,%rsi
    0.00 :   2aa410:       mov    (%rax,%rsi,8),%rsi
    0.00 :   2aa414:       jmpq   2a9650 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb50>
    0.00 :   2aa419:       nopl   0x0(%rax)
    0.00 :   2aa420:       movq   $0x1,0xd0(%r12)
    0.00 :   2aa42c:       test   %r9,%r9
    0.00 :   2aa42f:       jne    2aab81 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2081>
    0.00 :   2aa435:       cmpq   $0x1,0xc8(%r12)
    0.00 :   2aa43e:       jne    2aa44f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x194f>
    0.00 :   2aa440:       cmpq   $0x1,0xd0(%r12)
    0.00 :   2aa449:       je     2aacc7 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21c7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa44f:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa457:       lea    0x5a0627(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa45e:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa462:       lea    -0x45(%rdx),%rsi
    0.00 :   2aa466:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa469:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa471:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aa476:       lea    0x5a0822(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa47d:       lea    0x38(%rbp),%rax
    0.00 :   2aa481:       movl   $0x7f,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa48c:       lea    0x28(%rbp),%rdi
    0.00 :   2aa490:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa494:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa49c:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aa4a1:       lea    0x60(%rsp),%r15
    0.00 :   2aa4a6:       xor    %edx,%edx
    0.00 :   2aa4a8:       mov    %rbp,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2aa4ab:       movq   $0x0,0xe8(%rsp)
    0.00 :   2aa4b7:       movq   $0x0,0xf0(%rsp)
    0.00 :   2aa4c3:       mov    %r15,%rdi
    0.00 :   2aa4c6:       movq   $0x0,0xf8(%rsp)
    0.00 :   2aa4d2:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2aa4d7:       lea    0x100(%rsp),%rbx
    0.00 :   2aa4df:       lea    0x70(%rbx),%rdi
    0.00 :   2aa4e3:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2aa4e8:       mov    0x97d639(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            { this->init(0); }
    0.00 :   2aa4ef:       xor    %esi,%esi
    0.00 :   2aa4f1:       movq   $0x0,0x248(%rsp)
    0.00 :   2aa4fd:       movq   $0x0,0x258(%rsp)
    0.00 :   2aa509:       mov    %rax,0x20(%rsp)
    0.00 :   2aa50e:       add    $0x10,%rax
    0.00 :   2aa512:       mov    %rax,0x170(%rsp)
    0.00 :   2aa51a:       xor    %eax,%eax
    0.00 :   2aa51c:       mov    %ax,0x250(%rsp)
    0.00 :   2aa524:       mov    0x97d875(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2aa52b:       movq   $0x0,0x260(%rsp)
    0.00 :   2aa537:       movq   $0x0,0x268(%rsp)
    0.00 :   2aa543:       mov    0x8(%rax),%r13
    0.00 :   2aa547:       movq   $0x0,0x270(%rsp)
    0.00 :   2aa553:       mov    0x10(%rax),%rax
    0.00 :   2aa557:       mov    -0x18(%r13),%rdi
    0.00 :   2aa55b:       mov    %r13,0x100(%rsp)
    0.00 :   2aa563:       mov    %rax,0x28(%rsp)
    0.00 :   2aa568:       add    %rbx,%rdi
    0.00 :   2aa56b:       mov    %rax,(%rdi)
    0.00 :   2aa56e:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2aa573:       mov    0x97d7e6(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2aa57a:       lea    0x40(%rbx),%rdi
    0.00 :   2aa57e:       movq   $0x0,0x110(%rsp)
    0.00 :   2aa58a:       movq   $0x0,0x118(%rsp)
    0.00 :   2aa596:       lea    0x18(%r12),%rax
    0.00 :   2aa59b:       movq   $0x0,0x120(%rsp)
    0.00 :   2aa5a7:       mov    %rax,0x100(%rsp)
    0.00 :   2aa5af:       lea    0x40(%r12),%rax
    0.00 :   2aa5b4:       mov    %rax,0x170(%rsp)
    0.00 :   2aa5bc:       mov    0x97d69d(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa5c3:       movq   $0x0,0x128(%rsp)
    0.00 :   2aa5cf:       mov    %rax,0x8(%rsp)
    0.00 :   2aa5d4:       add    $0x10,%rax
    0.00 :   2aa5d8:       mov    %rax,0x108(%rsp)
    0.00 :   2aa5e0:       movq   $0x0,0x130(%rsp)
    0.00 :   2aa5ec:       movq   $0x0,0x138(%rsp)
    0.00 :   2aa5f8:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa5fd:       mov    0x97d9d4(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa604:       lea    0x8(%rbx),%rsi
    0.00 :   2aa608:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa60c:       movl   $0x10,0x148(%rsp)
    0.00 :   2aa617:       mov    %rax,0x10(%rsp)
    0.00 :   2aa61c:       add    $0x10,%rax
    0.00 :   2aa620:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2aa628:       lea    0x60(%rbx),%rax
    0.00 :   2aa62c:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2aa634:       movq   $0x0,0x158(%rsp)
    0.00 :   2aa640:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa648:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2aa64d:       mov    0x68(%rsp),%rdx
    0.00 :   2aa652:       mov    0x60(%rsp),%rsi
    0.00 :   2aa657:       mov    %rbx,%rdi
    0.00 :   2aa65a:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2aa65f:       mov    $0x1,%edx
    0.00 :   2aa664:       lea    0x57d0d0(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2aa66b:       mov    %rbx,%rdi
    0.00 :   2aa66e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2aa673:       mov    %rbx,%rdi
    0.00 :   2aa676:       mov    $0x1c,%edx
    0.00 :   2aa67b:       lea    0x5a0521(%rip),%rsi        # 84aba3 <typeinfo name for onnxruntime::Hardmax<float>+0x183>
    0.00 :   2aa682:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa687:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2aa68f:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa69b:       lea    0x10(%rdi),%rax
    0.00 :   2aa69f:       mov    %rdi,(%rsp)
    0.00 :   2aa6a3:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2aa6ab:       mov    0x130(%rsp),%rax
    0.00 :   2aa6b3:       movb   $0x0,0x90(%rsp)
    0.00 :   2aa6bb:       test   %rax,%rax
    0.00 :   2aa6be:       je     2ab4de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x29de>
         :            if (this->pptr() > this->egptr())
    0.00 :   2aa6c4:       mov    0x120(%rsp),%r8
    0.00 :   2aa6cc:       mov    0x128(%rsp),%rcx
    0.00 :   2aa6d4:       cmp    %r8,%rax
    0.00 :   2aa6d7:       jbe    2ab070 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2570>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2aa6dd:       sub    %rcx,%rax
    0.00 :   2aa6e0:       xor    %edx,%edx
    0.00 :   2aa6e2:       xor    %esi,%esi
    0.00 :   2aa6e4:       mov    %rax,%r8
    0.00 :   2aa6e7:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2aa6ec:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa6f1:       mov    0x150(%rsp),%rdi
    0.00 :   2aa6f9:       mov    %rax,0x100(%rsp)
    0.00 :   2aa701:       lea    0x40(%r12),%rax
    0.00 :   2aa706:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2aa70e:       mov    0x10(%rsp),%rax
    0.00 :   2aa713:       add    $0x10,%rax
    0.00 :   2aa717:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2aa71f:       lea    0x60(%rbx),%rax
    0.00 :   2aa723:       cmp    %rax,%rdi
    0.00 :   2aa726:       je     2aa72d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1c2d>
         :            ::operator delete(__p);
    0.00 :   2aa728:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2aa72d:       mov    0x8(%rsp),%rax
    0.00 :   2aa732:       lea    0x40(%rbx),%rdi
    0.00 :   2aa736:       add    $0x10,%rax
    0.00 :   2aa73a:       mov    %rax,0x108(%rsp)
    0.00 :   2aa742:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2aa747:       mov    -0x18(%r13),%rax
    0.00 :   2aa74b:       mov    0x28(%rsp),%rcx
    0.00 :   2aa750:       mov    %r13,0x100(%rsp)
         :            ~basic_ios() { }
    0.00 :   2aa758:       lea    0x70(%rbx),%rdi
    0.00 :   2aa75c:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2aa764:       mov    0x20(%rsp),%rax
    0.00 :   2aa769:       add    $0x10,%rax
    0.00 :   2aa76d:       mov    %rax,0x170(%rsp)
    0.00 :   2aa775:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2aa77a:       mov    (%rsp),%rbx
    0.00 :   2aa77e:       mov    0x18(%rsp),%rdi
    0.00 :   2aa783:       mov    $0x1,%edx
    0.00 :   2aa788:       mov    $0x2,%esi
    0.00 :   2aa78d:       mov    %rbx,%rcx
    0.00 :   2aa790:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2aa795:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa798:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa7a0:       add    $0x10,%rax
    0.00 :   2aa7a4:       cmp    %rax,%rdi
    0.00 :   2aa7a7:       je     2aa7ae <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1cae>
    0.00 :   2aa7a9:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aa7ae:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aa7b3:       add    $0x10,%r15
    0.00 :   2aa7b7:       cmp    %r15,%rdi
    0.00 :   2aa7ba:       je     2aa7c1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1cc1>
    0.00 :   2aa7bc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2aa7c1:       mov    %rbp,%rdi
    0.00 :   2aa7c4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2aa7c9:       jmpq   2aa370 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1870>
    0.00 :   2aa7ce:       lea    -0x1(%rbp),%rbx
    0.00 :   2aa7d2:       mov    %rcx,%rdi
    0.00 :   2aa7d5:       mov    %r8,0x20(%rsp)
    0.00 :   2aa7da:       lea    -0x2(%rbp),%r14
    0.00 :   2aa7de:       mov    %rbx,%rsi
    0.00 :   2aa7e1:       mov    %rcx,0x10(%rsp)
    0.00 :   2aa7e6:       movslq %r14d,%r14
    0.00 :   2aa7e9:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   2aa7ee:       mov    0x10(%rsp),%rcx
    0.00 :   2aa7f3:       mov    0x20(%rsp),%r8
    0.00 :   2aa7f8:       mov    (%rcx),%rdx
    0.00 :   2aa7fb:       cmp    %rax,(%rdx,%r14,8)
    0.00 :   2aa7ff:       je     2ab4f0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x29f0>
    0.00 :   2aa805:       cmp    %rbp,%r8
    0.00 :   2aa808:       mov    %rbp,%rdx
    0.00 :   2aa80b:       movb   $0x0,0x20(%rsp)
    0.00 :   2aa810:       cmovae %r8,%rdx
    0.00 :   2aa814:       movb   $0x0,0x10(%rsp)
    0.00 :   2aa819:       jmpq   2a92d9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x7d9>
    0.00 :   2aa81e:       cmp    %r9,%rbx
    0.00 :   2aa821:       je     2aacae <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21ae>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa827:       lea    0xa0(%rsp),%rbp
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa82f:       lea    0x5a024f(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa836:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa83a:       lea    -0x45(%rdx),%rsi
    0.00 :   2aa83e:       mov    %rbp,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa841:       mov    %rax,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa849:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aa84e:       lea    0x5a044a(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa855:       lea    0x38(%rbp),%rax
    0.00 :   2aa859:       movl   $0x79,0xc0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa864:       lea    0x28(%rbp),%rdi
    0.00 :   2aa868:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aa86c:       mov    %rax,0xc8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aa874:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aa879:       lea    0x60(%rsp),%r15
    0.00 :   2aa87e:       xor    %edx,%edx
    0.00 :   2aa880:       mov    %rbp,%rsi
    0.00 :   2aa883:       movq   $0x0,0xe8(%rsp)
    0.00 :   2aa88f:       movq   $0x0,0xf0(%rsp)
    0.00 :   2aa89b:       mov    %r15,%rdi
    0.00 :   2aa89e:       movq   $0x0,0xf8(%rsp)
    0.00 :   2aa8aa:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   2aa8af:       lea    0x100(%rsp),%rbx
    0.00 :   2aa8b7:       lea    0x70(%rbx),%rdi
    0.00 :   2aa8bb:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   2aa8c0:       mov    0x97d261(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa8c7:       xor    %edx,%edx
         :            { this->init(0); }
    0.00 :   2aa8c9:       xor    %esi,%esi
    0.00 :   2aa8cb:       mov    %dx,0x250(%rsp)
    0.00 :   2aa8d3:       mov    %rax,0x20(%rsp)
    0.00 :   2aa8d8:       add    $0x10,%rax
    0.00 :   2aa8dc:       mov    %rax,0x170(%rsp)
    0.00 :   2aa8e4:       mov    0x97d4b5(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   2aa8eb:       movq   $0x0,0x248(%rsp)
    0.00 :   2aa8f7:       movq   $0x0,0x258(%rsp)
    0.00 :   2aa903:       mov    0x8(%rax),%r13
    0.00 :   2aa907:       movq   $0x0,0x260(%rsp)
    0.00 :   2aa913:       mov    0x10(%rax),%rax
    0.00 :   2aa917:       mov    -0x18(%r13),%rdi
    0.00 :   2aa91b:       mov    %r13,0x100(%rsp)
    0.00 :   2aa923:       movq   $0x0,0x268(%rsp)
    0.00 :   2aa92f:       add    %rbx,%rdi
    0.00 :   2aa932:       mov    %rax,0x28(%rsp)
    0.00 :   2aa937:       movq   $0x0,0x270(%rsp)
    0.00 :   2aa943:       mov    %rax,(%rdi)
    0.00 :   2aa946:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2aa94b:       mov    0x97d40e(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   2aa952:       lea    0x40(%rbx),%rdi
    0.00 :   2aa956:       movq   $0x0,0x110(%rsp)
    0.00 :   2aa962:       movq   $0x0,0x118(%rsp)
    0.00 :   2aa96e:       lea    0x18(%r12),%rax
    0.00 :   2aa973:       movq   $0x0,0x120(%rsp)
    0.00 :   2aa97f:       mov    %rax,0x100(%rsp)
    0.00 :   2aa987:       lea    0x40(%r12),%rax
    0.00 :   2aa98c:       mov    %rax,0x170(%rsp)
    0.00 :   2aa994:       mov    0x97d2c5(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   2aa99b:       movq   $0x0,0x128(%rsp)
    0.00 :   2aa9a7:       mov    %rax,0x8(%rsp)
    0.00 :   2aa9ac:       add    $0x10,%rax
    0.00 :   2aa9b0:       mov    %rax,0x108(%rsp)
    0.00 :   2aa9b8:       movq   $0x0,0x130(%rsp)
    0.00 :   2aa9c4:       movq   $0x0,0x138(%rsp)
    0.00 :   2aa9d0:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa9d5:       mov    0x97d5fc(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aa9dc:       lea    0x8(%rbx),%rsi
    0.00 :   2aa9e0:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   2aa9e4:       movl   $0x10,0x148(%rsp)
    0.00 :   2aa9ef:       mov    %rax,0x10(%rsp)
    0.00 :   2aa9f4:       add    $0x10,%rax
    0.00 :   2aa9f8:       mov    %rax,0x108(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2aaa00:       lea    0x60(%rbx),%rax
    0.00 :   2aaa04:       mov    %rax,0x150(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   2aaa0c:       movq   $0x0,0x158(%rsp)
    0.00 :   2aaa18:       movb   $0x0,0x160(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   2aaa20:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   2aaa25:       mov    0x68(%rsp),%rdx
    0.00 :   2aaa2a:       mov    0x60(%rsp),%rsi
    0.00 :   2aaa2f:       mov    %rbx,%rdi
    0.00 :   2aaa32:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   2aaa37:       mov    $0x1,%edx
    0.00 :   2aaa3c:       lea    0x57ccf8(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2aaa43:       mov    %rbx,%rdi
    0.00 :   2aaa46:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   2aaa4b:       mov    %rbx,%rdi
    0.00 :   2aaa4e:       mov    $0x24,%edx
    0.00 :   2aaa53:       lea    0x5a00ae(%rip),%rsi        # 84ab08 <typeinfo name for onnxruntime::Hardmax<float>+0xe8>
    0.00 :   2aaa5a:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aaa5f:       lea    0x80(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   2aaa67:       movq   $0x0,0x88(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aaa73:       lea    0x10(%rdi),%rax
    0.00 :   2aaa77:       mov    %rdi,(%rsp)
    0.00 :   2aaa7b:       mov    %rax,0x80(%rsp)
         :            if (this->pptr())
    0.00 :   2aaa83:       mov    0x130(%rsp),%rax
    0.00 :   2aaa8b:       movb   $0x0,0x90(%rsp)
    0.00 :   2aaa93:       test   %rax,%rax
    0.00 :   2aaa96:       je     2ab6b0 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bb0>
         :            if (this->pptr() > this->egptr())
    0.00 :   2aaa9c:       mov    0x120(%rsp),%r8
    0.00 :   2aaaa4:       mov    0x128(%rsp),%rcx
    0.00 :   2aaaac:       cmp    %r8,%rax
    0.00 :   2aaaaf:       jbe    2ab2f5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x27f5>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2aaab5:       sub    %rcx,%rax
    0.00 :   2aaab8:       xor    %edx,%edx
    0.00 :   2aaaba:       xor    %esi,%esi
    0.00 :   2aaabc:       mov    %rax,%r8
    0.00 :   2aaabf:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   2aaac4:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aaac9:       mov    0x150(%rsp),%rdi
    0.00 :   2aaad1:       mov    %rax,0x100(%rsp)
    0.00 :   2aaad9:       lea    0x40(%r12),%rax
    0.00 :   2aaade:       mov    %rax,0x170(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   2aaae6:       mov    0x10(%rsp),%rax
    0.00 :   2aaaeb:       add    $0x10,%rax
    0.00 :   2aaaef:       mov    %rax,0x108(%rsp)
         :            if (!_M_is_local())
    0.00 :   2aaaf7:       lea    0x60(%rbx),%rax
    0.00 :   2aaafb:       cmp    %rax,%rdi
    0.00 :   2aaafe:       je     2aab05 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2005>
    0.00 :   2aab00:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   2aab05:       mov    0x8(%rsp),%rax
    0.00 :   2aab0a:       lea    0x40(%rbx),%rdi
    0.00 :   2aab0e:       add    $0x10,%rax
    0.00 :   2aab12:       mov    %rax,0x108(%rsp)
    0.00 :   2aab1a:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   2aab1f:       mov    -0x18(%r13),%rax
    0.00 :   2aab23:       mov    0x28(%rsp),%rcx
    0.00 :   2aab28:       mov    %r13,0x100(%rsp)
         :            ~basic_ios() { }
    0.00 :   2aab30:       lea    0x70(%rbx),%rdi
    0.00 :   2aab34:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2aab3c:       mov    0x20(%rsp),%rax
    0.00 :   2aab41:       add    $0x10,%rax
    0.00 :   2aab45:       mov    %rax,0x170(%rsp)
    0.00 :   2aab4d:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2aab52:       mov    (%rsp),%rbx
    0.00 :   2aab56:       mov    0x18(%rsp),%rdi
    0.00 :   2aab5b:       mov    $0x1,%edx
    0.00 :   2aab60:       mov    $0x2,%esi
    0.00 :   2aab65:       mov    %rbx,%rcx
    0.00 :   2aab68:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2aab6d:       jmpq   2aa795 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1c95>
    0.00 :   2aab72:       nopw   0x0(%rax,%rax,1)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2aab78:       xor    %eax,%eax
    0.00 :   2aab7a:       xor    %edx,%edx
    0.00 :   2aab7c:       jmpq   2a93dd <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x8dd>
    0.00 :   2aab81:       cmpb   $0x0,0x10(%rsp)
    0.00 :   2aab86:       jne    2ab17a <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x267a>
    0.00 :   2aab8c:       cmp    %rdx,%r9
    0.00 :   2aab8f:       je     2ab085 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2585>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aab95:       lea    0x100(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aab9d:       lea    0x59fee1(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aaba4:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aaba8:       lea    -0x45(%rdx),%rsi
    0.00 :   2aabac:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aabaf:       mov    %rax,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aabb7:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aabbc:       lea    0x5a00dc(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aabc3:       lea    0x38(%rbx),%rax
    0.00 :   2aabc7:       movl   $0x88,0x120(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aabd2:       lea    0x28(%rbx),%rdi
    0.00 :   2aabd6:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2aabda:       mov    %rax,0x128(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2aabe2:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2aabe7:       lea    0x80(%rsp),%rax
    0.00 :   2aabef:       xor    %edx,%edx
    0.00 :   2aabf1:       mov    %rbx,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2aabf4:       movq   $0x0,0x148(%rsp)
    0.00 :   2aac00:       mov    %rax,%rdi
    0.00 :   2aac03:       mov    %rax,(%rsp)
    0.00 :   2aac07:       movq   $0x0,0x150(%rsp)
    0.00 :   2aac13:       movq   $0x0,0x158(%rsp)
    0.00 :   2aac1f:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2aac24:       lea    0x59ff35(%rip),%rax        # 84ab60 <typeinfo name for onnxruntime::Hardmax<float>+0x140>
    0.00 :   2aac2b:       mov    (%rsp),%rsi
    0.00 :   2aac2f:       lea    0x58(%rsp),%rcx
    0.00 :   2aac34:       lea    0xa0(%rsp),%rbp
    0.00 :   2aac3c:       mov    %rax,0x58(%rsp)
    0.00 :   2aac41:       lea    0x50(%rsp),%rdx
    0.00 :   2aac46:       lea    0x57caee(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2aac4d:       mov    %rbp,%rdi
    0.00 :   2aac50:       mov    %rax,0x50(%rsp)
    0.00 :   2aac55:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2aac5a:       mov    0x18(%rsp),%rdi
    0.00 :   2aac5f:       mov    %rbp,%rcx
    0.00 :   2aac62:       mov    $0x1,%edx
    0.00 :   2aac67:       mov    $0x2,%esi
    0.00 :   2aac6c:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aac71:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aac79:       add    $0x10,%rbp
    0.00 :   2aac7d:       cmp    %rbp,%rdi
    0.00 :   2aac80:       je     2aac87 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2187>
    0.00 :   2aac82:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2aac87:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aac8b:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aac93:       add    $0x10,%rax
    0.00 :   2aac97:       cmp    %rax,%rdi
    0.00 :   2aac9a:       je     2aaca1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21a1>
    0.00 :   2aac9c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2aaca1:       mov    %rbx,%rdi
    0.00 :   2aaca4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2aaca9:       jmpq   2aa370 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1870>
    0.00 :   2aacae:       mov    0xc8(%r12),%rax
    0.00 :   2aacb6:       mov    %rax,(%r14,%r10,8)
    0.00 :   2aacba:       mov    0xd0(%r12),%rax
    0.00 :   2aacc2:       mov    %rax,0x8(%r14,%r10,8)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aacc7:       mov    0x28(%rsp),%rbx
    0.00 :   2aaccc:       sub    %r14,%rbx
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2aaccf:       mov    %rbx,%rax
    0.00 :   2aacd2:       sar    $0x3,%rax
    0.00 :   2aacd6:       je     2ab2bc <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x27bc>
         :            if (__n > this->max_size())
    0.00 :   2aacdc:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   2aace6:       cmp    %rdx,%rax
    0.00 :   2aace9:       ja     2ab707 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c07>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2aacef:       mov    %rbx,%rdi
    0.00 :   2aacf2:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2aacf7:       mov    %rax,%rcx
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2aacfa:       lea    (%rcx,%rbx,1),%rbp
         :            if (_Num)
    0.00 :   2aacfe:       cmp    0x28(%rsp),%r14
    0.00 :   2aad03:       je     2aad16 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2216>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   2aad05:       mov    %rcx,%rdi
    0.00 :   2aad08:       mov    %rbx,%rdx
    0.00 :   2aad0b:       mov    %r14,%rsi
    0.00 :   2aad0e:       callq  53150 <memcpy@plt>
    0.00 :   2aad13:       mov    %rax,%rcx
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :   2aad16:       mov    0xb0(%r12),%rdi
         :            __a = _GLIBCXX_MOVE(__b);
    0.00 :   2aad1e:       mov    %rbp,0xb8(%r12)
    0.00 :   2aad26:       mov    %rcx,0xb0(%r12)
    0.00 :   2aad2e:       mov    %rbp,0xc0(%r12)
         :            if (__p)
    0.00 :   2aad36:       test   %rdi,%rdi
    0.00 :   2aad39:       je     2aad40 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2240>
         :            ::operator delete(__p);
    0.00 :   2aad3b:       callq  53300 <operator delete(void*)@plt>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aad40:       mov    0x28(%r12),%rax
    0.00 :   2aad45:       sub    0x20(%r12),%rax
    0.00 :   2aad4a:       sar    $0x3,%rax
    0.00 :   2aad4e:       sub    $0x2,%rax
    0.00 :   2aad52:       mov    %rax,0x18(%r12)
    0.00 :   2aad57:       je     2ab268 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2768>
    0.00 :   2aad5d:       mov    0xc8(%r12),%rdx
    0.00 :   2aad65:       mov    0xd8(%r12),%rcx
    0.00 :   2aad6d:       mov    %rdx,%rsi
    0.00 :   2aad70:       imul   %rcx,%rsi
    0.00 :   2aad74:       mov    %rsi,(%r12)
    0.00 :   2aad78:       mov    0xd0(%r12),%rsi
    0.00 :   2aad80:       imul   %rsi,%rcx
    0.00 :   2aad84:       imul   %rsi,%rdx
         :            if (__new_size > size())
    0.00 :   2aad88:       mov    0x68(%r12),%rsi
    0.00 :   2aad8d:       mov    %rcx,0x8(%r12)
    0.00 :   2aad92:       mov    0x70(%r12),%rcx
    0.00 :   2aad97:       mov    %rdx,0x10(%r12)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aad9c:       mov    %rcx,%rdx
    0.00 :   2aad9f:       sub    %rsi,%rdx
    0.00 :   2aada2:       sar    $0x3,%rdx
         :            if (__new_size > size())
    0.00 :   2aada6:       cmp    %rdx,%rax
    0.00 :   2aada9:       ja     2ab30a <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x280a>
         :            else if (__new_size < size())
    0.00 :   2aadaf:       jae    2aadbf <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22bf>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aadb1:       lea    (%rsi,%rax,8),%rdx
         :            // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         :            // _M_assign_aux.
         :            void
         :            _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
         :            {
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aadb5:       cmp    %rdx,%rcx
    0.00 :   2aadb8:       je     2aadbf <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22bf>
         :            {
         :            std::_Destroy(__pos, this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aadba:       mov    %rdx,0x70(%r12)
         :            if (__new_size > size())
    0.00 :   2aadbf:       mov    0x88(%r12),%rcx
    0.00 :   2aadc7:       mov    0x80(%r12),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aadcf:       mov    %rcx,%rdx
    0.00 :   2aadd2:       sub    %rsi,%rdx
    0.00 :   2aadd5:       sar    $0x3,%rdx
         :            if (__new_size > size())
    0.00 :   2aadd9:       cmp    %rdx,%rax
    0.00 :   2aaddc:       ja     2ab341 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2841>
         :            else if (__new_size < size())
    0.00 :   2aade2:       jae    2aadf5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22f5>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aade4:       lea    (%rsi,%rax,8),%rdx
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aade8:       cmp    %rdx,%rcx
    0.00 :   2aadeb:       je     2aadf5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22f5>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aaded:       mov    %rdx,0x88(%r12)
         :            if (__new_size > size())
    0.00 :   2aadf5:       mov    0xa0(%r12),%rcx
    0.00 :   2aadfd:       mov    0x98(%r12),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aae05:       mov    %rcx,%rdx
    0.00 :   2aae08:       sub    %rsi,%rdx
    0.00 :   2aae0b:       sar    $0x3,%rdx
         :            if (__new_size > size())
    0.00 :   2aae0f:       cmp    %rdx,%rax
    0.00 :   2aae12:       ja     2ab324 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2824>
         :            else if (__new_size < size())
    0.00 :   2aae18:       jae    2aae2b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x232b>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aae1a:       lea    (%rsi,%rax,8),%rdx
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aae1e:       cmp    %rdx,%rcx
    0.00 :   2aae21:       je     2aae2b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x232b>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aae23:       mov    %rdx,0xa0(%r12)
         :            if (__new_size > size())
    0.00 :   2aae2b:       mov    0x58(%r12),%rcx
    0.00 :   2aae30:       mov    0x50(%r12),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aae35:       mov    %rcx,%rdx
    0.00 :   2aae38:       sub    %rsi,%rdx
    0.00 :   2aae3b:       sar    $0x3,%rdx
         :            if (__new_size > size())
    0.00 :   2aae3f:       cmp    %rdx,%rax
    0.00 :   2aae42:       ja     2ab3a6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x28a6>
         :            else if (__new_size < size())
    0.00 :   2aae48:       jae    2aae58 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2358>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aae4a:       lea    (%rsi,%rax,8),%rdx
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aae4e:       cmp    %rdx,%rcx
    0.00 :   2aae51:       je     2aae58 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2358>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aae53:       mov    %rdx,0x58(%r12)
    0.00 :   2aae58:       mov    0x98(%r12),%rdi
    0.00 :   2aae60:       test   %rax,%rax
    0.00 :   2aae63:       je     2aaee9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x23e9>
    0.00 :   2aae69:       mov    0x38(%r12),%rcx
    0.00 :   2aae6e:       mov    0x20(%r12),%r10
    0.00 :   2aae73:       mov    0x68(%r12),%r9
    0.00 :   2aae78:       mov    0x80(%r12),%r8
    0.00 :   2aae80:       mov    -0x8(%r10,%rax,8),%rdx
    0.00 :   2aae85:       cmp    %rdx,-0x8(%rcx,%rax,8)
    0.00 :   2aae8a:       cmovge -0x8(%rcx,%rax,8),%rdx
    0.00 :   2aae90:       mov    %rdx,-0x8(%rsi,%rax,8)
    0.00 :   2aae95:       mov    $0x1,%edx
    0.00 :   2aae9a:       cmp    %rax,0x18(%r12)
    0.00 :   2aae9f:       je     2aaeaa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x23aa>
    0.00 :   2aaea1:       mov    (%rdi,%rax,8),%rdx
    0.00 :   2aaea5:       imul   (%rsi,%rax,8),%rdx
    0.00 :   2aaeaa:       mov    %rdx,-0x8(%rdi,%rax,8)
    0.00 :   2aaeaf:       mov    $0x1,%edx
    0.00 :   2aaeb4:       cmp    %rax,0x18(%r12)
    0.00 :   2aaeb9:       je     2aaec4 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x23c4>
    0.00 :   2aaebb:       mov    (%r9,%rax,8),%rdx
    0.00 :   2aaebf:       imul   (%r10,%rax,8),%rdx
    0.00 :   2aaec4:       mov    %rdx,-0x8(%r9,%rax,8)
    0.00 :   2aaec9:       mov    $0x1,%edx
    0.00 :   2aaece:       cmp    %rax,0x18(%r12)
    0.00 :   2aaed3:       je     2aaede <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x23de>
    0.00 :   2aaed5:       mov    (%r8,%rax,8),%rdx
    0.00 :   2aaed9:       imul   (%rcx,%rax,8),%rdx
    0.00 :   2aaede:       mov    %rdx,-0x8(%r8,%rax,8)
    0.00 :   2aaee3:       sub    $0x1,%rax
    0.00 :   2aaee7:       jne    2aae80 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2380>
         :            if (__new_size > size())
    0.00 :   2aaee9:       mov    0xe8(%r12),%rdx
    0.00 :   2aaef1:       mov    0xe0(%r12),%rcx
    0.00 :   2aaef9:       mov    (%rsi),%rbx
    0.00 :   2aaefc:       imul   (%rdi),%rbx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aaf00:       mov    %rdx,%rax
    0.00 :   2aaf03:       sub    %rcx,%rax
    0.00 :   2aaf06:       sar    $0x3,%rax
         :            if (__new_size > size())
    0.00 :   2aaf0a:       cmp    %rax,%rbx
    0.00 :   2aaf0d:       ja     2ab38e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x288e>
         :            else if (__new_size < size())
    0.00 :   2aaf13:       jae    2aaf26 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2426>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aaf15:       lea    (%rcx,%rbx,8),%rax
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aaf19:       cmp    %rax,%rdx
    0.00 :   2aaf1c:       je     2aaf26 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2426>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aaf1e:       mov    %rax,0xe8(%r12)
         :            if (__new_size > size())
    0.00 :   2aaf26:       mov    0x100(%r12),%rdx
    0.00 :   2aaf2e:       mov    0xf8(%r12),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aaf36:       mov    %rdx,%rax
    0.00 :   2aaf39:       sub    %rcx,%rax
    0.00 :   2aaf3c:       sar    $0x3,%rax
         :            if (__new_size > size())
    0.00 :   2aaf40:       cmp    %rax,%rbx
    0.00 :   2aaf43:       ja     2ab376 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2876>
         :            else if (__new_size < size())
    0.00 :   2aaf49:       jae    2aaf5c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x245c>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aaf4b:       lea    (%rcx,%rbx,8),%rax
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aaf4f:       cmp    %rax,%rdx
    0.00 :   2aaf52:       je     2aaf5c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x245c>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aaf54:       mov    %rax,0x100(%r12)
         :            if (__new_size > size())
    0.00 :   2aaf5c:       mov    0x118(%r12),%rdx
    0.00 :   2aaf64:       mov    0x110(%r12),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2aaf6c:       mov    %rdx,%rax
    0.00 :   2aaf6f:       sub    %rcx,%rax
    0.00 :   2aaf72:       sar    $0x3,%rax
         :            if (__new_size > size())
    0.00 :   2aaf76:       cmp    %rax,%rbx
    0.00 :   2aaf79:       ja     2ab35e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x285e>
         :            else if (__new_size < size())
    0.00 :   2aaf7f:       jae    2aaf92 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2492>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   2aaf81:       lea    (%rcx,%rbx,8),%rax
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   2aaf85:       cmp    %rax,%rdx
    0.00 :   2aaf88:       je     2aaf92 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2492>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   2aaf8a:       mov    %rax,0x118(%r12)
    0.00 :   2aaf92:       cmpq   $0x0,0x18(%r12)
    0.00 :   2aaf98:       je     2ab2c3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x27c3>
    0.00 :   2aaf9e:       mov    0x50(%r12),%rax
    0.00 :   2aafa3:       mov    (%rax),%rbx
    0.00 :   2aafa6:       test   %rbx,%rbx
    0.00 :   2aafa9:       jle    2ab00e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x250e>
    0.00 :   2aafab:       mov    0x20(%r12),%rax
    0.00 :   2aafb0:       xor    %r15d,%r15d
    0.00 :   2aafb3:       mov    (%rax),%r13
    0.00 :   2aafb6:       mov    0x38(%r12),%rax
    0.00 :   2aafbb:       mov    (%rax),%rbp
    0.00 :   2aafbe:       mov    0x98(%r12),%rax
    0.00 :   2aafc6:       xor    %ecx,%ecx
    0.00 :   2aafc8:       mov    (%rax),%r8
    0.00 :   2aafcb:       imul   %r15,%r8
    0.00 :   2aafcf:       cmp    $0x1,%rbp
    0.00 :   2aafd3:       je     2aafe4 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x24e4>
    0.00 :   2aafd5:       mov    0x80(%r12),%rax
    0.00 :   2aafdd:       mov    (%rax),%rcx
    0.00 :   2aafe0:       imul   %r15,%rcx
    0.00 :   2aafe4:       xor    %edx,%edx
    0.00 :   2aafe6:       cmp    $0x1,%r13
    0.00 :   2aafea:       je     2aaff8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x24f8>
    0.00 :   2aafec:       mov    0x68(%r12),%rax
    0.00 :   2aaff1:       mov    (%rax),%rdx
    0.00 :   2aaff4:       imul   %r15,%rdx
    0.00 :   2aaff8:       mov    $0x1,%esi
    0.00 :   2aaffd:       mov    %r12,%rdi
    0.00 :   2ab000:       add    $0x1,%r15
    0.00 :   2ab004:       callq  2a6750 <onnxruntime::MatMulComputeHelper::RecursiveFill(unsigned long, unsigned long, unsigned long, unsigned long)>
    0.00 :   2ab009:       cmp    %r15,%rbx
    0.00 :   2ab00c:       jne    2aafbe <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x24be>
    0.00 :   2ab00e:       mov    0x18(%rsp),%rax
    0.00 :   2ab013:       movq   $0x0,(%rax)
         :            };
         :
         :            template<std::size_t _Idx, typename _Head>
         :            struct _Head_base<_Idx, _Head, false>
         :            {
         :            constexpr _Head_base()
    0.00 :   2ab01a:       jmpq   2aa370 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1870>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2ab01f:       mov    %rdx,0x28(%rsp)
    0.00 :   2ab024:       mov    $0x1,%r13d
    0.00 :   2ab02a:       mov    %r14,%rdx
    0.00 :   2ab02d:       movb   $0x1,0x20(%rsp)
    0.00 :   2ab032:       jmpq   2a92e9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x7e9>
         :            this->_M_assign(__str);
    0.00 :   2ab037:       mov    (%rsp),%rdi
    0.00 :   2ab03b:       lea    0x50(%rbx),%rsi
    0.00 :   2ab03f:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab044:       jmpq   2a99e6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xee6>
    0.00 :   2ab049:       mov    (%rsp),%rdi
    0.00 :   2ab04d:       lea    0x50(%rbx),%rsi
    0.00 :   2ab051:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab056:       jmpq   2a9dee <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x12ee>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2ab05b:       mov    (%rsp),%rdi
    0.00 :   2ab05f:       sub    %rcx,%r8
    0.00 :   2ab062:       xor    %edx,%edx
    0.00 :   2ab064:       xor    %esi,%esi
    0.00 :   2ab066:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2ab06b:       jmpq   2aa221 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1721>
    0.00 :   2ab070:       mov    (%rsp),%rdi
    0.00 :   2ab074:       sub    %rcx,%r8
    0.00 :   2ab077:       xor    %edx,%edx
    0.00 :   2ab079:       xor    %esi,%esi
    0.00 :   2ab07b:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2ab080:       jmpq   2aa6ec <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1bec>
    0.00 :   2ab085:       mov    (%rcx),%rax
    0.00 :   2ab088:       mov    (%rax),%rax
    0.00 :   2ab08b:       cmp    %rax,0xd8(%r12)
    0.00 :   2ab093:       je     2aacc7 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21c7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab099:       lea    0x100(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0a1:       lea    0x59f9dd(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab0a8:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0ac:       lea    -0x45(%rdx),%rsi
    0.00 :   2ab0b0:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab0b3:       mov    %rax,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0bb:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab0c0:       lea    0x59fbd8(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab0c7:       lea    0x38(%rbx),%rax
    0.00 :   2ab0cb:       movl   $0x89,0x120(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0d6:       lea    0x28(%rbx),%rdi
    0.00 :   2ab0da:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab0de:       mov    %rax,0x128(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab0e6:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab0eb:       lea    0x80(%rsp),%rax
    0.00 :   2ab0f3:       xor    %edx,%edx
    0.00 :   2ab0f5:       mov    %rbx,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2ab0f8:       movq   $0x0,0x148(%rsp)
    0.00 :   2ab104:       mov    %rax,%rdi
    0.00 :   2ab107:       mov    %rax,(%rsp)
    0.00 :   2ab10b:       movq   $0x0,0x150(%rsp)
    0.00 :   2ab117:       movq   $0x0,0x158(%rsp)
    0.00 :   2ab123:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2ab128:       lea    0x59fa5a(%rip),%rax        # 84ab89 <typeinfo name for onnxruntime::Hardmax<float>+0x169>
    0.00 :   2ab12f:       mov    (%rsp),%rsi
    0.00 :   2ab133:       lea    0x58(%rsp),%rcx
    0.00 :   2ab138:       lea    0xa0(%rsp),%rbp
    0.00 :   2ab140:       mov    %rax,0x58(%rsp)
    0.00 :   2ab145:       lea    0x50(%rsp),%rdx
    0.00 :   2ab14a:       lea    0x57c5ea(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2ab151:       mov    %rbp,%rdi
    0.00 :   2ab154:       mov    %rax,0x50(%rsp)
    0.00 :   2ab159:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2ab15e:       mov    0x18(%rsp),%rdi
    0.00 :   2ab163:       mov    %rbp,%rcx
    0.00 :   2ab166:       mov    $0x1,%edx
    0.00 :   2ab16b:       mov    $0x2,%esi
    0.00 :   2ab170:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2ab175:       jmpq   2aac71 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2171>
    0.00 :   2ab17a:       lea    -0x1(%rbx),%rax
    0.00 :   2ab17e:       cmp    %r9,%rax
    0.00 :   2ab181:       je     2ab3c5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x28c5>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab187:       lea    0x100(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab18f:       lea    0x59f8ef(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab196:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab19a:       lea    -0x45(%rdx),%rsi
    0.00 :   2ab19e:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab1a1:       mov    %rax,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab1a9:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab1ae:       lea    0x59faea(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab1b5:       lea    0x38(%rbx),%rax
    0.00 :   2ab1b9:       movl   $0x82,0x120(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab1c4:       lea    0x28(%rbx),%rdi
    0.00 :   2ab1c8:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab1cc:       mov    %rax,0x128(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab1d4:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab1d9:       lea    0x80(%rsp),%rax
    0.00 :   2ab1e1:       xor    %edx,%edx
    0.00 :   2ab1e3:       mov    %rbx,%rsi
    0.00 :   2ab1e6:       movq   $0x0,0x148(%rsp)
    0.00 :   2ab1f2:       mov    %rax,%rdi
    0.00 :   2ab1f5:       mov    %rax,(%rsp)
    0.00 :   2ab1f9:       movq   $0x0,0x150(%rsp)
    0.00 :   2ab205:       movq   $0x0,0x158(%rsp)
    0.00 :   2ab211:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2ab216:       lea    0x59f913(%rip),%rax        # 84ab30 <typeinfo name for onnxruntime::Hardmax<float>+0x110>
    0.00 :   2ab21d:       mov    (%rsp),%rsi
    0.00 :   2ab221:       lea    0x58(%rsp),%rcx
    0.00 :   2ab226:       lea    0xa0(%rsp),%rbp
    0.00 :   2ab22e:       mov    %rax,0x58(%rsp)
    0.00 :   2ab233:       lea    0x50(%rsp),%rdx
    0.00 :   2ab238:       lea    0x57c4fc(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2ab23f:       mov    %rbp,%rdi
    0.00 :   2ab242:       mov    %rax,0x50(%rsp)
    0.00 :   2ab247:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2ab24c:       mov    0x18(%rsp),%rdi
    0.00 :   2ab251:       mov    %rbp,%rcx
    0.00 :   2ab254:       mov    $0x1,%edx
    0.00 :   2ab259:       mov    $0x2,%esi
    0.00 :   2ab25e:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2ab263:       jmpq   2aac71 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2171>
         :            this->_M_assign_aux(__l.begin(), __l.end(),
    0.00 :   2ab268:       lea    0x59fa51(%rip),%rdx        # 84acc0 <._168>
    0.00 :   2ab26f:       lea    0xe0(%r12),%rdi
    0.00 :   2ab277:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab27b:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab280:       lea    0x59fa31(%rip),%rdx        # 84acb8 <._169>
    0.00 :   2ab287:       lea    0xf8(%r12),%rdi
    0.00 :   2ab28f:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab293:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab298:       lea    0x59fa11(%rip),%rdx        # 84acb0 <._170>
    0.00 :   2ab29f:       lea    0x110(%r12),%rdi
    0.00 :   2ab2a7:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab2ab:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab2b0:       jmpq   2ab00e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x250e>
    0.00 :   2ab2b5:       xor    %edx,%edx
    0.00 :   2ab2b7:       jmpq   2a9633 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0xb33>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2ab2bc:       xor    %ecx,%ecx
    0.00 :   2ab2be:       jmpq   2aacfa <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21fa>
    0.00 :   2ab2c3:       mov    0xe0(%r12),%rax
    0.00 :   2ab2cb:       movq   $0x0,(%rax)
    0.00 :   2ab2d2:       mov    0xf8(%r12),%rax
    0.00 :   2ab2da:       movq   $0x0,(%rax)
    0.00 :   2ab2e1:       mov    0x110(%r12),%rax
    0.00 :   2ab2e9:       movq   $0x0,(%rax)
    0.00 :   2ab2f0:       jmpq   2ab00e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x250e>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   2ab2f5:       mov    (%rsp),%rdi
    0.00 :   2ab2f9:       sub    %rcx,%r8
    0.00 :   2ab2fc:       xor    %edx,%edx
    0.00 :   2ab2fe:       xor    %esi,%esi
    0.00 :   2ab300:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   2ab305:       jmpq   2aaac4 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1fc4>
         :            _M_default_append(__new_size - size());
    0.00 :   2ab30a:       sub    %rdx,%rax
    0.00 :   2ab30d:       lea    0x68(%r12),%rdi
    0.00 :   2ab312:       mov    %rax,%rsi
    0.00 :   2ab315:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab31a:       mov    0x18(%r12),%rax
    0.00 :   2ab31f:       jmpq   2aadbf <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22bf>
    0.00 :   2ab324:       sub    %rdx,%rax
    0.00 :   2ab327:       lea    0x98(%r12),%rdi
    0.00 :   2ab32f:       mov    %rax,%rsi
    0.00 :   2ab332:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab337:       mov    0x18(%r12),%rax
    0.00 :   2ab33c:       jmpq   2aae2b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x232b>
    0.00 :   2ab341:       sub    %rdx,%rax
    0.00 :   2ab344:       lea    0x80(%r12),%rdi
    0.00 :   2ab34c:       mov    %rax,%rsi
    0.00 :   2ab34f:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab354:       mov    0x18(%r12),%rax
    0.00 :   2ab359:       jmpq   2aadf5 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x22f5>
    0.00 :   2ab35e:       mov    %rbx,%rsi
    0.00 :   2ab361:       lea    0x110(%r12),%rdi
    0.00 :   2ab369:       sub    %rax,%rsi
    0.00 :   2ab36c:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab371:       jmpq   2aaf92 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2492>
    0.00 :   2ab376:       mov    %rbx,%rsi
    0.00 :   2ab379:       lea    0xf8(%r12),%rdi
    0.00 :   2ab381:       sub    %rax,%rsi
    0.00 :   2ab384:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab389:       jmpq   2aaf5c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x245c>
    0.00 :   2ab38e:       mov    %rbx,%rsi
    0.00 :   2ab391:       lea    0xe0(%r12),%rdi
    0.00 :   2ab399:       sub    %rax,%rsi
    0.00 :   2ab39c:       callq  2a82e0 <std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)>
    0.00 :   2ab3a1:       jmpq   2aaf26 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2426>
    0.00 :   2ab3a6:       sub    %rdx,%rax
    0.00 :   2ab3a9:       lea    0x50(%r12),%rdi
    0.00 :   2ab3ae:       mov    %rax,%rsi
    0.00 :   2ab3b1:       callq  27c810 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)>
    0.00 :   2ab3b6:       mov    0x18(%r12),%rax
    0.00 :   2ab3bb:       mov    0x50(%r12),%rsi
    0.00 :   2ab3c0:       jmpq   2aae58 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2358>
    0.00 :   2ab3c5:       xor    %eax,%eax
    0.00 :   2ab3c7:       cmpb   $0x0,0x8(%rsp)
    0.00 :   2ab3cc:       mov    (%rcx),%rdx
    0.00 :   2ab3cf:       setne  %al
    0.00 :   2ab3d2:       lea    -0x2(%rax,%rbp,1),%rax
    0.00 :   2ab3d7:       cltq
    0.00 :   2ab3d9:       mov    (%rdx,%rax,8),%rax
    0.00 :   2ab3dd:       cmp    %rax,0xd8(%r12)
    0.00 :   2ab3e5:       je     2ab69e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2b9e>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab3eb:       lea    0x100(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab3f3:       lea    0x59f68b(%rip),%rdx        # 84aa85 <typeinfo name for onnxruntime::Hardmax<float>+0x65>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab3fa:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab3fe:       lea    -0x45(%rdx),%rsi
    0.00 :   2ab402:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab405:       mov    %rax,0x100(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab40d:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab412:       lea    0x59f886(%rip),%rdx        # 84ac9f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__+0x7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab419:       lea    0x38(%rbx),%rax
    0.00 :   2ab41d:       movl   $0x84,0x120(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab428:       lea    0x28(%rbx),%rdi
    0.00 :   2ab42c:       lea    -0x7(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   2ab430:       mov    %rax,0x128(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2ab438:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   2ab43d:       lea    0x80(%rsp),%rax
    0.00 :   2ab445:       xor    %edx,%edx
    0.00 :   2ab447:       mov    %rbx,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2ab44a:       movq   $0x0,0x148(%rsp)
    0.00 :   2ab456:       mov    %rax,%rdi
    0.00 :   2ab459:       mov    %rax,(%rsp)
    0.00 :   2ab45d:       movq   $0x0,0x150(%rsp)
    0.00 :   2ab469:       movq   $0x0,0x158(%rsp)
    0.00 :   2ab475:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2ab47a:       lea    0x59f708(%rip),%rax        # 84ab89 <typeinfo name for onnxruntime::Hardmax<float>+0x169>
    0.00 :   2ab481:       mov    (%rsp),%rsi
    0.00 :   2ab485:       lea    0x58(%rsp),%rcx
    0.00 :   2ab48a:       lea    0xa0(%rsp),%rbp
    0.00 :   2ab492:       mov    %rax,0x58(%rsp)
    0.00 :   2ab497:       lea    0x50(%rsp),%rdx
    0.00 :   2ab49c:       lea    0x57c298(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2ab4a3:       mov    %rbp,%rdi
    0.00 :   2ab4a6:       mov    %rax,0x50(%rsp)
    0.00 :   2ab4ab:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2ab4b0:       mov    0x18(%rsp),%rdi
    0.00 :   2ab4b5:       mov    %rbp,%rcx
    0.00 :   2ab4b8:       mov    $0x1,%edx
    0.00 :   2ab4bd:       mov    $0x2,%esi
    0.00 :   2ab4c2:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2ab4c7:       jmpq   2aac71 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2171>
         :            this->_M_assign(__str);
    0.00 :   2ab4cc:       mov    (%rsp),%rdi
    0.00 :   2ab4d0:       lea    0x50(%rbx),%rsi
    0.00 :   2ab4d4:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab4d9:       jmpq   2aa221 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1721>
    0.00 :   2ab4de:       mov    (%rsp),%rdi
    0.00 :   2ab4e2:       lea    0x50(%rbx),%rsi
    0.00 :   2ab4e6:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab4eb:       jmpq   2aa6ec <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1bec>
    0.00 :   2ab4f0:       lea    -0x1(%r8),%rbp
    0.00 :   2ab4f4:       mov    %r15,%rdi
    0.00 :   2ab4f7:       mov    %rcx,(%rsp)
    0.00 :   2ab4fb:       mov    %rbp,%rsi
    0.00 :   2ab4fe:       movslq %ebp,%rbp
    0.00 :   2ab501:       callq  5f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>
    0.00 :   2ab506:       cmpb   $0x0,0x8(%rsp)
    0.00 :   2ab50b:       mov    (%rsp),%rcx
    0.00 :   2ab50f:       mov    %rax,0xc8(%r12)
    0.00 :   2ab517:       mov    (%r15),%rax
    0.00 :   2ab51a:       mov    (%rax,%rbp,8),%rax
    0.00 :   2ab51e:       mov    %rax,0xd8(%r12)
    0.00 :   2ab526:       je     2ab6d3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bd3>
    0.00 :   2ab52c:       mov    (%rcx),%rax
    0.00 :   2ab52f:       mov    (%rax,%r14,8),%rax
    0.00 :   2ab533:       lea    0xb0(%r12),%rdi
    0.00 :   2ab53b:       mov    %rax,0xd0(%r12)
    0.00 :   2ab543:       mov    %r15,%rsi
    0.00 :   2ab546:       mov    %rcx,(%rsp)
    0.00 :   2ab54a:       callq  2452e0 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)>
    0.00 :   2ab54f:       mov    0xb0(%r12),%rax
    0.00 :   2ab557:       mov    0xd0(%r12),%rdx
    0.00 :   2ab55f:       lea    0x110(%r12),%rdi
    0.00 :   2ab567:       mov    %rdx,(%rax,%rbp,8)
         :            this->_M_assign_aux(__l.begin(), __l.end(),
    0.00 :   2ab56b:       lea    0x59f766(%rip),%rdx        # 84acd8 <._166+0x8>
    0.00 :   2ab572:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab576:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab57b:       lea    0x59f74e(%rip),%rdx        # 84acd0 <._166>
    0.00 :   2ab582:       lea    0xe0(%r12),%rdi
    0.00 :   2ab58a:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab58e:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab593:       lea    0x59f72e(%rip),%rdx        # 84acc8 <._167>
    0.00 :   2ab59a:       lea    0xf8(%r12),%rdi
    0.00 :   2ab5a2:       lea    -0x8(%rdx),%rsi
    0.00 :   2ab5a6:       callq  1d89a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_assign_aux<unsigned long const*>(unsigned long const*, unsigned long const*, std::forward_iterator_tag)>
    0.00 :   2ab5ab:       mov    (%rsp),%rcx
    0.00 :   2ab5af:       mov    0xd8(%r12),%rdx
    0.00 :   2ab5b7:       mov    (%rcx),%rax
    0.00 :   2ab5ba:       cmp    (%rax,%r14,8),%rdx
    0.00 :   2ab5be:       je     2ab6c2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bc2>
    0.00 :   2ab5c4:       cmpb   $0x0,0x8(%rsp)
    0.00 :   2ab5c9:       je     2ab5d8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ad8>
    0.00 :   2ab5cb:       movslq %ebx,%rbx
    0.00 :   2ab5ce:       cmp    (%rax,%rbx,8),%rdx
    0.00 :   2ab5d2:       je     2ab6c2 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2bc2>
    0.00 :   2ab5d8:       lea    0x100(%rsp),%rbx
    0.00 :   2ab5e0:       mov    $0x37,%edx
    0.00 :   2ab5e5:       lea    0x59f454(%rip),%rsi        # 84aa40 <typeinfo name for onnxruntime::Hardmax<float>+0x20>
    0.00 :   2ab5ec:       mov    %rbx,%rdi
    0.00 :   2ab5ef:       lea    0x59f6a2(%rip),%rcx        # 84ac98 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)::__FUNCTION__>
    0.00 :   2ab5f6:       callq  167570 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*)>
    0.00 :   2ab5fb:       lea    0x80(%rsp),%rax
    0.00 :   2ab603:       xor    %edx,%edx
    0.00 :   2ab605:       mov    %rbx,%rsi
    0.00 :   2ab608:       mov    %rax,%rdi
    0.00 :   2ab60b:       mov    %rax,(%rsp)
    0.00 :   2ab60f:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   2ab614:       lea    0x59f56e(%rip),%rax        # 84ab89 <typeinfo name for onnxruntime::Hardmax<float>+0x169>
    0.00 :   2ab61b:       mov    (%rsp),%rsi
    0.00 :   2ab61f:       lea    0x58(%rsp),%rcx
    0.00 :   2ab624:       lea    0xa0(%rsp),%rbp
    0.00 :   2ab62c:       mov    %rax,0x58(%rsp)
    0.00 :   2ab631:       lea    0x50(%rsp),%rdx
    0.00 :   2ab636:       lea    0x57c0fe(%rip),%rax        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   2ab63d:       mov    %rbp,%rdi
    0.00 :   2ab640:       mov    %rax,0x50(%rsp)
    0.00 :   2ab645:       callq  166440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, char const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const* const&, char const* const&)>
    0.00 :   2ab64a:       mov    0x18(%rsp),%rdi
    0.00 :   2ab64f:       mov    %rbp,%rcx
    0.00 :   2ab652:       mov    $0x1,%edx
    0.00 :   2ab657:       mov    $0x2,%esi
    0.00 :   2ab65c:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab661:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab669:       add    $0x10,%rbp
    0.00 :   2ab66d:       cmp    %rbp,%rdi
    0.00 :   2ab670:       je     2ab677 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2b77>
    0.00 :   2ab672:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab677:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab67b:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab683:       add    $0x10,%rax
    0.00 :   2ab687:       cmp    %rax,%rdi
    0.00 :   2ab68a:       je     2ab691 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2b91>
    0.00 :   2ab68c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab691:       mov    %rbx,%rdi
    0.00 :   2ab694:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab699:       jmpq   2a922b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x72b>
    0.00 :   2ab69e:       mov    0xd0(%r12),%rax
    0.00 :   2ab6a6:       mov    %rax,-0x10(%r14,%rbx,8)
    0.00 :   2ab6ab:       jmpq   2aacc7 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x21c7>
         :            this->_M_assign(__str);
    0.00 :   2ab6b0:       mov    (%rsp),%rdi
    0.00 :   2ab6b4:       lea    0x50(%rbx),%rsi
    0.00 :   2ab6b8:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   2ab6bd:       jmpq   2aaac4 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x1fc4>
    0.00 :   2ab6c2:       mov    0x18(%rsp),%rax
    0.00 :   2ab6c7:       movq   $0x0,(%rax)
    0.00 :   2ab6ce:       jmpq   2a922b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x72b>
    0.00 :   2ab6d3:       mov    (%rcx),%rdx
    0.00 :   2ab6d6:       movslq %ebx,%rax
    0.00 :   2ab6d9:       mov    (%rdx,%rax,8),%rax
    0.00 :   2ab6dd:       jmpq   2ab533 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2a33>
         :            __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    0.00 :   2ab6e2:       mov    %rdx,%rcx
    0.00 :   2ab6e5:       lea    0x57ba1f(%rip),%rsi        # 82710b <std::piecewise_construct+0x36b>
    0.00 :   2ab6ec:       mov    %rax,%rdx
    0.00 :   2ab6ef:       xor    %eax,%eax
    0.00 :   2ab6f1:       lea    0x579e60(%rip),%rdi        # 825558 <_fini+0x2c0>
    0.00 :   2ab6f8:       callq  53940 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
         :            std::__throw_bad_alloc();
    0.00 :   2ab6fd:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   2ab702:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   2ab707:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   2ab70c:       mov    %rax,%rbx
    0.00 :   2ab70f:       jmp    2ab743 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c43>
    0.00 :   2ab711:       mov    %rax,%rbx
    0.00 :   2ab714:       jmp    2ab75b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c5b>
         :            if (!_M_is_local())
    0.00 :   2ab716:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab71a:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab722:       add    $0x10,%rax
    0.00 :   2ab726:       cmp    %rax,%rdi
    0.00 :   2ab729:       je     2ab730 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c30>
         :            ::operator delete(__p);
    0.00 :   2ab72b:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab730:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab735:       add    $0x10,%r15
    0.00 :   2ab739:       cmp    %r15,%rdi
    0.00 :   2ab73c:       je     2ab743 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c43>
    0.00 :   2ab73e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab743:       mov    %rbp,%rdi
    0.00 :   2ab746:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab74b:       mov    %r14,%rdi
    0.00 :   2ab74e:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2ab753:       mov    %rbx,%rdi
    0.00 :   2ab756:       callq  53c30 <_Unwind_Resume@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab75b:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab763:       add    $0x10,%rbp
    0.00 :   2ab767:       cmp    %rbp,%rdi
    0.00 :   2ab76a:       je     2ab74b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4b>
         :            ::operator delete(__p);
    0.00 :   2ab76c:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2ab771:       jmp    2ab74b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4b>
    0.00 :   2ab773:       mov    %rax,%rbx
    0.00 :   2ab776:       jmp    2ab716 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c16>
    0.00 :   2ab778:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab77c:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab784:       add    $0x10,%rax
    0.00 :   2ab788:       cmp    %rax,%rdi
    0.00 :   2ab78b:       je     2ab792 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c92>
         :            ::operator delete(__p);
    0.00 :   2ab78d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab792:       callq  52a50 <std::terminate()@plt>
    0.00 :   2ab797:       mov    %rax,%r12
    0.00 :   2ab79a:       jmp    2ab7a1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ca1>
    0.00 :   2ab79c:       mov    %rax,%r12
    0.00 :   2ab79f:       jmp    2ab7b6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cb6>
    0.00 :   2ab7a1:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab7a5:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab7ad:       add    $0x10,%rax
    0.00 :   2ab7b1:       cmp    %rax,%rdi
    0.00 :   2ab7b4:       jne    2ab7dc <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cdc>
    0.00 :   2ab7b6:       mov    %rbx,%rdi
    0.00 :   2ab7b9:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   2ab7be:       mov    %rbp,%rdi
    0.00 :   2ab7c1:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab7c6:       mov    %r12,%rdi
    0.00 :   2ab7c9:       callq  53c30 <_Unwind_Resume@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab7ce:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab7d3:       add    $0x10,%r15
    0.00 :   2ab7d7:       cmp    %r15,%rdi
    0.00 :   2ab7da:       je     2ab7b6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cb6>
    0.00 :   2ab7dc:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2ab7e1:       jmp    2ab7b6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cb6>
    0.00 :   2ab7e3:       mov    %rax,%r12
    0.00 :   2ab7e6:       jmp    2ab7ea <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cea>
    0.00 :   2ab7e8:       jmp    2ab823 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d23>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   2ab7ea:       lea    0x8(%rbx),%rdi
    0.00 :   2ab7ee:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   2ab7f3:       mov    -0x18(%r13),%rax
    0.00 :   2ab7f7:       mov    %r13,0x100(%rsp)
    0.00 :   2ab7ff:       mov    %r14,0x100(%rsp,%rax,1)
    0.00 :   2ab807:       mov    0x20(%rsp),%rax
    0.00 :   2ab80c:       lea    0x70(%rbx),%rdi
    0.00 :   2ab810:       add    $0x10,%rax
    0.00 :   2ab814:       mov    %rax,0x170(%rsp)
    0.00 :   2ab81c:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2ab821:       jmp    2ab7be <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cbe>
    0.00 :   2ab823:       lea    0x8(%rbx),%rdi
    0.00 :   2ab827:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   2ab82c:       mov    -0x18(%r13),%rax
    0.00 :   2ab830:       mov    %r13,0x100(%rsp)
    0.00 :   2ab838:       mov    %r14,0x100(%rsp,%rax,1)
    0.00 :   2ab840:       mov    0x20(%rsp),%rax
    0.00 :   2ab845:       lea    0x70(%rbx),%rdi
    0.00 :   2ab849:       add    $0x10,%rax
    0.00 :   2ab84d:       mov    %rax,0x170(%rsp)
    0.00 :   2ab855:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   2ab85a:       jmpq   2ab792 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c92>
    0.00 :   2ab85f:       mov    %rax,%r12
    0.00 :   2ab862:       jmp    2ab869 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d69>
    0.00 :   2ab864:       mov    %rax,%r12
    0.00 :   2ab867:       jmp    2ab899 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d99>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab869:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab871:       add    $0x10,%rbp
    0.00 :   2ab875:       cmp    %rbp,%rdi
    0.00 :   2ab878:       je     2ab87f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d7f>
         :            ::operator delete(__p);
    0.00 :   2ab87a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab87f:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab883:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab88b:       add    $0x10,%rax
    0.00 :   2ab88f:       cmp    %rax,%rdi
    0.00 :   2ab892:       je     2ab899 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d99>
    0.00 :   2ab894:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab899:       mov    %rbx,%rdi
    0.00 :   2ab89c:       mov    %r12,%rbx
    0.00 :   2ab89f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab8a4:       jmpq   2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
    0.00 :   2ab8a9:       mov    %rax,%rbx
    0.00 :   2ab8ac:       jmpq   2ab947 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e47>
    0.00 :   2ab8b1:       mov    %rax,%rbp
    0.00 :   2ab8b4:       jmp    2ab927 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e27>
    0.00 :   2ab8b6:       jmpq   2ab9f1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ef1>
    0.00 :   2ab8bb:       mov    %rax,%r12
    0.00 :   2ab8be:       jmp    2ab8d3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2dd3>
    0.00 :   2ab8c0:       jmpq   2ab97d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e7d>
    0.00 :   2ab8c5:       jmp    2ab922 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e22>
    0.00 :   2ab8c7:       jmpq   2ab9ec <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2eec>
    0.00 :   2ab8cc:       jmpq   2ab773 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c73>
    0.00 :   2ab8d1:       jmp    2ab913 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e13>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab8d3:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab8db:       add    $0x10,%rbp
    0.00 :   2ab8df:       cmp    %rbp,%rdi
    0.00 :   2ab8e2:       je     2ab8e9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2de9>
    0.00 :   2ab8e4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab8e9:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab8ed:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab8f5:       add    $0x10,%rax
    0.00 :   2ab8f9:       cmp    %rax,%rdi
    0.00 :   2ab8fc:       je     2ab903 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e03>
    0.00 :   2ab8fe:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab903:       mov    %rbx,%rdi
    0.00 :   2ab906:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2ab90b:       mov    %r12,%rdi
    0.00 :   2ab90e:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   2ab913:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2ab918:       jmpq   2ab711 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c11>
    0.00 :   2ab91d:       jmpq   2ab70c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c0c>
    0.00 :   2ab922:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab927:       mov    0x100(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab92f:       add    $0x10,%rbx
    0.00 :   2ab933:       cmp    %rbx,%rdi
    0.00 :   2ab936:       je     2ab93d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e3d>
    0.00 :   2ab938:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2ab93d:       mov    %rbp,%rbx
    0.00 :   2ab940:       jmpq   2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
    0.00 :   2ab945:       jmp    2ab94c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e4c>
         :            _M_deallocate(pointer __p, size_t __n)
    0.00 :   2ab947:       jmpq   2ab74b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4b>
    0.00 :   2ab94c:       lea    0x8(%rbx),%rdi
    0.00 :   2ab950:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   2ab955:       mov    -0x18(%r13),%rax
    0.00 :   2ab959:       mov    0x28(%rsp),%rcx
    0.00 :   2ab95e:       mov    %r13,0x100(%rsp)
    0.00 :   2ab966:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2ab96e:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2ab973:       mov    %rax,%r12
    0.00 :   2ab976:       jmp    2ab903 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e03>
    0.00 :   2ab978:       mov    %rax,%rbx
    0.00 :   2ab97b:       jmp    2ab9d6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ed6>
    0.00 :   2ab97d:       lea    0x8(%rbx),%rdi
    0.00 :   2ab981:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   2ab986:       mov    0x28(%rsp),%rax
    0.00 :   2ab98b:       mov    0x30(%rsp),%rcx
    0.00 :   2ab990:       mov    %rax,0x100(%rsp)
    0.00 :   2ab998:       mov    -0x18(%rax),%rax
    0.00 :   2ab99c:       mov    %rcx,0x100(%rsp,%rax,1)
    0.00 :   2ab9a4:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2ab9a9:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab9ad:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab9b5:       add    $0x10,%rax
    0.00 :   2ab9b9:       cmp    %rax,%rdi
    0.00 :   2ab9bc:       je     2ab9c3 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ec3>
         :            ::operator delete(__p);
    0.00 :   2ab9be:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2ab9c3:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2ab9c8:       add    $0x10,%r15
    0.00 :   2ab9cc:       cmp    %r15,%rdi
    0.00 :   2ab9cf:       je     2ab9d6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ed6>
    0.00 :   2ab9d1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2ab9d6:       mov    %rbp,%rdi
    0.00 :   2ab9d9:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
         :            if (__p)
    0.00 :   2ab9de:       test   %r14,%r14
    0.00 :   2ab9e1:       jne    2ab74b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4b>
    0.00 :   2ab9e7:       jmpq   2ab753 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c53>
    0.00 :   2ab9ec:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
         :            _M_is_local() const
    0.00 :   2ab9f1:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
    0.00 :   2ab9f6:       mov    %rax,%rbx
    0.00 :   2ab9f9:       jmp    2ab9a9 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ea9>
    0.00 :   2ab9fb:       jmpq   2ab8b1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2db1>
    0.00 :   2aba00:       jmp    2aba07 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f07>
    0.00 :   2aba02:       mov    %rax,%r12
    0.00 :   2aba05:       jmp    2aba0c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f0c>
    0.00 :   2aba07:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
         :            if (!_M_is_local())
    0.00 :   2aba0c:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aba10:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aba18:       add    $0x10,%rax
    0.00 :   2aba1c:       cmp    %rax,%rdi
    0.00 :   2aba1f:       je     2aba26 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f26>
    0.00 :   2aba21:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2aba26:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2aba2b:       add    $0x10,%r15
    0.00 :   2aba2f:       cmp    %r15,%rdi
    0.00 :   2aba32:       je     2ab7be <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cbe>
    0.00 :   2aba38:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2aba3d:       jmpq   2ab7be <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cbe>
    0.00 :   2aba42:       jmp    2aba46 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f46>
    0.00 :   2aba44:       jmp    2aba4b <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f4b>
    0.00 :   2aba46:       jmpq   2ab94c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e4c>
    0.00 :   2aba4b:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2aba50:       jmpq   2ab978 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e78>
    0.00 :   2aba55:       mov    %rax,%rbx
    0.00 :   2aba58:       jmpq   2abaf8 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ff8>
    0.00 :   2aba5d:       jmpq   2ab85f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d5f>
    0.00 :   2aba62:       jmp    2ab9f6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ef6>
    0.00 :   2aba64:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
    0.00 :   2aba69:       jmpq   2ab864 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d64>
    0.00 :   2aba6e:       jmpq   2ab8b1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2db1>
    0.00 :   2aba73:       jmpq   2ab864 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d64>
    0.00 :   2aba78:       jmpq   2ab8b1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2db1>
    0.00 :   2aba7d:       jmpq   2ab864 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d64>
    0.00 :   2aba82:       jmpq   2ab85f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d5f>
    0.00 :   2aba87:       jmpq   2ab97d <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e7d>
    0.00 :   2aba8c:       jmp    2aba95 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f95>
    0.00 :   2aba8e:       jmpq   2ab85f <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d5f>
    0.00 :   2aba93:       jmp    2aba9a <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f9a>
         :            _M_is_local() const
    0.00 :   2aba95:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
    0.00 :   2aba9a:       jmpq   2ab778 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c78>
    0.00 :   2aba9f:       jmpq   2ab94c <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e4c>
    0.00 :   2abaa4:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2abaa9:       jmpq   2ab978 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2e78>
    0.00 :   2abaae:       jmp    2aba55 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f55>
    0.00 :   2abab0:       mov    %rax,%r12
    0.00 :   2abab3:       jmpq   2ab807 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d07>
    0.00 :   2abab8:       mov    %rax,%rbx
    0.00 :   2ababb:       jmp    2abac7 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2fc7>
    0.00 :   2ababd:       mov    %rax,%r12
    0.00 :   2abac0:       jmpq   2ab7ce <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2cce>
    0.00 :   2abac5:       jmp    2abae1 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2fe1>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2abac7:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2abacf:       add    $0x10,%rbp
    0.00 :   2abad3:       cmp    %rbp,%rdi
    0.00 :   2abad6:       jne    2ab74e <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c4e>
    0.00 :   2abadc:       jmpq   2ab753 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2c53>
    0.00 :   2abae1:       jmpq   2ab840 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2d40>
    0.00 :   2abae6:       jmpq   2aba55 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2f55>
    0.00 :   2abaeb:       mov    %rax,%rbx
    0.00 :   2abaee:       jmpq   2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
    0.00 :   2abaf3:       jmpq   2ab9f6 <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ef6>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2abaf8:       mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2abb00:       add    $0x10,%rbp
    0.00 :   2abb04:       cmp    %rbp,%rdi
    0.00 :   2abb07:       je     2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
         :            ::operator delete(__p);
    0.00 :   2abb0d:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2abb12:       jmpq   2ab9de <onnxruntime::MatMulComputeHelper::Compute(onnxruntime::TensorShape const&, onnxruntime::TensorShape const&, bool, bool)+0x2ede>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (8 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000029e130 <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const>:
         :            _ZNK11onnxruntime4GemmIfE17ComputeActivationEPfmPNS_11concurrency10ThreadPoolE():
   12.96 :   29e130:       push   %r13
    0.00 :   29e132:       push   %r12
   11.90 :   29e134:       push   %rbp
    0.00 :   29e135:       push   %rbx
    0.00 :   29e136:       sub    $0x58,%rsp
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   29e13a:       mov    0x50(%rdi),%rdi
   75.14 :   29e13e:       mov    %fs:0x28,%rax
    0.00 :   29e147:       mov    %rax,0x48(%rsp)
    0.00 :   29e14c:       xor    %eax,%eax
    0.00 :   29e14e:       test   %rdi,%rdi
    0.00 :   29e151:       je     29e1ea <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const+0xba>
    0.00 :   29e157:       mov    (%rdi),%rax
    0.00 :   29e15a:       mov    %rsi,%rbp
    0.00 :   29e15d:       mov    %rdx,%r13
    0.00 :   29e160:       mov    %rcx,%r12
    0.00 :   29e163:       callq  *0x10(%rax)
    0.00 :   29e166:       mov    %rax,%rbx
    0.00 :   29e169:       mov    %rbp,0x8(%rax)
    0.00 :   29e16d:       mov    %rbp,0x10(%rax)
    0.00 :   29e171:       mov    (%rax),%rax
    0.00 :   29e174:       mov    %rbx,%rdi
    0.00 :   29e177:       callq  *0x8(%rax)
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   29e17a:       lea    -0x521(%rip),%rax        # 29dc60 <std::_Function_handler<void (long, long), onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const::{lambda(long, long)#1}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)>
    0.00 :   29e181:       mov    %rsp,%rdx
    0.00 :   29e184:       mov    %r13,%rsi
    0.00 :   29e187:       mov    %r12,%rdi
    0.00 :   29e18a:       lea    0x20(%rsp),%rbp
    0.00 :   29e18f:       cvtss2sd %xmm0,%xmm0
    0.00 :   29e193:       mov    %rbx,0x20(%rsp)
    0.00 :   29e198:       movsd  0x5abc78(%rip),%xmm1        # 849e18 <Eigen::internal::trig_reduce_huge(float, int*)::two_over_pi+0x98>
    0.00 :   29e1a0:       mov    %rax,0x38(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   29e1a5:       lea    -0x52c(%rip),%rax        # 29dc80 <std::_Function_base::_Base_manager<onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const::{lambda(long, long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const::{lambda(long, long)#1}> const&, std::_Manager_operation)>
    0.00 :   29e1ac:       mov    %rbp,%rcx
    0.00 :   29e1af:       movsd  %xmm1,(%rsp)
    0.00 :   29e1b4:       mov    %rax,0x30(%rsp)
    0.00 :   29e1b9:       movsd  %xmm1,0x8(%rsp)
    0.00 :   29e1bf:       movsd  %xmm0,0x10(%rsp)
    0.00 :   29e1c5:       callq  69e260 <onnxruntime::concurrency::ThreadPool::TryParallelFor(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::TensorOpCost const&, std::function<void (long, long)> const&)>
         :            if (_M_manager)
    0.00 :   29e1ca:       mov    0x30(%rsp),%rax
    0.00 :   29e1cf:       test   %rax,%rax
    0.00 :   29e1d2:       je     29e1e1 <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const+0xb1>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   29e1d4:       mov    $0x3,%edx
    0.00 :   29e1d9:       mov    %rbp,%rsi
    0.00 :   29e1dc:       mov    %rbp,%rdi
    0.00 :   29e1df:       callq  *%rax
         :            delete __ptr;
    0.00 :   29e1e1:       mov    (%rbx),%rax
    0.00 :   29e1e4:       mov    %rbx,%rdi
    0.00 :   29e1e7:       callq  *0x20(%rax)
    0.00 :   29e1ea:       mov    0x48(%rsp),%rax
    0.00 :   29e1ef:       xor    %fs:0x28,%rax
    0.00 :   29e1f8:       jne    29e205 <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const+0xd5>
    0.00 :   29e1fa:       add    $0x58,%rsp
    0.00 :   29e1fe:       pop    %rbx
    0.00 :   29e1ff:       pop    %rbp
    0.00 :   29e200:       pop    %r12
    0.00 :   29e202:       pop    %r13
    0.00 :   29e204:       retq
    0.00 :   29e205:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   29e20a:       mov    %rax,%r12
    0.00 :   29e20d:       jmp    29e214 <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const+0xe4>
    0.00 :   29e20f:       mov    %rax,%r12
    0.00 :   29e212:       jmp    29e22b <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const+0xfb>
         :            if (_M_manager)
    0.00 :   29e214:       mov    0x30(%rsp),%rax
    0.00 :   29e219:       test   %rax,%rax
    0.00 :   29e21c:       je     29e22b <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const+0xfb>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   29e21e:       mov    $0x3,%edx
    0.00 :   29e223:       mov    %rbp,%rsi
    0.00 :   29e226:       mov    %rbp,%rdi
    0.00 :   29e229:       callq  *%rax
    0.00 :   29e22b:       mov    (%rbx),%rax
    0.00 :   29e22e:       mov    %rbx,%rdi
    0.00 :   29e231:       callq  *0x20(%rax)
    0.00 :   29e234:       mov    %r12,%rdi
    0.00 :   29e237:       callq  53c30 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of python3.7 for cache-misses (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000f7520 <_PyObject_Free>:
         :           _PyObject_Free():
    0.00 :   f7520:       test   %rsi,%rsi
    0.00 :   f7523:       je     f756e <_PyObject_Free+0x4e>
         :           pymalloc_free.isra.0():
    0.00 :   f7525:       mov    %rsi,%rax
         :           _PyObject_Free():
    0.00 :   f7528:       subq   $0x1,0x2722a0(%rip)        # 3697d0 <_Py_AllocatedBlocks>
         :           pymalloc_free.isra.0():
    0.00 :   f7530:       and    $0xfffffffffffff000,%rax
         :           address_in_range():
    0.00 :   f7536:       mov    0x20(%rax),%edx
    0.00 :   f7539:       cmp    0x2722b9(%rip),%edx        # 3697f8 <maxarenas>
    0.00 :   f753f:       jae    f756f <_PyObject_Free+0x4f>
    0.00 :   f7541:       imul   $0x30,%rdx,%rcx
         :           _PyObject_Free():
    0.00 :   f7545:       push   %rbx
         :           address_in_range():
    0.00 :   f7546:       mov    0x2722a3(%rip),%rbx        # 3697f0 <arenas>
    0.00 :   f754d:       mov    %rsi,%r8
    0.00 :   f7550:       mov    (%rbx,%rcx,1),%rdi
  100.00 :   f7554:       sub    %rdi,%r8
    0.00 :   f7557:       cmp    $0x3ffff,%r8
    0.00 :   f755e:       jbe    5b38e <_PyObject_Free.cold.383>
         :           _PyObject_Free():
    0.00 :   f7564:       mov    %rsi,%rdi
    0.00 :   f7567:       pop    %rbx
    0.00 :   f7568:       jmpq   f7510 <PyMem_RawFree>
    0.00 :   f756d:       nop
    0.00 :   f756e:       retq
    0.00 :   f756f:       mov    %rsi,%rdi
    0.00 :   f7572:       jmpq   f7510 <PyMem_RawFree>
    0.00 :   f7577:       nop
 Percent |	Source code & Disassembly of kvm.ko for cache-misses (4 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000015c40 <pvclock_gtod_notify>:
         :           pvclock_gtod_notify():
    0.00 :   15c40:       callq  15c45 <pvclock_gtod_notify+0x5>
   16.25 :   15c45:       push   %rbp
    0.00 :   15c46:       addl   $0x1,0x0(%rip)        # 15c4d <pvclock_gtod_notify+0xd>
   83.75 :   15c4d:       mov    0x98(%rdx),%rax
    0.00 :   15c54:       add    0x28(%rdx),%rax
    0.00 :   15c58:       mov    %rsp,%rbp
    0.00 :   15c5b:       mov    (%rdx),%rcx
    0.00 :   15c5e:       mov    %rax,0x0(%rip)        # 15c65 <pvclock_gtod_notify+0x25>
    0.00 :   15c65:       mov    0x20(%rdx),%rax
    0.00 :   15c69:       mov    0x24(%rcx),%ecx
    0.00 :   15c6c:       mov    %rax,0x0(%rip)        # 15c73 <pvclock_gtod_notify+0x33>
    0.00 :   15c73:       mov    0x70(%rdx),%rax
    0.00 :   15c77:       mov    %ecx,0x0(%rip)        # 15c7d <pvclock_gtod_notify+0x3d>
    0.00 :   15c7d:       mov    0x10(%rdx),%rcx
    0.00 :   15c81:       mov    %rax,0x0(%rip)        # 15c88 <pvclock_gtod_notify+0x48>
    0.00 :   15c88:       mov    %rcx,0x0(%rip)        # 15c8f <pvclock_gtod_notify+0x4f>
    0.00 :   15c8f:       mov    0x8(%rdx),%rcx
    0.00 :   15c93:       mov    %rcx,0x0(%rip)        # 15c9a <pvclock_gtod_notify+0x5a>
    0.00 :   15c9a:       mov    0x18(%rdx),%ecx
    0.00 :   15c9d:       mov    %ecx,0x0(%rip)        # 15ca3 <pvclock_gtod_notify+0x63>
    0.00 :   15ca3:       mov    0x1c(%rdx),%ecx
    0.00 :   15ca6:       mov    %ecx,0x0(%rip)        # 15cac <pvclock_gtod_notify+0x6c>
    0.00 :   15cac:       mov    0x0(%rip),%eax        # 15cb2 <pvclock_gtod_notify+0x72>
    0.00 :   15cb2:       addl   $0x1,0x0(%rip)        # 15cb9 <pvclock_gtod_notify+0x79>
    0.00 :   15cb9:       and    $0xfffffffd,%eax
    0.00 :   15cbc:       cmp    $0x1,%eax
    0.00 :   15cbf:       je     15ccb <pvclock_gtod_notify+0x8b>
    0.00 :   15cc1:       mov    0x0(%rip),%eax        # 15cc7 <pvclock_gtod_notify+0x87>
    0.00 :   15cc7:       test   %eax,%eax
    0.00 :   15cc9:       jne    15ccf <pvclock_gtod_notify+0x8f>
    0.00 :   15ccb:       xor    %eax,%eax
    0.00 :   15ccd:       pop    %rbp
    0.00 :   15cce:       retq
    0.00 :   15ccf:       mov    0x0(%rip),%rsi        # 15cd6 <pvclock_gtod_notify+0x96>
    0.00 :   15cd6:       mov    $0x0,%rdx
    0.00 :   15cdd:       mov    $0x2000,%edi
    0.00 :   15ce2:       callq  15ce7 <pvclock_gtod_notify+0xa7>
    0.00 :   15ce7:       xor    %eax,%eax
    0.00 :   15ce9:       pop    %rbp
    0.00 :   15cea:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000119cc0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)>:
         :            _ZN11onnxruntime6python18GetPyObjFromTensorERKNS_6TensorERN8pybind116objectEPKNS_19DataTransferManagerEPKSt13unordered_mapIaPFvPvPKvmESt4hashIaESt8equal_toIaESaISt4pairIKaSF_EEE():
    0.00 :   119cc0:       push   %rbp
    0.00 :   119cc1:       mov    %rsp,%rbp
    0.00 :   119cc4:       push   %r15
    0.00 :   119cc6:       push   %r14
    0.00 :   119cc8:       push   %r13
    0.00 :   119cca:       push   %r12
    0.00 :   119ccc:       mov    %rdi,%r12
    0.00 :   119ccf:       push   %rbx
    0.00 :   119cd0:       sub    $0x2d8,%rsp
    0.00 :   119cd7:       mov    %rdx,-0x2e8(%rbp)
    0.00 :   119cde:       mov    0x18(%rdi),%rdx
    0.00 :   119ce2:       mov    %rsi,-0x2e0(%rbp)
    0.00 :   119ce9:       mov    %rcx,-0x2f8(%rbp)
    0.00 :   119cf0:       mov    %fs:0x28,%rax
    0.00 :   119cf9:       mov    %rax,-0x38(%rbp)
    0.00 :   119cfd:       xor    %eax,%eax
    0.00 :   119cff:       lea    0x18(%rdi),%rax
    0.00 :   119d03:       mov    %rax,-0x2d0(%rbp)
    0.00 :   119d0a:       cmp    0x20(%rdi),%rdx
    0.00 :   119d0e:       je     119e60 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x1a0>
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   119d14:       xor    %ecx,%ecx
    0.00 :   119d16:       xor    %r14d,%r14d
    0.00 :   119d19:       xor    %ebx,%ebx
    0.00 :   119d1b:       movq   $0x0,-0x2c8(%rbp)
    0.00 :   119d26:       jmp    119d5c <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x9c>
    0.00 :   119d28:       nopl   0x0(%rax,%rax,1)
         :            push_back(const value_type& __x)
         :            {
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
         :            {
         :            _GLIBCXX_ASAN_ANNOTATE_GROW(1);
         :            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :   119d30:       mov    0x0(%r13),%rax
         :            __x);
         :            ++this->_M_impl._M_finish;
    0.00 :   119d34:       add    $0x8,%rsi
    0.00 :   119d38:       mov    %rax,-0x8(%rsi)
    0.00 :   119d3c:       mov    %rsi,-0x2c8(%rbp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   119d43:       mov    0x20(%r12),%rax
    0.00 :   119d48:       add    $0x1,%rbx
    0.00 :   119d4c:       sub    %rdx,%rax
    0.00 :   119d4f:       sar    $0x3,%rax
    0.00 :   119d53:       cmp    %rax,%rbx
    0.00 :   119d56:       jae    119e68 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x1a8>
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   119d5c:       mov    -0x2c8(%rbp),%rsi
    0.00 :   119d63:       movslq %ebx,%rax
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   119d66:       lea    (%rdx,%rax,8),%r13
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   119d6a:       cmp    %rsi,%rcx
    0.00 :   119d6d:       jne    119d30 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x70>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   119d6f:       mov    -0x2c8(%rbp),%r15
    0.00 :   119d76:       sub    %r14,%r15
         :            max(const _Tp& __a, const _Tp& __b)
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :            //return  __a < __b ? __b : __a;
         :            if (__a < __b)
    0.00 :   119d79:       mov    %r15,%rax
    0.00 :   119d7c:       sar    $0x3,%rax
    0.00 :   119d80:       je     11a1d0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x510>
         :            {
         :            if (max_size() - size() < __n)
         :            __throw_length_error(__N(__s));
         :
         :            const size_type __len = size() + std::max(size(), __n);
         :            return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :   119d86:       movq   $0xfffffffffffffff8,-0x2d8(%rbp)
         :            const size_type __len = size() + std::max(size(), __n);
    0.00 :   119d91:       lea    (%rax,%rax,1),%rdx
         :            return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :   119d95:       cmp    %rdx,%rax
    0.00 :   119d98:       jbe    119e30 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x170>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   119d9e:       mov    -0x2d8(%rbp),%rdi
    0.00 :   119da5:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   119daa:       mov    -0x2d8(%rbp),%rcx
    0.00 :   119db1:       mov    %rax,%r8
    0.00 :   119db4:       add    %rax,%rcx
         :            // The order of the three operations is dictated by the C++11
         :            // case, where the moves could alter a new element belonging
         :            // to the existing vector.  This is an issue only for callers
         :            // taking the element by lvalue ref (see last bullet of C++11
         :            // [res.on.arguments]).
         :            _Alloc_traits::construct(this->_M_impl,
    0.00 :   119db7:       mov    0x0(%r13),%rax
         :            #endif // __cpp_sized_deallocation
         :            #endif // __cpp_aligned_new
         :
         :            // Default placement versions of operator new.
         :            inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :            { return __p; }
    0.00 :   119dbb:       mov    %rax,(%r8,%r15,1)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   119dbf:       cmp    -0x2c8(%rbp),%r14
    0.00 :   119dc6:       je     119f60 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x2a0>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   119dcc:       mov    %r8,%rdi
    0.00 :   119dcf:       mov    %r15,%rdx
    0.00 :   119dd2:       mov    %r14,%rsi
    0.00 :   119dd5:       mov    %rcx,-0x2d8(%rbp)
    0.00 :   119ddc:       callq  53aa0 <memmove@plt>
    0.00 :   119de1:       mov    -0x2d8(%rbp),%rcx
    0.00 :   119de8:       mov    %rax,%r8
         :            __new_finish
         :            = std::__uninitialized_move_if_noexcept_a
         :            (__old_start, __position.base(),
         :            __new_start, _M_get_Tp_allocator());
         :
         :            ++__new_finish;
    0.00 :   119deb:       lea    0x8(%rax,%r15,1),%rax
    0.00 :   119df0:       mov    %rax,-0x2c8(%rbp)
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   119df7:       mov    %r14,%rdi
    0.00 :   119dfa:       mov    %rcx,-0x2f0(%rbp)
    0.00 :   119e01:       mov    %r8,-0x2d8(%rbp)
    0.00 :   119e08:       callq  53300 <operator delete(void*)@plt>
    0.00 :   119e0d:       mov    -0x2f0(%rbp),%rcx
    0.00 :   119e14:       mov    -0x2d8(%rbp),%r8
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   119e1b:       mov    %r8,%r14
    0.00 :   119e1e:       mov    0x18(%r12),%rdx
    0.00 :   119e23:       jmpq   119d43 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x83>
    0.00 :   119e28:       nopl   0x0(%rax,%rax,1)
         :            return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :   119e30:       movabs $0x1fffffffffffffff,%rcx
    0.00 :   119e3a:       cmp    %rcx,%rdx
    0.00 :   119e3d:       ja     11a1c0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x500>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   119e43:       test   %rdx,%rdx
    0.00 :   119e46:       jne    11a449 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x789>
    0.00 :   119e4c:       xor    %ecx,%ecx
    0.00 :   119e4e:       xor    %r8d,%r8d
    0.00 :   119e51:       jmpq   119db7 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0xf7>
    0.00 :   119e56:       nopw   %cs:0x0(%rax,%rax,1)
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   119e60:       xor    %r14d,%r14d
    0.00 :   119e63:       nopl   0x0(%rax,%rax,1)
    0.00 :   119e68:       mov    0x30(%r12),%rbx
    0.00 :   119e6d:       mov    %rbx,%rdi
    0.00 :   119e70:       callq  1077a0 <onnxruntime::python::OnnxRuntimeTensorToNumpyType(onnxruntime::DataTypeImpl const*)>
    0.00 :   119e75:       mov    %eax,%ecx
    0.00 :   119e77:       mov    %eax,-0x2c8(%rbp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   119e7d:       mov    0x20(%r12),%rsi
    0.00 :   119e82:       xor    %r9d,%r9d
    0.00 :   119e85:       sub    0x18(%r12),%rsi
    0.00 :   119e8a:       sub    $0x8,%rsp
    0.00 :   119e8e:       xor    %r8d,%r8d
    0.00 :   119e91:       mov    %r14,%rdx
    0.00 :   119e94:       lea    0xb0f495(%rip),%rax        # c29330 <onnxruntime_python_ARRAY_API>
    0.00 :   119e9b:       sar    $0x3,%rsi
    0.00 :   119e9f:       mov    (%rax),%rax
    0.00 :   119ea2:       mov    0x10(%rax),%rdi
    0.00 :   119ea6:       pushq  $0x0
    0.00 :   119ea8:       pushq  $0x0
    0.00 :   119eaa:       pushq  $0x0
    0.00 :   119eac:       callq  *0x2e8(%rax)
    0.00 :   119eb2:       mov    -0x2e0(%rbp),%r15
    0.00 :   119eb9:       add    $0x20,%rsp
    0.00 :   119ebd:       mov    (%r15),%rdi
    0.00 :   119ec0:       mov    %rax,(%r15)
    0.00 :   119ec3:       test   %rdi,%rdi
    0.00 :   119ec6:       je     119ed2 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x212>
    0.00 :   119ec8:       subq   $0x1,(%rdi)
    0.00 :   119ecc:       je     119f80 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x2c0>
    0.00 :   119ed2:       cmpl   $0x11,-0x2c8(%rbp)
         :            PyArray_DATA():
    0.00 :   119ed9:       mov    0x10(%rax),%r13
         :            _ZN11onnxruntime6python18GetPyObjFromTensorERKNS_6TensorERN8pybind116objectEPKNS_19DataTransferManagerEPKSt13unordered_mapIaPFvPvPKvmESt4hashIaESt8equal_toIaESaISt4pairIKaSF_EEE():
    0.00 :   119edd:       movzbl 0x4c(%r12),%ecx
  100.00 :   119ee3:       je     11a1e0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x520>
    0.00 :   119ee9:       test   %cl,%cl
    0.00 :   119eeb:       jne    119f90 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x2d0>
    0.00 :   119ef1:       mov    (%rbx),%rax
    0.00 :   119ef4:       mov    %rbx,%rdi
    0.00 :   119ef7:       callq  *0x18(%rax)
    0.00 :   119efa:       mov    -0x2d0(%rbp),%rdi
    0.00 :   119f01:       mov    %rax,%r15
    0.00 :   119f04:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   119f09:       mov    %r15,%rdx
    0.00 :   119f0c:       imul   %rax,%rdx
    0.00 :   119f10:       cmp    0x30(%r12),%rbx
    0.00 :   119f15:       jne    11a51b <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x85b>
    0.00 :   119f1b:       mov    0x50(%r12),%rsi
         :            memcpy():
         :
         :            __fortify_function void *
         :            __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
         :            size_t __len))
         :            {
         :            return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    0.00 :   119f20:       mov    %r13,%rdi
         :            _ZN11onnxruntime6python18GetPyObjFromTensorERKNS_6TensorERN8pybind116objectEPKNS_19DataTransferManagerEPKSt13unordered_mapIaPFvPvPKvmESt4hashIaESt8equal_toIaESaISt4pairIKaSF_EEE():
    0.00 :   119f23:       add    (%r12),%rsi
         :            memcpy():
    0.00 :   119f27:       callq  53150 <memcpy@plt>
         :            _ZN11onnxruntime6python18GetPyObjFromTensorERKNS_6TensorERN8pybind116objectEPKNS_19DataTransferManagerEPKSt13unordered_mapIaPFvPvPKvmESt4hashIaESt8equal_toIaESaISt4pairIKaSF_EEE():
         :            if (__p)
    0.00 :   119f2c:       test   %r14,%r14
    0.00 :   119f2f:       je     119f39 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x279>
    0.00 :   119f31:       mov    %r14,%rdi
    0.00 :   119f34:       callq  53300 <operator delete(void*)@plt>
    0.00 :   119f39:       mov    -0x38(%rbp),%rax
    0.00 :   119f3d:       xor    %fs:0x28,%rax
    0.00 :   119f46:       jne    11a795 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0xad5>
    0.00 :   119f4c:       lea    -0x28(%rbp),%rsp
    0.00 :   119f50:       pop    %rbx
    0.00 :   119f51:       pop    %r12
    0.00 :   119f53:       pop    %r13
    0.00 :   119f55:       pop    %r14
    0.00 :   119f57:       pop    %r15
    0.00 :   119f59:       pop    %rbp
    0.00 :   119f5a:       retq
    0.00 :   119f5b:       nopl   0x0(%rax,%rax,1)
    0.00 :   119f60:       lea    0x8(%r8,%r15,1),%rax
    0.00 :   119f65:       mov    %rax,-0x2c8(%rbp)
    0.00 :   119f6c:       test   %r14,%r14
    0.00 :   119f6f:       je     119e1b <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x15b>
    0.00 :   119f75:       jmpq   119df7 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x137>
    0.00 :   119f7a:       nopw   0x0(%rax,%rax,1)
    0.00 :   119f80:       mov    0x8(%rdi),%rax
    0.00 :   119f84:       callq  *0x30(%rax)
    0.00 :   119f87:       mov    (%r15),%rax
    0.00 :   119f8a:       jmpq   119ed2 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x212>
    0.00 :   119f8f:       nop
    0.00 :   119f90:       mov    -0x2e8(%rbp),%rax
    0.00 :   119f97:       or     -0x2f8(%rbp),%rax
    0.00 :   119f9e:       je     11a459 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x799>
    0.00 :   119fa4:       cmpq   $0x0,-0x2e8(%rbp)
    0.00 :   119fac:       je     11a2eb <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x62b>
    0.00 :   119fb2:       mov    (%rbx),%rax
    0.00 :   119fb5:       mov    %rbx,%rdi
    0.00 :   119fb8:       callq  *0x18(%rax)
    0.00 :   119fbb:       mov    -0x2d0(%rbp),%rdi
    0.00 :   119fc2:       mov    %rax,%rbx
    0.00 :   119fc5:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   119fca:       mov    %r12,%rdi
    0.00 :   119fcd:       imul   %rax,%rbx
    0.00 :   119fd1:       callq  5ede70 <onnxruntime::Tensor::SizeInBytes() const>
    0.00 :   119fd6:       cmp    %rax,%rbx
    0.00 :   119fd9:       je     11a260 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x5a0>
    0.00 :   119fdf:       lea    -0x210(%rbp),%r12
    0.00 :   119fe6:       lea    0x70d51b(%rip),%rsi        # 827508 <std::piecewise_construct+0x768>
    0.00 :   119fed:       mov    %r12,%rdi
    0.00 :   119ff0:       callq  1139c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.878]>
    0.00 :   119ff5:       lea    0x28(%r12),%rdi
    0.00 :   119ffa:       lea    0x71146f(%rip),%rsi        # 82b470 <onnxruntime::CopyTensorDataToByteSpan(onnxruntime::DataTransferManager const&, onnxruntime::Tensor const&, OrtMemoryInfo const&, gsl::span<char>)::__FUNCTION__>
    0.00 :   11a001:       movl   $0x1c,-0x1f0(%rbp)
    0.00 :   11a00b:       callq  1139c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.878]>
    0.00 :   11a010:       lea    -0x250(%rbp),%r13
    0.00 :   11a017:       xor    %edx,%edx
    0.00 :   11a019:       mov    %r12,%rsi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   11a01c:       movq   $0x0,-0x1c8(%rbp)
    0.00 :   11a027:       movq   $0x0,-0x1c0(%rbp)
    0.00 :   11a032:       mov    %r13,%rdi
    0.00 :   11a035:       movq   $0x0,-0x1b8(%rbp)
    0.00 :   11a040:       callq  1144b0 <onnxruntime::CodeLocation::ToString[abi:cxx11](onnxruntime::CodeLocation::Format) const>
    0.00 :   11a045:       lea    -0x1b0(%rbp),%rbx
    0.00 :   11a04c:       mov    $0x10,%esi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   11a051:       lea    -0x230(%rbp),%r15
    0.00 :   11a058:       mov    %rbx,%rdi
    0.00 :   11a05b:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   11a060:       mov    -0x248(%rbp),%rdx
    0.00 :   11a067:       mov    -0x250(%rbp),%rsi
    0.00 :   11a06e:       mov    %rbx,%rdi
    0.00 :   11a071:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   11a076:       lea    0x70d6be(%rip),%rsi        # 82773b <std::piecewise_construct+0x99b>
    0.00 :   11a07d:       mov    %rbx,%rdi
    0.00 :   11a080:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   11a085:       lea    0x70d61f(%rip),%rsi        # 8276ab <std::piecewise_construct+0x90b>
    0.00 :   11a08c:       mov    %rbx,%rdi
    0.00 :   11a08f:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   11a094:       lea    0x8(%rbx),%rsi
    0.00 :   11a098:       mov    %r15,%rdi
    0.00 :   11a09b:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   11a0a0:       mov    %rbx,%rdi
    0.00 :   11a0a3:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   11a0a8:       lea    -0x2c0(%rbp),%rdi
    0.00 :   11a0af:       mov    %r15,%rcx
    0.00 :   11a0b2:       mov    $0x1,%edx
    0.00 :   11a0b7:       mov    $0x2,%esi
    0.00 :   11a0bc:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   11a0c1:       mov    -0x230(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   11a0c8:       sub    $0x70,%rbx
    0.00 :   11a0cc:       cmp    %rbx,%rdi
    0.00 :   11a0cf:       je     11a0d6 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x416>
    0.00 :   11a0d1:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   11a0d6:       mov    -0x250(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   11a0dd:       add    $0x10,%r13
    0.00 :   11a0e1:       cmp    %r13,%rdi
    0.00 :   11a0e4:       je     11a0eb <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x42b>
    0.00 :   11a0e6:       callq  53300 <operator delete(void*)@plt>
    0.00 :   11a0eb:       mov    %r12,%rdi
    0.00 :   11a0ee:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   11a0f3:       cmpq   $0x0,-0x2c0(%rbp)
    0.00 :   11a0fb:       je     119f2c <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x26c>
    0.00 :   11a101:       lea    -0x2c0(%rbp),%rbx
    0.00 :   11a108:       mov    $0x141,%r8d
    0.00 :   11a10e:       lea    0x71146b(%rip),%rcx        # 82b580 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)::__FUNCTION__>
    0.00 :   11a115:       xor    %edi,%edi
    0.00 :   11a117:       lea    0x70d08a(%rip),%rdx        # 8271a8 <std::piecewise_construct+0x408>
    0.00 :   11a11e:       mov    %rbx,%rsi
    0.00 :   11a121:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   11a126:       mov    $0xa0,%edi
    0.00 :   11a12b:       lea    -0x210(%rbp),%r12
    0.00 :   11a132:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   11a137:       mov    %rbx,%rsi
    0.00 :   11a13a:       mov    %r12,%rdi
    0.00 :   11a13d:       lea    -0x2b0(%rbp),%rbx
    0.00 :   11a144:       mov    %rax,%r13
    0.00 :   11a147:       callq  112180 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<onnxruntime::common::Status>(onnxruntime::common::Status const&)>
    0.00 :   11a14c:       mov    %rbx,%rdi
    0.00 :   11a14f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   11a154:       lea    -0x1b0(%rbp),%rax
    0.00 :   11a15b:       mov    %rbx,%r8
    0.00 :   11a15e:       lea    0x71133b(%rip),%rcx        # 82b4a0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)::__PRETTY_FUNCTION__>
    0.00 :   11a165:       mov    $0x141,%edx
    0.00 :   11a16a:       lea    0x70d037(%rip),%rsi        # 8271a8 <std::piecewise_construct+0x408>
    0.00 :   11a171:       mov    %rax,%rdi
    0.00 :   11a174:       mov    %rax,%r15
    0.00 :   11a177:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   11a17c:       mov    %r12,%rcx
    0.00 :   11a17f:       xor    %edx,%edx
    0.00 :   11a181:       mov    %r15,%rsi
    0.00 :   11a184:       mov    %r13,%rdi
    0.00 :   11a187:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   11a18c:       mov    %r15,%rdi
    0.00 :   11a18f:       add    $0x10,%r12
    0.00 :   11a193:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   11a198:       mov    %rbx,%rdi
    0.00 :   11a19b:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   11a1a0:       mov    -0x210(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   11a1a7:       cmp    %r12,%rdi
    0.00 :   11a1aa:       je     556d0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x98>
    0.00 :   11a1b0:       callq  53300 <operator delete(void*)@plt>
    0.00 :   11a1b5:       jmpq   556d0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x98>
    0.00 :   11a1ba:       nopw   0x0(%rax,%rax,1)
         :            return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :   11a1c0:       movq   $0xfffffffffffffff8,-0x2d8(%rbp)
    0.00 :   11a1cb:       jmpq   119d9e <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0xde>
         :            if (__a < __b)
    0.00 :   11a1d0:       movq   $0x8,-0x2d8(%rbp)
    0.00 :   11a1db:       jmpq   119d9e <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0xde>
    0.00 :   11a1e0:       test   %cl,%cl
    0.00 :   11a1e2:       jne    11a6f1 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0xa31>
    0.00 :   11a1e8:       mov    0x30(%r12),%rax
    0.00 :   11a1ed:       cmpl   $0x8,0x8(%rax)
    0.00 :   11a1f1:       jne    11a604 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x944>
    0.00 :   11a1f7:       mov    (%r12),%rax
    0.00 :   11a1fb:       add    0x50(%r12),%rax
    0.00 :   11a200:       xor    %ebx,%ebx
    0.00 :   11a202:       mov    %rax,%r15
    0.00 :   11a205:       jmp    11a242 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x582>
    0.00 :   11a207:       nopw   0x0(%rax,%rax,1)
    0.00 :   11a210:       mov    %r15,%rdi
    0.00 :   11a213:       callq  119c70 <pybind11::detail::string_caster<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, false>::cast(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, pybind11::return_value_policy, pybind11::handle) [clone .constprop.2514]>
    0.00 :   11a218:       mov    0x0(%r13,%rbx,8),%rdi
    0.00 :   11a21d:       mov    %rax,0x0(%r13,%rbx,8)
    0.00 :   11a222:       test   %rdi,%rdi
    0.00 :   11a225:       je     11a234 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x574>
    0.00 :   11a227:       subq   $0x1,(%rdi)
    0.00 :   11a22b:       jne    11a234 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x574>
    0.00 :   11a22d:       mov    0x8(%rdi),%rax
    0.00 :   11a231:       callq  *0x30(%rax)
    0.00 :   11a234:       mov    %r15,%rax
    0.00 :   11a237:       add    $0x1,%rbx
    0.00 :   11a23b:       add    $0x20,%rax
    0.00 :   11a23f:       mov    %rax,%r15
    0.00 :   11a242:       mov    -0x2d0(%rbp),%rdi
    0.00 :   11a249:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   11a24e:       cmp    %rbx,%rax
    0.00 :   11a251:       jg     11a210 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x550>
    0.00 :   11a253:       jmpq   119f2c <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x26c>
    0.00 :   11a258:       nopl   0x0(%rax,%rax,1)
    0.00 :   11a260:       lea    -0x2b0(%rbp),%rbx
    0.00 :   11a267:       mov    0x30(%r12),%rsi
    0.00 :   11a26c:       xor    %r9d,%r9d
    0.00 :   11a26f:       mov    %r13,%rcx
    0.00 :   11a272:       mov    -0x2d0(%rbp),%rdx
    0.00 :   11a279:       lea    0xaf1990(%rip),%r8        # c0bc10 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)::cpu_alloc_info>
    0.00 :   11a280:       mov    %rbx,%rdi
    0.00 :   11a283:       callq  5ee2e0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)>
    0.00 :   11a288:       lea    -0x2b8(%rbp),%r15
    0.00 :   11a28f:       mov    -0x2e8(%rbp),%rsi
    0.00 :   11a296:       mov    %rbx,%rcx
    0.00 :   11a299:       mov    %r12,%rdx
    0.00 :   11a29c:       mov    %r15,%rdi
    0.00 :   11a29f:       callq  599f60 <onnxruntime::DataTransferManager::CopyTensor(onnxruntime::Tensor const&, onnxruntime::Tensor&) const>
    0.00 :   11a2a4:       cmpq   $0x0,-0x2b8(%rbp)
    0.00 :   11a2ac:       je     11a398 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x6d8>
    0.00 :   11a2b2:       mov    $0x1e,%r8d
    0.00 :   11a2b8:       lea    0x7111b1(%rip),%rcx        # 82b470 <onnxruntime::CopyTensorDataToByteSpan(onnxruntime::DataTransferManager const&, onnxruntime::Tensor const&, OrtMemoryInfo const&, gsl::span<char>)::__FUNCTION__>
    0.00 :   11a2bf:       mov    %r15,%rsi
    0.00 :   11a2c2:       xor    %edi,%edi
    0.00 :   11a2c4:       lea    0x70d23d(%rip),%rdx        # 827508 <std::piecewise_construct+0x768>
    0.00 :   11a2cb:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   11a2d0:       mov    -0x2b8(%rbp),%rax
    0.00 :   11a2d7:       mov    %rax,-0x2c0(%rbp)
    0.00 :   11a2de:       mov    %rbx,%rdi
    0.00 :   11a2e1:       callq  5edae0 <onnxruntime::Tensor::~Tensor()>
    0.00 :   11a2e6:       jmpq   11a0f3 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x433>
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            find(const key_type& __k) const
         :            -> const_iterator
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   11a2eb:       mov    -0x2f8(%rbp),%rdi
         :
         :            /// Explicit specialization for char.
         :            _Cxx_hashtable_define_trivial_hash(char)
         :
         :            /// Explicit specialization for signed char.
         :            _Cxx_hashtable_define_trivial_hash(signed char)
    0.00 :   11a2f2:       movsbq %cl,%rax
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   11a2f6:       xor    %edx,%edx
    0.00 :   11a2f8:       mov    0x8(%rdi),%r8
    0.00 :   11a2fc:       div    %r8
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __n, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__n];
    0.00 :   11a2ff:       mov    (%rdi),%rax
    0.00 :   11a302:       mov    (%rax,%rdx,8),%r10
    0.00 :   11a306:       mov    %rdx,%r9
         :            if (!__prev_p)
    0.00 :   11a309:       test   %r10,%r10
    0.00 :   11a30c:       je     11a47a <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x7ba>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   11a312:       mov    (%r10),%rsi
    0.00 :   11a315:       movzbl 0x8(%rsi),%edi
    0.00 :   11a319:       jmp    11a348 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x688>
    0.00 :   11a31b:       nopl   0x0(%rax,%rax,1)
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   11a320:       mov    (%rsi),%rax
    0.00 :   11a323:       test   %rax,%rax
    0.00 :   11a326:       je     11a47a <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x7ba>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   11a32c:       movzbl 0x8(%rax),%edi
         :            { return __num % __den; }
    0.00 :   11a330:       mov    %rsi,%r10
    0.00 :   11a333:       xor    %edx,%edx
    0.00 :   11a335:       mov    %rax,%rsi
    0.00 :   11a338:       movsbq %dil,%rax
    0.00 :   11a33c:       div    %r8
    0.00 :   11a33f:       cmp    %rdx,%r9
    0.00 :   11a342:       jne    11a47a <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x7ba>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   11a348:       cmp    %dil,%cl
    0.00 :   11a34b:       jne    11a320 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x660>
         :            return static_cast<__node_type*>(__before_n->_M_nxt);
    0.00 :   11a34d:       mov    (%r10),%rax
         :            return __p ? const_iterator(__p) : end();
    0.00 :   11a350:       test   %rax,%rax
    0.00 :   11a353:       je     11a47a <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x7ba>
    0.00 :   11a359:       mov    0x10(%rax),%rax
    0.00 :   11a35d:       mov    %rax,%r15
    0.00 :   11a360:       test   %rax,%rax
    0.00 :   11a363:       je     11a3a8 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x6e8>
    0.00 :   11a365:       mov    (%rbx),%rax
    0.00 :   11a368:       mov    %rbx,%rdi
    0.00 :   11a36b:       callq  *0x18(%rax)
    0.00 :   11a36e:       mov    -0x2d0(%rbp),%rdi
    0.00 :   11a375:       mov    %rax,%rbx
    0.00 :   11a378:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   11a37d:       imul   %rbx,%rax
    0.00 :   11a381:       mov    0x50(%r12),%rsi
    0.00 :   11a386:       mov    %r13,%rdi
    0.00 :   11a389:       add    (%r12),%rsi
    0.00 :   11a38d:       mov    %rax,%rdx
    0.00 :   11a390:       callq  *%r15
    0.00 :   11a393:       jmpq   119f2c <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x26c>
    0.00 :   11a398:       movq   $0x0,-0x2c0(%rbp)
         :            constexpr _Head_base()
    0.00 :   11a3a3:       jmpq   11a2de <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0x61e>
    0.00 :   11a3a8:       mov    $0xa0,%edi
    0.00 :   11a3ad:       lea    -0x210(%rbp),%r12
    0.00 :   11a3b4:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   11a3b9:       lea    0x70d218(%rip),%rsi        # 8275d8 <std::piecewise_construct+0x838>
    0.00 :   11a3c0:       mov    %r12,%rdi
    0.00 :   11a3c3:       mov    %rax,%r13
    0.00 :   11a3c6:       callq  1139c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.878]>
    0.00 :   11a3cb:       lea    -0x2b0(%rbp),%rbx
    0.00 :   11a3d2:       mov    %rbx,%rdi
    0.00 :   11a3d5:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   11a3da:       lea    -0x1b0(%rbp),%r15
    0.00 :   11a3e1:       mov    %rbx,%r8
    0.00 :   11a3e4:       lea    0x7110b5(%rip),%rcx        # 82b4a0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)::__PRETTY_FUNCTION__>
    0.00 :   11a3eb:       mov    $0x149,%edx
    0.00 :   11a3f0:       lea    0x70cdb1(%rip),%rsi        # 8271a8 <std::piecewise_construct+0x408>
    0.00 :   11a3f7:       mov    %r15,%rdi
    0.00 :   11a3fa:       mov    %r15,-0x2c8(%rbp)
    0.00 :   11a401:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   11a406:       mov    %r12,%rcx
    0.00 :   11a409:       lea    0x70d2b0(%rip),%rdx        # 8276c0 <std::piecewise_construct+0x920>
    0.00 :   11a410:       mov    %r15,%rsi
    0.00 :   11a413:       mov    %r13,%rdi
    0.00 :   11a416:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   11a41b:       mov    %r15,%rdi
    0.00 :   11a41e:       add    $0x10,%r12
    0.00 :   11a422:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   11a427:       mov    %rbx,%rdi
    0.00 :   11a42a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   11a42f:       mov    -0x210(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   11a436:       cmp    %r12,%rdi
    0.00 :   11a439:       je     5572a <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0xf2>
    0.00 :   11a43f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   11a444:       jmpq   5572a <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0xf2>
    0.00 :   11a449:       shl    $0x4,%rax
    0.00 :   11a44d:       mov    %rax,-0x2d8(%rbp)
    0.00 :   11a454:       jmpq   119d9e <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)+0xde>
    0.00 :   11a459:       mov    $0x10,%edi
    0.00 :   11a45e:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   11a463:       lea    0x70d00e(%rip),%rsi        # 827478 <std::piecewise_construct+0x6d8>
    0.00 :   11a46a:       mov    %rax,%rdi
    0.00 :   11a46d:       mov    %rax,%r15
    0.00 :   11a470:       callq  52be0 <std::runtime_error::runtime_error(char const*)@plt>
    0.00 :   11a475:       jmpq   55835 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x1fd>
    0.00 :   11a47a:       mov    $0xa0,%edi
    0.00 :   11a47f:       lea    -0x210(%rbp),%r12
    0.00 :   11a486:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   11a48b:       lea    0x70d0be(%rip),%rsi        # 827550 <std::piecewise_construct+0x7b0>
    0.00 :   11a492:       mov    %r12,%rdi
    0.00 :   11a495:       mov    %rax,%r13
    0.00 :   11a498:       callq  1139c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.878]>
    0.00 :   11a49d:       lea    -0x2b0(%rbp),%rbx
    0.00 :   11a4a4:       mov    %rbx,%rdi
    0.00 :   11a4a7:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   11a4ac:       lea    -0x1b0(%rbp),%r15
    0.00 :   11a4b3:       mov    %rbx,%r8
    0.00 :   11a4b6:       lea    0x710fe3(%rip),%rcx        # 82b4a0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)::__PRETTY_FUNCTION__>
    0.00 :   11a4bd:       mov    $0x146,%edx
    0.00 :   11a4c2:       lea    0x70ccdf(%rip),%rsi        # 8271a8 <std::piecewise_construct+0x408>
    0.00 :   11a4c9:       mov    %r15,%rdi
    0.00 :   11a4cc:       mov    %r15,-0x2c8(%rbp)
    0.00 :   11a4d3:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   11a4d8:       mov    %r12,%rcx
    0.00 :   11a4db:       lea    0x70d0be(%rip),%rdx        # 8275a0 <std::piecewise_construct+0x800>
    0.00 :   11a4e2:       mov    %r15,%rsi
    0.00 :   11a4e5:       mov    %r13,%rdi
    0.00 :   11a4e8:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   11a4ed:       mov    %r15,%rdi
    0.00 :   11a4f0:       add    $0x10,%r12
    0.00 :   11a4f4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   11a4f9:       mov    %rbx,%rdi
    0.00 :   11a4fc:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   11a501:       mov    -0x210(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   11a508:       cmp    %r12,%rdi
    0.00 :   11a50b:       je     55638 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]>
    0.00 :   11a511:       callq  53300 <operator delete(void*)@plt>
    0.00 :   11a516:       jmpq   55638 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]>
    0.00 :   11a51b:       lea    -0x1b0(%rbp),%r15
    0.00 :   11a522:       mov    $0xa0,%edi
    0.00 :   11a527:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   11a52c:       mov    $0x10,%esi
    0.00 :   11a531:       mov    %r15,%rdi
    0.00 :   11a534:       mov    %r15,-0x2c8(%rbp)
    0.00 :   11a53b:       mov    %rax,%r13
    0.00 :   11a53e:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   11a543:       lea    0x70d193(%rip),%rsi        # 8276dd <std::piecewise_construct+0x93d>
    0.00 :   11a54a:       mov    %r15,%rdi
    0.00 :   11a54d:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   11a552:       mov    %rbx,%rsi
    0.00 :   11a555:       mov    %r15,%rdi
    0.00 :   11a558:       lea    -0x2b0(%rbp),%rbx
    0.00 :   11a55f:       callq  59ce30 <onnxruntime::operator<<(std::ostream&, onnxruntime::DataTypeImpl const*)>
    0.00 :   11a564:       lea    0x70b2a0(%rip),%rsi        # 82580b <_fini+0x573>
    0.00 :   11a56b:       mov    %r15,%rdi
    0.00 :   11a56e:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   11a573:       mov    0x30(%r12),%rsi
    0.00 :   11a578:       mov    %r15,%rdi
    0.00 :   11a57b:       lea    -0x210(%rbp),%r12
    0.00 :   11a582:       callq  59ce30 <onnxruntime::operator<<(std::ostream&, onnxruntime::DataTypeImpl const*)>
    0.00 :   11a587:       lea    0x8(%r15),%rsi
    0.00 :   11a58b:       mov    %r12,%rdi
    0.00 :   11a58e:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   11a593:       mov    %r15,%rdi
    0.00 :   11a596:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   11a59b:       mov    %rbx,%rdi
    0.00 :   11a59e:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   11a5a3:       mov    %rbx,%r8
    0.00 :   11a5a6:       mov    $0xaa,%edx
    0.00 :   11a5ab:       mov    %r15,%rdi
    0.00 :   11a5ae:       lea    0x710e6b(%rip),%rcx        # 82b420 <onnxruntime::Tensor::DataRaw(onnxruntime::DataTypeImpl const*) const::__PRETTY_FUNCTION__>
    0.00 :   11a5b5:       lea    0x70b254(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   11a5bc:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   11a5c1:       mov    %r12,%rcx
    0.00 :   11a5c4:       lea    0x70d128(%rip),%rdx        # 8276f3 <std::piecewise_construct+0x953>
    0.00 :   11a5cb:       mov    %r15,%rsi
    0.00 :   11a5ce:       mov    %r13,%rdi
    0.00 :   11a5d1:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   11a5d6:       mov    %r15,%rdi
    0.00 :   11a5d9:       add    $0x10,%r12
    0.00 :   11a5dd:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   11a5e2:       mov    %rbx,%rdi
    0.00 :   11a5e5:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   11a5ea:       mov    -0x210(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   11a5f1:       cmp    %r12,%rdi
    0.00 :   11a5f4:       je     5575e <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x126>
    0.00 :   11a5fa:       callq  53300 <operator delete(void*)@plt>
    0.00 :   11a5ff:       jmpq   5575e <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x126>
    0.00 :   11a604:       lea    -0x1b0(%rbp),%r15
    0.00 :   11a60b:       mov    $0xa0,%edi
    0.00 :   11a610:       lea    -0x2b0(%rbp),%rbx
    0.00 :   11a617:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   11a61c:       mov    $0x10,%esi
    0.00 :   11a621:       mov    %r15,%rdi
    0.00 :   11a624:       mov    %r15,-0x2c8(%rbp)
    0.00 :   11a62b:       mov    %rax,%r13
    0.00 :   11a62e:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   11a633:       lea    0x70b1b7(%rip),%rsi        # 8257f1 <_fini+0x559>
    0.00 :   11a63a:       mov    %r15,%rdi
    0.00 :   11a63d:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   11a642:       lea    0x70b1bf(%rip),%rsi        # 825808 <_fini+0x570>
    0.00 :   11a649:       mov    %r15,%rdi
    0.00 :   11a64c:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   11a651:       lea    0x70b1b3(%rip),%rsi        # 82580b <_fini+0x573>
    0.00 :   11a658:       mov    %r15,%rdi
    0.00 :   11a65b:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   11a660:       mov    0x30(%r12),%rsi
    0.00 :   11a665:       mov    %r15,%rdi
    0.00 :   11a668:       lea    -0x210(%rbp),%r12
    0.00 :   11a66f:       callq  59ce30 <onnxruntime::operator<<(std::ostream&, onnxruntime::DataTypeImpl const*)>
    0.00 :   11a674:       lea    0x8(%r15),%rsi
    0.00 :   11a678:       mov    %r12,%rdi
    0.00 :   11a67b:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   11a680:       mov    %r15,%rdi
    0.00 :   11a683:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   11a688:       mov    %rbx,%rdi
    0.00 :   11a68b:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   11a690:       mov    %rbx,%r8
    0.00 :   11a693:       mov    $0x97,%edx
    0.00 :   11a698:       mov    %r15,%rdi
    0.00 :   11a69b:       lea    0x710d1e(%rip),%rcx        # 82b3c0 <onnxruntime::Tensor::Data<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >() const::__PRETTY_FUNCTION__>
    0.00 :   11a6a2:       lea    0x70b167(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   11a6a9:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   11a6ae:       mov    %r12,%rcx
    0.00 :   11a6b1:       lea    0x70b198(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   11a6b8:       mov    %r15,%rsi
    0.00 :   11a6bb:       mov    %r13,%rdi
    0.00 :   11a6be:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   11a6c3:       mov    %r15,%rdi
    0.00 :   11a6c6:       add    $0x10,%r12
    0.00 :   11a6ca:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   11a6cf:       mov    %rbx,%rdi
    0.00 :   11a6d2:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   11a6d7:       mov    -0x210(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   11a6de:       cmp    %r12,%rdi
    0.00 :   11a6e1:       je     556e6 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0xae>
    0.00 :   11a6e7:       callq  53300 <operator delete(void*)@plt>
    0.00 :   11a6ec:       jmpq   556e6 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0xae>
    0.00 :   11a6f1:       mov    $0xa0,%edi
    0.00 :   11a6f6:       lea    -0x210(%rbp),%r12
    0.00 :   11a6fd:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   11a702:       lea    0x70cf17(%rip),%rsi        # 827620 <std::piecewise_construct+0x880>
    0.00 :   11a709:       mov    %r12,%rdi
    0.00 :   11a70c:       mov    %rax,%r13
    0.00 :   11a70f:       callq  1139c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.878]>
    0.00 :   11a714:       lea    -0x2b0(%rbp),%rbx
    0.00 :   11a71b:       mov    %rbx,%rdi
    0.00 :   11a71e:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   11a723:       lea    -0x1b0(%rbp),%rax
    0.00 :   11a72a:       mov    %rbx,%r8
    0.00 :   11a72d:       lea    0x710d6c(%rip),%rcx        # 82b4a0 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*)::__PRETTY_FUNCTION__>
    0.00 :   11a734:       mov    $0x154,%edx
    0.00 :   11a739:       lea    0x70ca68(%rip),%rsi        # 8271a8 <std::piecewise_construct+0x408>
    0.00 :   11a740:       mov    %rax,%rdi
    0.00 :   11a743:       mov    %rax,%r15
    0.00 :   11a746:       mov    %rax,-0x2c8(%rbp)
    0.00 :   11a74d:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   11a752:       mov    %r12,%rcx
    0.00 :   11a755:       lea    0x70cf1c(%rip),%rdx        # 827678 <std::piecewise_construct+0x8d8>
    0.00 :   11a75c:       mov    %r15,%rsi
    0.00 :   11a75f:       mov    %r13,%rdi
    0.00 :   11a762:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   11a767:       mov    %r15,%rdi
    0.00 :   11a76a:       add    $0x10,%r12
    0.00 :   11a76e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   11a773:       mov    %rbx,%rdi
    0.00 :   11a776:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   11a77b:       mov    -0x210(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   11a782:       cmp    %r12,%rdi
    0.00 :   11a785:       je     5564e <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x16>
    0.00 :   11a78b:       callq  53300 <operator delete(void*)@plt>
    0.00 :   11a790:       jmpq   5564e <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x16>
    0.00 :   11a795:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   11a79a:       mov    %rax,%r15
    0.00 :   11a79d:       jmpq   55664 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x2c>
    0.00 :   11a7a2:       mov    %rax,%r15
    0.00 :   11a7a5:       jmpq   5569a <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x62>
    0.00 :   11a7aa:       mov    %rax,%r15
    0.00 :   11a7ad:       jmpq   556a6 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x6e>
    0.00 :   11a7b2:       mov    %rax,%rbx
    0.00 :   11a7b5:       jmpq   55828 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x1f0>
    0.00 :   11a7ba:       mov    %rax,%r15
    0.00 :   11a7bd:       jmpq   557c6 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x18e>
    0.00 :   11a7c2:       mov    %rax,%r15
    0.00 :   11a7c5:       jmpq   556fc <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0xc4>
    0.00 :   11a7ca:       mov    %rax,%r15
    0.00 :   11a7cd:       jmpq   55708 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0xd0>
    0.00 :   11a7d2:       mov    %rax,%rbx
    0.00 :   11a7d5:       jmpq   55713 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0xdb>
    0.00 :   11a7da:       mov    %rax,%rbx
    0.00 :   11a7dd:       jmpq   556c6 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x8e>
    0.00 :   11a7e2:       jmpq   55695 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x5d>
    0.00 :   11a7e7:       mov    %rax,%rbx
    0.00 :   11a7ea:       jmpq   55740 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x108>
    0.00 :   11a7ef:       mov    %rax,%r15
    0.00 :   11a7f2:       jmpq   55774 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x13c>
    0.00 :   11a7f7:       mov    %rax,%r15
    0.00 :   11a7fa:       jmpq   55780 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x148>
    0.00 :   11a7ff:       mov    %rax,%rbx
    0.00 :   11a802:       jmpq   5578b <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x153>
    0.00 :   11a807:       mov    %rax,%rbx
    0.00 :   11a80a:       jmpq   557dd <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x1a5>
    0.00 :   11a80f:       mov    %rax,%r15
    0.00 :   11a812:       jmpq   557d2 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x19a>
    0.00 :   11a817:       mov    %rax,%rbx
    0.00 :   11a81a:       jmpq   556c6 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x8e>
    0.00 :   11a81f:       mov    %rax,%rbx
    0.00 :   11a822:       jmpq   557fb <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x1c3>
    0.00 :   11a827:       mov    %rax,%r15
    0.00 :   11a82a:       jmpq   55675 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x3d>
    0.00 :   11a82f:       mov    %rax,%rbx
    0.00 :   11a832:       jmpq   5584b <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x213>
    0.00 :   11a837:       mov    %rax,%rbx
    0.00 :   11a83a:       jmpq   55863 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x22b>
    0.00 :   11a83f:       mov    %rax,%r15
    0.00 :   11a842:       jmpq   55858 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x220>
    0.00 :   11a847:       jmpq   557a9 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x171>
    0.00 :   11a84c:       mov    %rax,%rbx
    0.00 :   11a84f:       jmpq   556b1 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x79>
    0.00 :   11a854:       mov    %rax,%rbx
    0.00 :   11a857:       jmpq   556c6 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x8e>
    0.00 :   11a85c:       mov    %rax,%r15
    0.00 :   11a85f:       jmpq   55891 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x259>
    0.00 :   11a864:       mov    %rax,%rbx
    0.00 :   11a867:       jmpq   5589c <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x264>
    0.00 :   11a86c:       mov    %rax,%r15
    0.00 :   11a86f:       jmpq   55885 <onnxruntime::python::GetPyObjFromTensor(onnxruntime::Tensor const&, pybind11::object&, onnxruntime::DataTransferManager const*, std::unordered_map<signed char, void (*)(void*, void const*, unsigned long), std::hash<signed char>, std::equal_to<signed char>, std::allocator<std::pair<signed char const, void (*)(void*, void const*, unsigned long)> > > const*) [clone .cold.2526]+0x24d>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (4 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a9310 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const>:
         :            _ZNK11onnxruntime15IExecutionFrame22GetNodeIdxToMLValueIdxEi():
   57.60 :   5a9310:       push   %r14
    0.00 :   5a9312:       push   %r13
    0.00 :   5a9314:       push   %r12
    0.00 :   5a9316:       push   %rbp
    0.00 :   5a9317:       push   %rbx
    0.00 :   5a9318:       sub    $0xb0,%rsp
    0.00 :   5a931f:       mov    %fs:0x28,%rax
    0.00 :   5a9328:       mov    %rax,0xa8(%rsp)
    0.00 :   5a9330:       xor    %eax,%eax
    0.00 :   5a9332:       mov    0x8(%rdi),%rax
    0.00 :   5a9336:       test   %esi,%esi
    0.00 :   5a9338:       js     5a9370 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const+0x60>
    0.00 :   5a933a:       movslq %esi,%rsi
    0.00 :   5a933d:       cmp    0x40(%rax),%rsi
    0.00 :   5a9341:       jae    5a9370 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const+0x60>
    0.00 :   5a9343:       mov    0xa8(%rsp),%rcx
    0.00 :   5a934b:       xor    %fs:0x28,%rcx
    0.00 :   5a9354:       mov    (%rax),%rax
    0.00 :   5a9357:       mov    (%rax,%rsi,4),%eax
   42.40 :   5a935a:       jne    5a93f9 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const+0xe9>
    0.00 :   5a9360:       add    $0xb0,%rsp
    0.00 :   5a9367:       pop    %rbx
    0.00 :   5a9368:       pop    %rbp
    0.00 :   5a9369:       pop    %r12
    0.00 :   5a936b:       pop    %r13
    0.00 :   5a936d:       pop    %r14
    0.00 :   5a936f:       retq
    0.00 :   5a9370:       mov    $0xa0,%edi
    0.00 :   5a9375:       lea    0x20(%rsp),%rbx
    0.00 :   5a937a:       mov    %rsp,%r13
    0.00 :   5a937d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5a9382:       mov    %rbx,%rdi
    0.00 :   5a9385:       mov    %rax,%r12
    0.00 :   5a9388:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5a938d:       mov    %r13,%rdi
    0.00 :   5a9390:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5a9395:       lea    0x40(%rsp),%r14
    0.00 :   5a939a:       mov    %r13,%r8
    0.00 :   5a939d:       lea    0x2e741c(%rip),%rcx        # 8907c0 <onnxruntime::NodeIndexInfo::GetMLValueIndex(int) const::__PRETTY_FUNCTION__>
    0.00 :   5a93a4:       mov    $0x2a,%edx
    0.00 :   5a93a9:       lea    0x2e6608(%rip),%rsi        # 88f9b8 <std::piecewise_construct+0xdb>
    0.00 :   5a93b0:       mov    %r14,%rdi
    0.00 :   5a93b3:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5a93b8:       mov    %rbx,%rcx
    0.00 :   5a93bb:       lea    0x2e6636(%rip),%rdx        # 88f9f8 <std::piecewise_construct+0x11b>
    0.00 :   5a93c2:       mov    %r14,%rsi
    0.00 :   5a93c5:       mov    %r12,%rdi
    0.00 :   5a93c8:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5a93cd:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5a93d0:       add    $0x10,%rbx
    0.00 :   5a93d4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5a93d9:       mov    %r13,%rdi
    0.00 :   5a93dc:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5a93e1:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5a93e6:       cmp    %rbx,%rdi
    0.00 :   5a93e9:       je     b10ea <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5a93ef:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5a93f4:       jmpq   b10ea <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]>
    0.00 :   5a93f9:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5a93fe:       mov    %rax,%rbp
    0.00 :   5a9401:       jmpq   b1100 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]+0x16>
    0.00 :   5a9406:       mov    %rax,%rbp
    0.00 :   5a9409:       jmpq   b1108 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]+0x1e>
    0.00 :   5a940e:       mov    %rax,%rbp
    0.00 :   5a9411:       jmpq   b1110 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const [clone .cold.427]+0x26>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (5 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006cb798 <MlasTanhKernelFma3>:
         :            MlasTanhKernelFma3():
   13.91 :   6cb798:       lea    0x1dbf01(%rip),%rax        # 8a76a0 <MlasTanhConstants>
    0.00 :   6cb79f:       vbroadcastss (%rax),%ymm4
   43.84 :   6cb7a4:       vbroadcastss 0x4(%rax),%ymm5
    0.00 :   6cb7aa:       vbroadcastss 0x8(%rax),%ymm6
    0.00 :   6cb7b0:       vbroadcastss 0xc(%rax),%ymm7
    0.00 :   6cb7b6:       vbroadcastss 0x10(%rax),%ymm8
    0.00 :   6cb7bc:       vbroadcastss 0x14(%rax),%ymm9
    0.00 :   6cb7c2:       vbroadcastss 0x18(%rax),%ymm10
    0.00 :   6cb7c8:       vbroadcastss 0x1c(%rax),%ymm11
    0.00 :   6cb7ce:       vbroadcastss 0x20(%rax),%ymm12
    0.00 :   6cb7d4:       vbroadcastss 0x24(%rax),%ymm13
    0.00 :   6cb7da:       vbroadcastss 0x2c(%rax),%ymm14
    0.00 :   6cb7e0:       vbroadcastss 0x30(%rax),%ymm15
    0.00 :   6cb7e6:       sub    $0x8,%rdx
    0.00 :   6cb7ea:       jb     6cb849 <MlasTanhKernelFma3+0xb1>
    0.00 :   6cb7ec:       vmaxps (%rdi),%ymm4,%ymm0
    0.00 :   6cb7f0:       vmovaps %ymm7,%ymm2
   17.38 :   6cb7f4:       vminps %ymm0,%ymm5,%ymm0
    0.00 :   6cb7f8:       vmulps %ymm0,%ymm0,%ymm1
    0.00 :   6cb7fc:       vbroadcastss 0x28(%rax),%ymm3
    0.00 :   6cb802:       vfmadd231ps %ymm6,%ymm1,%ymm2
   24.87 :   6cb807:       vfmadd213ps %ymm8,%ymm1,%ymm2
    0.00 :   6cb80c:       vfmadd213ps %ymm9,%ymm1,%ymm2
    0.00 :   6cb811:       vfmadd213ps %ymm10,%ymm1,%ymm2
    0.00 :   6cb816:       vfmadd213ps %ymm11,%ymm1,%ymm2
    0.00 :   6cb81b:       vfmadd213ps %ymm12,%ymm1,%ymm2
    0.00 :   6cb820:       vfmadd231ps %ymm13,%ymm1,%ymm3
    0.00 :   6cb825:       vfmadd213ps %ymm14,%ymm1,%ymm3
    0.00 :   6cb82a:       vfmadd213ps %ymm15,%ymm1,%ymm3
    0.00 :   6cb82f:       vmulps %ymm2,%ymm0,%ymm2
    0.00 :   6cb833:       vdivps %ymm3,%ymm2,%ymm0
    0.00 :   6cb837:       add    $0x20,%rdi
    0.00 :   6cb83b:       vmovups %ymm0,(%rsi)
    0.00 :   6cb83f:       add    $0x20,%rsi
    0.00 :   6cb843:       sub    $0x8,%rdx
    0.00 :   6cb847:       jae    6cb7ec <MlasTanhKernelFma3+0x54>
    0.00 :   6cb849:       add    $0x8,%rdx
    0.00 :   6cb84d:       je     6cb8b3 <MlasTanhKernelFma3+0x11b>
    0.00 :   6cb84f:       mov    %edx,-0x8(%rsp)
    0.00 :   6cb853:       vbroadcastss -0x8(%rsp),%ymm2
    0.00 :   6cb85a:       vpcmpgtd 0x1dbbbe(%rip),%ymm2,%ymm2        # 8a7420 <MlasMaskMoveAvx>
    0.00 :   6cb862:       vmaskmovps (%rdi),%ymm2,%ymm0
    0.00 :   6cb867:       vmaxps %ymm0,%ymm4,%ymm0
    0.00 :   6cb86b:       vminps %ymm0,%ymm5,%ymm0
    0.00 :   6cb86f:       vmulps %ymm0,%ymm0,%ymm1
    0.00 :   6cb873:       vbroadcastss 0x28(%rax),%ymm3
    0.00 :   6cb879:       vfmadd231ps %ymm6,%ymm1,%ymm7
    0.00 :   6cb87e:       vfmadd213ps %ymm8,%ymm1,%ymm7
    0.00 :   6cb883:       vfmadd213ps %ymm9,%ymm1,%ymm7
    0.00 :   6cb888:       vfmadd213ps %ymm10,%ymm1,%ymm7
    0.00 :   6cb88d:       vfmadd213ps %ymm11,%ymm1,%ymm7
    0.00 :   6cb892:       vfmadd213ps %ymm12,%ymm1,%ymm7
    0.00 :   6cb897:       vfmadd231ps %ymm13,%ymm1,%ymm3
    0.00 :   6cb89c:       vfmadd213ps %ymm14,%ymm1,%ymm3
    0.00 :   6cb8a1:       vfmadd213ps %ymm15,%ymm1,%ymm3
    0.00 :   6cb8a6:       vmulps %ymm7,%ymm0,%ymm7
    0.00 :   6cb8aa:       vdivps %ymm3,%ymm7,%ymm0
    0.00 :   6cb8ae:       vmaskmovps %ymm0,%ymm2,(%rsi)
    0.00 :   6cb8b3:       vzeroupper
    0.00 :   6cb8b6:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000590070 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)>:
         :            _ZN11onnxruntime8BFCArena10SplitChunkEmm():
    0.00 :   590070:       push   %r15
    0.00 :   590072:       push   %r14
    0.00 :   590074:       push   %r13
    0.00 :   590076:       mov    %rdx,%r13
    0.00 :   590079:       push   %r12
    0.00 :   59007b:       mov    %rsi,%r12
    0.00 :   59007e:       push   %rbp
    0.00 :   59007f:       mov    %rdi,%rbp
    0.00 :   590082:       push   %rbx
    0.00 :   590083:       sub    $0x288,%rsp
    0.00 :   59008a:       mov    %fs:0x28,%rax
    0.00 :   590093:       mov    %rax,0x278(%rsp)
    0.00 :   59009b:       xor    %eax,%eax
    0.00 :   59009d:       callq  58f540 <onnxruntime::BFCArena::AllocateChunk()>
    0.00 :   5900a2:       mov    %r12,%rsi
    0.00 :   5900a5:       mov    %rbp,%rdi
    0.00 :   5900a8:       mov    %rax,%r15
    0.00 :   5900ab:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   5900b0:       cmpq   $0xffffffffffffffff,0x10(%rax)
    0.00 :   5900b5:       jne    5902d7 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x267>
    0.00 :   5900bb:       cmpl   $0xffffffff,0x30(%rax)
    0.00 :   5900bf:       mov    %rax,%r14
    0.00 :   5900c2:       jne    5902d7 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x267>
    0.00 :   5900c8:       mov    %r15,%rsi
    0.00 :   5900cb:       mov    %rbp,%rdi
    0.00 :   5900ce:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   5900d3:       mov    0x18(%r14),%rbx
    0.00 :   5900d7:       add    %r13,%rbx
    0.00 :   5900da:       mov    %rbx,0x18(%rax)
    0.00 :   5900de:       mov    0x4f0(%rbp),%r8
    0.00 :   5900e5:       mov    0x4e8(%rbp),%rcx
         :            template<typename _Iterator, typename _Container>
         :            inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :            operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
         :            const __normal_iterator<_Iterator, _Container>& __rhs)
         :            _GLIBCXX_NOEXCEPT
         :            { return __lhs.base() - __rhs.base(); }
    0.00 :   5900ec:       mov    %r8,%rdx
    0.00 :   5900ef:       sub    %rcx,%rdx
    0.00 :   5900f2:       sar    $0x5,%rdx
    0.00 :   5900f6:       jmp    59010b <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x9b>
    0.00 :   5900f8:       nopl   0x0(%rax,%rax,1)
         :            __len = __half;
         :            else
         :            {
         :            __first = __middle;
         :            ++__first;
         :            __len = __len - __half - 1;
   39.73 :   590100:       sub    %rdi,%rdx
         :            ++_M_current;
    0.00 :   590103:       lea    0x20(%rsi),%rcx
    0.00 :   590107:       sub    $0x1,%rdx
         :            while (__len > 0)
    0.00 :   59010b:       test   %rdx,%rdx
    0.00 :   59010e:       jle    59012e <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0xbe>
         :            _DistanceType __half = __len >> 1;
    0.00 :   590110:       mov    %rdx,%rdi
    0.00 :   590113:       sar    %rdi
         :            { _M_current += __n; return *this; }
    0.00 :   590116:       mov    %rdi,%rsi
    0.00 :   590119:       shl    $0x5,%rsi
    0.00 :   59011d:       add    %rcx,%rsi
         :            if (__comp(__val, __middle))
    0.00 :   590120:       cmp    0x10(%rsi),%rbx
    0.00 :   590124:       jae    590100 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x90>
         :            while (__len > 0)
    0.00 :   590126:       mov    %rdi,%rdx
    0.00 :   590129:       test   %rdi,%rdi
    0.00 :   59012c:       jne    590110 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0xa0>
    0.00 :   59012e:       cmp    %rcx,%r8
    0.00 :   590131:       je     5901d0 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x160>
    0.00 :   590137:       mov    (%rcx),%rdx
    0.00 :   59013a:       mov    0x18(%rcx),%rsi
    0.00 :   59013e:       cmp    %rdx,%rbx
    0.00 :   590141:       jb     5903ef <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x37f>
    0.00 :   590147:       mov    0x8(%rcx),%rdi
    0.00 :   59014b:       add    %rdx,%rdi
    0.00 :   59014e:       cmp    %rdi,%rbx
    0.00 :   590151:       jae    590363 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x2f3>
    0.00 :   590157:       sub    %rdx,%rbx
    0.00 :   59015a:       shr    $0x8,%rbx
    0.00 :   59015e:       movslq %ebx,%rbx
    0.00 :   590161:       mov    %r15,(%rsi,%rbx,8)
   60.27 :   590165:       mov    (%r14),%rdx
    0.00 :   590168:       mov    0x28(%r14),%rsi
    0.00 :   59016c:       sub    %r13,%rdx
    0.00 :   59016f:       mov    %rdx,(%rax)
    0.00 :   590172:       mov    %r13,(%r14)
    0.00 :   590175:       movq   $0xffffffffffffffff,0x10(%rax)
    0.00 :   59017d:       mov    %r12,0x20(%rax)
    0.00 :   590181:       mov    %rsi,0x28(%rax)
    0.00 :   590185:       mov    %r15,0x28(%r14)
    0.00 :   590189:       cmp    $0xffffffffffffffff,%rsi
    0.00 :   59018d:       je     59019b <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x12b>
    0.00 :   59018f:       mov    %rbp,%rdi
    0.00 :   590192:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   590197:       mov    %r15,0x20(%rax)
    0.00 :   59019b:       mov    %r15,%rsi
    0.00 :   59019e:       mov    %rbp,%rdi
    0.00 :   5901a1:       callq  58ff00 <onnxruntime::BFCArena::InsertFreeChunkIntoBin(unsigned long)>
    0.00 :   5901a6:       mov    0x278(%rsp),%rax
    0.00 :   5901ae:       xor    %fs:0x28,%rax
    0.00 :   5901b7:       jne    59047b <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x40b>
    0.00 :   5901bd:       add    $0x288,%rsp
    0.00 :   5901c4:       pop    %rbx
    0.00 :   5901c5:       pop    %rbp
    0.00 :   5901c6:       pop    %r12
    0.00 :   5901c8:       pop    %r13
    0.00 :   5901ca:       pop    %r14
    0.00 :   5901cc:       pop    %r15
    0.00 :   5901ce:       retq
    0.00 :   5901cf:       nop
    0.00 :   5901d0:       callq  114cc0 <onnxruntime::logging::LoggingManager::DefaultLogger()>
    0.00 :   5901d5:       cmpl   $0x4,0x28(%rax)
    0.00 :   5901d9:       jg     acf06 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x36>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5901df:       lea    0x20(%rsp),%r12
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5901e4:       lea    0x2fb4fd(%rip),%rdx        # 88b6e8 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x148>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5901eb:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5901f0:       lea    -0x38(%rdx),%rsi
    0.00 :   5901f4:       mov    %r12,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5901f7:       mov    %rax,0x20(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5901fc:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   590201:       lea    0x38(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   590206:       lea    0x2fc16c(%rip),%rdx        # 88c379 <onnxruntime::BFCArena::RegionManager::RegionFor(void const*) const::__FUNCTION__+0x9>
    0.00 :   59020d:       movl   $0x139,0x40(%rsp)
    0.00 :   590215:       lea    0x28(%r12),%rdi
    0.00 :   59021a:       lea    -0x9(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   59021e:       mov    %rax,0x48(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   590223:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   590228:       movq   $0x0,0x68(%rsp)
    0.00 :   590231:       lea    0x698a70(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
    0.00 :   590238:       movq   $0x0,0x70(%rsp)
    0.00 :   590241:       movq   $0x0,0x78(%rsp)
    0.00 :   59024a:       mov    (%rax),%r13
    0.00 :   59024d:       callq  114cc0 <onnxruntime::logging::LoggingManager::DefaultLogger()>
    0.00 :   590252:       mov    %r12,%r9
    0.00 :   590255:       xor    %r8d,%r8d
    0.00 :   590258:       mov    %r13,%rcx
    0.00 :   59025b:       mov    $0x4,%edx
    0.00 :   590260:       lea    0x80(%rsp),%rbp
    0.00 :   590268:       mov    %rax,%rsi
    0.00 :   59026b:       mov    %rbp,%rdi
    0.00 :   59026e:       callq  168f90 <onnxruntime::logging::Capture::Capture(onnxruntime::logging::Logger const&, onnxruntime::logging::Severity, char const*, onnxruntime::logging::DataType, onnxruntime::CodeLocation const&)>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   590273:       lea    0x80(%rbp),%rdi
    0.00 :   59027a:       mov    $0x1a,%edx
    0.00 :   59027f:       lea    0x2fb559(%rip),%rsi        # 88b7df <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x23f>
    0.00 :   590286:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__p); }
    0.00 :   59028b:       lea    0x80(%rbp),%rdi
    0.00 :   590292:       mov    %rbx,%rsi
    0.00 :   590295:       callq  530b0 <std::ostream& std::ostream::_M_insert<void const*>(void const*)@plt>
    0.00 :   59029a:       mov    %rbp,%rdi
    0.00 :   59029d:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
         :            *  not touched in any way.  Managing the pointer is the user's
         :            *  responsibility.
         :            */
         :            ~vector() _GLIBCXX_NOEXCEPT
         :            {
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5902a2:       mov    0x70(%rsp),%rbp
    0.00 :   5902a7:       mov    0x68(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   5902ac:       cmp    %rbx,%rbp
    0.00 :   5902af:       je     aced0 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]>
    0.00 :   5902b5:       nopl   (%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5902b8:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5902bb:       lea    0x10(%rbx),%rax
    0.00 :   5902bf:       cmp    %rax,%rdi
    0.00 :   5902c2:       je     5902c9 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x259>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5902c4:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5902c9:       add    $0x20,%rbx
    0.00 :   5902cd:       cmp    %rbx,%rbp
    0.00 :   5902d0:       jne    5902b8 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)+0x248>
    0.00 :   5902d2:       jmpq   aced0 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]>
    0.00 :   5902d7:       mov    $0xa0,%edi
    0.00 :   5902dc:       lea    0x20(%rsp),%r12
    0.00 :   5902e1:       mov    %rsp,%rbx
    0.00 :   5902e4:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5902e9:       mov    %r12,%rdi
    0.00 :   5902ec:       mov    %rax,%r13
    0.00 :   5902ef:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5902f4:       mov    %rbx,%rdi
    0.00 :   5902f7:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5902fc:       lea    0x80(%rsp),%rbp
    0.00 :   590304:       mov    %rbx,%r8
    0.00 :   590307:       lea    0x2fbeb2(%rip),%rcx        # 88c1c0 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   59030e:       mov    $0x16c,%edx
    0.00 :   590313:       lea    0x2fb30e(%rip),%rsi        # 88b628 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   59031a:       mov    %rbp,%rdi
    0.00 :   59031d:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   590322:       mov    %r12,%rcx
    0.00 :   590325:       lea    0x2fb484(%rip),%rdx        # 88b7b0 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x210>
    0.00 :   59032c:       mov    %rbp,%rsi
    0.00 :   59032f:       mov    %r13,%rdi
    0.00 :   590332:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   590337:       mov    %rbp,%rdi
    0.00 :   59033a:       add    $0x10,%r12
    0.00 :   59033e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   590343:       mov    %rbx,%rdi
    0.00 :   590346:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   59034b:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   590350:       cmp    %r12,%rdi
    0.00 :   590353:       je     acfa8 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0xd8>
    0.00 :   590359:       callq  53300 <operator delete(void*)@plt>
    0.00 :   59035e:       jmpq   acfa8 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0xd8>
    0.00 :   590363:       mov    $0xa0,%edi
    0.00 :   590368:       lea    0x20(%rsp),%r12
    0.00 :   59036d:       mov    %rsp,%rbx
    0.00 :   590370:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   590375:       mov    %r12,%rdi
    0.00 :   590378:       mov    %rax,%r13
    0.00 :   59037b:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   590380:       mov    %rbx,%rdi
    0.00 :   590383:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   590388:       lea    0x80(%rsp),%rbp
    0.00 :   590390:       mov    %rbx,%r8
    0.00 :   590393:       lea    0x2fbf86(%rip),%rcx        # 88c320 <onnxruntime::BFCArena::AllocationRegion::IndexFor(void const*) const::__PRETTY_FUNCTION__>
    0.00 :   59039a:       mov    $0xf9,%edx
    0.00 :   59039f:       lea    0x2fb30a(%rip),%rsi        # 88b6b0 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x110>
    0.00 :   5903a6:       mov    %rbp,%rdi
    0.00 :   5903a9:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5903ae:       mov    %r12,%rcx
    0.00 :   5903b1:       lea    0x2fb338(%rip),%rdx        # 88b6f0 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x150>
    0.00 :   5903b8:       mov    %rbp,%rsi
    0.00 :   5903bb:       mov    %r13,%rdi
    0.00 :   5903be:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5903c3:       mov    %rbp,%rdi
    0.00 :   5903c6:       add    $0x10,%r12
    0.00 :   5903ca:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5903cf:       mov    %rbx,%rdi
    0.00 :   5903d2:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5903d7:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5903dc:       cmp    %r12,%rdi
    0.00 :   5903df:       je     acf5c <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x8c>
    0.00 :   5903e5:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5903ea:       jmpq   acf5c <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x8c>
    0.00 :   5903ef:       mov    $0xa0,%edi
    0.00 :   5903f4:       lea    0x20(%rsp),%r12
    0.00 :   5903f9:       mov    %rsp,%rbx
    0.00 :   5903fc:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   590401:       mov    %r12,%rdi
    0.00 :   590404:       mov    %rax,%r13
    0.00 :   590407:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   59040c:       mov    %rbx,%rdi
    0.00 :   59040f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   590414:       lea    0x80(%rsp),%rbp
    0.00 :   59041c:       mov    %rbx,%r8
    0.00 :   59041f:       lea    0x2fbefa(%rip),%rcx        # 88c320 <onnxruntime::BFCArena::AllocationRegion::IndexFor(void const*) const::__PRETTY_FUNCTION__>
    0.00 :   590426:       mov    $0xf8,%edx
    0.00 :   59042b:       lea    0x2fb27e(%rip),%rsi        # 88b6b0 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x110>
    0.00 :   590432:       mov    %rbp,%rdi
    0.00 :   590435:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   59043a:       mov    %r12,%rcx
    0.00 :   59043d:       lea    0x2fb2cc(%rip),%rdx        # 88b710 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x170>
    0.00 :   590444:       mov    %rbp,%rsi
    0.00 :   590447:       mov    %r13,%rdi
    0.00 :   59044a:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   59044f:       mov    %rbp,%rdi
    0.00 :   590452:       add    $0x10,%r12
    0.00 :   590456:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   59045b:       mov    %rbx,%rdi
    0.00 :   59045e:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   590463:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   590468:       cmp    %r12,%rdi
    0.00 :   59046b:       je     acf10 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x40>
    0.00 :   590471:       callq  53300 <operator delete(void*)@plt>
    0.00 :   590476:       jmpq   acf10 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x40>
    0.00 :   59047b:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   590480:       mov    %rax,%r14
    0.00 :   590483:       jmpq   acf26 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x56>
    0.00 :   590488:       mov    %rax,%rbp
    0.00 :   59048b:       jmpq   acf31 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x61>
    0.00 :   590490:       mov    %rax,%rbp
    0.00 :   590493:       jmpq   acf39 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x69>
    0.00 :   590498:       mov    %rax,%r14
    0.00 :   59049b:       jmpq   acf72 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0xa2>
    0.00 :   5904a0:       mov    %rax,%rbp
    0.00 :   5904a3:       jmpq   acf7d <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0xad>
    0.00 :   5904a8:       mov    %rax,%rbp
    0.00 :   5904ab:       jmpq   acf85 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0xb5>
    0.00 :   5904b0:       mov    %rax,%rbx
    0.00 :   5904b3:       jmpq   acfbe <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0xee>
    0.00 :   5904b8:       mov    %rax,%r14
    0.00 :   5904bb:       jmpq   acfd6 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x106>
    0.00 :   5904c0:       mov    %rax,%rbx
    0.00 :   5904c3:       jmpq   acfc6 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0xf6>
    0.00 :   5904c8:       mov    %rax,%rbp
    0.00 :   5904cb:       jmpq   acfe1 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x111>
    0.00 :   5904d0:       mov    %rax,%rbp
    0.00 :   5904d3:       jmpq   acfe9 <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x119>
    0.00 :   5904d8:       mov    %rax,%rbx
    0.00 :   5904db:       jmpq   ad00c <onnxruntime::BFCArena::SplitChunk(unsigned long, unsigned long) [clone .cold.255]+0x13c>
 Percent |	Source code & Disassembly of psmouse.ko for cache-misses (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          000000000000da10 <elantech_process_byte>:
         :          elantech_process_byte():
    0.00 :   da10:       callq  da15 <elantech_process_byte+0x5>
    0.00 :   da15:       movzbl 0xe2(%rdi),%edx
    0.00 :   da1c:       mov    $0x1,%eax
    0.00 :   da21:       cmp    %dl,0xe1(%rdi)
    0.00 :   da27:       jb     dc57 <elantech_process_byte+0x247>
    0.00 :   da2d:       push   %rbp
    0.00 :   da2e:       mov    %rsp,%rbp
    0.00 :   da31:       push   %r15
    0.00 :   da33:       push   %r14
    0.00 :   da35:       push   %r13
    0.00 :   da37:       push   %r12
    0.00 :   da39:       mov    %rdi,%r14
    0.00 :   da3c:       push   %rbx
    0.00 :   da3d:       sub    $0x28,%rsp
    0.00 :   da41:       mov    (%rdi),%rbx
    0.00 :   da44:       cmpb   $0x1,0x16e(%rbx)
   48.64 :   da4b:       ja     e7f0 <elantech_process_byte+0xde0>
    0.00 :   da51:       movzbl 0x16f(%rbx),%eax
    0.00 :   da58:       cmp    $0x2,%al
    0.00 :   da5a:       je     de19 <elantech_process_byte+0x409>
    0.00 :   da60:       jbe    dfcb <elantech_process_byte+0x5bb>
    0.00 :   da66:       cmp    $0x3,%al
    0.00 :   da68:       je     dc59 <elantech_process_byte+0x249>
    0.00 :   da6e:       cmp    $0x4,%al
    0.00 :   da70:       jne    dc43 <elantech_process_byte+0x233>
    0.00 :   da76:       movzbl 0xdb(%r14),%ebx
    0.00 :   da7e:       mov    (%r14),%r15
    0.00 :   da81:       mov    %ebx,%ecx
    0.00 :   da83:       and    $0x3,%ecx
    0.00 :   da86:       cmpq   $0x0,(%r15)
    0.00 :   da8a:       je     da99 <elantech_process_byte+0x89>
    0.00 :   da8c:       mov    %ebx,%eax
    0.00 :   da8e:       and    $0xf,%eax
    0.00 :   da91:       cmp    $0x6,%al
    0.00 :   da93:       je     e17b <elantech_process_byte+0x76b>
    0.00 :   da99:       cmp    $0x3,%cl
    0.00 :   da9c:       setne  %dl
    0.00 :   da9f:       cmpb   $0x0,0x1ab(%r15)
    0.00 :   daa7:       jne    e18d <elantech_process_byte+0x77d>
    0.00 :   daad:       movzwl 0x176(%r15),%eax
    0.00 :   dab5:       and    $0xf,%eax
    0.00 :   dab8:       cmp    $0x7,%eax
    0.00 :   dabb:       je     e20d <elantech_process_byte+0x7fd>
    0.00 :   dac1:       xor    %eax,%eax
    0.00 :   dac3:       testb  $0x8,0xd8(%r14)
    0.00 :   dacb:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   dad1:       mov    %ebx,%eax
    0.00 :   dad3:       and    $0x1c,%eax
    0.00 :   dad6:       cmp    $0x10,%al
    0.00 :   dad8:       sete   %al
    0.00 :   dadb:       and    %eax,%edx
    0.00 :   dadd:       xor    %eax,%eax
    0.00 :   dadf:       test   %dl,%dl
    0.00 :   dae1:       je     dc48 <elantech_process_byte+0x238>
    0.00 :   dae7:       movzbl %cl,%ecx
    0.00 :   daea:       mov    0x0(,%rcx,4),%edx
   30.93 :   daf1:       cmp    $0x1,%edx
    0.00 :   daf4:       je     dc48 <elantech_process_byte+0x238>
    0.00 :   dafa:       cmp    $0x8,%edx
    0.00 :   dafd:       je     e17b <elantech_process_byte+0x76b>
    0.00 :   db03:       cmp    $0x6,%edx
    0.00 :   db06:       je     e3f0 <elantech_process_byte+0x9e0>
    0.00 :   db0c:       cmp    $0x7,%edx
    0.00 :   db0f:       je     e39d <elantech_process_byte+0x98d>
    0.00 :   db15:       cmp    $0x5,%edx
    0.00 :   db18:       jne    dc43 <elantech_process_byte+0x233>
    0.00 :   db1e:       shr    $0x5,%bl
    0.00 :   db21:       movzbl %bl,%ecx
    0.00 :   db24:       sub    $0x1,%ecx
    0.00 :   db27:       cmp    $0xffffffff,%ecx
    0.00 :   db2a:       je     dc43 <elantech_process_byte+0x233>
    0.00 :   db30:       movzbl 0xd9(%r14),%eax
    0.00 :   db38:       movzbl 0xda(%r14),%edx
    0.00 :   db40:       movzbl %bl,%ebx
    0.00 :   db43:       lea    (%r15,%rbx,8),%r13
    0.00 :   db47:       mov    0x8(%r14),%r12
    0.00 :   db4b:       shl    $0x8,%eax
    0.00 :   db4e:       mov    %r12,%rdi
    0.00 :   db51:       and    $0xf00,%eax
    0.00 :   db56:       or     %edx,%eax
    0.00 :   db58:       mov    %eax,0x38(%r13)
    0.00 :   db5c:       movzbl 0xdc(%r14),%eax
    0.00 :   db64:       movzbl 0xdd(%r14),%edx
    0.00 :   db6c:       mov    0x38(%r15),%esi
    0.00 :   db70:       shl    $0x8,%eax
    0.00 :   db73:       and    $0xf00,%eax
    0.00 :   db78:       or     %edx,%eax
    0.00 :   db7a:       mov    $0x2f,%edx
    0.00 :   db7f:       sub    %eax,%esi
    0.00 :   db81:       mov    %esi,0x3c(%r13)
    0.00 :   db85:       movzbl 0xd9(%r14),%ebx
    0.00 :   db8d:       mov    $0x3,%esi
    0.00 :   db92:       movzbl 0xdc(%r14),%eax
    0.00 :   db9a:       and    $0xfffffff0,%ebx
    0.00 :   db9d:       shr    $0x4,%al
    0.00 :   dba0:       or     %eax,%ebx
    0.00 :   dba2:       movzbl 0xd8(%r14),%eax
    0.00 :   dbaa:       movzbl %bl,%ebx
    0.00 :   dbad:       shr    $0x4,%al
    0.00 :   dbb0:       mov    %al,-0x2c(%rbp)
    0.00 :   dbb3:       callq  dbb8 <elantech_process_byte+0x1a8>
    0.00 :   dbb8:       mov    $0x1,%edx
    0.00 :   dbbd:       xor    %esi,%esi
    0.00 :   dbbf:       mov    %r12,%rdi
    0.00 :   dbc2:       callq  dbc7 <elantech_process_byte+0x1b7>
    0.00 :   dbc7:       mov    0x38(%r13),%ecx
    0.00 :   dbcb:       mov    $0x35,%edx
    0.00 :   dbd0:       mov    $0x3,%esi
    0.00 :   dbd5:       mov    %r12,%rdi
    0.00 :   dbd8:       callq  dbdd <elantech_process_byte+0x1cd>
    0.00 :   dbdd:       mov    0x3c(%r13),%ecx
    0.00 :   dbe1:       mov    $0x36,%edx
    0.00 :   dbe6:       mov    $0x3,%esi
    0.00 :   dbeb:       mov    %r12,%rdi
    0.00 :   dbee:       callq  dbf3 <elantech_process_byte+0x1e3>
    0.00 :   dbf3:       mov    %ebx,%ecx
    0.00 :   dbf5:       mov    $0x3a,%edx
    0.00 :   dbfa:       mov    $0x3,%esi
    0.00 :   dbff:       mov    %r12,%rdi
    0.00 :   dc02:       callq  dc07 <elantech_process_byte+0x1f7>
    0.00 :   dc07:       movzbl -0x2c(%rbp),%r13d
    0.00 :   dc0c:       mov    0x3c(%r15),%ecx
    0.00 :   dc10:       mov    $0x30,%edx
    0.00 :   dc15:       mov    $0x3,%esi
    0.00 :   dc1a:       mov    %r12,%rdi
    0.00 :   dc1d:       imul   %r13d,%ecx
    0.00 :   dc21:       callq  dc26 <elantech_process_byte+0x216>
    0.00 :   dc26:       mov    %r13d,%ecx
    0.00 :   dc29:       mov    $0x1c,%edx
    0.00 :   dc2e:       mov    $0x3,%esi
    0.00 :   dc33:       mov    %r12,%rdi
    0.00 :   dc36:       callq  dc3b <elantech_process_byte+0x22b>
    0.00 :   dc3b:       mov    %r14,%rdi
    0.00 :   dc3e:       callq  bef0 <elantech_input_sync_v4>
    0.00 :   dc43:       mov    $0x2,%eax
    0.00 :   dc48:       add    $0x28,%rsp
    0.00 :   dc4c:       pop    %rbx
    0.00 :   dc4d:       pop    %r12
    0.00 :   dc4f:       pop    %r13
    0.00 :   dc51:       pop    %r14
    0.00 :   dc53:       pop    %r15
    0.00 :   dc55:       pop    %rbp
    0.00 :   dc56:       retq
    0.00 :   dc57:       repz retq
    0.00 :   dc59:       mov    0x0(%rip),%esi        # dc5f <elantech_process_byte+0x24f>
    0.00 :   dc5f:       cmp    %esi,0xd8(%r14)
    0.00 :   dc66:       je     e1c6 <elantech_process_byte+0x7b6>
    0.00 :   dc6c:       mov    (%r14),%r15
    0.00 :   dc6f:       movzbl 0xdb(%r14),%edx
    0.00 :   dc77:       cmpb   $0x0,0x1ab(%r15)
    0.00 :   dc7f:       je     e147 <elantech_process_byte+0x737>
    0.00 :   dc85:       mov    %edx,%ecx
    0.00 :   dc87:       and    $0x9,%ecx
    0.00 :   dc8a:       cmp    $0x8,%cl
    0.00 :   dc8d:       je     e76b <elantech_process_byte+0xd5b>
    0.00 :   dc93:       xor    %eax,%eax
    0.00 :   dc95:       cmp    $0x9,%cl
    0.00 :   dc98:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   dc9a:       movzbl 0xd8(%r14),%ebx
    0.00 :   dca2:       mov    $0x4,%ecx
    0.00 :   dca7:       mov    %ebx,%eax
    0.00 :   dca9:       mov    0x8(%r14),%r12
    0.00 :   dcad:       movzbl 0xd9(%r14),%r13d
    0.00 :   dcb5:       shr    $0x6,%al
    0.00 :   dcb8:       movzbl %al,%esi
    0.00 :   dcbb:       cmp    $0x2,%al
    0.00 :   dcbd:       mov    %esi,-0x2c(%rbp)
    0.00 :   dcc0:       je     e344 <elantech_process_byte+0x934>
    0.00 :   dcc6:       cmp    $0x3,%al
    0.00 :   dcc8:       je     e2fa <elantech_process_byte+0x8ea>
    0.00 :   dcce:       cmp    $0x1,%al
    0.00 :   dcd0:       je     e2fa <elantech_process_byte+0x8ea>
    0.00 :   dcd6:       movzbl 0xdc(%r14),%ecx
    0.00 :   dcde:       xor    %r9d,%r9d
    0.00 :   dce1:       xor    %r8d,%r8d
    0.00 :   dce4:       movl   $0x0,-0x34(%rbp)
    0.00 :   dceb:       movl   $0x0,-0x30(%rbp)
    0.00 :   dcf2:       mov    %al,-0x38(%rbp)
    0.00 :   dcf5:       mov    -0x2c(%rbp),%eax
    0.00 :   dcf8:       shr    $0x2,%ebx
    0.00 :   dcfb:       shr    $0x4,%edx
    0.00 :   dcfe:       shr    $0x4,%cl
    0.00 :   dd01:       and    $0xfffffff0,%r13d
    0.00 :   dd05:       and    $0x3,%edx
    0.00 :   dd08:       and    $0xc,%ebx
    0.00 :   dd0b:       or     %ecx,%r13d
    0.00 :   dd0e:       or     %edx,%ebx
    0.00 :   dd10:       xor    %ecx,%ecx
    0.00 :   dd12:       test   %eax,%eax
    0.00 :   dd14:       setne  %cl
    0.00 :   dd17:       mov    $0x14a,%edx
    0.00 :   dd1c:       mov    $0x1,%esi
    0.00 :   dd21:       mov    %r12,%rdi
    0.00 :   dd24:       mov    %r8d,-0x40(%rbp)
    0.00 :   dd28:       mov    %r9d,-0x3c(%rbp)
    0.00 :   dd2c:       callq  dd31 <elantech_process_byte+0x321>
    0.00 :   dd31:       movzbl -0x38(%rbp),%eax
    0.00 :   dd35:       movzbl %r13b,%r13d
    0.00 :   dd39:       mov    -0x3c(%rbp),%r9d
    0.00 :   dd3d:       mov    -0x40(%rbp),%r8d
    0.00 :   dd41:       test   %al,%al
    0.00 :   dd43:       jne    e6ed <elantech_process_byte+0xcdd>
    0.00 :   dd49:       mov    -0x34(%rbp),%ecx
    0.00 :   dd4c:       mov    -0x30(%rbp),%edx
    0.00 :   dd4f:       mov    %r12,%rdi
    0.00 :   dd52:       mov    -0x2c(%rbp),%esi
    0.00 :   dd55:       callq  d8f0 <elantech_report_semi_mt_data>
    0.00 :   dd5a:       xor    %ecx,%ecx
    0.00 :   dd5c:       cmpl   $0x1,-0x2c(%rbp)
    0.00 :   dd60:       mov    $0x145,%edx
    0.00 :   dd65:       mov    $0x1,%esi
    0.00 :   dd6a:       mov    %r12,%rdi
    0.00 :   dd6d:       sete   %cl
    0.00 :   dd70:       callq  dd75 <elantech_process_byte+0x365>
    0.00 :   dd75:       xor    %ecx,%ecx
    0.00 :   dd77:       cmpl   $0x2,-0x2c(%rbp)
    0.00 :   dd7b:       mov    $0x14d,%edx
    0.00 :   dd80:       mov    $0x1,%esi
    0.00 :   dd85:       mov    %r12,%rdi
    0.00 :   dd88:       sete   %cl
    0.00 :   dd8b:       callq  dd90 <elantech_process_byte+0x380>
    0.00 :   dd90:       xor    %ecx,%ecx
    0.00 :   dd92:       cmpl   $0x3,-0x2c(%rbp)
    0.00 :   dd96:       mov    $0x14e,%edx
    0.00 :   dd9b:       mov    $0x1,%esi
    0.00 :   dda0:       mov    %r12,%rdi
    0.00 :   dda3:       sete   %cl
    0.00 :   dda6:       callq  ddab <elantech_process_byte+0x39b>
    0.00 :   ddab:       testb  $0x10,0x175(%r15)
    0.00 :   ddb3:       je     e2be <elantech_process_byte+0x8ae>
    0.00 :   ddb9:       xor    %ecx,%ecx
    0.00 :   ddbb:       testb  $0x3,0xd8(%r14)
    0.00 :   ddc3:       mov    $0x110,%edx
    0.00 :   ddc8:       mov    $0x1,%esi
    0.00 :   ddcd:       mov    %r12,%rdi
    0.00 :   ddd0:       setne  %cl
    0.00 :   ddd3:       callq  ddd8 <elantech_process_byte+0x3c8>
    0.00 :   ddd8:       mov    %r13d,%ecx
    0.00 :   dddb:       mov    $0x18,%edx
    0.00 :   dde0:       mov    $0x3,%esi
    0.00 :   dde5:       mov    %r12,%rdi
    0.00 :   dde8:       callq  dded <elantech_process_byte+0x3dd>
    0.00 :   dded:       mov    %ebx,%ecx
    0.00 :   ddef:       mov    $0x1c,%edx
    0.00 :   ddf4:       mov    $0x3,%esi
    0.00 :   ddf9:       mov    %r12,%rdi
    0.00 :   ddfc:       callq  de01 <elantech_process_byte+0x3f1>
    0.00 :   de01:       xor    %ecx,%ecx
    0.00 :   de03:       xor    %edx,%edx
    0.00 :   de05:       xor    %esi,%esi
    0.00 :   de07:       mov    %r12,%rdi
    0.00 :   de0a:       callq  de0f <elantech_process_byte+0x3ff>
    0.00 :   de0f:       mov    $0x2,%eax
    0.00 :   de14:       jmpq   dc48 <elantech_process_byte+0x238>
    0.00 :   de19:       mov    0x0(%rip),%esi        # de1f <elantech_process_byte+0x40f>
    0.00 :   de1f:       cmp    %esi,0xd8(%r14)
    0.00 :   de26:       je     e1e0 <elantech_process_byte+0x7d0>
    0.00 :   de2c:       cmpb   $0x0,0x1a8(%rbx)
    0.00 :   de33:       mov    (%r14),%r15
    0.00 :   de36:       movzbl 0xd8(%r14),%r11d
    0.00 :   de3e:       je     de9d <elantech_process_byte+0x48d>
    0.00 :   de40:       cmpb   $0x0,0x1aa(%r15)
    0.00 :   de48:       jne    e19c <elantech_process_byte+0x78c>
    0.00 :   de4e:       mov    %r11d,%eax
    0.00 :   de51:       mov    %r11d,%ecx
    0.00 :   de54:       and    $0xffffffc0,%eax
    0.00 :   de57:       cmp    $0x80,%al
    0.00 :   de59:       je     e2d3 <elantech_process_byte+0x8c3>
    0.00 :   de5f:       and    $0x3c,%ecx
    0.00 :   de62:       xor    %eax,%eax
    0.00 :   de64:       cmp    $0x3c,%cl
    0.00 :   de67:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   de6d:       testb  $0xf0,0xd9(%r14)
    0.00 :   de75:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   de7b:       movzbl 0xdb(%r14),%ecx
    0.00 :   de83:       and    $0x3e,%ecx
    0.00 :   de86:       cmp    $0x38,%cl
    0.00 :   de89:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   de8f:       testb  $0xf0,0xdc(%r14)
    0.00 :   de97:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   de9d:       mov    %r11d,%eax
    0.00 :   dea0:       mov    0x8(%r14),%rbx
    0.00 :   dea4:       shr    $0x6,%al
    0.00 :   dea7:       cmp    $0x2,%al
    0.00 :   dea9:       je     e610 <elantech_process_byte+0xc00>
    0.00 :   deaf:       cmp    $0x3,%al
    0.00 :   deb1:       je     e517 <elantech_process_byte+0xb07>
    0.00 :   deb7:       cmp    $0x1,%al
    0.00 :   deb9:       je     e6c6 <elantech_process_byte+0xcb6>
    0.00 :   debf:       xor    %ecx,%ecx
    0.00 :   dec1:       mov    $0x14a,%edx
    0.00 :   dec6:       mov    $0x1,%esi
    0.00 :   decb:       mov    %rbx,%rdi
    0.00 :   dece:       xor    %r13d,%r13d
    0.00 :   ded1:       xor    %r12d,%r12d
    0.00 :   ded4:       callq  ded9 <elantech_process_byte+0x4c9>
    0.00 :   ded9:       movl   $0x0,-0x38(%rbp)
    0.00 :   dee0:       movl   $0x0,-0x34(%rbp)
    0.00 :   dee7:       xor    %r9d,%r9d
    0.00 :   deea:       movl   $0x0,-0x30(%rbp)
    0.00 :   def1:       movl   $0x0,-0x2c(%rbp)
    0.00 :   def8:       xor    %r8d,%r8d
    0.00 :   defb:       movl   $0x0,-0x48(%rbp)
    0.00 :   df02:       movl   $0x0,-0x4c(%rbp)
    0.00 :   df09:       xor    %eax,%eax
    0.00 :   df0b:       mov    %eax,%esi
    0.00 :   df0d:       mov    %r13d,%ecx
    0.00 :   df10:       mov    %r12d,%edx
    0.00 :   df13:       mov    %rbx,%rdi
    0.00 :   df16:       callq  d8f0 <elantech_report_semi_mt_data>
    0.00 :   df1b:       mov    -0x2c(%rbp),%ecx
    0.00 :   df1e:       mov    $0x145,%edx
    0.00 :   df23:       mov    $0x1,%esi
    0.00 :   df28:       mov    %rbx,%rdi
    0.00 :   df2b:       callq  df30 <elantech_process_byte+0x520>
    0.00 :   df30:       mov    -0x30(%rbp),%ecx
    0.00 :   df33:       mov    $0x14d,%edx
    0.00 :   df38:       mov    $0x1,%esi
    0.00 :   df3d:       mov    %rbx,%rdi
    0.00 :   df40:       callq  df45 <elantech_process_byte+0x535>
    0.00 :   df45:       mov    -0x34(%rbp),%ecx
    0.00 :   df48:       mov    $0x14e,%edx
    0.00 :   df4d:       mov    $0x1,%esi
    0.00 :   df52:       mov    %rbx,%rdi
    0.00 :   df55:       callq  df5a <elantech_process_byte+0x54a>
    0.00 :   df5a:       mov    -0x38(%rbp),%ecx
    0.00 :   df5d:       mov    $0x14f,%edx
    0.00 :   df62:       mov    $0x1,%esi
    0.00 :   df67:       mov    %rbx,%rdi
    0.00 :   df6a:       callq  df6f <elantech_process_byte+0x55f>
    0.00 :   df6f:       movzbl 0xd8(%r14),%esi
    0.00 :   df77:       mov    %rbx,%rdi
    0.00 :   df7a:       callq  df7f <elantech_process_byte+0x56f>
    0.00 :   df7f:       cmpb   $0x0,0x1aa(%r15)
    0.00 :   df87:       je     dfb3 <elantech_process_byte+0x5a3>
    0.00 :   df89:       mov    -0x4c(%rbp),%ecx
    0.00 :   df8c:       mov    $0x18,%edx
    0.00 :   df91:       mov    $0x3,%esi
    0.00 :   df96:       mov    %rbx,%rdi
    0.00 :   df99:       callq  df9e <elantech_process_byte+0x58e>
    0.00 :   df9e:       mov    -0x48(%rbp),%ecx
    0.00 :   dfa1:       mov    $0x1c,%edx
    0.00 :   dfa6:       mov    $0x3,%esi
    0.00 :   dfab:       mov    %rbx,%rdi
    0.00 :   dfae:       callq  dfb3 <elantech_process_byte+0x5a3>
    0.00 :   dfb3:       xor    %ecx,%ecx
    0.00 :   dfb5:       xor    %edx,%edx
    0.00 :   dfb7:       xor    %esi,%esi
    0.00 :   dfb9:       mov    %rbx,%rdi
    0.00 :   dfbc:       callq  dfc1 <elantech_process_byte+0x5b1>
    0.00 :   dfc1:       mov    $0x2,%eax
    0.00 :   dfc6:       jmpq   dc48 <elantech_process_byte+0x238>
    0.00 :   dfcb:       cmp    $0x1,%al
    0.00 :   dfcd:       jne    dc43 <elantech_process_byte+0x233>
    0.00 :   dfd3:       cmpb   $0x0,0x1a8(%rbx)
    0.00 :   dfda:       mov    (%r14),%r12
    0.00 :   dfdd:       mov    0x174(%r12),%edi
    0.00 :   dfe5:       je     e04e <elantech_process_byte+0x63e>
    0.00 :   dfe7:       movzbl 0xd8(%r14),%esi
    0.00 :   dfef:       mov    %esi,%edx
    0.00 :   dff1:       mov    %esi,%ecx
    0.00 :   dff3:       sar    $0x4,%edx
    0.00 :   dff6:       sar    $0x5,%ecx
    0.00 :   dff9:       and    $0x1,%edx
    0.00 :   dffc:       and    $0x1,%ecx
    0.00 :   dfff:       cmp    $0x1ffff,%edi
    0.00 :   e005:       ja     e00d <elantech_process_byte+0x5fd>
    0.00 :   e007:       mov    %edx,%eax
    0.00 :   e009:       mov    %ecx,%edx
    0.00 :   e00b:       mov    %eax,%ecx
    0.00 :   e00d:       movzbl 0xd9(%r14),%r8d
    0.00 :   e015:       xor    %eax,%eax
    0.00 :   e017:       cmp    %dl,0x68(%r12,%r8,1)
    0.00 :   e01c:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   e022:       movzbl 0xda(%r14),%edx
    0.00 :   e02a:       cmp    %cl,0x68(%r12,%rdx,1)
    0.00 :   e02f:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   e035:       movzbl 0xdb(%r14),%edx
    0.00 :   e03d:       sar    $0x2,%esi
    0.00 :   e040:       and    $0x1,%esi
    0.00 :   e043:       cmp    0x68(%r12,%rdx,1),%sil
    0.00 :   e048:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   e04e:       cmp    $0x1ffff,%edi
    0.00 :   e054:       mov    0x8(%r14),%r13
    0.00 :   e058:       ja     e1fa <elantech_process_byte+0x7ea>
    0.00 :   e05e:       movzbl 0xd9(%r14),%eax
    0.00 :   e066:       mov    %eax,%ebx
    0.00 :   e068:       shr    $0x7,%al
    0.00 :   e06b:       shr    $0x4,%ebx
    0.00 :   e06e:       movzbl %al,%eax
    0.00 :   e071:       and    $0x3,%ebx
    0.00 :   e074:       add    %eax,%ebx
    0.00 :   e076:       cmpb   $0x0,0x1a9(%r12)
    0.00 :   e07f:       je     e093 <elantech_process_byte+0x683>
    0.00 :   e081:       cmp    $0x1,%ebx
    0.00 :   e084:       je     e220 <elantech_process_byte+0x810>
    0.00 :   e08a:       movl   $0x0,0x34(%r12)
    0.00 :   e093:       xor    %ecx,%ecx
    0.00 :   e095:       test   %ebx,%ebx
    0.00 :   e097:       mov    $0x14a,%edx
    0.00 :   e09c:       setne  %cl
    0.00 :   e09f:       mov    $0x1,%esi
    0.00 :   e0a4:       mov    %r13,%rdi
    0.00 :   e0a7:       callq  e0ac <elantech_process_byte+0x69c>
    0.00 :   e0ac:       test   %ebx,%ebx
    0.00 :   e0ae:       jne    e245 <elantech_process_byte+0x835>
    0.00 :   e0b4:       xor    %ecx,%ecx
    0.00 :   e0b6:       cmp    $0x1,%ebx
    0.00 :   e0b9:       mov    $0x145,%edx
    0.00 :   e0be:       sete   %cl
    0.00 :   e0c1:       mov    $0x1,%esi
    0.00 :   e0c6:       mov    %r13,%rdi
    0.00 :   e0c9:       callq  e0ce <elantech_process_byte+0x6be>
    0.00 :   e0ce:       xor    %ecx,%ecx
    0.00 :   e0d0:       cmp    $0x2,%ebx
    0.00 :   e0d3:       mov    $0x14d,%edx
    0.00 :   e0d8:       sete   %cl
    0.00 :   e0db:       mov    $0x1,%esi
    0.00 :   e0e0:       mov    %r13,%rdi
    0.00 :   e0e3:       callq  e0e8 <elantech_process_byte+0x6d8>
    0.00 :   e0e8:       xor    %ecx,%ecx
    0.00 :   e0ea:       cmp    $0x3,%ebx
    0.00 :   e0ed:       mov    $0x14e,%edx
    0.00 :   e0f2:       sete   %cl
    0.00 :   e0f5:       mov    $0x1,%esi
    0.00 :   e0fa:       mov    %r13,%rdi
    0.00 :   e0fd:       callq  e102 <elantech_process_byte+0x6f2>
    0.00 :   e102:       movzbl 0xd8(%r14),%esi
    0.00 :   e10a:       mov    %r13,%rdi
    0.00 :   e10d:       callq  e112 <elantech_process_byte+0x702>
    0.00 :   e112:       cmpl   $0x1ffff,0x174(%r12)
    0.00 :   e11e:       ja     e12f <elantech_process_byte+0x71f>
    0.00 :   e120:       testb  $0x4,0x168(%r12)
    0.00 :   e129:       jne    e729 <elantech_process_byte+0xd19>
    0.00 :   e12f:       xor    %ecx,%ecx
    0.00 :   e131:       xor    %edx,%edx
    0.00 :   e133:       xor    %esi,%esi
    0.00 :   e135:       mov    %r13,%rdi
    0.00 :   e138:       callq  e13d <elantech_process_byte+0x72d>
    0.00 :   e13d:       mov    $0x2,%eax
    0.00 :   e142:       jmpq   dc48 <elantech_process_byte+0x238>
    0.00 :   e147:       movzbl 0xd8(%r14),%ebx
    0.00 :   e14f:       mov    %ebx,%eax
    0.00 :   e151:       and    $0xc,%eax
    0.00 :   e154:       cmp    $0x4,%al
    0.00 :   e156:       je     e2a7 <elantech_process_byte+0x897>
    0.00 :   e15c:       cmp    $0xc,%al
    0.00 :   e15e:       jne    e16d <elantech_process_byte+0x75d>
    0.00 :   e160:       mov    %edx,%eax
    0.00 :   e162:       and    $0xffffffce,%eax
    0.00 :   e165:       cmp    $0xc,%al
    0.00 :   e167:       je     e7e6 <elantech_process_byte+0xdd6>
    0.00 :   e16d:       and    $0xf,%edx
    0.00 :   e170:       xor    %eax,%eax
    0.00 :   e172:       cmp    $0x6,%dl
    0.00 :   e175:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   e17b:       mov    %r14,%rdi
    0.00 :   e17e:       callq  c820 <elantech_report_trackpoint.isra.7>
    0.00 :   e183:       mov    $0x2,%eax
    0.00 :   e188:       jmpq   dc48 <elantech_process_byte+0x238>
    0.00 :   e18d:       mov    %ebx,%eax
   20.43 :   e18f:       shr    $0x3,%al
    0.00 :   e192:       xor    $0x1,%eax
    0.00 :   e195:       and    %eax,%edx
    0.00 :   e197:       jmpq   dadd <elantech_process_byte+0xcd>
    0.00 :   e19c:       mov    %r11d,%ecx
    0.00 :   e19f:       xor    %eax,%eax
    0.00 :   e1a1:       and    $0xc,%ecx
    0.00 :   e1a4:       cmp    $0x4,%cl
    0.00 :   e1a7:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   e1ad:       movzbl 0xdb(%r14),%ecx
    0.00 :   e1b5:       and    $0xf,%ecx
    0.00 :   e1b8:       cmp    $0x2,%cl
    0.00 :   e1bb:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   e1c1:       jmpq   de9d <elantech_process_byte+0x48d>
    0.00 :   e1c6:       movzwl 0x0(%rip),%esi        # e1cd <elantech_process_byte+0x7bd>
    0.00 :   e1cd:       cmp    %si,0xdc(%r14)
    0.00 :   e1d5:       jne    dc6c <elantech_process_byte+0x25c>
    0.00 :   e1db:       jmpq   dc43 <elantech_process_byte+0x233>
    0.00 :   e1e0:       movzwl 0x0(%rip),%esi        # e1e7 <elantech_process_byte+0x7d7>
    0.00 :   e1e7:       cmp    %si,0xdc(%r14)
    0.00 :   e1ef:       jne    de2c <elantech_process_byte+0x41c>
    0.00 :   e1f5:       jmpq   dc43 <elantech_process_byte+0x233>
    0.00 :   e1fa:       movzbl 0xd8(%r14),%ebx
    0.00 :   e202:       shr    $0x6,%bl
    0.00 :   e205:       movzbl %bl,%ebx
    0.00 :   e208:       jmpq   e076 <elantech_process_byte+0x666>
    0.00 :   e20d:       cmpb   $0x2a,0x16c(%r15)
    0.00 :   e215:       jne    dac1 <elantech_process_byte+0xb1>
    0.00 :   e21b:       jmpq   dad1 <elantech_process_byte+0xc1>
    0.00 :   e220:       mov    0x34(%r12),%eax
    0.00 :   e225:       cmp    $0x1,%eax
    0.00 :   e228:       jbe    e77d <elantech_process_byte+0xd6d>
    0.00 :   e22e:       mov    $0x1,%ecx
    0.00 :   e233:       mov    $0x14a,%edx
    0.00 :   e238:       mov    $0x1,%esi
    0.00 :   e23d:       mov    %r13,%rdi
    0.00 :   e240:       callq  e245 <elantech_process_byte+0x835>
    0.00 :   e245:       movzbl 0xd9(%r14),%ecx
    0.00 :   e24d:       movzbl 0xda(%r14),%eax
    0.00 :   e255:       xor    %edx,%edx
    0.00 :   e257:       mov    %r13,%rdi
    0.00 :   e25a:       mov    $0x3,%esi
    0.00 :   e25f:       shl    $0x6,%ecx
    0.00 :   e262:       and    $0x300,%ecx
    0.00 :   e268:       or     %eax,%ecx
    0.00 :   e26a:       callq  e26f <elantech_process_byte+0x85f>
    0.00 :   e26f:       movzbl 0xd9(%r14),%eax
    0.00 :   e277:       movzbl 0xdb(%r14),%edx
    0.00 :   e27f:       mov    $0x3,%esi
    0.00 :   e284:       mov    0x38(%r12),%ecx
    0.00 :   e289:       mov    %r13,%rdi
    0.00 :   e28c:       shl    $0x8,%eax
    0.00 :   e28f:       and    $0x300,%eax
    0.00 :   e294:       or     %edx,%eax
    0.00 :   e296:       mov    $0x1,%edx
    0.00 :   e29b:       sub    %eax,%ecx
    0.00 :   e29d:       callq  e2a2 <elantech_process_byte+0x892>
    0.00 :   e2a2:       jmpq   e0b4 <elantech_process_byte+0x6a4>
    0.00 :   e2a7:       mov    %edx,%eax
    0.00 :   e2a9:       and    $0xffffffcf,%eax
    0.00 :   e2ac:       cmp    $0x2,%al
    0.00 :   e2ae:       jne    e16d <elantech_process_byte+0x75d>
    0.00 :   e2b4:       mov    $0x3,%ecx
    0.00 :   e2b9:       jmpq   dca7 <elantech_process_byte+0x297>
    0.00 :   e2be:       movzbl 0xd8(%r14),%esi
    0.00 :   e2c6:       mov    %r12,%rdi
    0.00 :   e2c9:       callq  e2ce <elantech_process_byte+0x8be>
    0.00 :   e2ce:       jmpq   ddd8 <elantech_process_byte+0x3c8>
    0.00 :   e2d3:       and    $0xc,%ecx
    0.00 :   e2d6:       xor    %eax,%eax
    0.00 :   e2d8:       cmp    $0xc,%cl
    0.00 :   e2db:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   e2e1:       movzbl 0xdb(%r14),%ecx
    0.00 :   e2e9:       and    $0xe,%ecx
    0.00 :   e2ec:       cmp    $0x8,%cl
    0.00 :   e2ef:       jne    dc48 <elantech_process_byte+0x238>
    0.00 :   e2f5:       jmpq   de9d <elantech_process_byte+0x48d>
    0.00 :   e2fa:       movzbl 0xda(%r14),%esi
    0.00 :   e302:       mov    %r13d,%ecx
    0.00 :   e305:       movzbl 0xdd(%r14),%edi
    0.00 :   e30d:       shl    $0x8,%ecx
    0.00 :   e310:       xor    %r9d,%r9d
    0.00 :   e313:       xor    %r8d,%r8d
    0.00 :   e316:       and    $0xf00,%ecx
    0.00 :   e31c:       or     %esi,%ecx
    0.00 :   e31e:       mov    %ecx,-0x30(%rbp)
    0.00 :   e321:       movzbl 0xdc(%r14),%ecx
    0.00 :   e329:       mov    %ecx,%esi
    0.00 :   e32b:       shl    $0x8,%esi
    0.00 :   e32e:       and    $0xf00,%esi
    0.00 :   e334:       or     %edi,%esi
    0.00 :   e336:       mov    0x38(%r15),%edi
    0.00 :   e33a:       sub    %esi,%edi
    0.00 :   e33c:       mov    %edi,-0x34(%rbp)
    0.00 :   e33f:       jmpq   dcf2 <elantech_process_byte+0x2e2>
    0.00 :   e344:       movzbl 0xda(%r14),%esi
    0.00 :   e34c:       mov    %r13d,%r8d
    0.00 :   e34f:       mov    0x38(%r15),%r9d
    0.00 :   e353:       shl    $0x8,%r8d
    0.00 :   e357:       and    $0xf00,%r8d
    0.00 :   e35e:       or     %esi,%r8d
    0.00 :   e361:       cmp    $0x3,%ecx
    0.00 :   e364:       je     e7b7 <elantech_process_byte+0xda7>
    0.00 :   e36a:       mov    0x40(%r15),%esi
    0.00 :   e36e:       movzbl 0xdc(%r14),%ecx
    0.00 :   e376:       mov    %esi,-0x30(%rbp)
    0.00 :   e379:       mov    0x44(%r15),%esi
    0.00 :   e37d:       mov    %ecx,%edi
    0.00 :   e37f:       shl    $0x8,%edi
    0.00 :   e382:       mov    %esi,-0x34(%rbp)
    0.00 :   e385:       movzbl 0xdd(%r14),%esi
    0.00 :   e38d:       and    $0xf00,%edi
    0.00 :   e393:       or     %edi,%esi
    0.00 :   e395:       sub    %esi,%r9d
    0.00 :   e398:       jmpq   dcf2 <elantech_process_byte+0x2e2>
    0.00 :   e39d:       movzbl 0xd9(%r14),%r12d
    0.00 :   e3a5:       mov    0x8(%r14),%r13
    0.00 :   e3a9:       xor    %ebx,%ebx
    0.00 :   e3ab:       mov    $0x1,%r15d
    0.00 :   e3b1:       and    $0x1f,%r12d
    0.00 :   e3b5:       mov    %r15d,%eax
    0.00 :   e3b8:       mov    %ebx,%ecx
    0.00 :   e3ba:       shl    %cl,%eax
    0.00 :   e3bc:       test   %r12d,%eax
    0.00 :   e3bf:       je     e3ce <elantech_process_byte+0x9be>
    0.00 :   e3c1:       add    $0x1,%ebx
    0.00 :   e3c4:       cmp    $0x5,%ebx
    0.00 :   e3c7:       jne    e3b5 <elantech_process_byte+0x9a5>
    0.00 :   e3c9:       jmpq   dc3b <elantech_process_byte+0x22b>
    0.00 :   e3ce:       mov    %r13,%rdi
    0.00 :   e3d1:       mov    %ebx,%ecx
    0.00 :   e3d3:       mov    $0x2f,%edx
    0.00 :   e3d8:       mov    $0x3,%esi
    0.00 :   e3dd:       callq  e3e2 <elantech_process_byte+0x9d2>
    0.00 :   e3e2:       xor    %edx,%edx
    0.00 :   e3e4:       xor    %esi,%esi
    0.00 :   e3e6:       mov    %r13,%rdi
    0.00 :   e3e9:       callq  e3ee <elantech_process_byte+0x9de>
    0.00 :   e3ee:       jmp    e3c1 <elantech_process_byte+0x9b1>
    0.00 :   e3f0:       movzbl 0xd8(%r14),%eax
    0.00 :   e3f8:       mov    %eax,%edx
    0.00 :   e3fa:       shr    $0x5,%dl
    0.00 :   e3fd:       movzbl %dl,%ecx
    0.00 :   e400:       sub    $0x1,%ecx
    0.00 :   e403:       cmp    $0xffffffff,%ecx
    0.00 :   e406:       je     dc43 <elantech_process_byte+0x233>
    0.00 :   e40c:       shr    $0x5,%bl
    0.00 :   e40f:       and    $0x10,%eax
    0.00 :   e412:       movzbl %dl,%edx
    0.00 :   e415:       movzbl %bl,%r13d
    0.00 :   e419:       cmp    $0x1,%al
    0.00 :   e41b:       movzbl 0xdc(%r14),%edi
    0.00 :   e423:       lea    -0x1(%r13),%esi
    0.00 :   e427:       lea    (%r15,%rdx,8),%r13
    0.00 :   e42b:       movsbl 0xd9(%r14),%edx
    0.00 :   e433:       sbb    %eax,%eax
    0.00 :   e435:       mov    0x8(%r14),%r12
    0.00 :   e439:       movzbl 0xdd(%r14),%r10d
    0.00 :   e441:       mov    %esi,-0x2c(%rbp)
    0.00 :   e444:       movsbl 0xda(%r14),%esi
    0.00 :   e44c:       and    $0xfffffffc,%eax
    0.00 :   e44f:       add    $0x5,%eax
    0.00 :   e452:       mov    %dil,-0x30(%rbp)
    0.00 :   e456:       imul   %eax,%edx
    0.00 :   e459:       add    %edx,0x38(%r13)
    0.00 :   e45d:       mov    %r12,%rdi
    0.00 :   e460:       mov    $0x2f,%edx
    0.00 :   e465:       mov    %r10b,-0x34(%rbp)
    0.00 :   e469:       mov    %eax,-0x38(%rbp)
    0.00 :   e46c:       imul   %eax,%esi
    0.00 :   e46f:       sub    %esi,0x3c(%r13)
    0.00 :   e473:       mov    $0x3,%esi
    0.00 :   e478:       callq  e47d <elantech_process_byte+0xa6d>
    0.00 :   e47d:       mov    0x38(%r13),%ecx
    0.00 :   e481:       mov    $0x35,%edx
    0.00 :   e486:       mov    $0x3,%esi
    0.00 :   e48b:       mov    %r12,%rdi
    0.00 :   e48e:       callq  e493 <elantech_process_byte+0xa83>
    0.00 :   e493:       mov    0x3c(%r13),%ecx
    0.00 :   e497:       mov    $0x36,%edx
    0.00 :   e49c:       mov    $0x3,%esi
    0.00 :   e4a1:       mov    %r12,%rdi
    0.00 :   e4a4:       callq  e4a9 <elantech_process_byte+0xa99>
    0.00 :   e4a9:       mov    -0x2c(%rbp),%ecx
    0.00 :   e4ac:       cmp    $0xffffffff,%ecx
    0.00 :   e4af:       je     dc3b <elantech_process_byte+0x22b>
    0.00 :   e4b5:       movzbl %bl,%ebx
    0.00 :   e4b8:       movsbl -0x34(%rbp),%edx
    0.00 :   e4bc:       mov    -0x38(%rbp),%eax
    0.00 :   e4bf:       lea    (%r15,%rbx,8),%rbx
    0.00 :   e4c3:       movsbl -0x30(%rbp),%r15d
    0.00 :   e4c8:       mov    %r12,%rdi
    0.00 :   e4cb:       mov    $0x3,%esi
    0.00 :   e4d0:       imul   %eax,%r15d
    0.00 :   e4d4:       add    %r15d,0x38(%rbx)
    0.00 :   e4d8:       imul   %edx,%eax
    0.00 :   e4db:       sub    %eax,0x3c(%rbx)
    0.00 :   e4de:       mov    $0x2f,%edx
    0.00 :   e4e3:       callq  e4e8 <elantech_process_byte+0xad8>
    0.00 :   e4e8:       mov    0x38(%rbx),%ecx
    0.00 :   e4eb:       mov    %r12,%rdi
    0.00 :   e4ee:       mov    $0x35,%edx
    0.00 :   e4f3:       mov    $0x3,%esi
    0.00 :   e4f8:       callq  e4fd <elantech_process_byte+0xaed>
    0.00 :   e4fd:       mov    0x3c(%rbx),%ecx
    0.00 :   e500:       mov    $0x36,%edx
    0.00 :   e505:       mov    $0x3,%esi
    0.00 :   e50a:       mov    %r12,%rdi
    0.00 :   e50d:       callq  e512 <elantech_process_byte+0xb02>
    0.00 :   e512:       jmpq   dc3b <elantech_process_byte+0x22b>
    0.00 :   e517:       movsbl 0xdb(%r14),%eax
    0.00 :   e51f:       movl   $0x0,-0x2c(%rbp)
    0.00 :   e526:       mov    %eax,%ecx
    0.00 :   e528:       cltd
    0.00 :   e529:       mov    %eax,%esi
    0.00 :   e52b:       sar    $0x1f,%eax
    0.00 :   e52e:       shr    $0x1f,%ecx
    0.00 :   e531:       add    $0x1,%edx
    0.00 :   e534:       not    %eax
    0.00 :   e536:       mov    %ecx,-0x38(%rbp)
    0.00 :   e539:       mov    %edx,-0x34(%rbp)
    0.00 :   e53c:       add    $0x4,%eax
    0.00 :   e53f:       movzbl 0xd9(%r14),%ecx
    0.00 :   e547:       movzbl 0xda(%r14),%edi
    0.00 :   e54f:       mov    %r11d,%edx
    0.00 :   e552:       movzbl 0xdc(%r14),%r8d
    0.00 :   e55a:       movzbl 0xdd(%r14),%r9d
    0.00 :   e562:       shr    $0x2,%edx
    0.00 :   e565:       mov    0x38(%r15),%r13d
    0.00 :   e569:       shr    $0x4,%esi
    0.00 :   e56c:       and    $0xc,%edx
    0.00 :   e56f:       and    $0x3,%esi
    0.00 :   e572:       movl   $0x0,-0x30(%rbp)
    0.00 :   e579:       mov    %ecx,%r12d
    0.00 :   e57c:       and    $0xfffffff0,%ecx
    0.00 :   e57f:       or     %esi,%edx
    0.00 :   e581:       shl    $0x8,%r12d
    0.00 :   e585:       mov    %edx,-0x48(%rbp)
    0.00 :   e588:       and    $0xf00,%r12d
    0.00 :   e58f:       or     %edi,%r12d
    0.00 :   e592:       mov    %r8d,%edi
    0.00 :   e595:       shr    $0x4,%r8b
    0.00 :   e599:       shl    $0x8,%edi
    0.00 :   e59c:       or     %r8d,%ecx
    0.00 :   e59f:       xor    %r8d,%r8d
    0.00 :   e5a2:       and    $0xf00,%edi
    0.00 :   e5a8:       movzbl %cl,%ecx
    0.00 :   e5ab:       or     %r9d,%edi
    0.00 :   e5ae:       mov    %ecx,-0x4c(%rbp)
    0.00 :   e5b1:       xor    %r9d,%r9d
    0.00 :   e5b4:       sub    %edi,%r13d
    0.00 :   e5b7:       mov    $0x1,%ecx
    0.00 :   e5bc:       mov    $0x14a,%edx
    0.00 :   e5c1:       mov    $0x1,%esi
    0.00 :   e5c6:       mov    %rbx,%rdi
    0.00 :   e5c9:       mov    %r9d,-0x44(%rbp)
    0.00 :   e5cd:       mov    %r8d,-0x40(%rbp)
    0.00 :   e5d1:       mov    %eax,-0x3c(%rbp)
    0.00 :   e5d4:       callq  e5d9 <elantech_process_byte+0xbc9>
    0.00 :   e5d9:       mov    %r12d,%ecx
    0.00 :   e5dc:       xor    %edx,%edx
    0.00 :   e5de:       mov    $0x3,%esi
    0.00 :   e5e3:       mov    %rbx,%rdi
    0.00 :   e5e6:       callq  e5eb <elantech_process_byte+0xbdb>
    0.00 :   e5eb:       mov    %r13d,%ecx
    0.00 :   e5ee:       mov    $0x1,%edx
    0.00 :   e5f3:       mov    $0x3,%esi
    0.00 :   e5f8:       mov    %rbx,%rdi
    0.00 :   e5fb:       callq  e600 <elantech_process_byte+0xbf0>
    0.00 :   e600:       mov    -0x3c(%rbp),%eax
    0.00 :   e603:       mov    -0x40(%rbp),%r8d
    0.00 :   e607:       mov    -0x44(%rbp),%r9d
    0.00 :   e60b:       jmpq   df0b <elantech_process_byte+0x4fb>
    0.00 :   e610:       movzbl %r11b,%edx
    0.00 :   e614:       movzbl 0xd9(%r14),%eax
    0.00 :   e61c:       mov    0x38(%r15),%r9d
    0.00 :   e620:       mov    %edx,%r12d
    0.00 :   e623:       shl    $0x3,%edx
    0.00 :   e626:       movl   $0x0,-0x38(%rbp)
    0.00 :   e62d:       shl    $0x4,%r12d
    0.00 :   e631:       and    $0x100,%edx
    0.00 :   e637:       movl   $0x0,-0x34(%rbp)
    0.00 :   e63e:       and    $0x100,%r12d
    0.00 :   e645:       mov    %r9d,%r13d
    0.00 :   e648:       movl   $0x1,-0x30(%rbp)
    0.00 :   e64f:       or     %eax,%r12d
    0.00 :   e652:       movzbl 0xda(%r14),%eax
    0.00 :   e65a:       movl   $0x0,-0x2c(%rbp)
    0.00 :   e661:       shl    $0x2,%r12d
    0.00 :   e665:       movl   $0x7f,-0x4c(%rbp)
    0.00 :   e66c:       movl   $0x7,-0x48(%rbp)
    0.00 :   e673:       or     %eax,%edx
    0.00 :   e675:       lea    0x0(,%rdx,4),%eax
    0.00 :   e67c:       movzbl 0xdc(%r14),%edx
    0.00 :   e684:       sub    %eax,%r13d
    0.00 :   e687:       movzbl 0xdb(%r14),%eax
    0.00 :   e68f:       mov    %eax,%r8d
    0.00 :   e692:       shl    $0x3,%eax
    0.00 :   e695:       shl    $0x4,%r8d
    0.00 :   e699:       and    $0x100,%eax
    0.00 :   e69e:       and    $0x100,%r8d
    0.00 :   e6a5:       or     %edx,%r8d
    0.00 :   e6a8:       movzbl 0xdd(%r14),%edx
    0.00 :   e6b0:       shl    $0x2,%r8d
    0.00 :   e6b4:       or     %edx,%eax
    0.00 :   e6b6:       shl    $0x2,%eax
    0.00 :   e6b9:       sub    %eax,%r9d
    0.00 :   e6bc:       mov    $0x2,%eax
    0.00 :   e6c1:       jmpq   e5b7 <elantech_process_byte+0xba7>
    0.00 :   e6c6:       movzbl 0xdb(%r14),%esi
    0.00 :   e6ce:       movl   $0x0,-0x38(%rbp)
    0.00 :   e6d5:       mov    $0x1,%eax
    0.00 :   e6da:       movl   $0x0,-0x34(%rbp)
    0.00 :   e6e1:       movl   $0x1,-0x2c(%rbp)
    0.00 :   e6e8:       jmpq   e53f <elantech_process_byte+0xb2f>
    0.00 :   e6ed:       mov    -0x30(%rbp),%ecx
    0.00 :   e6f0:       xor    %edx,%edx
    0.00 :   e6f2:       mov    $0x3,%esi
    0.00 :   e6f7:       mov    %r12,%rdi
    0.00 :   e6fa:       mov    %r8d,-0x3c(%rbp)
    0.00 :   e6fe:       mov    %r9d,-0x38(%rbp)
    0.00 :   e702:       callq  e707 <elantech_process_byte+0xcf7>
    0.00 :   e707:       mov    -0x34(%rbp),%ecx
    0.00 :   e70a:       mov    $0x1,%edx
    0.00 :   e70f:       mov    $0x3,%esi
    0.00 :   e714:       mov    %r12,%rdi
    0.00 :   e717:       callq  e71c <elantech_process_byte+0xd0c>
    0.00 :   e71c:       mov    -0x3c(%rbp),%r8d
    0.00 :   e720:       mov    -0x38(%rbp),%r9d
    0.00 :   e724:       jmpq   dd49 <elantech_process_byte+0x339>
    0.00 :   e729:       movzbl 0xd8(%r14),%ecx
    0.00 :   e731:       mov    %r13,%rdi
    0.00 :   e734:       mov    $0x115,%edx
    0.00 :   e739:       mov    $0x1,%esi
    0.00 :   e73e:       shr    $0x6,%cl
    0.00 :   e741:       and    $0x1,%ecx
    0.00 :   e744:       callq  e749 <elantech_process_byte+0xd39>
    0.00 :   e749:       movsbl 0xd8(%r14),%ecx
    0.00 :   e751:       mov    $0x116,%edx
    0.00 :   e756:       mov    $0x1,%esi
    0.00 :   e75b:       mov    %r13,%rdi
    0.00 :   e75e:       shr    $0x1f,%ecx
    0.00 :   e761:       callq  e766 <elantech_process_byte+0xd56>
    0.00 :   e766:       jmpq   e12f <elantech_process_byte+0x71f>
    0.00 :   e76b:       movzbl 0xd8(%r14),%ebx
    0.00 :   e773:       mov    $0x3,%ecx
    0.00 :   e778:       jmpq   dca7 <elantech_process_byte+0x297>
    0.00 :   e77d:       add    $0x1,%eax
    0.00 :   e780:       cmpb   $0x0,0x16e(%r12)
    0.00 :   e789:       mov    %eax,0x34(%r12)
    0.00 :   e78e:       je     dc43 <elantech_process_byte+0x233>
    0.00 :   e794:       mov    0x10(%r14),%rsi
    0.00 :   e798:       mov    $0x0,%rdx
    0.00 :   e79f:       mov    $0x0,%rdi
    0.00 :   e7a6:       add    $0x158,%rsi
    0.00 :   e7ad:       callq  e7b2 <elantech_process_byte+0xda2>
    0.00 :   e7b2:       jmpq   dc43 <elantech_process_byte+0x233>
    0.00 :   e7b7:       mov    %r8d,0x40(%r15)
    0.00 :   e7bb:       movzbl 0xdc(%r14),%eax
    0.00 :   e7c3:       movzbl 0xdd(%r14),%edx
    0.00 :   e7cb:       shl    $0x8,%eax
    0.00 :   e7ce:       and    $0xf00,%eax
    0.00 :   e7d3:       or     %edx,%eax
    0.00 :   e7d5:       sub    %eax,%r9d
    0.00 :   e7d8:       mov    $0x2,%eax
    0.00 :   e7dd:       mov    %r9d,0x44(%r15)
    0.00 :   e7e1:       jmpq   dc48 <elantech_process_byte+0x238>
    0.00 :   e7e6:       mov    $0x4,%ecx
    0.00 :   e7eb:       jmpq   dca7 <elantech_process_byte+0x297>
    0.00 :   e7f0:       mov    0x10(%rdi),%rax
    0.00 :   e7f4:       lea    0xd8(%rdi),%r8
    0.00 :   e7fb:       movzbl %dl,%ecx
    0.00 :   e7fe:       mov    $0x0,%rdi
    0.00 :   e805:       mov    $0x0,%rdx
    0.00 :   e80c:       lea    0x158(%rax),%rsi
    0.00 :   e813:       callq  e818 <elantech_process_byte+0xe08>
    0.00 :   e818:       jmpq   da51 <elantech_process_byte+0x41>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (5 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000059b170 <onnxruntime::TensorTypeBase::IsTensorType() const>:
         :            _ZNK11onnxruntime14TensorTypeBase12IsTensorTypeEv():
   82.78 :   59b170:       mov    $0x1,%eax
   17.22 :   59b175:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000414ec0 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime6Concat7ComputeEPNS_15OpKernelContextE():
    0.00 :   414ec0:       push   %r15
    0.00 :   414ec2:       push   %r14
    0.00 :   414ec4:       push   %r13
    0.00 :   414ec6:       push   %r12
    0.00 :   414ec8:       mov    %rdi,%r12
    0.00 :   414ecb:       mov    %rsi,%rdi
    0.00 :   414ece:       push   %rbp
    0.00 :   414ecf:       push   %rbx
    0.00 :   414ed0:       mov    %rsi,%rbx
    0.00 :   414ed3:       sub    $0x258,%rsp
    0.00 :   414eda:       mov    %rdx,0x8(%rsp)
    0.00 :   414edf:       mov    %fs:0x28,%rax
    0.00 :   414ee8:       mov    %rax,0x248(%rsp)
    0.00 :   414ef0:       xor    %eax,%eax
    0.00 :   414ef2:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
    0.00 :   414ef7:       mov    0xc0(%rax),%rax
    0.00 :   414efe:       movslq (%rax),%r13
         :            template<typename _Tp, typename _Alloc>
         :            void
         :            vector<_Tp, _Alloc>::
         :            reserve(size_type __n)
         :            {
         :            if (__n > this->max_size())
  100.00 :   414f01:       movabs $0x1fffffffffffffff,%rax
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   414f0b:       movq   $0x0,0x30(%rsp)
    0.00 :   414f14:       movq   $0x0,0x38(%rsp)
    0.00 :   414f1d:       movq   $0x0,0x40(%rsp)
    0.00 :   414f26:       cmp    %rax,%r13
    0.00 :   414f29:       ja     415609 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x749>
         :            __throw_length_error(__N("vector::reserve"));
         :            if (this->capacity() < __n)
    0.00 :   414f2f:       test   %r13,%r13
    0.00 :   414f32:       jne    414fd8 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x118>
    0.00 :   414f38:       add    $0x10,%rbx
    0.00 :   414f3c:       lea    0x50(%rsp),%r15
    0.00 :   414f41:       mov    0x8(%rsp),%rdx
    0.00 :   414f46:       lea    0x28(%rsp),%rdi
    0.00 :   414f4b:       lea    0x30(%rsp),%rcx
    0.00 :   414f50:       mov    %r15,%r8
    0.00 :   414f53:       mov    %rbx,%rsi
    0.00 :   414f56:       movq   $0x0,0x50(%rsp)
    0.00 :   414f5f:       movq   $0x0,0x58(%rsp)
    0.00 :   414f68:       movq   $0x0,0x60(%rsp)
    0.00 :   414f71:       callq  4126b0 <onnxruntime::ConcatBase::PrepareForCompute(onnxruntime::OpKernelContext*, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > const&, onnxruntime::Prepare&) const>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   414f76:       mov    0x28(%rsp),%rax
    0.00 :   414f7b:       test   %rax,%rax
    0.00 :   414f7e:       je     415588 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x6c8>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   414f84:       mov    %rax,(%r12)
         :            *  not touched in any way.  Managing the pointer is the user's
         :            *  responsibility.
         :            */
         :            ~vector() _GLIBCXX_NOEXCEPT
         :            {
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   414f88:       mov    0x50(%rsp),%rdi
         :            if (__p)
    0.00 :   414f8d:       test   %rdi,%rdi
    0.00 :   414f90:       je     414f97 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0xd7>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   414f92:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   414f97:       mov    0x30(%rsp),%rdi
         :            if (__p)
    0.00 :   414f9c:       test   %rdi,%rdi
    0.00 :   414f9f:       je     414fa6 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0xe6>
    0.00 :   414fa1:       callq  53300 <operator delete(void*)@plt>
    0.00 :   414fa6:       mov    0x248(%rsp),%rcx
    0.00 :   414fae:       xor    %fs:0x28,%rcx
    0.00 :   414fb7:       mov    %r12,%rax
    0.00 :   414fba:       jne    415604 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x744>
    0.00 :   414fc0:       add    $0x258,%rsp
    0.00 :   414fc7:       pop    %rbx
    0.00 :   414fc8:       pop    %rbp
    0.00 :   414fc9:       pop    %r12
    0.00 :   414fcb:       pop    %r13
    0.00 :   414fcd:       pop    %r14
    0.00 :   414fcf:       pop    %r15
    0.00 :   414fd1:       retq
    0.00 :   414fd2:       nopw   0x0(%rax,%rax,1)
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   414fd8:       lea    0x0(,%r13,8),%r14
    0.00 :   414fe0:       mov    %r14,%rdi
    0.00 :   414fe3:       callq  53340 <operator new(unsigned long)@plt>
         :            const size_type __old_size = size();
         :            pointer __tmp = _M_allocate_and_copy(__n,
         :            _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
         :            _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
         :            _GLIBCXX_ASAN_ANNOTATE_REINIT;
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   414fe8:       mov    0x30(%rsp),%rdi
    0.00 :   414fed:       mov    %r13,%rbp
    0.00 :   414ff0:       mov    %rax,%r13
    0.00 :   414ff3:       test   %rdi,%rdi
    0.00 :   414ff6:       je     414ffd <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x13d>
         :            ::operator delete(__p);
    0.00 :   414ff8:       callq  53300 <operator delete(void*)@plt>
         :            _M_get_Tp_allocator());
         :            _M_deallocate(this->_M_impl._M_start,
         :            this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start);
         :            this->_M_impl._M_start = __tmp;
    0.00 :   414ffd:       mov    %r13,0x30(%rsp)
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   415002:       mov    %r13,0x38(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   415007:       add    %r14,%r13
    0.00 :   41500a:       mov    %r13,0x40(%rsp)
    0.00 :   41500f:       test   %ebp,%ebp
    0.00 :   415011:       jle    414f38 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x78>
    0.00 :   415017:       movl   $0x0,0x4(%rsp)
         :            std::forward<_Args>(__args)...);
         :            ++this->_M_impl._M_finish;
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         :            }
         :            else
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    0.00 :   41501f:       lea    0x50(%rsp),%r13
    0.00 :   415024:       lea    0x30(%rsp),%r14
    0.00 :   415029:       mov    0x4(%rsp),%esi
    0.00 :   41502d:       mov    0x8(%rsp),%rdi
    0.00 :   415032:       callq  5c7570 <onnxruntime::OpKernelContext::GetInputMLValue(int) const>
    0.00 :   415037:       mov    %rax,%r15
    0.00 :   41503a:       test   %rax,%rax
    0.00 :   41503d:       je     415055 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x195>
    0.00 :   41503f:       mov    0x10(%rax),%rdi
    0.00 :   415043:       test   %rdi,%rdi
    0.00 :   415046:       je     415090 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x1d0>
    0.00 :   415048:       mov    (%rdi),%rax
    0.00 :   41504b:       callq  *0x30(%rax)
    0.00 :   41504e:       test   %al,%al
    0.00 :   415050:       je     415090 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x1d0>
    0.00 :   415052:       mov    (%r15),%r15
    0.00 :   415055:       mov    %r15,0x50(%rsp)
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   41505a:       mov    0x38(%rsp),%rsi
    0.00 :   41505f:       cmp    0x40(%rsp),%rsi
    0.00 :   415064:       je     4155a0 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x6e0>
         :            #endif // __cpp_sized_deallocation
         :            #endif // __cpp_aligned_new
         :
         :            // Default placement versions of operator new.
         :            inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :            { return __p; }
    0.00 :   41506a:       mov    %r15,(%rsi)
         :            ++this->_M_impl._M_finish;
    0.00 :   41506d:       add    $0x8,%rsi
    0.00 :   415071:       mov    %rsi,0x38(%rsp)
    0.00 :   415076:       addl   $0x1,0x4(%rsp)
    0.00 :   41507b:       mov    0x4(%rsp),%eax
    0.00 :   41507f:       cmp    %eax,%ebp
    0.00 :   415081:       jne    415029 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x169>
    0.00 :   415083:       jmpq   414f38 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x78>
    0.00 :   415088:       nopl   0x0(%rax,%rax,1)
    0.00 :   415090:       mov    $0xa0,%edi
    0.00 :   415095:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   41509a:       mov    0x10(%r15),%rdi
    0.00 :   41509e:       mov    %rax,0x18(%rsp)
    0.00 :   4150a3:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   4150a8:       lea    0xd0(%rsp),%r12
    0.00 :   4150b0:       mov    %rax,%r13
    0.00 :   4150b3:       lea    0x70(%r12),%rdi
    0.00 :   4150b8:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   4150bd:       mov    0x812a64(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   4150c4:       xor    %esi,%esi
    0.00 :   4150c6:       movq   $0x0,0x218(%rsp)
    0.00 :   4150d2:       movq   $0x0,0x228(%rsp)
    0.00 :   4150de:       movq   $0x0,0x230(%rsp)
    0.00 :   4150ea:       lea    0x10(%r15),%rax
    0.00 :   4150ee:       mov    %rax,0x140(%rsp)
    0.00 :   4150f6:       xor    %eax,%eax
    0.00 :   4150f8:       mov    %ax,0x220(%rsp)
    0.00 :   415100:       mov    0x812c99(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   415107:       movq   $0x0,0x238(%rsp)
    0.00 :   415113:       mov    0x8(%rax),%rbx
    0.00 :   415117:       mov    0x10(%rax),%rbp
    0.00 :   41511b:       movq   $0x0,0x240(%rsp)
    0.00 :   415127:       mov    -0x18(%rbx),%rdi
    0.00 :   41512b:       mov    %rbx,0xd0(%rsp)
    0.00 :   415133:       add    %r12,%rdi
    0.00 :   415136:       mov    %rbp,(%rdi)
    0.00 :   415139:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   41513e:       mov    0x812c1b(%rip),%r14        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   415145:       lea    0x40(%r12),%rdi
    0.00 :   41514a:       movq   $0x0,0xe0(%rsp)
    0.00 :   415156:       movq   $0x0,0xe8(%rsp)
    0.00 :   415162:       movq   $0x0,0xf0(%rsp)
    0.00 :   41516e:       lea    0x18(%r14),%rax
    0.00 :   415172:       mov    %rax,0xd0(%rsp)
    0.00 :   41517a:       lea    0x40(%r14),%rax
    0.00 :   41517e:       mov    %rax,0x140(%rsp)
    0.00 :   415186:       mov    0x812ad3(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   41518d:       movq   $0x0,0xf8(%rsp)
    0.00 :   415199:       movq   $0x0,0x100(%rsp)
    0.00 :   4151a5:       add    $0x10,%rax
    0.00 :   4151a9:       mov    %rax,0xd8(%rsp)
    0.00 :   4151b1:       movq   $0x0,0x108(%rsp)
    0.00 :   4151bd:       callq  53eb0 <std::locale::locale()@plt>
         :            { this->init(&_M_stringbuf); }
    0.00 :   4151c2:       lea    0x8(%r12),%rsi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4151c7:       mov    0x812e0a(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   4151ce:       lea    0x70(%r12),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4151d3:       movl   $0x10,0x118(%rsp)
    0.00 :   4151de:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   4151e2:       movb   $0x0,0x130(%rsp)
    0.00 :   4151ea:       mov    %rax,0xd8(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   4151f2:       lea    0x60(%r12),%rax
    0.00 :   4151f7:       mov    %rax,0x120(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   4151ff:       movq   $0x0,0x128(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   41520b:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   415210:       mov    $0x21,%edx
    0.00 :   415215:       lea    0x4120f4(%rip),%rsi        # 827310 <std::piecewise_construct+0x570>
    0.00 :   41521c:       mov    %r12,%rdi
    0.00 :   41521f:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!__s)
    0.00 :   415224:       test   %r13,%r13
    0.00 :   415227:       je     415560 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x6a0>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   41522d:       mov    %r13,%rdi
    0.00 :   415230:       callq  52c60 <strlen@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   415235:       mov    %r13,%rsi
    0.00 :   415238:       mov    %r12,%rdi
    0.00 :   41523b:       mov    %rax,%rdx
    0.00 :   41523e:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   415243:       lea    0xb0(%rsp),%rdi
         :            { __c1 = __c2; }
    0.00 :   41524b:       movb   $0x0,0xc0(%rsp)
    0.00 :   415253:       lea    0x10(%rdi),%rax
    0.00 :   415257:       mov    %rdi,0x10(%rsp)
    0.00 :   41525c:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   415264:       mov    0x100(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   41526c:       movq   $0x0,0xb8(%rsp)
    0.00 :   415278:       test   %rax,%rax
    0.00 :   41527b:       je     4155b0 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x6f0>
         :            if (this->pptr() > this->egptr())
    0.00 :   415281:       mov    0xf0(%rsp),%r8
    0.00 :   415289:       mov    0xf8(%rsp),%rcx
    0.00 :   415291:       cmp    %r8,%rax
    0.00 :   415294:       jbe    415540 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x680>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   41529a:       sub    %rcx,%rax
    0.00 :   41529d:       xor    %edx,%edx
    0.00 :   41529f:       xor    %esi,%esi
    0.00 :   4152a1:       mov    %rax,%r8
    0.00 :   4152a4:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   4152a9:       lea    0x18(%r14),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4152ad:       mov    0x120(%rsp),%rdi
    0.00 :   4152b5:       mov    %rax,0xd0(%rsp)
    0.00 :   4152bd:       lea    0x40(%r14),%rax
    0.00 :   4152c1:       mov    %rax,0x140(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   4152c9:       mov    0x812d08(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   4152d0:       add    $0x10,%rax
    0.00 :   4152d4:       mov    %rax,0xd8(%rsp)
         :            if (!_M_is_local())
    0.00 :   4152dc:       lea    0x60(%r12),%rax
    0.00 :   4152e1:       cmp    %rax,%rdi
    0.00 :   4152e4:       je     4152eb <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x42b>
    0.00 :   4152e6:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   4152eb:       mov    0x81296e(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   4152f2:       lea    0x40(%r12),%rdi
    0.00 :   4152f7:       add    $0x10,%rax
    0.00 :   4152fb:       mov    %rax,0xd8(%rsp)
    0.00 :   415303:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   415308:       mov    -0x18(%rbx),%rax
         :            ~basic_ios() { }
    0.00 :   41530c:       lea    0x70(%r12),%rdi
    0.00 :   415311:       mov    %rbx,0xd0(%rsp)
    0.00 :   415319:       mov    %rbp,0xd0(%rsp,%rax,1)
    0.00 :   415321:       lea    0x10(%r15),%rax
    0.00 :   415325:       lea    0x50(%rsp),%r15
    0.00 :   41532a:       mov    %rax,0x140(%rsp)
    0.00 :   415332:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   415337:       mov    %r15,%rdi
    0.00 :   41533a:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   41533f:       lea    0x412031(%rip),%rdx        # 827377 <std::piecewise_construct+0x5d7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   415346:       lea    0x10(%r12),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   41534b:       mov    %r12,%rdi
    0.00 :   41534e:       lea    -0x3f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   415352:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   41535a:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   41535f:       lea    0x45a8d7(%rip),%rdx        # 86fc3d <OrtValue::Get<onnxruntime::Tensor>() const::__PRETTY_FUNCTION__+0x3d>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   415366:       lea    0x38(%r12),%rax
    0.00 :   41536b:       movl   $0x57,0xf0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   415376:       lea    0x28(%r12),%rdi
    0.00 :   41537b:       lea    -0x3d(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   41537f:       mov    %rax,0xf8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   415387:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   41538c:       mov    0x58(%rsp),%r13
    0.00 :   415391:       mov    0x50(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   415396:       movq   $0x0,0x118(%rsp)
    0.00 :   4153a2:       movq   $0x0,0x120(%rsp)
    0.00 :   4153ae:       movq   $0x0,0x128(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4153ba:       mov    %r13,%rbp
    0.00 :   4153bd:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4153c0:       mov    %rbp,%rax
    0.00 :   4153c3:       sar    $0x5,%rax
    0.00 :   4153c7:       je     415580 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x6c0>
         :            if (__n > this->max_size())
    0.00 :   4153cd:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   4153d7:       cmp    %rdx,%rax
    0.00 :   4153da:       ja     415615 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x755>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4153e0:       mov    %rbp,%rdi
    0.00 :   4153e3:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4153e8:       mov    0x58(%rsp),%r13
    0.00 :   4153ed:       mov    0x50(%rsp),%rbx
    0.00 :   4153f2:       mov    %rax,%r14
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4153f5:       add    %r14,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4153f8:       mov    %r14,0x118(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   415400:       mov    %rbp,0x128(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   415408:       mov    %r14,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   41540b:       mov    %r14,0x120(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   415413:       cmp    %rbx,%r13
    0.00 :   415416:       je     415447 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x587>
    0.00 :   415418:       nopl   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   415420:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   415424:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   415427:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   41542b:       mov    (%rbx),%rsi
    0.00 :   41542e:       mov    0x8(%rbx),%rdx
    0.00 :   415432:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   415435:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   41543a:       add    $0x20,%rbx
    0.00 :   41543e:       add    $0x20,%rbp
    0.00 :   415442:       cmp    %rbx,%r13
    0.00 :   415445:       jne    415420 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x560>
    0.00 :   415447:       mov    0x10(%rsp),%rcx
    0.00 :   41544c:       mov    0x18(%rsp),%rdi
    0.00 :   415451:       mov    %r12,%rsi
    0.00 :   415454:       lea    0x47db1a(%rip),%rdx        # 892f75 <onnxruntime::MemPatternPlanner::TraceAllocation(int, unsigned long)::__PRETTY_FUNCTION__+0x175>
         :            this->_M_impl._M_finish =
    0.00 :   41545b:       mov    %rbp,0x120(%rsp)
    0.00 :   415463:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   415468:       mov    0x120(%rsp),%rbx
    0.00 :   415470:       mov    0x118(%rsp),%rbp
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   415478:       cmp    %rbp,%rbx
    0.00 :   41547b:       je     4154a3 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x5e3>
    0.00 :   41547d:       nopl   (%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   415480:       mov    0x0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   415484:       lea    0x10(%rbp),%rax
    0.00 :   415488:       cmp    %rax,%rdi
    0.00 :   41548b:       je     415492 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x5d2>
         :            ::operator delete(__p);
    0.00 :   41548d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   415492:       add    $0x20,%rbp
    0.00 :   415496:       cmp    %rbp,%rbx
    0.00 :   415499:       jne    415480 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x5c0>
    0.00 :   41549b:       mov    0x118(%rsp),%rbp
         :            if (__p)
    0.00 :   4154a3:       test   %rbp,%rbp
    0.00 :   4154a6:       je     4154b0 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x5f0>
    0.00 :   4154a8:       mov    %rbp,%rdi
    0.00 :   4154ab:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4154b0:       mov    0xf8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4154b8:       lea    0x38(%r12),%rax
    0.00 :   4154bd:       cmp    %rax,%rdi
    0.00 :   4154c0:       je     4154c7 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x607>
    0.00 :   4154c2:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4154c7:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4154cf:       add    $0x10,%r12
    0.00 :   4154d3:       cmp    %r12,%rdi
    0.00 :   4154d6:       je     4154dd <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x61d>
    0.00 :   4154d8:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4154dd:       mov    0x58(%rsp),%rbp
    0.00 :   4154e2:       mov    0x50(%rsp),%rbx
    0.00 :   4154e7:       cmp    %rbx,%rbp
    0.00 :   4154ea:       je     41550f <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x64f>
    0.00 :   4154ec:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4154f0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   4154f3:       lea    0x10(%rbx),%rax
    0.00 :   4154f7:       cmp    %rax,%rdi
    0.00 :   4154fa:       je     415501 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x641>
    0.00 :   4154fc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   415501:       add    $0x20,%rbx
    0.00 :   415505:       cmp    %rbx,%rbp
    0.00 :   415508:       jne    4154f0 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x630>
    0.00 :   41550a:       mov    0x50(%rsp),%rbx
         :            if (__p)
    0.00 :   41550f:       test   %rbx,%rbx
    0.00 :   415512:       je     41551c <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x65c>
    0.00 :   415514:       mov    %rbx,%rdi
    0.00 :   415517:       callq  53300 <operator delete(void*)@plt>
    0.00 :   41551c:       mov    0x10(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   415521:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   415529:       add    $0x10,%rax
    0.00 :   41552d:       cmp    %rax,%rdi
    0.00 :   415530:       je     8fb1d <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x9b>
    0.00 :   415536:       callq  53300 <operator delete(void*)@plt>
    0.00 :   41553b:       jmpq   8fb1d <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x9b>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   415540:       mov    0x10(%rsp),%rdi
    0.00 :   415545:       sub    %rcx,%r8
    0.00 :   415548:       xor    %edx,%edx
    0.00 :   41554a:       xor    %esi,%esi
    0.00 :   41554c:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   415551:       jmpq   4152a9 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x3e9>
    0.00 :   415556:       nopw   %cs:0x0(%rax,%rax,1)
         :            __out.setstate(ios_base::badbit);
    0.00 :   415560:       mov    0xd0(%rsp),%rax
    0.00 :   415568:       mov    -0x18(%rax),%rdi
    0.00 :   41556c:       add    %r12,%rdi
         :            operator&(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
         :
         :            inline _GLIBCXX_CONSTEXPR _Ios_Iostate
         :            operator|(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
    0.00 :   41556f:       mov    0x20(%rdi),%esi
    0.00 :   415572:       or     $0x1,%esi
         :            { this->clear(this->rdstate() | __state); }
    0.00 :   415575:       callq  53b90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   41557a:       jmpq   415243 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x383>
    0.00 :   41557f:       nop
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   415580:       xor    %r14d,%r14d
    0.00 :   415583:       jmpq   4153f5 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x535>
    0.00 :   415588:       cmpq   $0x0,0x68(%rsp)
    0.00 :   41558e:       jne    4155c4 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x704>
    0.00 :   415590:       movq   $0x0,(%r12)
         :            constexpr _Head_base()
    0.00 :   415598:       jmpq   414f88 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0xc8>
    0.00 :   41559d:       nopl   (%rax)
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    0.00 :   4155a0:       mov    %r13,%rdx
    0.00 :   4155a3:       mov    %r14,%rdi
    0.00 :   4155a6:       callq  243b80 <void std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> >::_M_realloc_insert<onnxruntime::Tensor const*>(__gnu_cxx::__normal_iterator<onnxruntime::Tensor const**, std::vector<onnxruntime::Tensor const*, std::allocator<onnxruntime::Tensor const*> > >, onnxruntime::Tensor const*&&)>
    0.00 :   4155ab:       jmpq   415076 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x1b6>
         :            this->_M_assign(__str);
    0.00 :   4155b0:       mov    0x10(%rsp),%rdi
    0.00 :   4155b5:       lea    0x50(%r12),%rsi
    0.00 :   4155ba:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   4155bf:       jmpq   4152a9 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x3e9>
    0.00 :   4155c4:       mov    %r15,%rdx
    0.00 :   4155c7:       mov    %rbx,%rsi
    0.00 :   4155ca:       mov    %r12,%rdi
    0.00 :   4155cd:       callq  411a00 <onnxruntime::ConcatBase::ComputeImpl(onnxruntime::Prepare&) const>
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   4155d2:       mov    0x28(%rsp),%rbx
    0.00 :   4155d7:       test   %rbx,%rbx
    0.00 :   4155da:       je     414f88 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0xc8>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4155e0:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   4155e4:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   4155e8:       cmp    %rax,%rdi
    0.00 :   4155eb:       je     4155f2 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0x732>
    0.00 :   4155ed:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   4155f2:       mov    $0x28,%esi
    0.00 :   4155f7:       mov    %rbx,%rdi
    0.00 :   4155fa:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   4155ff:       jmpq   414f88 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const+0xc8>
    0.00 :   415604:       callq  53460 <__stack_chk_fail@plt>
         :            __throw_length_error(__N("vector::reserve"));
    0.00 :   415609:       lea    0x411a38(%rip),%rdi        # 827048 <std::piecewise_construct+0x2a8>
    0.00 :   415610:       callq  52d80 <std::__throw_length_error(char const*)@plt>
         :            std::__throw_bad_alloc();
    0.00 :   415615:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   41561a:       mov    %rax,%rbx
    0.00 :   41561d:       jmpq   8fa82 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]>
    0.00 :   415622:       mov    %rax,%rbx
    0.00 :   415625:       mov    %rdx,%rbp
    0.00 :   415628:       jmpq   8fb05 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x83>
    0.00 :   41562d:       mov    %rax,%rbx
    0.00 :   415630:       mov    %rdx,%rbp
    0.00 :   415633:       jmpq   8fb35 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0xb3>
    0.00 :   415638:       mov    %rax,%rbx
    0.00 :   41563b:       jmpq   8faab <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x29>
    0.00 :   415640:       jmpq   8fcf8 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x276>
    0.00 :   415645:       jmpq   8fd36 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x2b4>
    0.00 :   41564a:       jmpq   8fd18 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x296>
    0.00 :   41564f:       mov    %rax,%rbx
    0.00 :   415652:       mov    %rdx,%rbp
    0.00 :   415655:       jmpq   8fb60 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0xde>
    0.00 :   41565a:       mov    %rax,%rbx
    0.00 :   41565d:       jmpq   8faba <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x38>
    0.00 :   415662:       mov    %rax,%rbx
    0.00 :   415665:       mov    %rdx,%rbp
    0.00 :   415668:       jmpq   8faee <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x6c>
    0.00 :   41566d:       jmpq   8fdc1 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0x33f>
    0.00 :   415672:       mov    %rax,%rbx
    0.00 :   415675:       mov    %rdx,%rbp
    0.00 :   415678:       jmpq   8fb45 <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0xc3>
    0.00 :   41567d:       mov    %rax,%rbx
    0.00 :   415680:       mov    %rdx,%rbp
    0.00 :   415683:       jmpq   8fb3d <onnxruntime::Concat::Compute(onnxruntime::OpKernelContext*) const [clone .cold.223]+0xbb>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a88d0 <onnxruntime::IExecutionFrame::~IExecutionFrame()>:
         :            _ZN11onnxruntime15IExecutionFrameD2Ev():
    0.00 :   5a88d0:       lea    0x67af41(%rip),%rax        # c23818 <vtable for onnxruntime::IExecutionFrame>
    0.00 :   5a88d7:       push   %r14
    0.00 :   5a88d9:       push   %r13
    0.00 :   5a88db:       mov    %rdi,%r13
    0.00 :   5a88de:       add    $0x10,%rax
    0.00 :   5a88e2:       push   %r12
    0.00 :   5a88e4:       push   %rbp
    0.00 :   5a88e5:       push   %rbx
    0.00 :   5a88e6:       mov    %rax,(%rdi)
         :            _ZN11onnxruntime15IExecutionFrameD1Ev():
         :            *  not touched in any way.  Managing the pointer is the user's
         :            *  responsibility.
         :            */
         :            ~vector() _GLIBCXX_NOEXCEPT
         :            {
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5a88e9:       mov    0x30(%rdi),%rdi
         :            if (__p)
    0.00 :   5a88ed:       test   %rdi,%rdi
    0.00 :   5a88f0:       je     5a88f7 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x27>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5a88f2:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5a88f7:       mov    0x18(%r13),%r14
    0.00 :   5a88fb:       mov    0x10(%r13),%rbp
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   5a88ff:       cmp    %rbp,%r14
    0.00 :   5a8902:       jne    5a8951 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x81>
    0.00 :   5a8904:       jmpq   5a89a4 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0xd4>
    0.00 :   5a8909:       nopl   0x0(%rax)
         :            // __exchange_and_add_dispatch
         :            // __atomic_add_dispatch
         :            #ifdef _GLIBCXX_ATOMIC_BUILTINS
         :            static inline _Atomic_word
         :            __exchange_and_add(volatile _Atomic_word* __mem, int __val)
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5a8910:       mov    $0xffffffff,%eax
    0.00 :   5a8915:       lock xadd %eax,0x8(%rbx)
         :            void
         :            _M_release() noexcept
         :            {
         :            // Be race-detector-friendly.  For more info see bits/c++config.
         :            _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_use_count);
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5a891a:       cmp    $0x1,%eax
    0.00 :   5a891d:       je     5a8974 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0xa4>
    0.00 :   5a891f:       nop
         :            // Does not throw if __r._M_get_use_count() == 0, caller must check.
         :            explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);
         :
         :            ~__shared_count() noexcept
         :            {
         :            if (_M_pi != nullptr)
    0.00 :   5a8920:       mov    0x8(%rbp),%rbx
    0.00 :   5a8924:       test   %rbx,%rbx
    0.00 :   5a8927:       je     5a8948 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x78>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5a8929:       mov    0x67f5d8(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5a8930:       test   %r12,%r12
    0.00 :   5a8933:       je     5a89f0 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x120>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5a8939:       mov    $0xffffffff,%eax
    0.00 :   5a893e:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5a8943:       cmp    $0x1,%eax
    0.00 :   5a8946:       je     5a89c0 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0xf0>
    0.00 :   5a8948:       add    $0x28,%rbp
    0.00 :   5a894c:       cmp    %rbp,%r14
    0.00 :   5a894f:       je     5a89a0 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0xd0>
         :            if (_M_pi != nullptr)
    0.00 :   5a8951:       mov    0x20(%rbp),%rbx
    0.00 :   5a8955:       test   %rbx,%rbx
    0.00 :   5a8958:       je     5a8920 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x50>
         :            if (__gthread_active_p())
    0.00 :   5a895a:       mov    0x67f5a7(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5a8961:       test   %r12,%r12
    0.00 :   5a8964:       jne    5a8910 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x40>
         :            _Atomic_word __result = *__mem;
    0.00 :   5a8966:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5a8969:       lea    -0x1(%rax),%edx
    0.00 :   5a896c:       mov    %edx,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5a896f:       cmp    $0x1,%eax
    0.00 :   5a8972:       jne    5a8920 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x50>
         :            _M_dispose();
    0.00 :   5a8974:       mov    (%rbx),%rax
    0.00 :   5a8977:       mov    %rbx,%rdi
    0.00 :   5a897a:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5a897d:       test   %r12,%r12
    0.00 :   5a8980:       je     5a8a10 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x140>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5a8986:       mov    $0xffffffff,%eax
    0.00 :   5a898b:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5a8990:       cmp    $0x1,%eax
    0.00 :   5a8993:       jne    5a8920 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x50>
         :            _M_destroy();
    0.00 :   5a8995:       mov    (%rbx),%rax
    0.00 :   5a8998:       mov    %rbx,%rdi
    0.00 :   5a899b:       callq  *0x18(%rax)
    0.00 :   5a899e:       jmp    5a8920 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x50>
    0.00 :   5a89a0:       mov    0x10(%r13),%rbp
         :            if (__p)
    0.00 :   5a89a4:       test   %rbp,%rbp
    0.00 :   5a89a7:       je     5a8a20 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x150>
         :            _ZN11onnxruntime15IExecutionFrameD2Ev():
    0.00 :   5a89a9:       pop    %rbx
         :            _ZN11onnxruntime15IExecutionFrameD1Ev():
    0.00 :   5a89aa:       mov    %rbp,%rdi
         :            _ZN11onnxruntime15IExecutionFrameD2Ev():
    0.00 :   5a89ad:       pop    %rbp
    0.00 :   5a89ae:       pop    %r12
    0.00 :   5a89b0:       pop    %r13
    0.00 :   5a89b2:       pop    %r14
         :            _ZN11onnxruntime15IExecutionFrameD1Ev():
    0.00 :   5a89b4:       jmpq   53300 <operator delete(void*)@plt>
    0.00 :   5a89b9:       nopl   0x0(%rax)
         :            _M_dispose();
   52.68 :   5a89c0:       mov    (%rbx),%rax
    0.00 :   5a89c3:       mov    %rbx,%rdi
    0.00 :   5a89c6:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5a89c9:       test   %r12,%r12
    0.00 :   5a89cc:       je     5a8a00 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x130>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5a89ce:       mov    $0xffffffff,%eax
    0.00 :   5a89d3:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   47.32 :   5a89d8:       cmp    $0x1,%eax
    0.00 :   5a89db:       jne    5a8948 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x78>
         :            _M_destroy();
    0.00 :   5a89e1:       mov    (%rbx),%rax
    0.00 :   5a89e4:       mov    %rbx,%rdi
    0.00 :   5a89e7:       callq  *0x18(%rax)
    0.00 :   5a89ea:       jmpq   5a8948 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x78>
    0.00 :   5a89ef:       nop
         :            _Atomic_word __result = *__mem;
    0.00 :   5a89f0:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5a89f3:       lea    -0x1(%rax),%edx
    0.00 :   5a89f6:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   5a89f9:       jmpq   5a8943 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x73>
    0.00 :   5a89fe:       xchg   %ax,%ax
         :            _Atomic_word __result = *__mem;
    0.00 :   5a8a00:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5a8a03:       lea    -0x1(%rax),%edx
    0.00 :   5a8a06:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5a8a09:       jmp    5a89d8 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0x108>
    0.00 :   5a8a0b:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5a8a10:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5a8a13:       lea    -0x1(%rax),%edx
    0.00 :   5a8a16:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5a8a19:       jmpq   5a8990 <onnxruntime::IExecutionFrame::~IExecutionFrame()+0xc0>
    0.00 :   5a8a1e:       xchg   %ax,%ax
         :            _ZN11onnxruntime15IExecutionFrameD2Ev():
    0.00 :   5a8a20:       pop    %rbx
    0.00 :   5a8a21:       pop    %rbp
    0.00 :   5a8a22:       pop    %r12
    0.00 :   5a8a24:       pop    %r13
    0.00 :   5a8a26:       pop    %r14
    0.00 :   5a8a28:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c7200 <onnxruntime::OpKernel::Node() const>:
         :            _ZNK11onnxruntime8OpKernel4NodeEv():
    0.00 :   5c7200:       mov    0x8(%rdi),%rdi
  100.00 :   5c7204:       jmpq   5c8150 <onnxruntime::OpKernelInfo::node() const>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c79f0 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long)>:
         :            _ZN11onnxruntime15OpKernelContext13OutputMLValueEiRKNS_11TensorShapeEm():
    0.00 :   5c79f0:       push   %r14
    0.00 :   5c79f2:       push   %r13
    0.00 :   5c79f4:       push   %r12
    0.00 :   5c79f6:       push   %rbp
    0.00 :   5c79f7:       push   %rbx
    0.00 :   5c79f8:       sub    $0xc0,%rsp
    0.00 :   5c79ff:       mov    %fs:0x28,%rax
    0.00 :   5c7a08:       mov    %rax,0xb8(%rsp)
    0.00 :   5c7a10:       xor    %eax,%eax
    0.00 :   5c7a12:       test   %esi,%esi
    0.00 :   5c7a14:       js     5c7aa8 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long)+0xb8>
    0.00 :   5c7a1a:       mov    %rdi,%r13
    0.00 :   5c7a1d:       mov    0x10(%rdi),%rdi
    0.00 :   5c7a21:       mov    %rdx,%rbp
    0.00 :   5c7a24:       mov    %esi,%ebx
    0.00 :   5c7a26:       mov    %rcx,%r12
    0.00 :   5c7a29:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5c7a2e:       mov    0xe0(%rax),%rdx
   18.30 :   5c7a35:       sub    0xd8(%rax),%rdx
    0.00 :   5c7a3c:       sar    $0x3,%rdx
    0.00 :   5c7a40:       cmp    %edx,%ebx
    0.00 :   5c7a42:       jge    5c7aa8 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long)+0xb8>
    0.00 :   5c7a44:       mov    %ebx,%esi
    0.00 :   5c7a46:       mov    0x8(%r13),%r14
    0.00 :   5c7a4a:       mov    %r13,%rdi
    0.00 :   5c7a4d:       movq   $0x0,(%rsp)
    0.00 :   5c7a55:       callq  5c74e0 <onnxruntime::OpKernelContext::GetOutputArgIndex(int) const>
    0.00 :   5c7a5a:       lea    0x8(%rsp),%rbx
    0.00 :   5c7a5f:       mov    %r12,%r9
    0.00 :   5c7a62:       mov    %rsp,%r8
    0.00 :   5c7a65:       mov    %rbp,%rcx
    0.00 :   5c7a68:       mov    %eax,%edx
    0.00 :   5c7a6a:       mov    %r14,%rsi
    0.00 :   5c7a6d:       mov    %rbx,%rdi
    0.00 :   5c7a70:       callq  5afd50 <onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue(int, onnxruntime::TensorShape const*, OrtValue*&, unsigned long)>
    0.00 :   5c7a75:       cmpq   $0x0,0x8(%rsp)
   81.70 :   5c7a7b:       jne    5c7ab1 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long)+0xc1>
    0.00 :   5c7a7d:       mov    (%rsp),%rax
    0.00 :   5c7a81:       mov    0xb8(%rsp),%rcx
    0.00 :   5c7a89:       xor    %fs:0x28,%rcx
    0.00 :   5c7a92:       jne    5c7aac <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long)+0xbc>
    0.00 :   5c7a94:       add    $0xc0,%rsp
    0.00 :   5c7a9b:       pop    %rbx
    0.00 :   5c7a9c:       pop    %rbp
    0.00 :   5c7a9d:       pop    %r12
    0.00 :   5c7a9f:       pop    %r13
    0.00 :   5c7aa1:       pop    %r14
    0.00 :   5c7aa3:       retq
    0.00 :   5c7aa4:       nopl   0x0(%rax)
    0.00 :   5c7aa8:       xor    %eax,%eax
    0.00 :   5c7aaa:       jmp    5c7a81 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long)+0x91>
    0.00 :   5c7aac:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5c7ab1:       mov    $0xa0,%edi
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5c7ab6:       lea    0x30(%rsp),%r12
    0.00 :   5c7abb:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5c7ac0:       mov    %rbx,%rdi
    0.00 :   5c7ac3:       mov    %rax,%rbp
    0.00 :   5c7ac6:       callq  697000 <onnxruntime::common::Status::ErrorMessage[abi:cxx11]() const>
    0.00 :   5c7acb:       lea    0x10(%r12),%rdx
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c7ad0:       mov    %r12,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5c7ad3:       mov    %rdx,0x30(%rsp)
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5c7ad8:       mov    0x8(%rax),%rdx
    0.00 :   5c7adc:       mov    (%rax),%rsi
    0.00 :   5c7adf:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5c7ae2:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5c7ae7:       lea    0x10(%rsp),%r13
    0.00 :   5c7aec:       mov    %r13,%rdi
    0.00 :   5c7aef:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5c7af4:       lea    0x50(%rsp),%r14
    0.00 :   5c7af9:       mov    %r13,%r8
    0.00 :   5c7afc:       lea    0x2caf1d(%rip),%rcx        # 892a20 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   5c7b03:       mov    $0x4c,%edx
    0.00 :   5c7b08:       lea    0x2cada1(%rip),%rsi        # 8928b0 <OrtValue::Get<onnxruntime::SparseTensor>() const::__PRETTY_FUNCTION__+0xb0>
    0.00 :   5c7b0f:       mov    %r14,%rdi
    0.00 :   5c7b12:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5c7b17:       mov    %r12,%rcx
    0.00 :   5c7b1a:       lea    0x266a12(%rip),%rdx        # 82e533 <std::piecewise_construct+0xdad>
    0.00 :   5c7b21:       mov    %r14,%rsi
    0.00 :   5c7b24:       mov    %rbp,%rdi
    0.00 :   5c7b27:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5c7b2c:       mov    %r14,%rdi
         :            if (!_M_is_local())
    0.00 :   5c7b2f:       add    $0x10,%r12
    0.00 :   5c7b33:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5c7b38:       mov    %r13,%rdi
    0.00 :   5c7b3b:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5c7b40:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5c7b45:       cmp    %r12,%rdi
    0.00 :   5c7b48:       je     b4a48 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long) [clone .cold.131]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5c7b4e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5c7b53:       jmpq   b4a48 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long) [clone .cold.131]>
    0.00 :   5c7b58:       mov    %rax,%rbx
    0.00 :   5c7b5b:       jmpq   b4a81 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long) [clone .cold.131]+0x39>
    0.00 :   5c7b60:       mov    %rax,%rbx
    0.00 :   5c7b63:       jmpq   b4a66 <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long) [clone .cold.131]+0x1e>
    0.00 :   5c7b68:       mov    %rax,%rbx
    0.00 :   5c7b6b:       jmpq   b4a5e <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long) [clone .cold.131]+0x16>
    0.00 :   5c7b70:       mov    %rax,%rbx
    0.00 :   5c7b73:       jmpq   b4a6e <onnxruntime::OpKernelContext::OutputMLValue(int, onnxruntime::TensorShape const&, unsigned long) [clone .cold.131]+0x26>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.26 for cache-misses (4 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .plt:
         :
         :           00000000000a4990 <free@plt>:
  100.00 :   a4990:       jmpq   *0xc9b32(%rip)        # 16e4c8 <free@GLIBC_2.2.5>
    0.00 :   a4996:       pushq  $0x296
    0.00 :   a499b:       jmpq   a2020 <.plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005aed40 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>:
         :            _ZN11onnxruntime14ExecutionFrame34AllocateMLValueTensorSelfOwnBufferER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
  100.00 :   5aed40:       push   %rbx
    0.00 :   5aed41:       mov    %rdi,%rbx
    0.00 :   5aed44:       sub    $0x10,%rsp
    0.00 :   5aed48:       mov    %fs:0x28,%rax
    0.00 :   5aed51:       mov    %rax,0x8(%rsp)
    0.00 :   5aed56:       xor    %eax,%eax
    0.00 :   5aed58:       movzbl 0x28(%rsp),%eax
    0.00 :   5aed5d:       push   %rax
    0.00 :   5aed5e:       pushq  0x28(%rsp)
    0.00 :   5aed62:       callq  5adde0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>
    0.00 :   5aed67:       pop    %rax
    0.00 :   5aed68:       pop    %rdx
    0.00 :   5aed69:       mov    0x8(%rsp),%rdi
    0.00 :   5aed6e:       xor    %fs:0x28,%rdi
    0.00 :   5aed77:       jne    5aed82 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x42>
    0.00 :   5aed79:       add    $0x10,%rsp
    0.00 :   5aed7d:       mov    %rbx,%rax
    0.00 :   5aed80:       pop    %rbx
    0.00 :   5aed81:       retq
    0.00 :   5aed82:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a8820 <onnxruntime::ExecutionFrame::GetAllocatorImpl(OrtMemoryInfo const&) const>:
         :            _ZNK11onnxruntime14ExecutionFrame16GetAllocatorImplERK13OrtMemoryInfo():
  100.00 :   5a8820:       push   %rbx
    0.00 :   5a8821:       mov    %rdi,%rbx
    0.00 :   5a8824:       sub    $0x10,%rsp
    0.00 :   5a8828:       mov    0x48(%rsi),%rsi
    0.00 :   5a882c:       mov    %fs:0x28,%rax
    0.00 :   5a8835:       mov    %rax,0x8(%rsp)
    0.00 :   5a883a:       xor    %eax,%eax
    0.00 :   5a883c:       callq  5d97f0 <onnxruntime::SessionState::GetAllocator(OrtMemoryInfo const&) const>
    0.00 :   5a8841:       mov    0x8(%rsp),%rcx
    0.00 :   5a8846:       xor    %fs:0x28,%rcx
    0.00 :   5a884f:       jne    5a885a <onnxruntime::ExecutionFrame::GetAllocatorImpl(OrtMemoryInfo const&) const+0x3a>
    0.00 :   5a8851:       add    $0x10,%rsp
    0.00 :   5a8855:       mov    %rbx,%rax
    0.00 :   5a8858:       pop    %rbx
    0.00 :   5a8859:       retq
    0.00 :   5a885a:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000282440 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)>:
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
   46.19 :   282440:       push   %r15
    0.00 :   282442:       push   %r14
    0.00 :   282444:       mov    %rdx,%r14
    0.00 :   282447:       push   %r13
    0.00 :   282449:       mov    %rsi,%r13
    0.00 :   28244c:       push   %r12
    0.00 :   28244e:       mov    %rcx,%r12
    0.00 :   282451:       push   %rbp
    0.00 :   282452:       mov    %r8,%rbp
    0.00 :   282455:       push   %rbx
    0.00 :   282456:       mov    %rdi,%rbx
    0.00 :   282459:       sub    $0x1c8,%rsp
    0.00 :   282460:       mov    0x30(%rdx),%rdi
    0.00 :   282464:       mov    %fs:0x28,%rax
    0.00 :   28246d:       mov    %rax,0x1b8(%rsp)
    0.00 :   282475:       xor    %eax,%eax
    0.00 :   282477:       mov    (%rdi),%rax
    0.00 :   28247a:       callq  *0x18(%rax)
    0.00 :   28247d:       mov    %r13,0x8(%rbx)
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   282481:       lea    0x18(%r14),%rdi
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282485:       mov    %rax,(%rbx)
    0.00 :   282488:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   28248d:       mov    %rax,%r15
    0.00 :   282490:       test   %rbp,%rbp
    0.00 :   282493:       jle    282540 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x100>
    0.00 :   282499:       mov    %rbp,%rcx
    0.00 :   28249c:       shr    $0x3f,%rcx
    0.00 :   2824a0:       cmp    %r12,%rbp
    0.00 :   2824a3:       setl   %al
    0.00 :   2824a6:       or     %ecx,%eax
    0.00 :   2824a8:       mov    %r12,%rcx
    0.00 :   2824ab:       shr    $0x3f,%rcx
    0.00 :   2824af:       or     %cl,%al
    0.00 :   2824b1:       jne    28254d <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x10d>
    0.00 :   2824b7:       cmp    %rbp,%r15
    0.00 :   2824ba:       jl     28254d <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x10d>
    0.00 :   2824c0:       mov    %r12,%rax
    0.00 :   2824c3:       xor    %edx,%edx
    0.00 :   2824c5:       mov    %r12,%rsi
    0.00 :   2824c8:       div    %r13
    0.00 :   2824cb:       test   %rdx,%rdx
    0.00 :   2824ce:       jne    28264a <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x20a>
    0.00 :   2824d4:       mov    %rbp,%rax
    0.00 :   2824d7:       xor    %edx,%edx
    0.00 :   2824d9:       div    %r13
    0.00 :   2824dc:       test   %rdx,%rdx
    0.00 :   2824df:       jne    28264a <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x20a>
    0.00 :   2824e5:       mov    %rbp,%r15
    0.00 :   2824e8:       mov    (%rbx),%rcx
    0.00 :   2824eb:       mov    %r15,%rax
    0.00 :   2824ee:       sub    %r12,%rax
    0.00 :   2824f1:       mov    %rax,0x10(%rbx)
    0.00 :   2824f5:       imul   %rcx,%rax
    0.00 :   2824f9:       imul   %rcx,%rsi
    0.00 :   2824fd:       add    0x50(%r14),%rsi
    0.00 :   282501:       add    (%r14),%rsi
    0.00 :   282504:       mov    %rsi,%rdx
    0.00 :   282507:       mov    %rsi,0x18(%rbx)
    0.00 :   28250b:       add    %rax,%rdx
    0.00 :   28250e:       mov    %rdx,0x20(%rbx)
    0.00 :   282512:       mov    0x1b8(%rsp),%rax
    0.00 :   28251a:       xor    %fs:0x28,%rax
    0.00 :   282523:       jne    282747 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x307>
    0.00 :   282529:       add    $0x1c8,%rsp
    0.00 :   282530:       pop    %rbx
    0.00 :   282531:       pop    %rbp
    0.00 :   282532:       pop    %r12
    0.00 :   282534:       pop    %r13
    0.00 :   282536:       pop    %r14
    0.00 :   282538:       pop    %r15
    0.00 :   28253a:       retq
    0.00 :   28253b:       nopl   0x0(%rax,%rax,1)
    0.00 :   282540:       or     %r12,%rbp
    0.00 :   282543:       jne    28274c <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x30c>
   53.81 :   282549:       xor    %esi,%esi
    0.00 :   28254b:       jmp    2824e8 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0xa8>
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   28254d:       lea    0x40(%rsp),%rbx
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282552:       mov    $0xa0,%edi
    0.00 :   282557:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   28255c:       mov    $0x10,%esi
    0.00 :   282561:       mov    %rbx,%rdi
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282564:       mov    %rax,%r13
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   282567:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   28256c:       lea    0x5c2670(%rip),%rsi        # 844be3 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x363>
    0.00 :   282573:       mov    %rbx,%rdi
    0.00 :   282576:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :            *  These functions use the stream's current locale (specifically, the
         :            *  @c num_get facet) to perform numeric formatting.
         :            */
         :            __ostream_type&
         :            operator<<(long __n)
         :            { return _M_insert(__n); }
    0.00 :   28257b:       mov    %r12,%rsi
    0.00 :   28257e:       mov    %rbx,%rdi
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282581:       mov    %rsp,%r12
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   282584:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   282589:       lea    0x623f49(%rip),%rsi        # 8a64d9 <onnxruntime::(anonymous namespace)::k_valid_path_separators+0xbd>
    0.00 :   282590:       mov    %rbx,%rdi
    0.00 :   282593:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   282598:       mov    %rbp,%rsi
    0.00 :   28259b:       mov    %rbx,%rdi
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   28259e:       lea    0x20(%rsp),%rbp
    0.00 :   2825a3:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   2825a8:       lea    0x5c2652(%rip),%rsi        # 844c01 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x381>
    0.00 :   2825af:       mov    %rbx,%rdi
    0.00 :   2825b2:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   2825b7:       mov    %r15,%rsi
    0.00 :   2825ba:       mov    %rbx,%rdi
    0.00 :   2825bd:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   2825c2:       lea    0x8(%rbx),%rsi
    0.00 :   2825c6:       mov    %rbp,%rdi
    0.00 :   2825c9:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   2825ce:       mov    %rbx,%rdi
    0.00 :   2825d1:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   2825d6:       mov    %r12,%rdi
    0.00 :   2825d9:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2825de:       mov    %r12,%r8
    0.00 :   2825e1:       mov    $0x2d0,%edx
    0.00 :   2825e6:       mov    %rbx,%rdi
    0.00 :   2825e9:       lea    0x5c3630(%rip),%rcx        # 845c20 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)::__PRETTY_FUNCTION__>
    0.00 :   2825f0:       lea    0x5c2461(%rip),%rsi        # 844a58 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x1d8>
    0.00 :   2825f7:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2825fc:       mov    %rbp,%rcx
    0.00 :   2825ff:       lea    0x5c2632(%rip),%rdx        # 844c38 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x3b8>
    0.00 :   282606:       mov    %rbx,%rsi
    0.00 :   282609:       mov    %r13,%rdi
    0.00 :   28260c:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   282611:       mov    %rbx,%rdi
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   282614:       add    $0x10,%rbp
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282618:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   28261d:       mov    %r12,%rdi
    0.00 :   282620:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   282625:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   28262a:       cmp    %rbp,%rdi
    0.00 :   28262d:       je     282634 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x1f4>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   28262f:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282634:       lea    -0x188f1b(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   28263b:       lea    0x98efee(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   282642:       mov    %r13,%rdi
    0.00 :   282645:       callq  53bc0 <__cxa_throw@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   28264a:       lea    0x40(%rsp),%rbx
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   28264f:       mov    $0xa0,%edi
    0.00 :   282654:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   282659:       mov    $0x10,%esi
    0.00 :   28265e:       mov    %rbx,%rdi
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282661:       mov    %rax,%r14
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   282664:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   282669:       lea    0x5c25a9(%rip),%rsi        # 844c19 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x399>
    0.00 :   282670:       mov    %rbx,%rdi
    0.00 :   282673:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   282678:       mov    %r12,%rsi
    0.00 :   28267b:       mov    %rbx,%rdi
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   28267e:       mov    %rsp,%r12
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   282681:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   282686:       lea    0x5ef546(%rip),%rsi        # 871bd3 <typeinfo name for onnxruntime::GatherCopyData<long>(onnxruntime::Tensor const*, unsigned char const*, unsigned char*, bool, unsigned long, long, long, long, long, long, onnxruntime::TensorShape const&, long, onnxruntime::concurrency::ThreadPool*)::{lambda(long, long)#2}+0x1f3>
    0.00 :   28268d:       mov    %rbx,%rdi
    0.00 :   282690:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   282695:       mov    %rbp,%rsi
    0.00 :   282698:       mov    %rbx,%rdi
    0.00 :   28269b:       lea    0x20(%rsp),%rbp
    0.00 :   2826a0:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   2826a5:       lea    0x5c25e4(%rip),%rsi        # 844c90 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x410>
    0.00 :   2826ac:       mov    %rbx,%rdi
    0.00 :   2826af:       callq  53330 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
         :
         :            __ostream_type&
         :            operator<<(unsigned long __n)
         :            { return _M_insert(__n); }
    0.00 :   2826b4:       mov    %r13,%rsi
    0.00 :   2826b7:       mov    %rbx,%rdi
    0.00 :   2826ba:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    0.00 :   2826bf:       lea    0x8(%rbx),%rsi
    0.00 :   2826c3:       mov    %rbp,%rdi
    0.00 :   2826c6:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   2826cb:       mov    %rbx,%rdi
    0.00 :   2826ce:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   2826d3:       mov    %r12,%rdi
    0.00 :   2826d6:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2826db:       mov    %r12,%r8
    0.00 :   2826de:       mov    $0x2d3,%edx
    0.00 :   2826e3:       mov    %rbx,%rdi
    0.00 :   2826e6:       lea    0x5c3533(%rip),%rcx        # 845c20 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)::__PRETTY_FUNCTION__>
    0.00 :   2826ed:       lea    0x5c2364(%rip),%rsi        # 844a58 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x1d8>
    0.00 :   2826f4:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2826f9:       mov    %rbp,%rcx
    0.00 :   2826fc:       lea    0x5c25bd(%rip),%rdx        # 844cc0 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x440>
    0.00 :   282703:       mov    %rbx,%rsi
    0.00 :   282706:       mov    %r14,%rdi
    0.00 :   282709:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   28270e:       mov    %rbx,%rdi
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
    0.00 :   282711:       add    $0x10,%rbp
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282715:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   28271a:       mov    %r12,%rdi
    0.00 :   28271d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   282722:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   282727:       cmp    %rbp,%rdi
    0.00 :   28272a:       je     282731 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x2f1>
    0.00 :   28272c:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282731:       lea    -0x189018(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   282738:       lea    0x98eef1(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   28273f:       mov    %r14,%rdi
    0.00 :   282742:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   282747:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   28274c:       mov    %rax,%rbp
    0.00 :   28274f:       jmpq   282499 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x59>
    0.00 :   282754:       mov    %rax,%r13
    0.00 :   282757:       jmp    28275e <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x31e>
    0.00 :   282759:       mov    %rax,%rbx
    0.00 :   28275c:       jmp    282769 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x329>
    0.00 :   28275e:       mov    %rbx,%rdi
    0.00 :   282761:       mov    %r13,%rbx
    0.00 :   282764:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   282769:       mov    %r12,%rdi
    0.00 :   28276c:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   282771:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   282776:       add    $0x10,%rbp
    0.00 :   28277a:       cmp    %rbp,%rdi
    0.00 :   28277d:       je     282784 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x344>
    0.00 :   28277f:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   282784:       mov    %r14,%rdi
    0.00 :   282787:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   28278c:       mov    %rbx,%rdi
    0.00 :   28278f:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   282794:       mov    %rax,%rbx
    0.00 :   282797:       jmp    282771 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x331>
    0.00 :   282799:       mov    %rax,%rbx
    0.00 :   28279c:       jmp    2827bb <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x37b>
    0.00 :   28279e:       mov    %rax,%r14
    0.00 :   2827a1:       jmp    2827a8 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x368>
    0.00 :   2827a3:       mov    %rax,%rbx
    0.00 :   2827a6:       jmp    2827b3 <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x373>
    0.00 :   2827a8:       mov    %rbx,%rdi
    0.00 :   2827ab:       mov    %r14,%rbx
    0.00 :   2827ae:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2827b3:       mov    %r12,%rdi
    0.00 :   2827b6:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime17OutputBroadcasterC1EmRNS_6TensorEll():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2827bb:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2827c0:       add    $0x10,%rbp
    0.00 :   2827c4:       cmp    %rbp,%rdi
    0.00 :   2827c7:       je     2827ce <onnxruntime::OutputBroadcaster::OutputBroadcaster(unsigned long, onnxruntime::Tensor&, long, long)+0x38e>
    0.00 :   2827c9:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime17OutputBroadcasterC2EmRNS_6TensorEll():
    0.00 :   2827ce:       mov    %r13,%rdi
    0.00 :   2827d1:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   2827d6:       mov    %rbx,%rdi
    0.00 :   2827d9:       callq  53c30 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005ee2e0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)>:
         :            _ZN11onnxruntime6TensorC2EPKNS_12DataTypeImplERKNS_11TensorShapeEPvRK13OrtMemoryInfol():
    0.00 :   5ee2e0:       push   %r15
    0.00 :   5ee2e2:       push   %r14
    0.00 :   5ee2e4:       push   %r13
    0.00 :   5ee2e6:       push   %r12
    0.00 :   5ee2e8:       push   %rbp
    0.00 :   5ee2e9:       push   %rbx
    0.00 :   5ee2ea:       mov    %rdi,%rbx
    0.00 :   5ee2ed:       sub    $0xb8,%rsp
    0.00 :   5ee2f4:       movdqu (%r8),%xmm0
    0.00 :   5ee2f9:       mov    %fs:0x28,%rax
    0.00 :   5ee302:       mov    %rax,0xa8(%rsp)
    0.00 :   5ee30a:       xor    %eax,%eax
         :            #if __cplusplus > 201402L
         :            using weak_type = __weak_ptr<_Tp, _Lp>;
         :            #endif
         :
         :            constexpr __shared_ptr() noexcept
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5ee30c:       movq   $0x0,0x8(%rdi)
   52.59 :   5ee314:       movups %xmm0,0x38(%rdi)
    0.00 :   5ee318:       mov    0x10(%r8),%rax
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5ee31c:       movq   $0x0,0x10(%rdi)
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ee324:       movq   $0x0,0x18(%rdi)
    0.00 :   5ee32c:       movq   $0x0,0x20(%rdi)
    0.00 :   5ee334:       movq   $0x0,0x28(%rdi)
    0.00 :   5ee33c:       mov    %rax,0x48(%rdi)
    0.00 :   5ee340:       test   %rsi,%rsi
    0.00 :   5ee343:       je     5ee437 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0x157>
    0.00 :   5ee349:       mov    %rsp,%r8
         :            : _M_ptr(0), _M_refcount()
   47.41 :   5ee34c:       movq   $0x0,(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5ee354:       movq   $0x0,0x8(%rsp)
    0.00 :   5ee35d:       callq  5edfa0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)>
         :            if (_M_pi != nullptr)
    0.00 :   5ee362:       mov    0x8(%rsp),%rbx
    0.00 :   5ee367:       test   %rbx,%rbx
    0.00 :   5ee36a:       je     5ee390 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0xb0>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5ee36c:       mov    0x639b95(%rip),%rbp        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ee373:       test   %rbp,%rbp
    0.00 :   5ee376:       je     5ee3c0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0xe0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee378:       mov    $0xffffffff,%eax
    0.00 :   5ee37d:       lock xadd %eax,0x8(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ee382:       cmp    $0x1,%eax
    0.00 :   5ee385:       je     5ee3ce <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0xee>
    0.00 :   5ee387:       nopw   0x0(%rax,%rax,1)
    0.00 :   5ee390:       mov    0xa8(%rsp),%rax
    0.00 :   5ee398:       xor    %fs:0x28,%rax
    0.00 :   5ee3a1:       jne    5ee4c0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0x1e0>
    0.00 :   5ee3a7:       add    $0xb8,%rsp
    0.00 :   5ee3ae:       pop    %rbx
    0.00 :   5ee3af:       pop    %rbp
    0.00 :   5ee3b0:       pop    %r12
    0.00 :   5ee3b2:       pop    %r13
    0.00 :   5ee3b4:       pop    %r14
    0.00 :   5ee3b6:       pop    %r15
    0.00 :   5ee3b8:       retq
    0.00 :   5ee3b9:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ee3c0:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5ee3c3:       lea    -0x1(%rax),%edx
    0.00 :   5ee3c6:       mov    %edx,0x8(%rbx)
    0.00 :   5ee3c9:       cmp    $0x1,%eax
    0.00 :   5ee3cc:       jne    5ee390 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0xb0>
         :            _M_dispose();
    0.00 :   5ee3ce:       mov    (%rbx),%rax
    0.00 :   5ee3d1:       mov    0x10(%rax),%rax
    0.00 :   5ee3d5:       cmp    0x639784(%rip),%rax        # c27b60 <.got+0xa0>
    0.00 :   5ee3dc:       jne    5ee430 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0x150>
         :            if (__gthread_active_p())
    0.00 :   5ee3de:       test   %rbp,%rbp
    0.00 :   5ee3e1:       je     5ee410 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0x130>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee3e3:       mov    $0xffffffff,%eax
    0.00 :   5ee3e8:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ee3ed:       cmp    $0x1,%eax
    0.00 :   5ee3f0:       jne    5ee390 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0xb0>
         :            _M_destroy();
    0.00 :   5ee3f2:       mov    (%rbx),%rax
         :            { delete this; }
    0.00 :   5ee3f5:       mov    %rbx,%rdi
         :            _M_destroy();
    0.00 :   5ee3f8:       mov    0x18(%rax),%rdx
    0.00 :   5ee3fc:       cmp    0x63979d(%rip),%rdx        # c27ba0 <.got+0xe0>
    0.00 :   5ee403:       jne    5ee420 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0x140>
         :            { delete this; }
    0.00 :   5ee405:       callq  *0x8(%rax)
    0.00 :   5ee408:       jmp    5ee390 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0xb0>
    0.00 :   5ee40a:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ee410:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5ee413:       lea    -0x1(%rax),%edx
    0.00 :   5ee416:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5ee419:       jmp    5ee3ed <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0x10d>
    0.00 :   5ee41b:       nopl   0x0(%rax,%rax,1)
         :            _M_destroy();
    0.00 :   5ee420:       callq  *%rdx
    0.00 :   5ee422:       jmpq   5ee390 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0xb0>
    0.00 :   5ee427:       nopw   0x0(%rax,%rax,1)
         :            _M_dispose();
    0.00 :   5ee430:       mov    %rbx,%rdi
    0.00 :   5ee433:       callq  *%rax
    0.00 :   5ee435:       jmp    5ee3de <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)+0xfe>
    0.00 :   5ee437:       mov    $0xa0,%edi
    0.00 :   5ee43c:       lea    0x20(%rsp),%r12
    0.00 :   5ee441:       mov    %rsp,%r14
    0.00 :   5ee444:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5ee449:       mov    %r12,%rdi
    0.00 :   5ee44c:       mov    %rax,%r13
    0.00 :   5ee44f:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5ee454:       mov    %r14,%rdi
    0.00 :   5ee457:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ee45c:       lea    0x40(%rsp),%r15
    0.00 :   5ee461:       mov    %r14,%r8
    0.00 :   5ee464:       lea    0x2a6f95(%rip),%rcx        # 895400 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long)::__PRETTY_FUNCTION__>
    0.00 :   5ee46b:       mov    $0x10,%edx
    0.00 :   5ee470:       lea    0x2a6d41(%rip),%rsi        # 8951b8 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xb8>
    0.00 :   5ee477:       mov    %r15,%rdi
    0.00 :   5ee47a:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5ee47f:       mov    %r12,%rcx
    0.00 :   5ee482:       lea    0x2a6dd4(%rip),%rdx        # 89525d <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0x15d>
    0.00 :   5ee489:       mov    %r15,%rsi
    0.00 :   5ee48c:       mov    %r13,%rdi
    0.00 :   5ee48f:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5ee494:       mov    %r15,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5ee497:       add    $0x10,%r12
    0.00 :   5ee49b:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ee4a0:       mov    %r14,%rdi
    0.00 :   5ee4a3:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ee4a8:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ee4ad:       cmp    %r12,%rdi
    0.00 :   5ee4b0:       je     b748a <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long) [clone .cold.102]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5ee4b6:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ee4bb:       jmpq   b748a <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long) [clone .cold.102]>
    0.00 :   5ee4c0:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5ee4c5:       mov    %rax,%rbp
    0.00 :   5ee4c8:       jmpq   b74a0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long) [clone .cold.102]+0x16>
    0.00 :   5ee4cd:       mov    %rax,%rbp
    0.00 :   5ee4d0:       jmpq   b74e0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long) [clone .cold.102]+0x56>
    0.00 :   5ee4d5:       mov    %rax,%rbp
    0.00 :   5ee4d8:       jmpq   b74d8 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long) [clone .cold.102]+0x4e>
    0.00 :   5ee4dd:       mov    %rax,%rbp
    0.00 :   5ee4e0:       jmpq   b74e8 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, OrtMemoryInfo const&, long) [clone .cold.102]+0x5e>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000184d80 <onnxruntime::PrimitiveDataTypeBase::AsPrimitiveDataType() const>:
         :            _ZNK11onnxruntime21PrimitiveDataTypeBase19AsPrimitiveDataTypeEv():
  100.00 :   184d80:       mov    %rdi,%rax
    0.00 :   184d83:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a8bd0 <MlasSgemmThreaded(void*, int)>:
         :            _Z17MlasSgemmThreadedPvi():
  100.00 :   6a8bd0:       push   %r14
    0.00 :   6a8bd2:       mov    %rdi,%r10
    0.00 :   6a8bd5:       mov    %esi,%eax
    0.00 :   6a8bd7:       push   %r13
    0.00 :   6a8bd9:       cltd
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6a8bda:       movslq (%r10),%r8
         :            _Z17MlasSgemmThreadedPvi():
    0.00 :   6a8bdd:       push   %r12
    0.00 :   6a8bdf:       push   %rbp
    0.00 :   6a8be0:       push   %rbx
    0.00 :   6a8be1:       movslq 0x4(%rdi),%rdi
    0.00 :   6a8be5:       idiv   %edi
    0.00 :   6a8be7:       mov    %eax,%ecx
    0.00 :   6a8be9:       mov    0x10(%r10),%rax
    0.00 :   6a8bed:       mov    %edx,%esi
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6a8bef:       xor    %edx,%edx
    0.00 :   6a8bf1:       div    %r8
    0.00 :   6a8bf4:       movslq %ecx,%r8
    0.00 :   6a8bf7:       mov    %ecx,%ecx
    0.00 :   6a8bf9:       mov    %rax,%rbx
    0.00 :   6a8bfc:       cmp    %rcx,%rdx
    0.00 :   6a8bff:       jbe    6a8cd8 <MlasSgemmThreaded(void*, int)+0x108>
    0.00 :   6a8c05:       add    $0x1,%rbx
    0.00 :   6a8c09:       imul   %rbx,%r8
         :            _Z17MlasSgemmThreadedPvi():
    0.00 :   6a8c0d:       mov    0x18(%r10),%rcx
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6a8c11:       xor    %edx,%edx
    0.00 :   6a8c13:       movslq %esi,%r11
    0.00 :   6a8c16:       mov    %esi,%esi
         :            _Z17MlasSgemmThreadedPvi():
    0.00 :   6a8c18:       lea    0xf(%rcx),%rbp
    0.00 :   6a8c1c:       mov    %rbp,%rax
    0.00 :   6a8c1f:       shr    $0x4,%rax
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6a8c23:       div    %rdi
    0.00 :   6a8c26:       cmp    %rsi,%rdx
    0.00 :   6a8c29:       jbe    6a8ce8 <MlasSgemmThreaded(void*, int)+0x118>
    0.00 :   6a8c2f:       add    $0x1,%rax
    0.00 :   6a8c33:       imul   %rax,%r11
         :            _Z17MlasSgemmThreadedPvi():
    0.00 :   6a8c37:       mov    %r11,%rdx
    0.00 :   6a8c3a:       shl    $0x4,%rax
    0.00 :   6a8c3e:       mov    0x8(%r10),%edi
    0.00 :   6a8c42:       mov    0x30(%r10),%r13
    0.00 :   6a8c46:       shl    $0x4,%rdx
    0.00 :   6a8c4a:       mov    0x50(%r10),%r12
    0.00 :   6a8c4e:       mov    0x28(%r10),%rsi
    0.00 :   6a8c52:       sub    %rdx,%rcx
    0.00 :   6a8c55:       cmp    %rcx,%rax
    0.00 :   6a8c58:       cmovbe %rax,%rcx
    0.00 :   6a8c5c:       mov    %r8,%rax
    0.00 :   6a8c5f:       cmp    $0x6f,%edi
    0.00 :   6a8c62:       jne    6a8c6b <MlasSgemmThreaded(void*, int)+0x9b>
    0.00 :   6a8c64:       mov    %r13,%rax
    0.00 :   6a8c67:       imul   %r8,%rax
    0.00 :   6a8c6b:       imul   %r12,%r8
    0.00 :   6a8c6f:       lea    (%rsi,%rax,4),%r9
    0.00 :   6a8c73:       mov    0x48(%r10),%rax
    0.00 :   6a8c77:       movss  0x5c(%r10),%xmm1
    0.00 :   6a8c7d:       movss  0x58(%r10),%xmm0
    0.00 :   6a8c83:       add    %rdx,%r8
    0.00 :   6a8c86:       cmpb   $0x0,0x60(%r10)
    0.00 :   6a8c8b:       lea    (%rax,%r8,4),%r14
    0.00 :   6a8c8f:       mov    0x38(%r10),%rax
    0.00 :   6a8c93:       mov    0x20(%r10),%r8
    0.00 :   6a8c97:       jne    6a8cf8 <MlasSgemmThreaded(void*, int)+0x128>
    0.00 :   6a8c99:       mov    0xc(%r10),%esi
    0.00 :   6a8c9d:       mov    0x40(%r10),%rdx
    0.00 :   6a8ca1:       cmp    $0x6f,%esi
    0.00 :   6a8ca4:       je     6a8caa <MlasSgemmThreaded(void*, int)+0xda>
    0.00 :   6a8ca6:       imul   %rdx,%r11
    0.00 :   6a8caa:       shl    $0x6,%r11
    0.00 :   6a8cae:       sub    $0x8,%rsp
    0.00 :   6a8cb2:       add    %rax,%r11
    0.00 :   6a8cb5:       push   %r12
    0.00 :   6a8cb7:       push   %r14
    0.00 :   6a8cb9:       push   %rdx
    0.00 :   6a8cba:       mov    %rbx,%rdx
    0.00 :   6a8cbd:       push   %r11
    0.00 :   6a8cbf:       push   %r13
    0.00 :   6a8cc1:       callq  6a80a0 <MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long)>
    0.00 :   6a8cc6:       add    $0x30,%rsp
    0.00 :   6a8cca:       pop    %rbx
    0.00 :   6a8ccb:       pop    %rbp
    0.00 :   6a8ccc:       pop    %r12
    0.00 :   6a8cce:       pop    %r13
    0.00 :   6a8cd0:       pop    %r14
    0.00 :   6a8cd2:       retq
    0.00 :   6a8cd3:       nopl   0x0(%rax,%rax,1)
         :            _Z17MlasPartitionWorkiimPmS_():
    0.00 :   6a8cd8:       imul   %rax,%r8
    0.00 :   6a8cdc:       add    %rdx,%r8
    0.00 :   6a8cdf:       jmpq   6a8c0d <MlasSgemmThreaded(void*, int)+0x3d>
    0.00 :   6a8ce4:       nopl   0x0(%rax)
    0.00 :   6a8ce8:       imul   %rax,%r11
    0.00 :   6a8cec:       add    %rdx,%r11
    0.00 :   6a8cef:       jmpq   6a8c37 <MlasSgemmThreaded(void*, int)+0x67>
    0.00 :   6a8cf4:       nopl   0x0(%rax)
         :            _Z17MlasSgemmThreadedPvi():
    0.00 :   6a8cf8:       sub    $0x8,%rsp
    0.00 :   6a8cfc:       and    $0xfffffffffffffff0,%rbp
    0.00 :   6a8d00:       mov    %rbx,%rsi
    0.00 :   6a8d03:       push   %r12
    0.00 :   6a8d05:       push   %r14
    0.00 :   6a8d07:       push   %rbp
    0.00 :   6a8d08:       push   %rax
    0.00 :   6a8d09:       push   %r13
    0.00 :   6a8d0b:       callq  6a8810 <MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long)>
    0.00 :   6a8d10:       add    $0x30,%rsp
    0.00 :   6a8d14:       pop    %rbx
    0.00 :   6a8d15:       pop    %rbp
    0.00 :   6a8d16:       pop    %r12
    0.00 :   6a8d18:       pop    %r13
    0.00 :   6a8d1a:       pop    %r14
    0.00 :   6a8d1c:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (4 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005ac9c0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>:
         :            _ZN11onnxruntime14ExecutionFrame38AllocateMLValueTensorPreAllocateBufferER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
   21.59 :   5ac9c0:       push   %r15
    0.00 :   5ac9c2:       push   %r14
    0.00 :   5ac9c4:       push   %r13
    0.00 :   5ac9c6:       push   %r12
    0.00 :   5ac9c8:       push   %rbp
    0.00 :   5ac9c9:       push   %rbx
    0.00 :   5ac9ca:       sub    $0x338,%rsp
    0.00 :   5ac9d1:       mov    0x370(%rsp),%rax
    0.00 :   5ac9d9:       mov    %rdi,0x18(%rsp)
    0.00 :   5ac9de:       mov    %rdx,0x10(%rsp)
    0.00 :   5ac9e3:       mov    %rax,0x8(%rsp)
    0.00 :   5ac9e8:       mov    0x378(%rsp),%eax
    0.00 :   5ac9ef:       mov    %r8,0x40(%rsp)
    0.00 :   5ac9f4:       mov    %r9,0x38(%rsp)
    0.00 :   5ac9f9:       mov    %eax,0x4c(%rsp)
    0.00 :   5ac9fd:       mov    %fs:0x28,%rax
   28.85 :   5aca06:       mov    %rax,0x328(%rsp)
    0.00 :   5aca0e:       xor    %eax,%eax
    0.00 :   5aca10:       test   %ecx,%ecx
    0.00 :   5aca12:       js     5adb72 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x11b2>
    0.00 :   5aca18:       mov    %rsi,%rbp
    0.00 :   5aca1b:       movslq %ecx,%rcx
    0.00 :   5aca1e:       cmp    0x28(%rsi),%rcx
    0.00 :   5aca22:       jae    5adb72 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x11b2>
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5aca28:       mov    0x10(%rsi),%rax
    0.00 :   5aca2c:       lea    (%rcx,%rcx,4),%rdx
    0.00 :   5aca30:       lea    (%rax,%rdx,8),%r14
    0.00 :   5aca34:       mov    0x10(%r14),%rdi
    0.00 :   5aca38:       test   %rdi,%rdi
    0.00 :   5aca3b:       je     5aca4b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8b>
    0.00 :   5aca3d:       mov    (%rdi),%rax
    0.00 :   5aca40:       callq  *0x30(%rax)
    0.00 :   5aca43:       test   %al,%al
    0.00 :   5aca45:       jne    5acf18 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x558>
    0.00 :   5aca4b:       mov    $0xa0,%edi
    0.00 :   5aca50:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5aca55:       mov    0x10(%r14),%rdi
    0.00 :   5aca59:       mov    %rax,0x8(%rsp)
    0.00 :   5aca5e:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5aca63:       lea    0x130(%rsp),%r15
    0.00 :   5aca6b:       mov    %rax,%r13
    0.00 :   5aca6e:       lea    0x70(%r15),%rdi
    0.00 :   5aca72:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5aca77:       mov    0x67b0aa(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5aca7e:       xor    %edi,%edi
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5aca80:       xor    %esi,%esi
    0.00 :   5aca82:       mov    %di,0x280(%rsp)
    0.00 :   5aca8a:       mov    %rax,0x20(%rsp)
    0.00 :   5aca8f:       add    $0x10,%rax
    0.00 :   5aca93:       mov    %rax,0x1a0(%rsp)
    0.00 :   5aca9b:       mov    0x67b2fe(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5acaa2:       movq   $0x0,0x278(%rsp)
    0.00 :   5acaae:       mov    0x8(%rax),%rbp
    0.00 :   5acab2:       mov    0x10(%rax),%r12
    0.00 :   5acab6:       movq   $0x0,0x288(%rsp)
    0.00 :   5acac2:       movq   $0x0,0x290(%rsp)
    0.00 :   5acace:       mov    -0x18(%rbp),%rdi
    0.00 :   5acad2:       mov    %rbp,0x130(%rsp)
    0.00 :   5acada:       movq   $0x0,0x298(%rsp)
    0.00 :   5acae6:       movq   $0x0,0x2a0(%rsp)
    0.00 :   5acaf2:       add    %r15,%rdi
    0.00 :   5acaf5:       mov    %r12,(%rdi)
    0.00 :   5acaf8:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5acafd:       mov    0x67b25c(%rip),%rbx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5acb04:       lea    0x40(%r15),%rdi
    0.00 :   5acb08:       movq   $0x0,0x140(%rsp)
    0.00 :   5acb14:       movq   $0x0,0x148(%rsp)
    0.00 :   5acb20:       movq   $0x0,0x150(%rsp)
    0.00 :   5acb2c:       lea    0x18(%rbx),%rax
    0.00 :   5acb30:       mov    %rax,0x130(%rsp)
    0.00 :   5acb38:       lea    0x40(%rbx),%rax
    0.00 :   5acb3c:       mov    %rax,0x1a0(%rsp)
    0.00 :   5acb44:       mov    0x67b115(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5acb4b:       movq   $0x0,0x158(%rsp)
    0.00 :   5acb57:       mov    %rax,0x30(%rsp)
    0.00 :   5acb5c:       add    $0x10,%rax
    0.00 :   5acb60:       mov    %rax,0x138(%rsp)
    0.00 :   5acb68:       movq   $0x0,0x160(%rsp)
    0.00 :   5acb74:       movq   $0x0,0x168(%rsp)
    0.00 :   5acb80:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5acb85:       mov    0x67b44c(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5acb8c:       lea    0x8(%r15),%rsi
    0.00 :   5acb90:       lea    0x70(%r15),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5acb94:       movl   $0x10,0x178(%rsp)
    0.00 :   5acb9f:       mov    %rax,0x28(%rsp)
    0.00 :   5acba4:       add    $0x10,%rax
    0.00 :   5acba8:       mov    %rax,0x138(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5acbb0:       lea    0x60(%r15),%rax
    0.00 :   5acbb4:       mov    %rax,0x180(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   5acbbc:       movq   $0x0,0x188(%rsp)
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5acbc8:       movb   $0x0,0x190(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5acbd0:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5acbd5:       mov    $0x21,%edx
    0.00 :   5acbda:       lea    0x27a72f(%rip),%rsi        # 827310 <std::piecewise_construct+0x570>
    0.00 :   5acbe1:       mov    %r15,%rdi
    0.00 :   5acbe4:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!__s)
    0.00 :   5acbe9:       test   %r13,%r13
    0.00 :   5acbec:       je     5ad040 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x680>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   5acbf2:       mov    %r13,%rdi
    0.00 :   5acbf5:       callq  52c60 <strlen@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5acbfa:       mov    %r13,%rsi
    0.00 :   5acbfd:       mov    %r15,%rdi
    0.00 :   5acc00:       mov    %rax,%rdx
    0.00 :   5acc03:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acc08:       lea    0xd0(%rsp),%rdi
         :            { __c1 = __c2; }
    0.00 :   5acc10:       movb   $0x0,0xe0(%rsp)
    0.00 :   5acc18:       lea    0x10(%rdi),%rax
    0.00 :   5acc1c:       mov    %rdi,(%rsp)
    0.00 :   5acc20:       mov    %rax,0xd0(%rsp)
         :            if (this->pptr())
    0.00 :   5acc28:       mov    0x160(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   5acc30:       movq   $0x0,0xd8(%rsp)
    0.00 :   5acc3c:       test   %rax,%rax
    0.00 :   5acc3f:       je     5ad780 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdc0>
         :            if (this->pptr() > this->egptr())
    0.00 :   5acc45:       mov    0x150(%rsp),%r8
    0.00 :   5acc4d:       mov    0x158(%rsp),%rcx
    0.00 :   5acc55:       cmp    %r8,%rax
    0.00 :   5acc58:       jbe    5ad028 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x668>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5acc5e:       sub    %rcx,%rax
    0.00 :   5acc61:       xor    %edx,%edx
    0.00 :   5acc63:       xor    %esi,%esi
    0.00 :   5acc65:       mov    %rax,%r8
    0.00 :   5acc68:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   5acc6d:       lea    0x18(%rbx),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5acc71:       mov    0x180(%rsp),%rdi
    0.00 :   5acc79:       mov    %rax,0x130(%rsp)
    0.00 :   5acc81:       lea    0x40(%rbx),%rax
    0.00 :   5acc85:       mov    %rax,0x1a0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5acc8d:       mov    0x28(%rsp),%rax
    0.00 :   5acc92:       add    $0x10,%rax
    0.00 :   5acc96:       mov    %rax,0x138(%rsp)
         :            if (!_M_is_local())
    0.00 :   5acc9e:       lea    0x60(%r15),%rax
    0.00 :   5acca2:       cmp    %rax,%rdi
    0.00 :   5acca5:       je     5accac <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2ec>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5acca7:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5accac:       mov    0x30(%rsp),%rax
    0.00 :   5accb1:       lea    0x40(%r15),%rdi
    0.00 :   5accb5:       lea    0x90(%rsp),%r14
    0.00 :   5accbd:       add    $0x10,%rax
    0.00 :   5accc1:       mov    %rax,0x138(%rsp)
    0.00 :   5accc9:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5accce:       mov    -0x18(%rbp),%rax
         :            ~basic_ios() { }
    0.00 :   5accd2:       lea    0x70(%r15),%rdi
    0.00 :   5accd6:       mov    %rbp,0x130(%rsp)
    0.00 :   5accde:       mov    %r12,0x130(%rsp,%rax,1)
    0.00 :   5acce6:       mov    0x20(%rsp),%rax
    0.00 :   5acceb:       add    $0x10,%rax
    0.00 :   5accef:       mov    %rax,0x1a0(%rsp)
    0.00 :   5accf7:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5accfc:       mov    %r14,%rdi
    0.00 :   5accff:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd04:       lea    0x27a66c(%rip),%rdx        # 827377 <std::piecewise_construct+0x5d7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acd0b:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd0f:       mov    %r15,%rdi
    0.00 :   5acd12:       lea    -0x3f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acd16:       mov    %rax,0x130(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd1e:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5acd23:       lea    0x2e39ce(%rip),%rdx        # 8906f8 <OrtValue::GetMutable<onnxruntime::Tensor>()::__PRETTY_FUNCTION__+0x38>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acd2a:       lea    0x38(%r15),%rax
    0.00 :   5acd2e:       movl   $0x5d,0x150(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd39:       lea    0x28(%r15),%rdi
    0.00 :   5acd3d:       lea    -0x38(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5acd41:       mov    %rax,0x158(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acd49:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5acd4e:       mov    0x98(%rsp),%r12
    0.00 :   5acd56:       mov    0x90(%rsp),%rbx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5acd5e:       movq   $0x0,0x178(%rsp)
    0.00 :   5acd6a:       movq   $0x0,0x180(%rsp)
    0.00 :   5acd76:       movq   $0x0,0x188(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5acd82:       mov    %r12,%rbp
    0.00 :   5acd85:       sub    %rbx,%rbp
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5acd88:       mov    %rbp,%rax
    0.00 :   5acd8b:       sar    $0x5,%rax
    0.00 :   5acd8f:       je     5ad770 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdb0>
         :            if (__n > this->max_size())
    0.00 :   5acd95:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5acd9f:       cmp    %rdx,%rax
    0.00 :   5acda2:       ja     5adc0d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x124d>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5acda8:       mov    %rbp,%rdi
    0.00 :   5acdab:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5acdb0:       mov    0x98(%rsp),%r12
    0.00 :   5acdb8:       mov    0x90(%rsp),%rbx
    0.00 :   5acdc0:       mov    %rax,%r13
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5acdc3:       add    %r13,%rbp
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5acdc6:       mov    %r13,0x178(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5acdce:       mov    %rbp,0x188(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   5acdd6:       mov    %r13,%rbp
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5acdd9:       mov    %r13,0x180(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5acde1:       cmp    %rbx,%r12
    0.00 :   5acde4:       je     5ace17 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x457>
    0.00 :   5acde6:       nopw   %cs:0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5acdf0:       lea    0x10(%rbp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5acdf4:       mov    %rbp,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5acdf7:       mov    %rax,0x0(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5acdfb:       mov    (%rbx),%rsi
    0.00 :   5acdfe:       mov    0x8(%rbx),%rdx
    0.00 :   5ace02:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ace05:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ace0a:       add    $0x20,%rbx
    0.00 :   5ace0e:       add    $0x20,%rbp
    0.00 :   5ace12:       cmp    %rbx,%r12
    0.00 :   5ace15:       jne    5acdf0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x430>
    0.00 :   5ace17:       mov    (%rsp),%rcx
    0.00 :   5ace1b:       mov    0x8(%rsp),%rdi
    0.00 :   5ace20:       mov    %r15,%rsi
    0.00 :   5ace23:       lea    0x2e614b(%rip),%rdx        # 892f75 <onnxruntime::MemPatternPlanner::TraceAllocation(int, unsigned long)::__PRETTY_FUNCTION__+0x175>
         :            this->_M_impl._M_finish =
    0.00 :   5ace2a:       mov    %rbp,0x180(%rsp)
    0.00 :   5ace32:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5ace37:       mov    0x180(%rsp),%rbp
    0.00 :   5ace3f:       mov    0x178(%rsp),%rbx
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   5ace47:       cmp    %rbx,%rbp
    0.00 :   5ace4a:       je     5ace72 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4b2>
    0.00 :   5ace4c:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ace50:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5ace53:       lea    0x10(%rbx),%rax
    0.00 :   5ace57:       cmp    %rax,%rdi
    0.00 :   5ace5a:       je     5ace61 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4a1>
         :            ::operator delete(__p);
    0.00 :   5ace5c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ace61:       add    $0x20,%rbx
    0.00 :   5ace65:       cmp    %rbx,%rbp
    0.00 :   5ace68:       jne    5ace50 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x490>
    0.00 :   5ace6a:       mov    0x178(%rsp),%rbx
         :            if (__p)
    0.00 :   5ace72:       test   %rbx,%rbx
    0.00 :   5ace75:       je     5ace7f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4bf>
    0.00 :   5ace77:       mov    %rbx,%rdi
    0.00 :   5ace7a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ace7f:       mov    0x158(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ace87:       lea    0x38(%r15),%rax
    0.00 :   5ace8b:       cmp    %rax,%rdi
    0.00 :   5ace8e:       je     5ace95 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4d5>
    0.00 :   5ace90:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ace95:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ace9d:       lea    0x10(%r15),%rax
    0.00 :   5acea1:       cmp    %rax,%rdi
    0.00 :   5acea4:       je     5aceab <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4eb>
    0.00 :   5acea6:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5aceab:       mov    0x98(%rsp),%rbp
    0.00 :   5aceb3:       mov    0x90(%rsp),%rbx
    0.00 :   5acebb:       cmp    %rbx,%rbp
    0.00 :   5acebe:       je     5acee2 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x522>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5acec0:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5acec3:       lea    0x10(%rbx),%rax
    0.00 :   5acec7:       cmp    %rax,%rdi
    0.00 :   5aceca:       je     5aced1 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x511>
    0.00 :   5acecc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aced1:       add    $0x20,%rbx
    0.00 :   5aced5:       cmp    %rbx,%rbp
    0.00 :   5aced8:       jne    5acec0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x500>
    0.00 :   5aceda:       mov    0x90(%rsp),%rbx
         :            if (__p)
    0.00 :   5acee2:       test   %rbx,%rbx
    0.00 :   5acee5:       je     5aceef <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x52f>
    0.00 :   5acee7:       mov    %rbx,%rdi
    0.00 :   5aceea:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aceef:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5acef3:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5acefb:       add    $0x10,%rax
    0.00 :   5aceff:       cmp    %rax,%rdi
    0.00 :   5acf02:       je     b1ae8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x16e>
    0.00 :   5acf08:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5acf0d:       jmpq   b1ae8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x16e>
    0.00 :   5acf12:       nopw   0x0(%rax,%rax,1)
   26.69 :   5acf18:       mov    (%r14),%rax
    0.00 :   5acf1b:       lea    0x18(%rax),%r12
    0.00 :   5acf1f:       mov    %rax,0x50(%rsp)
    0.00 :   5acf24:       mov    %r12,%rdi
    0.00 :   5acf27:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5acf2c:       mov    0x8(%rsp),%rdi
    0.00 :   5acf31:       mov    %rax,%r13
    0.00 :   5acf34:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5acf39:       mov    %rax,(%rsp)
    0.00 :   5acf3d:       cmp    %rax,%r13
    0.00 :   5acf40:       jne    5ad060 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x6a0>
   22.87 :   5acf46:       mov    0x50(%rsp),%rax
    0.00 :   5acf4b:       mov    0x50(%rax),%rbx
    0.00 :   5acf4f:       add    (%rax),%rbx
    0.00 :   5acf52:       cmpb   $0x0,0x4c(%rsp)
    0.00 :   5acf57:       mov    0x18(%r14),%rax
    0.00 :   5acf5b:       je     5acf66 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5a6>
    0.00 :   5acf5d:       test   %rax,%rax
    0.00 :   5acf60:       je     5ad890 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xed0>
         :            _M_get() const noexcept
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
         :            };
         :
         :            template<typename _Tp, _Lock_policy _Lp>
         :            class __shared_ptr
    0.00 :   5acf66:       mov    0x10(%rsp),%rcx
    0.00 :   5acf6b:       mov    0x20(%r14),%r13
         :            if (__tmp != _M_pi)
    0.00 :   5acf6f:       mov    0x20(%rcx),%r12
         :            class __shared_ptr
    0.00 :   5acf73:       mov    %rax,0x18(%rcx)
         :            if (__tmp != _M_pi)
    0.00 :   5acf77:       cmp    %r12,%r13
    0.00 :   5acf7a:       je     5acfcc <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x60c>
         :            if (__tmp != 0)
    0.00 :   5acf7c:       test   %r13,%r13
    0.00 :   5acf7f:       je     5acf99 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5d9>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5acf81:       cmpq   $0x0,0x67af7f(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5acf89:       je     5ad7b0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdf0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5acf8f:       lock addl $0x1,0x8(%r13)
    0.00 :   5acf95:       mov    0x20(%rcx),%r12
         :            if (_M_pi != 0)
    0.00 :   5acf99:       test   %r12,%r12
    0.00 :   5acf9c:       je     5acfc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x603>
         :            if (__gthread_active_p())
    0.00 :   5acf9e:       mov    0x67af63(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5acfa5:       test   %r15,%r15
    0.00 :   5acfa8:       je     5ad840 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe80>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5acfae:       mov    $0xffffffff,%eax
    0.00 :   5acfb3:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5acfba:       cmp    $0x1,%eax
    0.00 :   5acfbd:       je     5ad858 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe98>
         :            _M_pi = __tmp;
    0.00 :   5acfc3:       mov    0x10(%rsp),%rax
    0.00 :   5acfc8:       mov    %r13,0x20(%rax)
    0.00 :   5acfcc:       sub    $0x8,%rsp
    0.00 :   5acfd0:       mov    %rbx,%rcx
    0.00 :   5acfd3:       mov    %rbp,%rsi
    0.00 :   5acfd6:       pushq  0x10(%rsp)
    0.00 :   5acfda:       mov    0x48(%rsp),%r9
    0.00 :   5acfdf:       mov    0x50(%rsp),%r8
    0.00 :   5acfe4:       mov    0x20(%rsp),%rdx
    0.00 :   5acfe9:       mov    0x28(%rsp),%rdi
    0.00 :   5acfee:       callq  5a8bd0 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)>
    0.00 :   5acff3:       pop    %rax
    0.00 :   5acff4:       pop    %rdx
    0.00 :   5acff5:       mov    0x328(%rsp),%rcx
    0.00 :   5acffd:       xor    %fs:0x28,%rcx
    0.00 :   5ad006:       mov    0x18(%rsp),%rax
    0.00 :   5ad00b:       jne    5adc12 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1252>
    0.00 :   5ad011:       add    $0x338,%rsp
    0.00 :   5ad018:       pop    %rbx
    0.00 :   5ad019:       pop    %rbp
    0.00 :   5ad01a:       pop    %r12
    0.00 :   5ad01c:       pop    %r13
    0.00 :   5ad01e:       pop    %r14
    0.00 :   5ad020:       pop    %r15
    0.00 :   5ad022:       retq
    0.00 :   5ad023:       nopl   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5ad028:       mov    (%rsp),%rdi
    0.00 :   5ad02c:       sub    %rcx,%r8
    0.00 :   5ad02f:       xor    %edx,%edx
    0.00 :   5ad031:       xor    %esi,%esi
    0.00 :   5ad033:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   5ad038:       jmpq   5acc6d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2ad>
    0.00 :   5ad03d:       nopl   (%rax)
         :            __out.setstate(ios_base::badbit);
    0.00 :   5ad040:       mov    0x130(%rsp),%rax
    0.00 :   5ad048:       mov    -0x18(%rax),%rdi
    0.00 :   5ad04c:       add    %r15,%rdi
         :            operator&(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
         :
         :            inline _GLIBCXX_CONSTEXPR _Ios_Iostate
         :            operator|(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
    0.00 :   5ad04f:       mov    0x20(%rdi),%esi
    0.00 :   5ad052:       or     $0x1,%esi
         :            { this->clear(this->rdstate() | __state); }
    0.00 :   5ad055:       callq  53b90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   5ad05a:       jmpq   5acc08 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x248>
    0.00 :   5ad05f:       nop
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5ad060:       lea    0x130(%rsp),%r15
    0.00 :   5ad068:       lea    0x70(%r15),%rdi
    0.00 :   5ad06c:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5ad071:       mov    0x67aab0(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5ad078:       xor    %esi,%esi
    0.00 :   5ad07a:       movq   $0x0,0x278(%rsp)
    0.00 :   5ad086:       mov    %si,0x280(%rsp)
         :            { this->init(0); }
    0.00 :   5ad08e:       xor    %esi,%esi
    0.00 :   5ad090:       mov    %rax,0x20(%rsp)
    0.00 :   5ad095:       add    $0x10,%rax
    0.00 :   5ad099:       mov    %rax,0x1a0(%rsp)
    0.00 :   5ad0a1:       mov    0x67acf8(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5ad0a8:       movq   $0x0,0x288(%rsp)
    0.00 :   5ad0b4:       movq   $0x0,0x290(%rsp)
    0.00 :   5ad0c0:       mov    0x8(%rax),%rcx
    0.00 :   5ad0c4:       movq   $0x0,0x298(%rsp)
    0.00 :   5ad0d0:       mov    0x10(%rax),%rax
    0.00 :   5ad0d4:       mov    -0x18(%rcx),%rdi
    0.00 :   5ad0d8:       mov    %rcx,0x130(%rsp)
    0.00 :   5ad0e0:       movq   $0x0,0x2a0(%rsp)
    0.00 :   5ad0ec:       add    %r15,%rdi
    0.00 :   5ad0ef:       mov    %rcx,0x68(%rsp)
    0.00 :   5ad0f4:       mov    %rax,(%rdi)
    0.00 :   5ad0f7:       mov    %rax,0x70(%rsp)
    0.00 :   5ad0fc:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5ad101:       mov    0x67ac58(%rip),%rbx        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   5ad108:       lea    0x40(%r15),%rdi
    0.00 :   5ad10c:       movq   $0x0,0x140(%rsp)
    0.00 :   5ad118:       movq   $0x0,0x148(%rsp)
    0.00 :   5ad124:       movq   $0x0,0x150(%rsp)
    0.00 :   5ad130:       lea    0x18(%rbx),%rax
    0.00 :   5ad134:       mov    %rax,0x130(%rsp)
    0.00 :   5ad13c:       lea    0x40(%rbx),%rax
    0.00 :   5ad140:       mov    %rax,0x1a0(%rsp)
    0.00 :   5ad148:       mov    0x67ab11(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5ad14f:       movq   $0x0,0x158(%rsp)
    0.00 :   5ad15b:       mov    %rax,0x30(%rsp)
    0.00 :   5ad160:       add    $0x10,%rax
    0.00 :   5ad164:       mov    %rax,0x138(%rsp)
    0.00 :   5ad16c:       movq   $0x0,0x160(%rsp)
    0.00 :   5ad178:       movq   $0x0,0x168(%rsp)
    0.00 :   5ad184:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ad189:       mov    0x67ae48(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ad190:       lea    0x8(%r15),%rsi
    0.00 :   5ad194:       lea    0x70(%r15),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ad198:       movl   $0x10,0x178(%rsp)
    0.00 :   5ad1a3:       mov    %rax,0x28(%rsp)
    0.00 :   5ad1a8:       add    $0x10,%rax
    0.00 :   5ad1ac:       mov    %rax,0x138(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad1b4:       lea    0x60(%r15),%rax
    0.00 :   5ad1b8:       mov    %rax,0x180(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5ad1c0:       movq   $0x0,0x188(%rsp)
    0.00 :   5ad1cc:       movb   $0x0,0x190(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ad1d4:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5ad1d9:       mov    $0x2c,%edx
    0.00 :   5ad1de:       lea    0x2e2ad3(%rip),%rsi        # 88fcb8 <std::piecewise_construct+0x3db>
    0.00 :   5ad1e5:       mov    %r15,%rdi
    0.00 :   5ad1e8:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ad1ed:       mov    %r12,%rsi
    0.00 :   5ad1f0:       mov    %r15,%rdi
    0.00 :   5ad1f3:       callq  5f25f0 <onnxruntime::operator<<(std::ostream&, onnxruntime::TensorShape const&)>
    0.00 :   5ad1f8:       mov    $0x4,%edx
    0.00 :   5ad1fd:       lea    0x2ae859(%rip),%rsi        # 85ba5d <typeinfo name for onnxruntime::MaxUnpool+0x1cd>
    0.00 :   5ad204:       mov    %r15,%rdi
    0.00 :   5ad207:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ad20c:       mov    0x8(%rsp),%rsi
    0.00 :   5ad211:       mov    %r15,%rdi
    0.00 :   5ad214:       callq  5f25f0 <onnxruntime::operator<<(std::ostream&, onnxruntime::TensorShape const&)>
    0.00 :   5ad219:       mov    %r15,%rdi
    0.00 :   5ad21c:       mov    $0x9b,%edx
    0.00 :   5ad221:       lea    0x2e2ac0(%rip),%rsi        # 88fce8 <std::piecewise_construct+0x40b>
    0.00 :   5ad228:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad22d:       lea    0xb0(%rsp),%rdi
         :            { _M_string_length = __length; }
    0.00 :   5ad235:       movq   $0x0,0xb8(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad241:       lea    0x10(%rdi),%rax
    0.00 :   5ad245:       mov    %rdi,0x60(%rsp)
    0.00 :   5ad24a:       mov    %rax,0xb0(%rsp)
         :            if (this->pptr())
    0.00 :   5ad252:       mov    0x160(%rsp),%rax
    0.00 :   5ad25a:       movb   $0x0,0xc0(%rsp)
    0.00 :   5ad262:       test   %rax,%rax
    0.00 :   5ad265:       je     5ad9e0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1020>
         :            if (this->pptr() > this->egptr())
    0.00 :   5ad26b:       mov    0x150(%rsp),%r8
    0.00 :   5ad273:       mov    0x158(%rsp),%rcx
    0.00 :   5ad27b:       cmp    %r8,%rax
    0.00 :   5ad27e:       jbe    5ad798 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdd8>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5ad284:       sub    %rcx,%rax
    0.00 :   5ad287:       xor    %edx,%edx
    0.00 :   5ad289:       xor    %esi,%esi
    0.00 :   5ad28b:       mov    %rax,%r8
    0.00 :   5ad28e:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   5ad293:       lea    0x18(%rbx),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad297:       mov    0x180(%rsp),%rdi
    0.00 :   5ad29f:       mov    %rax,0x130(%rsp)
    0.00 :   5ad2a7:       lea    0x40(%rbx),%rax
    0.00 :   5ad2ab:       mov    %rax,0x1a0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5ad2b3:       mov    0x28(%rsp),%rax
    0.00 :   5ad2b8:       add    $0x10,%rax
    0.00 :   5ad2bc:       mov    %rax,0x138(%rsp)
         :            if (!_M_is_local())
    0.00 :   5ad2c4:       lea    0x60(%r15),%rax
    0.00 :   5ad2c8:       cmp    %rax,%rdi
    0.00 :   5ad2cb:       je     5ad2d2 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x912>
    0.00 :   5ad2cd:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5ad2d2:       mov    0x30(%rsp),%rax
    0.00 :   5ad2d7:       lea    0x40(%r15),%rdi
    0.00 :   5ad2db:       add    $0x10,%rax
    0.00 :   5ad2df:       mov    %rax,0x138(%rsp)
    0.00 :   5ad2e7:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5ad2ec:       mov    0x68(%rsp),%rax
    0.00 :   5ad2f1:       mov    0x70(%rsp),%rcx
         :            ~basic_ios() { }
    0.00 :   5ad2f6:       lea    0x70(%r15),%rdi
    0.00 :   5ad2fa:       mov    %rax,0x130(%rsp)
    0.00 :   5ad302:       mov    -0x18(%rax),%rax
    0.00 :   5ad306:       mov    %rcx,0x130(%rsp,%rax,1)
    0.00 :   5ad30e:       mov    0x20(%rsp),%rax
    0.00 :   5ad313:       add    $0x10,%rax
    0.00 :   5ad317:       mov    %rax,0x1a0(%rsp)
    0.00 :   5ad31f:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5ad324:       cmp    (%rsp),%r13
    0.00 :   5ad328:       jl     5ad7c0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe00>
    0.00 :   5ad32e:       mov    0x48(%rbp),%rax
    0.00 :   5ad332:       mov    0x210(%rax),%rax
    0.00 :   5ad339:       cmpl   $0x2,0x28(%rax)
    0.00 :   5ad33d:       jg     5ad745 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd85>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad343:       lea    0xd0(%rsp),%rcx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad34b:       lea    0x2e2725(%rip),%rdx        # 88fa77 <std::piecewise_construct+0x19a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad352:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad356:       lea    -0x3f(%rdx),%rsi
    0.00 :   5ad35a:       mov    %rcx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad35d:       mov    %rcx,%r13
    0.00 :   5ad360:       mov    %rcx,(%rsp)
    0.00 :   5ad364:       mov    %rax,0xd0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad36c:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ad371:       lea    0x2e308e(%rip),%rdx        # 890406 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)::__FUNCTION__+0x26>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad378:       lea    0x38(%r13),%rax
    0.00 :   5ad37c:       movl   $0x1c4,0xf0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad387:       lea    0x28(%r13),%rdi
    0.00 :   5ad38b:       lea    -0x26(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ad38f:       mov    %rax,0xf8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad397:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ad39c:       mov    0x48(%rbp),%rdx
    0.00 :   5ad3a0:       lea    0x67b901(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
    0.00 :   5ad3a7:       lea    0x20(%r15),%rdi
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ad3ab:       movq   $0x0,0x118(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad3b7:       mov    0xd0(%rsp),%rsi
    0.00 :   5ad3bf:       movq   $0x0,0x120(%rsp)
    0.00 :   5ad3cb:       mov    0x210(%rdx),%rdx
    0.00 :   5ad3d2:       mov    (%rax),%rax
    0.00 :   5ad3d5:       movq   $0x0,0x128(%rsp)
    0.00 :   5ad3e1:       movl   $0x2,0x138(%rsp)
    0.00 :   5ad3ec:       mov    %rdx,0x130(%rsp)
    0.00 :   5ad3f4:       mov    0xd8(%rsp),%rdx
    0.00 :   5ad3fc:       mov    %rax,0x140(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad404:       lea    0x30(%r15),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad408:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad40b:       mov    %rax,0x150(%rsp)
    0.00 :   5ad413:       movl   $0x0,0x148(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad41e:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ad423:       mov    0xf0(%rsp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad42a:       mov    0xf8(%rsp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad432:       lea    0x48(%r15),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad436:       mov    0x100(%rsp),%rdx
    0.00 :   5ad43e:       mov    %eax,0x170(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad445:       lea    0x58(%r15),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad449:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad44c:       mov    %rax,0x178(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad454:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ad459:       mov    0x120(%rsp),%rax
    0.00 :   5ad461:       mov    0x118(%rsp),%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ad469:       movq   $0x0,0x198(%rsp)
    0.00 :   5ad475:       movq   $0x0,0x1a0(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ad481:       mov    %rax,%r13
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ad484:       mov    %rax,0x58(%rsp)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ad489:       movq   $0x0,0x1a8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ad495:       sub    %r12,%r13
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5ad498:       mov    %r13,%rax
    0.00 :   5ad49b:       sar    $0x5,%rax
    0.00 :   5ad49f:       je     5ad9c8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1008>
         :            if (__n > this->max_size())
    0.00 :   5ad4a5:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5ad4af:       cmp    %rdx,%rax
    0.00 :   5ad4b2:       ja     5adc21 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1261>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5ad4b8:       mov    %r13,%rdi
    0.00 :   5ad4bb:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5ad4c0:       mov    %rax,0x78(%rsp)
    0.00 :   5ad4c5:       mov    0x120(%rsp),%rax
    0.00 :   5ad4cd:       mov    0x118(%rsp),%r12
    0.00 :   5ad4d5:       mov    %rax,0x58(%rsp)
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ad4da:       mov    0x78(%rsp),%rax
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ad4df:       add    %rax,%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ad4e2:       mov    %rax,0x198(%rsp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5ad4ea:       mov    %rax,0x1a0(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ad4f2:       mov    %r13,0x1a8(%rsp)
    0.00 :   5ad4fa:       cmp    0x58(%rsp),%r12
    0.00 :   5ad4ff:       je     5ada9b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10db>
         :            _ForwardIterator __cur = __result;
    0.00 :   5ad505:       mov    %rax,%r13
    0.00 :   5ad508:       nopl   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad510:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad514:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad517:       mov    %rax,0x0(%r13)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad51b:       mov    (%r12),%rsi
    0.00 :   5ad51f:       mov    0x8(%r12),%rdx
    0.00 :   5ad524:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad527:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5ad52c:       add    $0x20,%r13
    0.00 :   5ad530:       add    $0x20,%r12
    0.00 :   5ad534:       cmp    %r12,0x58(%rsp)
    0.00 :   5ad539:       jne    5ad510 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb50>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5ad53b:       lea    0xf0(%r15),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   5ad542:       mov    %r13,0x1a0(%rsp)
    0.00 :   5ad54a:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5ad54f:       mov    0x20(%rsp),%rax
    0.00 :   5ad554:       xor    %ecx,%ecx
         :            { this->init(0); }
    0.00 :   5ad556:       xor    %esi,%esi
    0.00 :   5ad558:       mov    %cx,0x300(%rsp)
    0.00 :   5ad560:       movq   $0x0,0x2f8(%rsp)
    0.00 :   5ad56c:       add    $0x10,%rax
    0.00 :   5ad570:       mov    %rax,0x220(%rsp)
    0.00 :   5ad578:       mov    0x68(%rsp),%rax
    0.00 :   5ad57d:       movq   $0x0,0x308(%rsp)
    0.00 :   5ad589:       mov    %rax,0x1b0(%rsp)
    0.00 :   5ad591:       mov    -0x18(%rax),%rax
    0.00 :   5ad595:       movq   $0x0,0x310(%rsp)
    0.00 :   5ad5a1:       lea    0x80(%r15,%rax,1),%rdi
    0.00 :   5ad5a9:       mov    0x70(%rsp),%rax
    0.00 :   5ad5ae:       movq   $0x0,0x318(%rsp)
    0.00 :   5ad5ba:       movq   $0x0,0x320(%rsp)
    0.00 :   5ad5c6:       mov    %rax,(%rdi)
    0.00 :   5ad5c9:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5ad5ce:       lea    0x18(%rbx),%rax
         :            _M_buf_locale(locale())
    0.00 :   5ad5d2:       lea    0xc0(%r15),%rdi
    0.00 :   5ad5d9:       movq   $0x0,0x1c0(%rsp)
    0.00 :   5ad5e5:       mov    %rax,0x1b0(%rsp)
    0.00 :   5ad5ed:       lea    0x40(%rbx),%rax
    0.00 :   5ad5f1:       mov    %rax,0x220(%rsp)
    0.00 :   5ad5f9:       mov    0x30(%rsp),%rax
    0.00 :   5ad5fe:       movq   $0x0,0x1c8(%rsp)
    0.00 :   5ad60a:       movq   $0x0,0x1d0(%rsp)
    0.00 :   5ad616:       add    $0x10,%rax
    0.00 :   5ad61a:       mov    %rax,0x1b8(%rsp)
    0.00 :   5ad622:       movq   $0x0,0x1d8(%rsp)
    0.00 :   5ad62e:       movq   $0x0,0x1e0(%rsp)
    0.00 :   5ad63a:       movq   $0x0,0x1e8(%rsp)
    0.00 :   5ad646:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ad64b:       mov    0x28(%rsp),%rax
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ad650:       lea    0x88(%r15),%rsi
    0.00 :   5ad657:       lea    0xf0(%r15),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ad65e:       movl   $0x10,0x1f8(%rsp)
    0.00 :   5ad669:       add    $0x10,%rax
    0.00 :   5ad66d:       movb   $0x0,0x210(%rsp)
    0.00 :   5ad675:       mov    %rax,0x1b8(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad67d:       lea    0xe0(%r15),%rax
    0.00 :   5ad684:       mov    %rax,0x200(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5ad68c:       movq   $0x0,0x208(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ad698:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   5ad69d:       mov    0xb8(%rsp),%rdx
    0.00 :   5ad6a5:       mov    0xb0(%rsp),%rsi
    0.00 :   5ad6ad:       lea    0x80(%r15),%rdi
    0.00 :   5ad6b4:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ad6b9:       mov    %r15,%rdi
    0.00 :   5ad6bc:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5ad6c1:       mov    0x120(%rsp),%rbx
    0.00 :   5ad6c9:       mov    0x118(%rsp),%r12
    0.00 :   5ad6d1:       cmp    %r12,%rbx
    0.00 :   5ad6d4:       je     5ad704 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd44>
    0.00 :   5ad6d6:       nopw   %cs:0x0(%rax,%rax,1)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad6e0:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad6e4:       lea    0x10(%r12),%rax
    0.00 :   5ad6e9:       cmp    %rax,%rdi
    0.00 :   5ad6ec:       je     5ad6f3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd33>
         :            ::operator delete(__p);
    0.00 :   5ad6ee:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad6f3:       add    $0x20,%r12
    0.00 :   5ad6f7:       cmp    %r12,%rbx
    0.00 :   5ad6fa:       jne    5ad6e0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd20>
    0.00 :   5ad6fc:       mov    0x118(%rsp),%r12
         :            if (__p)
    0.00 :   5ad704:       test   %r12,%r12
    0.00 :   5ad707:       je     5ad711 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd51>
    0.00 :   5ad709:       mov    %r12,%rdi
    0.00 :   5ad70c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad711:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad715:       mov    0xf8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad71d:       add    $0x38,%rax
    0.00 :   5ad721:       cmp    %rax,%rdi
    0.00 :   5ad724:       je     5ad72b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd6b>
    0.00 :   5ad726:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad72b:       mov    (%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad72f:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad737:       add    $0x10,%rax
    0.00 :   5ad73b:       cmp    %rax,%rdi
    0.00 :   5ad73e:       je     5ad745 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd85>
    0.00 :   5ad740:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad745:       mov    0x60(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad74a:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad752:       add    $0x10,%rax
    0.00 :   5ad756:       cmp    %rax,%rdi
    0.00 :   5ad759:       je     5acf46 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x586>
    0.00 :   5ad75f:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   5ad764:       jmpq   5acf46 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x586>
    0.00 :   5ad769:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5ad770:       xor    %r13d,%r13d
    0.00 :   5ad773:       jmpq   5acdc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x403>
    0.00 :   5ad778:       nopl   0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   5ad780:       mov    (%rsp),%rdi
    0.00 :   5ad784:       lea    0x50(%r15),%rsi
    0.00 :   5ad788:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5ad78d:       jmpq   5acc6d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2ad>
    0.00 :   5ad792:       nopw   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5ad798:       mov    0x60(%rsp),%rdi
    0.00 :   5ad79d:       sub    %rcx,%r8
    0.00 :   5ad7a0:       xor    %edx,%edx
    0.00 :   5ad7a2:       xor    %esi,%esi
    0.00 :   5ad7a4:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   5ad7a9:       jmpq   5ad293 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8d3>
    0.00 :   5ad7ae:       xchg   %ax,%ax
         :            { *__mem += __val; }
    0.00 :   5ad7b0:       addl   $0x1,0x8(%r13)
    0.00 :   5ad7b5:       jmpq   5acf99 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5d9>
    0.00 :   5ad7ba:       nopw   0x0(%rax,%rax,1)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad7c0:       mov    0xb0(%rsp),%rsi
    0.00 :   5ad7c8:       mov    0xb8(%rsp),%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad7d0:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad7d4:       mov    %r15,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ad7d7:       mov    %rax,0x130(%rsp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ad7df:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ad7e2:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ad7e7:       mov    0x18(%rsp),%rdi
    0.00 :   5ad7ec:       mov    %r15,%rcx
    0.00 :   5ad7ef:       mov    $0x1,%edx
    0.00 :   5ad7f4:       mov    $0x2,%esi
    0.00 :   5ad7f9:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad7fe:       mov    0x130(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad806:       lea    0x10(%r15),%rax
    0.00 :   5ad80a:       cmp    %rax,%rdi
    0.00 :   5ad80d:       je     5ad814 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe54>
         :            ::operator delete(__p);
    0.00 :   5ad80f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ad814:       mov    0x60(%rsp),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ad819:       mov    0xb0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ad821:       add    $0x10,%rax
    0.00 :   5ad825:       cmp    %rax,%rdi
    0.00 :   5ad828:       je     5acff5 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x635>
    0.00 :   5ad82e:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   5ad833:       jmpq   5acff5 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x635>
    0.00 :   5ad838:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ad840:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ad845:       lea    -0x1(%rax),%edx
    0.00 :   5ad848:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5ad84d:       jmpq   5acfba <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5fa>
    0.00 :   5ad852:       nopw   0x0(%rax,%rax,1)
         :            _M_dispose();
    0.00 :   5ad858:       mov    (%r12),%rax
    0.00 :   5ad85c:       mov    %r12,%rdi
    0.00 :   5ad85f:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ad862:       test   %r15,%r15
    0.00 :   5ad865:       je     5ad9f8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1038>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad86b:       mov    $0xffffffff,%eax
    0.00 :   5ad870:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ad877:       cmp    $0x1,%eax
    0.00 :   5ad87a:       jne    5acfc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x603>
         :            _M_destroy();
    0.00 :   5ad880:       mov    (%r12),%rax
    0.00 :   5ad884:       mov    %r12,%rdi
    0.00 :   5ad887:       callq  *0x18(%rax)
    0.00 :   5ad88a:       jmpq   5acfc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x603>
    0.00 :   5ad88f:       nop
    0.00 :   5ad890:       mov    0x38(%rsp),%rdx
    0.00 :   5ad895:       mov    %rbp,%rsi
    0.00 :   5ad898:       lea    0x90(%rsp),%rdi
    0.00 :   5ad8a0:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    0.00 :   5ad8a5:       mov    0x90(%rsp),%rsi
    0.00 :   5ad8ad:       mov    (%rsi),%rax
    0.00 :   5ad8b0:       mov    0x20(%rax),%rax
    0.00 :   5ad8b4:       cmp    0x67a245(%rip),%rax        # c27b00 <.got+0x40>
    0.00 :   5ad8bb:       jne    5ada88 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10c8>
         :            #if __cplusplus > 201402L
         :            using weak_type = __weak_ptr<_Tp, _Lp>;
         :            #endif
         :
         :            constexpr __shared_ptr() noexcept
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5ad8c1:       movq   $0x0,0x80(%rsp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5ad8cd:       movq   $0x0,0x88(%rsp)
         :            if (_M_pi != nullptr)
    0.00 :   5ad8d9:       mov    0x98(%rsp),%r12
    0.00 :   5ad8e1:       test   %r12,%r12
    0.00 :   5ad8e4:       je     5ad90b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf4b>
         :            if (__gthread_active_p())
    0.00 :   5ad8e6:       mov    0x67a61b(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ad8ed:       test   %r15,%r15
    0.00 :   5ad8f0:       je     5ada6b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10ab>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad8f6:       mov    $0xffffffff,%eax
    0.00 :   5ad8fb:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ad902:       cmp    $0x1,%eax
    0.00 :   5ad905:       je     5adadc <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x111c>
         :            : _M_pi(__r._M_pi)
    0.00 :   5ad90b:       mov    0x88(%rsp),%r12
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5ad913:       mov    0x80(%rsp),%rax
         :            if (_M_pi != 0)
    0.00 :   5ad91b:       test   %r12,%r12
    0.00 :   5ad91e:       je     5ada20 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1060>
         :            if (__gthread_active_p())
    0.00 :   5ad924:       mov    0x67a5dd(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   5ad92b:       lea    0x8(%r12),%r13
    0.00 :   5ad930:       test   %r15,%r15
    0.00 :   5ad933:       je     5ada10 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1050>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad939:       lock addl $0x1,0x0(%r13)
         :            if (__tmp != _M_pi)
    0.00 :   5ad93f:       mov    0x20(%r14),%rdi
         :            class __shared_ptr
    0.00 :   5ad943:       mov    %rax,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5ad947:       cmp    %r12,%rdi
    0.00 :   5ad94a:       je     5ad96c <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfac>
         :            if (__gthread_active_p())
    0.00 :   5ad94c:       test   %r15,%r15
    0.00 :   5ad94f:       je     5ada7d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10bd>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad955:       lock addl $0x1,0x0(%r13)
    0.00 :   5ad95b:       mov    0x20(%r14),%rdi
         :            if (_M_pi != 0)
    0.00 :   5ad95f:       test   %rdi,%rdi
    0.00 :   5ad962:       jne    5adc17 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1257>
         :            _M_pi = __tmp;
    0.00 :   5ad968:       mov    %r12,0x20(%r14)
         :            if (__gthread_active_p())
    0.00 :   5ad96c:       test   %r15,%r15
    0.00 :   5ad96f:       je     5ada59 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1099>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad975:       mov    $0xffffffff,%eax
    0.00 :   5ad97a:       lock xadd %eax,0x0(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ad980:       cmp    $0x1,%eax
    0.00 :   5ad983:       je     5adb0f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x114f>
    0.00 :   5ad989:       mov    0x88(%rsp),%r12
         :            if (_M_pi != nullptr)
    0.00 :   5ad991:       test   %r12,%r12
    0.00 :   5ad994:       je     5ad9bb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xffb>
         :            if (__gthread_active_p())
    0.00 :   5ad996:       mov    0x67a56b(%rip),%r15        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ad99d:       test   %r15,%r15
    0.00 :   5ad9a0:       je     5ada47 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1087>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ad9a6:       mov    $0xffffffff,%eax
    0.00 :   5ad9ab:       lock xadd %eax,0x8(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ad9b2:       cmp    $0x1,%eax
    0.00 :   5ad9b5:       je     5adaa5 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10e5>
    0.00 :   5ad9bb:       mov    0x18(%r14),%rax
    0.00 :   5ad9bf:       jmpq   5acf66 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x5a6>
    0.00 :   5ad9c4:       nopl   0x0(%rax)
    0.00 :   5ad9c8:       movq   $0x0,0x78(%rsp)
    0.00 :   5ad9d1:       jmpq   5ad4da <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb1a>
    0.00 :   5ad9d6:       nopw   %cs:0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   5ad9e0:       mov    0x60(%rsp),%rdi
    0.00 :   5ad9e5:       lea    0x50(%r15),%rsi
    0.00 :   5ad9e9:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5ad9ee:       jmpq   5ad293 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8d3>
    0.00 :   5ad9f3:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ad9f8:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ad9fd:       lea    -0x1(%rax),%edx
    0.00 :   5ada00:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5ada05:       jmpq   5ad877 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xeb7>
    0.00 :   5ada0a:       nopw   0x0(%rax,%rax,1)
         :            { *__mem += __val; }
    0.00 :   5ada10:       addl   $0x1,0x8(%r12)
    0.00 :   5ada16:       jmpq   5ad93f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf7f>
    0.00 :   5ada1b:       nopl   0x0(%rax,%rax,1)
         :            if (__tmp != _M_pi)
    0.00 :   5ada20:       mov    0x20(%r14),%rdi
         :            class __shared_ptr
    0.00 :   5ada24:       mov    %rax,0x18(%r14)
         :            if (__tmp != _M_pi)
    0.00 :   5ada28:       test   %rdi,%rdi
    0.00 :   5ada2b:       je     5ad9bb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xffb>
         :            _M_pi->_M_release();
    0.00 :   5ada2d:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            _M_pi = __tmp;
    0.00 :   5ada32:       movq   $0x0,0x20(%r14)
         :            ~__shared_count() noexcept
    0.00 :   5ada3a:       mov    0x88(%rsp),%r12
    0.00 :   5ada42:       jmpq   5ad991 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfd1>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ada47:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ada4c:       lea    -0x1(%rax),%edx
    0.00 :   5ada4f:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5ada54:       jmpq   5ad9b2 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xff2>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ada59:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ada5e:       lea    -0x1(%rax),%edx
    0.00 :   5ada61:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5ada66:       jmpq   5ad980 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfc0>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ada6b:       mov    0x8(%r12),%eax
         :            *__mem += __val;
    0.00 :   5ada70:       lea    -0x1(%rax),%edx
    0.00 :   5ada73:       mov    %edx,0x8(%r12)
         :            return __result;
    0.00 :   5ada78:       jmpq   5ad902 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf42>
         :            { *__mem += __val; }
    0.00 :   5ada7d:       addl   $0x1,0x8(%r12)
    0.00 :   5ada83:       jmpq   5ad95f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf9f>
    0.00 :   5ada88:       lea    0x80(%rsp),%rdi
    0.00 :   5ada90:       mov    0x48(%rbp),%rdx
    0.00 :   5ada94:       callq  *%rax
    0.00 :   5ada96:       jmpq   5ad8d9 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf19>
         :            _ForwardIterator __cur = __result;
    0.00 :   5ada9b:       mov    0x78(%rsp),%r13
    0.00 :   5adaa0:       jmpq   5ad53b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb7b>
         :            _M_dispose();
    0.00 :   5adaa5:       mov    (%r12),%rax
    0.00 :   5adaa9:       mov    %r12,%rdi
    0.00 :   5adaac:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5adaaf:       test   %r15,%r15
    0.00 :   5adab2:       je     5adb42 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1182>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5adab8:       mov    $0xffffffff,%eax
    0.00 :   5adabd:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5adac4:       cmp    $0x1,%eax
    0.00 :   5adac7:       jne    5ad9bb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xffb>
         :            _M_destroy();
    0.00 :   5adacd:       mov    (%r12),%rax
    0.00 :   5adad1:       mov    %r12,%rdi
    0.00 :   5adad4:       callq  *0x18(%rax)
    0.00 :   5adad7:       jmpq   5ad9bb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xffb>
         :            _M_dispose();
    0.00 :   5adadc:       mov    (%r12),%rax
    0.00 :   5adae0:       mov    %r12,%rdi
    0.00 :   5adae3:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5adae6:       test   %r15,%r15
    0.00 :   5adae9:       je     5adb54 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1194>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5adaeb:       mov    $0xffffffff,%eax
    0.00 :   5adaf0:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5adaf7:       cmp    $0x1,%eax
    0.00 :   5adafa:       jne    5ad90b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf4b>
         :            _M_destroy();
    0.00 :   5adb00:       mov    (%r12),%rax
    0.00 :   5adb04:       mov    %r12,%rdi
    0.00 :   5adb07:       callq  *0x18(%rax)
    0.00 :   5adb0a:       jmpq   5ad90b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xf4b>
         :            _M_dispose();
    0.00 :   5adb0f:       mov    (%r12),%rax
    0.00 :   5adb13:       mov    %r12,%rdi
    0.00 :   5adb16:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5adb19:       test   %r15,%r15
    0.00 :   5adb1c:       je     5adb63 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x11a3>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5adb1e:       mov    $0xffffffff,%eax
    0.00 :   5adb23:       lock xadd %eax,0xc(%r12)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5adb2a:       cmp    $0x1,%eax
    0.00 :   5adb2d:       jne    5ad989 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfc9>
         :            _M_destroy();
    0.00 :   5adb33:       mov    (%r12),%rax
    0.00 :   5adb37:       mov    %r12,%rdi
    0.00 :   5adb3a:       callq  *0x18(%rax)
    0.00 :   5adb3d:       jmpq   5ad989 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfc9>
         :            _Atomic_word __result = *__mem;
    0.00 :   5adb42:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5adb47:       lea    -0x1(%rax),%edx
    0.00 :   5adb4a:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5adb4f:       jmpq   5adac4 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1104>
         :            _Atomic_word __result = *__mem;
    0.00 :   5adb54:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5adb59:       lea    -0x1(%rax),%edx
    0.00 :   5adb5c:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5adb61:       jmp    5adaf7 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1137>
         :            _Atomic_word __result = *__mem;
    0.00 :   5adb63:       mov    0xc(%r12),%eax
         :            *__mem += __val;
    0.00 :   5adb68:       lea    -0x1(%rax),%edx
    0.00 :   5adb6b:       mov    %edx,0xc(%r12)
         :            return __result;
    0.00 :   5adb70:       jmp    5adb2a <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x116a>
    0.00 :   5adb72:       mov    $0xa0,%edi
    0.00 :   5adb77:       lea    0xd0(%rsp),%rbx
    0.00 :   5adb7f:       lea    0x90(%rsp),%r14
    0.00 :   5adb87:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5adb8c:       mov    %rbx,%rdi
    0.00 :   5adb8f:       mov    %rbx,(%rsp)
    0.00 :   5adb93:       mov    %rax,%rbp
    0.00 :   5adb96:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5adb9b:       mov    %r14,%rdi
    0.00 :   5adb9e:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5adba3:       lea    0x130(%rsp),%r15
    0.00 :   5adbab:       mov    %r14,%r8
    0.00 :   5adbae:       lea    0x2e2c4b(%rip),%rcx        # 890800 <onnxruntime::IExecutionFrame::GetMLValue(int) const::__PRETTY_FUNCTION__>
    0.00 :   5adbb5:       mov    $0x57,%edx
    0.00 :   5adbba:       lea    0x2e1d67(%rip),%rsi        # 88f928 <std::piecewise_construct+0x4b>
    0.00 :   5adbc1:       mov    %r15,%rdi
    0.00 :   5adbc4:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5adbc9:       mov    %rbx,%rcx
    0.00 :   5adbcc:       lea    0x2e1d95(%rip),%rdx        # 88f968 <std::piecewise_construct+0x8b>
    0.00 :   5adbd3:       mov    %r15,%rsi
    0.00 :   5adbd6:       mov    %rbp,%rdi
    0.00 :   5adbd9:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5adbde:       mov    %r15,%rdi
         :            if (!_M_is_local())
    0.00 :   5adbe1:       add    $0x10,%rbx
    0.00 :   5adbe5:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5adbea:       mov    %r14,%rdi
    0.00 :   5adbed:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5adbf2:       mov    0xd0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5adbfa:       cmp    %rbx,%rdi
    0.00 :   5adbfd:       je     b1c5e <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x2e4>
         :            ::operator delete(__p);
    0.00 :   5adc03:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5adc08:       jmpq   b1c5e <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x2e4>
         :            std::__throw_bad_alloc();
    0.00 :   5adc0d:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5adc12:       callq  53460 <__stack_chk_fail@plt>
         :            _M_pi->_M_release();
    0.00 :   5adc17:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
    0.00 :   5adc1c:       jmpq   5ad968 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xfa8>
    0.00 :   5adc21:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5adc26:       mov    %rax,%rbx
    0.00 :   5adc29:       jmpq   b1995 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x1b>
    0.00 :   5adc2e:       mov    %rax,%rbx
    0.00 :   5adc31:       jmpq   b19c3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x49>
    0.00 :   5adc36:       mov    %rax,%rbx
    0.00 :   5adc39:       jmpq   b1a0f <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x95>
    0.00 :   5adc3e:       mov    %rax,%rbx
    0.00 :   5adc41:       jmpq   b19f7 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x7d>
    0.00 :   5adc46:       mov    %rax,%rbx
    0.00 :   5adc49:       jmpq   b1a39 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0xbf>
    0.00 :   5adc4e:       mov    %rax,%rbx
    0.00 :   5adc51:       jmpq   b1a94 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x11a>
    0.00 :   5adc56:       mov    %rax,%rbx
    0.00 :   5adc59:       jmpq   b1aac <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x132>
    0.00 :   5adc5e:       jmpq   b1b00 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x186>
    0.00 :   5adc63:       jmpq   b1b1d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x1a3>
    0.00 :   5adc68:       jmpq   b1b3c <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x1c2>
    0.00 :   5adc6d:       mov    %rax,%rbx
    0.00 :   5adc70:       jmpq   b1a7e <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x104>
    0.00 :   5adc75:       mov    %rax,%rbx
    0.00 :   5adc78:       jmpq   b1ad6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x15c>
    0.00 :   5adc7d:       jmpq   b1b66 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x1ec>
    0.00 :   5adc82:       jmpq   b1b8d <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x213>
    0.00 :   5adc87:       jmpq   b1bac <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x232>
    0.00 :   5adc8c:       mov    %rax,%rbx
    0.00 :   5adc8f:       jmpq   b1bc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x249>
    0.00 :   5adc94:       mov    %rax,%rbx
    0.00 :   5adc97:       jmpq   b19ab <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x31>
    0.00 :   5adc9c:       mov    %rax,%rbx
    0.00 :   5adc9f:       jmpq   b1bf4 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x27a>
    0.00 :   5adca4:       mov    %rax,%rbx
    0.00 :   5adca7:       jmpq   b19d4 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x5a>
    0.00 :   5adcac:       mov    %rax,%rbx
    0.00 :   5adcaf:       jmpq   b19cb <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x51>
    0.00 :   5adcb4:       jmpq   b1c17 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x29d>
    0.00 :   5adcb9:       jmpq   b1c3b <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x2c1>
    0.00 :   5adcbe:       mov    %rax,%rbx
    0.00 :   5adcc1:       jmpq   b1abc <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x142>
    0.00 :   5adcc6:       mov    %rax,%rbx
    0.00 :   5adcc9:       jmpq   b1ab4 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x13a>
    0.00 :   5adcce:       mov    %rax,%rbx
    0.00 :   5adcd1:       jmpq   b1c74 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x2fa>
    0.00 :   5adcd6:       mov    %rax,%rbx
    0.00 :   5adcd9:       jmpq   b1c7c <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x302>
    0.00 :   5adcde:       mov    %rax,%rbx
    0.00 :   5adce1:       jmpq   b1c84 <onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.436]+0x30a>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000028fd20 <onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)>:
         :            _ZZNK11onnxruntime3AddIfE7ComputeEPNS_15OpKernelContextEENUlRNS_15BroadcastHelperEE1_4_FUNES5_():
    0.00 :   28fd20:       sub    $0x78,%rsp
    0.00 :   28fd24:       mov    0x38(%rdi),%rcx
    0.00 :   28fd28:       mov    0x28(%rdi),%r8
    0.00 :   28fd2c:       mov    %fs:0x28,%rax
    0.00 :   28fd35:       mov    %rax,0x68(%rsp)
    0.00 :   28fd3a:       xor    %eax,%eax
    0.00 :   28fd3c:       mov    (%rdi),%rax
    0.00 :   28fd3f:       mov    %rcx,0x50(%rsp)
    0.00 :   28fd44:       mov    0x40(%rdi),%rcx
    0.00 :   28fd48:       mov    0x30(%rax),%rsi
    0.00 :   28fd4c:       mov    0xe0(%rax),%rdx
    0.00 :   28fd53:       mov    %r8,0x38(%rsp)
    0.00 :   28fd58:       add    0x30(%rdi),%rdx
    0.00 :   28fd5c:       lea    (%rsi,%rdx,4),%rsi
    0.00 :   28fd60:       mov    0x88(%rax),%rdx
    0.00 :   28fd67:       mov    0x28(%rax),%rax
    0.00 :   28fd6b:       add    0x20(%rdi),%rdx
    0.00 :   28fd6f:       mov    %rsi,0x48(%rsp)
    0.00 :   28fd74:       lea    0x30(%rsp),%rsi
    0.00 :   28fd79:       lea    (%rax,%rdx,4),%rax
    0.00 :   28fd7d:       mov    0x8(%rdi),%rdx
    0.00 :   28fd81:       mov    %rax,0x30(%rsp)
    0.00 :   28fd86:       mov    0x48(%rdi),%rax
    0.00 :   28fd8a:       lea    0x10(%rsp),%rdi
    0.00 :   28fd8f:       mov    0x18(%rdx),%rdx
    0.00 :   28fd93:       mov    %rax,0x18(%rsp)
    0.00 :   28fd98:       lea    (%rdx,%rcx,4),%rdx
    0.00 :   28fd9c:       mov    %rdx,0x10(%rsp)
    0.00 :   28fda1:       lea    0xf(%rsp),%rdx
    0.00 :   28fda6:       callq  28f040 <void Eigen::internal::call_dense_assignment_loop<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::internal::assign_op<float, float> >(Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> >&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const, Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1> const, 0, Eigen::Stride<0, 0> > const> const&, Eigen::internal::assign_op<float, float> const&)>
    0.00 :   28fdab:       mov    0x68(%rsp),%rax
    0.00 :   28fdb0:       xor    %fs:0x28,%rax
  100.00 :   28fdb9:       jne    28fdc0 <onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)+0xa0>
    0.00 :   28fdbb:       add    $0x78,%rsp
    0.00 :   28fdbf:       retq
    0.00 :   28fdc0:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000058ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>:
         :            _ZN11onnxruntime8BFCArena15ChunkFromHandleEm():
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   58ef00:       movabs $0x6db6db6db6db6db7,%rcx
  100.00 :   58ef0a:       push   %r14
    0.00 :   58ef0c:       push   %r13
    0.00 :   58ef0e:       push   %r12
    0.00 :   58ef10:       push   %rbp
    0.00 :   58ef11:       push   %rbx
    0.00 :   58ef12:       sub    $0xb0,%rsp
    0.00 :   58ef19:       mov    0x500(%rdi),%rdx
    0.00 :   58ef20:       mov    %fs:0x28,%rax
    0.00 :   58ef29:       mov    %rax,0xa8(%rsp)
    0.00 :   58ef31:       xor    %eax,%eax
    0.00 :   58ef33:       mov    0x508(%rdi),%rax
    0.00 :   58ef3a:       sub    %rdx,%rax
    0.00 :   58ef3d:       sar    $0x3,%rax
    0.00 :   58ef41:       imul   %rcx,%rax
    0.00 :   58ef45:       cmp    %rax,%rsi
    0.00 :   58ef48:       jae    58ef80 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)+0x80>
         :            */
         :            reference
         :            operator[](size_type __n) _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   58ef4a:       lea    0x0(,%rsi,8),%rax
    0.00 :   58ef52:       sub    %rsi,%rax
    0.00 :   58ef55:       mov    0xa8(%rsp),%rbx
    0.00 :   58ef5d:       xor    %fs:0x28,%rbx
    0.00 :   58ef66:       lea    (%rdx,%rax,8),%rax
    0.00 :   58ef6a:       jne    58f009 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)+0x109>
    0.00 :   58ef70:       add    $0xb0,%rsp
    0.00 :   58ef77:       pop    %rbx
    0.00 :   58ef78:       pop    %rbp
    0.00 :   58ef79:       pop    %r12
    0.00 :   58ef7b:       pop    %r13
    0.00 :   58ef7d:       pop    %r14
    0.00 :   58ef7f:       retq
    0.00 :   58ef80:       mov    $0xa0,%edi
    0.00 :   58ef85:       lea    0x20(%rsp),%rbx
    0.00 :   58ef8a:       mov    %rsp,%r13
    0.00 :   58ef8d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   58ef92:       mov    %rbx,%rdi
    0.00 :   58ef95:       mov    %rax,%r12
    0.00 :   58ef98:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   58ef9d:       mov    %r13,%rdi
    0.00 :   58efa0:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   58efa5:       lea    0x40(%rsp),%r14
    0.00 :   58efaa:       mov    %r13,%r8
    0.00 :   58efad:       lea    0x2fd46c(%rip),%rcx        # 88c420 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   58efb4:       mov    $0x46,%edx
    0.00 :   58efb9:       lea    0x2fc668(%rip),%rsi        # 88b628 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   58efc0:       mov    %r14,%rdi
    0.00 :   58efc3:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   58efc8:       mov    %rbx,%rcx
    0.00 :   58efcb:       lea    0x2fc690(%rip),%rdx        # 88b662 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0xc2>
    0.00 :   58efd2:       mov    %r14,%rsi
    0.00 :   58efd5:       mov    %r12,%rdi
    0.00 :   58efd8:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   58efdd:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   58efe0:       add    $0x10,%rbx
    0.00 :   58efe4:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   58efe9:       mov    %r13,%rdi
    0.00 :   58efec:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   58eff1:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   58eff6:       cmp    %rbx,%rdi
    0.00 :   58eff9:       je     acd60 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long) [clone .cold.251]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   58efff:       callq  53300 <operator delete(void*)@plt>
    0.00 :   58f004:       jmpq   acd60 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long) [clone .cold.251]>
    0.00 :   58f009:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   58f00e:       mov    %rax,%rbp
    0.00 :   58f011:       jmpq   acd76 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long) [clone .cold.251]+0x16>
    0.00 :   58f016:       mov    %rax,%rbp
    0.00 :   58f019:       jmpq   acd7e <onnxruntime::BFCArena::ChunkFromHandle(unsigned long) [clone .cold.251]+0x1e>
    0.00 :   58f01e:       mov    %rax,%rbp
    0.00 :   58f021:       jmpq   acd86 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long) [clone .cold.251]+0x26>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006a8d20 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)>:
         :            _Z17MlasSgemmScheduleP21MLAS_SGEMM_WORK_BLOCKPN11onnxruntime11concurrency10ThreadPoolE():
    0.00 :   6a8d20:       push   %r14
    0.00 :   6a8d22:       push   %r13
    0.00 :   6a8d24:       mov    %rsi,%r13
    0.00 :   6a8d27:       push   %r12
    0.00 :   6a8d29:       mov    %rdi,%r12
    0.00 :   6a8d2c:       push   %rbp
    0.00 :   6a8d2d:       push   %rbx
    0.00 :   6a8d2e:       mov    0x10(%rdi),%r14
    0.00 :   6a8d32:       mov    0x18(%rdi),%rbp
    0.00 :   6a8d36:       test   %r14,%r14
    0.00 :   6a8d39:       js     6a8e68 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x148>
  100.00 :   6a8d3f:       pxor   %xmm0,%xmm0
    0.00 :   6a8d43:       cvtsi2sd %r14,%xmm0
    0.00 :   6a8d48:       test   %rbp,%rbp
    0.00 :   6a8d4b:       js     6a8e40 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x120>
    0.00 :   6a8d51:       pxor   %xmm1,%xmm1
    0.00 :   6a8d55:       cvtsi2sd %rbp,%xmm1
    0.00 :   6a8d5a:       mov    0x20(%r12),%rax
    0.00 :   6a8d5f:       mulsd  %xmm1,%xmm0
    0.00 :   6a8d63:       test   %rax,%rax
    0.00 :   6a8d66:       js     6a8e20 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x100>
    0.00 :   6a8d6c:       pxor   %xmm1,%xmm1
    0.00 :   6a8d70:       cvtsi2sd %rax,%xmm1
    0.00 :   6a8d75:       lea    0x5821c4(%rip),%rax        # c2af40 <MlasPlatform>
    0.00 :   6a8d7c:       mulsd  %xmm1,%xmm0
    0.00 :   6a8d80:       pxor   %xmm1,%xmm1
    0.00 :   6a8d84:       mov    0x108(%rax),%edx
    0.00 :   6a8d8a:       mov    %edx,%eax
    0.00 :   6a8d8c:       mov    %edx,%ebx
    0.00 :   6a8d8e:       shl    $0x10,%eax
    0.00 :   6a8d91:       cvtsi2sd %rax,%xmm1
    0.00 :   6a8d96:       comisd %xmm0,%xmm1
    0.00 :   6a8d9a:       jbe    6a8dab <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x8b>
    0.00 :   6a8d9c:       mulsd  0x1b624c(%rip),%xmm0        # 85eff0 <typeinfo name for onnxruntime::QLinearConv::Compute(onnxruntime::OpKernelContext*) const::{lambda(long)#1}+0x50>
    0.00 :   6a8da4:       cvttsd2si %xmm0,%edx
    0.00 :   6a8da8:       lea    0x1(%rdx),%ebx
         :            _Z25MlasGetMaximumThreadCountPN11onnxruntime11concurrency10ThreadPoolE():
    0.00 :   6a8dab:       mov    %r13,%rdi
    0.00 :   6a8dae:       callq  69a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>
         :            _Z17MlasSgemmScheduleP21MLAS_SGEMM_WORK_BLOCKPN11onnxruntime11concurrency10ThreadPoolE():
    0.00 :   6a8db3:       cmp    %eax,%ebx
    0.00 :   6a8db5:       cmovle %ebx,%eax
    0.00 :   6a8db8:       mov    %eax,%edx
    0.00 :   6a8dba:       cltq
    0.00 :   6a8dbc:       cmp    %rbp,%r14
    0.00 :   6a8dbf:       jae    6a8e00 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0xe0>
    0.00 :   6a8dc1:       add    $0xf,%rbp
    0.00 :   6a8dc5:       movl   $0x1,(%r12)
    0.00 :   6a8dcd:       shr    $0x4,%rbp
    0.00 :   6a8dd1:       cmp    %rbp,%rax
    0.00 :   6a8dd4:       cmova  %ebp,%edx
    0.00 :   6a8dd7:       mov    %edx,0x4(%r12)
    0.00 :   6a8ddc:       lea    -0x213(%rip),%rdi        # 6a8bd0 <MlasSgemmThreaded(void*, int)>
    0.00 :   6a8de3:       pop    %rbx
    0.00 :   6a8de4:       mov    %r13,%rcx
    0.00 :   6a8de7:       mov    %r12,%rsi
    0.00 :   6a8dea:       pop    %rbp
    0.00 :   6a8deb:       pop    %r12
    0.00 :   6a8ded:       pop    %r13
    0.00 :   6a8def:       pop    %r14
    0.00 :   6a8df1:       jmpq   6e5600 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)>
    0.00 :   6a8df6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   6a8e00:       movl   $0x1,0x4(%r12)
    0.00 :   6a8e09:       cmp    %r14,%rax
    0.00 :   6a8e0c:       cmova  %r14d,%edx
    0.00 :   6a8e10:       mov    %edx,(%r12)
    0.00 :   6a8e14:       jmp    6a8ddc <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0xbc>
    0.00 :   6a8e16:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   6a8e20:       mov    %rax,%rdx
    0.00 :   6a8e23:       and    $0x1,%eax
    0.00 :   6a8e26:       pxor   %xmm1,%xmm1
    0.00 :   6a8e2a:       shr    %rdx
    0.00 :   6a8e2d:       or     %rax,%rdx
    0.00 :   6a8e30:       cvtsi2sd %rdx,%xmm1
    0.00 :   6a8e35:       addsd  %xmm1,%xmm1
    0.00 :   6a8e39:       jmpq   6a8d75 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x55>
    0.00 :   6a8e3e:       xchg   %ax,%ax
    0.00 :   6a8e40:       mov    %rbp,%rax
    0.00 :   6a8e43:       mov    %rbp,%rdx
    0.00 :   6a8e46:       pxor   %xmm1,%xmm1
    0.00 :   6a8e4a:       shr    %rax
    0.00 :   6a8e4d:       and    $0x1,%edx
    0.00 :   6a8e50:       or     %rdx,%rax
    0.00 :   6a8e53:       cvtsi2sd %rax,%xmm1
    0.00 :   6a8e58:       addsd  %xmm1,%xmm1
    0.00 :   6a8e5c:       jmpq   6a8d5a <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x3a>
    0.00 :   6a8e61:       nopl   0x0(%rax)
    0.00 :   6a8e68:       mov    %r14,%rax
    0.00 :   6a8e6b:       mov    %r14,%rdx
    0.00 :   6a8e6e:       pxor   %xmm0,%xmm0
    0.00 :   6a8e72:       shr    %rax
    0.00 :   6a8e75:       and    $0x1,%edx
    0.00 :   6a8e78:       or     %rdx,%rax
    0.00 :   6a8e7b:       cvtsi2sd %rax,%xmm0
    0.00 :   6a8e80:       addsd  %xmm0,%xmm0
    0.00 :   6a8e84:       jmpq   6a8d48 <MlasSgemmSchedule(MLAS_SGEMM_WORK_BLOCK*, onnxruntime::concurrency::ThreadPool*)+0x28>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005edfa0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)>:
         :            _ZN11onnxruntime6Tensor4InitEPKNS_12DataTypeImplERKNS_11TensorShapeEPvSt10shared_ptrINS_10IAllocatorEEl():
   27.67 :   5edfa0:       push   %r15
    0.00 :   5edfa2:       mov    %rsi,%r15
    0.00 :   5edfa5:       push   %r14
    0.00 :   5edfa7:       mov    %rdx,%r14
    0.00 :   5edfaa:       push   %r13
    0.00 :   5edfac:       mov    %r8,%r13
    0.00 :   5edfaf:       push   %r12
    0.00 :   5edfb1:       mov    %r9,%r12
    0.00 :   5edfb4:       push   %rbp
    0.00 :   5edfb5:       push   %rbx
    0.00 :   5edfb6:       mov    %rdi,%rbx
    0.00 :   5edfb9:       mov    %rdx,%rdi
    0.00 :   5edfbc:       sub    $0xd8,%rsp
    0.00 :   5edfc3:       mov    %rcx,0x8(%rsp)
    0.00 :   5edfc8:       mov    %fs:0x28,%rax
    0.00 :   5edfd1:       mov    %rax,0xc8(%rsp)
    0.00 :   5edfd9:       xor    %eax,%eax
    0.00 :   5edfdb:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5edfe0:       test   %rax,%rax
    0.00 :   5edfe3:       js     5ee213 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x273>
    0.00 :   5edfe9:       mov    %rax,%rbp
    0.00 :   5edfec:       mov    (%r15),%rax
    0.00 :   5edfef:       mov    %r15,%rdi
    0.00 :   5edff2:       callq  *0x68(%rax)
    0.00 :   5edff5:       mov    %rax,0x30(%rbx)
   52.81 :   5edff9:       test   %rax,%rax
   19.52 :   5edffc:       je     5ee167 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1c7>
    0.00 :   5ee002:       lea    0x18(%rbx),%rdi
    0.00 :   5ee006:       mov    %r14,%rsi
    0.00 :   5ee009:       callq  2452e0 <std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)>
    0.00 :   5ee00e:       mov    0x8(%rsp),%rax
         :            }
         :
         :            void
         :            _M_swap(__shared_count& __r) noexcept
         :            {
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5ee013:       mov    0x8(%r13),%rdx
         :            __r._M_pi = _M_pi;
    0.00 :   5ee017:       movq   $0x0,0x8(%r13)
    0.00 :   5ee01f:       mov    %rax,(%rbx)
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
         :            { }
         :
         :            __shared_ptr(__shared_ptr&& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5ee022:       mov    0x0(%r13),%rax
         :            {
         :            _M_refcount._M_swap(__r._M_refcount);
         :            __r._M_ptr = 0;
    0.00 :   5ee026:       movq   $0x0,0x0(%r13)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5ee02e:       mov    0x10(%rbx),%r13
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   5ee032:       mov    %rax,0x8(%rbx)
         :            __r._M_pi = _M_pi;
    0.00 :   5ee036:       mov    %rdx,0x10(%rbx)
         :            if (_M_pi != nullptr)
    0.00 :   5ee03a:       test   %r13,%r13
    0.00 :   5ee03d:       je     5ee05f <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbf>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5ee03f:       mov    0x639ec2(%rip),%r14        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ee046:       test   %r14,%r14
    0.00 :   5ee049:       je     5ee0a0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x100>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee04b:       mov    $0xffffffff,%eax
    0.00 :   5ee050:       lock xadd %eax,0x8(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ee056:       cmp    $0x1,%eax
    0.00 :   5ee059:       je     5ee0b0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x110>
    0.00 :   5ee05b:       mov    0x8(%rbx),%rax
    0.00 :   5ee05f:       test   %rax,%rax
    0.00 :   5ee062:       je     5ee072 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xd2>
    0.00 :   5ee064:       mov    0x30(%rbx),%rax
    0.00 :   5ee068:       cmpl   $0x8,0x8(%rax)
    0.00 :   5ee06c:       je     5ee100 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x160>
    0.00 :   5ee072:       mov    %r12,0x50(%rbx)
    0.00 :   5ee076:       mov    0xc8(%rsp),%rax
    0.00 :   5ee07e:       xor    %fs:0x28,%rax
    0.00 :   5ee087:       jne    5ee162 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1c2>
    0.00 :   5ee08d:       add    $0xd8,%rsp
    0.00 :   5ee094:       pop    %rbx
    0.00 :   5ee095:       pop    %rbp
    0.00 :   5ee096:       pop    %r12
    0.00 :   5ee098:       pop    %r13
    0.00 :   5ee09a:       pop    %r14
    0.00 :   5ee09c:       pop    %r15
    0.00 :   5ee09e:       retq
    0.00 :   5ee09f:       nop
         :            _Atomic_word __result = *__mem;
    0.00 :   5ee0a0:       mov    0x8(%r13),%eax
         :            *__mem += __val;
    0.00 :   5ee0a4:       lea    -0x1(%rax),%edx
    0.00 :   5ee0a7:       mov    %edx,0x8(%r13)
    0.00 :   5ee0ab:       cmp    $0x1,%eax
    0.00 :   5ee0ae:       jne    5ee05b <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbb>
         :            _M_dispose();
    0.00 :   5ee0b0:       mov    0x0(%r13),%rax
    0.00 :   5ee0b4:       mov    0x10(%rax),%rax
    0.00 :   5ee0b8:       cmp    0x639aa1(%rip),%rax        # c27b60 <.got+0xa0>
    0.00 :   5ee0bf:       jne    5ee158 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1b8>
         :            if (__gthread_active_p())
    0.00 :   5ee0c5:       test   %r14,%r14
    0.00 :   5ee0c8:       je     5ee140 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1a0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ee0ca:       mov    $0xffffffff,%eax
    0.00 :   5ee0cf:       lock xadd %eax,0xc(%r13)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ee0d5:       cmp    $0x1,%eax
    0.00 :   5ee0d8:       jne    5ee05b <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbb>
         :            _M_destroy();
    0.00 :   5ee0da:       mov    0x0(%r13),%rax
         :            { delete this; }
    0.00 :   5ee0de:       mov    %r13,%rdi
         :            _M_destroy();
    0.00 :   5ee0e1:       mov    0x18(%rax),%rdx
    0.00 :   5ee0e5:       cmp    0x639ab4(%rip),%rdx        # c27ba0 <.got+0xe0>
    0.00 :   5ee0ec:       jne    5ee14d <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x1ad>
         :            { delete this; }
    0.00 :   5ee0ee:       callq  *0x8(%rax)
    0.00 :   5ee0f1:       mov    0x8(%rbx),%rax
    0.00 :   5ee0f5:       jmpq   5ee05f <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbf>
    0.00 :   5ee0fa:       nopw   0x0(%rax,%rax,1)
    0.00 :   5ee100:       mov    (%rbx),%rax
    0.00 :   5ee103:       test   %rbp,%rbp
    0.00 :   5ee106:       je     5ee072 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xd2>
    0.00 :   5ee10c:       xor    %edx,%edx
    0.00 :   5ee10e:       xchg   %ax,%ax
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ee110:       lea    0x10(%rax),%rcx
    0.00 :   5ee114:       add    $0x1,%rdx
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5ee118:       movb   $0x0,0x10(%rax)
    0.00 :   5ee11c:       add    $0x20,%rax
    0.00 :   5ee120:       mov    %rcx,-0x20(%rax)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   5ee124:       movq   $0x0,-0x18(%rax)
    0.00 :   5ee12c:       cmp    %rdx,%rbp
    0.00 :   5ee12f:       jg     5ee110 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x170>
    0.00 :   5ee131:       jmpq   5ee072 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xd2>
    0.00 :   5ee136:       nopw   %cs:0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ee140:       mov    0xc(%r13),%eax
         :            *__mem += __val;
    0.00 :   5ee144:       lea    -0x1(%rax),%edx
    0.00 :   5ee147:       mov    %edx,0xc(%r13)
         :            return __result;
    0.00 :   5ee14b:       jmp    5ee0d5 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x135>
         :            _M_destroy();
    0.00 :   5ee14d:       callq  *%rdx
    0.00 :   5ee14f:       jmpq   5ee05b <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0xbb>
    0.00 :   5ee154:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5ee158:       mov    %r13,%rdi
    0.00 :   5ee15b:       callq  *%rax
    0.00 :   5ee15d:       jmpq   5ee0c5 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)+0x125>
    0.00 :   5ee162:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5ee167:       mov    $0xa0,%edi
    0.00 :   5ee16c:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5ee171:       mov    %r15,%rdi
    0.00 :   5ee174:       mov    %rax,%r12
    0.00 :   5ee177:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
    0.00 :   5ee17c:       lea    0x20(%rsp),%r13
    0.00 :   5ee181:       lea    0x40(%rsp),%rbx
    0.00 :   5ee186:       mov    %rax,0x18(%rsp)
    0.00 :   5ee18b:       mov    %rbx,%rdi
    0.00 :   5ee18e:       lea    0x18(%rsp),%rdx
    0.00 :   5ee193:       mov    %r13,%rsi
    0.00 :   5ee196:       lea    0x2a707b(%rip),%rax        # 895218 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0x118>
    0.00 :   5ee19d:       mov    %rax,0x20(%rsp)
    0.00 :   5ee1a2:       callq  164da0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*>(char const* const&, char const* const&)>
    0.00 :   5ee1a7:       mov    %r13,%rdi
    0.00 :   5ee1aa:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ee1af:       lea    0x60(%rsp),%r14
    0.00 :   5ee1b4:       mov    %r13,%r8
    0.00 :   5ee1b7:       lea    0x2a70e2(%rip),%rcx        # 8952a0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)::__PRETTY_FUNCTION__>
    0.00 :   5ee1be:       mov    $0x34,%edx
    0.00 :   5ee1c3:       lea    0x2a6fee(%rip),%rsi        # 8951b8 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xb8>
    0.00 :   5ee1ca:       mov    %r14,%rdi
    0.00 :   5ee1cd:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5ee1d2:       mov    %rbx,%rcx
    0.00 :   5ee1d5:       lea    0x2a7029(%rip),%rdx        # 895205 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0x105>
    0.00 :   5ee1dc:       mov    %r14,%rsi
    0.00 :   5ee1df:       mov    %r12,%rdi
    0.00 :   5ee1e2:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5ee1e7:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5ee1ea:       add    $0x10,%rbx
    0.00 :   5ee1ee:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ee1f3:       mov    %r13,%rdi
    0.00 :   5ee1f6:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ee1fb:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ee200:       cmp    %rbx,%rdi
    0.00 :   5ee203:       je     b7400 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5ee209:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ee20e:       jmpq   b7400 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]>
    0.00 :   5ee213:       mov    $0xa0,%edi
    0.00 :   5ee218:       lea    0x40(%rsp),%rbx
    0.00 :   5ee21d:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5ee222:       lea    0x2a6fc6(%rip),%rsi        # 8951ef <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xef>
    0.00 :   5ee229:       mov    %rbx,%rdi
    0.00 :   5ee22c:       mov    %rax,%r12
    0.00 :   5ee22f:       callq  5ede30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.69]>
    0.00 :   5ee234:       lea    0x20(%rsp),%r13
    0.00 :   5ee239:       mov    %r13,%rdi
    0.00 :   5ee23c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ee241:       lea    0x60(%rsp),%r14
    0.00 :   5ee246:       mov    %r13,%r8
    0.00 :   5ee249:       lea    0x2a7050(%rip),%rcx        # 8952a0 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long)::__PRETTY_FUNCTION__>
    0.00 :   5ee250:       mov    $0x31,%edx
    0.00 :   5ee255:       lea    0x2a6f5c(%rip),%rsi        # 8951b8 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xb8>
    0.00 :   5ee25c:       mov    %r14,%rdi
    0.00 :   5ee25f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5ee264:       mov    %rbx,%rcx
    0.00 :   5ee267:       xor    %edx,%edx
    0.00 :   5ee269:       mov    %r14,%rsi
    0.00 :   5ee26c:       mov    %r12,%rdi
    0.00 :   5ee26f:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5ee274:       mov    %r14,%rdi
    0.00 :   5ee277:       add    $0x10,%rbx
    0.00 :   5ee27b:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ee280:       mov    %r13,%rdi
    0.00 :   5ee283:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ee288:       mov    0x40(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ee28d:       cmp    %rbx,%rdi
    0.00 :   5ee290:       je     b7416 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x16>
    0.00 :   5ee296:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ee29b:       jmpq   b7416 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x16>
    0.00 :   5ee2a0:       mov    %rax,%rbp
    0.00 :   5ee2a3:       jmpq   b742c <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x2c>
    0.00 :   5ee2a8:       mov    %rax,%rbp
    0.00 :   5ee2ab:       jmpq   b7434 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x34>
    0.00 :   5ee2b0:       mov    %rax,%rbp
    0.00 :   5ee2b3:       jmpq   b7447 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x47>
    0.00 :   5ee2b8:       mov    %rax,%rbp
    0.00 :   5ee2bb:       jmpq   b7457 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x57>
    0.00 :   5ee2c0:       mov    %rax,%rbp
    0.00 :   5ee2c3:       jmpq   b745f <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x5f>
    0.00 :   5ee2c8:       mov    %rax,%rbp
    0.00 :   5ee2cb:       jmpq   b7467 <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x67>
    0.00 :   5ee2d0:       mov    %rax,%rbp
    0.00 :   5ee2d3:       jmpq   b747a <onnxruntime::Tensor::Init(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, void*, std::shared_ptr<onnxruntime::IAllocator>, long) [clone .cold.101]+0x7a>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000823a40 <nsync::nsync_mu_lock(nsync::nsync_mu_s_*)>:
         :            _ZN5nsync13nsync_mu_lockEPNS_11nsync_mu_s_E():
         :            memory_order __b1 = __m1 & __memory_order_mask;
         :            __glibcxx_assert(__b2 != memory_order_release);
         :            __glibcxx_assert(__b2 != memory_order_acq_rel);
         :            __glibcxx_assert(__b2 <= __b1);
         :
         :            return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
    0.00 :   823a40:       xor    %eax,%eax
    0.00 :   823a42:       mov    $0x1,%edx
    0.00 :   823a47:       lock cmpxchg %edx,(%rdi)
  100.00 :   823a4b:       jne    823a4e <nsync::nsync_mu_lock(nsync::nsync_mu_s_*)+0xe>
    0.00 :   823a4d:       retq
         :            return __atomic_load_n(&_M_i, __m);
    0.00 :   823a4e:       mov    (%rdi),%eax
    0.00 :   823a50:       test   $0xffffff41,%eax
    0.00 :   823a55:       jne    823a63 <nsync::nsync_mu_lock(nsync::nsync_mu_s_*)+0x23>
    0.00 :   823a57:       lea    0x1(%rax),%edx
    0.00 :   823a5a:       and    $0xffffffdf,%edx
         :            return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
    0.00 :   823a5d:       lock cmpxchg %edx,(%rdi)
    0.00 :   823a61:       je     823a4d <nsync::nsync_mu_lock(nsync::nsync_mu_s_*)+0xd>
    0.00 :   823a63:       push   %rbp
    0.00 :   823a64:       mov    %rdi,%rbp
    0.00 :   823a67:       push   %rbx
    0.00 :   823a68:       push   %rax
    0.00 :   823a69:       callq  824810 <nsync::nsync_waiter_new_()>
    0.00 :   823a6e:       lea    0x405613(%rip),%rdx        # c29088 <nsync::nsync_writer_type_>
    0.00 :   823a75:       mov    %rbp,%rdi
    0.00 :   823a78:       mov    %rax,%rbx
    0.00 :   823a7b:       mov    %rax,%rsi
    0.00 :   823a7e:       mov    (%rdx),%rcx
    0.00 :   823a81:       xor    %edx,%edx
    0.00 :   823a83:       callq  8238a0 <nsync::nsync_mu_lock_slow_(nsync::nsync_mu_s_*, nsync::waiter*, unsigned int, nsync::lock_type_s*)>
    0.00 :   823a88:       pop    %rdx
    0.00 :   823a89:       mov    %rbx,%rdi
    0.00 :   823a8c:       pop    %rbx
    0.00 :   823a8d:       pop    %rbp
    0.00 :   823a8e:       jmpq   8249b0 <nsync::nsync_waiter_free_(nsync::waiter*)>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a9420 <onnxruntime::IExecutionFrame::GetNodeInputOrOutputMLValue(int) const>:
         :            _ZNK11onnxruntime15IExecutionFrame27GetNodeInputOrOutputMLValueEi():
   36.40 :   5a9420:       push   %rbx
    0.00 :   5a9421:       mov    %rdi,%rbx
   63.60 :   5a9424:       callq  5a9310 <onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx(int) const>
    0.00 :   5a9429:       cmp    $0xffffffff,%eax
    0.00 :   5a942c:       je     5a9440 <onnxruntime::IExecutionFrame::GetNodeInputOrOutputMLValue(int) const+0x20>
    0.00 :   5a942e:       cltq
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5a9430:       lea    (%rax,%rax,4),%rdx
    0.00 :   5a9434:       mov    0x10(%rbx),%rax
    0.00 :   5a9438:       pop    %rbx
    0.00 :   5a9439:       lea    (%rax,%rdx,8),%rax
    0.00 :   5a943d:       retq
    0.00 :   5a943e:       xchg   %ax,%ax
    0.00 :   5a9440:       xor    %eax,%eax
    0.00 :   5a9442:       pop    %rbx
    0.00 :   5a9443:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005aa470 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)>:
         :            _ZN11onnxruntime15IExecutionFrame18ReleaseMLValueImplEi():
    0.00 :   5aa470:       push   %r15
    0.00 :   5aa472:       push   %r14
    0.00 :   5aa474:       mov    %rdi,%r14
    0.00 :   5aa477:       push   %r13
    0.00 :   5aa479:       push   %r12
    0.00 :   5aa47b:       push   %rbp
    0.00 :   5aa47c:       mov    %edx,%ebp
    0.00 :   5aa47e:       push   %rbx
    0.00 :   5aa47f:       sub    $0x1d8,%rsp
    0.00 :   5aa486:       mov    %fs:0x28,%rax
    0.00 :   5aa48f:       mov    %rax,0x1c8(%rsp)
    0.00 :   5aa497:       xor    %eax,%eax
    0.00 :   5aa499:       cmp    $0xffffffff,%edx
    0.00 :   5aa49c:       je     5aa4ab <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x3b>
    0.00 :   5aa49e:       movslq %edx,%rax
    0.00 :   5aa4a1:       cmp    0x28(%rsi),%rax
    0.00 :   5aa4a5:       jb     5aa750 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x2e0>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5aa4ab:       lea    0x50(%rsp),%rbx
    0.00 :   5aa4b0:       lea    0x70(%rbx),%rdi
    0.00 :   5aa4b4:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5aa4b9:       mov    0x67d668(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5aa4c0:       xor    %esi,%esi
    0.00 :   5aa4c2:       movq   $0x0,0x198(%rsp)
    0.00 :   5aa4ce:       movq   $0x0,0x1a8(%rsp)
    0.00 :   5aa4da:       movq   $0x0,0x1b0(%rsp)
    0.00 :   5aa4e6:       add    $0x10,%rax
    0.00 :   5aa4ea:       mov    %rax,0xc0(%rsp)
    0.00 :   5aa4f2:       xor    %eax,%eax
    0.00 :   5aa4f4:       mov    %ax,0x1a0(%rsp)
    0.00 :   5aa4fc:       mov    0x67d89d(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5aa503:       movq   $0x0,0x1b8(%rsp)
    0.00 :   5aa50f:       mov    0x8(%rax),%r12
    0.00 :   5aa513:       mov    0x10(%rax),%r15
    0.00 :   5aa517:       movq   $0x0,0x1c0(%rsp)
    0.00 :   5aa523:       mov    -0x18(%r12),%rdi
    0.00 :   5aa528:       mov    %r12,0x50(%rsp)
    0.00 :   5aa52d:       add    %rbx,%rdi
    0.00 :   5aa530:       mov    %r15,(%rdi)
    0.00 :   5aa533:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5aa538:       mov    0x67d821(%rip),%r13        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5aa53f:       lea    0x40(%rbx),%rdi
    0.00 :   5aa543:       movq   $0x0,0x60(%rsp)
    0.00 :   5aa54c:       movq   $0x0,0x68(%rsp)
    0.00 :   5aa555:       movq   $0x0,0x70(%rsp)
    0.00 :   5aa55e:       lea    0x18(%r13),%rax
    0.00 :   5aa562:       mov    %rax,0x50(%rsp)
    0.00 :   5aa567:       lea    0x40(%r13),%rax
    0.00 :   5aa56b:       mov    %rax,0xc0(%rsp)
    0.00 :   5aa573:       mov    0x67d6e6(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5aa57a:       movq   $0x0,0x78(%rsp)
    0.00 :   5aa583:       movq   $0x0,0x80(%rsp)
    0.00 :   5aa58f:       add    $0x10,%rax
    0.00 :   5aa593:       mov    %rax,0x58(%rsp)
    0.00 :   5aa598:       movq   $0x0,0x88(%rsp)
    0.00 :   5aa5a4:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5aa5a9:       mov    0x67da28(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5aa5b0:       lea    0x8(%rbx),%rsi
    0.00 :   5aa5b4:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5aa5b8:       movl   $0x10,0x98(%rsp)
    0.00 :   5aa5c3:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5aa5c7:       movb   $0x0,0xb0(%rsp)
    0.00 :   5aa5cf:       mov    %rax,0x58(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5aa5d4:       lea    0x60(%rbx),%rax
    0.00 :   5aa5d8:       mov    %rax,0xa0(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   5aa5e0:       movq   $0x0,0xa8(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5aa5ec:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5aa5f1:       mov    $0xe,%edx
    0.00 :   5aa5f6:       lea    0x2e5619(%rip),%rsi        # 88fc16 <std::piecewise_construct+0x339>
    0.00 :   5aa5fd:       mov    %rbx,%rdi
    0.00 :   5aa600:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5aa605:       mov    %ebp,%esi
    0.00 :   5aa607:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5aa60a:       lea    0x30(%rsp),%rbp
    0.00 :   5aa60f:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   5aa614:       lea    0x10(%rbp),%rax
    0.00 :   5aa618:       movb   $0x0,0x40(%rsp)
    0.00 :   5aa61d:       mov    %rax,0x30(%rsp)
         :            if (this->pptr())
    0.00 :   5aa622:       mov    0x80(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   5aa62a:       movq   $0x0,0x38(%rsp)
    0.00 :   5aa633:       test   %rax,%rax
    0.00 :   5aa636:       je     5aa820 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x3b0>
         :            if (this->pptr() > this->egptr())
    0.00 :   5aa63c:       mov    0x70(%rsp),%r8
    0.00 :   5aa641:       mov    0x78(%rsp),%rcx
    0.00 :   5aa646:       cmp    %r8,%rax
    0.00 :   5aa649:       ja     5aa738 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x2c8>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5aa64f:       sub    %rcx,%r8
    0.00 :   5aa652:       xor    %edx,%edx
    0.00 :   5aa654:       xor    %esi,%esi
    0.00 :   5aa656:       mov    %rbp,%rdi
    0.00 :   5aa659:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   5aa65e:       lea    0x18(%r13),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aa662:       mov    0xa0(%rsp),%rdi
    0.00 :   5aa66a:       mov    %rax,0x50(%rsp)
    0.00 :   5aa66f:       lea    0x40(%r13),%rax
    0.00 :   5aa673:       mov    %rax,0xc0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5aa67b:       mov    0x67d956(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5aa682:       add    $0x10,%rax
    0.00 :   5aa686:       mov    %rax,0x58(%rsp)
         :            if (!_M_is_local())
    0.00 :   5aa68b:       lea    0x60(%rbx),%rax
    0.00 :   5aa68f:       cmp    %rax,%rdi
    0.00 :   5aa692:       je     5aa699 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x229>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5aa694:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5aa699:       mov    0x67d5c0(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5aa6a0:       lea    0x40(%rbx),%rdi
    0.00 :   5aa6a4:       add    $0x10,%rax
    0.00 :   5aa6a8:       mov    %rax,0x58(%rsp)
    0.00 :   5aa6ad:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5aa6b2:       mov    -0x18(%r12),%rax
    0.00 :   5aa6b7:       mov    %r12,0x50(%rsp)
         :            ~basic_ios() { }
    0.00 :   5aa6bc:       lea    0x70(%rbx),%rdi
    0.00 :   5aa6c0:       mov    %r15,0x50(%rsp,%rax,1)
    0.00 :   5aa6c5:       mov    0x67d45c(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5aa6cc:       add    $0x10,%rax
    0.00 :   5aa6d0:       mov    %rax,0xc0(%rsp)
    0.00 :   5aa6d8:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5aa6dd:       mov    %rbp,%rcx
    0.00 :   5aa6e0:       mov    $0x2,%edx
    0.00 :   5aa6e5:       mov    %r14,%rdi
    0.00 :   5aa6e8:       mov    $0x2,%esi
    0.00 :   5aa6ed:       callq  697470 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aa6f2:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5aa6f7:       add    $0x10,%rbp
    0.00 :   5aa6fb:       cmp    %rbp,%rdi
    0.00 :   5aa6fe:       je     5aa705 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x295>
    0.00 :   5aa700:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aa705:       mov    0x1c8(%rsp),%rcx
    0.00 :   5aa70d:       xor    %fs:0x28,%rcx
    0.00 :   5aa716:       mov    %r14,%rax
    0.00 :   5aa719:       jne    5aa8d7 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x467>
    0.00 :   5aa71f:       add    $0x1d8,%rsp
    0.00 :   5aa726:       pop    %rbx
    0.00 :   5aa727:       pop    %rbp
    0.00 :   5aa728:       pop    %r12
    0.00 :   5aa72a:       pop    %r13
    0.00 :   5aa72c:       pop    %r14
    0.00 :   5aa72e:       pop    %r15
    0.00 :   5aa730:       retq
    0.00 :   5aa731:       nopl   0x0(%rax)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5aa738:       sub    %rcx,%rax
    0.00 :   5aa73b:       xor    %edx,%edx
    0.00 :   5aa73d:       xor    %esi,%esi
    0.00 :   5aa73f:       mov    %rbp,%rdi
    0.00 :   5aa742:       mov    %rax,%r8
    0.00 :   5aa745:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   5aa74a:       jmpq   5aa65e <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x1ee>
    0.00 :   5aa74f:       nop
    0.00 :   5aa750:       test   %edx,%edx
    0.00 :   5aa752:       js     5aa8dc <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x46c>
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5aa758:       lea    (%rax,%rax,4),%rbp
    0.00 :   5aa75c:       mov    0x10(%rsi),%rbx
    0.00 :   5aa760:       shl    $0x3,%rbp
    0.00 :   5aa764:       add    %rbp,%rbx
    0.00 :   5aa767:       mov    0x18(%rbx),%rdi
    0.00 :   5aa76b:       test   %rdi,%rdi
    0.00 :   5aa76e:       je     5aa78f <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x31f>
    0.00 :   5aa770:       mov    (%rdi),%rax
    0.00 :   5aa773:       mov    %rsi,0x8(%rsp)
    0.00 :   5aa778:       callq  *0x30(%rax)
    0.00 :   5aa77b:       test   %al,%al
    0.00 :   5aa77d:       je     5aa80a <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x39a>
    0.00 :   5aa783:       mov    0x8(%rsp),%rsi
    0.00 :   5aa788:       mov    %rbp,%rbx
    0.00 :   5aa78b:       add    0x10(%rsi),%rbx
         :
         :            __shared_count&
         :            operator=(const __shared_count& __r) noexcept
         :            {
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
         :            if (__tmp != _M_pi)
    0.00 :   5aa78f:       mov    0x8(%rbx),%rbp
         :            _M_get() const noexcept
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
         :            };
         :
         :            template<typename _Tp, _Lock_policy _Lp>
         :            class __shared_ptr
    0.00 :   5aa793:       movq   $0x0,(%rbx)
         :            if (__tmp != _M_pi)
    0.00 :   5aa79a:       test   %rbp,%rbp
    0.00 :   5aa79d:       je     5aa7ca <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x35a>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5aa79f:       mov    0x67d762(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5aa7a6:       test   %r12,%r12
    0.00 :   5aa7a9:       je     5aa880 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x410>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aa7af:       mov    $0xffffffff,%eax
    0.00 :   5aa7b4:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
  100.00 :   5aa7b9:       cmp    $0x1,%eax
    0.00 :   5aa7bc:       je     5aa848 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x3d8>
         :            _M_pi = __tmp;
    0.00 :   5aa7c2:       movq   $0x0,0x8(%rbx)
         :            if (__tmp != _M_pi)
    0.00 :   5aa7ca:       mov    0x20(%rbx),%rbp
    0.00 :   5aa7ce:       movq   $0x0,0x10(%rbx)
         :            class __shared_ptr
    0.00 :   5aa7d6:       movq   $0x0,0x18(%rbx)
         :            if (__tmp != _M_pi)
    0.00 :   5aa7de:       test   %rbp,%rbp
    0.00 :   5aa7e1:       je     5aa80a <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x39a>
         :            if (__gthread_active_p())
    0.00 :   5aa7e3:       mov    0x67d71e(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5aa7ea:       test   %r12,%r12
    0.00 :   5aa7ed:       je     5aa838 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x3c8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aa7ef:       mov    $0xffffffff,%eax
    0.00 :   5aa7f4:       lock xadd %eax,0x8(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5aa7f9:       cmp    $0x1,%eax
    0.00 :   5aa7fc:       je     5aa890 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x420>
         :            _M_pi = __tmp;
    0.00 :   5aa802:       movq   $0x0,0x20(%rbx)
    0.00 :   5aa80a:       movq   $0x0,(%r14)
         :            };
         :
         :            template<std::size_t _Idx, typename _Head>
         :            struct _Head_base<_Idx, _Head, false>
         :            {
         :            constexpr _Head_base()
    0.00 :   5aa811:       jmpq   5aa705 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x295>
    0.00 :   5aa816:       nopw   %cs:0x0(%rax,%rax,1)
         :            this->_M_assign(__str);
    0.00 :   5aa820:       lea    0x50(%rbx),%rsi
    0.00 :   5aa824:       mov    %rbp,%rdi
    0.00 :   5aa827:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5aa82c:       jmpq   5aa65e <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x1ee>
    0.00 :   5aa831:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aa838:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5aa83b:       lea    -0x1(%rax),%edx
    0.00 :   5aa83e:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   5aa841:       jmp    5aa7f9 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x389>
    0.00 :   5aa843:       nopl   0x0(%rax,%rax,1)
         :            _M_dispose();
    0.00 :   5aa848:       mov    0x0(%rbp),%rax
    0.00 :   5aa84c:       mov    %rbp,%rdi
    0.00 :   5aa84f:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5aa852:       test   %r12,%r12
    0.00 :   5aa855:       je     5aa8c1 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x451>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aa857:       mov    $0xffffffff,%eax
    0.00 :   5aa85c:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5aa861:       cmp    $0x1,%eax
    0.00 :   5aa864:       jne    5aa7c2 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x352>
         :            _M_destroy();
    0.00 :   5aa86a:       mov    0x0(%rbp),%rax
    0.00 :   5aa86e:       mov    %rbp,%rdi
    0.00 :   5aa871:       callq  *0x18(%rax)
    0.00 :   5aa874:       jmpq   5aa7c2 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x352>
    0.00 :   5aa879:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aa880:       mov    0x8(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5aa883:       lea    -0x1(%rax),%edx
    0.00 :   5aa886:       mov    %edx,0x8(%rbp)
         :            return __result;
    0.00 :   5aa889:       jmpq   5aa7b9 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x349>
    0.00 :   5aa88e:       xchg   %ax,%ax
         :            _M_dispose();
    0.00 :   5aa890:       mov    0x0(%rbp),%rax
    0.00 :   5aa894:       mov    %rbp,%rdi
    0.00 :   5aa897:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5aa89a:       test   %r12,%r12
    0.00 :   5aa89d:       je     5aa8cc <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x45c>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aa89f:       mov    $0xffffffff,%eax
    0.00 :   5aa8a4:       lock xadd %eax,0xc(%rbp)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5aa8a9:       cmp    $0x1,%eax
    0.00 :   5aa8ac:       jne    5aa802 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x392>
         :            _M_destroy();
    0.00 :   5aa8b2:       mov    0x0(%rbp),%rax
    0.00 :   5aa8b6:       mov    %rbp,%rdi
    0.00 :   5aa8b9:       callq  *0x18(%rax)
    0.00 :   5aa8bc:       jmpq   5aa802 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x392>
         :            _Atomic_word __result = *__mem;
    0.00 :   5aa8c1:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5aa8c4:       lea    -0x1(%rax),%edx
    0.00 :   5aa8c7:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5aa8ca:       jmp    5aa861 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x3f1>
         :            _Atomic_word __result = *__mem;
    0.00 :   5aa8cc:       mov    0xc(%rbp),%eax
         :            *__mem += __val;
    0.00 :   5aa8cf:       lea    -0x1(%rax),%edx
    0.00 :   5aa8d2:       mov    %edx,0xc(%rbp)
         :            return __result;
    0.00 :   5aa8d5:       jmp    5aa8a9 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int)+0x439>
    0.00 :   5aa8d7:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5aa8dc:       mov    $0xa0,%edi
    0.00 :   5aa8e1:       lea    0x30(%rsp),%rbp
    0.00 :   5aa8e6:       lea    0x10(%rsp),%r14
    0.00 :   5aa8eb:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5aa8f0:       mov    %rbp,%rdi
    0.00 :   5aa8f3:       mov    %rax,%r13
    0.00 :   5aa8f6:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5aa8fb:       mov    %r14,%rdi
    0.00 :   5aa8fe:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5aa903:       lea    0x50(%rsp),%rbx
    0.00 :   5aa908:       mov    %r14,%r8
    0.00 :   5aa90b:       lea    0x2e5eee(%rip),%rcx        # 890800 <onnxruntime::IExecutionFrame::GetMLValue(int) const::__PRETTY_FUNCTION__>
    0.00 :   5aa912:       mov    $0x57,%edx
    0.00 :   5aa917:       lea    0x2e500a(%rip),%rsi        # 88f928 <std::piecewise_construct+0x4b>
    0.00 :   5aa91e:       mov    %rbx,%rdi
    0.00 :   5aa921:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5aa926:       mov    %rbp,%rcx
    0.00 :   5aa929:       lea    0x2e5038(%rip),%rdx        # 88f968 <std::piecewise_construct+0x8b>
    0.00 :   5aa930:       mov    %rbx,%rsi
    0.00 :   5aa933:       mov    %r13,%rdi
    0.00 :   5aa936:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5aa93b:       mov    %rbx,%rdi
         :            if (!_M_is_local())
    0.00 :   5aa93e:       add    $0x10,%rbp
    0.00 :   5aa942:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5aa947:       mov    %r14,%rdi
    0.00 :   5aa94a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aa94f:       mov    0x30(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5aa954:       cmp    %rbp,%rdi
    0.00 :   5aa957:       je     b140c <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]+0x4e>
    0.00 :   5aa95d:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aa962:       jmpq   b140c <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]+0x4e>
    0.00 :   5aa967:       jmpq   b13be <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]>
    0.00 :   5aa96c:       jmpq   b13f7 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]+0x39>
    0.00 :   5aa971:       jmpq   b13d6 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]+0x18>
    0.00 :   5aa976:       mov    %rax,%rbx
    0.00 :   5aa979:       jmpq   b1458 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]+0x9a>
    0.00 :   5aa97e:       mov    %rax,%rbx
    0.00 :   5aa981:       jmpq   b142d <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]+0x6f>
    0.00 :   5aa986:       mov    %rax,%rbx
    0.00 :   5aa989:       jmpq   b1435 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]+0x77>
    0.00 :   5aa98e:       mov    %rax,%r12
    0.00 :   5aa991:       jmpq   b1422 <onnxruntime::IExecutionFrame::ReleaseMLValueImpl(int) [clone .cold.432]+0x64>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000286240 <onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime3AddIfE7ComputeEPNS_15OpKernelContextE():
   33.52 :   286240:       push   %rbx
    0.00 :   286241:       mov    %rdi,%rbx
    0.00 :   286244:       mov    %rdx,%rdi
    0.00 :   286247:       xor    %edx,%edx
    0.00 :   286249:       sub    $0x20,%rsp
    0.00 :   28624d:       movsd  0x5a9b43(%rip),%xmm0        # 82fd98 <typeinfo name for std::_Sp_counted_ptr_inplace<onnxruntime::AllocatorManager, std::allocator<onnxruntime::AllocatorManager>, (__gnu_cxx::_Lock_policy)2>+0x98>
   66.48 :   286255:       mov    %fs:0x28,%rax
    0.00 :   28625e:       mov    %rax,0x18(%rsp)
    0.00 :   286263:       xor    %eax,%eax
    0.00 :   286265:       lea    -0x1941c(%rip),%rax        # 26ce50 <onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#1}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   28626c:       mov    %rsp,%rsi
    0.00 :   28626f:       mov    %rax,(%rsp)
    0.00 :   286273:       lea    -0x1952a(%rip),%rax        # 26cd50 <onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#2}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   28627a:       mov    %rax,0x8(%rsp)
    0.00 :   28627f:       lea    0x9a9a(%rip),%rax        # 28fd20 <onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const::{lambda(onnxruntime::BroadcastHelper&)#3}::_FUN(onnxruntime::BroadcastHelper&)>
    0.00 :   286286:       mov    %rax,0x10(%rsp)
    0.00 :   28628b:       callq  284210 <onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&, onnxruntime::ProcessBroadcastSpanFuncs const&, double, void*)>
    0.00 :   286290:       movq   $0x0,(%rbx)
    0.00 :   286297:       mov    0x18(%rsp),%rcx
    0.00 :   28629c:       xor    %fs:0x28,%rcx
    0.00 :   2862a5:       jne    2862b0 <onnxruntime::Add<float>::Compute(onnxruntime::OpKernelContext*) const+0x70>
    0.00 :   2862a7:       add    $0x20,%rsp
    0.00 :   2862ab:       mov    %rbx,%rax
    0.00 :   2862ae:       pop    %rbx
    0.00 :   2862af:       retq
    0.00 :   2862b0:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000058f5e0 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)>:
         :            _ZNSt8_Rb_treeImmSt9_IdentityImEN11onnxruntime8BFCArena3Bin15ChunkComparatorESaImEE11equal_rangeERKm():
         :            typename _Compare, typename _Alloc>
         :            pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :            _Compare, _Alloc>::iterator,
         :            typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :            _Compare, _Alloc>::iterator>
         :            _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :   58f5e0:       push   %r15
    0.00 :   58f5e2:       push   %r14
    0.00 :   58f5e4:       mov    %rsi,%r14
    0.00 :   58f5e7:       push   %r13
         :            { return &this->_M_impl._M_header; }
    0.00 :   58f5e9:       lea    0x8(%rdi),%r13
         :            _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :   58f5ed:       push   %r12
    0.00 :   58f5ef:       push   %rbp
    0.00 :   58f5f0:       mov    %rdi,%rbp
    0.00 :   58f5f3:       push   %rbx
    0.00 :   58f5f4:       sub    $0x18,%rsp
         :            equal_range(const _Key& __k)
         :            {
         :            _Link_type __x = _M_begin();
    0.00 :   58f5f8:       mov    0x10(%rdi),%rbx
         :            _Base_ptr __y = _M_end();
         :            while (__x != 0)
    0.00 :   58f5fc:       test   %rbx,%rbx
    0.00 :   58f5ff:       jne    58f619 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x39>
    0.00 :   58f601:       jmpq   58f698 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0xb8>
    0.00 :   58f606:       nopw   %cs:0x0(%rax,%rax,1)
         :            {
         :            if (_M_impl._M_key_compare(_S_key(__x), __k))
         :            __x = _S_right(__x);
    0.00 :   58f610:       mov    0x18(%rbx),%rbx
         :            while (__x != 0)
    0.00 :   58f614:       test   %rbx,%rbx
    0.00 :   58f617:       je     58f698 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0xb8>
    0.00 :   58f619:       mov    0x20(%rbx),%rsi
  100.00 :   58f61d:       mov    0x0(%rbp),%rdi
         :            if (_M_impl._M_key_compare(_S_key(__x), __k))
    0.00 :   58f621:       mov    (%r14),%r15
    0.00 :   58f624:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   58f629:       mov    0x0(%rbp),%rdi
    0.00 :   58f62d:       mov    %r15,%rsi
    0.00 :   58f630:       mov    %rax,%r12
    0.00 :   58f633:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   58f638:       mov    (%rax),%rdx
    0.00 :   58f63b:       cmp    %rdx,(%r12)
    0.00 :   58f63f:       jne    58f64a <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x6a>
    0.00 :   58f641:       mov    0x18(%rax),%rax
    0.00 :   58f645:       cmp    %rax,0x18(%r12)
    0.00 :   58f64a:       setb   %al
    0.00 :   58f64d:       test   %al,%al
    0.00 :   58f64f:       jne    58f610 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x30>
    0.00 :   58f651:       mov    (%r14),%rsi
    0.00 :   58f654:       mov    0x0(%rbp),%rdi
         :            else if (_M_impl._M_key_compare(__k, _S_key(__x)))
    0.00 :   58f658:       mov    0x20(%rbx),%r15
    0.00 :   58f65c:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   58f661:       mov    0x0(%rbp),%rdi
    0.00 :   58f665:       mov    %r15,%rsi
    0.00 :   58f668:       mov    %rax,%r12
    0.00 :   58f66b:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   58f670:       mov    (%rax),%rcx
    0.00 :   58f673:       cmp    %rcx,(%r12)
    0.00 :   58f677:       jne    58f682 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0xa2>
    0.00 :   58f679:       mov    0x18(%rax),%rax
    0.00 :   58f67d:       cmp    %rax,0x18(%r12)
    0.00 :   58f682:       setb   %al
    0.00 :   58f685:       mov    0x10(%rbx),%r12
    0.00 :   58f689:       test   %al,%al
    0.00 :   58f68b:       je     58f6b0 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0xd0>
    0.00 :   58f68d:       mov    %rbx,%r13
    0.00 :   58f690:       mov    %r12,%rbx
         :            while (__x != 0)
    0.00 :   58f693:       test   %rbx,%rbx
    0.00 :   58f696:       jne    58f619 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x39>
         :            iterator>(_M_lower_bound(__x, __y, __k),
         :            _M_upper_bound(__xu, __yu, __k));
         :            }
         :            }
         :            return pair<iterator, iterator>(iterator(__y),
         :            iterator(__y));
    0.00 :   58f698:       mov    %r13,%rax
         :            }
    0.00 :   58f69b:       add    $0x18,%rsp
    0.00 :   58f69f:       mov    %r13,%rdx
    0.00 :   58f6a2:       pop    %rbx
    0.00 :   58f6a3:       pop    %rbp
    0.00 :   58f6a4:       pop    %r12
    0.00 :   58f6a6:       pop    %r13
    0.00 :   58f6a8:       pop    %r14
    0.00 :   58f6aa:       pop    %r15
    0.00 :   58f6ac:       retq
    0.00 :   58f6ad:       nopl   (%rax)
         :            __xu = _S_right(__xu);
    0.00 :   58f6b0:       mov    0x18(%rbx),%r15
         :            while (__x != 0)
    0.00 :   58f6b4:       test   %r15,%r15
    0.00 :   58f6b7:       jne    58f6cc <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0xec>
    0.00 :   58f6b9:       jmp    58f720 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x140>
    0.00 :   58f6bb:       nopl   0x0(%rax,%rax,1)
         :            __y = __x, __x = _S_left(__x);
    0.00 :   58f6c0:       mov    %r15,%r13
    0.00 :   58f6c3:       mov    0x10(%r15),%r15
         :            while (__x != 0)
    0.00 :   58f6c7:       test   %r15,%r15
    0.00 :   58f6ca:       je     58f720 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x140>
         :            if (_M_impl._M_key_compare(__k, _S_key(__x)))
    0.00 :   58f6cc:       mov    0x20(%r15),%rax
    0.00 :   58f6d0:       mov    (%r14),%rsi
    0.00 :   58f6d3:       mov    0x0(%rbp),%rdi
    0.00 :   58f6d7:       mov    %rax,(%rsp)
    0.00 :   58f6db:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   58f6e0:       mov    (%rsp),%rsi
    0.00 :   58f6e4:       mov    0x0(%rbp),%rdi
    0.00 :   58f6e8:       mov    %rax,0x8(%rsp)
    0.00 :   58f6ed:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   58f6f2:       mov    0x8(%rsp),%rcx
    0.00 :   58f6f7:       mov    (%rax),%rdx
    0.00 :   58f6fa:       cmp    %rdx,(%rcx)
    0.00 :   58f6fd:       jne    58f707 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x127>
    0.00 :   58f6ff:       mov    0x18(%rax),%rax
    0.00 :   58f703:       cmp    %rax,0x18(%rcx)
    0.00 :   58f707:       setb   %al
    0.00 :   58f70a:       test   %al,%al
    0.00 :   58f70c:       jne    58f6c0 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0xe0>
         :            __x = _S_right(__x);
    0.00 :   58f70e:       mov    0x18(%r15),%r15
         :            while (__x != 0)
    0.00 :   58f712:       test   %r15,%r15
    0.00 :   58f715:       jne    58f6cc <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0xec>
    0.00 :   58f717:       nopw   0x0(%rax,%rax,1)
         :            while (__x != 0)
    0.00 :   58f720:       test   %r12,%r12
    0.00 :   58f723:       je     58f76e <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x18e>
         :            if (!_M_impl._M_key_compare(_S_key(__x), __k))
    0.00 :   58f725:       mov    (%r14),%rax
    0.00 :   58f728:       mov    0x20(%r12),%rsi
    0.00 :   58f72d:       mov    0x0(%rbp),%rdi
    0.00 :   58f731:       mov    %rax,(%rsp)
    0.00 :   58f735:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   58f73a:       mov    (%rsp),%rsi
    0.00 :   58f73e:       mov    0x0(%rbp),%rdi
    0.00 :   58f742:       mov    %rax,%r15
    0.00 :   58f745:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   58f74a:       mov    (%rax),%rcx
    0.00 :   58f74d:       cmp    %rcx,(%r15)
    0.00 :   58f750:       jne    58f75a <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x17a>
    0.00 :   58f752:       mov    0x18(%rax),%rax
    0.00 :   58f756:       cmp    %rax,0x18(%r15)
    0.00 :   58f75a:       setb   %al
    0.00 :   58f75d:       test   %al,%al
    0.00 :   58f75f:       jne    58f780 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x1a0>
         :            __y = __x, __x = _S_left(__x);
    0.00 :   58f761:       mov    %r12,%rbx
    0.00 :   58f764:       mov    0x10(%r12),%r12
         :            while (__x != 0)
    0.00 :   58f769:       test   %r12,%r12
    0.00 :   58f76c:       jne    58f725 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x145>
         :            _M_upper_bound(__xu, __yu, __k));
    0.00 :   58f76e:       mov    %rbx,%rax
    0.00 :   58f771:       jmpq   58f69b <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0xbb>
    0.00 :   58f776:       nopw   %cs:0x0(%rax,%rax,1)
         :            __x = _S_right(__x);
    0.00 :   58f780:       mov    0x18(%r12),%r12
    0.00 :   58f785:       jmp    58f720 <std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator<unsigned long> >::equal_range(unsigned long const&)+0x140>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005d95c0 <onnxruntime::SessionState::GetExecutionPlan() const>:
         :            _ZNK11onnxruntime12SessionState16GetExecutionPlanEv():
   38.85 :   5d95c0:       mov    0x208(%rdi),%rax
   61.15 :   5d95c7:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004e54f0 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)>:
         :            _ZNSt6vectorIlSaIlEE12emplace_backIJRKlEEEvDpOT_():
         :            #if __cplusplus > 201402L
         :            typename vector<_Tp, _Alloc>::reference
         :            #else
         :            void
         :            #endif
         :            vector<_Tp, _Alloc>::
    0.00 :   4e54f0:       push   %r15
    0.00 :   4e54f2:       push   %r14
    0.00 :   4e54f4:       push   %r13
    0.00 :   4e54f6:       push   %r12
    0.00 :   4e54f8:       push   %rbp
    0.00 :   4e54f9:       push   %rbx
    0.00 :   4e54fa:       sub    $0x18,%rsp
         :            emplace_back(_Args&&... __args)
         :            {
         :            if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :   4e54fe:       mov    0x8(%rdi),%rbx
    0.00 :   4e5502:       cmp    0x10(%rdi),%rbx
    0.00 :   4e5506:       je     4e5530 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0x40>
         :            {
         :            _GLIBCXX_ASAN_ANNOTATE_GROW(1);
         :            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  100.00 :   4e5508:       mov    (%rsi),%rax
         :            std::forward<_Args>(__args)...);
         :            ++this->_M_impl._M_finish;
    0.00 :   4e550b:       add    $0x8,%rbx
    0.00 :   4e550f:       mov    %rax,-0x8(%rbx)
    0.00 :   4e5513:       mov    %rbx,0x8(%rdi)
         :            else
         :            _M_realloc_insert(end(), std::forward<_Args>(__args)...);
         :            #if __cplusplus > 201402L
         :            return back();
         :            #endif
         :            }
    0.00 :   4e5517:       add    $0x18,%rsp
    0.00 :   4e551b:       pop    %rbx
    0.00 :   4e551c:       pop    %rbp
    0.00 :   4e551d:       pop    %r12
    0.00 :   4e551f:       pop    %r13
    0.00 :   4e5521:       pop    %r14
    0.00 :   4e5523:       pop    %r15
    0.00 :   4e5525:       retq
    0.00 :   4e5526:       nopw   %cs:0x0(%rax,%rax,1)
         :
         :            // Called by _M_fill_insert, _M_insert_aux etc.
         :            size_type
         :            _M_check_len(size_type __n, const char* __s) const
         :            {
         :            if (max_size() - size() < __n)
    0.00 :   4e5530:       mov    (%rdi),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4e5533:       mov    %rbx,%r13
    0.00 :   4e5536:       mov    %rsi,%r12
    0.00 :   4e5539:       mov    %rdi,%rbp
    0.00 :   4e553c:       sub    %rcx,%r13
         :            max(const _Tp& __a, const _Tp& __b)
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :            //return  __a < __b ? __b : __a;
         :            if (__a < __b)
    0.00 :   4e553f:       mov    %r13,%rax
    0.00 :   4e5542:       sar    $0x3,%rax
    0.00 :   4e5546:       je     4e55f0 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0x100>
         :            __throw_length_error(__N(__s));
         :
         :            const size_type __len = size() + std::max(size(), __n);
    0.00 :   4e554c:       lea    (%rax,%rax,1),%rdx
         :            return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :   4e5550:       mov    $0xfffffffffffffff8,%r15
    0.00 :   4e5557:       cmp    %rdx,%rax
    0.00 :   4e555a:       jbe    4e55c8 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0xd8>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4e555c:       mov    %r15,%rdi
    0.00 :   4e555f:       mov    %rcx,0x8(%rsp)
    0.00 :   4e5564:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4e5569:       mov    0x8(%rsp),%rcx
    0.00 :   4e556e:       mov    %rax,%r14
    0.00 :   4e5571:       add    %rax,%r15
         :            #endif // __cpp_sized_deallocation
         :            #endif // __cpp_aligned_new
         :
         :            // Default placement versions of operator new.
         :            inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :            { return __p; }
    0.00 :   4e5574:       mov    (%r12),%rax
    0.00 :   4e5578:       lea    0x8(%r14,%r13,1),%r12
    0.00 :   4e557d:       mov    %rax,(%r14,%r13,1)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   4e5581:       cmp    %rcx,%rbx
    0.00 :   4e5584:       je     4e55e8 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0xf8>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   4e5586:       mov    %rcx,%rsi
    0.00 :   4e5589:       mov    %r13,%rdx
    0.00 :   4e558c:       mov    %r14,%rdi
    0.00 :   4e558f:       mov    %rcx,0x8(%rsp)
    0.00 :   4e5594:       callq  53aa0 <memmove@plt>
         :            _M_deallocate(pointer __p, size_t __n)
    0.00 :   4e5599:       mov    0x8(%rsp),%rcx
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   4e559e:       mov    %rcx,%rdi
    0.00 :   4e55a1:       callq  53300 <operator delete(void*)@plt>
         :            }
         :            _GLIBCXX_ASAN_ANNOTATE_REINIT;
         :            std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
         :            _M_deallocate(__old_start,
         :            this->_M_impl._M_end_of_storage - __old_start);
         :            this->_M_impl._M_start = __new_start;
    0.00 :   4e55a6:       mov    %r14,0x0(%rbp)
         :            this->_M_impl._M_finish = __new_finish;
    0.00 :   4e55aa:       mov    %r12,0x8(%rbp)
         :            this->_M_impl._M_end_of_storage = __new_start + __len;
    0.00 :   4e55ae:       mov    %r15,0x10(%rbp)
         :            }
    0.00 :   4e55b2:       add    $0x18,%rsp
    0.00 :   4e55b6:       pop    %rbx
    0.00 :   4e55b7:       pop    %rbp
    0.00 :   4e55b8:       pop    %r12
    0.00 :   4e55ba:       pop    %r13
    0.00 :   4e55bc:       pop    %r14
    0.00 :   4e55be:       pop    %r15
    0.00 :   4e55c0:       retq
    0.00 :   4e55c1:       nopl   0x0(%rax)
         :            return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :   4e55c8:       movabs $0x1fffffffffffffff,%rsi
    0.00 :   4e55d2:       cmp    %rsi,%rdx
    0.00 :   4e55d5:       ja     4e555c <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0x6c>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4e55d7:       test   %rdx,%rdx
    0.00 :   4e55da:       jne    4e55fb <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0x10b>
    0.00 :   4e55dc:       xor    %r15d,%r15d
    0.00 :   4e55df:       xor    %r14d,%r14d
    0.00 :   4e55e2:       jmp    4e5574 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0x84>
    0.00 :   4e55e4:       nopl   0x0(%rax)
         :            if (__p)
    0.00 :   4e55e8:       test   %rcx,%rcx
    0.00 :   4e55eb:       je     4e55a6 <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0xb6>
    0.00 :   4e55ed:       jmp    4e559e <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0xae>
    0.00 :   4e55ef:       nop
         :            if (__a < __b)
    0.00 :   4e55f0:       mov    $0x8,%r15d
    0.00 :   4e55f6:       jmpq   4e555c <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0x6c>
    0.00 :   4e55fb:       shl    $0x4,%rax
    0.00 :   4e55ff:       mov    %rax,%r15
    0.00 :   4e5602:       jmpq   4e555c <void std::vector<long, std::allocator<long> >::emplace_back<long const&>(long const&)+0x6c>
 Percent |	Source code & Disassembly of _multiarray_umath.cpython-37m-x86_64-linux-gnu.so for cache-misses (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000060720 <PyArray_DescrFromType>:
         :           PyArray_DescrFromType():
  100.00 :   60720:       sub    $0x8,%rsp
    0.00 :   60724:       test   %edi,%edi
    0.00 :   60726:       js     607b0 <PyArray_DescrFromType+0x90>
    0.00 :   6072c:       cmp    $0x17,%edi
    0.00 :   6072f:       jg     60750 <PyArray_DescrFromType+0x30>
    0.00 :   60731:       movslq %edi,%rdi
    0.00 :   60734:       lea    0x542a65(%rip),%rax        # 5a31a0 <_builtin_descrs>
    0.00 :   6073b:       mov    (%rax,%rdi,8),%rax
    0.00 :   6073f:       test   %rax,%rax
    0.00 :   60742:       je     607b0 <PyArray_DescrFromType+0x90>
    0.00 :   60744:       addq   $0x1,(%rax)
    0.00 :   60748:       add    $0x8,%rsp
    0.00 :   6074c:       retq
    0.00 :   6074d:       nopl   (%rax)
    0.00 :   60750:       cmp    $0x19,%edi
    0.00 :   60753:       je     607c6 <PyArray_DescrFromType+0xa6>
    0.00 :   60755:       cmp    $0x1a,%edi
    0.00 :   60758:       je     607d0 <PyArray_DescrFromType+0xb0>
    0.00 :   6075a:       cmp    $0x63,%edi
    0.00 :   6075d:       je     607d0 <PyArray_DescrFromType+0xb0>
    0.00 :   6075f:       cmp    $0xff,%edi
    0.00 :   60765:       jle    60790 <PyArray_DescrFromType+0x70>
    0.00 :   60767:       mov    0x57eae7(%rip),%eax        # 5df254 <NPY_NUMUSERTYPES>
    0.00 :   6076d:       add    $0x100,%eax
    0.00 :   60772:       cmp    %edi,%eax
    0.00 :   60774:       jle    607b0 <PyArray_DescrFromType+0x90>
    0.00 :   60776:       mov    0x582a93(%rip),%rax        # 5e3210 <userdescrs>
    0.00 :   6077d:       movslq %edi,%rdi
    0.00 :   60780:       mov    -0x800(%rax,%rdi,8),%rax
    0.00 :   60788:       jmp    6073f <PyArray_DescrFromType+0x1f>
    0.00 :   6078a:       nopw   0x0(%rax,%rax,1)
    0.00 :   60790:       cmp    $0x7f,%edi
    0.00 :   60793:       jg     607b0 <PyArray_DescrFromType+0x90>
    0.00 :   60795:       movslq %edi,%rdi
    0.00 :   60798:       lea    0x573001(%rip),%rax        # 5d37a0 <_letter_to_num>
    0.00 :   6079f:       movsbq (%rax,%rdi,1),%rax
    0.00 :   607a4:       cmp    $0x17,%eax
    0.00 :   607a7:       jle    60828 <PyArray_DescrFromType+0x108>
    0.00 :   607a9:       nopl   0x0(%rax)
    0.00 :   607b0:       mov    0x5445f9(%rip),%rax        # 5a4db0 <PyExc_ValueError>
    0.00 :   607b7:       lea    0x2a964e(%rip),%rsi        # 309e0c <_fini+0xd94>
    0.00 :   607be:       mov    (%rax),%rdi
    0.00 :   607c1:       callq  27260 <PyErr_SetString@plt>
    0.00 :   607c6:       xor    %eax,%eax
    0.00 :   607c8:       add    $0x8,%rsp
    0.00 :   607cc:       retq
    0.00 :   607cd:       nopl   (%rax)
    0.00 :   607d0:       cmp    $0x1a,%edi
    0.00 :   607d3:       je     60800 <PyArray_DescrFromType+0xe0>
    0.00 :   607d5:       lea    0x549284(%rip),%rdi        # 5a9a60 <STRING_Descr>
    0.00 :   607dc:       callq  95520 <PyArray_DescrNew>
    0.00 :   607e1:       test   %rax,%rax
    0.00 :   607e4:       je     60748 <PyArray_DescrFromType+0x28>
    0.00 :   607ea:       movl   $0x1,0x20(%rax)
    0.00 :   607f1:       movb   $0x63,0x19(%rax)
    0.00 :   607f5:       add    $0x8,%rsp
    0.00 :   607f9:       retq
    0.00 :   607fa:       nopw   0x0(%rax,%rax,1)
    0.00 :   60800:       mov    0x5446d1(%rip),%rax        # 5a4ed8 <PyExc_DeprecationWarning>
    0.00 :   60807:       mov    $0x1,%edx
    0.00 :   6080c:       lea    0x2a957d(%rip),%rsi        # 309d90 <_fini+0xd18>
    0.00 :   60813:       mov    (%rax),%rdi
    0.00 :   60816:       callq  26910 <PyErr_WarnEx@plt>
    0.00 :   6081b:       test   %eax,%eax
    0.00 :   6081d:       jns    607d5 <PyArray_DescrFromType+0xb5>
    0.00 :   6081f:       xor    %eax,%eax
    0.00 :   60821:       jmp    607c8 <PyArray_DescrFromType+0xa8>
    0.00 :   60823:       nopl   0x0(%rax,%rax,1)
    0.00 :   60828:       lea    0x542971(%rip),%rdx        # 5a31a0 <_builtin_descrs>
    0.00 :   6082f:       mov    (%rdx,%rax,8),%rax
    0.00 :   60833:       jmpq   6073f <PyArray_DescrFromType+0x1f>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000909e0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4f0>:
    0.00 :   909e0:       push   %r14
    0.00 :   909e2:       lea    0x60(%rdi),%r11
    0.00 :   909e6:       push   %r13
    0.00 :   909e8:       lea    0x10(%rdi),%r10
    0.00 :   909ec:       push   %r12
    0.00 :   909ee:       push   %rbp
    0.00 :   909ef:       lea    0x58(%rdi),%rbp
    0.00 :   909f3:       push   %rbx
    0.00 :   909f4:       xor    %ebx,%ebx
    0.00 :   909f6:       movl   $0x0,0x8(%rdi)
    0.00 :   909fd:       mov    %rbx,%rax
    0.00 :   90a00:       xchg   %rax,(%r10)
    0.00 :   90a03:       test   %rax,%rax
    0.00 :   90a06:       je     90b40 <_IO_str_seekoff@@GLIBC_2.2.5+0x650>
    0.00 :   90a0c:       mov    0x8(%rax),%rsi
    0.00 :   90a10:       mov    %esi,%edx
    0.00 :   90a12:       shr    $0x4,%edx
    0.00 :   90a15:       sub    $0x2,%edx
    0.00 :   90a18:       lea    0x10(%rdi,%rdx,8),%rdx
    0.00 :   90a1d:       cmp    %rdx,%r10
    0.00 :   90a20:       jne    90c72 <_IO_str_seekoff@@GLIBC_2.2.5+0x782>
    0.00 :   90a26:       mov    %rsi,%rdx
    0.00 :   90a29:       mov    0x10(%rax),%r12
    0.00 :   90a2d:       and    $0xfffffffffffffff8,%rdx
    0.00 :   90a31:       lea    (%rax,%rdx,1),%rcx
    0.00 :   90a35:       mov    0x8(%rcx),%r8
    0.00 :   90a39:       mov    %r8,%r9
    0.00 :   90a3c:       and    $0xfffffffffffffff8,%r9
    0.00 :   90a40:       and    $0x1,%esi
    0.00 :   90a43:       jne    90aa0 <_IO_str_seekoff@@GLIBC_2.2.5+0x5b0>
    0.00 :   90a45:       mov    (%rax),%rsi
    0.00 :   90a48:       sub    %rsi,%rax
    0.00 :   90a4b:       add    %rsi,%rdx
    0.00 :   90a4e:       mov    0x8(%rax),%r14
    0.00 :   90a52:       mov    %r14,%rsi
    0.00 :   90a55:       and    $0xfffffffffffffff8,%rsi
    0.00 :   90a59:       cmp    (%rax,%rsi,1),%rsi
    0.00 :   90a5d:       jne    90bd0 <_IO_str_seekoff@@GLIBC_2.2.5+0x6e0>
    0.00 :   90a63:       mov    0x10(%rax),%rsi
    0.00 :   90a67:       mov    0x18(%rax),%r13
    0.00 :   90a6b:       cmp    %rax,0x18(%rsi)
    0.00 :   90a6f:       jne    90b88 <_IO_str_seekoff@@GLIBC_2.2.5+0x698>
    0.00 :   90a75:       cmp    %rax,0x10(%r13)
    0.00 :   90a79:       jne    90b88 <_IO_str_seekoff@@GLIBC_2.2.5+0x698>
    0.00 :   90a7f:       cmp    $0x3ff,%r14
    0.00 :   90a86:       mov    %r13,0x18(%rsi)
    0.00 :   90a8a:       mov    %rsi,0x10(%r13)
    0.00 :   90a8e:       jbe    90aa0 <_IO_str_seekoff@@GLIBC_2.2.5+0x5b0>
    0.00 :   90a90:       mov    0x20(%rax),%r13
    0.00 :   90a94:       test   %r13,%r13
    0.00 :   90a97:       jne    90be0 <_IO_str_seekoff@@GLIBC_2.2.5+0x6f0>
    0.00 :   90a9d:       nopl   (%rax)
    0.00 :   90aa0:       cmp    %rcx,0x60(%rdi)
    0.00 :   90aa4:       je     90b70 <_IO_str_seekoff@@GLIBC_2.2.5+0x680>
    0.00 :   90aaa:       lea    (%rcx,%r9,1),%rsi
    0.00 :   90aae:       testb  $0x1,0x8(%rsi)
    0.00 :   90ab2:       jne    90b60 <_IO_str_seekoff@@GLIBC_2.2.5+0x670>
    0.00 :   90ab8:       add    %r9,%rdx
    0.00 :   90abb:       cmp    %r9,(%rsi)
    0.00 :   90abe:       jne    90bd0 <_IO_str_seekoff@@GLIBC_2.2.5+0x6e0>
    0.00 :   90ac4:       mov    0x10(%rcx),%rsi
    0.00 :   90ac8:       mov    0x18(%rcx),%r9
    0.00 :   90acc:       cmp    %rcx,0x18(%rsi)
    0.00 :   90ad0:       jne    90b88 <_IO_str_seekoff@@GLIBC_2.2.5+0x698>
    0.00 :   90ad6:       cmp    %rcx,0x10(%r9)
    0.00 :   90ada:       jne    90b88 <_IO_str_seekoff@@GLIBC_2.2.5+0x698>
    0.00 :   90ae0:       cmp    $0x3ff,%r8
    0.00 :   90ae7:       mov    %r9,0x18(%rsi)
    0.00 :   90aeb:       mov    %rsi,0x10(%r9)
    0.00 :   90aef:       ja     90b98 <_IO_str_seekoff@@GLIBC_2.2.5+0x6a8>
    0.00 :   90af5:       mov    0x70(%rdi),%rcx
    0.00 :   90af9:       cmp    $0x3ff,%rdx
    0.00 :   90b00:       mov    %rax,0x70(%rdi)
    0.00 :   90b04:       mov    %rax,0x18(%rcx)
    0.00 :   90b08:       jbe    90b1a <_IO_str_seekoff@@GLIBC_2.2.5+0x62a>
    0.00 :   90b0a:       movq   $0x0,0x20(%rax)
    0.00 :   90b12:       movq   $0x0,0x28(%rax)
    0.00 :   90b1a:       mov    %rdx,%rsi
    0.00 :   90b1d:       mov    %r11,0x18(%rax)
    0.00 :   90b21:       mov    %rcx,0x10(%rax)
  100.00 :   90b25:       or     $0x1,%rsi
    0.00 :   90b29:       mov    %rsi,0x8(%rax)
    0.00 :   90b2d:       mov    %rdx,(%rax,%rdx,1)
    0.00 :   90b31:       test   %r12,%r12
    0.00 :   90b34:       mov    %r12,%rax
    0.00 :   90b37:       jne    90a0c <_IO_str_seekoff@@GLIBC_2.2.5+0x51c>
    0.00 :   90b3d:       nopl   (%rax)
    0.00 :   90b40:       add    $0x8,%r10
    0.00 :   90b44:       lea    -0x8(%r10),%rax
    0.00 :   90b48:       cmp    %rax,%rbp
    0.00 :   90b4b:       jne    909fd <_IO_str_seekoff@@GLIBC_2.2.5+0x50d>
    0.00 :   90b51:       pop    %rbx
    0.00 :   90b52:       pop    %rbp
    0.00 :   90b53:       pop    %r12
    0.00 :   90b55:       pop    %r13
    0.00 :   90b57:       pop    %r14
    0.00 :   90b59:       retq
    0.00 :   90b5a:       nopw   0x0(%rax,%rax,1)
    0.00 :   90b60:       and    $0xfffffffffffffffe,%r8
    0.00 :   90b64:       mov    %r8,0x8(%rcx)
    0.00 :   90b68:       jmp    90af5 <_IO_str_seekoff@@GLIBC_2.2.5+0x605>
    0.00 :   90b6a:       nopw   0x0(%rax,%rax,1)
    0.00 :   90b70:       add    %r9,%rdx
    0.00 :   90b73:       or     $0x1,%rdx
    0.00 :   90b77:       mov    %rdx,0x8(%rax)
    0.00 :   90b7b:       mov    %rax,0x60(%rdi)
    0.00 :   90b7f:       jmp    90b31 <_IO_str_seekoff@@GLIBC_2.2.5+0x641>
    0.00 :   90b81:       nopl   0x0(%rax)
    0.00 :   90b88:       lea    0x1240ab(%rip),%rdi        # 1b4c3a <_libc_intl_domainname@@GLIBC_2.2.5+0xfa6>
    0.00 :   90b8f:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   90b94:       nopl   0x0(%rax)
    0.00 :   90b98:       mov    0x20(%rcx),%r8
    0.00 :   90b9c:       test   %r8,%r8
    0.00 :   90b9f:       je     90af5 <_IO_str_seekoff@@GLIBC_2.2.5+0x605>
    0.00 :   90ba5:       cmp    %rcx,0x28(%r8)
    0.00 :   90ba9:       jne    90c2a <_IO_str_seekoff@@GLIBC_2.2.5+0x73a>
    0.00 :   90bab:       mov    0x28(%rcx),%r9
    0.00 :   90baf:       cmp    %rcx,0x20(%r9)
    0.00 :   90bb3:       jne    90c2a <_IO_str_seekoff@@GLIBC_2.2.5+0x73a>
    0.00 :   90bb5:       cmpq   $0x0,0x20(%rsi)
    0.00 :   90bba:       je     90c36 <_IO_str_seekoff@@GLIBC_2.2.5+0x746>
    0.00 :   90bbc:       mov    %r9,0x28(%r8)
    0.00 :   90bc0:       mov    0x28(%rcx),%rcx
    0.00 :   90bc4:       mov    %r8,0x20(%rcx)
    0.00 :   90bc8:       jmpq   90af5 <_IO_str_seekoff@@GLIBC_2.2.5+0x605>
    0.00 :   90bcd:       nopl   (%rax)
    0.00 :   90bd0:       lea    0x124046(%rip),%rdi        # 1b4c1d <_libc_intl_domainname@@GLIBC_2.2.5+0xf89>
    0.00 :   90bd7:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   90bdc:       nopl   0x0(%rax)
    0.00 :   90be0:       cmp    %rax,0x28(%r13)
    0.00 :   90be4:       jne    90c2a <_IO_str_seekoff@@GLIBC_2.2.5+0x73a>
    0.00 :   90be6:       mov    0x28(%rax),%r14
    0.00 :   90bea:       cmp    %rax,0x20(%r14)
    0.00 :   90bee:       jne    90c2a <_IO_str_seekoff@@GLIBC_2.2.5+0x73a>
    0.00 :   90bf0:       cmpq   $0x0,0x20(%rsi)
    0.00 :   90bf5:       je     90c08 <_IO_str_seekoff@@GLIBC_2.2.5+0x718>
    0.00 :   90bf7:       mov    %r14,0x28(%r13)
    0.00 :   90bfb:       mov    0x28(%rax),%rsi
    0.00 :   90bff:       mov    %r13,0x20(%rsi)
    0.00 :   90c03:       jmpq   90aa0 <_IO_str_seekoff@@GLIBC_2.2.5+0x5b0>
    0.00 :   90c08:       cmp    %rax,%r13
    0.00 :   90c0b:       je     90c58 <_IO_str_seekoff@@GLIBC_2.2.5+0x768>
    0.00 :   90c0d:       mov    %r13,0x20(%rsi)
    0.00 :   90c11:       mov    0x20(%rax),%r13
    0.00 :   90c15:       mov    %r14,0x28(%rsi)
    0.00 :   90c19:       mov    %rsi,0x28(%r13)
    0.00 :   90c1d:       mov    0x28(%rax),%r13
    0.00 :   90c21:       mov    %rsi,0x20(%r13)
    0.00 :   90c25:       jmpq   90aa0 <_IO_str_seekoff@@GLIBC_2.2.5+0x5b0>
    0.00 :   90c2a:       lea    0x127767(%rip),%rdi        # 1b8398 <_libc_intl_domainname@@GLIBC_2.2.5+0x4704>
    0.00 :   90c31:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
    0.00 :   90c36:       cmp    %rcx,%r8
    0.00 :   90c39:       je     90c65 <_IO_str_seekoff@@GLIBC_2.2.5+0x775>
    0.00 :   90c3b:       mov    %r8,0x20(%rsi)
    0.00 :   90c3f:       mov    0x20(%rcx),%r8
    0.00 :   90c43:       mov    %r9,0x28(%rsi)
    0.00 :   90c47:       mov    %rsi,0x28(%r8)
    0.00 :   90c4b:       mov    0x28(%rcx),%rcx
    0.00 :   90c4f:       mov    %rsi,0x20(%rcx)
    0.00 :   90c53:       jmpq   90af5 <_IO_str_seekoff@@GLIBC_2.2.5+0x605>
    0.00 :   90c58:       mov    %rsi,0x28(%rsi)
    0.00 :   90c5c:       mov    %rsi,0x20(%rsi)
    0.00 :   90c60:       jmpq   90aa0 <_IO_str_seekoff@@GLIBC_2.2.5+0x5b0>
    0.00 :   90c65:       mov    %rsi,0x28(%rsi)
    0.00 :   90c69:       mov    %rsi,0x20(%rsi)
    0.00 :   90c6d:       jmpq   90af5 <_IO_str_seekoff@@GLIBC_2.2.5+0x605>
    0.00 :   90c72:       lea    0x1276ef(%rip),%rdi        # 1b8368 <_libc_intl_domainname@@GLIBC_2.2.5+0x46d4>
    0.00 :   90c79:       callq  909c0 <_IO_str_seekoff@@GLIBC_2.2.5+0x4d0>
 Percent |	Source code & Disassembly of ath10k_pci.ko for cache-misses (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          00000000000013a0 <ath10k_bus_pci_read32>:
         :          ath10k_bus_pci_read32():
  100.00 :   13a0:       callq  13a5 <ath10k_bus_pci_read32+0x5>
    0.00 :   13a5:       push   %rbp
    0.00 :   13a6:       mov    %rsp,%rbp
    0.00 :   13a9:       push   %r13
    0.00 :   13ab:       push   %r12
    0.00 :   13ad:       push   %rbx
    0.00 :   13ae:       mov    %esi,%r12d
    0.00 :   13b1:       mov    %rdi,%rbx
    0.00 :   13b4:       lea    0x4(%r12),%rcx
    0.00 :   13b9:       sub    $0x8,%rsp
    0.00 :   13bd:       mov    0x6ca8(%rdi),%r8
    0.00 :   13c4:       cmp    %r8,%rcx
    0.00 :   13c7:       ja     1427 <ath10k_bus_pci_read32+0x87>
    0.00 :   13c9:       cmpb   $0x0,0x72c1(%rdi)
    0.00 :   13d0:       jne    1403 <ath10k_bus_pci_read32+0x63>
    0.00 :   13d2:       mov    0x6ca0(%rbx),%rdi
    0.00 :   13d9:       add    %r12,%rdi
    0.00 :   13dc:       callq  13e1 <ath10k_bus_pci_read32+0x41>
    0.00 :   13e1:       cmpb   $0x0,0x72c1(%rbx)
    0.00 :   13e8:       je     13f8 <ath10k_bus_pci_read32+0x58>
    0.00 :   13ea:       mov    %rbx,%rdi
    0.00 :   13ed:       mov    %eax,-0x1c(%rbp)
    0.00 :   13f0:       callq  f90 <ath10k_pci_sleep.part.25>
    0.00 :   13f5:       mov    -0x1c(%rbp),%eax
    0.00 :   13f8:       add    $0x8,%rsp
    0.00 :   13fc:       pop    %rbx
    0.00 :   13fd:       pop    %r12
    0.00 :   13ff:       pop    %r13
    0.00 :   1401:       pop    %rbp
    0.00 :   1402:       retq
    0.00 :   1403:       callq  1220 <ath10k_pci_wake.part.32>
    0.00 :   1408:       test   %eax,%eax
    0.00 :   140a:       je     13d2 <ath10k_bus_pci_read32+0x32>
    0.00 :   140c:       mov    %eax,%ecx
    0.00 :   140e:       mov    %r12d,%edx
    0.00 :   1411:       mov    $0x0,%rsi
    0.00 :   1418:       mov    %rbx,%rdi
    0.00 :   141b:       callq  1420 <ath10k_bus_pci_read32+0x80>
    0.00 :   1420:       mov    $0xffffffff,%eax
    0.00 :   1425:       jmp    13f8 <ath10k_bus_pci_read32+0x58>
    0.00 :   1427:       mov    %r12d,%edx
    0.00 :   142a:       mov    $0x0,%rsi
    0.00 :   1431:       callq  1436 <ath10k_bus_pci_read32+0x96>
    0.00 :   1436:       add    $0x8,%rsp
    0.00 :   143a:       xor    %eax,%eax
    0.00 :   143c:       pop    %rbx
    0.00 :   143d:       pop    %r12
    0.00 :   143f:       pop    %r13
    0.00 :   1441:       pop    %rbp
    0.00 :   1442:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005936b0 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long)>:
         :            _ZN11onnxruntime8BFCArena5MergeEmm():
    0.00 :   5936b0:       push   %r14
    0.00 :   5936b2:       mov    %rdx,%r14
    0.00 :   5936b5:       push   %r13
    0.00 :   5936b7:       mov    %rsi,%r13
    0.00 :   5936ba:       push   %r12
    0.00 :   5936bc:       mov    %rdi,%r12
    0.00 :   5936bf:       push   %rbp
    0.00 :   5936c0:       push   %rbx
    0.00 :   5936c1:       sub    $0xb0,%rsp
    0.00 :   5936c8:       mov    %fs:0x28,%rax
    0.00 :   5936d1:       mov    %rax,0xa8(%rsp)
    0.00 :   5936d9:       xor    %eax,%eax
    0.00 :   5936db:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   5936e0:       mov    %r14,%rsi
    0.00 :   5936e3:       mov    %r12,%rdi
    0.00 :   5936e6:       mov    %rax,%rbx
    0.00 :   5936e9:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   5936ee:       cmpq   $0xffffffffffffffff,0x10(%rbx)
    0.00 :   5936f3:       jne    59375c <onnxruntime::BFCArena::Merge(unsigned long, unsigned long)+0xac>
    0.00 :   5936f5:       cmpq   $0xffffffffffffffff,0x10(%rax)
    0.00 :   5936fa:       mov    %rax,%rbp
    0.00 :   5936fd:       jne    59375c <onnxruntime::BFCArena::Merge(unsigned long, unsigned long)+0xac>
  100.00 :   5936ff:       mov    0x28(%rax),%rsi
    0.00 :   593703:       mov    %rsi,0x28(%rbx)
    0.00 :   593707:       cmp    %r13,0x20(%rax)
    0.00 :   59370b:       jne    5937e5 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long)+0x135>
    0.00 :   593711:       cmp    $0xffffffffffffffff,%rsi
    0.00 :   593715:       je     593723 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long)+0x73>
    0.00 :   593717:       mov    %r12,%rdi
    0.00 :   59371a:       callq  58ef00 <onnxruntime::BFCArena::ChunkFromHandle(unsigned long)>
    0.00 :   59371f:       mov    %r13,0x20(%rax)
    0.00 :   593723:       mov    0x0(%rbp),%rax
    0.00 :   593727:       add    %rax,(%rbx)
    0.00 :   59372a:       mov    %r14,%rsi
    0.00 :   59372d:       mov    %r12,%rdi
    0.00 :   593730:       callq  593650 <onnxruntime::BFCArena::DeleteChunk(unsigned long)>
    0.00 :   593735:       mov    0xa8(%rsp),%rax
    0.00 :   59373d:       xor    %fs:0x28,%rax
    0.00 :   593746:       jne    59386e <onnxruntime::BFCArena::Merge(unsigned long, unsigned long)+0x1be>
    0.00 :   59374c:       add    $0xb0,%rsp
    0.00 :   593753:       pop    %rbx
    0.00 :   593754:       pop    %rbp
    0.00 :   593755:       pop    %r12
    0.00 :   593757:       pop    %r13
    0.00 :   593759:       pop    %r14
    0.00 :   59375b:       retq
    0.00 :   59375c:       mov    $0xa0,%edi
    0.00 :   593761:       lea    0x20(%rsp),%rbx
    0.00 :   593766:       mov    %rsp,%rbp
    0.00 :   593769:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   59376e:       mov    %rbx,%rdi
    0.00 :   593771:       mov    %rax,%r13
    0.00 :   593774:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   593779:       mov    %rbp,%rdi
    0.00 :   59377c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   593781:       lea    0x40(%rsp),%r12
    0.00 :   593786:       mov    %rbp,%r8
    0.00 :   593789:       lea    0x2f8970(%rip),%rcx        # 88c100 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   593790:       mov    $0x1aa,%edx
    0.00 :   593795:       lea    0x2f7e8c(%rip),%rsi        # 88b628 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   59379c:       mov    %r12,%rdi
    0.00 :   59379f:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5937a4:       mov    %rbx,%rcx
    0.00 :   5937a7:       lea    0x2f82e2(%rip),%rdx        # 88ba90 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x4f0>
    0.00 :   5937ae:       mov    %r12,%rsi
    0.00 :   5937b1:       mov    %r13,%rdi
    0.00 :   5937b4:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5937b9:       mov    %r12,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5937bc:       add    $0x10,%rbx
    0.00 :   5937c0:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5937c5:       mov    %rbp,%rdi
    0.00 :   5937c8:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5937cd:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5937d2:       cmp    %rbx,%rdi
    0.00 :   5937d5:       je     ada0e <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]+0x4c>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5937db:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5937e0:       jmpq   ada0e <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]+0x4c>
    0.00 :   5937e5:       mov    $0xa0,%edi
    0.00 :   5937ea:       lea    0x20(%rsp),%rbx
    0.00 :   5937ef:       mov    %rsp,%rbp
    0.00 :   5937f2:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5937f7:       mov    %rbx,%rdi
    0.00 :   5937fa:       mov    %rax,%r13
    0.00 :   5937fd:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   593802:       mov    %rbp,%rdi
    0.00 :   593805:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   59380a:       lea    0x40(%rsp),%r12
    0.00 :   59380f:       mov    %rbp,%r8
    0.00 :   593812:       lea    0x2f88e7(%rip),%rcx        # 88c100 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long)::__PRETTY_FUNCTION__>
    0.00 :   593819:       mov    $0x1b6,%edx
    0.00 :   59381e:       lea    0x2f7e03(%rip),%rsi        # 88b628 <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x88>
    0.00 :   593825:       mov    %r12,%rdi
    0.00 :   593828:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   59382d:       mov    %rbx,%rcx
    0.00 :   593830:       lea    0x2f8278(%rip),%rdx        # 88baaf <typeinfo name for std::_Sp_counted_deleter<onnxruntime::IAllocator*, std::default_delete<onnxruntime::IAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>+0x50f>
    0.00 :   593837:       mov    %r12,%rsi
    0.00 :   59383a:       mov    %r13,%rdi
    0.00 :   59383d:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   593842:       mov    %r12,%rdi
    0.00 :   593845:       add    $0x10,%rbx
    0.00 :   593849:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   59384e:       mov    %rbp,%rdi
    0.00 :   593851:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   593856:       mov    0x20(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   59385b:       cmp    %rbx,%rdi
    0.00 :   59385e:       je     ad9c2 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]>
    0.00 :   593864:       callq  53300 <operator delete(void*)@plt>
    0.00 :   593869:       jmpq   ad9c2 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]>
    0.00 :   59386e:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   593873:       mov    %rax,%r14
    0.00 :   593876:       jmpq   ad9d8 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]+0x16>
    0.00 :   59387b:       mov    %rax,%r12
    0.00 :   59387e:       jmpq   ad9e3 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]+0x21>
    0.00 :   593883:       mov    %rax,%r12
    0.00 :   593886:       jmpq   ad9eb <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]+0x29>
    0.00 :   59388b:       mov    %rax,%r14
    0.00 :   59388e:       jmpq   ada24 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]+0x62>
    0.00 :   593893:       mov    %rax,%r12
    0.00 :   593896:       jmpq   ada2f <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]+0x6d>
    0.00 :   59389b:       mov    %rax,%r12
    0.00 :   59389e:       jmpq   ada37 <onnxruntime::BFCArena::Merge(unsigned long, unsigned long) [clone .cold.259]+0x75>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000027c810 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)>:
         :            _ZNSt6vectorIlSaIlEE17_M_default_appendEm():
         :            template<typename _Tp, typename _Alloc>
         :            void
         :            vector<_Tp, _Alloc>::
         :            _M_default_append(size_type __n)
         :            {
         :            if (__n != 0)
    0.00 :   27c810:       test   %rsi,%rsi
    0.00 :   27c813:       je     27c850 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)+0x40>
         :            {
         :            const size_type __size = size();
    0.00 :   27c815:       mov    0x8(%rdi),%rdx
         :            size_type __navail = size_type(this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_finish);
    0.00 :   27c819:       mov    0x10(%rdi),%rax
    0.00 :   27c81d:       sub    %rdx,%rax
    0.00 :   27c820:       sar    $0x3,%rax
         :
         :            if (__size > max_size() || __navail > max_size() - __size)
         :            __builtin_unreachable();
         :
         :            if (__navail >= __n)
    0.00 :   27c824:       cmp    %rax,%rsi
    0.00 :   27c827:       ja     27c858 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)+0x48>
    0.00 :   27c829:       xor    %eax,%eax
    0.00 :   27c82b:       nopl   0x0(%rax,%rax,1)
         :            __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
         :            {
         :            const _Tp __tmp = __value;
         :            for (__decltype(__n + 0) __niter = __n;
         :            __niter > 0; --__niter, (void) ++__first)
         :            *__first = __tmp;
    0.00 :   27c830:       movq   $0x0,(%rdx,%rax,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   27c838:       add    $0x1,%rax
    0.00 :   27c83c:       cmp    %rax,%rsi
    0.00 :   27c83f:       jne    27c830 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)+0x20>
         :            {
         :            _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
         :            this->_M_impl._M_finish =
    0.00 :   27c841:       lea    (%rdx,%rsi,8),%rax
    0.00 :   27c845:       mov    %rax,0x8(%rdi)
    0.00 :   27c849:       retq
    0.00 :   27c84a:       nopw   0x0(%rax,%rax,1)
    0.00 :   27c850:       retq
    0.00 :   27c851:       nopl   0x0(%rax)
         :            if (__size > max_size() || __navail > max_size() - __size)
    0.00 :   27c858:       movabs $0x1fffffffffffffff,%rax
         :            vector<_Tp, _Alloc>::
    0.00 :   27c862:       push   %r15
    0.00 :   27c864:       push   %r14
    0.00 :   27c866:       push   %r13
    0.00 :   27c868:       push   %r12
    0.00 :   27c86a:       mov    %rdi,%r12
    0.00 :   27c86d:       push   %rbp
    0.00 :   27c86e:       mov    %rsi,%rbp
    0.00 :   27c871:       push   %rbx
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   27c872:       mov    %rdx,%rbx
         :            if (__size > max_size() || __navail > max_size() - __size)
    0.00 :   27c875:       mov    %rax,%rdx
         :            vector<_Tp, _Alloc>::
    0.00 :   27c878:       sub    $0x8,%rsp
    0.00 :   27c87c:       sub    (%rdi),%rbx
    0.00 :   27c87f:       mov    %rbx,%r14
    0.00 :   27c882:       sar    $0x3,%r14
         :            if (__size > max_size() || __navail > max_size() - __size)
    0.00 :   27c886:       sub    %r14,%rdx
         :
         :            // Called by _M_fill_insert, _M_insert_aux etc.
         :            size_type
         :            _M_check_len(size_type __n, const char* __s) const
         :            {
         :            if (max_size() - size() < __n)
    0.00 :   27c889:       cmp    %rsi,%rdx
    0.00 :   27c88c:       jb     27c927 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)+0x117>
    0.00 :   27c892:       cmp    %r14,%rsi
    0.00 :   27c895:       mov    %r14,%r13
    0.00 :   27c898:       cmovae %rsi,%r13
    0.00 :   27c89c:       add    %r14,%r13
    0.00 :   27c89f:       cmp    %rax,%r13
    0.00 :   27c8a2:       cmova  %rax,%r13
    0.00 :   27c8a6:       shl    $0x3,%r13
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   27c8aa:       mov    %r13,%rdi
    0.00 :   27c8ad:       callq  53340 <operator new(unsigned long)@plt>
         :            _M_check_len(__n, "vector::_M_default_append");
         :            pointer __new_start(this->_M_allocate(__len));
         :            pointer __destroy_from = pointer();
         :            __try
         :            {
         :            std::__uninitialized_default_n_a(__new_start + __size,
    0.00 :   27c8b2:       lea    (%rax,%rbx,1),%rdx
    0.00 :   27c8b6:       mov    %rax,%r15
    0.00 :   27c8b9:       xor    %ebx,%ebx
    0.00 :   27c8bb:       nopl   0x0(%rax,%rax,1)
         :            *__first = __tmp;
    0.00 :   27c8c0:       movq   $0x0,(%rdx,%rbx,8)
         :            __niter > 0; --__niter, (void) ++__first)
  100.00 :   27c8c8:       add    $0x1,%rbx
    0.00 :   27c8cc:       cmp    %rbx,%rbp
    0.00 :   27c8cf:       jne    27c8c0 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)+0xb0>
         :            __n, _M_get_Tp_allocator());
         :            __destroy_from = __new_start + __size;
         :            std::__uninitialized_move_if_noexcept_a(
    0.00 :   27c8d1:       mov    0x8(%r12),%rdx
    0.00 :   27c8d6:       mov    (%r12),%rbp
         :            if (_Num)
    0.00 :   27c8da:       cmp    %rbp,%rdx
    0.00 :   27c8dd:       je     27c920 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)+0x110>
         :            const ptrdiff_t _Num = __last - __first;
    0.00 :   27c8df:       sub    %rbp,%rdx
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   27c8e2:       mov    %rbp,%rsi
    0.00 :   27c8e5:       mov    %r15,%rdi
    0.00 :   27c8e8:       callq  53aa0 <memmove@plt>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   27c8ed:       mov    %rbp,%rdi
    0.00 :   27c8f0:       callq  53300 <operator delete(void*)@plt>
         :            _M_get_Tp_allocator());
         :            _M_deallocate(this->_M_impl._M_start,
         :            this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start);
         :            this->_M_impl._M_start = __new_start;
         :            this->_M_impl._M_finish = __new_start + __size + __n;
    0.00 :   27c8f5:       add    %r14,%rbx
         :            this->_M_impl._M_end_of_storage = __new_start + __len;
    0.00 :   27c8f8:       add    %r15,%r13
         :            this->_M_impl._M_start = __new_start;
    0.00 :   27c8fb:       mov    %r15,(%r12)
         :            this->_M_impl._M_finish = __new_start + __size + __n;
    0.00 :   27c8ff:       lea    (%r15,%rbx,8),%rax
         :            this->_M_impl._M_end_of_storage = __new_start + __len;
    0.00 :   27c903:       mov    %r13,0x10(%r12)
         :            this->_M_impl._M_finish = __new_start + __size + __n;
    0.00 :   27c908:       mov    %rax,0x8(%r12)
         :            }
         :            }
         :            }
    0.00 :   27c90d:       add    $0x8,%rsp
    0.00 :   27c911:       pop    %rbx
    0.00 :   27c912:       pop    %rbp
    0.00 :   27c913:       pop    %r12
    0.00 :   27c915:       pop    %r13
    0.00 :   27c917:       pop    %r14
    0.00 :   27c919:       pop    %r15
    0.00 :   27c91b:       retq
    0.00 :   27c91c:       nopl   0x0(%rax)
         :            if (__p)
    0.00 :   27c920:       test   %rbp,%rbp
    0.00 :   27c923:       je     27c8f5 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)+0xe5>
    0.00 :   27c925:       jmp    27c8ed <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)+0xdd>
         :            __throw_length_error(__N(__s));
    0.00 :   27c927:       lea    0x5a8b24(%rip),%rdi        # 825452 <_fini+0x1ba>
    0.00 :   27c92e:       callq  52d80 <std::__throw_length_error(char const*)@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005adde0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)>:
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5adde0:       push   %rbp
    0.00 :   5adde1:       mov    %ecx,%eax
    0.00 :   5adde3:       mov    %rsp,%rbp
    0.00 :   5adde6:       push   %r15
    0.00 :   5adde8:       push   %r14
    0.00 :   5addea:       push   %r13
    0.00 :   5addec:       push   %r12
    0.00 :   5addee:       push   %rbx
    0.00 :   5addef:       sub    $0x318,%rsp
    0.00 :   5addf6:       mov    %rdi,-0x2e8(%rbp)
    0.00 :   5addfd:       mov    0x10(%rbp),%r15
    0.00 :   5ade01:       mov    %rdx,-0x2f0(%rbp)
    0.00 :   5ade08:       mov    0x18(%rbp),%r12d
    0.00 :   5ade0c:       mov    %ecx,-0x2fc(%rbp)
    0.00 :   5ade12:       mov    %r9,-0x2f8(%rbp)
    0.00 :   5ade19:       mov    %fs:0x28,%rcx
    0.00 :   5ade22:       mov    %rcx,-0x38(%rbp)
    0.00 :   5ade26:       xor    %ecx,%ecx
    0.00 :   5ade28:       cmp    $0xffffffff,%eax
    0.00 :   5ade2b:       je     5ae788 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9a8>
    0.00 :   5ade31:       mov    %r15,%rdi
    0.00 :   5ade34:       mov    %rsi,%rbx
    0.00 :   5ade37:       mov    %r8,%r13
    0.00 :   5ade3a:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5ade3f:       mov    %rax,%r14
    0.00 :   5ade42:       test   %rax,%rax
    0.00 :   5ade45:       js     5ae7d0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9f0>
    0.00 :   5ade4b:       mov    0x0(%r13),%rax
    0.00 :   5ade4f:       mov    %r13,%rdi
    0.00 :   5ade52:       callq  *0x18(%rax)
    0.00 :   5ade55:       lea    -0x2d8(%rbp),%rcx
    0.00 :   5ade5c:       mov    $0x100,%edx
    0.00 :   5ade61:       mov    %r14,%rdi
    0.00 :   5ade64:       mov    %rax,%rsi
    0.00 :   5ade67:       callq  58cef0 <onnxruntime::IAllocator::CalcMemSizeForArrayWithAlignment(unsigned long, unsigned long, unsigned long, unsigned long*)>
    0.00 :   5ade6c:       test   %al,%al
    0.00 :   5ade6e:       je     5ae7f0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xa10>
    0.00 :   5ade74:       test   %r12b,%r12b
    0.00 :   5ade77:       je     5ae810 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xa30>
    0.00 :   5ade7d:       mov    -0x2f0(%rbp),%rax
    0.00 :   5ade84:       mov    0x18(%rax),%r14
    0.00 :   5ade88:       test   %r14,%r14
    0.00 :   5ade8b:       jne    5aebe6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe06>
    0.00 :   5ade91:       mov    -0x2f8(%rbp),%rdx
    0.00 :   5ade98:       lea    -0x2d0(%rbp),%rdi
    0.00 :   5ade9f:       mov    %rbx,%rsi
    0.00 :   5adea2:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
         :            { }
         :
         :            __shared_ptr(__shared_ptr&& __r) noexcept
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5adea7:       mov    -0x2d0(%rbp),%rax
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5adeae:       mov    -0x2c8(%rbp),%rcx
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5adeb5:       mov    %rax,-0x310(%rbp)
    0.00 :   5adebc:       mov    (%rax),%rax
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5adebf:       mov    %rcx,-0x308(%rbp)
    0.00 :   5adec6:       mov    0x20(%rax),%rax
    0.00 :   5adeca:       cmp    0x679c2f(%rip),%rax        # c27b00 <.got+0x40>
    0.00 :   5aded1:       jne    5ae990 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xbb0>
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5aded7:       movq   $0x0,-0x2b0(%rbp)
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5adee2:       movq   $0x0,-0x2a8(%rbp)
         :            class __shared_ptr
    0.00 :   5adeed:       mov    -0x2f0(%rbp),%rax
         :            if (__tmp != _M_pi)
    0.00 :   5adef4:       mov    0x20(%rax),%rdi
         :            class __shared_ptr
    0.00 :   5adef8:       mov    %r14,0x18(%rax)
         :            if (__tmp != _M_pi)
    0.00 :   5adefc:       mov    %rax,%r14
    0.00 :   5adeff:       test   %rdi,%rdi
    0.00 :   5adf02:       je     5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
         :            _M_pi->_M_release();
    0.00 :   5adf04:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            _M_pi = __tmp;
    0.00 :   5adf09:       movq   $0x0,0x20(%r14)
         :            ~__shared_count() noexcept
    0.00 :   5adf11:       mov    -0x2a8(%rbp),%r14
         :            if (_M_pi != nullptr)
    0.00 :   5adf18:       test   %r14,%r14
    0.00 :   5adf1b:       je     5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5adf1d:       mov    0x679fe4(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5adf24:       test   %r12,%r12
    0.00 :   5adf27:       je     5ae960 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb80>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5adf2d:       mov    $0xffffffff,%eax
    0.00 :   5adf32:       lock xadd %eax,0x8(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5adf38:       cmp    $0x1,%eax
    0.00 :   5adf3b:       je     5aead8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xcf8>
    0.00 :   5adf41:       mov    -0x2fc(%rbp),%esi
    0.00 :   5adf47:       mov    %rbx,%rdi
    0.00 :   5adf4a:       callq  5a9500 <onnxruntime::ExecutionFrame::GetAllocationPlan(int)>
    0.00 :   5adf4f:       mov    0x88(%rbx),%rcx
    0.00 :   5adf56:       test   %rcx,%rcx
    0.00 :   5adf59:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5adf5f:       cmpl   $0x4,(%rax)
    0.00 :   5adf62:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5adf68:       mov    (%rcx),%r12
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5adf6b:       mov    0x8(%rcx),%rdx
    0.00 :   5adf6f:       movabs $0xaaaaaaaaaaaaaaab,%rax
    0.00 :   5adf79:       sub    %r12,%rdx
    0.00 :   5adf7c:       sar    $0x3,%rdx
    0.00 :   5adf80:       imul   %rax,%rdx
    0.00 :   5adf84:       test   %rdx,%rdx
    0.00 :   5adf87:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :            _ZeqRK13OrtMemoryInfoS1_():
    0.00 :   5adf8d:       mov    -0x2f8(%rbp),%rax
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5adf94:       mov    %r15,%r9
    0.00 :   5adf97:       xor    %r14d,%r14d
    0.00 :   5adf9a:       mov    %r13,%r15
    0.00 :   5adf9d:       mov    -0x2f0(%rbp),%r13
    0.00 :   5adfa4:       mov    %rbx,-0x2f0(%rbp)
         :            _ZeqRK13OrtMemoryInfoS1_():
    0.00 :   5adfab:       mov    0xc(%rax),%r8d
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5adfaf:       mov    %rax,%rbx
    0.00 :   5adfb2:       jmp    5adfc9 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1e9>
    0.00 :   5adfb4:       nopl   0x0(%rax)
    0.00 :   5adfb8:       add    $0x1,%r14
         :            size() const _GLIBCXX_NOEXCEPT
    0.00 :   5adfbc:       add    $0x18,%r12
    0.00 :   5adfc0:       cmp    %rdx,%r14
    0.00 :   5adfc3:       je     5ae970 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb90>
         :            _ZeqRK13OrtMemoryInfoS1_():
    0.00 :   5adfc9:       cmp    %r8d,0xc(%r12)
    0.00 :   5adfce:       jne    5adfb8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1d8>
    0.00 :   5adfd0:       mov    0x10(%rbx),%eax
    0.00 :   5adfd3:       cmp    %eax,0x10(%r12)
    0.00 :   5adfd8:       jne    5adfb8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1d8>
    0.00 :   5adfda:       mov    0x8(%rbx),%eax
    0.00 :   5adfdd:       cmp    %eax,0x8(%r12)
    0.00 :   5adfe2:       jne    5adfb8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1d8>
    0.00 :   5adfe4:       mov    (%rbx),%rsi
    0.00 :   5adfe7:       mov    (%r12),%rdi
    0.00 :   5adfeb:       mov    %rdx,-0x330(%rbp)
    0.00 :   5adff2:       mov    %r9,-0x328(%rbp)
    0.00 :   5adff9:       mov    %r8d,-0x320(%rbp)
    0.00 :   5ae000:       mov    %rcx,-0x318(%rbp)
    0.00 :   5ae007:       callq  537b0 <strcmp@plt>
    0.00 :   5ae00c:       mov    -0x318(%rbp),%rcx
    0.00 :   5ae013:       mov    -0x320(%rbp),%r8d
    0.00 :   5ae01a:       test   %eax,%eax
    0.00 :   5ae01c:       mov    -0x328(%rbp),%r9
    0.00 :   5ae023:       mov    -0x330(%rbp),%rdx
    0.00 :   5ae02a:       jne    5adfb8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x1d8>
    0.00 :   5ae02c:       mov    -0x2f0(%rbp),%rbx
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5ae033:       shl    $0x6,%r14
    0.00 :   5ae037:       mov    %r13,-0x2f0(%rbp)
    0.00 :   5ae03e:       mov    %r15,%r13
    0.00 :   5ae041:       mov    %r9,%r15
    0.00 :   5ae044:       add    0x18(%rcx),%r14
    0.00 :   5ae048:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :
         :            /// Explicit specialization for short.
         :            _Cxx_hashtable_define_trivial_hash(short)
         :
         :            /// Explicit specialization for int.
         :            _Cxx_hashtable_define_trivial_hash(int)
    0.00 :   5ae04e:       movslq -0x2fc(%rbp),%rax
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            find(const key_type& __k) const
         :            -> const_iterator
         :            {
         :            __hash_code __code = this->_M_hash_code(__k);
         :            std::size_t __n = _M_bucket_index(__k, __code);
    0.00 :   5ae055:       mov    0x8(%r14),%rdi
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   5ae059:       xor    %edx,%edx
    0.00 :   5ae05b:       mov    %rax,%r10
    0.00 :   5ae05e:       div    %rdi
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __n, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__n];
    0.00 :   5ae061:       mov    (%r14),%rax
    0.00 :   5ae064:       mov    (%rax,%rdx,8),%r9
  100.00 :   5ae068:       mov    %rdx,%r8
         :            if (!__prev_p)
    0.00 :   5ae06b:       test   %r9,%r9
    0.00 :   5ae06e:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   5ae074:       mov    (%r9),%rcx
    0.00 :   5ae077:       mov    -0x2f0(%rbp),%rax
    0.00 :   5ae07e:       mov    0x8(%rcx),%esi
    0.00 :   5ae081:       mov    %rax,%r11
    0.00 :   5ae084:       jmp    5ae0b6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2d6>
    0.00 :   5ae086:       nopw   %cs:0x0(%rax,%rax,1)
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
    0.00 :   5ae090:       mov    (%rcx),%rax
    0.00 :   5ae093:       test   %rax,%rax
    0.00 :   5ae096:       je     5aeb48 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd68>
         :            std::size_t
         :            _M_bucket_index(const __node_type* __p, std::size_t __n) const
         :            noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
         :            && noexcept(declval<const _H2&>()((__hash_code)0,
         :            (std::size_t)0)) )
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }
    0.00 :   5ae09c:       mov    0x8(%rax),%esi
         :            { return __num % __den; }
    0.00 :   5ae09f:       mov    %rcx,%r9
    0.00 :   5ae0a2:       xor    %edx,%edx
    0.00 :   5ae0a4:       mov    %rax,%rcx
    0.00 :   5ae0a7:       movslq %esi,%rax
    0.00 :   5ae0aa:       div    %rdi
    0.00 :   5ae0ad:       cmp    %rdx,%r8
    0.00 :   5ae0b0:       jne    5aeb48 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd68>
         :            if (this->_M_equals(__k, __code, __p))
    0.00 :   5ae0b6:       cmp    %esi,%r10d
    0.00 :   5ae0b9:       jne    5ae090 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x2b0>
         :            return static_cast<__node_type*>(__before_n->_M_nxt);
    0.00 :   5ae0bb:       mov    (%r9),%rax
    0.00 :   5ae0be:       mov    %r11,-0x2f0(%rbp)
    0.00 :   5ae0c5:       mov    %rax,-0x328(%rbp)
         :            return __p ? const_iterator(__p) : end();
    0.00 :   5ae0cc:       test   %rax,%rax
    0.00 :   5ae0cf:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :            *  past-the-end ( @c end() ) iterator.
         :            */
         :
         :            iterator
         :            find(const key_type& __x)
         :            { return _M_t.find(__x); }
    0.00 :   5ae0d5:       mov    -0x2f8(%rbp),%rsi
    0.00 :   5ae0dc:       lea    0x98(%rbx),%rdi
    0.00 :   5ae0e3:       callq  5a8f60 <std::_Rb_tree<OrtMemoryInfo, std::pair<OrtMemoryInfo const, std::unique_ptr<void, onnxruntime::BufferDeleter> >, std::_Select1st<std::pair<OrtMemoryInfo const, std::unique_ptr<void, onnxruntime::BufferDeleter> > >, std::less<OrtMemoryInfo>, std::allocator<std::pair<OrtMemoryInfo const, std::unique_ptr<void, onnxruntime::BufferDeleter> > > >::find(OrtMemoryInfo const&)>
         :            begin() const _GLIBCXX_NOEXCEPT
         :            { return const_iterator(this->_M_impl._M_header._M_left); }
         :
         :            iterator
         :            end() _GLIBCXX_NOEXCEPT
         :            { return iterator(&this->_M_impl._M_header); }
    0.00 :   5ae0e8:       lea    0xa0(%rbx),%rdx
    0.00 :   5ae0ef:       cmp    %rdx,%rax
    0.00 :   5ae0f2:       je     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5ae0f8:       mov    -0x328(%rbp),%rsi
    0.00 :   5ae0ff:       mov    -0x2d8(%rbp),%rcx
    0.00 :   5ae106:       cmp    %rcx,0x18(%rsi)
    0.00 :   5ae10a:       je     5aeb78 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd98>
    0.00 :   5ae110:       mov    0x48(%rbx),%rax
    0.00 :   5ae114:       mov    0x210(%rax),%rax
    0.00 :   5ae11b:       mov    0x28(%rax),%edx
    0.00 :   5ae11e:       test   %edx,%edx
    0.00 :   5ae120:       jg     5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
         :            #if __cplusplus < 201103L
         :            _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
         :            : allocator_type(__a), _M_p(__dat) { }
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae126:       lea    -0x290(%rbp),%rcx
         :            void
         :            _M_construct_aux(_InIterator __beg, _InIterator __end,
         :            std::__false_type)
         :            {
         :            typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae12d:       lea    0x2e1943(%rip),%rdx        # 88fa77 <std::piecewise_construct+0x19a>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae134:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae138:       lea    -0x3f(%rdx),%rsi
    0.00 :   5ae13c:       mov    %rcx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae13f:       mov    %rcx,%r14
    0.00 :   5ae142:       mov    %rcx,-0x330(%rbp)
    0.00 :   5ae149:       mov    %rax,-0x290(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae150:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ae155:       lea    0x2e22ec(%rip),%rdx        # 890448 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)::__FUNCTION__+0x28>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae15c:       lea    0x38(%r14),%rax
    0.00 :   5ae160:       movl   $0x183,-0x270(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae16a:       lea    0x28(%r14),%rdi
    0.00 :   5ae16e:       lea    -0x28(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae172:       mov    %rax,-0x268(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae179:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ae17e:       mov    0x48(%rbx),%rdx
    0.00 :   5ae182:       lea    0x67ab1f(%rip),%rax        # c28ca8 <onnxruntime::logging::Category::onnxruntime>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae189:       lea    -0x230(%rbp),%r14
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ae190:       movq   $0x0,-0x248(%rbp)
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae19b:       mov    -0x290(%rbp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae1a2:       lea    0x20(%r14),%rdi
    0.00 :   5ae1a6:       movq   $0x0,-0x240(%rbp)
    0.00 :   5ae1b1:       mov    0x210(%rdx),%rdx
    0.00 :   5ae1b8:       mov    (%rax),%rax
    0.00 :   5ae1bb:       movq   $0x0,-0x238(%rbp)
    0.00 :   5ae1c6:       movl   $0x0,-0x228(%rbp)
    0.00 :   5ae1d0:       mov    %rdx,-0x230(%rbp)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae1d7:       mov    -0x288(%rbp),%rdx
    0.00 :   5ae1de:       mov    %rax,-0x220(%rbp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae1e5:       lea    0x30(%r14),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae1e9:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae1ec:       mov    %rax,-0x210(%rbp)
    0.00 :   5ae1f3:       movl   $0x0,-0x218(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae1fd:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ae202:       mov    -0x270(%rbp),%eax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae208:       mov    -0x268(%rbp),%rsi
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae20f:       lea    0x48(%r14),%rdi
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae213:       mov    -0x260(%rbp),%rdx
    0.00 :   5ae21a:       mov    %eax,-0x1f0(%rbp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae220:       lea    0x58(%r14),%rax
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae224:       add    %rsi,%rdx
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae227:       mov    %rax,-0x1e8(%rbp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae22e:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ae233:       mov    -0x240(%rbp),%rax
    0.00 :   5ae23a:       mov    -0x248(%rbp),%rdx
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ae241:       movq   $0x0,-0x1c8(%rbp)
    0.00 :   5ae24c:       movq   $0x0,-0x1c0(%rbp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ae257:       mov    %rax,%r12
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ae25a:       mov    %rax,-0x320(%rbp)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ae261:       movq   $0x0,-0x1b8(%rbp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ae26c:       sub    %rdx,%r12
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5ae26f:       mov    %r12,%rax
    0.00 :   5ae272:       sar    $0x5,%rax
    0.00 :   5ae276:       je     5aebbe <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdde>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   5ae27c:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5ae286:       cmp    %rdx,%rax
    0.00 :   5ae289:       ja     5aec8a <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xeaa>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5ae28f:       mov    %r12,%rdi
    0.00 :   5ae292:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5ae297:       mov    %rax,-0x338(%rbp)
    0.00 :   5ae29e:       mov    -0x240(%rbp),%rax
    0.00 :   5ae2a5:       mov    -0x248(%rbp),%rdx
    0.00 :   5ae2ac:       mov    %rax,-0x320(%rbp)
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ae2b3:       mov    -0x338(%rbp),%rsi
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ae2ba:       lea    (%rsi,%r12,1),%rax
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ae2be:       mov    %rsi,-0x1c8(%rbp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5ae2c5:       mov    %rsi,-0x1c0(%rbp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ae2cc:       mov    %rax,-0x1b8(%rbp)
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5ae2d3:       cmp    %rdx,-0x320(%rbp)
    0.00 :   5ae2da:       je     5aebce <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xdee>
         :            _ForwardIterator __cur = __result;
    0.00 :   5ae2e0:       mov    %rsi,-0x318(%rbp)
    0.00 :   5ae2e7:       mov    %rdx,%r12
    0.00 :   5ae2ea:       nopw   0x0(%rax,%rax,1)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae2f0:       mov    -0x318(%rbp),%rcx
    0.00 :   5ae2f7:       lea    0x10(%rcx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae2fb:       mov    %rcx,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae2fe:       mov    %rax,(%rcx)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ae301:       mov    (%r12),%rsi
    0.00 :   5ae305:       mov    0x8(%r12),%rdx
    0.00 :   5ae30a:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae30d:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5ae312:       addq   $0x20,-0x318(%rbp)
    0.00 :   5ae31a:       add    $0x20,%r12
    0.00 :   5ae31e:       cmp    %r12,-0x320(%rbp)
    0.00 :   5ae325:       jne    5ae2f0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x510>
         :            this->_M_impl._M_finish =
    0.00 :   5ae327:       mov    -0x318(%rbp),%rax
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5ae32e:       lea    0xf0(%r14),%rdi
    0.00 :   5ae335:       mov    %rax,-0x1c0(%rbp)
    0.00 :   5ae33c:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5ae341:       mov    0x6797e0(%rip),%rax        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5ae348:       xor    %esi,%esi
    0.00 :   5ae34a:       movq   $0x0,-0x68(%rbp)
    0.00 :   5ae352:       movq   $0x0,-0x58(%rbp)
    0.00 :   5ae35a:       add    $0x10,%rax
    0.00 :   5ae35e:       movq   $0x0,-0x50(%rbp)
    0.00 :   5ae366:       mov    %rax,-0x140(%rbp)
    0.00 :   5ae36d:       xor    %eax,%eax
    0.00 :   5ae36f:       mov    %ax,-0x60(%rbp)
    0.00 :   5ae373:       mov    0x679a26(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5ae37a:       movq   $0x0,-0x48(%rbp)
    0.00 :   5ae382:       mov    0x8(%rax),%r12
    0.00 :   5ae386:       mov    0x10(%rax),%rax
    0.00 :   5ae38a:       movq   $0x0,-0x40(%rbp)
    0.00 :   5ae392:       mov    -0x18(%r12),%rdx
    0.00 :   5ae397:       mov    %r12,-0x1b0(%rbp)
    0.00 :   5ae39e:       mov    %rax,-0x318(%rbp)
    0.00 :   5ae3a5:       lea    0x80(%r14,%rdx,1),%rdi
    0.00 :   5ae3ad:       mov    %rax,(%rdi)
    0.00 :   5ae3b0:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5ae3b5:       mov    0x6799a4(%rip),%rax        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5ae3bc:       lea    0xc0(%r14),%rdi
    0.00 :   5ae3c3:       movq   $0x0,-0x1a0(%rbp)
    0.00 :   5ae3ce:       movq   $0x0,-0x198(%rbp)
    0.00 :   5ae3d9:       movq   $0x0,-0x190(%rbp)
    0.00 :   5ae3e4:       lea    0x18(%rax),%rdx
    0.00 :   5ae3e8:       add    $0x40,%rax
    0.00 :   5ae3ec:       mov    %rax,-0x140(%rbp)
    0.00 :   5ae3f3:       mov    0x679866(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5ae3fa:       mov    %rdx,-0x1b0(%rbp)
    0.00 :   5ae401:       movq   $0x0,-0x188(%rbp)
    0.00 :   5ae40c:       add    $0x10,%rax
    0.00 :   5ae410:       mov    %rax,-0x1a8(%rbp)
    0.00 :   5ae417:       movq   $0x0,-0x180(%rbp)
    0.00 :   5ae422:       movq   $0x0,-0x178(%rbp)
    0.00 :   5ae42d:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ae432:       mov    0x679b9f(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ae439:       lea    0x88(%r14),%rsi
    0.00 :   5ae440:       lea    0xf0(%r14),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ae447:       movl   $0x10,-0x168(%rbp)
    0.00 :   5ae451:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5ae455:       movb   $0x0,-0x150(%rbp)
    0.00 :   5ae45c:       mov    %rax,-0x1a8(%rbp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ae463:       lea    0xe0(%r14),%rax
    0.00 :   5ae46a:       mov    %rax,-0x160(%rbp)
         :            { _M_string_length = __length; }
    0.00 :   5ae471:       movq   $0x0,-0x158(%rbp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ae47c:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5ae481:       lea    0x80(%r14),%rdi
    0.00 :   5ae488:       mov    $0x1a,%edx
    0.00 :   5ae48d:       lea    0x2e19d4(%rip),%rsi        # 88fe68 <std::piecewise_construct+0x58b>
    0.00 :   5ae494:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ae499:       mov    -0x2fc(%rbp),%esi
    0.00 :   5ae49f:       lea    0x80(%r14),%rdi
    0.00 :   5ae4a6:       callq  53be0 <std::ostream::operator<<(int)@plt>
    0.00 :   5ae4ab:       mov    $0x23,%edx
    0.00 :   5ae4b0:       lea    0x2e1941(%rip),%rsi        # 88fdf8 <std::piecewise_construct+0x51b>
    0.00 :   5ae4b7:       mov    %rax,%rdi
    0.00 :   5ae4ba:       mov    %rax,%r12
    0.00 :   5ae4bd:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   5ae4c2:       mov    -0x328(%rbp),%rax
    0.00 :   5ae4c9:       mov    %r12,%rdi
    0.00 :   5ae4cc:       mov    0x18(%rax),%rsi
    0.00 :   5ae4d0:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5ae4d5:       mov    $0x1b,%edx
    0.00 :   5ae4da:       lea    0x2e19a2(%rip),%rsi        # 88fe83 <std::piecewise_construct+0x5a6>
    0.00 :   5ae4e1:       mov    %rax,%rdi
         :            { return _M_insert(__n); }
    0.00 :   5ae4e4:       mov    %rax,%r12
         :            __ostream_insert(__out, __s,
    0.00 :   5ae4e7:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   5ae4ec:       mov    -0x2d8(%rbp),%rsi
    0.00 :   5ae4f3:       mov    %r12,%rdi
    0.00 :   5ae4f6:       callq  52f50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5ae4fb:       mov    $0x2a,%edx
    0.00 :   5ae500:       lea    0x2e1919(%rip),%rsi        # 88fe20 <std::piecewise_construct+0x543>
    0.00 :   5ae507:       mov    %rax,%rdi
    0.00 :   5ae50a:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   5ae50f:       mov    %r14,%rdi
    0.00 :   5ae512:       callq  690850 <onnxruntime::logging::Capture::~Capture()>
    0.00 :   5ae517:       mov    -0x330(%rbp),%rdi
    0.00 :   5ae51e:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ae523:       nopl   0x0(%rax,%rax,1)
    0.00 :   5ae528:       cmpq   $0x0,-0x310(%rbp)
    0.00 :   5ae530:       je     5ae840 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xa60>
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5ae536:       mov    -0x310(%rbp),%rax
    0.00 :   5ae53d:       mov    %rax,-0x2b0(%rbp)
         :            : _M_pi(__r._M_pi)
    0.00 :   5ae544:       mov    -0x308(%rbp),%rax
    0.00 :   5ae54b:       mov    %rax,-0x2a8(%rbp)
         :            if (_M_pi != 0)
    0.00 :   5ae552:       test   %rax,%rax
    0.00 :   5ae555:       je     5ae56a <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x78a>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5ae557:       cmpq   $0x0,0x6799a9(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ae55f:       je     5ae830 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xa50>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae565:       lock addl $0x1,0x8(%rax)
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   5ae56a:       mov    $0x58,%edi
    0.00 :   5ae56f:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5ae574:       lea    -0x2b0(%rbp),%rcx
    0.00 :   5ae57b:       mov    %r15,%rdx
    0.00 :   5ae57e:       mov    %r13,%rsi
    0.00 :   5ae581:       mov    %rax,%rdi
    0.00 :   5ae584:       mov    %rax,%r14
    0.00 :   5ae587:       callq  5ee4f0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)>
         :            if (_M_pi != nullptr)
    0.00 :   5ae58c:       mov    -0x2a8(%rbp),%r15
    0.00 :   5ae593:       test   %r15,%r15
    0.00 :   5ae596:       je     5ae5bc <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x7dc>
         :            if (__gthread_active_p())
    0.00 :   5ae598:       mov    0x679969(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ae59f:       test   %r12,%r12
    0.00 :   5ae5a2:       je     5ae8d0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xaf0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae5a8:       mov    $0xffffffff,%eax
    0.00 :   5ae5ad:       lock xadd %eax,0x8(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ae5b3:       cmp    $0x1,%eax
    0.00 :   5ae5b6:       je     5ae928 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb48>
    0.00 :   5ae5bc:       callq  59bf30 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::Tensor>()>
    0.00 :   5ae5c1:       mov    %rax,%r15
    0.00 :   5ae5c4:       mov    (%rax),%rax
    0.00 :   5ae5c7:       mov    %r15,%rdi
    0.00 :   5ae5ca:       callq  *0x20(%rax)
    0.00 :   5ae5cd:       mov    $0x20,%edi
    0.00 :   5ae5d2:       mov    %rax,%r12
    0.00 :   5ae5d5:       callq  53340 <operator new(unsigned long)@plt>
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   5ae5da:       mov    -0x2f0(%rbp),%rsi
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5ae5e1:       mov    %r14,0x18(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5ae5e5:       movabs $0x100000001,%rcx
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5ae5ef:       lea    0x6631ba(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5ae5f6:       mov    %rcx,0x8(%rax)
    0.00 :   5ae5fa:       mov    %r14,(%rsi)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5ae5fd:       mov    0x8(%rsi),%r14
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5ae601:       add    $0x10,%rdx
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5ae605:       mov    %r12,0x10(%rax)
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5ae609:       mov    %rdx,(%rax)
         :            __r._M_pi = _M_pi;
    0.00 :   5ae60c:       mov    %rax,0x8(%rsi)
         :            if (_M_pi != nullptr)
    0.00 :   5ae610:       test   %r14,%r14
    0.00 :   5ae613:       je     5ae639 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x859>
         :            if (__gthread_active_p())
    0.00 :   5ae615:       mov    0x6798ec(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ae61c:       test   %r12,%r12
    0.00 :   5ae61f:       je     5ae8e0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb00>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae625:       mov    $0xffffffff,%eax
    0.00 :   5ae62a:       lock xadd %eax,0x8(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ae630:       cmp    $0x1,%eax
    0.00 :   5ae633:       je     5ae8f0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb10>
    0.00 :   5ae639:       mov    -0x2f0(%rbp),%rax
    0.00 :   5ae640:       mov    %r13,%rdi
    0.00 :   5ae643:       mov    %r15,0x10(%rax)
    0.00 :   5ae647:       mov    0x0(%r13),%rax
    0.00 :   5ae64b:       callq  *0x68(%rax)
    0.00 :   5ae64e:       test   %rax,%rax
    0.00 :   5ae651:       je     5ae659 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x879>
    0.00 :   5ae653:       cmpl   $0x8,0x8(%rax)
    0.00 :   5ae657:       je     5ae66e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x88e>
    0.00 :   5ae659:       mov    -0x2d8(%rbp),%rdx
    0.00 :   5ae660:       mov    -0x2fc(%rbp),%esi
    0.00 :   5ae666:       mov    %rbx,%rdi
    0.00 :   5ae669:       callq  5a9630 <onnxruntime::ExecutionFrame::TraceAllocate(int, unsigned long)>
         :            __gthread_mutex_lock():
         :            }
         :
         :            static inline int
         :            __gthread_mutex_lock (__gthread_mutex_t *__mutex)
         :            {
         :            if (__gthread_active_p ())
    0.00 :   5ae66e:       mov    0x679893(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5ae675:       lea    0x170(%rbx),%rax
    0.00 :   5ae67c:       mov    %rax,%r15
         :            __gthread_mutex_lock():
    0.00 :   5ae67f:       test   %r12,%r12
    0.00 :   5ae682:       je     5ae694 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8b4>
         :            return __gthrw_(pthread_mutex_lock) (__mutex);
    0.00 :   5ae684:       mov    %rax,%rdi
    0.00 :   5ae687:       callq  538b0 <pthread_mutex_lock@plt>
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
         :            lock()
         :            {
         :            int __e = __gthread_mutex_lock(&_M_mutex);
         :
         :            // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)
         :            if (__e)
    0.00 :   5ae68c:       test   %eax,%eax
    0.00 :   5ae68e:       jne    5aec83 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xea3>
    0.00 :   5ae694:       mov    -0x2f8(%rbp),%rax
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae69b:       lea    -0x230(%rbp),%r14
         :            // 3076. basic_string CTAD ambiguity
         :            template<typename = _RequireAllocator<_Alloc>>
         :            #endif
         :            basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
         :            : _M_dataplus(_M_local_data(), __a)
         :            { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
    0.00 :   5ae6a2:       mov    $0xffffffffffffffff,%rdx
    0.00 :   5ae6a9:       mov    (%rax),%r13
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ae6ac:       lea    0x10(%r14),%rax
    0.00 :   5ae6b0:       mov    %rax,-0x230(%rbp)
         :            { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
    0.00 :   5ae6b7:       test   %r13,%r13
    0.00 :   5ae6ba:       je     5ae6c9 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x8e9>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   5ae6bc:       mov    %r13,%rdi
    0.00 :   5ae6bf:       callq  52c60 <strlen@plt>
    0.00 :   5ae6c4:       lea    0x0(%r13,%rax,1),%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ae6c9:       mov    %r13,%rsi
    0.00 :   5ae6cc:       mov    %r14,%rdi
    0.00 :   5ae6cf:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            operator[](const key_type& __k)
         :            { return _M_h[__k]; }
         :
         :            mapped_type&
         :            operator[](key_type&& __k)
         :            { return _M_h[std::move(__k)]; }
    0.00 :   5ae6d4:       lea    0x138(%rbx),%rdi
    0.00 :   5ae6db:       mov    %r14,%rsi
    0.00 :   5ae6de:       callq  5adcf0 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
    0.00 :   5ae6e3:       mov    -0x2d8(%rbp),%rdx
    0.00 :   5ae6ea:       add    %rdx,(%rax)
         :            if (!_M_is_local())
    0.00 :   5ae6ed:       add    $0x10,%r14
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ae6f1:       mov    -0x230(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ae6f8:       cmp    %r14,%rdi
    0.00 :   5ae6fb:       je     5ae702 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x922>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5ae6fd:       callq  53300 <operator delete(void*)@plt>
         :            __gthread_mutex_unlock():
         :            #endif
         :
         :            static inline int
         :            __gthread_mutex_unlock (__gthread_mutex_t *__mutex)
         :            {
         :            if (__gthread_active_p ())
    0.00 :   5ae702:       test   %r12,%r12
    0.00 :   5ae705:       je     5ae70f <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x92f>
         :            return __gthrw_(pthread_mutex_unlock) (__mutex);
    0.00 :   5ae707:       mov    %r15,%rdi
    0.00 :   5ae70a:       callq  53060 <pthread_mutex_unlock@plt>
         :            _ZN11onnxruntime14ExecutionFrame40AllocateMLValueTensorSelfOwnBufferHelperER8OrtValueiPKNS_12DataTypeImplERK13OrtMemoryInfoRKNS_11TensorShapeEb():
    0.00 :   5ae70f:       mov    -0x2e8(%rbp),%rax
    0.00 :   5ae716:       movq   $0x0,(%rax)
         :            if (_M_pi != nullptr)
    0.00 :   5ae71d:       mov    -0x308(%rbp),%rax
    0.00 :   5ae724:       test   %rax,%rax
    0.00 :   5ae727:       je     5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
         :            if (__gthread_active_p())
    0.00 :   5ae729:       mov    0x6797d8(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ae730:       test   %r12,%r12
    0.00 :   5ae733:       je     5ae8b8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xad8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae739:       mov    $0xffffffff,%ebx
    0.00 :   5ae73e:       lock xadd %ebx,0x8(%rax)
    0.00 :   5ae743:       mov    %ebx,%eax
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ae745:       cmp    $0x1,%eax
    0.00 :   5ae748:       jne    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
         :            _M_dispose();
    0.00 :   5ae74a:       mov    -0x308(%rbp),%rbx
    0.00 :   5ae751:       mov    (%rbx),%rax
    0.00 :   5ae754:       mov    %rbx,%rdi
    0.00 :   5ae757:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ae75a:       test   %r12,%r12
    0.00 :   5ae75d:       je     5aea38 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc58>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae763:       mov    $0xffffffff,%eax
    0.00 :   5ae768:       lock xadd %eax,0xc(%rbx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ae76d:       cmp    $0x1,%eax
    0.00 :   5ae770:       jne    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
         :            _M_destroy();
    0.00 :   5ae772:       mov    -0x308(%rbp),%rdi
    0.00 :   5ae779:       mov    (%rdi),%rax
    0.00 :   5ae77c:       callq  *0x18(%rax)
    0.00 :   5ae77f:       jmp    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
    0.00 :   5ae781:       nopl   0x0(%rax)
    0.00 :   5ae788:       lea    0x2e15f9(%rip),%rcx        # 88fd88 <std::piecewise_construct+0x4ab>
    0.00 :   5ae78f:       mov    $0x1,%edx
    0.00 :   5ae794:       mov    $0x2,%esi
    0.00 :   5ae799:       callq  6975f0 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, char const*)>
    0.00 :   5ae79e:       mov    -0x38(%rbp),%rbx
    0.00 :   5ae7a2:       xor    %fs:0x28,%rbx
    0.00 :   5ae7ab:       mov    -0x2e8(%rbp),%rax
    0.00 :   5ae7b2:       jne    5aebe1 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xe01>
    0.00 :   5ae7b8:       lea    -0x28(%rbp),%rsp
    0.00 :   5ae7bc:       pop    %rbx
    0.00 :   5ae7bd:       pop    %r12
    0.00 :   5ae7bf:       pop    %r13
    0.00 :   5ae7c1:       pop    %r14
    0.00 :   5ae7c3:       pop    %r15
    0.00 :   5ae7c5:       pop    %rbp
    0.00 :   5ae7c6:       retq
    0.00 :   5ae7c7:       nopw   0x0(%rax,%rax,1)
    0.00 :   5ae7d0:       mov    -0x2e8(%rbp),%rdi
    0.00 :   5ae7d7:       mov    $0x2,%edx
    0.00 :   5ae7dc:       mov    $0x2,%esi
    0.00 :   5ae7e1:       lea    0x2e15e0(%rip),%rcx        # 88fdc8 <std::piecewise_construct+0x4eb>
    0.00 :   5ae7e8:       callq  6975f0 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, char const*)>
    0.00 :   5ae7ed:       jmp    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
    0.00 :   5ae7ef:       nop
    0.00 :   5ae7f0:       mov    -0x2e8(%rbp),%rdi
    0.00 :   5ae7f7:       mov    $0x1,%edx
    0.00 :   5ae7fc:       mov    $0x2,%esi
    0.00 :   5ae801:       lea    0x2e699c(%rip),%rcx        # 8951a4 <typeinfo name for onnxruntime::session_state_utils::SaveInputOutputNamesToNodeMapping(onnxruntime::GraphViewer const&, onnxruntime::SessionState&, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > const&)::{lambda(onnxruntime::NodeArg const&, unsigned long)#2}+0xa4>
    0.00 :   5ae808:       callq  6975f0 <onnxruntime::common::Status::Status(onnxruntime::common::StatusCategory, int, char const*)>
    0.00 :   5ae80d:       jmp    5ae79e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x9be>
    0.00 :   5ae80f:       nop
         :            constexpr __shared_count() noexcept : _M_pi(0)
    0.00 :   5ae810:       movq   $0x0,-0x308(%rbp)
         :            : _M_ptr(0), _M_refcount()
    0.00 :   5ae81b:       movq   $0x0,-0x310(%rbp)
    0.00 :   5ae826:       jmpq   5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
    0.00 :   5ae82b:       nopl   0x0(%rax,%rax,1)
         :            { *__mem += __val; }
    0.00 :   5ae830:       mov    -0x308(%rbp),%rax
    0.00 :   5ae837:       addl   $0x1,0x8(%rax)
    0.00 :   5ae83b:       jmpq   5ae56a <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x78a>
    0.00 :   5ae840:       mov    -0x2f8(%rbp),%rdx
    0.00 :   5ae847:       lea    -0x2c0(%rbp),%rdi
    0.00 :   5ae84e:       mov    %rbx,%rsi
    0.00 :   5ae851:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5ae856:       mov    -0x2c0(%rbp),%rax
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5ae85d:       mov    -0x2b8(%rbp),%r12
         :            {
         :            _M_refcount._M_swap(__r._M_refcount);
         :            __r._M_ptr = 0;
    0.00 :   5ae864:       movq   $0x0,-0x2c0(%rbp)
         :            __r._M_pi = _M_pi;
    0.00 :   5ae86f:       movq   $0x0,-0x2b8(%rbp)
         :            : _M_ptr(__r._M_ptr), _M_refcount()
    0.00 :   5ae87a:       mov    %rax,-0x310(%rbp)
         :            if (_M_pi != nullptr)
    0.00 :   5ae881:       mov    -0x308(%rbp),%rax
    0.00 :   5ae888:       test   %rax,%rax
    0.00 :   5ae88b:       je     5ae8a6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xac6>
         :            _M_pi->_M_release();
    0.00 :   5ae88d:       mov    %rax,%rdi
    0.00 :   5ae890:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            if (_M_pi != nullptr)
    0.00 :   5ae895:       mov    -0x2b8(%rbp),%rdi
    0.00 :   5ae89c:       test   %rdi,%rdi
    0.00 :   5ae89f:       je     5ae8a6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xac6>
         :            _M_pi->_M_release();
    0.00 :   5ae8a1:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            __r._M_pi = _M_pi;
    0.00 :   5ae8a6:       mov    %r12,-0x308(%rbp)
    0.00 :   5ae8ad:       jmpq   5ae536 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x756>
    0.00 :   5ae8b2:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ae8b8:       mov    -0x308(%rbp),%rbx
    0.00 :   5ae8bf:       mov    0x8(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5ae8c2:       lea    -0x1(%rax),%edx
    0.00 :   5ae8c5:       mov    %edx,0x8(%rbx)
         :            return __result;
    0.00 :   5ae8c8:       jmpq   5ae745 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x965>
    0.00 :   5ae8cd:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ae8d0:       mov    0x8(%r15),%eax
         :            *__mem += __val;
    0.00 :   5ae8d4:       lea    -0x1(%rax),%edx
    0.00 :   5ae8d7:       mov    %edx,0x8(%r15)
         :            return __result;
    0.00 :   5ae8db:       jmpq   5ae5b3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x7d3>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ae8e0:       mov    0x8(%r14),%eax
         :            *__mem += __val;
    0.00 :   5ae8e4:       lea    -0x1(%rax),%edx
    0.00 :   5ae8e7:       mov    %edx,0x8(%r14)
         :            return __result;
    0.00 :   5ae8eb:       jmpq   5ae630 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x850>
         :            _M_dispose();
    0.00 :   5ae8f0:       mov    (%r14),%rax
    0.00 :   5ae8f3:       mov    %r14,%rdi
    0.00 :   5ae8f6:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ae8f9:       test   %r12,%r12
    0.00 :   5ae8fc:       je     5aea50 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc70>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae902:       mov    $0xffffffff,%eax
    0.00 :   5ae907:       lock xadd %eax,0xc(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ae90d:       cmp    $0x1,%eax
    0.00 :   5ae910:       jne    5ae639 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x859>
         :            _M_destroy();
    0.00 :   5ae916:       mov    (%r14),%rax
    0.00 :   5ae919:       mov    %r14,%rdi
    0.00 :   5ae91c:       callq  *0x18(%rax)
    0.00 :   5ae91f:       jmpq   5ae639 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x859>
    0.00 :   5ae924:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5ae928:       mov    (%r15),%rax
    0.00 :   5ae92b:       mov    %r15,%rdi
    0.00 :   5ae92e:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ae931:       test   %r12,%r12
    0.00 :   5ae934:       je     5aea60 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc80>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae93a:       mov    $0xffffffff,%eax
    0.00 :   5ae93f:       lock xadd %eax,0xc(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ae945:       cmp    $0x1,%eax
    0.00 :   5ae948:       jne    5ae5bc <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x7dc>
         :            _M_destroy();
    0.00 :   5ae94e:       mov    (%r15),%rax
    0.00 :   5ae951:       mov    %r15,%rdi
    0.00 :   5ae954:       callq  *0x18(%rax)
    0.00 :   5ae957:       jmpq   5ae5bc <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x7dc>
    0.00 :   5ae95c:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ae960:       mov    0x8(%r14),%eax
         :            *__mem += __val;
    0.00 :   5ae964:       lea    -0x1(%rax),%edx
    0.00 :   5ae967:       mov    %edx,0x8(%r14)
         :            return __result;
    0.00 :   5ae96b:       jmpq   5adf38 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x158>
    0.00 :   5ae970:       mov    -0x2f0(%rbp),%rbx
    0.00 :   5ae977:       mov    %r13,-0x2f0(%rbp)
    0.00 :   5ae97e:       mov    %r15,%r13
    0.00 :   5ae981:       mov    %r9,%r15
    0.00 :   5ae984:       jmpq   5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5ae989:       nopl   0x0(%rax)
    0.00 :   5ae990:       lea    -0x2b0(%rbp),%rdi
    0.00 :   5ae997:       mov    0x48(%rbx),%rdx
    0.00 :   5ae99b:       mov    -0x310(%rbp),%rsi
    0.00 :   5ae9a2:       callq  *%rax
    0.00 :   5ae9a4:       mov    -0x2a8(%rbp),%rax
         :            __shared_count(const __shared_count& __r) noexcept
    0.00 :   5ae9ab:       mov    -0x2b0(%rbp),%r14
         :            if (_M_pi != 0)
    0.00 :   5ae9b2:       test   %rax,%rax
    0.00 :   5ae9b5:       je     5adeed <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x10d>
         :            if (__gthread_active_p())
    0.00 :   5ae9bb:       mov    0x679546(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
         :            { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    0.00 :   5ae9c2:       lea    0x8(%rax),%rdx
    0.00 :   5ae9c6:       test   %r12,%r12
    0.00 :   5ae9c9:       je     5aea70 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc90>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae9cf:       lock addl $0x1,(%rdx)
         :            class __shared_ptr
    0.00 :   5ae9d3:       mov    -0x2f0(%rbp),%rcx
    0.00 :   5ae9da:       mov    %r14,0x18(%rcx)
         :            if (__tmp != _M_pi)
    0.00 :   5ae9de:       mov    0x20(%rcx),%r14
    0.00 :   5ae9e2:       cmp    %r14,%rax
    0.00 :   5ae9e5:       je     5aea16 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc36>
         :            if (__gthread_active_p())
    0.00 :   5ae9e7:       test   %r12,%r12
    0.00 :   5ae9ea:       je     5aea90 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xcb0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ae9f0:       lock addl $0x1,(%rdx)
    0.00 :   5ae9f4:       mov    -0x2f0(%rbp),%rsi
    0.00 :   5ae9fb:       mov    0x20(%rsi),%r14
         :            if (_M_pi != 0)
    0.00 :   5ae9ff:       test   %r14,%r14
    0.00 :   5aea02:       jne    5aeb10 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd30>
         :            _M_pi = __tmp;
    0.00 :   5aea08:       mov    -0x2f0(%rbp),%rsi
    0.00 :   5aea0f:       mov    %rax,0x20(%rsi)
    0.00 :   5aea13:       mov    %rax,%r14
         :            if (__gthread_active_p())
    0.00 :   5aea16:       test   %r12,%r12
    0.00 :   5aea19:       je     5aea80 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xca0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aea1b:       mov    $0xffffffff,%eax
    0.00 :   5aea20:       lock xadd %eax,(%rdx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5aea24:       cmp    $0x1,%eax
    0.00 :   5aea27:       je     5aeaa0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xcc0>
    0.00 :   5aea29:       mov    -0x2a8(%rbp),%r14
    0.00 :   5aea30:       jmpq   5adf18 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x138>
    0.00 :   5aea35:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aea38:       mov    -0x308(%rbp),%rbx
    0.00 :   5aea3f:       mov    0xc(%rbx),%eax
         :            *__mem += __val;
    0.00 :   5aea42:       lea    -0x1(%rax),%edx
    0.00 :   5aea45:       mov    %edx,0xc(%rbx)
         :            return __result;
    0.00 :   5aea48:       jmpq   5ae76d <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x98d>
    0.00 :   5aea4d:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aea50:       mov    0xc(%r14),%eax
         :            *__mem += __val;
    0.00 :   5aea54:       lea    -0x1(%rax),%edx
    0.00 :   5aea57:       mov    %edx,0xc(%r14)
         :            return __result;
    0.00 :   5aea5b:       jmpq   5ae90d <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb2d>
         :            _Atomic_word __result = *__mem;
    0.00 :   5aea60:       mov    0xc(%r15),%eax
         :            *__mem += __val;
    0.00 :   5aea64:       lea    -0x1(%rax),%edx
    0.00 :   5aea67:       mov    %edx,0xc(%r15)
         :            return __result;
    0.00 :   5aea6b:       jmpq   5ae945 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xb65>
         :            { *__mem += __val; }
    0.00 :   5aea70:       addl   $0x1,0x8(%rax)
    0.00 :   5aea74:       jmpq   5ae9d3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xbf3>
    0.00 :   5aea79:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aea80:       mov    0x8(%r14),%eax
         :            *__mem += __val;
    0.00 :   5aea84:       lea    -0x1(%rax),%edx
    0.00 :   5aea87:       mov    %edx,0x8(%r14)
         :            return __result;
    0.00 :   5aea8b:       jmp    5aea24 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc44>
    0.00 :   5aea8d:       nopl   (%rax)
         :            { *__mem += __val; }
    0.00 :   5aea90:       addl   $0x1,0x8(%rax)
    0.00 :   5aea94:       jmpq   5ae9ff <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc1f>
    0.00 :   5aea99:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5aeaa0:       mov    (%r14),%rax
    0.00 :   5aeaa3:       mov    %r14,%rdi
    0.00 :   5aeaa6:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5aeaa9:       test   %r12,%r12
    0.00 :   5aeaac:       je     5aeb68 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd88>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aeab2:       mov    $0xffffffff,%eax
    0.00 :   5aeab7:       lock xadd %eax,0xc(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5aeabd:       cmp    $0x1,%eax
    0.00 :   5aeac0:       jne    5aea29 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc49>
         :            _M_destroy();
    0.00 :   5aeac6:       mov    (%r14),%rax
    0.00 :   5aeac9:       mov    %r14,%rdi
    0.00 :   5aeacc:       callq  *0x18(%rax)
    0.00 :   5aeacf:       jmpq   5aea29 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc49>
    0.00 :   5aead4:       nopl   0x0(%rax)
         :            _M_dispose();
    0.00 :   5aead8:       mov    (%r14),%rax
    0.00 :   5aeadb:       mov    %r14,%rdi
    0.00 :   5aeade:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5aeae1:       test   %r12,%r12
    0.00 :   5aeae4:       je     5aeb58 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd78>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aeae6:       mov    $0xffffffff,%eax
    0.00 :   5aeaeb:       lock xadd %eax,0xc(%r14)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5aeaf1:       cmp    $0x1,%eax
    0.00 :   5aeaf4:       jne    5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
         :            _M_destroy();
    0.00 :   5aeafa:       mov    (%r14),%rax
    0.00 :   5aeafd:       mov    %r14,%rdi
    0.00 :   5aeb00:       callq  *0x18(%rax)
    0.00 :   5aeb03:       jmpq   5adf41 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x161>
    0.00 :   5aeb08:       nopl   0x0(%rax,%rax,1)
         :            _M_pi->_M_release();
    0.00 :   5aeb10:       mov    %r14,%rdi
    0.00 :   5aeb13:       mov    %rdx,-0x320(%rbp)
    0.00 :   5aeb1a:       mov    %rax,-0x318(%rbp)
    0.00 :   5aeb21:       callq  faf80 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
         :            _M_pi = __tmp;
    0.00 :   5aeb26:       mov    -0x2f0(%rbp),%rsi
    0.00 :   5aeb2d:       mov    -0x318(%rbp),%rax
    0.00 :   5aeb34:       mov    -0x320(%rbp),%rdx
    0.00 :   5aeb3b:       mov    %rax,0x20(%rsi)
    0.00 :   5aeb3f:       jmpq   5aea13 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xc33>
    0.00 :   5aeb44:       nopl   0x0(%rax)
    0.00 :   5aeb48:       mov    %r11,-0x2f0(%rbp)
    0.00 :   5aeb4f:       jmpq   5ae528 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x748>
    0.00 :   5aeb54:       nopl   0x0(%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aeb58:       mov    0xc(%r14),%eax
         :            *__mem += __val;
    0.00 :   5aeb5c:       lea    -0x1(%rax),%edx
    0.00 :   5aeb5f:       mov    %edx,0xc(%r14)
         :            return __result;
    0.00 :   5aeb63:       jmp    5aeaf1 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xd11>
    0.00 :   5aeb65:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5aeb68:       mov    0xc(%r14),%eax
         :            *__mem += __val;
    0.00 :   5aeb6c:       lea    -0x1(%rax),%edx
    0.00 :   5aeb6f:       mov    %edx,0xc(%r14)
         :            return __result;
    0.00 :   5aeb73:       jmpq   5aeabd <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0xcdd>
    0.00 :   5aeb78:       sub    $0x8,%rsp
    0.00 :   5aeb7c:       mov    0x10(%rsi),%rcx
    0.00 :   5aeb80:       add    0x48(%rax),%rcx
    0.00 :   5aeb84:       lea    -0x2b0(%rbp),%rdi
    0.00 :   5aeb8b:       push   %r15
    0.00 :   5aeb8d:       mov    -0x2f8(%rbp),%r9
    0.00 :   5aeb94:       mov    %r13,%r8
    0.00 :   5aeb97:       mov    %rbx,%rsi
    0.00 :   5aeb9a:       mov    -0x2f0(%rbp),%rdx
    0.00 :   5aeba1:       callq  5a8bd0 <onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper(OrtValue&, void*, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&)>
         :            constexpr _Head_base(const _Head_base&) = default;
         :            constexpr _Head_base(_Head_base&&) = default;
         :
         :            template<typename _UHead>
         :            constexpr _Head_base(_UHead&& __h)
         :            : _M_head_impl(std::forward<_UHead>(__h)) { }
    0.00 :   5aeba6:       mov    -0x2b0(%rbp),%rax
    0.00 :   5aebad:       mov    -0x2e8(%rbp),%rbx
    0.00 :   5aebb4:       pop    %rcx
    0.00 :   5aebb5:       pop    %rsi
    0.00 :   5aebb6:       mov    %rax,(%rbx)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   5aebb9:       jmpq   5ae71d <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x93d>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5aebbe:       movq   $0x0,-0x338(%rbp)
    0.00 :   5aebc9:       jmpq   5ae2b3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x4d3>
         :            _ForwardIterator __cur = __result;
    0.00 :   5aebce:       mov    -0x338(%rbp),%rax
    0.00 :   5aebd5:       mov    %rax,-0x318(%rbp)
    0.00 :   5aebdc:       jmpq   5ae327 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)+0x547>
    0.00 :   5aebe1:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5aebe6:       mov    $0xa0,%edi
    0.00 :   5aebeb:       lea    -0x290(%rbp),%rbx
    0.00 :   5aebf2:       lea    -0x2b0(%rbp),%r12
    0.00 :   5aebf9:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5aebfe:       mov    %rbx,%rdi
    0.00 :   5aec01:       mov    %rbx,-0x330(%rbp)
    0.00 :   5aec08:       mov    %rax,%r15
    0.00 :   5aec0b:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5aec10:       mov    %r12,%rdi
    0.00 :   5aec13:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5aec18:       lea    -0x230(%rbp),%r14
    0.00 :   5aec1f:       mov    %r12,%r8
    0.00 :   5aec22:       lea    0x2e1837(%rip),%rcx        # 890460 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool)::__PRETTY_FUNCTION__>
    0.00 :   5aec29:       mov    $0x163,%edx
    0.00 :   5aec2e:       lea    0x2e0e03(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5aec35:       mov    %r14,%rdi
    0.00 :   5aec38:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5aec3d:       mov    %rbx,%rcx
    0.00 :   5aec40:       lea    0x2e1204(%rip),%rdx        # 88fe4b <std::piecewise_construct+0x56e>
    0.00 :   5aec47:       mov    %r14,%rsi
    0.00 :   5aec4a:       mov    %r15,%rdi
    0.00 :   5aec4d:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5aec52:       mov    %r14,%rdi
    0.00 :   5aec55:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5aec5a:       mov    %r12,%rdi
    0.00 :   5aec5d:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
    0.00 :   5aec62:       mov    %rbx,%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aec65:       mov    -0x290(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   5aec6c:       add    $0x10,%rax
    0.00 :   5aec70:       cmp    %rax,%rdi
    0.00 :   5aec73:       je     b1dca <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x11c>
    0.00 :   5aec79:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aec7e:       jmpq   b1dca <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x11c>
         :            __throw_system_error(__e);
    0.00 :   5aec83:       mov    %eax,%edi
    0.00 :   5aec85:       callq  52f30 <std::__throw_system_error(int)@plt>
         :            std::__throw_bad_alloc();
    0.00 :   5aec8a:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5aec8f:       mov    %rax,%rbx
    0.00 :   5aec92:       jmpq   b1cc3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x15>
    0.00 :   5aec97:       mov    %rax,%rbx
    0.00 :   5aec9a:       jmpq   b1cd0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x22>
    0.00 :   5aec9f:       mov    %rax,%rbx
    0.00 :   5aeca2:       jmpq   b1cd0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x22>
    0.00 :   5aeca7:       jmpq   b1cee <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x40>
    0.00 :   5aecac:       mov    %rax,%rbx
    0.00 :   5aecaf:       jmpq   b1ce6 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x38>
    0.00 :   5aecb4:       mov    %rax,%rbx
    0.00 :   5aecb7:       jmpq   b1d24 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x76>
    0.00 :   5aecbc:       mov    %rax,%rbx
    0.00 :   5aecbf:       jmpq   b1cd0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x22>
    0.00 :   5aecc4:       mov    %rax,%rbx
    0.00 :   5aecc7:       jmpq   b1cd0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x22>
    0.00 :   5aeccc:       jmpq   b1d76 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0xc8>
    0.00 :   5aecd1:       mov    %rax,%rbx
    0.00 :   5aecd4:       jmpq   b1d89 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0xdb>
    0.00 :   5aecd9:       mov    %rax,%rbx
    0.00 :   5aecdc:       jmpq   b1da3 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0xf5>
    0.00 :   5aece1:       mov    %rax,%rbx
    0.00 :   5aece4:       jmpq   b1db0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x102>
    0.00 :   5aece9:       mov    %rax,%rbx
    0.00 :   5aecec:       jmpq   b1df0 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x142>
    0.00 :   5aecf1:       mov    %rax,%rbx
    0.00 :   5aecf4:       jmpq   b1de8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x13a>
    0.00 :   5aecf9:       mov    %rax,%rbx
    0.00 :   5aecfc:       jmpq   b1df8 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x14a>
    0.00 :   5aed01:       mov    %rax,%rbx
    0.00 :   5aed04:       jmpq   b1cae <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]>
    0.00 :   5aed09:       mov    %rax,%rbx
    0.00 :   5aed0c:       jmpq   b1e21 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x173>
    0.00 :   5aed11:       mov    %rax,%rbx
    0.00 :   5aed14:       jmpq   b1d39 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x8b>
    0.00 :   5aed19:       mov    %rax,%rbx
    0.00 :   5aed1c:       jmpq   b1d4e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0xa0>
    0.00 :   5aed21:       mov    %rax,%rbx
    0.00 :   5aed24:       jmpq   b1e2e <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x180>
    0.00 :   5aed29:       mov    %rax,%rbx
    0.00 :   5aed2c:       jmpq   b1e53 <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x1a5>
    0.00 :   5aed31:       mov    %rax,%rbx
    0.00 :   5aed34:       jmpq   b1e7a <onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper(OrtValue&, int, onnxruntime::DataTypeImpl const*, OrtMemoryInfo const&, onnxruntime::TensorShape const&, bool) [clone .cold.437]+0x1cc>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005eda40 <onnxruntime::Tensor::ReleaseBuffer()>:
         :            _ZN11onnxruntime6Tensor13ReleaseBufferEv():
    0.00 :   5eda40:       push   %r12
    0.00 :   5eda42:       push   %rbp
    0.00 :   5eda43:       mov    %rdi,%rbp
    0.00 :   5eda46:       push   %rbx
    0.00 :   5eda47:       sub    $0x10,%rsp
    0.00 :   5eda4b:       mov    0x8(%rdi),%rdi
  100.00 :   5eda4f:       test   %rdi,%rdi
    0.00 :   5eda52:       je     5eda78 <onnxruntime::Tensor::ReleaseBuffer()+0x38>
    0.00 :   5eda54:       mov    0x30(%rbp),%rdx
    0.00 :   5eda58:       mov    0x0(%rbp),%rsi
    0.00 :   5eda5c:       cmpl   $0x8,0x8(%rdx)
    0.00 :   5eda60:       je     5eda88 <onnxruntime::Tensor::ReleaseBuffer()+0x48>
    0.00 :   5eda62:       mov    (%rdi),%rax
    0.00 :   5eda65:       mov    0x18(%rax),%rax
    0.00 :   5eda69:       add    $0x10,%rsp
    0.00 :   5eda6d:       pop    %rbx
    0.00 :   5eda6e:       pop    %rbp
    0.00 :   5eda6f:       pop    %r12
    0.00 :   5eda71:       jmpq   *%rax
    0.00 :   5eda73:       nopl   0x0(%rax,%rax,1)
    0.00 :   5eda78:       add    $0x10,%rsp
    0.00 :   5eda7c:       pop    %rbx
    0.00 :   5eda7d:       pop    %rbp
    0.00 :   5eda7e:       pop    %r12
    0.00 :   5eda80:       retq
    0.00 :   5eda81:       nopl   0x0(%rax)
    0.00 :   5eda88:       lea    0x18(%rbp),%rdi
    0.00 :   5eda8c:       mov    %rsi,0x8(%rsp)
    0.00 :   5eda91:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   5eda96:       mov    0x8(%rsp),%rsi
    0.00 :   5eda9b:       mov    %rax,%r12
    0.00 :   5eda9e:       shl    $0x5,%r12
    0.00 :   5edaa2:       mov    %rsi,%rbx
    0.00 :   5edaa5:       add    %rsi,%r12
    0.00 :   5edaa8:       test   %rax,%rax
    0.00 :   5edaab:       jle    5edaca <onnxruntime::Tensor::ReleaseBuffer()+0x8a>
    0.00 :   5edaad:       nopl   (%rax)
         :            traits_type::assign(_M_data()[__n], _CharT());
         :            }
         :
         :            bool
         :            _M_is_local() const
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5edab0:       mov    (%rbx),%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5edab3:       lea    0x10(%rbx),%rax
    0.00 :   5edab7:       cmp    %rax,%rdi
    0.00 :   5edaba:       je     5edac1 <onnxruntime::Tensor::ReleaseBuffer()+0x81>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5edabc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5edac1:       add    $0x20,%rbx
    0.00 :   5edac5:       cmp    %r12,%rbx
    0.00 :   5edac8:       jne    5edab0 <onnxruntime::Tensor::ReleaseBuffer()+0x70>
    0.00 :   5edaca:       mov    0x8(%rbp),%rdi
    0.00 :   5edace:       mov    0x0(%rbp),%rsi
    0.00 :   5edad2:       jmp    5eda62 <onnxruntime::Tensor::ReleaseBuffer()+0x22>
 Percent |	Source code & Disassembly of llc.ko for cache-misses (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         :         Disassembly of section .text:
         :
         :         00000000000002a0 <llc_rcv>:
         :         llc_rcv():
    0.00 :   2a0:   callq  2a5 <llc_rcv+0x5>
    0.00 :   2a5:   push   %rbp
    0.00 :   2a6:   mov    %rsp,%rbp
    0.00 :   2a9:   push   %r15
    0.00 :   2ab:   push   %r14
    0.00 :   2ad:   push   %r13
    0.00 :   2af:   push   %r12
    0.00 :   2b1:   push   %rbx
    0.00 :   2b2:   mov    %rdi,%rbx
    0.00 :   2b5:   sub    $0x10,%rsp
    0.00 :   2b9:   cmpq   $0x0,0x4e8(%rsi)
    0.00 :   2c4:   jne    44b <llc_rcv+0x1ab>
    0.00 :   2ca:   movzbl 0x80(%rdi),%eax
    0.00 :   2d1:   and    $0x7,%eax
    0.00 :   2d4:   cmp    $0x3,%al
    0.00 :   2d6:   je     44b <llc_rcv+0x1ab>
    0.00 :   2dc:   mov    0xd4(%rdi),%eax
    0.00 :   2e2:   mov    %rsi,%r13
    0.00 :   2e5:   mov    %rdx,%r14
    0.00 :   2e8:   mov    %rcx,%r15
    0.00 :   2eb:   cmp    $0x1,%eax
    0.00 :   2ee:   je     464 <llc_rcv+0x1c4>
    0.00 :   2f4:   mov    $0xa20,%esi
    0.00 :   2f9:   callq  2fe <llc_rcv+0x5e>
    0.00 :   2fe:   test   %rax,%rax
    0.00 :   301:   mov    %rax,%r12
    0.00 :   304:   mov    %rbx,%rdi
    0.00 :   307:   je     44e <llc_rcv+0x1ae>
    0.00 :   30d:   mov    %r12,%rbx
    0.00 :   310:   callq  315 <llc_rcv+0x75>
    0.00 :   315:   mov    0x70(%rbx),%esi
    0.00 :   318:   mov    %esi,%ecx
    0.00 :   31a:   sub    0x74(%rbx),%ecx
    0.00 :   31d:   cmp    $0x2,%ecx
    0.00 :   320:   jbe    518 <llc_rcv+0x278>
    0.00 :   326:   mov    0xc8(%rbx),%rax
    0.00 :   32d:   movzbl 0x2(%rax),%eax
    0.00 :   331:   and    $0x3,%eax
    0.00 :   334:   cmp    $0x3,%al
    0.00 :   336:   setne  %r12b
    0.00 :   33a:   movzbl %r12b,%edx
    0.00 :   33e:   add    $0x3,%r12d
    0.00 :   342:   add    $0x3,%edx
    0.00 :   345:   cmp    %edx,%ecx
    0.00 :   347:   jb     546 <llc_rcv+0x2a6>
    0.00 :   34d:   movzbl %r12b,%eax
    0.00 :   351:   add    %ax,0xb2(%rbx)
    0.00 :   358:   mov    %edx,%esi
    0.00 :   35a:   mov    %rbx,%rdi
    0.00 :   35d:   callq  362 <llc_rcv+0xc2>
    0.00 :   362:   cmpw   $0x400,0xb0(%rbx)
    0.00 :   36b:   je     3f9 <llc_rcv+0x159>
    0.00 :   371:   movzwl 0xb4(%rbx),%eax
    0.00 :   378:   mov    0xc0(%rbx),%rdx
    0.00 :   37f:   movzbl (%rdx,%rax,1),%edi
    0.00 :   383:   test   %dil,%dil
    0.00 :   386:   je     56e <llc_rcv+0x2ce>
    0.00 :   38c:   callq  391 <llc_rcv+0xf1>
    0.00 :   391:   test   %rax,%rax
    0.00 :   394:   mov    %rax,%r12
    0.00 :   397:   je     44b <llc_rcv+0x1ab>
    0.00 :   39d:   mov    0x8(%rax),%r8
    0.00 :   3a1:   movzwl 0xb4(%rbx),%eax
    0.00 :   3a8:   mov    0xc0(%rbx),%rdx
    0.00 :   3af:   movzbl 0x2(%rdx,%rax,1),%eax
    0.00 :   3b4:   mov    %eax,%edx
    0.00 :   3b6:   and    $0x3,%edx
    0.00 :   3b9:   cmp    $0x3,%dl
    0.00 :   3bc:   jne    477 <llc_rcv+0x1d7>
    0.00 :   3c2:   and    $0xffffffec,%eax
    0.00 :   3c5:   cmp    $0x60,%al
    0.00 :   3c7:   je     477 <llc_rcv+0x1d7>
    0.00 :   3cd:   jbe    4ec <llc_rcv+0x24c>
    0.00 :   3d3:   cmp    $0x84,%al
    0.00 :   3d5:   je     477 <llc_rcv+0x1d7>
    0.00 :   3db:   jbe    46f <llc_rcv+0x1cf>
    0.00 :   3e1:   cmp    $0xac,%al
    0.00 :   3e3:   je     3ed <llc_rcv+0x14d>
    0.00 :   3e5:   cmp    $0xe0,%al
    0.00 :   3e7:   jne    4fc <llc_rcv+0x25c>
    0.00 :   3ed:   mov    $0x0,%rax
    0.00 :   3f4:   jmpq   47e <llc_rcv+0x1de>
    0.00 :   3f9:   movzwl 0xb6(%rbx),%eax
    0.00 :   400:   mov    0xc0(%rbx),%rdx
    0.00 :   407:   movzbl %r12b,%r12d
    0.00 :   40b:   movzwl 0xc(%rdx,%rax,1),%esi
    0.00 :   410:   rol    $0x8,%si
    0.00 :   414:   movzwl %si,%esi
    0.00 :   417:   sub    %r12d,%esi
    0.00 :   41a:   mov    %esi,%r12d
    0.00 :   41d:   js     44b <llc_rcv+0x1ab>
    0.00 :   41f:   mov    0x70(%rbx),%eax
    0.00 :   422:   mov    %eax,%edx
    0.00 :   424:   sub    0x74(%rbx),%edx
    0.00 :   427:   cmp    %edx,%esi
    0.00 :   429:   ja     58b <llc_rcv+0x2eb>
    0.00 :   42f:   cmp    %eax,%r12d
    0.00 :   432:   jae    371 <llc_rcv+0xd1>
    0.00 :   438:   mov    %r12d,%esi
    0.00 :   43b:   mov    %rbx,%rdi
    0.00 :   43e:   callq  443 <llc_rcv+0x1a3>
    0.00 :   443:   test   %eax,%eax
    0.00 :   445:   je     371 <llc_rcv+0xd1>
    0.00 :   44b:   mov    %rbx,%rdi
    0.00 :   44e:   callq  453 <llc_rcv+0x1b3>
    0.00 :   453:   add    $0x10,%rsp
    0.00 :   457:   xor    %eax,%eax
    0.00 :   459:   pop    %rbx
    0.00 :   45a:   pop    %r12
    0.00 :   45c:   pop    %r13
    0.00 :   45e:   pop    %r14
    0.00 :   460:   pop    %r15
    0.00 :   462:   pop    %rbp
    0.00 :   463:   retq
  100.00 :   464:   test   %rdi,%rdi
    0.00 :   467:   jne    315 <llc_rcv+0x75>
    0.00 :   46d:   jmp    453 <llc_rcv+0x1b3>
    0.00 :   46f:   cmp    $0x6c,%al
    0.00 :   471:   jne    4fc <llc_rcv+0x25c>
    0.00 :   477:   mov    $0x0,%rax
    0.00 :   47e:   mov    (%rax),%r9
    0.00 :   481:   test   %r9,%r9
    0.00 :   484:   je     4fc <llc_rcv+0x25c>
    0.00 :   486:   test   %r8,%r8
    0.00 :   489:   mov    %r8,-0x30(%rbp)
    0.00 :   48d:   je     4c2 <llc_rcv+0x222>
    0.00 :   48f:   mov    $0xa20,%esi
    0.00 :   494:   mov    %rbx,%rdi
    0.00 :   497:   mov    %r9,-0x38(%rbp)
    0.00 :   49b:   callq  4a0 <llc_rcv+0x200>
    0.00 :   4a0:   test   %rax,%rax
    0.00 :   4a3:   mov    -0x38(%rbp),%r9
    0.00 :   4a7:   je     4c2 <llc_rcv+0x222>
    0.00 :   4a9:   mov    %r15,%rcx
    0.00 :   4ac:   mov    %r14,%rdx
    0.00 :   4af:   mov    %r13,%rsi
    0.00 :   4b2:   mov    %rax,%rdi
    0.00 :   4b5:   mov    -0x30(%rbp),%r8
    0.00 :   4b9:   callq  4be <llc_rcv+0x21e>
    0.00 :   4be:   mov    -0x38(%rbp),%r9
    0.00 :   4c2:   mov    %rbx,%rsi
    0.00 :   4c5:   mov    %r12,%rdi
    0.00 :   4c8:   callq  4cd <llc_rcv+0x22d>
    0.00 :   4cd:   lock decl 0x4(%r12)
    0.00 :   4d3:   js     4d9 <llc_rcv+0x239>
    0.00 :   4d9:   jne    453 <llc_rcv+0x1b3>
    0.00 :   4df:   mov    %r12,%rdi
    0.00 :   4e2:   callq  4e7 <llc_rcv+0x247>
    0.00 :   4e7:   jmpq   453 <llc_rcv+0x1b3>
    0.00 :   4ec:   cmp    $0xc,%al
    0.00 :   4ee:   je     477 <llc_rcv+0x1d7>
    0.00 :   4f0:   cmp    $0x40,%al
    0.00 :   4f2:   je     477 <llc_rcv+0x1d7>
    0.00 :   4f4:   test   %al,%al
    0.00 :   4f6:   je     3ed <llc_rcv+0x14d>
    0.00 :   4fc:   test   %r8,%r8
    0.00 :   4ff:   je     5ae <llc_rcv+0x30e>
    0.00 :   505:   mov    %r15,%rcx
    0.00 :   508:   mov    %r14,%rdx
    0.00 :   50b:   mov    %r13,%rsi
    0.00 :   50e:   mov    %rbx,%rdi
    0.00 :   511:   callq  516 <llc_rcv+0x276>
    0.00 :   516:   jmp    4cd <llc_rcv+0x22d>
    0.00 :   518:   cmp    $0x2,%esi
    0.00 :   51b:   jbe    44b <llc_rcv+0x1ab>
    0.00 :   521:   mov    $0x3,%esi
    0.00 :   526:   mov    %rbx,%rdi
    0.00 :   529:   sub    %ecx,%esi
    0.00 :   52b:   callq  530 <llc_rcv+0x290>
    0.00 :   530:   test   %rax,%rax
    0.00 :   533:   je     44b <llc_rcv+0x1ab>
    0.00 :   539:   mov    0x70(%rbx),%esi
    0.00 :   53c:   mov    %esi,%ecx
    0.00 :   53e:   sub    0x74(%rbx),%ecx
    0.00 :   541:   jmpq   326 <llc_rcv+0x86>
    0.00 :   546:   cmp    %edx,%esi
    0.00 :   548:   jb     44b <llc_rcv+0x1ab>
    0.00 :   54e:   mov    %edx,%esi
    0.00 :   550:   mov    %rbx,%rdi
    0.00 :   553:   mov    %edx,-0x30(%rbp)
    0.00 :   556:   sub    %ecx,%esi
    0.00 :   558:   callq  55d <llc_rcv+0x2bd>
    0.00 :   55d:   test   %rax,%rax
    0.00 :   560:   mov    -0x30(%rbp),%edx
    0.00 :   563:   jne    34d <llc_rcv+0xad>
    0.00 :   569:   jmpq   44b <llc_rcv+0x1ab>
    0.00 :   56e:   mov    0x0(%rip),%rax        # 575 <llc_rcv+0x2d5>
    0.00 :   575:   test   %rax,%rax
    0.00 :   578:   je     44b <llc_rcv+0x1ab>
    0.00 :   57e:   mov    %rbx,%rdi
    0.00 :   581:   callq  586 <llc_rcv+0x2e6>
    0.00 :   586:   jmpq   453 <llc_rcv+0x1b3>
    0.00 :   58b:   cmp    %eax,%esi
    0.00 :   58d:   ja     44b <llc_rcv+0x1ab>
    0.00 :   593:   sub    %edx,%esi
    0.00 :   595:   mov    %rbx,%rdi
    0.00 :   598:   callq  59d <llc_rcv+0x2fd>
    0.00 :   59d:   test   %rax,%rax
    0.00 :   5a0:   je     44b <llc_rcv+0x1ab>
    0.00 :   5a6:   mov    0x70(%rbx),%eax
    0.00 :   5a9:   jmpq   42f <llc_rcv+0x18f>
    0.00 :   5ae:   mov    %rbx,%rdi
    0.00 :   5b1:   callq  5b6 <llc_rcv+0x316>
    0.00 :   5b6:   jmpq   4cd <llc_rcv+0x22d>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000024c430 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)>:
         :            _ZNSt6vectorIlSaIlEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPlS1_EEmRKl():
         :            template<typename _Tp, typename _Alloc>
         :            void
         :            vector<_Tp, _Alloc>::
         :            _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
         :            {
         :            if (__n != 0)
  100.00 :   24c430:       test   %rdx,%rdx
    0.00 :   24c433:       je     24c500 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0xd0>
         :            vector<_Tp, _Alloc>::
    0.00 :   24c439:       push   %r15
    0.00 :   24c43b:       mov    %rcx,%r15
    0.00 :   24c43e:       push   %r14
    0.00 :   24c440:       mov    %rdi,%r14
    0.00 :   24c443:       push   %r13
    0.00 :   24c445:       mov    %rsi,%r13
    0.00 :   24c448:       push   %r12
    0.00 :   24c44a:       push   %rbp
    0.00 :   24c44b:       mov    %rdx,%rbp
    0.00 :   24c44e:       push   %rbx
    0.00 :   24c44f:       mov    %rsi,%rbx
    0.00 :   24c452:       sub    $0x18,%rsp
         :            {
         :            if (size_type(this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_finish) >= __n)
    0.00 :   24c456:       mov    0x8(%rdi),%r12
    0.00 :   24c45a:       mov    0x10(%rdi),%rax
    0.00 :   24c45e:       sub    %r12,%rax
    0.00 :   24c461:       sar    $0x3,%rax
         :            if (size_type(this->_M_impl._M_end_of_storage
    0.00 :   24c465:       cmp    %rdx,%rax
    0.00 :   24c468:       jb     24c570 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x140>
         :            {
         :            template<typename... _Args>
         :            explicit
         :            _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
         :            {
         :            _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
    0.00 :   24c46e:       mov    (%rcx),%r15
         :            template<typename _Iterator, typename _Container>
         :            inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :            operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
         :            const __normal_iterator<_Iterator, _Container>& __rhs)
         :            _GLIBCXX_NOEXCEPT
         :            { return __lhs.base() - __rhs.base(); }
    0.00 :   24c471:       mov    %r12,%rcx
    0.00 :   24c474:       sub    %rsi,%rcx
    0.00 :   24c477:       mov    %rcx,%rax
    0.00 :   24c47a:       sar    $0x3,%rax
         :            _Temporary_value __tmp(this, __x);
         :            value_type& __x_copy = __tmp._M_val();
         :            #endif
         :            const size_type __elems_after = end() - __position;
         :            pointer __old_finish(this->_M_impl._M_finish);
         :            if (__elems_after > __n)
    0.00 :   24c47e:       cmp    %rax,%rdx
    0.00 :   24c481:       jae    24c508 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0xd8>
         :            {
         :            _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
         :            std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
    0.00 :   24c487:       shl    $0x3,%rbp
    0.00 :   24c48b:       mov    %r12,%rcx
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   24c48e:       mov    %r12,%rax
    0.00 :   24c491:       sub    %rbp,%rcx
    0.00 :   24c494:       cmp    %rcx,%r12
    0.00 :   24c497:       je     24c4b5 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x85>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   24c499:       mov    %rcx,%rsi
    0.00 :   24c49c:       mov    %rbp,%rdx
    0.00 :   24c49f:       mov    %r12,%rdi
    0.00 :   24c4a2:       mov    %rcx,0x8(%rsp)
    0.00 :   24c4a7:       callq  53aa0 <memmove@plt>
    0.00 :   24c4ac:       mov    0x8(%r14),%rax
    0.00 :   24c4b0:       mov    0x8(%rsp),%rcx
         :            this->_M_impl._M_finish,
         :            this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            this->_M_impl._M_finish += __n;
    0.00 :   24c4b5:       add    %rbp,%rax
    0.00 :   24c4b8:       mov    %rax,0x8(%r14)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   24c4bc:       cmp    %rcx,%r13
    0.00 :   24c4bf:       je     24c4d5 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0xa5>
         :            const ptrdiff_t _Num = __last - __first;
    0.00 :   24c4c1:       mov    %rcx,%rdx
         :            __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
    0.00 :   24c4c4:       mov    %r12,%rdi
    0.00 :   24c4c7:       mov    %r13,%rsi
         :            const ptrdiff_t _Num = __last - __first;
    0.00 :   24c4ca:       sub    %r13,%rdx
         :            __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
    0.00 :   24c4cd:       sub    %rdx,%rdi
    0.00 :   24c4d0:       callq  53aa0 <memmove@plt>
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
         :            _GLIBCXX_MOVE_BACKWARD3(__position.base(),
         :            __old_finish - __n, __old_finish);
         :            std::fill(__position.base(), __position.base() + __n,
    0.00 :   24c4d5:       add    %r13,%rbp
         :            __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
         :            __fill_a(_ForwardIterator __first, _ForwardIterator __last,
         :            const _Tp& __value)
         :            {
         :            const _Tp __tmp = __value;
         :            for (; __first != __last; ++__first)
    0.00 :   24c4d8:       cmp    %rbp,%r13
    0.00 :   24c4db:       je     24c4ec <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0xbc>
    0.00 :   24c4dd:       nopl   (%rax)
         :            *__first = __tmp;
    0.00 :   24c4e0:       mov    %r15,(%rbx)
         :            for (; __first != __last; ++__first)
    0.00 :   24c4e3:       add    $0x8,%rbx
    0.00 :   24c4e7:       cmp    %rbx,%rbp
    0.00 :   24c4ea:       jne    24c4e0 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0xb0>
         :            this->_M_impl._M_start = __new_start;
         :            this->_M_impl._M_finish = __new_finish;
         :            this->_M_impl._M_end_of_storage = __new_start + __len;
         :            }
         :            }
         :            }
    0.00 :   24c4ec:       add    $0x18,%rsp
    0.00 :   24c4f0:       pop    %rbx
    0.00 :   24c4f1:       pop    %rbp
    0.00 :   24c4f2:       pop    %r12
    0.00 :   24c4f4:       pop    %r13
    0.00 :   24c4f6:       pop    %r14
    0.00 :   24c4f8:       pop    %r15
    0.00 :   24c4fa:       retq
    0.00 :   24c4fb:       nopl   0x0(%rax,%rax,1)
    0.00 :   24c500:       retq
    0.00 :   24c501:       nopl   0x0(%rax)
         :            __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :            __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
         :            {
         :            const _Tp __tmp = __value;
         :            for (__decltype(__n + 0) __niter = __n;
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   24c508:       sub    %rax,%rbp
    0.00 :   24c50b:       je     24c6b0 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x280>
    0.00 :   24c511:       xor    %eax,%eax
    0.00 :   24c513:       nopl   0x0(%rax,%rax,1)
         :            *__first = __tmp;
    0.00 :   24c518:       mov    %r15,(%r12,%rax,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   24c51c:       add    $0x1,%rax
    0.00 :   24c520:       cmp    %rax,%rbp
    0.00 :   24c523:       jne    24c518 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0xe8>
    0.00 :   24c525:       lea    (%r12,%rbp,8),%rdi
         :            this->_M_impl._M_finish =
    0.00 :   24c529:       mov    %rdi,0x8(%r14)
         :            if (_Num)
    0.00 :   24c52d:       cmp    %r13,%r12
    0.00 :   24c530:       je     24c6c0 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x290>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   24c536:       mov    %rcx,%rdx
    0.00 :   24c539:       mov    %r13,%rsi
    0.00 :   24c53c:       mov    %rcx,0x8(%rsp)
    0.00 :   24c541:       callq  53aa0 <memmove@plt>
         :            this->_M_impl._M_finish += __elems_after;
    0.00 :   24c546:       mov    0x8(%rsp),%rcx
    0.00 :   24c54b:       add    %rcx,0x8(%r14)
         :            for (; __first != __last; ++__first)
    0.00 :   24c54f:       nop
         :            *__first = __tmp;
    0.00 :   24c550:       mov    %r15,(%rbx)
         :            for (; __first != __last; ++__first)
    0.00 :   24c553:       add    $0x8,%rbx
    0.00 :   24c557:       cmp    %rbx,%r12
    0.00 :   24c55a:       jne    24c550 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x120>
         :            }
    0.00 :   24c55c:       add    $0x18,%rsp
    0.00 :   24c560:       pop    %rbx
    0.00 :   24c561:       pop    %rbp
    0.00 :   24c562:       pop    %r12
    0.00 :   24c564:       pop    %r13
    0.00 :   24c566:       pop    %r14
    0.00 :   24c568:       pop    %r15
    0.00 :   24c56a:       retq
    0.00 :   24c56b:       nopl   0x0(%rax,%rax,1)
         :
         :            // Called by _M_fill_insert, _M_insert_aux etc.
         :            size_type
         :            _M_check_len(size_type __n, const char* __s) const
         :            {
         :            if (max_size() - size() < __n)
    0.00 :   24c570:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   24c57a:       mov    (%rdi),%rbx
    0.00 :   24c57d:       mov    %rdx,%rax
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   24c580:       sub    %rbx,%r12
    0.00 :   24c583:       sar    $0x3,%r12
         :            if (max_size() - size() < __n)
    0.00 :   24c587:       sub    %r12,%rax
    0.00 :   24c58a:       cmp    %rax,%rbp
    0.00 :   24c58d:       ja     24c6cc <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x29c>
    0.00 :   24c593:       cmp    %r12,%rbp
    0.00 :   24c596:       mov    %r12,%rax
    0.00 :   24c599:       mov    %rsi,%rcx
    0.00 :   24c59c:       cmovae %rbp,%rax
    0.00 :   24c5a0:       add    %rax,%r12
    0.00 :   24c5a3:       setb   %al
    0.00 :   24c5a6:       sub    %rbx,%rcx
    0.00 :   24c5a9:       movzbl %al,%eax
         :            __throw_length_error(__N(__s));
         :
         :            const size_type __len = size() + std::max(size(), __n);
         :            return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :   24c5ac:       test   %rax,%rax
    0.00 :   24c5af:       jne    24c5d0 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x1a0>
    0.00 :   24c5b1:       cmp    %rdx,%r12
    0.00 :   24c5b4:       ja     24c5d0 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x1a0>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   24c5b6:       test   %r12,%r12
    0.00 :   24c5b9:       jne    24c6a0 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x270>
    0.00 :   24c5bf:       mov    %rcx,%rdx
    0.00 :   24c5c2:       xor    %r12d,%r12d
    0.00 :   24c5c5:       xor    %r8d,%r8d
    0.00 :   24c5c8:       jmp    24c5f8 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x1c8>
    0.00 :   24c5ca:       nopw   0x0(%rax,%rax,1)
         :            return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :   24c5d0:       mov    $0xfffffffffffffff8,%r12
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   24c5d7:       mov    %r12,%rdi
    0.00 :   24c5da:       mov    %rcx,0x8(%rsp)
    0.00 :   24c5df:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   24c5e4:       mov    (%r14),%rbx
    0.00 :   24c5e7:       mov    %r13,%rdx
    0.00 :   24c5ea:       mov    0x8(%rsp),%rcx
    0.00 :   24c5ef:       mov    %rax,%r8
    0.00 :   24c5f2:       add    %rax,%r12
    0.00 :   24c5f5:       sub    %rbx,%rdx
         :            std::__uninitialized_fill_n_a(__new_start + __elems_before,
    0.00 :   24c5f8:       mov    (%r15),%rsi
    0.00 :   24c5fb:       add    %r8,%rcx
    0.00 :   24c5fe:       xor    %eax,%eax
         :            *__first = __tmp;
    0.00 :   24c600:       mov    %rsi,(%rcx,%rax,8)
         :            __niter > 0; --__niter, (void) ++__first)
    0.00 :   24c604:       add    $0x1,%rax
    0.00 :   24c608:       cmp    %rax,%rbp
    0.00 :   24c60b:       jne    24c600 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x1d0>
         :            __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    0.00 :   24c60d:       lea    (%rdx,%rbp,8),%r15
    0.00 :   24c611:       add    %r8,%r15
         :            if (_Num)
    0.00 :   24c614:       cmp    %rbx,%r13
    0.00 :   24c617:       je     24c688 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x258>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   24c619:       mov    %r8,%rdi
    0.00 :   24c61c:       mov    %rbx,%rsi
    0.00 :   24c61f:       callq  53aa0 <memmove@plt>
    0.00 :   24c624:       mov    %rax,%r8
         :            (__position.base(), this->_M_impl._M_finish,
    0.00 :   24c627:       mov    0x8(%r14),%rax
         :            const ptrdiff_t _Num = __last - __first;
    0.00 :   24c62b:       mov    %rax,%rdx
    0.00 :   24c62e:       sub    %r13,%rdx
    0.00 :   24c631:       lea    (%r15,%rdx,1),%rbp
         :            if (_Num)
    0.00 :   24c635:       cmp    %rax,%r13
    0.00 :   24c638:       je     24c670 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x240>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   24c63a:       mov    %r13,%rsi
    0.00 :   24c63d:       mov    %r15,%rdi
    0.00 :   24c640:       mov    %r8,0x8(%rsp)
    0.00 :   24c645:       callq  53150 <memcpy@plt>
    0.00 :   24c64a:       mov    0x8(%rsp),%r8
         :            if (__p)
    0.00 :   24c64f:       test   %rbx,%rbx
    0.00 :   24c652:       jne    24c670 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x240>
         :            this->_M_impl._M_start = __new_start;
    0.00 :   24c654:       mov    %r8,(%r14)
         :            this->_M_impl._M_finish = __new_finish;
    0.00 :   24c657:       mov    %rbp,0x8(%r14)
         :            this->_M_impl._M_end_of_storage = __new_start + __len;
    0.00 :   24c65b:       mov    %r12,0x10(%r14)
         :            }
    0.00 :   24c65f:       add    $0x18,%rsp
    0.00 :   24c663:       pop    %rbx
    0.00 :   24c664:       pop    %rbp
    0.00 :   24c665:       pop    %r12
    0.00 :   24c667:       pop    %r13
    0.00 :   24c669:       pop    %r14
    0.00 :   24c66b:       pop    %r15
    0.00 :   24c66d:       retq
    0.00 :   24c66e:       xchg   %ax,%ax
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   24c670:       mov    %rbx,%rdi
    0.00 :   24c673:       mov    %r8,0x8(%rsp)
    0.00 :   24c678:       callq  53300 <operator delete(void*)@plt>
    0.00 :   24c67d:       mov    0x8(%rsp),%r8
    0.00 :   24c682:       jmp    24c654 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x224>
    0.00 :   24c684:       nopl   0x0(%rax)
         :            (__position.base(), this->_M_impl._M_finish,
    0.00 :   24c688:       mov    0x8(%r14),%rax
         :            const ptrdiff_t _Num = __last - __first;
    0.00 :   24c68c:       mov    %rax,%rdx
    0.00 :   24c68f:       sub    %r13,%rdx
    0.00 :   24c692:       lea    (%r15,%rdx,1),%rbp
         :            if (_Num)
    0.00 :   24c696:       cmp    %rax,%r13
    0.00 :   24c699:       jne    24c63a <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x20a>
    0.00 :   24c69b:       jmp    24c64f <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x21f>
    0.00 :   24c69d:       nopl   (%rax)
    0.00 :   24c6a0:       shl    $0x3,%r12
    0.00 :   24c6a4:       jmpq   24c5d7 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0x1a7>
    0.00 :   24c6a9:       nopl   0x0(%rax)
         :            - this->_M_impl._M_finish) >= __n)
    0.00 :   24c6b0:       mov    %r12,%rdi
    0.00 :   24c6b3:       jmpq   24c529 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0xf9>
    0.00 :   24c6b8:       nopl   0x0(%rax,%rax,1)
         :            this->_M_impl._M_finish += __elems_after;
    0.00 :   24c6c0:       add    %rdi,%rcx
    0.00 :   24c6c3:       mov    %rcx,0x8(%r14)
         :            for (; __first != __last; ++__first)
    0.00 :   24c6c7:       jmpq   24c4ec <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)+0xbc>
         :            __throw_length_error(__N(__s));
    0.00 :   24c6cc:       lea    0x5f7083(%rip),%rdi        # 843756 <onnxruntime::EinsumOp::DeviceHelpers::CpuDeviceHelpers::DataCopy(onnxruntime::Tensor const&, onnxruntime::Tensor&, void*)::__PRETTY_FUNCTION__+0x96>
    0.00 :   24c6d3:       callq  52d80 <std::__throw_length_error(char const*)@plt>
 Percent |	Source code & Disassembly of mac80211.ko for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           000000000005f190 <ieee80211_sta_tx_notify>:
         :           ieee80211_sta_tx_notify():
  100.00 :   5f190:       callq  5f195 <ieee80211_sta_tx_notify+0x5>
    0.00 :   5f195:       push   %rbp
    0.00 :   5f196:       mov    %rsp,%rbp
    0.00 :   5f199:       push   %r15
    0.00 :   5f19b:       push   %r14
    0.00 :   5f19d:       push   %r13
    0.00 :   5f19f:       push   %r12
    0.00 :   5f1a1:       mov    %edx,%r13d
    0.00 :   5f1a4:       push   %rbx
    0.00 :   5f1a5:       movzwl (%rsi),%eax
    0.00 :   5f1a8:       mov    %rsi,%rbx
    0.00 :   5f1ab:       mov    %ecx,%r14d
    0.00 :   5f1ae:       lea    0x18(%rbx),%rdx
    0.00 :   5f1b2:       lea    0x1e(%rbx),%rcx
    0.00 :   5f1b6:       mov    %rdi,%r12
    0.00 :   5f1b9:       mov    %eax,%esi
    0.00 :   5f1bb:       and    $0x300,%si
    0.00 :   5f1c0:       cmp    $0x300,%si
    0.00 :   5f1c5:       cmove  %rcx,%rdx
    0.00 :   5f1c9:       mov    0x0(%rip),%rcx        # 5f1d0 <ieee80211_sta_tx_notify+0x40>
    0.00 :   5f1d0:       movzbl (%rdx),%edx
    0.00 :   5f1d3:       and    $0x7,%edx
    0.00 :   5f1d6:       movslq 0x0(,%rdx,4),%r15
    0.00 :   5f1de:       mov    %r15,%rdx
    0.00 :   5f1e1:       shl    $0x5,%rdx
    0.00 :   5f1e5:       add    %rdi,%rdx
    0.00 :   5f1e8:       mov    0xa90(%rdx),%esi
    0.00 :   5f1ee:       test   %esi,%esi
    0.00 :   5f1f0:       jne    5f25e <ieee80211_sta_tx_notify+0xce>
    0.00 :   5f1f2:       mov    %eax,%edx
    0.00 :   5f1f4:       and    $0xc,%edx
    0.00 :   5f1f7:       cmp    $0x8,%dx
    0.00 :   5f1fb:       je     5f208 <ieee80211_sta_tx_notify+0x78>
    0.00 :   5f1fd:       pop    %rbx
    0.00 :   5f1fe:       pop    %r12
    0.00 :   5f200:       pop    %r13
    0.00 :   5f202:       pop    %r14
    0.00 :   5f204:       pop    %r15
    0.00 :   5f206:       pop    %rbp
    0.00 :   5f207:       retq
    0.00 :   5f208:       and    $0x7c,%eax
    0.00 :   5f20b:       cmp    $0x48,%ax
    0.00 :   5f20f:       jne    5f24f <ieee80211_sta_tx_notify+0xbf>
    0.00 :   5f211:       mov    0x920(%r12),%eax
    0.00 :   5f219:       test   %eax,%eax
    0.00 :   5f21b:       jle    5f24f <ieee80211_sta_tx_notify+0xbf>
    0.00 :   5f21d:       test   %r13b,%r13b
    0.00 :   5f220:       jne    5f2dc <ieee80211_sta_tx_notify+0x14c>
    0.00 :   5f226:       movb   $0x1,0x924(%r12)
    0.00 :   5f22f:       mov    0x480(%r12),%rdi
    0.00 :   5f237:       lea    0x6c0(%r12),%rsi
    0.00 :   5f23f:       callq  5f244 <ieee80211_sta_tx_notify+0xb4>
    0.00 :   5f244:       pop    %rbx
    0.00 :   5f245:       pop    %r12
    0.00 :   5f247:       pop    %r13
    0.00 :   5f249:       pop    %r14
    0.00 :   5f24b:       pop    %r15
    0.00 :   5f24d:       pop    %rbp
    0.00 :   5f24e:       retq
    0.00 :   5f24f:       test   %r13b,%r13b
    0.00 :   5f252:       je     5f1fd <ieee80211_sta_tx_notify+0x6d>
    0.00 :   5f254:       mov    %r12,%rdi
    0.00 :   5f257:       callq  5f25c <ieee80211_sta_tx_notify+0xcc>
    0.00 :   5f25c:       jmp    5f1fd <ieee80211_sta_tx_notify+0x6d>
    0.00 :   5f25e:       mov    $0xfa,%eax
    0.00 :   5f263:       sub    %rcx,%rax
    0.00 :   5f266:       add    0xa88(%rdx),%rax
    0.00 :   5f26d:       js     5f2e9 <ieee80211_sta_tx_notify+0x159>
    0.00 :   5f26f:       lea    0x15(%r15),%rax
    0.00 :   5f273:       shl    $0x5,%rax
    0.00 :   5f277:       cmpb   $0x0,0x800(%r12,%rax,1)
    0.00 :   5f280:       je     5f28a <ieee80211_sta_tx_notify+0xfa>
    0.00 :   5f282:       movzwl (%rbx),%eax
    0.00 :   5f285:       jmpq   5f1f2 <ieee80211_sta_tx_notify+0x62>
    0.00 :   5f28a:       shl    $0x5,%r15
    0.00 :   5f28e:       movzwl %r14w,%r14d
    0.00 :   5f292:       add    %r12,%r15
    0.00 :   5f295:       add    0xa98(%r15),%r14d
    0.00 :   5f29c:       cmp    0xa90(%r15),%r14d
    0.00 :   5f2a3:       mov    %r14d,0xa98(%r15)
    0.00 :   5f2aa:       jb     5f282 <ieee80211_sta_tx_notify+0xf2>
    0.00 :   5f2ac:       mov    0x0(%rip),%rsi        # 5f2b3 <ieee80211_sta_tx_notify+0x123>
    0.00 :   5f2b3:       lea    0xb08(%r12),%rdx
    0.00 :   5f2bb:       movb   $0x1,0xaa0(%r15)
    0.00 :   5f2c3:       movl   $0x1,0xa9c(%r15)
    0.00 :   5f2ce:       xor    %ecx,%ecx
    0.00 :   5f2d0:       mov    $0x2000,%edi
    0.00 :   5f2d5:       callq  5f2da <ieee80211_sta_tx_notify+0x14a>
    0.00 :   5f2da:       jmp    5f282 <ieee80211_sta_tx_notify+0xf2>
    0.00 :   5f2dc:       mov    %r12,%rdi
    0.00 :   5f2df:       callq  5f2e4 <ieee80211_sta_tx_notify+0x154>
    0.00 :   5f2e4:       jmpq   5f22f <ieee80211_sta_tx_notify+0x9f>
    0.00 :   5f2e9:       cmpb   $0x0,0xaa0(%rdx)
    0.00 :   5f2f0:       movl   $0x0,0xa98(%rdx)
    0.00 :   5f2fa:       mov    %rcx,0xa88(%rdx)
    0.00 :   5f301:       je     5f28a <ieee80211_sta_tx_notify+0xfa>
    0.00 :   5f303:       mov    0x0(%rip),%rsi        # 5f30a <ieee80211_sta_tx_notify+0x17a>
    0.00 :   5f30a:       movl   $0x2,0xa9c(%rdx)
    0.00 :   5f314:       lea    0xb08(%rdi),%rdx
    0.00 :   5f31b:       xor    %ecx,%ecx
    0.00 :   5f31d:       mov    $0x2000,%edi
    0.00 :   5f322:       callq  5f327 <ieee80211_sta_tx_notify+0x197>
    0.00 :   5f327:       jmpq   5f26f <ieee80211_sta_tx_notify+0xdf>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000282e50 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)>:
         :            _ZN11onnxruntime11BroadcasterC2ERKSt6vectorIlSaIlEES5_():
    0.00 :   282e50:       push   %r15
    0.00 :   282e52:       push   %r14
    0.00 :   282e54:       mov    %rdi,%r14
    0.00 :   282e57:       push   %r13
    0.00 :   282e59:       push   %r12
    0.00 :   282e5b:       push   %rbp
    0.00 :   282e5c:       push   %rbx
    0.00 :   282e5d:       mov    %rsi,%rbx
    0.00 :   282e60:       sub    $0x108,%rsp
    0.00 :   282e67:       mov    %rdx,0x38(%rsp)
    0.00 :   282e6c:       mov    %fs:0x28,%rax
    0.00 :   282e75:       mov    %rax,0xf8(%rsp)
    0.00 :   282e7d:       xor    %eax,%eax
    0.00 :   282e7f:       lea    0x58(%rdi),%rax
         :            pointer _M_start;
         :            pointer _M_finish;
         :            pointer _M_end_of_storage;
         :
         :            _Vector_impl()
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   282e83:       movq   $0x0,(%rdi)
    0.00 :   282e8a:       mov    %rax,0x28(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   282e8f:       mov    %rdx,%rax
         :            : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   282e92:       movq   $0x0,0x8(%rdi)
    0.00 :   282e9a:       movq   $0x0,0x10(%rdi)
    0.00 :   282ea2:       movq   $0x0,0x18(%rdi)
    0.00 :   282eaa:       movq   $0x0,0x20(%rdi)
   50.30 :   282eb2:       movq   $0x0,0x28(%rdi)
    0.00 :   282eba:       movq   $0x0,0x30(%rdi)
    0.00 :   282ec2:       movq   $0x0,0x38(%rdi)
    0.00 :   282eca:       movq   $0x0,0x40(%rdi)
    0.00 :   282ed2:       movq   $0x1,0x48(%rdi)
    0.00 :   282eda:       movq   $0x0,0x50(%rdi)
    0.00 :   282ee2:       movq   $0x0,0x58(%rdi)
    0.00 :   282eea:       movq   $0x0,0x60(%rdi)
    0.00 :   282ef2:       movq   $0x0,0x68(%rdi)
    0.00 :   282efa:       movq   $0x0,0x70(%rdi)
    0.00 :   282f02:       movq   $0x0,0x78(%rdi)
    0.00 :   282f0a:       movq   $0x0,0x80(%rdi)
    0.00 :   282f15:       movq   $0x0,0x88(%rdi)
    0.00 :   282f20:       movq   $0x0,0x90(%rdi)
    0.00 :   282f2b:       movq   $0x0,0x98(%rdi)
    0.00 :   282f36:       movq   $0x1,0xa0(%rdi)
    0.00 :   282f41:       movq   $0x0,0xa8(%rdi)
    0.00 :   282f4c:       movq   $0x0,0xb0(%rdi)
    0.00 :   282f57:       movq   $0x0,0xb8(%rdi)
    0.00 :   282f62:       movq   $0x0,0xc0(%rdi)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   282f6d:       mov    0x8(%rdx),%rdx
    0.00 :   282f71:       sub    (%rax),%rdx
    0.00 :   282f74:       mov    0x8(%rsi),%rax
    0.00 :   282f78:       sub    (%rsi),%rax
    0.00 :   282f7b:       sar    $0x3,%rdx
    0.00 :   282f7f:       sar    $0x3,%rax
         :            *  preprocessor macro.
         :            */
         :            template<typename _Tp>
         :            _GLIBCXX14_CONSTEXPR
         :            inline const _Tp&
         :            max(const _Tp& __a, const _Tp& __b)
    0.00 :   282f83:       cmp    %rax,%rdx
    0.00 :   282f86:       mov    %rax,%rdi
    0.00 :   282f89:       cmovae %rdx,%rdi
    0.00 :   282f8d:       cmovbe %rdx,%rax
    0.00 :   282f91:       mov    %rdi,0x30(%rsp)
         :            min(const _Tp& __a, const _Tp& __b)
    0.00 :   282f96:       mov    %rax,0x10(%rsp)
         :            *  default constructed elements are appended.
         :            */
         :            void
         :            resize(size_type __new_size)
         :            {
         :            if (__new_size > size())
    0.00 :   282f9b:       test   %rdi,%rdi
    0.00 :   282f9e:       jne    2833b0 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x560>
    0.00 :   282fa4:       mov    0x30(%rsp),%rsi
    0.00 :   282fa9:       lea    0x18(%r14),%rdi
    0.00 :   282fad:       callq  188ff0 <std::vector<long, std::allocator<long> >::reserve(unsigned long)>
    0.00 :   282fb2:       mov    0x30(%rsp),%r15
    0.00 :   282fb7:       lea    0x30(%r14),%rdi
    0.00 :   282fbb:       mov    %r15,%rsi
    0.00 :   282fbe:       callq  188ff0 <std::vector<long, std::allocator<long> >::reserve(unsigned long)>
    0.00 :   282fc3:       lea    0x70(%r14),%rdi
    0.00 :   282fc7:       mov    %r15,%rsi
    0.00 :   282fca:       callq  188ff0 <std::vector<long, std::allocator<long> >::reserve(unsigned long)>
    0.00 :   282fcf:       lea    0x88(%r14),%rdi
    0.00 :   282fd6:       mov    %r15,%rsi
    0.00 :   282fd9:       callq  188ff0 <std::vector<long, std::allocator<long> >::reserve(unsigned long)>
    0.00 :   282fde:       mov    0x38(%rsp),%rax
    0.00 :   282fe3:       cmpq   $0x0,0x10(%rsp)
    0.00 :   282fe9:       mov    0x8(%rbx),%rbp
         :            _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
         :            : _M_current(_Iterator()) { }
         :
         :            explicit
         :            __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
         :            : _M_current(__i) { }
    0.00 :   282fed:       mov    0xb8(%r14),%r15
    0.00 :   282ff4:       mov    0x8(%rax),%rax
    0.00 :   282ff8:       mov    %rax,0x20(%rsp)
    0.00 :   282ffd:       je     283140 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x2f0>
    0.00 :   283003:       sub    $0x8,%rax
    0.00 :   283007:       lea    -0x8(%r15),%rcx
    0.00 :   28300b:       xor    %r13d,%r13d
    0.00 :   28300e:       mov    %rax,%rdx
    0.00 :   283011:       lea    -0x8(%rbp),%rax
    0.00 :   283015:       mov    (%rax),%rsi
    0.00 :   283018:       mov    (%rdx),%r12
         :
         :            // Bidirectional iterator requirements
         :            __normal_iterator&
         :            operator--() _GLIBCXX_NOEXCEPT
         :            {
         :            --_M_current;
    0.00 :   28301b:       mov    %rax,%rbp
    0.00 :   28301e:       mov    %rdx,%r8
         :            {
         :            // concept requirements
         :            __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :            //return  __a < __b ? __b : __a;
         :            if (__a < __b)
    0.00 :   283021:       cmp    %r12,%rsi
    0.00 :   283024:       jl     283248 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x3f8>
    0.00 :   28302a:       mov    %r12,%rdi
    0.00 :   28302d:       mov    %rsi,0x40(%rsp)
    0.00 :   283032:       mov    %rsi,%rbx
    0.00 :   283035:       test   %rdi,%rdi
    0.00 :   283038:       jne    28325c <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x40c>
    0.00 :   28303e:       cmp    $0x1,%rbx
    0.00 :   283042:       jg     2834e5 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x695>
    0.00 :   283048:       movq   $0x0,(%rcx)
    0.00 :   28304f:       mov    %rcx,%r15
    0.00 :   283052:       xor    %ebx,%ebx
    0.00 :   283054:       lea    0x1(%r13),%rdi
    0.00 :   283058:       sub    $0x8,%rdx
    0.00 :   28305c:       sub    $0x8,%rax
    0.00 :   283060:       sub    $0x8,%rcx
    0.00 :   283064:       cmp    0x10(%rsp),%rdi
    0.00 :   283069:       jne    2833d0 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x580>
    0.00 :   28306f:       mov    %rbx,%rdx
    0.00 :   283072:       mov    %r14,%rdi
    0.00 :   283075:       mov    %r8,0x20(%rsp)
    0.00 :   28307a:       callq  282a40 <onnxruntime::BroadcastIterator::Init(long, long)>
    0.00 :   28307f:       mov    0x28(%rsp),%rdi
    0.00 :   283084:       mov    %rbx,%rdx
    0.00 :   283087:       mov    %r12,%rsi
    0.00 :   28308a:       callq  282a40 <onnxruntime::BroadcastIterator::Init(long, long)>
    0.00 :   28308f:       lea    0x1(%r13),%rax
    0.00 :   283093:       mov    %rax,0x8(%rsp)
    0.00 :   283098:       cmp    0x10(%rsp),%rax
    0.00 :   28309d:       jae    283406 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x5b6>
    0.00 :   2830a3:       mov    0x20(%rsp),%r12
    0.00 :   2830a8:       sub    $0x8,%rbp
    0.00 :   2830ac:       sub    $0x8,%r12
    0.00 :   2830b0:       jmp    283118 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x2c8>
    0.00 :   2830b2:       nopw   0x0(%rax,%rax,1)
    0.00 :   2830b8:       mov    %rsi,0x40(%rsp)
    0.00 :   2830bd:       mov    %rsi,%rbx
    0.00 :   2830c0:       mov    %r13,%rax
    0.00 :   2830c3:       test   %rax,%rax
    0.00 :   2830c6:       jne    2830d4 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x284>
    0.00 :   2830c8:       cmp    $0x1,%rbx
    0.00 :   2830cc:       jg     283420 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x5d0>
    0.00 :   2830d2:       xor    %ebx,%ebx
    0.00 :   2830d4:       sub    $0x8,%r15
    0.00 :   2830d8:       mov    %rbx,(%r15)
    0.00 :   2830db:       cmpq   $0x1,0x40(%rsp)
    0.00 :   2830e1:       je     2830fe <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x2ae>
    0.00 :   2830e3:       mov    %rbx,%rdx
    0.00 :   2830e6:       mov    %r14,%rdi
    0.00 :   2830e9:       callq  282c00 <onnxruntime::BroadcastIterator::Append(long, long)>
    0.00 :   2830ee:       mov    0x28(%rsp),%rdi
    0.00 :   2830f3:       mov    %rbx,%rdx
    0.00 :   2830f6:       mov    %r13,%rsi
    0.00 :   2830f9:       callq  282c00 <onnxruntime::BroadcastIterator::Append(long, long)>
    0.00 :   2830fe:       addq   $0x1,0x8(%rsp)
    0.00 :   283104:       sub    $0x8,%r12
    0.00 :   283108:       mov    0x8(%rsp),%rax
    0.00 :   28310d:       sub    $0x8,%rbp
    0.00 :   283111:       cmp    0x10(%rsp),%rax
    0.00 :   283116:       je     283190 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x340>
    0.00 :   283118:       mov    0x0(%rbp),%rsi
    0.00 :   28311c:       mov    (%r12),%r13
    0.00 :   283120:       mov    %rbp,0x18(%rsp)
    0.00 :   283125:       mov    %r12,0x20(%rsp)
    0.00 :   28312a:       cmp    %r13,%rsi
    0.00 :   28312d:       jge    2830b8 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x268>
    0.00 :   28312f:       mov    %r13,0x40(%rsp)
    0.00 :   283134:       mov    %r13,%rbx
    0.00 :   283137:       mov    %rsi,%rax
    0.00 :   28313a:       jmp    2830c3 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x273>
    0.00 :   28313c:       nopl   0x0(%rax)
    0.00 :   283140:       cmp    (%rbx),%rbp
    0.00 :   283143:       je     283278 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x428>
    0.00 :   283149:       mov    -0x8(%rbp),%rbx
    0.00 :   28314d:       lea    -0x8(%rbp),%rax
    0.00 :   283151:       mov    %r14,%rdi
    0.00 :   283154:       mov    %rax,0x18(%rsp)
    0.00 :   283159:       mov    %rbx,%rdx
    0.00 :   28315c:       mov    %rbx,%rsi
    0.00 :   28315f:       callq  282a40 <onnxruntime::BroadcastIterator::Init(long, long)>
    0.00 :   283164:       mov    %rbx,%rdx
    0.00 :   283167:       mov    $0x1,%esi
    0.00 :   28316c:       lea    0x58(%r14),%rdi
    0.00 :   283170:       callq  282a40 <onnxruntime::BroadcastIterator::Init(long, long)>
    0.00 :   283175:       mov    %rbx,-0x8(%r15)
    0.00 :   283179:       lea    -0x8(%r15),%rax
    0.00 :   28317d:       movq   $0x1,0x10(%rsp)
    0.00 :   283186:       mov    %rax,%r15
    0.00 :   283189:       nopl   0x0(%rax)
    0.00 :   283190:       mov    0x30(%rsp),%rbx
    0.00 :   283195:       sub    $0x8,%r15
    0.00 :   283199:       cmp    %rbx,0x10(%rsp)
    0.00 :   28319e:       jb     2831f7 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x3a7>
    0.00 :   2831a0:       jmpq   2832d0 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x480>
    0.00 :   2831a5:       nopl   (%rax)
    0.00 :   2831a8:       mov    0x18(%rsp),%rax
    0.00 :   2831ad:       mov    %r14,%rdi
    0.00 :   2831b0:       mov    -0x8(%rax),%r12
    0.00 :   2831b4:       lea    -0x8(%rax),%rbp
    0.00 :   2831b8:       mov    %r12,%rdx
    0.00 :   2831bb:       mov    %r12,%rsi
    0.00 :   2831be:       callq  282c00 <onnxruntime::BroadcastIterator::Append(long, long)>
    0.00 :   2831c3:       mov    0x28(%rsp),%rdi
    0.00 :   2831c8:       mov    %r12,%rdx
    0.00 :   2831cb:       mov    $0x1,%esi
    0.00 :   2831d0:       callq  282c00 <onnxruntime::BroadcastIterator::Append(long, long)>
    0.00 :   2831d5:       mov    %r12,(%r15)
    0.00 :   2831d8:       mov    %rbp,0x18(%rsp)
    0.00 :   2831dd:       addq   $0x1,0x10(%rsp)
    0.00 :   2831e3:       sub    $0x8,%r15
    0.00 :   2831e7:       mov    0x10(%rsp),%rax
    0.00 :   2831ec:       cmp    0x30(%rsp),%rax
    0.00 :   2831f1:       je     2832d0 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x480>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2831f7:       mov    0x38(%rsp),%rcx
    0.00 :   2831fc:       mov    0x8(%rcx),%rax
    0.00 :   283200:       sub    (%rcx),%rax
    0.00 :   283203:       sar    $0x3,%rax
    0.00 :   283207:       cmp    0x30(%rsp),%rax
    0.00 :   28320c:       jne    2831a8 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x358>
    0.00 :   28320e:       mov    0x20(%rsp),%rax
    0.00 :   283213:       mov    $0x1,%esi
    0.00 :   283218:       mov    %r14,%rdi
    0.00 :   28321b:       mov    -0x8(%rax),%rbp
    0.00 :   28321f:       lea    -0x8(%rax),%r12
    0.00 :   283223:       mov    %rbp,%rdx
    0.00 :   283226:       callq  282c00 <onnxruntime::BroadcastIterator::Append(long, long)>
    0.00 :   28322b:       mov    0x28(%rsp),%rdi
    0.00 :   283230:       mov    %rbp,%rdx
    0.00 :   283233:       mov    %rbp,%rsi
    0.00 :   283236:       callq  282c00 <onnxruntime::BroadcastIterator::Append(long, long)>
    0.00 :   28323b:       mov    %rbp,(%r15)
    0.00 :   28323e:       mov    %r12,0x20(%rsp)
    0.00 :   283243:       jmp    2831dd <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x38d>
    0.00 :   283245:       nopl   (%rax)
    0.00 :   283248:       mov    %rsi,%rdi
    0.00 :   28324b:       mov    %r12,0x40(%rsp)
    0.00 :   283250:       mov    %r12,%rbx
    0.00 :   283253:       test   %rdi,%rdi
    0.00 :   283256:       je     28303e <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x1ee>
    0.00 :   28325c:       mov    %rcx,%r15
    0.00 :   28325f:       mov    %rbx,(%rcx)
    0.00 :   283262:       cmp    $0x1,%rbx
    0.00 :   283266:       jle    283054 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x204>
    0.00 :   28326c:       jmpq   28306f <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x21f>
    0.00 :   283271:       nopl   0x0(%rax)
    0.00 :   283278:       mov    0x38(%rsp),%rax
    0.00 :   28327d:       mov    0x20(%rsp),%rbx
    0.00 :   283282:       cmp    (%rax),%rbx
    0.00 :   283285:       je     2833d8 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x588>
    0.00 :   28328b:       mov    0x20(%rsp),%rax
    0.00 :   283290:       mov    $0x1,%esi
    0.00 :   283295:       mov    %r14,%rdi
    0.00 :   283298:       mov    -0x8(%rax),%rbx
    0.00 :   28329c:       lea    -0x8(%rax),%r12
    0.00 :   2832a0:       mov    %rbx,%rdx
    0.00 :   2832a3:       callq  282a40 <onnxruntime::BroadcastIterator::Init(long, long)>
    0.00 :   2832a8:       mov    %rbx,%rdx
    0.00 :   2832ab:       mov    %rbx,%rsi
    0.00 :   2832ae:       lea    0x58(%r14),%rdi
    0.00 :   2832b2:       callq  282a40 <onnxruntime::BroadcastIterator::Init(long, long)>
    0.00 :   2832b7:       lea    -0x8(%r15),%rax
    0.00 :   2832bb:       mov    %rbx,-0x8(%r15)
    0.00 :   2832bf:       mov    %r12,0x20(%rsp)
    0.00 :   2832c4:       mov    %rbp,0x18(%rsp)
    0.00 :   2832c9:       jmpq   28317d <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x32d>
    0.00 :   2832ce:       xchg   %ax,%ax
         :            *  given data.
         :            */
         :            void
         :            resize(size_type __new_size, const value_type& __x)
         :            {
         :            if (__new_size > size())
    0.00 :   2832d0:       mov    0x8(%r14),%rsi
    0.00 :   2832d4:       mov    (%r14),%rcx
    0.00 :   2832d7:       movq   $0x0,0x50(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2832e0:       mov    0x38(%r14),%rax
    0.00 :   2832e4:       sub    0x30(%r14),%rax
    0.00 :   2832e8:       mov    %rsi,%rdi
    0.00 :   2832eb:       mov    %rax,%rdx
    0.00 :   2832ee:       sub    %rcx,%rdi
    0.00 :   2832f1:       sar    $0x3,%rdx
    0.00 :   2832f5:       sar    $0x3,%rdi
         :            if (__new_size > size())
    0.00 :   2832f9:       cmp    %rdi,%rdx
    0.00 :   2832fc:       ja     283398 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x548>
         :            _M_fill_insert(end(), __new_size - size(), __x);
         :            else if (__new_size < size())
    0.00 :   283302:       jae    283310 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x4c0>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   283304:       add    %rcx,%rax
         :            // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         :            // _M_assign_aux.
         :            void
         :            _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
         :            {
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   283307:       cmp    %rax,%rsi
    0.00 :   28330a:       je     283310 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x4c0>
         :            {
         :            std::_Destroy(__pos, this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            this->_M_impl._M_finish = __pos;
    0.00 :   28330c:       mov    %rax,0x8(%r14)
         :            if (__new_size > size())
    0.00 :   283310:       mov    0x60(%r14),%rsi
    0.00 :   283314:       mov    0x58(%r14),%rcx
    0.00 :   283318:       movq   $0x0,0x50(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   283321:       mov    0x90(%r14),%rax
    0.00 :   283328:       sub    0x88(%r14),%rax
    0.00 :   28332f:       mov    %rsi,%rdi
    0.00 :   283332:       mov    %rax,%rdx
    0.00 :   283335:       sub    %rcx,%rdi
    0.00 :   283338:       sar    $0x3,%rdx
    0.00 :   28333c:       sar    $0x3,%rdi
         :            if (__new_size > size())
   49.70 :   283340:       cmp    %rdi,%rdx
    0.00 :   283343:       ja     283380 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x530>
         :            else if (__new_size < size())
    0.00 :   283345:       jae    283353 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x503>
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   283347:       add    %rcx,%rax
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   28334a:       cmp    %rax,%rsi
    0.00 :   28334d:       je     283353 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x503>
         :            this->_M_impl._M_finish = __pos;
    0.00 :   28334f:       mov    %rax,0x60(%r14)
    0.00 :   283353:       mov    0xf8(%rsp),%rax
    0.00 :   28335b:       xor    %fs:0x28,%rax
    0.00 :   283364:       jne    2834e0 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x690>
    0.00 :   28336a:       add    $0x108,%rsp
    0.00 :   283371:       pop    %rbx
    0.00 :   283372:       pop    %rbp
    0.00 :   283373:       pop    %r12
    0.00 :   283375:       pop    %r13
    0.00 :   283377:       pop    %r14
    0.00 :   283379:       pop    %r15
    0.00 :   28337b:       retq
    0.00 :   28337c:       nopl   0x0(%rax)
         :            _M_fill_insert(end(), __new_size - size(), __x);
    0.00 :   283380:       sub    %rdi,%rdx
    0.00 :   283383:       mov    0x28(%rsp),%rdi
    0.00 :   283388:       lea    0x50(%rsp),%rcx
    0.00 :   28338d:       callq  24c430 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)>
    0.00 :   283392:       jmp    283353 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x503>
    0.00 :   283394:       nopl   0x0(%rax)
    0.00 :   283398:       sub    %rdi,%rdx
    0.00 :   28339b:       lea    0x50(%rsp),%rcx
    0.00 :   2833a0:       mov    %r14,%rdi
    0.00 :   2833a3:       callq  24c430 <std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)>
    0.00 :   2833a8:       jmpq   283310 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x4c0>
    0.00 :   2833ad:       nopl   (%rax)
         :            _M_default_append(__new_size - size());
    0.00 :   2833b0:       mov    0x30(%rsp),%rsi
    0.00 :   2833b5:       lea    0xb0(%r14),%rdi
    0.00 :   2833bc:       callq  27c810 <std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)>
    0.00 :   2833c1:       jmpq   282fa4 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x154>
    0.00 :   2833c6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   2833d0:       mov    %rdi,%r13
    0.00 :   2833d3:       jmpq   283015 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x1c5>
    0.00 :   2833d8:       mov    $0x1,%edx
    0.00 :   2833dd:       mov    $0x1,%esi
    0.00 :   2833e2:       mov    %r14,%rdi
    0.00 :   2833e5:       callq  282a40 <onnxruntime::BroadcastIterator::Init(long, long)>
    0.00 :   2833ea:       mov    $0x1,%edx
    0.00 :   2833ef:       mov    $0x1,%esi
    0.00 :   2833f4:       lea    0x58(%r14),%rdi
    0.00 :   2833f8:       callq  282a40 <onnxruntime::BroadcastIterator::Init(long, long)>
    0.00 :   2833fd:       movq   $0x1,0x8(%rsp)
    0.00 :   283406:       mov    0x8(%rsp),%rax
    0.00 :   28340b:       mov    %rbp,0x18(%rsp)
    0.00 :   283410:       mov    %rax,0x10(%rsp)
    0.00 :   283415:       jmpq   283190 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x340>
    0.00 :   28341a:       nopw   0x0(%rax,%rax,1)
    0.00 :   283420:       mov    $0xa0,%edi
    0.00 :   283425:       lea    0x50(%rsp),%r13
    0.00 :   28342a:       lea    0x70(%rsp),%rbp
    0.00 :   28342f:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   283434:       mov    %rbp,%rdi
    0.00 :   283437:       lea    0x40(%rsp),%rdx
    0.00 :   28343c:       mov    %r13,%rcx
    0.00 :   28343f:       mov    %rax,%r12
    0.00 :   283442:       lea    0x61e7da(%rip),%rax        # 8a1c23 <typeinfo name for onnxruntime::contrib::RegisterRangeOpSchema(onnx::OpSchema&&)::{lambda(onnx::InferenceContext&)#1}+0x14c3>
    0.00 :   283449:       lea    0x48(%rsp),%rsi
    0.00 :   28344e:       mov    %rax,0x50(%rsp)
    0.00 :   283453:       lea    0x5c18fc(%rip),%rax        # 844d56 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x4d6>
    0.00 :   28345a:       mov    %rax,0x48(%rsp)
    0.00 :   28345f:       callq  27c940 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, long, char const*>(char const* const&, long const&, char const* const&)>
    0.00 :   283464:       mov    %r13,%rdi
    0.00 :   283467:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   28346c:       lea    0x90(%rsp),%rbx
    0.00 :   283474:       mov    %r13,%r8
    0.00 :   283477:       lea    0x5c28c2(%rip),%rcx        # 845d40 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)::__PRETTY_FUNCTION__>
    0.00 :   28347e:       mov    $0x24f,%edx
    0.00 :   283483:       lea    0x5c15ce(%rip),%rsi        # 844a58 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x1d8>
    0.00 :   28348a:       mov    %rbx,%rdi
    0.00 :   28348d:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   283492:       mov    %rbp,%rcx
    0.00 :   283495:       lea    0x5c18d6(%rip),%rdx        # 844d72 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x4f2>
    0.00 :   28349c:       mov    %rbx,%rsi
    0.00 :   28349f:       mov    %r12,%rdi
    0.00 :   2834a2:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2834a7:       mov    %rbx,%rdi
    0.00 :   2834aa:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2834af:       mov    %r13,%rdi
    0.00 :   2834b2:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            traits_type::assign(_M_data()[__n], _CharT());
         :            }
         :
         :            bool
         :            _M_is_local() const
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2834b7:       mov    0x70(%rsp),%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   2834bc:       lea    0x10(%rbp),%rdx
    0.00 :   2834c0:       cmp    %rdx,%rdi
    0.00 :   2834c3:       je     2834ca <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x67a>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2834c5:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2834ca:       lea    -0x189db1(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   2834d1:       lea    0x98e158(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   2834d8:       mov    %r12,%rdi
    0.00 :   2834db:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   2834e0:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   2834e5:       mov    $0xa0,%edi
    0.00 :   2834ea:       lea    0x50(%rsp),%r13
    0.00 :   2834ef:       lea    0x70(%rsp),%rbp
    0.00 :   2834f4:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2834f9:       mov    %rbp,%rdi
    0.00 :   2834fc:       lea    0x40(%rsp),%rdx
    0.00 :   283501:       mov    %r13,%rcx
    0.00 :   283504:       mov    %rax,%r12
    0.00 :   283507:       lea    0x61e715(%rip),%rax        # 8a1c23 <typeinfo name for onnxruntime::contrib::RegisterRangeOpSchema(onnx::OpSchema&&)::{lambda(onnx::InferenceContext&)#1}+0x14c3>
    0.00 :   28350e:       lea    0x48(%rsp),%rsi
    0.00 :   283513:       mov    %rax,0x50(%rsp)
    0.00 :   283518:       lea    0x5c1837(%rip),%rax        # 844d56 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x4d6>
    0.00 :   28351f:       mov    %rax,0x48(%rsp)
    0.00 :   283524:       callq  27c940 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, long, char const*>(char const* const&, long const&, char const* const&)>
    0.00 :   283529:       mov    %r13,%rdi
    0.00 :   28352c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   283531:       lea    0x90(%rsp),%rbx
    0.00 :   283539:       mov    %r13,%r8
    0.00 :   28353c:       lea    0x5c27fd(%rip),%rcx        # 845d40 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)::__PRETTY_FUNCTION__>
    0.00 :   283543:       mov    $0x235,%edx
    0.00 :   283548:       lea    0x5c1509(%rip),%rsi        # 844a58 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x1d8>
    0.00 :   28354f:       mov    %rbx,%rdi
    0.00 :   283552:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   283557:       mov    %rbp,%rcx
    0.00 :   28355a:       lea    0x5c1811(%rip),%rdx        # 844d72 <onnxruntime::EinsumTypedComputeProcessor<float>::PairwiseOperandProcess(onnxruntime::Tensor const&, onnxruntime::TensorShape const&, onnxruntime::Tensor const&, onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> > const&, bool)::__PRETTY_FUNCTION__+0x4f2>
    0.00 :   283561:       mov    %rbx,%rsi
    0.00 :   283564:       mov    %r12,%rdi
    0.00 :   283567:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   28356c:       mov    %rbx,%rdi
    0.00 :   28356f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   283574:       mov    %r13,%rdi
    0.00 :   283577:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   28357c:       mov    0x70(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   283581:       lea    0x10(%rbp),%rdx
    0.00 :   283585:       cmp    %rdx,%rdi
    0.00 :   283588:       je     28358f <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x73f>
    0.00 :   28358a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   28358f:       lea    -0x189e76(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   283596:       lea    0x98e093(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   28359d:       mov    %r12,%rdi
    0.00 :   2835a0:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   2835a5:       mov    %rax,%r15
    0.00 :   2835a8:       jmp    2835b4 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x764>
    0.00 :   2835aa:       mov    %rax,%rbx
    0.00 :   2835ad:       jmp    2835bf <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x76f>
    0.00 :   2835af:       mov    %rax,%rbx
    0.00 :   2835b2:       jmp    2835c7 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x777>
    0.00 :   2835b4:       mov    %rbx,%rdi
    0.00 :   2835b7:       mov    %r15,%rbx
    0.00 :   2835ba:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2835bf:       mov    %r13,%rdi
    0.00 :   2835c2:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2835c7:       mov    0x70(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   2835cc:       lea    0x10(%rbp),%rdx
    0.00 :   2835d0:       cmp    %rdx,%rdi
    0.00 :   2835d3:       jne    283613 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x7c3>
    0.00 :   2835d5:       mov    %r12,%rdi
    0.00 :   2835d8:       callq  52fe0 <__cxa_free_exception@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2835dd:       mov    0xb0(%r14),%rdi
         :            if (__p)
    0.00 :   2835e4:       test   %rdi,%rdi
    0.00 :   2835e7:       je     2835ee <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x79e>
    0.00 :   2835e9:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2835ee:       mov    0x28(%rsp),%rdi
    0.00 :   2835f3:       callq  26fa30 <onnxruntime::BroadcastIterator::~BroadcastIterator()>
    0.00 :   2835f8:       mov    %r14,%rdi
    0.00 :   2835fb:       callq  26fa30 <onnxruntime::BroadcastIterator::~BroadcastIterator()>
    0.00 :   283600:       mov    %rbx,%rdi
    0.00 :   283603:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   283608:       jmp    2835a5 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x755>
    0.00 :   28360a:       jmp    2835aa <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x75a>
    0.00 :   28360c:       jmp    2835af <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x75f>
    0.00 :   28360e:       mov    %rax,%rbx
    0.00 :   283611:       jmp    2835dd <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x78d>
    0.00 :   283613:       callq  53300 <operator delete(void*)@plt>
    0.00 :   283618:       jmp    2835d5 <onnxruntime::Broadcaster::Broadcaster(std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)+0x785>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000006e5600 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)>:
         :            _Z19MlasExecuteThreadedPFvPviES_iPN11onnxruntime11concurrency10ThreadPoolE():
    0.00 :   6e5600:       push   %r13
    0.00 :   6e5602:       push   %r12
    0.00 :   6e5604:       push   %rbp
    0.00 :   6e5605:       push   %rbx
    0.00 :   6e5606:       sub    $0x58,%rsp
    0.00 :   6e560a:       mov    %rdi,0x8(%rsp)
    0.00 :   6e560f:       mov    %rsi,(%rsp)
    0.00 :   6e5613:       mov    %fs:0x28,%rax
    0.00 :   6e561c:       mov    %rax,0x48(%rsp)
    0.00 :   6e5621:       xor    %eax,%eax
    0.00 :   6e5623:       cmp    $0x1,%edx
    0.00 :   6e5626:       je     6e5700 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x100>
         :            #endif // __cpp_sized_deallocation
         :            #endif // __cpp_aligned_new
         :
         :            // Default placement versions of operator new.
         :            inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :            { return __p; }
    0.00 :   6e562c:       lea    0x8(%rsp),%rax
         :            typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
         :
         :            if (_My_handler::_M_not_empty_function(__f))
         :            {
         :            _My_handler::_M_init_functor(_M_functor, std::move(__f));
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   6e5631:       lea    -0x98(%rip),%rsi        # 6e55a0 <std::_Function_handler<void (long), MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)::{lambda(long)#1}>::_M_invoke(std::_Any_data const&, long&&)>
    0.00 :   6e5638:       movslq %edx,%rbx
    0.00 :   6e563b:       mov    %rax,0x20(%rsp)
    0.00 :   6e5640:       mov    %rsp,%rax
    0.00 :   6e5643:       mov    %rax,0x28(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   6e5648:       lea    -0x8f(%rip),%rax        # 6e55c0 <std::_Function_base::_Base_manager<MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)::{lambda(long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)::{lambda(long)#1}> const&, std::_Manager_operation)>
         :            _M_invoker = &_My_handler::_M_invoke;
    0.00 :   6e564f:       mov    %rsi,0x38(%rsp)
         :            _M_manager = &_My_handler::_M_manager;
    0.00 :   6e5654:       mov    %rax,0x30(%rsp)
    0.00 :   6e5659:       test   %rcx,%rcx
    0.00 :   6e565c:       je     6e56b0 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0xb0>
    0.00 :   6e565e:       lea    0x20(%rsp),%r12
    0.00 :   6e5663:       mov    %rbx,%rsi
    0.00 :   6e5666:       mov    %rcx,%rdi
    0.00 :   6e5669:       mov    %r12,%rdx
    0.00 :   6e566c:       callq  69deb0 <onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::function<void (long)> const&)>
    0.00 :   6e5671:       mov    0x30(%rsp),%rax
         :            if (_M_manager)
    0.00 :   6e5676:       test   %rax,%rax
    0.00 :   6e5679:       je     6e5688 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x88>
         :            _M_manager(_M_functor, _M_functor, __destroy_functor);
    0.00 :   6e567b:       mov    $0x3,%edx
    0.00 :   6e5680:       mov    %r12,%rsi
    0.00 :   6e5683:       mov    %r12,%rdi
    0.00 :   6e5686:       callq  *%rax
    0.00 :   6e5688:       mov    0x48(%rsp),%rax
    0.00 :   6e568d:       xor    %fs:0x28,%rax
    0.00 :   6e5696:       jne    6e571a <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x11a>
    0.00 :   6e569c:       add    $0x58,%rsp
    0.00 :   6e56a0:       pop    %rbx
   60.64 :   6e56a1:       pop    %rbp
    0.00 :   6e56a2:       pop    %r12
    0.00 :   6e56a4:       pop    %r13
    0.00 :   6e56a6:       retq
    0.00 :   6e56a7:       nopw   0x0(%rax,%rax,1)
    0.00 :   6e56b0:       test   %rbx,%rbx
    0.00 :   6e56b3:       jle    6e5710 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x110>
    0.00 :   6e56b5:       mov    %rsi,%rax
    0.00 :   6e56b8:       lea    0x20(%rsp),%r12
    0.00 :   6e56bd:       lea    0x18(%rsp),%r13
    0.00 :   6e56c2:       xor    %ebp,%ebp
    0.00 :   6e56c4:       movq   $0x0,0x18(%rsp)
         :            bool _M_empty() const { return !_M_manager; }
    0.00 :   6e56cd:       jmp    6e56d5 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0xd5>
    0.00 :   6e56cf:       nop
    0.00 :   6e56d0:       mov    0x38(%rsp),%rax
         :            function<_Res(_ArgTypes...)>::
         :            operator()(_ArgTypes... __args) const
         :            {
         :            if (_M_empty())
         :            __throw_bad_function_call();
         :            return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    0.00 :   6e56d5:       mov    %r13,%rsi
    0.00 :   6e56d8:       mov    %r12,%rdi
    0.00 :   6e56db:       callq  *%rax
    0.00 :   6e56dd:       add    $0x1,%rbp
    0.00 :   6e56e1:       mov    0x30(%rsp),%rax
    0.00 :   6e56e6:       cmp    %rbp,%rbx
    0.00 :   6e56e9:       je     6e5676 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x76>
    0.00 :   6e56eb:       mov    %rbp,0x18(%rsp)
         :            if (_M_empty())
    0.00 :   6e56f0:       test   %rax,%rax
    0.00 :   6e56f3:       jne    6e56d0 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0xd0>
         :            __throw_bad_function_call();
    0.00 :   6e56f5:       callq  52bd0 <std::__throw_bad_function_call()@plt>
    0.00 :   6e56fa:       nopw   0x0(%rax,%rax,1)
    0.00 :   6e5700:       xor    %esi,%esi
    0.00 :   6e5702:       mov    (%rsp),%rdi
    0.00 :   6e5706:       callq  *0x8(%rsp)
   39.36 :   6e570a:       jmpq   6e5688 <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x88>
    0.00 :   6e570f:       nop
    0.00 :   6e5710:       lea    0x20(%rsp),%r12
    0.00 :   6e5715:       jmpq   6e567b <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*)+0x7b>
    0.00 :   6e571a:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   6e571f:       mov    %rax,%rbx
    0.00 :   6e5722:       jmpq   cb83b <MlasExecuteThreaded(void (*)(void*, int), void*, int, onnxruntime::concurrency::ThreadPool*) [clone .cold.8]>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000059c450 <onnxruntime::TensorType<float>::GetElementType() const>:
         :            _ZNK11onnxruntime10TensorTypeIfE14GetElementTypeEv():
  100.00 :   59c450:       jmpq   59c440 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<float>()>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c80f0 <onnxruntime::OpKernelInfo::GetAllocator(int, OrtMemType) const>:
         :            _ZNK11onnxruntime12OpKernelInfo12GetAllocatorEi10OrtMemType():
    0.00 :   5c80f0:       push   %rbx
    0.00 :   5c80f1:       mov    %rdi,%rbx
    0.00 :   5c80f4:       sub    $0x10,%rsp
    0.00 :   5c80f8:       mov    0x18(%rsi),%rsi
    0.00 :   5c80fc:       mov    %fs:0x28,%rax
    0.00 :   5c8105:       mov    %rax,0x8(%rsp)
    0.00 :   5c810a:       xor    %eax,%eax
    0.00 :   5c810c:       mov    (%rsi),%rax
  100.00 :   5c810f:       callq  *0x10(%rax)
    0.00 :   5c8112:       mov    0x8(%rsp),%rdi
    0.00 :   5c8117:       xor    %fs:0x28,%rdi
    0.00 :   5c8120:       jne    5c812b <onnxruntime::OpKernelInfo::GetAllocator(int, OrtMemType) const+0x3b>
    0.00 :   5c8122:       add    $0x10,%rsp
    0.00 :   5c8126:       mov    %rbx,%rax
    0.00 :   5c8129:       pop    %rbx
    0.00 :   5c812a:       retq
    0.00 :   5c812b:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of ath10k_core.ko for cache-misses (1 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000041590 <_ath10k_ce_completed_recv_next_nolock>:
         :           _ath10k_ce_completed_recv_next_nolock():
    0.00 :   41590:       callq  41595 <_ath10k_ce_completed_recv_next_nolock+0x5>
    0.00 :   41595:       mov    0x38(%rdi),%rcx
    0.00 :   41599:       push   %rbp
    0.00 :   4159a:       mov    %rsp,%rbp
    0.00 :   4159d:       mov    0x8(%rcx),%r9d
    0.00 :   415a1:       mov    0x28(%rcx),%r8
    0.00 :   415a5:       mov    0x4(%rcx),%r11d
    0.00 :   415a9:       lea    (%r8,%r9,8),%r10
    0.00 :   415ad:       movzwl 0x4(%r10),%r8d
  100.00 :   415b2:       test   %r8w,%r8w
    0.00 :   415b6:       je     415ee <_ath10k_ce_completed_recv_next_nolock+0x5e>
    0.00 :   415b8:       test   %rsi,%rsi
    0.00 :   415bb:       movw   $0x0,0x4(%r10)
    0.00 :   415c2:       mov    %r9,%rax
    0.00 :   415c5:       mov    %r8d,(%rdx)
    0.00 :   415c8:       je     415d2 <_ath10k_ce_completed_recv_next_nolock+0x42>
    0.00 :   415ca:       mov    0x48(%rcx,%r9,8),%rdx
    0.00 :   415cf:       mov    %rdx,(%rsi)
    0.00 :   415d2:       cmpl   $0x5,0x8(%rdi)
    0.00 :   415d6:       je     415e1 <_ath10k_ce_completed_recv_next_nolock+0x51>
    0.00 :   415d8:       movq   $0x0,0x48(%rcx,%r9,8)
    0.00 :   415e1:       add    $0x1,%eax
    0.00 :   415e4:       and    %r11d,%eax
    0.00 :   415e7:       mov    %eax,0x8(%rcx)
    0.00 :   415ea:       xor    %eax,%eax
    0.00 :   415ec:       pop    %rbp
    0.00 :   415ed:       retq
    0.00 :   415ee:       mov    $0xfffffffb,%eax
    0.00 :   415f3:       pop    %rbp
    0.00 :   415f4:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000059bf30 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::Tensor>()>:
         :            _ZN11onnxruntime12DataTypeImpl7GetTypeINS_6TensorEEEPKS0_v():
  100.00 :   59bf30:       jmpq   59beb0 <onnxruntime::TensorTypeBase::Type()>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000034f6c0 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)>:
         :            _ZNSt6vectorIlSaIlEE13_M_assign_auxIN9__gnu_cxx17__normal_iteratorIPKlS1_EEEEvT_S8_St20forward_iterator_tag():
         :            }
         :
         :            template<typename _Tp, typename _Alloc>
         :            template<typename _ForwardIterator>
         :            void
         :            vector<_Tp, _Alloc>::
   46.18 :   34f6c0:       push   %r14
    0.00 :   34f6c2:       push   %r13
    0.00 :   34f6c4:       mov    %rdx,%r13
    0.00 :   34f6c7:       push   %r12
   53.82 :   34f6c9:       push   %rbp
         :            template<typename _Iterator, typename _Container>
         :            inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :            operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
         :            const __normal_iterator<_Iterator, _Container>& __rhs)
         :            _GLIBCXX_NOEXCEPT
         :            { return __lhs.base() - __rhs.base(); }
    0.00 :   34f6ca:       mov    %rdx,%rbp
    0.00 :   34f6cd:       push   %rbx
    0.00 :   34f6ce:       sub    %rsi,%rbp
    0.00 :   34f6d1:       mov    %rdi,%rbx
    0.00 :   34f6d4:       mov    %rbp,%rax
    0.00 :   34f6d7:       sar    $0x3,%rax
    0.00 :   34f6db:       sub    $0x10,%rsp
         :            _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
         :            std::forward_iterator_tag)
         :            {
         :            const size_type __len = std::distance(__first, __last);
         :
         :            if (__len > capacity())
    0.00 :   34f6df:       mov    (%rdi),%r12
         :            *  hold before needing to allocate more memory.
         :            */
         :            size_type
         :            capacity() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start); }
    0.00 :   34f6e2:       mov    0x10(%rdi),%rdx
    0.00 :   34f6e6:       sub    %r12,%rdx
    0.00 :   34f6e9:       sar    $0x3,%rdx
    0.00 :   34f6ed:       cmp    %rdx,%rax
    0.00 :   34f6f0:       ja     34f788 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0xc8>
         :            - this->_M_impl._M_start);
         :            this->_M_impl._M_start = __tmp;
         :            this->_M_impl._M_finish = this->_M_impl._M_start + __len;
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
         :            }
         :            else if (size() >= __len)
    0.00 :   34f6f6:       mov    0x8(%rdi),%rcx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   34f6fa:       mov    %rcx,%rdx
    0.00 :   34f6fd:       sub    %r12,%rdx
    0.00 :   34f700:       mov    %rdx,%rdi
    0.00 :   34f703:       sar    $0x3,%rdi
    0.00 :   34f707:       cmp    %rdi,%rax
    0.00 :   34f70a:       ja     34f740 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0x80>
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   34f70c:       cmp    %r13,%rsi
    0.00 :   34f70f:       je     34f720 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0x60>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   34f711:       mov    %rbp,%rdx
    0.00 :   34f714:       mov    %r12,%rdi
    0.00 :   34f717:       callq  53aa0 <memmove@plt>
    0.00 :   34f71c:       mov    0x8(%rbx),%rcx
         :            return __result + _Num;
    0.00 :   34f720:       add    %r12,%rbp
         :            // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         :            // _M_assign_aux.
         :            void
         :            _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
         :            {
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   34f723:       cmp    %rcx,%rbp
    0.00 :   34f726:       je     34f72c <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0x6c>
         :            {
         :            std::_Destroy(__pos, this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            this->_M_impl._M_finish = __pos;
    0.00 :   34f728:       mov    %rbp,0x8(%rbx)
         :            std::__uninitialized_copy_a(__mid, __last,
         :            this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
         :            }
         :            }
    0.00 :   34f72c:       add    $0x10,%rsp
    0.00 :   34f730:       pop    %rbx
    0.00 :   34f731:       pop    %rbp
    0.00 :   34f732:       pop    %r12
    0.00 :   34f734:       pop    %r13
    0.00 :   34f736:       pop    %r14
    0.00 :   34f738:       retq
    0.00 :   34f739:       nopl   0x0(%rax)
         :            { _M_current += __n; return *this; }
    0.00 :   34f740:       lea    (%rsi,%rdx,1),%rbp
         :            if (_Num)
    0.00 :   34f744:       cmp    %rbp,%rsi
    0.00 :   34f747:       je     34f755 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0x95>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   34f749:       mov    %r12,%rdi
    0.00 :   34f74c:       callq  53aa0 <memmove@plt>
    0.00 :   34f751:       mov    0x8(%rbx),%rcx
         :            const ptrdiff_t _Num = __last - __first;
    0.00 :   34f755:       mov    %r13,%r12
    0.00 :   34f758:       sub    %rbp,%r12
         :            if (_Num)
    0.00 :   34f75b:       cmp    %rbp,%r13
    0.00 :   34f75e:       je     34f771 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0xb1>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   34f760:       mov    %rcx,%rdi
    0.00 :   34f763:       mov    %r12,%rdx
    0.00 :   34f766:       mov    %rbp,%rsi
    0.00 :   34f769:       callq  53aa0 <memmove@plt>
    0.00 :   34f76e:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   34f771:       add    %r12,%rcx
    0.00 :   34f774:       mov    %rcx,0x8(%rbx)
    0.00 :   34f778:       add    $0x10,%rsp
    0.00 :   34f77c:       pop    %rbx
    0.00 :   34f77d:       pop    %rbp
    0.00 :   34f77e:       pop    %r12
    0.00 :   34f780:       pop    %r13
    0.00 :   34f782:       pop    %r14
    0.00 :   34f784:       retq
    0.00 :   34f785:       nopl   (%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   34f788:       xor    %r14d,%r14d
    0.00 :   34f78b:       test   %rax,%rax
    0.00 :   34f78e:       je     34f7b7 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0xf7>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   34f790:       movabs $0x1fffffffffffffff,%rdx
    0.00 :   34f79a:       cmp    %rdx,%rax
    0.00 :   34f79d:       ja     34f7ef <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0x12f>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   34f79f:       mov    %rbp,%rdi
    0.00 :   34f7a2:       mov    %rsi,0x8(%rsp)
    0.00 :   34f7a7:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   34f7ac:       mov    (%rbx),%r12
    0.00 :   34f7af:       mov    0x8(%rsp),%rsi
    0.00 :   34f7b4:       mov    %rax,%r14
         :            if (_Num)
    0.00 :   34f7b7:       cmp    %r13,%rsi
    0.00 :   34f7ba:       je     34f7c7 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0x107>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   34f7bc:       mov    %rbp,%rdx
    0.00 :   34f7bf:       mov    %r14,%rdi
    0.00 :   34f7c2:       callq  53150 <memcpy@plt>
         :            if (__p)
    0.00 :   34f7c7:       test   %r12,%r12
    0.00 :   34f7ca:       je     34f7d4 <void std::vector<long, std::allocator<long> >::_M_assign_aux<__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > > >(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, __gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, std::forward_iterator_tag)+0x114>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   34f7cc:       mov    %r12,%rdi
    0.00 :   34f7cf:       callq  53300 <operator delete(void*)@plt>
         :            this->_M_impl._M_finish = this->_M_impl._M_start + __len;
    0.00 :   34f7d4:       add    %r14,%rbp
         :            this->_M_impl._M_start = __tmp;
    0.00 :   34f7d7:       mov    %r14,(%rbx)
         :            this->_M_impl._M_finish = this->_M_impl._M_start + __len;
    0.00 :   34f7da:       mov    %rbp,0x8(%rbx)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
    0.00 :   34f7de:       mov    %rbp,0x10(%rbx)
         :            }
    0.00 :   34f7e2:       add    $0x10,%rsp
    0.00 :   34f7e6:       pop    %rbx
    0.00 :   34f7e7:       pop    %rbp
    0.00 :   34f7e8:       pop    %r12
    0.00 :   34f7ea:       pop    %r13
    0.00 :   34f7ec:       pop    %r14
    0.00 :   34f7ee:       retq
         :            std::__throw_bad_alloc();
    0.00 :   34f7ef:       callq  52ba0 <std::__throw_bad_alloc()@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000460170 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)>:
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460170:       push   %r15
    0.00 :   460172:       push   %r14
    0.00 :   460174:       push   %r13
    0.00 :   460176:       push   %r12
    0.00 :   460178:       mov    %rdx,%r12
    0.00 :   46017b:       push   %rbp
    0.00 :   46017c:       push   %rbx
    0.00 :   46017d:       mov    %rsi,%rbx
    0.00 :   460180:       sub    $0x208,%rsp
    0.00 :   460187:       mov    (%rdx),%rcx
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   46018a:       mov    0x8(%rdx),%rsi
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46018e:       mov    %fs:0x28,%rax
    0.00 :   460197:       mov    %rax,0x1f8(%rsp)
    0.00 :   46019f:       xor    %eax,%eax
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4601a1:       sub    %rcx,%rsi
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4601a4:       sar    $0x3,%rsi
    0.00 :   4601a8:       je     4602af <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x13f>
    0.00 :   4601ae:       mov    (%rcx),%rdx
    0.00 :   4601b1:       cmp    $0xffffffffffffffff,%rdx
    0.00 :   4601b5:       jl     4603a2 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x232>
    0.00 :   4601bb:       mov    $0x1,%r13d
    0.00 :   4601c1:       mov    $0xffffffffffffffff,%r14
    0.00 :   4601c8:       jmp    460200 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x90>
    0.00 :   4601ca:       nopw   0x0(%rax,%rax,1)
    0.00 :   4601d0:       test   %rdx,%rdx
    0.00 :   4601d3:       je     460288 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x118>
    0.00 :   4601d9:       mov    (%rcx,%rax,8),%rdx
    0.00 :   4601dd:       add    $0x1,%rax
    0.00 :   4601e1:       imul   %rdx,%r13
  100.00 :   4601e5:       cmp    %rax,%rsi
    0.00 :   4601e8:       je     46021c <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xac>
    0.00 :   4601ea:       mov    (%rcx,%rax,8),%rdx
    0.00 :   4601ee:       lea    0x0(,%rax,8),%rbp
    0.00 :   4601f6:       cmp    $0xffffffffffffffff,%rdx
    0.00 :   4601fa:       jl     4603a4 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x234>
    0.00 :   460200:       cmp    $0xffffffffffffffff,%rdx
    0.00 :   460204:       jne    4601d0 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x60>
    0.00 :   460206:       cmp    $0xffffffffffffffff,%r14
    0.00 :   46020a:       jne    460a98 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x928>
    0.00 :   460210:       mov    %rax,%r14
    0.00 :   460213:       add    $0x1,%rax
    0.00 :   460217:       cmp    %rax,%rsi
    0.00 :   46021a:       jne    4601ea <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x7a>
    0.00 :   46021c:       cmp    $0xffffffffffffffff,%r14
    0.00 :   460220:       je     4602b5 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x145>
    0.00 :   460226:       test   %r13,%r13
    0.00 :   460229:       je     460cbd <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xb4d>
    0.00 :   46022f:       mov    %rbx,%rdi
    0.00 :   460232:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   460237:       cqto
    0.00 :   460239:       idiv   %r13
    0.00 :   46023c:       test   %rdx,%rdx
    0.00 :   46023f:       jne    460cbd <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xb4d>
    0.00 :   460245:       mov    %rbx,%rdi
    0.00 :   460248:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   46024d:       mov    (%r12),%rcx
    0.00 :   460251:       cqto
    0.00 :   460253:       idiv   %r13
    0.00 :   460256:       mov    %rax,(%rcx,%r14,8)
    0.00 :   46025a:       mov    0x1f8(%rsp),%rax
    0.00 :   460262:       xor    %fs:0x28,%rax
    0.00 :   46026b:       jne    460cb8 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xb48>
    0.00 :   460271:       add    $0x208,%rsp
    0.00 :   460278:       pop    %rbx
    0.00 :   460279:       pop    %rbp
    0.00 :   46027a:       pop    %r12
    0.00 :   46027c:       pop    %r13
    0.00 :   46027e:       pop    %r14
    0.00 :   460280:       pop    %r15
    0.00 :   460282:       retq
    0.00 :   460283:       nopl   0x0(%rax,%rax,1)
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460288:       mov    (%rbx),%rdi
    0.00 :   46028b:       mov    0x8(%rbx),%rdx
    0.00 :   46028f:       sub    %rdi,%rdx
    0.00 :   460292:       sar    $0x3,%rdx
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460296:       cmp    %rax,%rdx
    0.00 :   460299:       jbe    460855 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x6e5>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46029f:       movslq %eax,%rdx
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4602a2:       mov    (%rdi,%rdx,8),%rdx
    0.00 :   4602a6:       mov    %rdx,(%rcx,%rax,8)
    0.00 :   4602aa:       jmpq   4601dd <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x6d>
    0.00 :   4602af:       mov    $0x1,%r13d
    0.00 :   4602b5:       mov    %rbx,%rdi
    0.00 :   4602b8:       callq  5f2730 <onnxruntime::TensorShape::Size() const>
    0.00 :   4602bd:       cmp    %rax,%r13
    0.00 :   4602c0:       je     46025a <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xea>
    0.00 :   4602c2:       mov    $0xa0,%edi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4602c7:       lea    0x40(%rsp),%r14
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4602cc:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4602d1:       mov    %r12,%rsi
    0.00 :   4602d4:       mov    %r14,%rdi
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4602d7:       mov    %rax,%r13
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4602da:       callq  22d160 <std::vector<long, std::allocator<long> >::vector(std::vector<long, std::allocator<long> > const&)>
    0.00 :   4602df:       lea    0x20(%rsp),%r12
    0.00 :   4602e4:       lea    0x60(%rsp),%rbp
    0.00 :   4602e9:       mov    %r14,%r8
    0.00 :   4602ec:       mov    %rbx,%rdx
    0.00 :   4602ef:       lea    0x41536b(%rip),%rax        # 875661 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x281>
    0.00 :   4602f6:       mov    %rbp,%rdi
    0.00 :   4602f9:       lea    0x18(%rsp),%rsi
    0.00 :   4602fe:       mov    %r12,%rcx
    0.00 :   460301:       mov    %rax,0x20(%rsp)
    0.00 :   460306:       lea    0x415273(%rip),%rax        # 875580 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x1a0>
    0.00 :   46030d:       mov    %rax,0x18(%rsp)
    0.00 :   460312:       callq  45fc00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, onnxruntime::TensorShape, char const*, onnxruntime::TensorShape>(char const* const&, onnxruntime::TensorShape const&, char const* const&, onnxruntime::TensorShape const&)>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460317:       mov    %r12,%rdi
    0.00 :   46031a:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   46031f:       lea    0x80(%rsp),%rbx
    0.00 :   460327:       mov    %r12,%r8
    0.00 :   46032a:       lea    0x41540f(%rip),%rcx        # 875740 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)::__PRETTY_FUNCTION__>
    0.00 :   460331:       mov    $0x2b,%edx
    0.00 :   460336:       lea    0x41515b(%rip),%rsi        # 875498 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0xb8>
    0.00 :   46033d:       mov    %rbx,%rdi
    0.00 :   460340:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   460345:       mov    %rbp,%rcx
    0.00 :   460348:       lea    0x4152b1(%rip),%rdx        # 875600 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x220>
    0.00 :   46034f:       mov    %rbx,%rsi
    0.00 :   460352:       mov    %r13,%rdi
    0.00 :   460355:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   46035a:       mov    %rbx,%rdi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   46035d:       add    $0x10,%rbp
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460361:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   460366:       mov    %r12,%rdi
    0.00 :   460369:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   46036e:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460373:       cmp    %rbp,%rdi
    0.00 :   460376:       je     46037d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x20d>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   460378:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   46037d:       mov    0x40(%rsp),%rdi
         :            if (__p)
    0.00 :   460382:       test   %rdi,%rdi
    0.00 :   460385:       je     46038c <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x21c>
    0.00 :   460387:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46038c:       lea    -0x366c73(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   460393:       lea    0x7b1296(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   46039a:       mov    %r13,%rdi
    0.00 :   46039d:       callq  53bc0 <__cxa_throw@plt>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            */
         :            reference
         :            operator[](size_type __n) _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   4603a2:       xor    %ebp,%ebp
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4603a4:       mov    $0xa0,%edi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   4603a9:       lea    0x80(%rsp),%rbx
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4603b1:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4603b6:       lea    0x70(%rbx),%rdi
    0.00 :   4603ba:       add    (%r12),%rbp
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4603be:       mov    %rax,0x8(%rsp)
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4603c3:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   4603c8:       mov    0x7c7759(%rip),%r15        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   4603cf:       xor    %esi,%esi
    0.00 :   4603d1:       movq   $0x0,0x1c8(%rsp)
    0.00 :   4603dd:       movq   $0x0,0x1d8(%rsp)
    0.00 :   4603e9:       movq   $0x0,0x1e0(%rsp)
    0.00 :   4603f5:       lea    0x10(%r15),%rax
    0.00 :   4603f9:       mov    %rax,0xf0(%rsp)
    0.00 :   460401:       xor    %eax,%eax
    0.00 :   460403:       mov    %ax,0x1d0(%rsp)
    0.00 :   46040b:       mov    0x7c798e(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   460412:       movq   $0x0,0x1e8(%rsp)
    0.00 :   46041e:       mov    0x8(%rax),%r12
    0.00 :   460422:       mov    0x10(%rax),%r14
    0.00 :   460426:       movq   $0x0,0x1f0(%rsp)
    0.00 :   460432:       mov    -0x18(%r12),%rdi
    0.00 :   460437:       mov    %r12,0x80(%rsp)
    0.00 :   46043f:       add    %rbx,%rdi
    0.00 :   460442:       mov    %r14,(%rdi)
    0.00 :   460445:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   46044a:       mov    0x7c790f(%rip),%r13        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   460451:       lea    0x40(%rbx),%rdi
    0.00 :   460455:       movq   $0x0,0x90(%rsp)
    0.00 :   460461:       movq   $0x0,0x98(%rsp)
    0.00 :   46046d:       movq   $0x0,0xa0(%rsp)
    0.00 :   460479:       lea    0x18(%r13),%rax
    0.00 :   46047d:       mov    %rax,0x80(%rsp)
    0.00 :   460485:       lea    0x40(%r13),%rax
    0.00 :   460489:       mov    %rax,0xf0(%rsp)
    0.00 :   460491:       mov    0x7c77c8(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   460498:       movq   $0x0,0xa8(%rsp)
    0.00 :   4604a4:       movq   $0x0,0xb0(%rsp)
    0.00 :   4604b0:       add    $0x10,%rax
    0.00 :   4604b4:       mov    %rax,0x88(%rsp)
    0.00 :   4604bc:       movq   $0x0,0xb8(%rsp)
    0.00 :   4604c8:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4604cd:       mov    0x7c7b04(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   4604d4:       lea    0x8(%rbx),%rsi
    0.00 :   4604d8:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   4604dc:       movl   $0x10,0xc8(%rsp)
    0.00 :   4604e7:       add    $0x10,%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   4604eb:       movb   $0x0,0xe0(%rsp)
    0.00 :   4604f3:       mov    %rax,0x88(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   4604fb:       lea    0x60(%rbx),%rax
    0.00 :   4604ff:       mov    %rax,0xd0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   460507:       movq   $0x0,0xd8(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   460513:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   460518:       mov    $0x28,%edx
    0.00 :   46051d:       lea    0x414f44(%rip),%rsi        # 875468 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x88>
    0.00 :   460524:       mov    %rbx,%rdi
    0.00 :   460527:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_insert(__n); }
    0.00 :   46052c:       mov    0x0(%rbp),%rsi
    0.00 :   460530:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460533:       lea    0x60(%rsp),%rbp
    0.00 :   460538:       callq  53310 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   46053d:       lea    0x10(%rbp),%rax
    0.00 :   460541:       movb   $0x0,0x70(%rsp)
    0.00 :   460546:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   46054b:       mov    0xb0(%rsp),%rax
         :            { _M_string_length = __length; }
    0.00 :   460553:       movq   $0x0,0x68(%rsp)
    0.00 :   46055c:       test   %rax,%rax
    0.00 :   46055f:       je     46083c <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x6cc>
         :            if (this->pptr() > this->egptr())
    0.00 :   460565:       mov    0xa0(%rsp),%r8
    0.00 :   46056d:       mov    0xa8(%rsp),%rcx
    0.00 :   460575:       cmp    %r8,%rax
    0.00 :   460578:       jbe    460828 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x6b8>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   46057e:       sub    %rcx,%rax
    0.00 :   460581:       xor    %edx,%edx
    0.00 :   460583:       xor    %esi,%esi
    0.00 :   460585:       mov    %rbp,%rdi
    0.00 :   460588:       mov    %rax,%r8
    0.00 :   46058b:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   460590:       lea    0x18(%r13),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460594:       mov    0xd0(%rsp),%rdi
    0.00 :   46059c:       mov    %rax,0x80(%rsp)
    0.00 :   4605a4:       lea    0x40(%r13),%rax
    0.00 :   4605a8:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   4605b0:       mov    0x7c7a21(%rip),%rax        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   4605b7:       add    $0x10,%rax
    0.00 :   4605bb:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   4605c3:       lea    0x60(%rbx),%rax
    0.00 :   4605c7:       cmp    %rax,%rdi
    0.00 :   4605ca:       je     4605d1 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x461>
    0.00 :   4605cc:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   4605d1:       mov    0x7c7688(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   4605d8:       lea    0x40(%rbx),%rdi
    0.00 :   4605dc:       add    $0x10,%rax
    0.00 :   4605e0:       mov    %rax,0x88(%rsp)
    0.00 :   4605e8:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   4605ed:       mov    -0x18(%r12),%rax
         :            ~basic_ios() { }
    0.00 :   4605f2:       lea    0x70(%rbx),%rdi
    0.00 :   4605f6:       mov    %r12,0x80(%rsp)
    0.00 :   4605fe:       mov    %r14,0x80(%rsp,%rax,1)
    0.00 :   460606:       lea    0x10(%r15),%rax
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46060a:       lea    0x40(%rsp),%r14
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46060f:       mov    %rax,0xf0(%rsp)
    0.00 :   460617:       callq  52b40 <std::ios_base::~ios_base()@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46061c:       mov    %r14,%rdi
    0.00 :   46061f:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460624:       lea    0x414eb5(%rip),%rdx        # 8754e0 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x100>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   46062b:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   46062f:       mov    %rbx,%rdi
    0.00 :   460632:       lea    -0x48(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460636:       mov    %rax,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   46063e:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   460643:       lea    0x415158(%rip),%rdx        # 8757a2 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)::__PRETTY_FUNCTION__+0x62>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   46064a:       lea    0x38(%rbx),%rax
    0.00 :   46064e:       movl   $0x14,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460659:       lea    0x28(%rbx),%rdi
    0.00 :   46065d:       lea    -0x62(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460661:       mov    %rax,0xa8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460669:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   46066e:       mov    0x48(%rsp),%rax
    0.00 :   460673:       mov    0x40(%rsp),%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   460678:       movq   $0x0,0xc8(%rsp)
    0.00 :   460684:       movq   $0x0,0xd0(%rsp)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   460690:       mov    %rax,(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   460694:       sub    %r12,%rax
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   460697:       mov    %rax,%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   46069a:       mov    %rax,%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   46069d:       movq   $0x0,0xd8(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   4606a9:       sar    $0x5,%rdx
    0.00 :   4606ad:       je     46084d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x6dd>
         :            if (__n > this->max_size())
    0.00 :   4606b3:       movabs $0x7ffffffffffffff,%rax
    0.00 :   4606bd:       cmp    %rax,%rdx
    0.00 :   4606c0:       ja     460d68 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xbf8>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   4606c6:       mov    %r13,%rdi
    0.00 :   4606c9:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   4606ce:       mov    %rax,%r15
    0.00 :   4606d1:       mov    0x48(%rsp),%rax
    0.00 :   4606d6:       mov    0x40(%rsp),%r12
    0.00 :   4606db:       mov    %rax,(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4606df:       add    %r15,%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   4606e2:       mov    %r15,0xc8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   4606ea:       mov    %r13,0xd8(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   4606f2:       mov    %r15,%r13
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   4606f5:       mov    %r15,0xd0(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   4606fd:       cmp    %r12,(%rsp)
    0.00 :   460701:       je     46072d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x5bd>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   460703:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460707:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   46070a:       mov    %rax,0x0(%r13)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   46070e:       mov    (%r12),%rsi
    0.00 :   460712:       mov    0x8(%r12),%rdx
    0.00 :   460717:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   46071a:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   46071f:       add    $0x20,%r13
    0.00 :   460723:       add    $0x20,%r12
    0.00 :   460727:       cmp    %r12,(%rsp)
    0.00 :   46072b:       jne    460703 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x593>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46072d:       mov    0x8(%rsp),%rdi
    0.00 :   460732:       mov    %rbp,%rcx
    0.00 :   460735:       lea    0x414efa(%rip),%rdx        # 875636 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x256>
    0.00 :   46073c:       mov    %rbx,%rsi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            this->_M_impl._M_finish =
    0.00 :   46073f:       mov    %r13,0xd0(%rsp)
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460747:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   46074c:       mov    0xd0(%rsp),%r13
    0.00 :   460754:       mov    0xc8(%rsp),%r12
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   46075c:       cmp    %r12,%r13
    0.00 :   46075f:       je     460785 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x615>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460761:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   460765:       lea    0x10(%r12),%rax
    0.00 :   46076a:       cmp    %rax,%rdi
    0.00 :   46076d:       je     460774 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x604>
         :            ::operator delete(__p);
    0.00 :   46076f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   460774:       add    $0x20,%r12
    0.00 :   460778:       cmp    %r12,%r13
    0.00 :   46077b:       jne    460761 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x5f1>
    0.00 :   46077d:       mov    0xc8(%rsp),%r12
         :            if (__p)
    0.00 :   460785:       test   %r12,%r12
    0.00 :   460788:       je     460792 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x622>
    0.00 :   46078a:       mov    %r12,%rdi
    0.00 :   46078d:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460792:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   46079a:       lea    0x38(%rbx),%rax
    0.00 :   46079e:       cmp    %rax,%rdi
    0.00 :   4607a1:       je     4607a8 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x638>
    0.00 :   4607a3:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4607a8:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4607b0:       add    $0x10,%rbx
    0.00 :   4607b4:       cmp    %rbx,%rdi
    0.00 :   4607b7:       je     4607be <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x64e>
    0.00 :   4607b9:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4607be:       mov    0x48(%rsp),%r12
    0.00 :   4607c3:       mov    0x40(%rsp),%rbx
    0.00 :   4607c8:       cmp    %rbx,%r12
    0.00 :   4607cb:       je     4607ec <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x67c>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4607cd:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   4607d0:       lea    0x10(%rbx),%rax
    0.00 :   4607d4:       cmp    %rax,%rdi
    0.00 :   4607d7:       je     4607de <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x66e>
    0.00 :   4607d9:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4607de:       add    $0x20,%rbx
    0.00 :   4607e2:       cmp    %rbx,%r12
    0.00 :   4607e5:       jne    4607cd <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x65d>
    0.00 :   4607e7:       mov    0x40(%rsp),%rbx
         :            if (__p)
    0.00 :   4607ec:       test   %rbx,%rbx
    0.00 :   4607ef:       je     4607f9 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x689>
    0.00 :   4607f1:       mov    %rbx,%rdi
    0.00 :   4607f4:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4607f9:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   4607fe:       add    $0x10,%rbp
    0.00 :   460802:       cmp    %rbp,%rdi
    0.00 :   460805:       je     46080c <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x69c>
    0.00 :   460807:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46080c:       lea    -0x3670f3(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   460813:       lea    0x7b0e16(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   46081a:       mov    0x8(%rsp),%rdi
    0.00 :   46081f:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   460824:       nopl   0x0(%rax)
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   460828:       sub    %rcx,%r8
    0.00 :   46082b:       xor    %edx,%edx
    0.00 :   46082d:       xor    %esi,%esi
    0.00 :   46082f:       mov    %rbp,%rdi
    0.00 :   460832:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   460837:       jmpq   460590 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x420>
         :            this->_M_assign(__str);
    0.00 :   46083c:       lea    0x50(%rbx),%rsi
    0.00 :   460840:       mov    %rbp,%rdi
    0.00 :   460843:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   460848:       jmpq   460590 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x420>
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   46084d:       xor    %r15d,%r15d
    0.00 :   460850:       jmpq   4606df <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x56f>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460855:       mov    $0xa0,%edi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   46085a:       lea    0x60(%rsp),%rbp
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46085f:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460864:       lea    0x414cf2(%rip),%rdx        # 87555d <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x17d>
    0.00 :   46086b:       mov    %rbp,%rdi
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   46086e:       mov    %rax,(%rsp)
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460872:       lea    -0x4d(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460876:       lea    0x10(%rbp),%rax
    0.00 :   46087a:       mov    %rax,0x60(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   46087f:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460884:       lea    0x40(%rsp),%r14
    0.00 :   460889:       mov    %r14,%rdi
    0.00 :   46088c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460891:       lea    0x80(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460899:       lea    0x414c40(%rip),%rdx        # 8754e0 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x100>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4608a0:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4608a4:       lea    -0x48(%rdx),%rsi
    0.00 :   4608a8:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4608ab:       mov    %rax,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4608b3:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   4608b8:       lea    0x414ee3(%rip),%rdx        # 8757a2 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)::__PRETTY_FUNCTION__+0x62>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4608bf:       lea    0x38(%rbx),%rax
    0.00 :   4608c3:       movl   $0x1c,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4608ce:       lea    0x28(%rbx),%rdi
    0.00 :   4608d2:       lea    -0x62(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   4608d6:       mov    %rax,0xa8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   4608de:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   4608e3:       mov    0x48(%rsp),%rax
    0.00 :   4608e8:       mov    0x40(%rsp),%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   4608ed:       movq   $0x0,0xc8(%rsp)
    0.00 :   4608f9:       movq   $0x0,0xd0(%rsp)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   460905:       mov    %rax,0x8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   46090a:       sub    %r13,%rax
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   46090d:       mov    %rax,%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   460910:       mov    %rax,%r15
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   460913:       movq   $0x0,0xd8(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   46091f:       sar    $0x5,%rdx
    0.00 :   460923:       je     460d60 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xbf0>
         :            if (__n > this->max_size())
    0.00 :   460929:       movabs $0x7ffffffffffffff,%rax
    0.00 :   460933:       cmp    %rax,%rdx
    0.00 :   460936:       ja     460d5a <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xbea>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   46093c:       mov    %r15,%rdi
    0.00 :   46093f:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   460944:       mov    %rax,%r12
    0.00 :   460947:       mov    0x48(%rsp),%rax
    0.00 :   46094c:       mov    0x40(%rsp),%r13
    0.00 :   460951:       mov    %rax,0x8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   460956:       add    %r12,%r15
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   460959:       mov    %r12,0xc8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   460961:       mov    %r15,0xd8(%rsp)
         :            _ForwardIterator __cur = __result;
    0.00 :   460969:       mov    %r12,%r15
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   46096c:       mov    %r12,0xd0(%rsp)
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   460974:       cmp    %r13,0x8(%rsp)
    0.00 :   460979:       je     4609a4 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x834>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   46097b:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   46097f:       mov    %r15,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   460982:       mov    %rax,(%r15)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   460985:       mov    0x0(%r13),%rsi
    0.00 :   460989:       mov    0x8(%r13),%rdx
    0.00 :   46098d:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460990:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   460995:       add    $0x20,%r15
    0.00 :   460999:       add    $0x20,%r13
    0.00 :   46099d:       cmp    %r13,0x8(%rsp)
    0.00 :   4609a2:       jne    46097b <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x80b>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4609a4:       mov    (%rsp),%rdi
    0.00 :   4609a8:       mov    %rbp,%rcx
    0.00 :   4609ab:       lea    0x414bae(%rip),%rdx        # 875560 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x180>
    0.00 :   4609b2:       mov    %rbx,%rsi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            this->_M_impl._M_finish =
    0.00 :   4609b5:       mov    %r15,0xd0(%rsp)
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   4609bd:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   4609c2:       mov    0xd0(%rsp),%r13
    0.00 :   4609ca:       mov    0xc8(%rsp),%r12
    0.00 :   4609d2:       cmp    %r12,%r13
    0.00 :   4609d5:       je     4609f3 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x883>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   4609d7:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   4609db:       lea    0x10(%r12),%rax
    0.00 :   4609e0:       cmp    %rax,%rdi
    0.00 :   4609e3:       je     4609ea <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x87a>
         :            ::operator delete(__p);
    0.00 :   4609e5:       callq  53300 <operator delete(void*)@plt>
    0.00 :   4609ea:       add    $0x20,%r12
    0.00 :   4609ee:       cmp    %r12,%r13
    0.00 :   4609f1:       jne    4609d7 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x867>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   4609f3:       mov    0xc8(%rsp),%rdi
         :            if (__p)
    0.00 :   4609fb:       test   %rdi,%rdi
    0.00 :   4609fe:       je     460a05 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x895>
    0.00 :   460a00:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460a05:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460a0d:       lea    0x38(%rbx),%rax
    0.00 :   460a11:       cmp    %rax,%rdi
    0.00 :   460a14:       je     460a1b <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x8ab>
    0.00 :   460a16:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460a1b:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460a23:       add    $0x10,%rbx
    0.00 :   460a27:       cmp    %rbx,%rdi
    0.00 :   460a2a:       je     460a31 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x8c1>
    0.00 :   460a2c:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   460a31:       mov    0x48(%rsp),%r12
    0.00 :   460a36:       mov    0x40(%rsp),%rbx
    0.00 :   460a3b:       cmp    %rbx,%r12
    0.00 :   460a3e:       je     460a5a <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x8ea>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460a40:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   460a43:       lea    0x10(%rbx),%rax
    0.00 :   460a47:       cmp    %rax,%rdi
    0.00 :   460a4a:       je     460a51 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x8e1>
    0.00 :   460a4c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   460a51:       add    $0x20,%rbx
    0.00 :   460a55:       cmp    %rbx,%r12
    0.00 :   460a58:       jne    460a40 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x8d0>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   460a5a:       mov    0x40(%rsp),%rdi
         :            if (__p)
    0.00 :   460a5f:       test   %rdi,%rdi
    0.00 :   460a62:       je     460a69 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x8f9>
    0.00 :   460a64:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460a69:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460a6e:       add    $0x10,%rbp
    0.00 :   460a72:       cmp    %rbp,%rdi
    0.00 :   460a75:       je     460a7c <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x90c>
    0.00 :   460a77:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460a7c:       lea    -0x367363(%rip),%rdx        # f9720 <onnxruntime::OnnxRuntimeException::~OnnxRuntimeException()>
    0.00 :   460a83:       lea    0x7b0ba6(%rip),%rsi        # c11630 <vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3>
    0.00 :   460a8a:       mov    (%rsp),%rdi
    0.00 :   460a8e:       callq  53bc0 <__cxa_throw@plt>
    0.00 :   460a93:       nopl   0x0(%rax,%rax,1)
    0.00 :   460a98:       mov    $0xa0,%edi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460a9d:       lea    0x60(%rsp),%rbp
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460aa2:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460aa7:       lea    0x414a5a(%rip),%rdx        # 875508 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x128>
    0.00 :   460aae:       mov    %rbp,%rdi
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460ab1:       mov    %rax,(%rsp)
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460ab5:       lea    -0x20(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460ab9:       lea    0x10(%rbp),%rax
    0.00 :   460abd:       mov    %rax,0x60(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460ac2:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460ac7:       lea    0x40(%rsp),%r14
    0.00 :   460acc:       mov    %r14,%rdi
    0.00 :   460acf:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460ad4:       lea    0x80(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460adc:       lea    0x4149fd(%rip),%rdx        # 8754e0 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x100>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460ae3:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460ae7:       lea    -0x48(%rdx),%rsi
    0.00 :   460aeb:       mov    %rbx,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460aee:       mov    %rax,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460af6:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   460afb:       lea    0x414ca0(%rip),%rdx        # 8757a2 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)::__PRETTY_FUNCTION__+0x62>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460b02:       lea    0x38(%rbx),%rax
    0.00 :   460b06:       movl   $0x16,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460b11:       lea    0x28(%rbx),%rdi
    0.00 :   460b15:       lea    -0x62(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   460b19:       mov    %rax,0xa8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460b21:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   460b26:       mov    0x48(%rsp),%rax
    0.00 :   460b2b:       mov    0x40(%rsp),%r13
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   460b30:       movq   $0x0,0xc8(%rsp)
    0.00 :   460b3c:       movq   $0x0,0xd0(%rsp)
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   460b48:       mov    %rax,0x8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   460b4d:       sub    %r13,%rax
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   460b50:       mov    %rax,%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   460b53:       mov    %rax,%r15
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   460b56:       movq   $0x0,0xd8(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   460b62:       sar    $0x5,%rdx
    0.00 :   460b66:       je     460cb0 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xb40>
         :            if (__n > this->max_size())
    0.00 :   460b6c:       movabs $0x7ffffffffffffff,%rax
    0.00 :   460b76:       cmp    %rax,%rdx
    0.00 :   460b79:       ja     460ca6 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xb36>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   460b7f:       mov    %r15,%rdi
    0.00 :   460b82:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   460b87:       mov    %rax,%r12
    0.00 :   460b8a:       mov    0x48(%rsp),%rax
    0.00 :   460b8f:       mov    0x40(%rsp),%r13
    0.00 :   460b94:       mov    %rax,0x8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   460b99:       add    %r12,%r15
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   460b9c:       mov    %r12,0xc8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   460ba4:       mov    %r15,0xd8(%rsp)
         :            _ForwardIterator __cur = __result;
    0.00 :   460bac:       mov    %r12,%r15
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   460baf:       mov    %r12,0xd0(%rsp)
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   460bb7:       cmp    0x8(%rsp),%r13
    0.00 :   460bbc:       je     460be7 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xa77>
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   460bbe:       lea    0x10(%r15),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460bc2:       mov    %r15,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   460bc5:       mov    %rax,(%r15)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   460bc8:       mov    0x0(%r13),%rsi
    0.00 :   460bcc:       mov    0x8(%r13),%rdx
    0.00 :   460bd0:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   460bd3:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   460bd8:       add    $0x20,%r15
    0.00 :   460bdc:       add    $0x20,%r13
    0.00 :   460be0:       cmp    %r13,0x8(%rsp)
    0.00 :   460be5:       jne    460bbe <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xa4e>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460be7:       mov    (%rsp),%rdi
    0.00 :   460beb:       mov    %rbp,%rcx
    0.00 :   460bee:       lea    0x414a5a(%rip),%rdx        # 87564f <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x26f>
    0.00 :   460bf5:       mov    %rbx,%rsi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            this->_M_impl._M_finish =
    0.00 :   460bf8:       mov    %r15,0xd0(%rsp)
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460c00:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   460c05:       mov    0xd0(%rsp),%r13
    0.00 :   460c0d:       mov    0xc8(%rsp),%r12
    0.00 :   460c15:       cmp    %r12,%r13
    0.00 :   460c18:       je     460c36 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xac6>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460c1a:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   460c1e:       lea    0x10(%r12),%rax
    0.00 :   460c23:       cmp    %rax,%rdi
    0.00 :   460c26:       je     460c2d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xabd>
         :            ::operator delete(__p);
    0.00 :   460c28:       callq  53300 <operator delete(void*)@plt>
    0.00 :   460c2d:       add    $0x20,%r12
    0.00 :   460c31:       cmp    %r12,%r13
    0.00 :   460c34:       jne    460c1a <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xaaa>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   460c36:       mov    0xc8(%rsp),%rdi
         :            if (__p)
    0.00 :   460c3e:       test   %rdi,%rdi
    0.00 :   460c41:       je     460c48 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xad8>
    0.00 :   460c43:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460c48:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460c50:       lea    0x38(%rbx),%rax
    0.00 :   460c54:       cmp    %rax,%rdi
    0.00 :   460c57:       je     460c5e <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xaee>
    0.00 :   460c59:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460c5e:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460c66:       add    $0x10,%rbx
    0.00 :   460c6a:       cmp    %rbx,%rdi
    0.00 :   460c6d:       je     460c74 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xb04>
    0.00 :   460c6f:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   460c74:       mov    0x48(%rsp),%r12
    0.00 :   460c79:       mov    0x40(%rsp),%rbx
    0.00 :   460c7e:       cmp    %rbx,%r12
    0.00 :   460c81:       je     460a5a <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x8ea>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460c87:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   460c8a:       lea    0x10(%rbx),%rax
    0.00 :   460c8e:       cmp    %rax,%rdi
    0.00 :   460c91:       je     460c98 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xb28>
    0.00 :   460c93:       callq  53300 <operator delete(void*)@plt>
    0.00 :   460c98:       add    $0x20,%rbx
    0.00 :   460c9c:       cmp    %rbx,%r12
    0.00 :   460c9f:       jne    460c87 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xb17>
    0.00 :   460ca1:       jmpq   460a5a <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x8ea>
         :            std::__throw_bad_alloc();
    0.00 :   460ca6:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   460cab:       nopl   0x0(%rax,%rax,1)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   460cb0:       xor    %r12d,%r12d
    0.00 :   460cb3:       jmpq   460b99 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xa29>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460cb8:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   460cbd:       mov    $0xa0,%edi
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460cc2:       lea    0x40(%rsp),%r14
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460cc7:       callq  52cf0 <__cxa_allocate_exception@plt>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460ccc:       mov    %r12,%rsi
    0.00 :   460ccf:       mov    %r14,%rdi
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460cd2:       mov    %rax,%r13
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460cd5:       callq  22d160 <std::vector<long, std::allocator<long> >::vector(std::vector<long, std::allocator<long> > const&)>
    0.00 :   460cda:       lea    0x20(%rsp),%r12
    0.00 :   460cdf:       lea    0x60(%rsp),%rbp
    0.00 :   460ce4:       mov    %r14,%r8
    0.00 :   460ce7:       mov    %rbx,%rdx
    0.00 :   460cea:       lea    0x414970(%rip),%rax        # 875661 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x281>
    0.00 :   460cf1:       mov    %rbp,%rdi
    0.00 :   460cf4:       lea    0x18(%rsp),%rsi
    0.00 :   460cf9:       mov    %r12,%rcx
    0.00 :   460cfc:       mov    %rax,0x20(%rsp)
    0.00 :   460d01:       lea    0x414878(%rip),%rax        # 875580 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x1a0>
    0.00 :   460d08:       mov    %rax,0x18(%rsp)
    0.00 :   460d0d:       callq  45fc00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, onnxruntime::TensorShape, char const*, onnxruntime::TensorShape>(char const* const&, onnxruntime::TensorShape const&, char const* const&, onnxruntime::TensorShape const&)>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460d12:       mov    %r12,%rdi
    0.00 :   460d15:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   460d1a:       lea    0x80(%rsp),%rbx
    0.00 :   460d22:       mov    %r12,%r8
    0.00 :   460d25:       lea    0x414a14(%rip),%rcx        # 875740 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)::__PRETTY_FUNCTION__>
    0.00 :   460d2c:       mov    $0x26,%edx
    0.00 :   460d31:       lea    0x414760(%rip),%rsi        # 875498 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0xb8>
    0.00 :   460d38:       mov    %rbx,%rdi
    0.00 :   460d3b:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   460d40:       mov    %rbp,%rcx
    0.00 :   460d43:       lea    0x414886(%rip),%rdx        # 8755d0 <typeinfo name for onnxruntime::QuantizeLinear<unsigned char>+0x1f0>
    0.00 :   460d4a:       mov    %rbx,%rsi
    0.00 :   460d4d:       mov    %r13,%rdi
    0.00 :   460d50:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   460d55:       jmpq   46035a <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x1ea>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460d5a:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   460d5f:       nop
    0.00 :   460d60:       xor    %r12d,%r12d
    0.00 :   460d63:       jmpq   460956 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0x7e6>
    0.00 :   460d68:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   460d6d:       mov    %rax,%r12
    0.00 :   460d70:       jmp    460d8d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc1d>
    0.00 :   460d72:       jmp    460dc2 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc52>
    0.00 :   460d74:       jmp    460dda <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc6a>
         :            std::_Construct(std::__addressof(*__cur), *__first);
         :            return __cur;
         :            }
         :            __catch(...)
    0.00 :   460d76:       callq  53ad0 <__cxa_end_catch@plt>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   460d7b:       mov    0xc8(%rsp),%rdi
         :            if (__p)
    0.00 :   460d83:       test   %rdi,%rdi
    0.00 :   460d86:       je     460d8d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc1d>
         :            ::operator delete(__p);
    0.00 :   460d88:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460d8d:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460d95:       lea    0x38(%rbx),%rax
    0.00 :   460d99:       cmp    %rax,%rdi
    0.00 :   460d9c:       je     460da3 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc33>
    0.00 :   460d9e:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460da3:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460dab:       add    $0x10,%rbx
    0.00 :   460daf:       cmp    %rbx,%rdi
    0.00 :   460db2:       je     460fe6 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xe76>
    0.00 :   460db8:       callq  53300 <operator delete(void*)@plt>
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   460dbd:       jmpq   460fe6 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xe76>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460dc2:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460dc7:       add    $0x10,%rbp
    0.00 :   460dcb:       cmp    %rbp,%rdi
    0.00 :   460dce:       je     460dd5 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc65>
         :            ::operator delete(__p);
    0.00 :   460dd0:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460dd5:       callq  52a50 <std::terminate()@plt>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460dda:       mov    %rax,%rdi
    0.00 :   460ddd:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   460de2:       cmp    %r15,%r13
    0.00 :   460de5:       jne    461020 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xeb0>
         :            {
         :            std::_Destroy(__result, __cur);
         :            __throw_exception_again;
    0.00 :   460deb:       callq  53870 <__cxa_rethrow@plt>
    0.00 :   460df0:       mov    %rax,%r12
    0.00 :   460df3:       jmp    460e27 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xcb7>
    0.00 :   460df5:       mov    %rax,%r12
    0.00 :   460df8:       jmp    460e3d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xccd>
         :            __catch(...)
    0.00 :   460dfa:       callq  53ad0 <__cxa_end_catch@plt>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   460dff:       mov    0xc8(%rsp),%rdi
         :            if (__p)
    0.00 :   460e07:       test   %rdi,%rdi
    0.00 :   460e0a:       je     460e11 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xca1>
    0.00 :   460e0c:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460e11:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460e19:       lea    0x38(%rbx),%rax
    0.00 :   460e1d:       cmp    %rax,%rdi
    0.00 :   460e20:       je     460e27 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xcb7>
    0.00 :   460e22:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460e27:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460e2f:       add    $0x10,%rbx
    0.00 :   460e33:       cmp    %rbx,%rdi
    0.00 :   460e36:       je     460e3d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xccd>
    0.00 :   460e38:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460e3d:       mov    %r14,%rdi
    0.00 :   460e40:       mov    %r12,%rbx
    0.00 :   460e43:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460e48:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460e4d:       add    $0x10,%rbp
    0.00 :   460e51:       cmp    %rbp,%rdi
    0.00 :   460e54:       je     460e5b <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xceb>
    0.00 :   460e56:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460e5b:       mov    (%rsp),%rdi
    0.00 :   460e5f:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   460e64:       mov    %rbx,%rdi
    0.00 :   460e67:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   460e6c:       mov    %rax,%rbx
    0.00 :   460e6f:       jmp    460e48 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xcd8>
    0.00 :   460e71:       mov    %rax,%rbx
    0.00 :   460e74:       jmp    460e5b <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xceb>
    0.00 :   460e76:       mov    %rax,%r12
    0.00 :   460e79:       jmp    460e80 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd10>
    0.00 :   460e7b:       mov    %rax,%r12
    0.00 :   460e7e:       jmp    460e11 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xca1>
    0.00 :   460e80:       mov    %rbx,%rdi
    0.00 :   460e83:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   460e88:       jmp    460e3d <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xccd>
    0.00 :   460e8a:       jmp    460e8e <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd1e>
    0.00 :   460e8c:       jmp    460eac <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd3c>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   460e8e:       lea    0x8(%rbx),%rdi
    0.00 :   460e92:       callq  14ffe0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    0.00 :   460e97:       mov    -0x18(%r12),%rax
    0.00 :   460e9c:       mov    %r12,0x80(%rsp)
    0.00 :   460ea4:       mov    %r14,0x80(%rsp,%rax,1)
    0.00 :   460eac:       lea    0x10(%r15),%rax
    0.00 :   460eb0:       lea    0x70(%rbx),%rdi
    0.00 :   460eb4:       mov    %rax,0xf0(%rsp)
    0.00 :   460ebc:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   460ec1:       jmpq   460dd5 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc65>
    0.00 :   460ec6:       mov    %rax,%r14
    0.00 :   460ec9:       jmp    460edd <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd6d>
    0.00 :   460ecb:       mov    %rax,%rdi
    0.00 :   460ece:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   460ed3:       cmp    %r12,%r15
    0.00 :   460ed6:       jne    460f22 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xdb2>
         :            __throw_exception_again;
    0.00 :   460ed8:       callq  53870 <__cxa_rethrow@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460edd:       mov    %rbx,%rdi
    0.00 :   460ee0:       mov    %r14,%rbx
    0.00 :   460ee3:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   460ee8:       mov    %r12,%rdi
    0.00 :   460eeb:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460ef0:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460ef5:       add    $0x10,%rbp
    0.00 :   460ef9:       cmp    %rbp,%rdi
    0.00 :   460efc:       je     460f03 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd93>
    0.00 :   460efe:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   460f03:       mov    0x40(%rsp),%rdi
         :            if (__p)
    0.00 :   460f08:       test   %rdi,%rdi
    0.00 :   460f0b:       je     460f12 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xda2>
    0.00 :   460f0d:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460f12:       mov    %r13,%rdi
    0.00 :   460f15:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   460f1a:       mov    %rbx,%rdi
    0.00 :   460f1d:       callq  53c30 <_Unwind_Resume@plt>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460f22:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   460f26:       lea    0x10(%r12),%rax
    0.00 :   460f2b:       cmp    %rax,%rdi
    0.00 :   460f2e:       je     460f35 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xdc5>
    0.00 :   460f30:       callq  53300 <operator delete(void*)@plt>
    0.00 :   460f35:       add    $0x20,%r12
    0.00 :   460f39:       jmp    460ed3 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd63>
    0.00 :   460f3b:       mov    %rax,%rbx
    0.00 :   460f3e:       jmp    460ee8 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd78>
    0.00 :   460f40:       mov    %rax,%rbx
    0.00 :   460f43:       jmp    460ef0 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd80>
    0.00 :   460f45:       mov    %rax,%rbx
    0.00 :   460f48:       jmp    460f12 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xda2>
    0.00 :   460f4a:       jmpq   460e76 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd06>
    0.00 :   460f4f:       jmp    460f56 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xde6>
    0.00 :   460f51:       mov    %rax,%r12
    0.00 :   460f54:       jmp    460f68 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xdf8>
         :            __catch(...)
    0.00 :   460f56:       mov    %rax,%rdi
    0.00 :   460f59:       callq  52c20 <__cxa_begin_catch@plt>
    0.00 :   460f5e:       cmp    %r12,%r15
    0.00 :   460f61:       jne    460f83 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xe13>
         :            __throw_exception_again;
    0.00 :   460f63:       callq  53870 <__cxa_rethrow@plt>
         :            __catch(...)
    0.00 :   460f68:       callq  53ad0 <__cxa_end_catch@plt>
         :            _M_impl._M_end_of_storage - _M_impl._M_start);
    0.00 :   460f6d:       mov    0xc8(%rsp),%rdi
         :            if (__p)
    0.00 :   460f75:       test   %rdi,%rdi
    0.00 :   460f78:       jne    460e0c <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc9c>
    0.00 :   460f7e:       jmpq   460e11 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xca1>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460f83:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   460f87:       lea    0x10(%r12),%rax
    0.00 :   460f8c:       cmp    %rax,%rdi
    0.00 :   460f8f:       je     460f96 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xe26>
    0.00 :   460f91:       callq  53300 <operator delete(void*)@plt>
    0.00 :   460f96:       add    $0x20,%r12
    0.00 :   460f9a:       jmp    460f5e <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xdee>
    0.00 :   460f9c:       mov    %rax,%r12
    0.00 :   460f9f:       jmpq   460dfa <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc8a>
    0.00 :   460fa4:       jmpq   460e7b <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd0b>
    0.00 :   460fa9:       jmpq   460df0 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc80>
    0.00 :   460fae:       jmpq   460df5 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc85>
    0.00 :   460fb3:       jmpq   460e6c <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xcfc>
    0.00 :   460fb8:       jmpq   460e71 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd01>
    0.00 :   460fbd:       jmpq   460ec6 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xd56>
    0.00 :   460fc2:       jmpq   460f3b <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xdcb>
    0.00 :   460fc7:       jmpq   460f40 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xdd0>
    0.00 :   460fcc:       jmpq   460f45 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xdd5>
    0.00 :   460fd1:       mov    %rax,%r12
    0.00 :   460fd4:       jmp    460fde <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xe6e>
    0.00 :   460fd6:       mov    %rax,%r12
    0.00 :   460fd9:       jmpq   460da3 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc33>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   460fde:       mov    %rbx,%rdi
    0.00 :   460fe1:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   460fe6:       mov    %r14,%rdi
    0.00 :   460fe9:       mov    %r12,%rbx
    0.00 :   460fec:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   460ff1:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   460ff6:       add    $0x10,%rbp
    0.00 :   460ffa:       cmp    %rbp,%rdi
    0.00 :   460ffd:       je     461004 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xe94>
    0.00 :   460fff:       callq  53300 <operator delete(void*)@plt>
         :            _ZN11onnxruntime13ReshapeHelperC2ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
    0.00 :   461004:       mov    0x8(%rsp),%rdi
    0.00 :   461009:       callq  52fe0 <__cxa_free_exception@plt>
    0.00 :   46100e:       mov    %rbx,%rdi
    0.00 :   461011:       callq  53c30 <_Unwind_Resume@plt>
    0.00 :   461016:       mov    %rax,%r12
    0.00 :   461019:       jmp    460fe6 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xe76>
    0.00 :   46101b:       mov    %rax,%rbx
    0.00 :   46101e:       jmp    460ff1 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xe81>
         :            _ZN11onnxruntime13ReshapeHelperC1ERKNS_11TensorShapeERSt6vectorIlSaIlEE():
         :            { return _M_data() == _M_local_data(); }
    0.00 :   461020:       mov    (%r15),%rdi
         :            if (!_M_is_local())
    0.00 :   461023:       lea    0x10(%r15),%rax
    0.00 :   461027:       cmp    %rax,%rdi
    0.00 :   46102a:       je     461031 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xec1>
    0.00 :   46102c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   461031:       add    $0x20,%r15
    0.00 :   461035:       jmpq   460de2 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc72>
    0.00 :   46103a:       mov    %rax,%r12
    0.00 :   46103d:       jmpq   460d76 <onnxruntime::ReshapeHelper::ReshapeHelper(onnxruntime::TensorShape const&, std::vector<long, std::allocator<long> >&)+0xc06>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000069a7c0 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)>:
         :            _ZN11onnxruntime11concurrency10ThreadPool19DegreeOfParallelismEPKS1_():
  100.00 :   69a7c0:       mov    $0x1,%eax
    0.00 :   69a7c5:       test   %rdi,%rdi
    0.00 :   69a7c8:       je     69a840 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)+0x80>
    0.00 :   69a7ca:       push   %r12
    0.00 :   69a7cc:       push   %rbp
    0.00 :   69a7cd:       lea    0x58f2c4(%rip),%rbp        # c29a98 <guard variable for onnxruntime::CPUIDInfo::GetCPUIDInfo()::cpuid_info>
    0.00 :   69a7d4:       push   %rbx
    0.00 :   69a7d5:       mov    %rdi,%rbx
    0.00 :   69a7d8:       movzbl 0x0(%rbp),%eax
    0.00 :   69a7dc:       test   %al,%al
    0.00 :   69a7de:       je     69a808 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)+0x48>
    0.00 :   69a7e0:       lea    0x58f2b9(%rip),%r12        # c29aa0 <onnxruntime::CPUIDInfo::GetCPUIDInfo()::cpuid_info>
    0.00 :   69a7e7:       cmpb   $0x0,0x6(%r12)
    0.00 :   69a7ed:       mov    %rbx,%rdi
    0.00 :   69a7f0:       je     69a830 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)+0x70>
    0.00 :   69a7f2:       callq  69a790 <onnxruntime::concurrency::ThreadPool::NumThreads() const>
    0.00 :   69a7f7:       pop    %rbx
    0.00 :   69a7f8:       pop    %rbp
    0.00 :   69a7f9:       lea    0x4(,%rax,4),%eax
    0.00 :   69a800:       pop    %r12
    0.00 :   69a802:       retq
    0.00 :   69a803:       nopl   0x0(%rax,%rax,1)
    0.00 :   69a808:       mov    %rbp,%rdi
    0.00 :   69a80b:       callq  53cc0 <__cxa_guard_acquire@plt>
    0.00 :   69a810:       lea    0x58f289(%rip),%r12        # c29aa0 <onnxruntime::CPUIDInfo::GetCPUIDInfo()::cpuid_info>
    0.00 :   69a817:       test   %eax,%eax
    0.00 :   69a819:       je     69a7e7 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)+0x27>
    0.00 :   69a81b:       mov    %r12,%rdi
    0.00 :   69a81e:       callq  690690 <onnxruntime::CPUIDInfo::CPUIDInfo()>
    0.00 :   69a823:       mov    %rbp,%rdi
    0.00 :   69a826:       callq  52ed0 <__cxa_guard_release@plt>
    0.00 :   69a82b:       jmp    69a7e7 <onnxruntime::concurrency::ThreadPool::DegreeOfParallelism(onnxruntime::concurrency::ThreadPool const*)+0x27>
    0.00 :   69a82d:       nopl   (%rax)
    0.00 :   69a830:       callq  69a790 <onnxruntime::concurrency::ThreadPool::NumThreads() const>
    0.00 :   69a835:       pop    %rbx
    0.00 :   69a836:       pop    %rbp
    0.00 :   69a837:       add    $0x1,%eax
    0.00 :   69a83a:       pop    %r12
    0.00 :   69a83c:       retq
    0.00 :   69a83d:       nopl   (%rax)
    0.00 :   69a840:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c73e0 <onnxruntime::OpKernelContext::GetInputArgIndex(int) const>:
         :            _ZNK11onnxruntime15OpKernelContext16GetInputArgIndexEi():
  100.00 :   5c73e0:       mov    0x28(%rdi),%eax
    0.00 :   5c73e3:       add    %esi,%eax
    0.00 :   5c73e5:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000188ff0 <std::vector<long, std::allocator<long> >::reserve(unsigned long)>:
         :            _ZNSt6vectorIlSaIlEE7reserveEm():
         :            template<typename _Tp, typename _Alloc>
         :            void
         :            vector<_Tp, _Alloc>::
         :            reserve(size_type __n)
         :            {
         :            if (__n > this->max_size())
    0.00 :   188ff0:       movabs $0x1fffffffffffffff,%rax
         :            vector<_Tp, _Alloc>::
    0.00 :   188ffa:       push   %r15
    0.00 :   188ffc:       push   %r14
    0.00 :   188ffe:       push   %r13
    0.00 :   189000:       push   %r12
  100.00 :   189002:       push   %rbp
    0.00 :   189003:       push   %rbx
    0.00 :   189004:       sub    $0x18,%rsp
         :            if (__n > this->max_size())
    0.00 :   189008:       cmp    %rax,%rsi
    0.00 :   18900b:       ja     1890b8 <std::vector<long, std::allocator<long> >::reserve(unsigned long)+0xc8>
         :            __throw_length_error(__N("vector::reserve"));
         :            if (this->capacity() < __n)
    0.00 :   189011:       mov    (%rdi),%rbp
         :            *  hold before needing to allocate more memory.
         :            */
         :            size_type
         :            capacity() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_end_of_storage
         :            - this->_M_impl._M_start); }
    0.00 :   189014:       mov    0x10(%rdi),%rax
    0.00 :   189018:       mov    %rdi,%rbx
    0.00 :   18901b:       sub    %rbp,%rax
    0.00 :   18901e:       sar    $0x3,%rax
    0.00 :   189022:       cmp    %rsi,%rax
    0.00 :   189025:       jb     189040 <std::vector<long, std::allocator<long> >::reserve(unsigned long)+0x50>
         :            - this->_M_impl._M_start);
         :            this->_M_impl._M_start = __tmp;
         :            this->_M_impl._M_finish = __tmp + __old_size;
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
         :            }
         :            }
    0.00 :   189027:       add    $0x18,%rsp
    0.00 :   18902b:       pop    %rbx
    0.00 :   18902c:       pop    %rbp
    0.00 :   18902d:       pop    %r12
    0.00 :   18902f:       pop    %r13
    0.00 :   189031:       pop    %r14
    0.00 :   189033:       pop    %r15
    0.00 :   189035:       retq
    0.00 :   189036:       nopw   %cs:0x0(%rax,%rax,1)
         :            const size_type __old_size = size();
    0.00 :   189040:       mov    0x8(%rdi),%r15
         :            size() const _GLIBCXX_NOEXCEPT
    0.00 :   189044:       lea    0x0(,%rsi,8),%r14
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   18904c:       mov    %r15,%r13
    0.00 :   18904f:       sub    %rbp,%r13
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   189052:       test   %rsi,%rsi
    0.00 :   189055:       je     1890b0 <std::vector<long, std::allocator<long> >::reserve(unsigned long)+0xc0>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   189057:       mov    %r14,%rdi
    0.00 :   18905a:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   18905f:       mov    (%rbx),%rcx
    0.00 :   189062:       mov    %rax,%r12
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   189065:       cmp    %rbp,%r15
    0.00 :   189068:       je     189082 <std::vector<long, std::allocator<long> >::reserve(unsigned long)+0x92>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   18906a:       mov    %r13,%rdx
    0.00 :   18906d:       mov    %rbp,%rsi
    0.00 :   189070:       mov    %r12,%rdi
    0.00 :   189073:       mov    %rcx,0x8(%rsp)
    0.00 :   189078:       callq  53aa0 <memmove@plt>
    0.00 :   18907d:       mov    0x8(%rsp),%rcx
         :            if (__p)
    0.00 :   189082:       test   %rcx,%rcx
    0.00 :   189085:       je     18908f <std::vector<long, std::allocator<long> >::reserve(unsigned long)+0x9f>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   189087:       mov    %rcx,%rdi
    0.00 :   18908a:       callq  53300 <operator delete(void*)@plt>
         :            this->_M_impl._M_start = __tmp;
    0.00 :   18908f:       mov    %r12,(%rbx)
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   189092:       add    %r12,%r13
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   189095:       add    %r14,%r12
         :            this->_M_impl._M_finish = __tmp + __old_size;
    0.00 :   189098:       mov    %r13,0x8(%rbx)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   18909c:       mov    %r12,0x10(%rbx)
         :            }
    0.00 :   1890a0:       add    $0x18,%rsp
    0.00 :   1890a4:       pop    %rbx
    0.00 :   1890a5:       pop    %rbp
    0.00 :   1890a6:       pop    %r12
    0.00 :   1890a8:       pop    %r13
    0.00 :   1890aa:       pop    %r14
    0.00 :   1890ac:       pop    %r15
    0.00 :   1890ae:       retq
    0.00 :   1890af:       nop
         :            if (this->capacity() < __n)
    0.00 :   1890b0:       mov    %rbp,%rcx
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   1890b3:       xor    %r12d,%r12d
    0.00 :   1890b6:       jmp    189065 <std::vector<long, std::allocator<long> >::reserve(unsigned long)+0x75>
         :            __throw_length_error(__N("vector::reserve"));
    0.00 :   1890b8:       lea    0x69df89(%rip),%rdi        # 827048 <std::piecewise_construct+0x2a8>
    0.00 :   1890bf:       callq  52d80 <std::__throw_length_error(char const*)@plt>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.26 for cache-misses (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000aaf0b <operator delete(void*)>:
         :           _ZdlPv():
  100.00 :   aaf0b:       jmpq   a4990 <free@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005c7570 <onnxruntime::OpKernelContext::GetInputMLValue(int) const>:
         :            _ZNK11onnxruntime15OpKernelContext15GetInputMLValueEi():
    0.00 :   5c7570:       test   %esi,%esi
    0.00 :   5c7572:       js     5c75d0 <onnxruntime::OpKernelContext::GetInputMLValue(int) const+0x60>
    0.00 :   5c7574:       push   %rbp
    0.00 :   5c7575:       mov    %rdi,%rbp
    0.00 :   5c7578:       push   %rbx
    0.00 :   5c7579:       mov    %esi,%ebx
    0.00 :   5c757b:       sub    $0x8,%rsp
  100.00 :   5c757f:       mov    0x10(%rdi),%rdi
    0.00 :   5c7583:       callq  5c7200 <onnxruntime::OpKernel::Node() const>
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5c7588:       mov    0xb0(%rax),%rdx
    0.00 :   5c758f:       sub    0xa8(%rax),%rdx
    0.00 :   5c7596:       sar    $0x3,%rdx
    0.00 :   5c759a:       cmp    %edx,%ebx
    0.00 :   5c759c:       jge    5c75c0 <onnxruntime::OpKernelContext::GetInputMLValue(int) const+0x50>
    0.00 :   5c759e:       mov    %ebx,%esi
    0.00 :   5c75a0:       mov    %rbp,%rdi
    0.00 :   5c75a3:       callq  5c73e0 <onnxruntime::OpKernelContext::GetInputArgIndex(int) const>
    0.00 :   5c75a8:       mov    0x8(%rbp),%rdi
    0.00 :   5c75ac:       add    $0x8,%rsp
    0.00 :   5c75b0:       pop    %rbx
    0.00 :   5c75b1:       mov    %eax,%esi
    0.00 :   5c75b3:       pop    %rbp
    0.00 :   5c75b4:       jmpq   5a9420 <onnxruntime::IExecutionFrame::GetNodeInputOrOutputMLValue(int) const>
    0.00 :   5c75b9:       nopl   0x0(%rax)
    0.00 :   5c75c0:       add    $0x8,%rsp
    0.00 :   5c75c4:       xor    %eax,%eax
    0.00 :   5c75c6:       pop    %rbx
    0.00 :   5c75c7:       pop    %rbp
    0.00 :   5c75c8:       retq
    0.00 :   5c75c9:       nopl   0x0(%rax)
    0.00 :   5c75d0:       xor    %eax,%eax
    0.00 :   5c75d2:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .plt:
         :
         :           0000000000053340 <operator new(unsigned long)@plt>:
  100.00 :   53340:       jmpq   *0xbd5222(%rip)        # c28568 <operator new(unsigned long)@GLIBCXX_3.4>
    0.00 :   53346:       pushq  $0xaa
    0.00 :   5334b:       jmpq   52890 <.plt>
 Percent |	Source code & Disassembly of ath10k_core.ko for cache-misses (1 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000009850 <ath10k_mac_bitrate_to_idx>:
         :          ath10k_mac_bitrate_to_idx():
    0.00 :   9850:       callq  9855 <ath10k_mac_bitrate_to_idx+0x5>
  100.00 :   9855:       mov    0x18(%rdi),%r8d
    0.00 :   9859:       push   %rbp
    0.00 :   985a:       mov    %rsp,%rbp
    0.00 :   985d:       test   %r8d,%r8d
    0.00 :   9860:       jle    9889 <ath10k_mac_bitrate_to_idx+0x39>
    0.00 :   9862:       mov    0x8(%rdi),%rdx
    0.00 :   9866:       movzwl 0x4(%rdx),%eax
    0.00 :   986a:       cmp    %eax,%esi
    0.00 :   986c:       je     9889 <ath10k_mac_bitrate_to_idx+0x39>
    0.00 :   986e:       add    $0x10,%rdx
    0.00 :   9872:       xor    %eax,%eax
    0.00 :   9874:       jmp    9881 <ath10k_mac_bitrate_to_idx+0x31>
    0.00 :   9876:       movzwl (%rdx),%ecx
    0.00 :   9879:       add    $0xc,%rdx
    0.00 :   987d:       cmp    %esi,%ecx
    0.00 :   987f:       je     988b <ath10k_mac_bitrate_to_idx+0x3b>
    0.00 :   9881:       add    $0x1,%eax
    0.00 :   9884:       cmp    %r8d,%eax
    0.00 :   9887:       jne    9876 <ath10k_mac_bitrate_to_idx+0x26>
    0.00 :   9889:       xor    %eax,%eax
    0.00 :   988b:       pop    %rbp
    0.00 :   988c:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005a8a70 <onnxruntime::IExecutionFrame::ReleaseMLValue(int)>:
         :            _ZN11onnxruntime15IExecutionFrame14ReleaseMLValueEi():
    0.00 :   5a8a70:       push   %rbx
    0.00 :   5a8a71:       mov    %rdi,%rbx
    0.00 :   5a8a74:       sub    $0x10,%rsp
    0.00 :   5a8a78:       mov    %fs:0x28,%rax
    0.00 :   5a8a81:       mov    %rax,0x8(%rsp)
    0.00 :   5a8a86:       xor    %eax,%eax
    0.00 :   5a8a88:       mov    (%rsi),%rax
  100.00 :   5a8a8b:       callq  *0x18(%rax)
    0.00 :   5a8a8e:       mov    0x8(%rsp),%rcx
    0.00 :   5a8a93:       xor    %fs:0x28,%rcx
    0.00 :   5a8a9c:       jne    5a8aa7 <onnxruntime::IExecutionFrame::ReleaseMLValue(int)+0x37>
    0.00 :   5a8a9e:       add    $0x10,%rsp
    0.00 :   5a8aa2:       mov    %rbx,%rax
    0.00 :   5a8aa5:       pop    %rbx
    0.00 :   5a8aa6:       retq
    0.00 :   5a8aa7:       callq  53460 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000002a1e00 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const>:
         :            _ZNK11onnxruntime4GemmIfE7ComputeEPNS_15OpKernelContextE():
    0.00 :   2a1e00:       push   %rbp
    0.00 :   2a1e01:       mov    %rsp,%rbp
    0.00 :   2a1e04:       push   %r15
    0.00 :   2a1e06:       mov    %rdi,%r15
    0.00 :   2a1e09:       mov    %rdx,%rdi
    0.00 :   2a1e0c:       push   %r14
    0.00 :   2a1e0e:       xor    %r14d,%r14d
    0.00 :   2a1e11:       push   %r13
    0.00 :   2a1e13:       push   %r12
    0.00 :   2a1e15:       mov    %rdx,%r12
    0.00 :   2a1e18:       push   %rbx
    0.00 :   2a1e19:       mov    %rsi,%rbx
    0.00 :   2a1e1c:       xor    %esi,%esi
    0.00 :   2a1e1e:       sub    $0x128,%rsp
    0.00 :   2a1e25:       mov    %fs:0x28,%rax
    0.00 :   2a1e2e:       mov    %rax,-0x38(%rbp)
    0.00 :   2a1e32:       xor    %eax,%eax
    0.00 :   2a1e34:       mov    0x18(%rdx),%rax
    0.00 :   2a1e38:       mov    %rax,-0x130(%rbp)
    0.00 :   2a1e3f:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   2a1e44:       cmpq   $0x0,0x48(%rbx)
    0.00 :   2a1e49:       mov    %rax,-0x118(%rbp)
    0.00 :   2a1e50:       je     2a2260 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x460>
    0.00 :   2a1e56:       mov    $0x2,%esi
    0.00 :   2a1e5b:       mov    %r12,%rdi
    0.00 :   2a1e5e:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   2a1e63:       mov    %rax,-0x120(%rbp)
    0.00 :   2a1e6a:       test   %rax,%rax
    0.00 :   2a1e6d:       je     2a2130 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x330>
         :            *  The newly-created %vector uses a copy of the allocator object used
         :            *  by @a __x (unless the allocator traits dictate a different object).
         :            */
         :            vector(const vector& __x)
         :            : _Base(__x.size(),
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   2a1e73:       mov    0x18(%rax),%rsi
    0.00 :   2a1e77:       mov    0x20(%rax),%rax
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a1e7b:       movq   $0x0,-0x100(%rbp)
    0.00 :   2a1e86:       movq   $0x0,-0xf8(%rbp)
    0.00 :   2a1e91:       movq   $0x0,-0xf0(%rbp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   2a1e9c:       mov    %rax,%r13
    0.00 :   2a1e9f:       sub    %rsi,%r13
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2a1ea2:       mov    %r13,%rdx
    0.00 :   2a1ea5:       sar    $0x3,%rdx
    0.00 :   2a1ea9:       je     2a2080 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x280>
         :            // NB: __n is permitted to be 0.  The C++ standard says nothing
         :            // about what the return value is when __n == 0.
         :            pointer
         :            allocate(size_type __n, const void* = static_cast<const void*>(0))
         :            {
         :            if (__n > this->max_size())
    0.00 :   2a1eaf:       movabs $0x1fffffffffffffff,%rax
    0.00 :   2a1eb9:       cmp    %rax,%rdx
    0.00 :   2a1ebc:       ja     2a230f <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x50f>
         :            {
         :            std::align_val_t __al = std::align_val_t(alignof(_Tp));
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         :            }
         :            #endif
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   2a1ec2:       mov    %r13,%rdi
    0.00 :   2a1ec5:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a1eca:       mov    -0x120(%rbp),%rdx
    0.00 :   2a1ed1:       mov    %rax,%rcx
    0.00 :   2a1ed4:       mov    0x20(%rdx),%rax
    0.00 :   2a1ed8:       mov    0x18(%rdx),%rsi
    0.00 :   2a1edc:       mov    %rax,%r8
    0.00 :   2a1edf:       sub    %rsi,%r8
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2a1ee2:       add    %rcx,%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   2a1ee5:       mov    %rcx,-0x100(%rbp)
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   2a1eec:       mov    %rcx,-0xf8(%rbp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   2a1ef3:       mov    %r13,-0xf0(%rbp)
         :            is_copy_assignable<_Tp>>;
         :            // trivial types can have deleted assignment
         :            static_assert( __assignable::type::value, "type is not assignable" );
         :            #endif
         :            const ptrdiff_t _Num = __last - __first;
         :            if (_Num)
    0.00 :   2a1efa:       cmp    %rax,%rsi
    0.00 :   2a1efd:       je     2a1f1b <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x11b>
         :            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :   2a1eff:       mov    %r8,%rdx
    0.00 :   2a1f02:       mov    %rcx,%rdi
    0.00 :   2a1f05:       mov    %r8,-0x128(%rbp)
    0.00 :   2a1f0c:       callq  53aa0 <memmove@plt>
    0.00 :   2a1f11:       mov    -0x128(%rbp),%r8
    0.00 :   2a1f18:       mov    %rax,%rcx
         :            return __result + _Num;
    0.00 :   2a1f1b:       add    %r8,%rcx
    0.00 :   2a1f1e:       mov    %rcx,-0xf8(%rbp)
    0.00 :   2a1f25:       xor    %r8d,%r8d
    0.00 :   2a1f28:       cmpl   $0x6f,0x14(%rbx)
    0.00 :   2a1f2c:       lea    0x18(%r14),%rax
    0.00 :   2a1f30:       setne  %r8b
    0.00 :   2a1f34:       lea    0x20(%rbx),%rcx
    0.00 :   2a1f38:       test   %r14,%r14
    0.00 :   2a1f3b:       cmovne %rax,%rcx
    0.00 :   2a1f3f:       mov    -0x118(%rbp),%rax
    0.00 :   2a1f46:       xor    %edx,%edx
    0.00 :   2a1f48:       cmpl   $0x6f,0x10(%rbx)
    0.00 :   2a1f4c:       lea    -0x100(%rbp),%r9
    0.00 :   2a1f53:       setne  %dl
    0.00 :   2a1f56:       lea    0x18(%rax),%rsi
    0.00 :   2a1f5a:       lea    -0xe0(%rbp),%rdi
    0.00 :   2a1f61:       mov    %r9,-0x128(%rbp)
    0.00 :   2a1f68:       callq  2a0d20 <onnxruntime::GemmHelper::GemmHelper(onnxruntime::TensorShape const&, bool, onnxruntime::TensorShape const&, bool, onnxruntime::TensorShape const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   2a1f6d:       mov    -0x100(%rbp),%rdi
         :            if (__p)
    0.00 :   2a1f74:       test   %rdi,%rdi
    0.00 :   2a1f77:       je     2a1f7e <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x17e>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   2a1f79:       callq  53300 <operator delete(void*)@plt>
         :            template<typename _Del>
         :            __uniq_ptr_impl(pointer __p, _Del&& __d)
         :            : _M_t(__p, std::forward<_Del>(__d)) { }
         :
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   2a1f7e:       mov    -0xc8(%rbp),%r13
    0.00 :   2a1f85:       test   %r13,%r13
    0.00 :   2a1f88:       je     2a2090 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x290>
    0.00 :   2a1f8e:       mov    $0x28,%edi
    0.00 :   2a1f93:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a1f98:       mov    %rax,%rbx
    0.00 :   2a1f9b:       mov    0x0(%r13),%eax
         :
         :            pointer
         :            _M_local_data()
         :            {
         :            #if __cplusplus >= 201103L
         :            return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    0.00 :   2a1f9f:       lea    0x18(%rbx),%r14
    0.00 :   2a1fa3:       lea    0x8(%rbx),%rdi
    0.00 :   2a1fa7:       mov    %eax,(%rbx)
    0.00 :   2a1fa9:       mov    0x4(%r13),%eax
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   2a1fad:       mov    %r14,0x8(%rbx)
    0.00 :   2a1fb1:       mov    %eax,0x4(%rbx)
         :            *  @param  __str  Source string.
         :            */
         :            basic_string(const basic_string& __str)
         :            : _M_dataplus(_M_local_data(),
         :            _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   2a1fb4:       mov    0x8(%r13),%rsi
    0.00 :   2a1fb8:       mov    0x10(%r13),%rdx
    0.00 :   2a1fbc:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a1fbf:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a1fc4:       mov    0x8(%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   2a1fc8:       cmp    %rdi,%r14
    0.00 :   2a1fcb:       je     2a1fd2 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x1d2>
    0.00 :   2a1fcd:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   2a1fd2:       mov    %rbx,%rdi
    0.00 :   2a1fd5:       mov    $0x28,%esi
    0.00 :   2a1fda:       callq  53380 <operator delete(void*, unsigned long)@plt>
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   2a1fdf:       mov    -0xc8(%rbp),%rbx
    0.00 :   2a1fe6:       test   %rbx,%rbx
    0.00 :   2a1fe9:       je     2a2120 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x320>
    0.00 :   2a1fef:       mov    $0x28,%edi
    0.00 :   2a1ff4:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   2a1ff9:       mov    %rax,%r14
    0.00 :   2a1ffc:       mov    (%rbx),%eax
         :            return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    0.00 :   2a1ffe:       lea    0x8(%r14),%rdi
    0.00 :   2a2002:       mov    %eax,(%r14)
    0.00 :   2a2005:       mov    0x4(%rbx),%eax
    0.00 :   2a2008:       mov    %eax,0x4(%r14)
    0.00 :   2a200c:       lea    0x18(%r14),%rax
    0.00 :   2a2010:       mov    %rax,0x8(%r14)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   2a2014:       mov    0x8(%rbx),%rsi
    0.00 :   2a2018:       mov    0x10(%rbx),%rdx
    0.00 :   2a201c:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   2a201f:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
         :            __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    0.00 :   2a2024:       mov    %r14,(%r15)
    0.00 :   2a2027:       mov    -0xc8(%rbp),%rbx
         :
         :            /// Destructor, invokes the deleter if the stored pointer is not null.
         :            ~unique_ptr() noexcept
         :            {
         :            auto& __ptr = _M_t._M_ptr();
         :            if (__ptr != nullptr)
    0.00 :   2a202e:       test   %rbx,%rbx
    0.00 :   2a2031:       je     2a2052 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x252>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a2033:       mov    0x8(%rbx),%rdi
         :            return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    0.00 :   2a2037:       lea    0x18(%rbx),%rax
         :            if (!_M_is_local())
    0.00 :   2a203b:       cmp    %rax,%rdi
    0.00 :   2a203e:       je     2a2045 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x245>
    0.00 :   2a2040:       callq  53300 <operator delete(void*)@plt>
         :            delete __ptr;
    0.00 :   2a2045:       mov    $0x28,%esi
    0.00 :   2a204a:       mov    %rbx,%rdi
    0.00 :   2a204d:       callq  53380 <operator delete(void*, unsigned long)@plt>
    0.00 :   2a2052:       mov    -0x38(%rbp),%rcx
    0.00 :   2a2056:       xor    %fs:0x28,%rcx
    0.00 :   2a205f:       mov    %r15,%rax
    0.00 :   2a2062:       jne    2a230a <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x50a>
    0.00 :   2a2068:       lea    -0x28(%rbp),%rsp
    0.00 :   2a206c:       pop    %rbx
    0.00 :   2a206d:       pop    %r12
    0.00 :   2a206f:       pop    %r13
    0.00 :   2a2071:       pop    %r14
    0.00 :   2a2073:       pop    %r15
    0.00 :   2a2075:       pop    %rbp
    0.00 :   2a2076:       retq
    0.00 :   2a2077:       nopw   0x0(%rax,%rax,1)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   2a2080:       mov    %r13,%r8
    0.00 :   2a2083:       xor    %ecx,%ecx
    0.00 :   2a2085:       jmpq   2a1ee2 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0xe2>
    0.00 :   2a208a:       nopw   0x0(%rax,%rax,1)
    0.00 :   2a2090:       mov    -0xd0(%rbp),%rax
    0.00 :   2a2097:       mov    -0xe0(%rbp),%r13
    0.00 :   2a209e:       xor    %esi,%esi
    0.00 :   2a20a0:       mov    %r12,%rdi
    0.00 :   2a20a3:       mov    -0xd8(%rbp),%rcx
    0.00 :   2a20aa:       mov    -0x128(%rbp),%rdx
    0.00 :   2a20b1:       movq   $0x2,-0xf8(%rbp)
    0.00 :   2a20bc:       mov    %rax,-0x138(%rbp)
    0.00 :   2a20c3:       mov    %rax,-0x98(%rbp)
    0.00 :   2a20ca:       lea    -0xa0(%rbp),%rax
    0.00 :   2a20d1:       mov    %rcx,-0x140(%rbp)
    0.00 :   2a20d8:       mov    %r13,-0xa0(%rbp)
    0.00 :   2a20df:       mov    %rax,-0x148(%rbp)
    0.00 :   2a20e6:       mov    %rax,-0x100(%rbp)
    0.00 :   2a20ed:       callq  5c7f90 <onnxruntime::OpKernelContext::Output(int, std::initializer_list<long> const&)>
    0.00 :   2a20f2:       mov    %rax,%r12
    0.00 :   2a20f5:       test   %r13,%r13
    0.00 :   2a20f8:       je     2a2104 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x304>
    0.00 :   2a20fa:       cmpq   $0x0,-0x138(%rbp)
    0.00 :   2a2102:       jne    2a2160 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x360>
    0.00 :   2a2104:       movq   $0x0,(%r15)
         :            };
         :
         :            template<std::size_t _Idx, typename _Head>
         :            struct _Head_base<_Idx, _Head, false>
         :            {
         :            constexpr _Head_base()
    0.00 :   2a210b:       mov    -0xc8(%rbp),%rbx
    0.00 :   2a2112:       jmpq   2a202e <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x22e>
    0.00 :   2a2117:       nopw   0x0(%rax,%rax,1)
         :            __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    0.00 :   2a2120:       movq   $0x0,(%r15)
         :            pointer&   _M_ptr() { return std::get<0>(_M_t); }
    0.00 :   2a2127:       jmpq   2a2052 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x252>
    0.00 :   2a212c:       nopl   0x0(%rax)
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   2a2130:       movq   $0x0,-0x100(%rbp)
    0.00 :   2a213b:       movq   $0x0,-0xf8(%rbp)
    0.00 :   2a2146:       movq   $0x0,-0xf0(%rbp)
         :            ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :   2a2151:       jmpq   2a1f25 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x125>
    0.00 :   2a2156:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   2a2160:       mov    0x30(%rax),%rax
    0.00 :   2a2164:       cmpl   $0x1,0x8(%rax)
    0.00 :   2a2168:       jne    2a24c6 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x6c6>
    0.00 :   2a216e:       mov    0x50(%r12),%rax
    0.00 :   2a2173:       xor    %r10d,%r10d
    0.00 :   2a2176:       add    (%r12),%rax
    0.00 :   2a217a:       cmpq   $0x0,-0x120(%rbp)
    0.00 :   2a2182:       mov    %rax,%r12
    0.00 :   2a2185:       je     2a21b9 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x3b9>
    0.00 :   2a2187:       mov    -0x120(%rbp),%rax
    0.00 :   2a218e:       mov    0x30(%rax),%rax
    0.00 :   2a2192:       cmpl   $0x1,0x8(%rax)
    0.00 :   2a2196:       jne    2a23ed <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x5ed>
    0.00 :   2a219c:       mov    -0x120(%rbp),%rcx
    0.00 :   2a21a3:       mov    0x50(%rcx),%rax
    0.00 :   2a21a7:       add    $0x18,%rcx
    0.00 :   2a21ab:       add    -0x18(%rcx),%rax
    0.00 :   2a21af:       mov    %rcx,-0x120(%rbp)
    0.00 :   2a21b6:       mov    %rax,%r10
    0.00 :   2a21b9:       movss  0x1c(%rbx),%xmm1
    0.00 :   2a21be:       test   %r14,%r14
    0.00 :   2a21c1:       je     2a2278 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x478>
    0.00 :   2a21c7:       mov    0x30(%r14),%rax
    0.00 :   2a21cb:       cmpl   $0x1,0x8(%rax)
    0.00 :   2a21cf:       jne    2a2672 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x872>
    0.00 :   2a21d5:       mov    -0x118(%rbp),%rcx
    0.00 :   2a21dc:       mov    0x50(%r14),%rax
    0.00 :   2a21e0:       add    (%r14),%rax
    0.00 :   2a21e3:       mov    0x30(%rcx),%rdx
    0.00 :   2a21e7:       cmpl   $0x1,0x8(%rdx)
    0.00 :   2a21eb:       jne    2a2599 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x799>
    0.00 :   2a21f1:       sub    $0x8,%rsp
    0.00 :   2a21f5:       mov    0x14(%rbx),%esi
    0.00 :   2a21f8:       mov    0x10(%rbx),%edi
    0.00 :   2a21fb:       mov    %r13,%rdx
    0.00 :   2a21fe:       mov    -0x118(%rbp),%rcx
    0.00 :   2a2205:       movss  0x18(%rbx),%xmm0
    0.00 :   2a220a:       mov    -0x140(%rbp),%r8
    0.00 :   2a2211:       mov    0x50(%rcx),%r9
    0.00 :   2a2215:       add    (%rcx),%r9
    0.00 :   2a2218:       pushq  -0x130(%rbp)
    0.00 :   2a221e:       mov    -0x138(%rbp),%rcx
    0.00 :   2a2225:       push   %r12
    0.00 :   2a2227:       pushq  -0x120(%rbp)
    0.00 :   2a222d:       push   %r10
    0.00 :   2a222f:       push   %rax
    0.00 :   2a2230:       callq  2a07d0 <onnxruntime::Gemm<float>::ComputeGemm(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, long, long, long, float, float const*, float const*, float, float const*, onnxruntime::TensorShape const*, float*, onnxruntime::concurrency::ThreadPool*)>
    0.00 :   2a2235:       add    $0x30,%rsp
    0.00 :   2a2239:       mov    -0x138(%rbp),%rdx
  100.00 :   2a2240:       mov    -0x130(%rbp),%rcx
    0.00 :   2a2247:       mov    %r12,%rsi
    0.00 :   2a224a:       mov    %rbx,%rdi
    0.00 :   2a224d:       imul   %r13,%rdx
    0.00 :   2a2251:       callq  29e130 <onnxruntime::Gemm<float>::ComputeActivation(float*, unsigned long, onnxruntime::concurrency::ThreadPool*) const>
    0.00 :   2a2256:       jmpq   2a2104 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x304>
    0.00 :   2a225b:       nopl   0x0(%rax,%rax,1)
    0.00 :   2a2260:       mov    $0x1,%esi
    0.00 :   2a2265:       mov    %r12,%rdi
    0.00 :   2a2268:       callq  221800 <onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input<onnxruntime::Tensor>(int) const>
    0.00 :   2a226d:       mov    %rax,%r14
    0.00 :   2a2270:       jmpq   2a1e56 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x56>
    0.00 :   2a2275:       nopl   (%rax)
    0.00 :   2a2278:       mov    -0x120(%rbp),%rcx
    0.00 :   2a227f:       mov    %r12,%r8
    0.00 :   2a2282:       mov    %r10,%rdx
    0.00 :   2a2285:       movaps %xmm1,%xmm0
    0.00 :   2a2288:       mov    -0x138(%rbp),%rsi
    0.00 :   2a228f:       mov    %r13,%rdi
    0.00 :   2a2292:       mov    %r10,%r14
    0.00 :   2a2295:       callq  2a0440 <void onnxruntime::GemmBroadcastBias<float>(long, long, float, float const*, onnxruntime::TensorShape const*, float*)>
    0.00 :   2a229a:       pxor   %xmm1,%xmm1
    0.00 :   2a229e:       test   %r14,%r14
    0.00 :   2a22a1:       je     2a22a8 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x4a8>
    0.00 :   2a22a3:       movss  0x1c(%rbx),%xmm1
    0.00 :   2a22a8:       mov    -0x118(%rbp),%rcx
    0.00 :   2a22af:       mov    0x10(%rbx),%edi
    0.00 :   2a22b2:       mov    -0x140(%rbp),%r9
         :            pointer    _M_ptr() const { return std::get<0>(_M_t); }
    0.00 :   2a22b9:       mov    0x48(%rbx),%rax
    0.00 :   2a22bd:       mov    0x30(%rcx),%rdx
    0.00 :   2a22c1:       cmp    $0x6f,%edi
    0.00 :   2a22c4:       cmovne %r13,%r9
    0.00 :   2a22c8:       cmpl   $0x1,0x8(%rdx)
    0.00 :   2a22cc:       jne    2a2314 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x514>
    0.00 :   2a22ce:       mov    -0x118(%rbp),%rcx
    0.00 :   2a22d5:       mov    -0x138(%rbp),%rdx
    0.00 :   2a22dc:       mov    %r13,%rsi
    0.00 :   2a22df:       movss  0x18(%rbx),%xmm0
    0.00 :   2a22e4:       mov    0x50(%rcx),%r8
    0.00 :   2a22e8:       add    (%rcx),%r8
    0.00 :   2a22eb:       pushq  -0x130(%rbp)
    0.00 :   2a22f1:       mov    -0x140(%rbp),%rcx
    0.00 :   2a22f8:       push   %rdx
    0.00 :   2a22f9:       push   %r12
    0.00 :   2a22fb:       push   %rax
    0.00 :   2a22fc:       callq  6a8f50 <MlasGemm(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, float, float*, unsigned long, onnxruntime::concurrency::ThreadPool*)>
    0.00 :   2a2301:       add    $0x20,%rsp
    0.00 :   2a2305:       jmpq   2a2239 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const+0x439>
    0.00 :   2a230a:       callq  53460 <__stack_chk_fail@plt>
         :            std::__throw_bad_alloc();
    0.00 :   2a230f:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   2a2314:       mov    $0xa0,%edi
    0.00 :   2a2319:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a2320:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a2325:       mov    -0x128(%rbp),%r15
    0.00 :   2a232c:       mov    %rbx,%rdi
    0.00 :   2a232f:       lea    -0x110(%rbp),%rcx
    0.00 :   2a2336:       mov    %rax,%r12
    0.00 :   2a2339:       lea    0x5834cb(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a2340:       lea    -0x108(%rbp),%rdx
    0.00 :   2a2347:       mov    %rax,-0x110(%rbp)
    0.00 :   2a234e:       lea    0x5834b3(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a2355:       mov    %r15,%rsi
    0.00 :   2a2358:       mov    %rax,-0x108(%rbp)
    0.00 :   2a235f:       lea    0x58348b(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a2366:       mov    %rax,-0x100(%rbp)
    0.00 :   2a236d:       mov    -0x118(%rbp),%rax
    0.00 :   2a2374:       lea    0x30(%rax),%r8
    0.00 :   2a2378:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a237d:       mov    %r15,%rdi
    0.00 :   2a2380:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a2385:       mov    -0x148(%rbp),%r14
    0.00 :   2a238c:       mov    %r15,%r8
    0.00 :   2a238f:       lea    0x5a80ea(%rip),%rcx        # 84a480 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2a2396:       mov    $0x97,%edx
    0.00 :   2a239b:       lea    0x58346e(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a23a2:       mov    %r14,%rdi
    0.00 :   2a23a5:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a23aa:       mov    %rbx,%rcx
    0.00 :   2a23ad:       lea    0x58349c(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a23b4:       mov    %r14,%rsi
    0.00 :   2a23b7:       mov    %r12,%rdi
    0.00 :   2a23ba:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a23bf:       mov    %r14,%rdi
    0.00 :   2a23c2:       add    $0x10,%rbx
    0.00 :   2a23c6:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a23cb:       mov    %r15,%rdi
    0.00 :   2a23ce:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a23d3:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a23da:       cmp    %rbx,%rdi
    0.00 :   2a23dd:       je     78ade <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xc8>
         :            ::operator delete(__p);
    0.00 :   2a23e3:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a23e8:       jmpq   78ade <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xc8>
    0.00 :   2a23ed:       mov    $0xa0,%edi
    0.00 :   2a23f2:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a23f9:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a23fe:       mov    -0x128(%rbp),%r15
    0.00 :   2a2405:       mov    %rbx,%rdi
    0.00 :   2a2408:       lea    -0x110(%rbp),%rcx
    0.00 :   2a240f:       mov    %rax,%r12
    0.00 :   2a2412:       lea    0x5833f2(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a2419:       lea    -0x108(%rbp),%rdx
    0.00 :   2a2420:       mov    %rax,-0x110(%rbp)
    0.00 :   2a2427:       lea    0x5833da(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a242e:       mov    %r15,%rsi
    0.00 :   2a2431:       mov    %rax,-0x108(%rbp)
    0.00 :   2a2438:       lea    0x5833b2(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a243f:       mov    %rax,-0x100(%rbp)
    0.00 :   2a2446:       mov    -0x120(%rbp),%rax
    0.00 :   2a244d:       lea    0x30(%rax),%r8
    0.00 :   2a2451:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a2456:       mov    %r15,%rdi
    0.00 :   2a2459:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a245e:       mov    -0x148(%rbp),%r14
    0.00 :   2a2465:       mov    %r15,%r8
    0.00 :   2a2468:       lea    0x5a8011(%rip),%rcx        # 84a480 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2a246f:       mov    $0x97,%edx
    0.00 :   2a2474:       lea    0x583395(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a247b:       mov    %r14,%rdi
    0.00 :   2a247e:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a2483:       mov    %rbx,%rcx
    0.00 :   2a2486:       lea    0x5833c3(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a248d:       mov    %r14,%rsi
    0.00 :   2a2490:       mov    %r12,%rdi
    0.00 :   2a2493:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a2498:       mov    %r14,%rdi
    0.00 :   2a249b:       add    $0x10,%rbx
    0.00 :   2a249f:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a24a4:       mov    %r15,%rdi
    0.00 :   2a24a7:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a24ac:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a24b3:       cmp    %rbx,%rdi
    0.00 :   2a24b6:       je     78ab2 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x9c>
    0.00 :   2a24bc:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a24c1:       jmpq   78ab2 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x9c>
    0.00 :   2a24c6:       mov    $0xa0,%edi
    0.00 :   2a24cb:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a24d2:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a24d7:       mov    -0x128(%rbp),%r15
    0.00 :   2a24de:       mov    %rbx,%rdi
    0.00 :   2a24e1:       lea    -0x110(%rbp),%rcx
    0.00 :   2a24e8:       mov    %rax,%r13
    0.00 :   2a24eb:       lea    0x583319(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a24f2:       lea    -0x108(%rbp),%rdx
    0.00 :   2a24f9:       mov    %rax,-0x110(%rbp)
    0.00 :   2a2500:       lea    0x30(%r12),%r8
    0.00 :   2a2505:       mov    %r15,%rsi
    0.00 :   2a2508:       lea    0x5832f9(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a250f:       mov    %rax,-0x108(%rbp)
    0.00 :   2a2516:       lea    0x5832d4(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a251d:       mov    %rax,-0x100(%rbp)
    0.00 :   2a2524:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a2529:       mov    %r15,%rdi
    0.00 :   2a252c:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a2531:       mov    -0x148(%rbp),%r14
    0.00 :   2a2538:       mov    %r15,%r8
    0.00 :   2a253b:       lea    0x5a7e5e(%rip),%rcx        # 84a3a0 <onnxruntime::Tensor::MutableData<float>()::__PRETTY_FUNCTION__>
    0.00 :   2a2542:       mov    $0x83,%edx
    0.00 :   2a2547:       lea    0x5832c2(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a254e:       mov    %r14,%rdi
    0.00 :   2a2551:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a2556:       mov    %rbx,%rcx
    0.00 :   2a2559:       lea    0x5832f0(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a2560:       mov    %r14,%rsi
    0.00 :   2a2563:       mov    %r13,%rdi
    0.00 :   2a2566:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a256b:       mov    %r14,%rdi
    0.00 :   2a256e:       add    $0x10,%rbx
    0.00 :   2a2572:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a2577:       mov    %r15,%rdi
    0.00 :   2a257a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a257f:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a2586:       cmp    %rbx,%rdi
    0.00 :   2a2589:       je     78ac8 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xb2>
    0.00 :   2a258f:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a2594:       jmpq   78ac8 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xb2>
    0.00 :   2a2599:       mov    $0xa0,%edi
    0.00 :   2a259e:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a25a5:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a25aa:       mov    -0x128(%rbp),%r15
    0.00 :   2a25b1:       mov    %rbx,%rdi
    0.00 :   2a25b4:       lea    -0x110(%rbp),%rcx
    0.00 :   2a25bb:       mov    %rax,%r12
    0.00 :   2a25be:       lea    0x583246(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a25c5:       lea    -0x108(%rbp),%rdx
    0.00 :   2a25cc:       mov    %rax,-0x110(%rbp)
    0.00 :   2a25d3:       lea    0x58322e(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a25da:       mov    %r15,%rsi
    0.00 :   2a25dd:       mov    %rax,-0x108(%rbp)
    0.00 :   2a25e4:       lea    0x583206(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a25eb:       mov    %rax,-0x100(%rbp)
    0.00 :   2a25f2:       mov    -0x118(%rbp),%rax
    0.00 :   2a25f9:       lea    0x30(%rax),%r8
    0.00 :   2a25fd:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a2602:       mov    %r15,%rdi
    0.00 :   2a2605:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a260a:       mov    -0x148(%rbp),%r14
    0.00 :   2a2611:       mov    %r15,%r8
    0.00 :   2a2614:       lea    0x5a7e65(%rip),%rcx        # 84a480 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2a261b:       mov    $0x97,%edx
    0.00 :   2a2620:       lea    0x5831e9(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a2627:       mov    %r14,%rdi
    0.00 :   2a262a:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a262f:       mov    %rbx,%rcx
    0.00 :   2a2632:       lea    0x583217(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a2639:       mov    %r14,%rsi
    0.00 :   2a263c:       mov    %r12,%rdi
    0.00 :   2a263f:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a2644:       mov    %r14,%rdi
    0.00 :   2a2647:       add    $0x10,%rbx
    0.00 :   2a264b:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a2650:       mov    %r15,%rdi
    0.00 :   2a2653:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a2658:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a265f:       cmp    %rbx,%rdi
    0.00 :   2a2662:       je     78a16 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]>
    0.00 :   2a2668:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a266d:       jmpq   78a16 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]>
    0.00 :   2a2672:       mov    $0xa0,%edi
    0.00 :   2a2677:       lea    -0xc0(%rbp),%rbx
    0.00 :   2a267e:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   2a2683:       mov    -0x128(%rbp),%r15
    0.00 :   2a268a:       mov    %rbx,%rdi
    0.00 :   2a268d:       lea    -0x110(%rbp),%rcx
    0.00 :   2a2694:       mov    %rax,%r12
    0.00 :   2a2697:       lea    0x58316d(%rip),%rax        # 82580b <_fini+0x573>
    0.00 :   2a269e:       lea    -0x108(%rbp),%rdx
    0.00 :   2a26a5:       mov    %rax,-0x110(%rbp)
    0.00 :   2a26ac:       lea    0x30(%r14),%r8
    0.00 :   2a26b0:       mov    %r15,%rsi
    0.00 :   2a26b3:       lea    0x58314e(%rip),%rax        # 825808 <_fini+0x570>
    0.00 :   2a26ba:       mov    %rax,-0x108(%rbp)
    0.00 :   2a26c1:       lea    0x583129(%rip),%rax        # 8257f1 <_fini+0x559>
    0.00 :   2a26c8:       mov    %rax,-0x100(%rbp)
    0.00 :   2a26cf:       callq  189e10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, char const*, char const*, onnxruntime::PrimitiveDataTypeBase const*>(char const* const&, char const* const&, char const* const&, onnxruntime::PrimitiveDataTypeBase const* const&)>
    0.00 :   2a26d4:       mov    %r15,%rdi
    0.00 :   2a26d7:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   2a26dc:       mov    -0x148(%rbp),%r14
    0.00 :   2a26e3:       mov    %r15,%r8
    0.00 :   2a26e6:       lea    0x5a7d93(%rip),%rcx        # 84a480 <onnxruntime::Tensor::Data<float>() const::__PRETTY_FUNCTION__>
    0.00 :   2a26ed:       mov    $0x97,%edx
    0.00 :   2a26f2:       lea    0x583117(%rip),%rsi        # 825810 <_fini+0x578>
    0.00 :   2a26f9:       mov    %r14,%rdi
    0.00 :   2a26fc:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   2a2701:       mov    %rbx,%rcx
    0.00 :   2a2704:       lea    0x583145(%rip),%rdx        # 825850 <_fini+0x5b8>
    0.00 :   2a270b:       mov    %r14,%rsi
    0.00 :   2a270e:       mov    %r12,%rdi
    0.00 :   2a2711:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   2a2716:       mov    %r14,%rdi
    0.00 :   2a2719:       add    $0x10,%rbx
    0.00 :   2a271d:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   2a2722:       mov    %r15,%rdi
    0.00 :   2a2725:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   2a272a:       mov    -0xc0(%rbp),%rdi
         :            if (!_M_is_local())
    0.00 :   2a2731:       cmp    %rbx,%rdi
    0.00 :   2a2734:       je     78a82 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x6c>
    0.00 :   2a273a:       callq  53300 <operator delete(void*)@plt>
    0.00 :   2a273f:       jmpq   78a82 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x6c>
    0.00 :   2a2744:       mov    %rax,%r15
    0.00 :   2a2747:       jmpq   78a48 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x32>
    0.00 :   2a274c:       mov    %rax,%r15
    0.00 :   2a274f:       jmpq   78a98 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x82>
    0.00 :   2a2754:       mov    %rax,%r15
    0.00 :   2a2757:       jmpq   78aa4 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x8e>
    0.00 :   2a275c:       mov    %rax,%r15
    0.00 :   2a275f:       jmpq   78a60 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x4a>
    0.00 :   2a2764:       mov    %rax,%r15
    0.00 :   2a2767:       jmpq   78a54 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x3e>
    0.00 :   2a276c:       mov    %rax,%r15
    0.00 :   2a276f:       jmpq   78a60 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x4a>
    0.00 :   2a2774:       mov    %rax,%r15
    0.00 :   2a2777:       jmpq   78b38 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x122>
    0.00 :   2a277c:       mov    %rax,%rbx
    0.00 :   2a277f:       jmpq   78b92 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x17c>
    0.00 :   2a2784:       mov    %rax,%r15
    0.00 :   2a2787:       jmpq   78af4 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xde>
    0.00 :   2a278c:       mov    %rax,%r15
    0.00 :   2a278f:       jmpq   78b00 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xea>
    0.00 :   2a2794:       mov    %rax,%r15
    0.00 :   2a2797:       jmpq   78a60 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x4a>
    0.00 :   2a279c:       mov    %rax,%r15
    0.00 :   2a279f:       jmpq   78b11 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0xfb>
    0.00 :   2a27a4:       mov    %rax,%rbx
    0.00 :   2a27a7:       jmpq   78b26 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x110>
    0.00 :   2a27ac:       jmpq   78a2c <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x16>
    0.00 :   2a27b1:       mov    %rax,%r15
    0.00 :   2a27b4:       jmpq   78b44 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x12e>
    0.00 :   2a27b9:       mov    %rax,%r15
    0.00 :   2a27bc:       jmpq   78a60 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x4a>
    0.00 :   2a27c1:       mov    %rax,%r15
    0.00 :   2a27c4:       jmpq   78b61 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x14b>
    0.00 :   2a27c9:       mov    %rax,%r15
    0.00 :   2a27cc:       jmpq   78b6d <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x157>
    0.00 :   2a27d1:       mov    %rax,%r15
    0.00 :   2a27d4:       jmpq   78b55 <onnxruntime::Gemm<float>::Compute(onnxruntime::OpKernelContext*) const [clone .cold.336]+0x13f>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000059b540 <onnxruntime::PrimitiveDataType<float>::Size() const>:
         :            _ZNK11onnxruntime17PrimitiveDataTypeIfE4SizeEv():
  100.00 :   59b540:       mov    $0x4,%eax
    0.00 :   59b545:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000676a20 <onnxruntime::GraphViewer::GetNode(unsigned long) const>:
         :            _ZNK11onnxruntime11GraphViewer7GetNodeEm():
    0.00 :   676a20:       push   %rbx
    0.00 :   676a21:       mov    %rdi,%rbx
    0.00 :   676a24:       sub    $0x10,%rsp
    0.00 :   676a28:       cmpq   $0x0,0x78(%rdi)
    0.00 :   676a2d:       mov    %rsi,0x8(%rsp)
    0.00 :   676a32:       je     676a4a <onnxruntime::GraphViewer::GetNode(unsigned long) const+0x2a>
         :            *  unordered_set the result will either be 0 (not present) or 1
         :            *  (present).
         :            */
         :            size_type
         :            count(const key_type& __x) const
         :            { return _M_h.count(__x); }
    0.00 :   676a34:       lea    0x8(%rsp),%rsi
    0.00 :   676a39:       lea    0x80(%rdi),%rdi
    0.00 :   676a40:       callq  6768c0 <std::_Hashtable<unsigned long, unsigned long, std::allocator<unsigned long>, std::__detail::_Identity, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::count(unsigned long const&) const>
    0.00 :   676a45:       test   %rax,%rax
    0.00 :   676a48:       je     676a60 <onnxruntime::GraphViewer::GetNode(unsigned long) const+0x40>
    0.00 :   676a4a:       mov    0x8(%rsp),%rsi
    0.00 :   676a4f:       mov    (%rbx),%rdi
  100.00 :   676a52:       callq  1abf20 <onnxruntime::Graph::NodeAtIndexImpl(unsigned long) const>
    0.00 :   676a57:       add    $0x10,%rsp
    0.00 :   676a5b:       pop    %rbx
    0.00 :   676a5c:       retq
    0.00 :   676a5d:       nopl   (%rax)
    0.00 :   676a60:       add    $0x10,%rsp
    0.00 :   676a64:       xor    %eax,%eax
    0.00 :   676a66:       pop    %rbx
    0.00 :   676a67:       retq
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005aa9a0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)>:
         :            _ZN11onnxruntime15IExecutionFrame4InitERKSt6vectorIiSaIiEERKS1_I8OrtValueSaIS6_EERKSt13unordered_mapIiS6_St4hashIiESt8equal_toIiESaISt4pairIKiS6_EEESA_():
    0.00 :   5aa9a0:       push   %r15
    0.00 :   5aa9a2:       push   %r14
    0.00 :   5aa9a4:       push   %r13
    0.00 :   5aa9a6:       mov    %rdx,%r13
    0.00 :   5aa9a9:       push   %r12
    0.00 :   5aa9ab:       push   %rbp
    0.00 :   5aa9ac:       push   %rbx
    0.00 :   5aa9ad:       mov    %rdi,%rbx
    0.00 :   5aa9b0:       mov    %rsi,%rdi
    0.00 :   5aa9b3:       sub    $0x208,%rsp
    0.00 :   5aa9ba:       mov    %rsi,0x8(%rsp)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5aa9bf:       movabs $0xcccccccccccccccd,%rsi
    0.00 :   5aa9c9:       mov    %rcx,(%rsp)
    0.00 :   5aa9cd:       mov    %fs:0x28,%rax
    0.00 :   5aa9d6:       mov    %rax,0x1f8(%rsp)
    0.00 :   5aa9de:       xor    %eax,%eax
    0.00 :   5aa9e0:       mov    0x8(%rdx),%rax
    0.00 :   5aa9e4:       sub    (%rdx),%rax
    0.00 :   5aa9e7:       sar    $0x3,%rax
    0.00 :   5aa9eb:       mov    0x8(%rdi),%rdx
    0.00 :   5aa9ef:       sub    (%rdi),%rdx
    0.00 :   5aa9f2:       imul   %rsi,%rax
    0.00 :   5aa9f6:       sar    $0x2,%rdx
    0.00 :   5aa9fa:       cmp    %rdx,%rax
    0.00 :   5aa9fd:       jne    5ac08a <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x16ea>
         :            *  Returns true if the %vector is empty.  (Thus begin() would
         :            *  equal end().)
         :            */
         :            bool
         :            empty() const _GLIBCXX_NOEXCEPT
         :            { return begin() == end(); }
    0.00 :   5aaa03:       mov    0x8(%r8),%rcx
    0.00 :   5aaa07:       mov    (%r8),%rax
    0.00 :   5aaa0a:       mov    %r8,%r15
    0.00 :   5aaa0d:       cmp    %rcx,%rax
    0.00 :   5aaa10:       je     5aaa35 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x95>
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5aaa12:       mov    %rcx,%rdx
    0.00 :   5aaa15:       mov    0x38(%rbx),%rdi
    0.00 :   5aaa19:       sub    0x30(%rbx),%rdi
    0.00 :   5aaa1d:       sub    %rax,%rdx
    0.00 :   5aaa20:       sar    $0x2,%rdi
    0.00 :   5aaa24:       sar    $0x3,%rdx
    0.00 :   5aaa28:       imul   %rsi,%rdx
    0.00 :   5aaa2c:       cmp    %rdx,%rdi
    0.00 :   5aaa2f:       jne    5ac121 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1781>
         :            if (__new_size > size())
    0.00 :   5aaa35:       mov    0x18(%rbx),%rbp
    0.00 :   5aaa39:       mov    0x10(%rbx),%rdi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5aaa3d:       movabs $0xcccccccccccccccd,%r10
    0.00 :   5aaa47:       mov    0x28(%rbx),%rsi
    0.00 :   5aaa4b:       mov    %rbp,%rdx
    0.00 :   5aaa4e:       sub    %rdi,%rdx
    0.00 :   5aaa51:       sar    $0x3,%rdx
    0.00 :   5aaa55:       imul   %r10,%rdx
         :            if (__new_size > size())
    0.00 :   5aaa59:       cmp    %rdx,%rsi
    0.00 :   5aaa5c:       ja     5ab9f0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1050>
         :            else if (__new_size < size())
    0.00 :   5aaa62:       jb     5ab8c0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf20>
    0.00 :   5aaa68:       cmp    %rax,%rcx
    0.00 :   5aaa6b:       je     5aaba8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x208>
    0.00 :   5aaa71:       mov    0x30(%rbx),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5aaa75:       mov    0x38(%rbx),%r9
    0.00 :   5aaa79:       sub    %rdx,%r9
    0.00 :   5aaa7c:       sar    $0x2,%r9
    0.00 :   5aaa80:       je     5aaba8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x208>
    0.00 :   5aaa86:       xor    %r14d,%r14d
    0.00 :   5aaa89:       jmpq   5aab44 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1a4>
    0.00 :   5aaa8e:       xchg   %ax,%ax
         :            __exchange_and_add(volatile _Atomic_word* __mem, int __val)
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
         :
         :            static inline void
         :            __atomic_add(volatile _Atomic_word* __mem, int __val)
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aaa90:       lock addl $0x1,0x8(%rsi)
    0.00 :   5aaa95:       mov    0x8(%rbp),%rdx
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
         :            if (__tmp != _M_pi)
         :            {
         :            if (__tmp != 0)
         :            __tmp->_M_add_ref_copy();
         :            if (_M_pi != 0)
    0.00 :   5aaa99:       test   %rdx,%rdx
    0.00 :   5aaa9c:       je     5aaac8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x128>
         :            static inline _Atomic_word
         :            __attribute__ ((__unused__))
         :            __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5aaa9e:       mov    0x67d463(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5aaaa5:       test   %r12,%r12
    0.00 :   5aaaa8:       je     5ab330 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x990>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aaaae:       mov    $0xffffffff,%edi
    0.00 :   5aaab3:       lock xadd %edi,0x8(%rdx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5aaab8:       cmp    $0x1,%edi
    0.00 :   5aaabb:       je     5ab344 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x9a4>
    0.00 :   5aaac1:       nopl   0x0(%rax)
         :            _M_pi->_M_release();
         :            _M_pi = __tmp;
    0.00 :   5aaac8:       mov    %rsi,0x8(%rbp)
    0.00 :   5aaacc:       mov    0x10(%rax),%rdx
    0.00 :   5aaad0:       mov    %rdx,0x10(%rbp)
         :            _M_get() const noexcept
         :            { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
         :            };
         :
         :            template<typename _Tp, _Lock_policy _Lp>
         :            class __shared_ptr
    0.00 :   5aaad4:       mov    0x18(%rax),%rdx
    0.00 :   5aaad8:       mov    %rdx,0x18(%rbp)
    0.00 :   5aaadc:       mov    0x20(%rax),%rdx
         :            if (__tmp != _M_pi)
    0.00 :   5aaae0:       mov    0x20(%rbp),%rax
    0.00 :   5aaae4:       cmp    %rax,%rdx
    0.00 :   5aaae7:       je     5aab34 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x194>
         :            if (__tmp != 0)
    0.00 :   5aaae9:       test   %rdx,%rdx
    0.00 :   5aaaec:       je     5aab05 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x165>
         :            static inline void
         :            __attribute__ ((__unused__))
         :            __atomic_add_dispatch(_Atomic_word* __mem, int __val)
         :            {
         :            #ifdef __GTHREADS
         :            if (__gthread_active_p())
    0.00 :   5aaaee:       cmpq   $0x0,0x67d412(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5aaaf6:       je     5aab98 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1f8>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aaafc:       lock addl $0x1,0x8(%rdx)
    0.00 :   5aab01:       mov    0x20(%rbp),%rax
         :            if (_M_pi != 0)
    0.00 :   5aab05:       test   %rax,%rax
    0.00 :   5aab08:       je     5aab30 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x190>
         :            if (__gthread_active_p())
    0.00 :   5aab0a:       mov    0x67d3f7(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5aab11:       test   %r12,%r12
    0.00 :   5aab14:       je     5ab2b0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x910>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5aab1a:       mov    $0xffffffff,%esi
    0.00 :   5aab1f:       lock xadd %esi,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5aab24:       cmp    $0x1,%esi
    0.00 :   5aab27:       je     5ab2c2 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x922>
    0.00 :   5aab2d:       nopl   (%rax)
         :            _M_pi = __tmp;
    0.00 :   5aab30:       mov    %rdx,0x20(%rbp)
    0.00 :   5aab34:       add    $0x1,%r14
    0.00 :   5aab38:       cmp    %r9,%r14
    0.00 :   5aab3b:       je     5aaba8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x208>
    0.00 :   5aab3d:       mov    0x30(%rbx),%rdx
    0.00 :   5aab41:       mov    (%r15),%rax
    0.00 :   5aab44:       movslq (%rdx,%r14,4),%rdx
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5aab48:       lea    (%r14,%r14,4),%rcx
    0.00 :   5aab4c:       lea    (%rax,%rcx,8),%rax
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5aab50:       lea    (%rdx,%rdx,4),%rcx
    0.00 :   5aab54:       mov    0x10(%rbx),%rdx
    0.00 :   5aab58:       lea    (%rdx,%rcx,8),%rbp
         :            class __shared_ptr
    0.00 :   5aab5c:       mov    (%rax),%rdx
    0.00 :   5aab5f:       mov    %rdx,0x0(%rbp)
         :            if (__tmp != _M_pi)
    0.00 :   5aab63:       mov    0x8(%rbp),%rdx
         :            class __shared_ptr
    0.00 :   5aab67:       mov    0x8(%rax),%rsi
         :            if (__tmp != _M_pi)
    0.00 :   5aab6b:       cmp    %rdx,%rsi
    0.00 :   5aab6e:       je     5aaacc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x12c>
         :            if (__tmp != 0)
    0.00 :   5aab74:       test   %rsi,%rsi
    0.00 :   5aab77:       je     5aaa99 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf9>
         :            if (__gthread_active_p())
    0.00 :   5aab7d:       cmpq   $0x0,0x67d383(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5aab85:       jne    5aaa90 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf0>
         :            { *__mem += __val; }
    0.00 :   5aab8b:       addl   $0x1,0x8(%rsi)
    0.00 :   5aab8f:       jmpq   5aaa99 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf9>
    0.00 :   5aab94:       nopl   0x0(%rax)
    0.00 :   5aab98:       addl   $0x1,0x8(%rdx)
    0.00 :   5aab9c:       jmpq   5aab05 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x165>
    0.00 :   5aaba1:       nopl   0x0(%rax)
         :            begin() noexcept
         :            { return iterator(_M_begin()); }
         :
         :            const_iterator
         :            begin() const noexcept
         :            { return const_iterator(_M_begin()); }
    0.00 :   5aaba8:       mov    (%rsp),%rax
    0.00 :   5aabac:       mov    0x10(%rax),%rbp
    0.00 :   5aabb0:       test   %rbp,%rbp
    0.00 :   5aabb3:       je     5ab16c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7cc>
    0.00 :   5aabb9:       lea    0x30(%rsp),%rax
    0.00 :   5aabbe:       mov    %rax,(%rsp)
         :
         :            /// std::make_unique for single objects
         :            template<typename _Tp, typename... _Args>
         :            inline typename _MakeUniq<_Tp>::__single_object
         :            make_unique(_Args&&... __args)
         :            { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    0.00 :   5aabc2:       lea    0x40(%rsp),%rax
    0.00 :   5aabc7:       mov    %rax,0x10(%rsp)
    0.00 :   5aabcc:       movslq 0x8(%rbp),%r14
    0.00 :   5aabd0:       mov    %rbx,%rdi
    0.00 :   5aabd3:       mov    %r14d,%esi
    0.00 :   5aabd6:       callq  5a8ab0 <onnxruntime::IExecutionFrame::IsOutput(int) const>
    0.00 :   5aabdb:       test   %al,%al
    0.00 :   5aabdd:       je     5ab090 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x6f0>
    0.00 :   5aabe3:       mov    0x20(%rbp),%rdi
    0.00 :   5aabe7:       test   %rdi,%rdi
    0.00 :   5aabea:       je     5aabfa <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x25a>
    0.00 :   5aabec:       mov    (%rdi),%rax
    0.00 :   5aabef:       callq  *0x30(%rax)
    0.00 :   5aabf2:       test   %al,%al
    0.00 :   5aabf4:       jne    5ab3c0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xa20>
    0.00 :   5aabfa:       mov    $0xa0,%edi
    0.00 :   5aabff:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5aac04:       mov    0x20(%rbp),%rdi
    0.00 :   5aac08:       mov    %rax,0x8(%rsp)
    0.00 :   5aac0d:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
         :            *  The default constructor does nothing and is not normally
         :            *  accessible to users.
         :            */
         :            basic_ios()
         :            : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5aac12:       lea    0x80(%rsp),%rbx
    0.00 :   5aac1a:       mov    %rax,%rbp
    0.00 :   5aac1d:       lea    0x70(%rbx),%rdi
    0.00 :   5aac21:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5aac26:       mov    0x67cefb(%rip),%r14        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5aac2d:       xor    %edx,%edx
         :            __ostream_type&
         :            seekp(off_type, ios_base::seekdir);
         :
         :            protected:
         :            basic_ostream()
         :            { this->init(0); }
    0.00 :   5aac2f:       xor    %esi,%esi
    0.00 :   5aac31:       mov    %dx,0x1d0(%rsp)
    0.00 :   5aac39:       movq   $0x0,0x1c8(%rsp)
    0.00 :   5aac45:       lea    0x10(%r14),%rax
    0.00 :   5aac49:       mov    %rax,0xf0(%rsp)
    0.00 :   5aac51:       mov    0x67d148(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5aac58:       movq   $0x0,0x1d8(%rsp)
    0.00 :   5aac64:       movq   $0x0,0x1e0(%rsp)
    0.00 :   5aac70:       mov    0x8(%rax),%r13
    0.00 :   5aac74:       movq   $0x0,0x1e8(%rsp)
    0.00 :   5aac80:       mov    0x10(%rax),%rax
    0.00 :   5aac84:       mov    -0x18(%r13),%rdi
    0.00 :   5aac88:       mov    %r13,0x80(%rsp)
    0.00 :   5aac90:       movq   $0x0,0x1f0(%rsp)
    0.00 :   5aac9c:       add    %rbx,%rdi
    0.00 :   5aac9f:       mov    %rax,0x10(%rsp)
    0.00 :   5aaca4:       mov    %rax,(%rdi)
    0.00 :   5aaca7:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            *  That's a lie.  We initialize the base class with NULL, because the
         :            *  string class does its own memory management.
         :            */
         :            explicit
         :            basic_ostringstream(ios_base::openmode __mode = ios_base::out)
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5aacac:       mov    0x67d0ad(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            *  - this is not an error
         :            */
         :            basic_streambuf()
         :            : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
         :            _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
         :            _M_buf_locale(locale())
    0.00 :   5aacb3:       lea    0x40(%rbx),%rdi
    0.00 :   5aacb7:       movq   $0x0,0x90(%rsp)
    0.00 :   5aacc3:       movq   $0x0,0x98(%rsp)
    0.00 :   5aaccf:       lea    0x18(%r12),%rax
    0.00 :   5aacd4:       movq   $0x0,0xa0(%rsp)
    0.00 :   5aace0:       mov    %rax,0x80(%rsp)
    0.00 :   5aace8:       lea    0x40(%r12),%rax
    0.00 :   5aaced:       mov    %rax,0xf0(%rsp)
    0.00 :   5aacf5:       mov    0x67cf64(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5aacfc:       movq   $0x0,0xa8(%rsp)
    0.00 :   5aad08:       mov    %rax,(%rsp)
    0.00 :   5aad0c:       add    $0x10,%rax
    0.00 :   5aad10:       mov    %rax,0x88(%rsp)
    0.00 :   5aad18:       movq   $0x0,0xb0(%rsp)
    0.00 :   5aad24:       movq   $0x0,0xb8(%rsp)
    0.00 :   5aad30:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5aad35:       mov    0x67d29c(%rip),%r15        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5aad3c:       lea    0x8(%rbx),%rsi
    0.00 :   5aad40:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5aad44:       movl   $0x10,0xc8(%rsp)
    0.00 :   5aad4f:       lea    0x10(%r15),%rax
         :            typedef streamoff         off_type;
         :            typedef mbstate_t         state_type;
         :
         :            static _GLIBCXX17_CONSTEXPR void
         :            assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
         :            { __c1 = __c2; }
    0.00 :   5aad53:       movb   $0x0,0xe0(%rsp)
    0.00 :   5aad5b:       mov    %rax,0x88(%rsp)
         :            #else
         :            _Alloc_hider(pointer __dat, const _Alloc& __a)
         :            : allocator_type(__a), _M_p(__dat) { }
         :
         :            _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5aad63:       lea    0x60(%rbx),%rax
    0.00 :   5aad67:       mov    %rax,0xd0(%rsp)
         :            _M_data(pointer __p)
         :            { _M_dataplus._M_p = __p; }
         :
         :            void
         :            _M_length(size_type __length)
         :            { _M_string_length = __length; }
    0.00 :   5aad6f:       movq   $0x0,0xd8(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5aad7b:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
         :            {
         :            if (!__s)
         :            __out.setstate(ios_base::badbit);
         :            else
         :            __ostream_insert(__out, __s,
    0.00 :   5aad80:       mov    $0x21,%edx
    0.00 :   5aad85:       lea    0x27c584(%rip),%rsi        # 827310 <std::piecewise_construct+0x570>
    0.00 :   5aad8c:       mov    %rbx,%rdi
    0.00 :   5aad8f:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!__s)
    0.00 :   5aad94:       test   %rbp,%rbp
    0.00 :   5aad97:       je     5aba58 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x10b8>
         :            {
         :            #if __cplusplus > 201402
         :            if (__constant_string_p(__s))
         :            return __gnu_cxx::char_traits<char_type>::length(__s);
         :            #endif
         :            return __builtin_strlen(__s);
    0.00 :   5aad9d:       mov    %rbp,%rdi
    0.00 :   5aada0:       callq  52c60 <strlen@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5aada5:       mov    %rbp,%rsi
    0.00 :   5aada8:       mov    %rbx,%rdi
    0.00 :   5aadab:       mov    %rax,%rdx
    0.00 :   5aadae:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5aadb3:       lea    0x60(%rsp),%rbp
         :            { __c1 = __c2; }
    0.00 :   5aadb8:       movb   $0x0,0x70(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5aadbd:       movq   $0x0,0x68(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5aadc6:       lea    0x10(%rbp),%rax
    0.00 :   5aadca:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   5aadcf:       mov    0xb0(%rsp),%rax
    0.00 :   5aadd7:       test   %rax,%rax
    0.00 :   5aadda:       je     5abf03 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1563>
         :            if (this->pptr() > this->egptr())
    0.00 :   5aade0:       mov    0xa0(%rsp),%r8
    0.00 :   5aade8:       mov    0xa8(%rsp),%rcx
    0.00 :   5aadf0:       cmp    %r8,%rax
    0.00 :   5aadf3:       jbe    5aba10 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1070>
         :            replace(size_type __pos, size_type __n1, const _CharT* __s,
         :            size_type __n2)
         :            {
         :            __glibcxx_requires_string_len(__s, __n2);
         :            return _M_replace(_M_check(__pos, "basic_string::replace"),
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5aadf9:       sub    %rcx,%rax
    0.00 :   5aadfc:       xor    %edx,%edx
    0.00 :   5aadfe:       xor    %esi,%esi
    0.00 :   5aae00:       mov    %rbp,%rdi
    0.00 :   5aae03:       mov    %rax,%r8
    0.00 :   5aae06:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            *
         :            *  The buffer is deallocated by the stringbuf object, not the
         :            *  formatting stream.
         :            */
         :            ~basic_ostringstream()
         :            { }
    0.00 :   5aae0b:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aae10:       mov    0xd0(%rsp),%rdi
    0.00 :   5aae18:       mov    %rax,0x80(%rsp)
    0.00 :   5aae20:       lea    0x40(%r12),%rax
    0.00 :   5aae25:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5aae2d:       lea    0x10(%r15),%rax
    0.00 :   5aae31:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   5aae39:       lea    0x60(%rbx),%rax
    0.00 :   5aae3d:       cmp    %rax,%rdi
    0.00 :   5aae40:       je     5aae47 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x4a7>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5aae42:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5aae47:       mov    (%rsp),%rax
    0.00 :   5aae4b:       lea    0x40(%rbx),%rdi
    0.00 :   5aae4f:       add    $0x10,%rax
    0.00 :   5aae53:       mov    %rax,0x88(%rsp)
    0.00 :   5aae5b:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5aae60:       mov    -0x18(%r13),%rax
    0.00 :   5aae64:       mov    0x10(%rsp),%rcx
    0.00 :   5aae69:       mov    %r13,0x80(%rsp)
         :            ~basic_ios() { }
    0.00 :   5aae71:       lea    0x70(%rbx),%rdi
    0.00 :   5aae75:       mov    %rcx,0x80(%rsp,%rax,1)
    0.00 :   5aae7d:       lea    0x10(%r14),%rax
    0.00 :   5aae81:       mov    %rax,0xf0(%rsp)
    0.00 :   5aae89:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5aae8e:       lea    0x40(%rsp),%rax
    0.00 :   5aae93:       mov    %rax,%rdi
    0.00 :   5aae96:       mov    %rax,(%rsp)
    0.00 :   5aae9a:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5aae9f:       lea    0x27c4d1(%rip),%rdx        # 827377 <std::piecewise_construct+0x5d7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5aaea6:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5aaeaa:       mov    %rbx,%rdi
    0.00 :   5aaead:       lea    -0x3f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5aaeb1:       mov    %rax,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5aaeb9:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5aaebe:       lea    0x2e59d8(%rip),%rdx        # 89089d <OrtValue::Get<onnxruntime::Tensor>() const::__PRETTY_FUNCTION__+0x3d>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5aaec5:       lea    0x38(%rbx),%rax
    0.00 :   5aaec9:       movl   $0x57,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5aaed4:       lea    0x28(%rbx),%rdi
    0.00 :   5aaed8:       lea    -0x3d(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5aaedc:       mov    %rax,0xa8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5aaee4:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5aaee9:       mov    0x48(%rsp),%r14
    0.00 :   5aaeee:       mov    0x40(%rsp),%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5aaef3:       movq   $0x0,0xc8(%rsp)
    0.00 :   5aaeff:       movq   $0x0,0xd0(%rsp)
    0.00 :   5aaf0b:       movq   $0x0,0xd8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5aaf17:       mov    %r14,%r13
    0.00 :   5aaf1a:       sub    %r12,%r13
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5aaf1d:       mov    %r13,%rax
    0.00 :   5aaf20:       sar    $0x5,%rax
    0.00 :   5aaf24:       je     5abdd0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1430>
         :            if (__n > this->max_size())
    0.00 :   5aaf2a:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5aaf34:       cmp    %rdx,%rax
    0.00 :   5aaf37:       ja     5ac11c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x177c>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5aaf3d:       mov    %r13,%rdi
    0.00 :   5aaf40:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5aaf45:       mov    0x48(%rsp),%r14
    0.00 :   5aaf4a:       mov    0x40(%rsp),%r12
    0.00 :   5aaf4f:       mov    %rax,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5aaf52:       add    %r15,%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5aaf55:       mov    %r15,0xc8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5aaf5d:       mov    %r13,0xd8(%rsp)
         :            template<typename _InputIterator, typename _ForwardIterator>
         :            static _ForwardIterator
         :            __uninit_copy(_InputIterator __first, _InputIterator __last,
         :            _ForwardIterator __result)
         :            {
         :            _ForwardIterator __cur = __result;
    0.00 :   5aaf65:       mov    %r15,%r13
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5aaf68:       mov    %r15,0xd0(%rsp)
         :            __try
         :            {
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5aaf70:       cmp    %r14,%r12
    0.00 :   5aaf73:       je     5aafa1 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x601>
    0.00 :   5aaf75:       nopl   (%rax)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5aaf78:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5aaf7c:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5aaf7f:       mov    %rax,0x0(%r13)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5aaf83:       mov    (%r12),%rsi
    0.00 :   5aaf87:       mov    0x8(%r12),%rdx
    0.00 :   5aaf8c:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5aaf8f:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5aaf94:       add    $0x20,%r12
    0.00 :   5aaf98:       add    $0x20,%r13
    0.00 :   5aaf9c:       cmp    %r12,%r14
    0.00 :   5aaf9f:       jne    5aaf78 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x5d8>
    0.00 :   5aafa1:       mov    0x8(%rsp),%rdi
    0.00 :   5aafa6:       mov    %rbp,%rcx
    0.00 :   5aafa9:       lea    0x2e7fc5(%rip),%rdx        # 892f75 <onnxruntime::MemPatternPlanner::TraceAllocation(int, unsigned long)::__PRETTY_FUNCTION__+0x175>
    0.00 :   5aafb0:       mov    %rbx,%rsi
         :            this->_M_impl._M_finish =
    0.00 :   5aafb3:       mov    %r13,0xd0(%rsp)
    0.00 :   5aafbb:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5aafc0:       mov    0xd0(%rsp),%r13
    0.00 :   5aafc8:       mov    0xc8(%rsp),%r12
         :            {
         :            template<typename _ForwardIterator>
         :            static void
         :            __destroy(_ForwardIterator __first, _ForwardIterator __last)
         :            {
         :            for (; __first != __last; ++__first)
    0.00 :   5aafd0:       cmp    %r12,%r13
    0.00 :   5aafd3:       je     5aaffc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x65c>
    0.00 :   5aafd5:       nopl   (%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5aafd8:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   5aafdc:       lea    0x10(%r12),%rax
    0.00 :   5aafe1:       cmp    %rax,%rdi
    0.00 :   5aafe4:       je     5aafeb <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x64b>
         :            ::operator delete(__p);
    0.00 :   5aafe6:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5aafeb:       add    $0x20,%r12
    0.00 :   5aafef:       cmp    %r12,%r13
    0.00 :   5aaff2:       jne    5aafd8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x638>
    0.00 :   5aaff4:       mov    0xc8(%rsp),%r12
         :            if (__p)
    0.00 :   5aaffc:       test   %r12,%r12
    0.00 :   5aafff:       je     5ab009 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x669>
    0.00 :   5ab001:       mov    %r12,%rdi
    0.00 :   5ab004:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab009:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab011:       lea    0x38(%rbx),%rax
    0.00 :   5ab015:       cmp    %rax,%rdi
    0.00 :   5ab018:       je     5ab01f <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x67f>
    0.00 :   5ab01a:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab01f:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab027:       add    $0x10,%rbx
    0.00 :   5ab02b:       cmp    %rbx,%rdi
    0.00 :   5ab02e:       je     5ab035 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x695>
    0.00 :   5ab030:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5ab035:       mov    0x48(%rsp),%r12
    0.00 :   5ab03a:       mov    0x40(%rsp),%rbx
    0.00 :   5ab03f:       cmp    %rbx,%r12
    0.00 :   5ab042:       je     5ab067 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x6c7>
    0.00 :   5ab044:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab048:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab04b:       lea    0x10(%rbx),%rax
    0.00 :   5ab04f:       cmp    %rax,%rdi
    0.00 :   5ab052:       je     5ab059 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x6b9>
    0.00 :   5ab054:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ab059:       add    $0x20,%rbx
    0.00 :   5ab05d:       cmp    %rbx,%r12
    0.00 :   5ab060:       jne    5ab048 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x6a8>
    0.00 :   5ab062:       mov    0x40(%rsp),%rbx
         :            if (__p)
    0.00 :   5ab067:       test   %rbx,%rbx
    0.00 :   5ab06a:       je     5ab074 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x6d4>
    0.00 :   5ab06c:       mov    %rbx,%rdi
    0.00 :   5ab06f:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab074:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab079:       add    $0x10,%rbp
    0.00 :   5ab07d:       cmp    %rbp,%rdi
    0.00 :   5ab080:       je     b164e <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x1da>
    0.00 :   5ab086:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ab08b:       jmpq   b164e <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x1da>
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5ab090:       mov    0x10(%rbx),%rax
    0.00 :   5ab094:       lea    (%r14,%r14,4),%rdx
    0.00 :   5ab098:       lea    (%rax,%rdx,8),%r14
         :            class __shared_ptr
    0.00 :   5ab09c:       mov    0x10(%rbp),%rax
         :            if (__tmp != _M_pi)
    0.00 :   5ab0a0:       mov    0x8(%r14),%r15
         :            class __shared_ptr
  100.00 :   5ab0a4:       mov    %rax,(%r14)
    0.00 :   5ab0a7:       mov    0x18(%rbp),%rax
         :            if (__tmp != _M_pi)
    0.00 :   5ab0ab:       cmp    %r15,%rax
    0.00 :   5ab0ae:       je     5ab0f9 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x759>
         :            if (__tmp != 0)
    0.00 :   5ab0b0:       test   %rax,%rax
    0.00 :   5ab0b3:       je     5ab0cc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x72c>
         :            if (__gthread_active_p())
    0.00 :   5ab0b5:       cmpq   $0x0,0x67ce4b(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab0bd:       je     5aba28 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1088>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab0c3:       lock addl $0x1,0x8(%rax)
    0.00 :   5ab0c8:       mov    0x8(%r14),%r15
         :            if (_M_pi != 0)
    0.00 :   5ab0cc:       test   %r15,%r15
    0.00 :   5ab0cf:       je     5ab0f5 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x755>
         :            if (__gthread_active_p())
    0.00 :   5ab0d1:       mov    0x67ce30(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab0d8:       test   %r12,%r12
    0.00 :   5ab0db:       je     5abdd8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1438>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab0e1:       mov    $0xffffffff,%edx
    0.00 :   5ab0e6:       lock xadd %edx,0x8(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab0ec:       cmp    $0x1,%edx
    0.00 :   5ab0ef:       je     5aba93 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x10f3>
         :            _M_pi = __tmp;
    0.00 :   5ab0f5:       mov    %rax,0x8(%r14)
    0.00 :   5ab0f9:       mov    0x20(%rbp),%rax
         :            if (__tmp != _M_pi)
    0.00 :   5ab0fd:       mov    0x20(%r14),%r15
    0.00 :   5ab101:       mov    %rax,0x10(%r14)
         :            class __shared_ptr
    0.00 :   5ab105:       mov    0x28(%rbp),%rax
    0.00 :   5ab109:       mov    %rax,0x18(%r14)
    0.00 :   5ab10d:       mov    0x30(%rbp),%rax
         :            if (__tmp != _M_pi)
    0.00 :   5ab111:       cmp    %r15,%rax
    0.00 :   5ab114:       je     5ab15f <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7bf>
         :            if (__tmp != 0)
    0.00 :   5ab116:       test   %rax,%rax
    0.00 :   5ab119:       je     5ab132 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x792>
         :            if (__gthread_active_p())
    0.00 :   5ab11b:       cmpq   $0x0,0x67cde5(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab123:       je     5aba40 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x10a0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab129:       lock addl $0x1,0x8(%rax)
    0.00 :   5ab12e:       mov    0x20(%r14),%r15
         :            if (_M_pi != 0)
    0.00 :   5ab132:       test   %r15,%r15
    0.00 :   5ab135:       je     5ab15b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7bb>
         :            if (__gthread_active_p())
    0.00 :   5ab137:       mov    0x67cdca(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab13e:       test   %r12,%r12
    0.00 :   5ab141:       je     5abde8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1448>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab147:       mov    $0xffffffff,%edx
    0.00 :   5ab14c:       lock xadd %edx,0x8(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab152:       cmp    $0x1,%edx
    0.00 :   5ab155:       je     5abadb <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x113b>
         :            _M_pi = __tmp;
    0.00 :   5ab15b:       mov    %rax,0x20(%r14)
         :            _Node_iterator_base(__node_type* __p) noexcept
         :            : _M_cur(__p) { }
         :
         :            void
         :            _M_incr() noexcept
         :            { _M_cur = _M_cur->_M_next(); }
    0.00 :   5ab15f:       mov    0x0(%rbp),%rbp
    0.00 :   5ab163:       test   %rbp,%rbp
    0.00 :   5ab166:       jne    5aabcc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x22c>
    0.00 :   5ab16c:       mov    0x8(%rsp),%rax
    0.00 :   5ab171:       mov    (%rax),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ab174:       mov    0x8(%rax),%rax
    0.00 :   5ab178:       mov    %rax,%rsi
    0.00 :   5ab17b:       mov    %rax,(%rsp)
    0.00 :   5ab17f:       sub    %rdx,%rsi
    0.00 :   5ab182:       sar    $0x2,%rsi
    0.00 :   5ab186:       je     5abeda <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x153a>
    0.00 :   5ab18c:       xor    %r14d,%r14d
    0.00 :   5ab18f:       jmpq   5ab259 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x8b9>
    0.00 :   5ab194:       nopl   0x0(%rax)
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab198:       lock addl $0x1,0x8(%rdx)
    0.00 :   5ab19d:       mov    0x8(%rbp),%rax
         :            if (_M_pi != 0)
    0.00 :   5ab1a1:       test   %rax,%rax
    0.00 :   5ab1a4:       je     5ab1d0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x830>
         :            if (__gthread_active_p())
    0.00 :   5ab1a6:       mov    0x67cd5b(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab1ad:       test   %r12,%r12
    0.00 :   5ab1b0:       je     5abe64 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x14c4>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab1b6:       mov    $0xffffffff,%edi
    0.00 :   5ab1bb:       lock xadd %edi,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab1c0:       cmp    $0x1,%edi
    0.00 :   5ab1c3:       je     5abe78 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x14d8>
    0.00 :   5ab1c9:       nopl   0x0(%rax)
         :            _M_pi = __tmp;
    0.00 :   5ab1d0:       mov    %rdx,0x8(%rbp)
    0.00 :   5ab1d4:       mov    0x10(%r15),%rax
    0.00 :   5ab1d8:       mov    %rax,0x10(%rbp)
         :            class __shared_ptr
    0.00 :   5ab1dc:       mov    0x18(%r15),%rax
    0.00 :   5ab1e0:       mov    %rax,0x18(%rbp)
    0.00 :   5ab1e4:       mov    0x20(%r15),%rax
         :            if (__tmp != _M_pi)
    0.00 :   5ab1e8:       mov    0x20(%rbp),%r15
    0.00 :   5ab1ec:       cmp    %r15,%rax
    0.00 :   5ab1ef:       je     5ab244 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x8a4>
         :            if (__tmp != 0)
    0.00 :   5ab1f1:       test   %rax,%rax
    0.00 :   5ab1f4:       je     5ab20d <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x86d>
         :            if (__gthread_active_p())
    0.00 :   5ab1f6:       cmpq   $0x0,0x67cd0a(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab1fe:       je     5abdc0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1420>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab204:       lock addl $0x1,0x8(%rax)
    0.00 :   5ab209:       mov    0x20(%rbp),%r15
         :            if (_M_pi != 0)
    0.00 :   5ab20d:       test   %r15,%r15
    0.00 :   5ab210:       je     5ab240 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x8a0>
         :            if (__gthread_active_p())
    0.00 :   5ab212:       mov    0x67ccef(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab219:       test   %r12,%r12
    0.00 :   5ab21c:       je     5abdf8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1458>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab222:       mov    $0xffffffff,%edx
    0.00 :   5ab227:       lock xadd %edx,0x8(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab22d:       cmp    $0x1,%edx
    0.00 :   5ab230:       je     5abe0c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x146c>
    0.00 :   5ab236:       nopw   %cs:0x0(%rax,%rax,1)
         :            _M_pi = __tmp;
    0.00 :   5ab240:       mov    %rax,0x20(%rbp)
    0.00 :   5ab244:       add    $0x1,%r14
    0.00 :   5ab248:       cmp    %rsi,%r14
    0.00 :   5ab24b:       je     5abeda <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x153a>
    0.00 :   5ab251:       mov    0x8(%rsp),%rax
    0.00 :   5ab256:       mov    (%rax),%rdx
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5ab259:       mov    0x0(%r13),%rcx
    0.00 :   5ab25d:       lea    (%r14,%r14,4),%rax
    0.00 :   5ab261:       lea    (%rcx,%rax,8),%r15
    0.00 :   5ab265:       movslq (%rdx,%r14,4),%rax
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   5ab269:       lea    (%rax,%rax,4),%rdx
    0.00 :   5ab26d:       mov    0x10(%rbx),%rax
    0.00 :   5ab271:       lea    (%rax,%rdx,8),%rbp
         :            class __shared_ptr
    0.00 :   5ab275:       mov    (%r15),%rax
    0.00 :   5ab278:       mov    %rax,0x0(%rbp)
         :            if (__tmp != _M_pi)
    0.00 :   5ab27c:       mov    0x8(%rbp),%rax
         :            class __shared_ptr
    0.00 :   5ab280:       mov    0x8(%r15),%rdx
         :            if (__tmp != _M_pi)
    0.00 :   5ab284:       cmp    %rax,%rdx
    0.00 :   5ab287:       je     5ab1d4 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x834>
         :            if (__tmp != 0)
    0.00 :   5ab28d:       test   %rdx,%rdx
    0.00 :   5ab290:       je     5ab1a1 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x801>
         :            if (__gthread_active_p())
    0.00 :   5ab296:       cmpq   $0x0,0x67cc6a(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab29e:       jne    5ab198 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7f8>
         :            { *__mem += __val; }
    0.00 :   5ab2a4:       addl   $0x1,0x8(%rdx)
    0.00 :   5ab2a8:       jmpq   5ab1a1 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x801>
    0.00 :   5ab2ad:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ab2b0:       mov    0x8(%rax),%esi
         :            *__mem += __val;
    0.00 :   5ab2b3:       lea    -0x1(%rsi),%edi
    0.00 :   5ab2b6:       mov    %edi,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab2b9:       cmp    $0x1,%esi
    0.00 :   5ab2bc:       jne    5aab30 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x190>
         :            _M_dispose();
    0.00 :   5ab2c2:       mov    (%rax),%rsi
    0.00 :   5ab2c5:       mov    %r9,0x20(%rsp)
    0.00 :   5ab2ca:       mov    %rax,%rdi
    0.00 :   5ab2cd:       mov    %rdx,0x18(%rsp)
    0.00 :   5ab2d2:       mov    %rax,0x10(%rsp)
    0.00 :   5ab2d7:       callq  *0x10(%rsi)
         :            if (__gthread_active_p())
    0.00 :   5ab2da:       test   %r12,%r12
    0.00 :   5ab2dd:       mov    0x10(%rsp),%rax
    0.00 :   5ab2e2:       mov    0x18(%rsp),%rdx
    0.00 :   5ab2e7:       mov    0x20(%rsp),%r9
    0.00 :   5ab2ec:       je     5ab8a0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf00>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab2f2:       mov    $0xffffffff,%ecx
    0.00 :   5ab2f7:       lock xadd %ecx,0xc(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ab2fc:       cmp    $0x1,%ecx
    0.00 :   5ab2ff:       jne    5aab30 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x190>
         :            _M_destroy();
    0.00 :   5ab305:       mov    (%rax),%rcx
    0.00 :   5ab308:       mov    %r9,0x18(%rsp)
    0.00 :   5ab30d:       mov    %rax,%rdi
    0.00 :   5ab310:       mov    %rdx,0x10(%rsp)
    0.00 :   5ab315:       callq  *0x18(%rcx)
    0.00 :   5ab318:       mov    0x18(%rsp),%r9
    0.00 :   5ab31d:       mov    0x10(%rsp),%rdx
    0.00 :   5ab322:       jmpq   5aab30 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x190>
    0.00 :   5ab327:       nopw   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ab330:       mov    0x8(%rdx),%edi
         :            *__mem += __val;
    0.00 :   5ab333:       lea    -0x1(%rdi),%r10d
    0.00 :   5ab337:       mov    %r10d,0x8(%rdx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab33b:       cmp    $0x1,%edi
    0.00 :   5ab33e:       jne    5aaac8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x128>
         :            _M_dispose();
    0.00 :   5ab344:       mov    (%rdx),%r10
    0.00 :   5ab347:       mov    %r9,0x28(%rsp)
    0.00 :   5ab34c:       mov    %rdx,%rdi
    0.00 :   5ab34f:       mov    %rsi,0x20(%rsp)
    0.00 :   5ab354:       mov    %rax,0x18(%rsp)
    0.00 :   5ab359:       mov    %rdx,0x10(%rsp)
    0.00 :   5ab35e:       callq  *0x10(%r10)
         :            if (__gthread_active_p())
    0.00 :   5ab362:       test   %r12,%r12
    0.00 :   5ab365:       mov    0x10(%rsp),%rdx
    0.00 :   5ab36a:       mov    0x18(%rsp),%rax
    0.00 :   5ab36f:       mov    0x20(%rsp),%rsi
    0.00 :   5ab374:       mov    0x28(%rsp),%r9
    0.00 :   5ab379:       je     5ab8b0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf10>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab37f:       mov    $0xffffffff,%ecx
    0.00 :   5ab384:       lock xadd %ecx,0xc(%rdx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ab389:       cmp    $0x1,%ecx
    0.00 :   5ab38c:       jne    5aaac8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x128>
         :            _M_destroy();
    0.00 :   5ab392:       mov    (%rdx),%rcx
    0.00 :   5ab395:       mov    %r9,0x20(%rsp)
    0.00 :   5ab39a:       mov    %rdx,%rdi
    0.00 :   5ab39d:       mov    %rsi,0x18(%rsp)
    0.00 :   5ab3a2:       mov    %rax,0x10(%rsp)
    0.00 :   5ab3a7:       callq  *0x18(%rcx)
    0.00 :   5ab3aa:       mov    0x20(%rsp),%r9
    0.00 :   5ab3af:       mov    0x18(%rsp),%rsi
    0.00 :   5ab3b4:       mov    0x10(%rsp),%rax
    0.00 :   5ab3b9:       jmpq   5aaac8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x128>
    0.00 :   5ab3be:       xchg   %ax,%ax
    0.00 :   5ab3c0:       mov    0x10(%rbp),%rax
    0.00 :   5ab3c4:       lea    (%r14,%r14,4),%rdx
    0.00 :   5ab3c8:       mov    %rax,0x18(%rsp)
    0.00 :   5ab3cd:       mov    0x10(%rbx),%rax
    0.00 :   5ab3d1:       lea    (%rax,%rdx,8),%r14
    0.00 :   5ab3d5:       cmpq   $0x0,(%r14)
    0.00 :   5ab3d9:       je     5abc40 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x12a0>
    0.00 :   5ab3df:       mov    0x10(%r14),%r15
    0.00 :   5ab3e3:       test   %r15,%r15
    0.00 :   5ab3e6:       je     5abc40 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x12a0>
    0.00 :   5ab3ec:       mov    (%rbx),%rax
    0.00 :   5ab3ef:       mov    %r15,%rdi
    0.00 :   5ab3f2:       mov    0x30(%rax),%r12
    0.00 :   5ab3f6:       mov    (%r15),%rax
    0.00 :   5ab3f9:       callq  *0x30(%rax)
    0.00 :   5ab3fc:       test   %al,%al
    0.00 :   5ab3fe:       jne    5abb23 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1183>
    0.00 :   5ab404:       mov    $0xa0,%edi
    0.00 :   5ab409:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5ab40e:       mov    0x10(%r14),%rdi
    0.00 :   5ab412:       mov    %rax,0x8(%rsp)
    0.00 :   5ab417:       callq  59c180 <onnxruntime::DataTypeImpl::ToString(onnxruntime::DataTypeImpl const*)>
         :            _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    0.00 :   5ab41c:       lea    0x80(%rsp),%rbx
    0.00 :   5ab424:       mov    %rax,%rbp
    0.00 :   5ab427:       lea    0x70(%rbx),%rdi
    0.00 :   5ab42b:       callq  52a70 <std::ios_base::ios_base()@plt>
    0.00 :   5ab430:       mov    0x67c6f1(%rip),%r14        # c27b28 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4>
         :            { this->init(0); }
    0.00 :   5ab437:       xor    %esi,%esi
    0.00 :   5ab439:       movq   $0x0,0x1c8(%rsp)
    0.00 :   5ab445:       movq   $0x0,0x1d8(%rsp)
    0.00 :   5ab451:       movq   $0x0,0x1e0(%rsp)
    0.00 :   5ab45d:       lea    0x10(%r14),%rax
    0.00 :   5ab461:       mov    %rax,0xf0(%rsp)
    0.00 :   5ab469:       xor    %eax,%eax
    0.00 :   5ab46b:       mov    %ax,0x1d0(%rsp)
    0.00 :   5ab473:       mov    0x67c926(%rip),%rax        # c27da0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
    0.00 :   5ab47a:       movq   $0x0,0x1e8(%rsp)
    0.00 :   5ab486:       movq   $0x0,0x1f0(%rsp)
    0.00 :   5ab492:       mov    0x8(%rax),%r13
    0.00 :   5ab496:       mov    0x10(%rax),%rax
    0.00 :   5ab49a:       mov    -0x18(%r13),%rdi
    0.00 :   5ab49e:       mov    %r13,0x80(%rsp)
    0.00 :   5ab4a6:       mov    %rax,0x10(%rsp)
    0.00 :   5ab4ab:       add    %rbx,%rdi
    0.00 :   5ab4ae:       mov    %rax,(%rdi)
    0.00 :   5ab4b1:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
    0.00 :   5ab4b6:       mov    0x67c8a3(%rip),%r12        # c27d60 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            _M_buf_locale(locale())
    0.00 :   5ab4bd:       lea    0x40(%rbx),%rdi
    0.00 :   5ab4c1:       movq   $0x0,0x90(%rsp)
    0.00 :   5ab4cd:       movq   $0x0,0x98(%rsp)
    0.00 :   5ab4d9:       lea    0x18(%r12),%rax
    0.00 :   5ab4de:       movq   $0x0,0xa0(%rsp)
    0.00 :   5ab4ea:       mov    %rax,0x80(%rsp)
    0.00 :   5ab4f2:       lea    0x40(%r12),%rax
    0.00 :   5ab4f7:       mov    %rax,0xf0(%rsp)
    0.00 :   5ab4ff:       mov    0x67c75a(%rip),%rax        # c27c60 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4>
    0.00 :   5ab506:       movq   $0x0,0xa8(%rsp)
    0.00 :   5ab512:       mov    %rax,(%rsp)
    0.00 :   5ab516:       add    $0x10,%rax
    0.00 :   5ab51a:       mov    %rax,0x88(%rsp)
    0.00 :   5ab522:       movq   $0x0,0xb0(%rsp)
    0.00 :   5ab52e:       movq   $0x0,0xb8(%rsp)
    0.00 :   5ab53a:       callq  53eb0 <std::locale::locale()@plt>
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ab53f:       mov    0x67ca92(%rip),%r15        # c27fd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21>
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ab546:       lea    0x8(%rbx),%rsi
    0.00 :   5ab54a:       lea    0x70(%rbx),%rdi
         :            : __streambuf_type(), _M_mode(__mode), _M_string()
    0.00 :   5ab54e:       movl   $0x10,0xc8(%rsp)
    0.00 :   5ab559:       lea    0x10(%r15),%rax
    0.00 :   5ab55d:       movb   $0x0,0xe0(%rsp)
    0.00 :   5ab565:       mov    %rax,0x88(%rsp)
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ab56d:       lea    0x60(%rbx),%rax
    0.00 :   5ab571:       mov    %rax,0xd0(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5ab579:       movq   $0x0,0xd8(%rsp)
         :            { this->init(&_M_stringbuf); }
    0.00 :   5ab585:       callq  53720 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5ab58a:       mov    $0x21,%edx
    0.00 :   5ab58f:       lea    0x27bd7a(%rip),%rsi        # 827310 <std::piecewise_construct+0x570>
    0.00 :   5ab596:       mov    %rbx,%rdi
    0.00 :   5ab599:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            if (!__s)
    0.00 :   5ab59e:       test   %rbp,%rbp
    0.00 :   5ab5a1:       je     5abda0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1400>
         :            return __builtin_strlen(__s);
    0.00 :   5ab5a7:       mov    %rbp,%rdi
    0.00 :   5ab5aa:       callq  52c60 <strlen@plt>
         :            __ostream_insert(__out, __s,
    0.00 :   5ab5af:       mov    %rbp,%rsi
    0.00 :   5ab5b2:       mov    %rbx,%rdi
    0.00 :   5ab5b5:       mov    %rax,%rdx
    0.00 :   5ab5b8:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ab5bd:       lea    0x60(%rsp),%rbp
         :            { __c1 = __c2; }
    0.00 :   5ab5c2:       movb   $0x0,0x70(%rsp)
         :            { _M_string_length = __length; }
    0.00 :   5ab5c7:       movq   $0x0,0x68(%rsp)
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ab5d0:       lea    0x10(%rbp),%rax
    0.00 :   5ab5d4:       mov    %rax,0x60(%rsp)
         :            if (this->pptr())
    0.00 :   5ab5d9:       mov    0xb0(%rsp),%rax
    0.00 :   5ab5e1:       test   %rax,%rax
    0.00 :   5ab5e4:       je     5abfa3 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1603>
         :            if (this->pptr() > this->egptr())
    0.00 :   5ab5ea:       mov    0xa0(%rsp),%r8
    0.00 :   5ab5f2:       mov    0xa8(%rsp),%rcx
    0.00 :   5ab5fa:       cmp    %r8,%rax
    0.00 :   5ab5fd:       jbe    5abf14 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1574>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5ab603:       sub    %rcx,%rax
    0.00 :   5ab606:       xor    %edx,%edx
    0.00 :   5ab608:       xor    %esi,%esi
    0.00 :   5ab60a:       mov    %rbp,%rdi
    0.00 :   5ab60d:       mov    %rax,%r8
    0.00 :   5ab610:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
         :            { }
    0.00 :   5ab615:       lea    0x18(%r12),%rax
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab61a:       mov    0xd0(%rsp),%rdi
    0.00 :   5ab622:       mov    %rax,0x80(%rsp)
    0.00 :   5ab62a:       lea    0x40(%r12),%rax
    0.00 :   5ab62f:       mov    %rax,0xf0(%rsp)
         :            class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    0.00 :   5ab637:       lea    0x10(%r15),%rax
    0.00 :   5ab63b:       mov    %rax,0x88(%rsp)
         :            if (!_M_is_local())
    0.00 :   5ab643:       lea    0x60(%rbx),%rax
    0.00 :   5ab647:       cmp    %rax,%rdi
    0.00 :   5ab64a:       je     5ab651 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xcb1>
    0.00 :   5ab64c:       callq  53300 <operator delete(void*)@plt>
         :            { }
    0.00 :   5ab651:       mov    (%rsp),%rax
    0.00 :   5ab655:       lea    0x40(%rbx),%rdi
    0.00 :   5ab659:       add    $0x10,%rax
    0.00 :   5ab65d:       mov    %rax,0x88(%rsp)
    0.00 :   5ab665:       callq  537d0 <std::locale::~locale()@plt>
         :            ~basic_ostream() { }
    0.00 :   5ab66a:       mov    -0x18(%r13),%rax
    0.00 :   5ab66e:       mov    0x10(%rsp),%rcx
    0.00 :   5ab673:       mov    %r13,0x80(%rsp)
         :            ~basic_ios() { }
    0.00 :   5ab67b:       lea    0x70(%rbx),%rdi
    0.00 :   5ab67f:       mov    %rcx,0x80(%rsp,%rax,1)
    0.00 :   5ab687:       lea    0x10(%r14),%rax
    0.00 :   5ab68b:       mov    %rax,0xf0(%rsp)
    0.00 :   5ab693:       callq  52b40 <std::ios_base::~ios_base()@plt>
    0.00 :   5ab698:       lea    0x40(%rsp),%rax
    0.00 :   5ab69d:       mov    %rax,%rdi
    0.00 :   5ab6a0:       mov    %rax,(%rsp)
    0.00 :   5ab6a4:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ab6a9:       lea    0x27bcc7(%rip),%rdx        # 827377 <std::piecewise_construct+0x5d7>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ab6b0:       lea    0x10(%rbx),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ab6b4:       mov    %rbx,%rdi
    0.00 :   5ab6b7:       lea    -0x3f(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ab6bb:       mov    %rax,0x80(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ab6c3:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
    0.00 :   5ab6c8:       lea    0x2e5029(%rip),%rdx        # 8906f8 <OrtValue::GetMutable<onnxruntime::Tensor>()::__PRETTY_FUNCTION__+0x38>
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ab6cf:       lea    0x38(%rbx),%rax
    0.00 :   5ab6d3:       movl   $0x5d,0xa0(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ab6de:       lea    0x28(%rbx),%rdi
    0.00 :   5ab6e2:       lea    -0x38(%rdx),%rsi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   5ab6e6:       mov    %rax,0xa8(%rsp)
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ab6ee:       callq  fc920 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
         :            _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :   5ab6f3:       mov    0x48(%rsp),%r14
    0.00 :   5ab6f8:       mov    0x40(%rsp),%r12
         :            : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   5ab6fd:       movq   $0x0,0xc8(%rsp)
    0.00 :   5ab709:       movq   $0x0,0xd0(%rsp)
    0.00 :   5ab715:       movq   $0x0,0xd8(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5ab721:       mov    %r14,%r13
    0.00 :   5ab724:       sub    %r12,%r13
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5ab727:       mov    %r13,%rax
    0.00 :   5ab72a:       sar    $0x5,%rax
    0.00 :   5ab72e:       je     5abf28 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1588>
         :            if (__n > this->max_size())
    0.00 :   5ab734:       movabs $0x7ffffffffffffff,%rdx
    0.00 :   5ab73e:       cmp    %rdx,%rax
    0.00 :   5ab741:       ja     5ac080 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x16e0>
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5ab747:       mov    %r13,%rdi
    0.00 :   5ab74a:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5ab74f:       mov    0x48(%rsp),%r14
    0.00 :   5ab754:       mov    0x40(%rsp),%r12
    0.00 :   5ab759:       mov    %rax,%r15
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ab75c:       add    %r15,%r13
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   5ab75f:       mov    %r15,0xc8(%rsp)
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   5ab767:       mov    %r13,0xd8(%rsp)
         :            _ForwardIterator __cur = __result;
    0.00 :   5ab76f:       mov    %r15,%r13
         :            this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :   5ab772:       mov    %r15,0xd0(%rsp)
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   5ab77a:       cmp    %r14,%r12
    0.00 :   5ab77d:       je     5ab7a9 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xe09>
    0.00 :   5ab77f:       nop
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ab780:       lea    0x10(%r13),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ab784:       mov    %r13,%rdi
         :            : allocator_type(std::move(__a)), _M_p(__dat) { }
    0.00 :   5ab787:       mov    %rax,0x0(%r13)
         :            { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
    0.00 :   5ab78b:       mov    (%r12),%rsi
    0.00 :   5ab78f:       mov    0x8(%r12),%rdx
    0.00 :   5ab794:       add    %rsi,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   5ab797:       callq  fd260 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    0.00 :   5ab79c:       add    $0x20,%r12
    0.00 :   5ab7a0:       add    $0x20,%r13
    0.00 :   5ab7a4:       cmp    %r12,%r14
    0.00 :   5ab7a7:       jne    5ab780 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xde0>
    0.00 :   5ab7a9:       mov    0x8(%rsp),%rdi
    0.00 :   5ab7ae:       mov    %rbp,%rcx
    0.00 :   5ab7b1:       lea    0x2e77bd(%rip),%rdx        # 892f75 <onnxruntime::MemPatternPlanner::TraceAllocation(int, unsigned long)::__PRETTY_FUNCTION__+0x175>
    0.00 :   5ab7b8:       mov    %rbx,%rsi
         :            this->_M_impl._M_finish =
    0.00 :   5ab7bb:       mov    %r13,0xd0(%rsp)
    0.00 :   5ab7c3:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5ab7c8:       mov    0xd0(%rsp),%r13
    0.00 :   5ab7d0:       mov    0xc8(%rsp),%r12
    0.00 :   5ab7d8:       cmp    %r12,%r13
    0.00 :   5ab7db:       je     5ab804 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xe64>
    0.00 :   5ab7dd:       nopl   (%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab7e0:       mov    (%r12),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab7e4:       lea    0x10(%r12),%rax
    0.00 :   5ab7e9:       cmp    %rax,%rdi
    0.00 :   5ab7ec:       je     5ab7f3 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xe53>
         :            ::operator delete(__p);
    0.00 :   5ab7ee:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ab7f3:       add    $0x20,%r12
    0.00 :   5ab7f7:       cmp    %r12,%r13
    0.00 :   5ab7fa:       jne    5ab7e0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xe40>
    0.00 :   5ab7fc:       mov    0xc8(%rsp),%r12
         :            if (__p)
    0.00 :   5ab804:       test   %r12,%r12
    0.00 :   5ab807:       je     5ab811 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xe71>
    0.00 :   5ab809:       mov    %r12,%rdi
    0.00 :   5ab80c:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab811:       mov    0xa8(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab819:       lea    0x38(%rbx),%rax
    0.00 :   5ab81d:       cmp    %rax,%rdi
    0.00 :   5ab820:       je     5ab827 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xe87>
    0.00 :   5ab822:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab827:       mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab82f:       add    $0x10,%rbx
    0.00 :   5ab833:       cmp    %rbx,%rdi
    0.00 :   5ab836:       je     5ab83d <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xe9d>
    0.00 :   5ab838:       callq  53300 <operator delete(void*)@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   5ab83d:       mov    0x48(%rsp),%r12
    0.00 :   5ab842:       mov    0x40(%rsp),%rbx
    0.00 :   5ab847:       cmp    %rbx,%r12
    0.00 :   5ab84a:       je     5ab86f <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xecf>
    0.00 :   5ab84c:       nopl   0x0(%rax)
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab850:       mov    (%rbx),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab853:       lea    0x10(%rbx),%rax
    0.00 :   5ab857:       cmp    %rax,%rdi
    0.00 :   5ab85a:       je     5ab861 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xec1>
    0.00 :   5ab85c:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ab861:       add    $0x20,%rbx
    0.00 :   5ab865:       cmp    %rbx,%r12
    0.00 :   5ab868:       jne    5ab850 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xeb0>
    0.00 :   5ab86a:       mov    0x40(%rsp),%rbx
         :            if (__p)
    0.00 :   5ab86f:       test   %rbx,%rbx
    0.00 :   5ab872:       je     5ab87c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xedc>
    0.00 :   5ab874:       mov    %rbx,%rdi
    0.00 :   5ab877:       callq  53300 <operator delete(void*)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ab87c:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ab881:       add    $0x10,%rbp
    0.00 :   5ab885:       cmp    %rbp,%rdi
    0.00 :   5ab888:       je     b1786 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x312>
    0.00 :   5ab88e:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ab893:       jmpq   b1786 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x312>
    0.00 :   5ab898:       nopl   0x0(%rax,%rax,1)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ab8a0:       mov    0xc(%rax),%ecx
         :            *__mem += __val;
    0.00 :   5ab8a3:       lea    -0x1(%rcx),%esi
    0.00 :   5ab8a6:       mov    %esi,0xc(%rax)
         :            return __result;
    0.00 :   5ab8a9:       jmpq   5ab2fc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x95c>
    0.00 :   5ab8ae:       xchg   %ax,%ax
         :            _Atomic_word __result = *__mem;
    0.00 :   5ab8b0:       mov    0xc(%rdx),%ecx
         :            *__mem += __val;
    0.00 :   5ab8b3:       lea    -0x1(%rcx),%edi
    0.00 :   5ab8b6:       mov    %edi,0xc(%rdx)
         :            return __result;
    0.00 :   5ab8b9:       jmpq   5ab389 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x9e9>
    0.00 :   5ab8be:       xchg   %ax,%ax
         :            _M_erase_at_end(this->_M_impl._M_start + __new_size);
    0.00 :   5ab8c0:       lea    (%rsi,%rsi,4),%rdx
    0.00 :   5ab8c4:       lea    (%rdi,%rdx,8),%rsi
    0.00 :   5ab8c8:       mov    %rsi,0x18(%rsp)
         :            // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         :            // _M_assign_aux.
         :            void
         :            _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
         :            {
         :            if (size_type __n = this->_M_impl._M_finish - __pos)
    0.00 :   5ab8cd:       cmp    %rsi,%rbp
    0.00 :   5ab8d0:       je     5aaa68 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xc8>
    0.00 :   5ab8d6:       mov    %rsi,%r14
    0.00 :   5ab8d9:       jmp    5ab921 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf81>
    0.00 :   5ab8db:       nopl   0x0(%rax,%rax,1)
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab8e0:       mov    $0xffffffff,%edx
    0.00 :   5ab8e5:       lock xadd %edx,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab8ea:       cmp    $0x1,%edx
    0.00 :   5ab8ed:       je     5ab944 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xfa4>
    0.00 :   5ab8ef:       nop
         :            if (_M_pi != nullptr)
    0.00 :   5ab8f0:       mov    0x8(%r14),%rax
    0.00 :   5ab8f4:       test   %rax,%rax
    0.00 :   5ab8f7:       je     5ab914 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf74>
         :            if (__gthread_active_p())
    0.00 :   5ab8f9:       mov    0x67c608(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab900:       test   %r12,%r12
    0.00 :   5ab903:       je     5ab980 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xfe0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab905:       mov    $0xffffffff,%edx
    0.00 :   5ab90a:       lock xadd %edx,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab90f:       cmp    $0x1,%edx
    0.00 :   5ab912:       je     5ab98e <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xfee>
    0.00 :   5ab914:       add    $0x28,%r14
    0.00 :   5ab918:       cmp    %r14,%rbp
    0.00 :   5ab91b:       je     5ab9d8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1038>
         :            if (_M_pi != nullptr)
    0.00 :   5ab921:       mov    0x20(%r14),%rax
    0.00 :   5ab925:       test   %rax,%rax
    0.00 :   5ab928:       je     5ab8f0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf50>
         :            if (__gthread_active_p())
    0.00 :   5ab92a:       mov    0x67c5d7(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5ab931:       test   %r12,%r12
    0.00 :   5ab934:       jne    5ab8e0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf40>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ab936:       mov    0x8(%rax),%edx
         :            *__mem += __val;
    0.00 :   5ab939:       lea    -0x1(%rdx),%esi
    0.00 :   5ab93c:       mov    %esi,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab93f:       cmp    $0x1,%edx
    0.00 :   5ab942:       jne    5ab8f0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf50>
         :            _M_dispose();
    0.00 :   5ab944:       mov    (%rax),%rdx
    0.00 :   5ab947:       mov    %rax,%rdi
    0.00 :   5ab94a:       mov    %rax,0x10(%rsp)
    0.00 :   5ab94f:       callq  *0x10(%rdx)
         :            if (__gthread_active_p())
    0.00 :   5ab952:       test   %r12,%r12
    0.00 :   5ab955:       mov    0x10(%rsp),%rax
    0.00 :   5ab95a:       je     5aba77 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x10d7>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab960:       mov    $0xffffffff,%edx
    0.00 :   5ab965:       lock xadd %edx,0xc(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ab96a:       cmp    $0x1,%edx
    0.00 :   5ab96d:       jne    5ab8f0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf50>
         :            _M_destroy();
    0.00 :   5ab96f:       mov    (%rax),%rdx
    0.00 :   5ab972:       mov    %rax,%rdi
    0.00 :   5ab975:       callq  *0x18(%rdx)
    0.00 :   5ab978:       jmpq   5ab8f0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf50>
    0.00 :   5ab97d:       nopl   (%rax)
         :            _Atomic_word __result = *__mem;
    0.00 :   5ab980:       mov    0x8(%rax),%edx
         :            *__mem += __val;
    0.00 :   5ab983:       lea    -0x1(%rdx),%esi
    0.00 :   5ab986:       mov    %esi,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5ab989:       cmp    $0x1,%edx
    0.00 :   5ab98c:       jne    5ab914 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf74>
         :            _M_dispose();
    0.00 :   5ab98e:       mov    (%rax),%rdx
    0.00 :   5ab991:       mov    %rax,%rdi
    0.00 :   5ab994:       mov    %rax,0x10(%rsp)
    0.00 :   5ab999:       callq  *0x10(%rdx)
         :            if (__gthread_active_p())
    0.00 :   5ab99c:       test   %r12,%r12
    0.00 :   5ab99f:       mov    0x10(%rsp),%rax
    0.00 :   5ab9a4:       je     5aba85 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x10e5>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ab9aa:       mov    $0xffffffff,%edx
    0.00 :   5ab9af:       lock xadd %edx,0xc(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ab9b4:       cmp    $0x1,%edx
    0.00 :   5ab9b7:       jne    5ab914 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf74>
         :            _M_destroy();
    0.00 :   5ab9bd:       mov    (%rax),%rdx
    0.00 :   5ab9c0:       add    $0x28,%r14
    0.00 :   5ab9c4:       mov    %rax,%rdi
    0.00 :   5ab9c7:       callq  *0x18(%rdx)
    0.00 :   5ab9ca:       cmp    %r14,%rbp
    0.00 :   5ab9cd:       jne    5ab921 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xf81>
    0.00 :   5ab9d3:       nopl   0x0(%rax,%rax,1)
         :            {
         :            std::_Destroy(__pos, this->_M_impl._M_finish,
         :            _M_get_Tp_allocator());
         :            this->_M_impl._M_finish = __pos;
    0.00 :   5ab9d8:       mov    0x18(%rsp),%rax
    0.00 :   5ab9dd:       mov    %rax,0x18(%rbx)
    0.00 :   5ab9e1:       mov    0x8(%r15),%rcx
    0.00 :   5ab9e5:       mov    (%r15),%rax
    0.00 :   5ab9e8:       jmpq   5aaa68 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xc8>
    0.00 :   5ab9ed:       nopl   (%rax)
         :            _M_default_append(__new_size - size());
    0.00 :   5ab9f0:       sub    %rdx,%rsi
    0.00 :   5ab9f3:       lea    0x10(%rbx),%rdi
    0.00 :   5ab9f7:       callq  550030 <std::vector<OrtValue, std::allocator<OrtValue> >::_M_default_append(unsigned long)>
    0.00 :   5ab9fc:       mov    0x8(%r15),%rcx
    0.00 :   5aba00:       mov    (%r15),%rax
    0.00 :   5aba03:       jmpq   5aaa68 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xc8>
    0.00 :   5aba08:       nopl   0x0(%rax,%rax,1)
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5aba10:       sub    %rcx,%r8
    0.00 :   5aba13:       xor    %edx,%edx
    0.00 :   5aba15:       xor    %esi,%esi
    0.00 :   5aba17:       mov    %rbp,%rdi
    0.00 :   5aba1a:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   5aba1f:       jmpq   5aae0b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x46b>
    0.00 :   5aba24:       nopl   0x0(%rax)
         :            { *__mem += __val; }
    0.00 :   5aba28:       addl   $0x1,0x8(%rax)
         :            if (_M_pi != 0)
    0.00 :   5aba2c:       test   %r15,%r15
    0.00 :   5aba2f:       jne    5ab0d1 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x731>
    0.00 :   5aba35:       jmpq   5ab0f5 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x755>
    0.00 :   5aba3a:       nopw   0x0(%rax,%rax,1)
    0.00 :   5aba40:       addl   $0x1,0x8(%rax)
    0.00 :   5aba44:       test   %r15,%r15
    0.00 :   5aba47:       jne    5ab137 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x797>
    0.00 :   5aba4d:       jmpq   5ab15b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7bb>
    0.00 :   5aba52:       nopw   0x0(%rax,%rax,1)
         :            __out.setstate(ios_base::badbit);
    0.00 :   5aba58:       mov    0x80(%rsp),%rax
    0.00 :   5aba60:       mov    -0x18(%rax),%rdi
    0.00 :   5aba64:       add    %rbx,%rdi
         :            operator&(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
         :
         :            inline _GLIBCXX_CONSTEXPR _Ios_Iostate
         :            operator|(_Ios_Iostate __a, _Ios_Iostate __b)
         :            { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
    0.00 :   5aba67:       mov    0x20(%rdi),%esi
    0.00 :   5aba6a:       or     $0x1,%esi
         :            { this->clear(this->rdstate() | __state); }
    0.00 :   5aba6d:       callq  53b90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   5aba72:       jmpq   5aadb3 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x413>
         :            _Atomic_word __result = *__mem;
    0.00 :   5aba77:       mov    0xc(%rax),%edx
         :            *__mem += __val;
    0.00 :   5aba7a:       lea    -0x1(%rdx),%ecx
    0.00 :   5aba7d:       mov    %ecx,0xc(%rax)
         :            return __result;
    0.00 :   5aba80:       jmpq   5ab96a <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xfca>
         :            _Atomic_word __result = *__mem;
    0.00 :   5aba85:       mov    0xc(%rax),%edx
         :            *__mem += __val;
    0.00 :   5aba88:       lea    -0x1(%rdx),%ecx
    0.00 :   5aba8b:       mov    %ecx,0xc(%rax)
         :            return __result;
    0.00 :   5aba8e:       jmpq   5ab9b4 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1014>
         :            _M_dispose();
    0.00 :   5aba93:       mov    (%r15),%rdx
    0.00 :   5aba96:       mov    %rax,0x18(%rsp)
    0.00 :   5aba9b:       mov    %r15,%rdi
    0.00 :   5aba9e:       callq  *0x10(%rdx)
         :            if (__gthread_active_p())
    0.00 :   5abaa1:       test   %r12,%r12
    0.00 :   5abaa4:       mov    0x18(%rsp),%rax
    0.00 :   5abaa9:       je     5abf30 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1590>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abaaf:       mov    $0xffffffff,%edx
    0.00 :   5abab4:       lock xadd %edx,0xc(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ababa:       cmp    $0x1,%edx
    0.00 :   5ababd:       jne    5ab0f5 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x755>
         :            _M_destroy();
    0.00 :   5abac3:       mov    (%r15),%rdx
    0.00 :   5abac6:       mov    %rax,0x18(%rsp)
    0.00 :   5abacb:       mov    %r15,%rdi
    0.00 :   5abace:       callq  *0x18(%rdx)
    0.00 :   5abad1:       mov    0x18(%rsp),%rax
    0.00 :   5abad6:       jmpq   5ab0f5 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x755>
         :            _M_dispose();
    0.00 :   5abadb:       mov    (%r15),%rdx
    0.00 :   5abade:       mov    %rax,0x18(%rsp)
    0.00 :   5abae3:       mov    %r15,%rdi
    0.00 :   5abae6:       callq  *0x10(%rdx)
         :            if (__gthread_active_p())
    0.00 :   5abae9:       test   %r12,%r12
    0.00 :   5abaec:       mov    0x18(%rsp),%rax
    0.00 :   5abaf1:       je     5abf40 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x15a0>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abaf7:       mov    $0xffffffff,%edx
    0.00 :   5abafc:       lock xadd %edx,0xc(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5abb02:       cmp    $0x1,%edx
    0.00 :   5abb05:       jne    5ab15b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7bb>
         :            _M_destroy();
    0.00 :   5abb0b:       mov    (%r15),%rdx
    0.00 :   5abb0e:       mov    %rax,0x18(%rsp)
    0.00 :   5abb13:       mov    %r15,%rdi
    0.00 :   5abb16:       callq  *0x18(%rdx)
    0.00 :   5abb19:       mov    0x18(%rsp),%rax
    0.00 :   5abb1e:       jmpq   5ab15b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7bb>
    0.00 :   5abb23:       mov    (%r14),%rcx
    0.00 :   5abb26:       mov    0x18(%rsp),%rdx
    0.00 :   5abb2b:       mov    %rbx,%rsi
    0.00 :   5abb2e:       mov    (%rsp),%rdi
    0.00 :   5abb32:       callq  *%r12
    0.00 :   5abb35:       cmpq   $0x0,0x30(%rsp)
    0.00 :   5abb3b:       je     5ab15f <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7bf>
    0.00 :   5abb41:       mov    (%rsp),%r15
    0.00 :   5abb45:       mov    $0xa8,%r8d
    0.00 :   5abb4b:       lea    0x2e4ba7(%rip),%rcx        # 8906f9 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)::__FUNCTION__>
    0.00 :   5abb52:       xor    %edi,%edi
    0.00 :   5abb54:       lea    0x2e3edd(%rip),%rdx        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5abb5b:       mov    %r15,%rsi
    0.00 :   5abb5e:       callq  6a6eb0 <onnxruntime::LogRuntimeError(unsigned int, onnxruntime::common::Status const&, char const*, char const*, unsigned int)>
    0.00 :   5abb63:       mov    $0xa0,%edi
    0.00 :   5abb68:       lea    0x80(%rsp),%rbx
    0.00 :   5abb70:       lea    0x60(%rsp),%rbp
    0.00 :   5abb75:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5abb7a:       mov    $0x10,%esi
    0.00 :   5abb7f:       mov    %rbx,%rdi
    0.00 :   5abb82:       mov    %rax,%r12
    0.00 :   5abb85:       callq  531a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@plt>
    0.00 :   5abb8a:       mov    %r15,%rsi
    0.00 :   5abb8d:       mov    %rbp,%rdi
    0.00 :   5abb90:       callq  697020 <onnxruntime::common::Status::ToString[abi:cxx11]() const>
         :            operator<<(basic_ostream<_CharT, _Traits>& __os,
         :            const basic_string<_CharT, _Traits, _Alloc>& __str)
         :            {
         :            // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :            // 586. string inserter not a formatted function
         :            return __ostream_insert(__os, __str.data(), __str.size());
    0.00 :   5abb95:       mov    0x68(%rsp),%rdx
    0.00 :   5abb9a:       mov    0x60(%rsp),%rsi
    0.00 :   5abb9f:       mov    %rbx,%rdi
    0.00 :   5abba2:       callq  534a0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5abba7:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5abbac:       lea    0x10(%rbp),%rax
    0.00 :   5abbb0:       cmp    %rax,%rdi
    0.00 :   5abbb3:       je     5abbba <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x121a>
    0.00 :   5abbb5:       callq  53300 <operator delete(void*)@plt>
         :            *  @brief  Copying out the string buffer.
         :            *  @return  @c rdbuf()->str()
         :            */
         :            __string_type
         :            str() const
         :            { return _M_stringbuf.str(); }
    0.00 :   5abbba:       lea    0x8(%rbx),%rsi
    0.00 :   5abbbe:       mov    %rbp,%rdi
    0.00 :   5abbc1:       callq  53a30 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    0.00 :   5abbc6:       mov    %rbx,%rdi
    0.00 :   5abbc9:       callq  52a00 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    0.00 :   5abbce:       lea    0x40(%rsp),%rax
    0.00 :   5abbd3:       mov    %rax,%rdi
    0.00 :   5abbd6:       mov    %rax,(%rsp)
    0.00 :   5abbda:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5abbdf:       mov    (%rsp),%r15
    0.00 :   5abbe3:       mov    $0xa8,%edx
    0.00 :   5abbe8:       mov    %rbx,%rdi
    0.00 :   5abbeb:       lea    0x2e4b0e(%rip),%rcx        # 890700 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)::__PRETTY_FUNCTION__>
    0.00 :   5abbf2:       lea    0x2e3e3f(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5abbf9:       mov    %r15,%r8
    0.00 :   5abbfc:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5abc01:       mov    %rbp,%rcx
    0.00 :   5abc04:       xor    %edx,%edx
    0.00 :   5abc06:       mov    %rbx,%rsi
    0.00 :   5abc09:       mov    %r12,%rdi
    0.00 :   5abc0c:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5abc11:       mov    %rbx,%rdi
    0.00 :   5abc14:       add    $0x10,%rbp
    0.00 :   5abc18:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5abc1d:       mov    %r15,%rdi
    0.00 :   5abc20:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5abc25:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5abc2a:       cmp    %rbp,%rdi
    0.00 :   5abc2d:       je     b1666 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x1f2>
    0.00 :   5abc33:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5abc38:       jmpq   b1666 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x1f2>
    0.00 :   5abc3d:       nopl   (%rax)
    0.00 :   5abc40:       mov    0x18(%rsp),%r15
    0.00 :   5abc45:       mov    (%rsp),%rdi
    0.00 :   5abc49:       mov    %rbx,%rsi
    0.00 :   5abc4c:       lea    0x38(%r15),%rdx
    0.00 :   5abc50:       callq  5a8a30 <onnxruntime::IExecutionFrame::GetAllocator(OrtMemoryInfo const&) const>
    0.00 :   5abc55:       mov    %r15,%rax
    0.00 :   5abc58:       lea    0x18(%r15),%r15
    0.00 :   5abc5c:       mov    0x30(%rax),%r12
         :            __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
         :            element_type* __p) noexcept
         :            : _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
         :            { }
         :
         :            __shared_ptr(const __shared_ptr&) noexcept = default;
    0.00 :   5abc60:       mov    0x30(%rsp),%rax
    0.00 :   5abc65:       mov    %rax,0x40(%rsp)
         :            : _M_pi(__r._M_pi)
    0.00 :   5abc6a:       mov    0x38(%rsp),%rax
    0.00 :   5abc6f:       mov    %rax,0x48(%rsp)
         :            if (_M_pi != 0)
    0.00 :   5abc74:       test   %rax,%rax
    0.00 :   5abc77:       je     5abc8c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x12ec>
         :            if (__gthread_active_p())
    0.00 :   5abc79:       cmpq   $0x0,0x67c287(%rip)        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5abc81:       je     5abf50 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x15b0>
         :            { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abc87:       lock addl $0x1,0x8(%rax)
    0.00 :   5abc8c:       mov    $0x58,%edi
    0.00 :   5abc91:       callq  53340 <operator new(unsigned long)@plt>
    0.00 :   5abc96:       mov    0x10(%rsp),%rcx
    0.00 :   5abc9b:       mov    %r15,%rdx
    0.00 :   5abc9e:       mov    %r12,%rsi
    0.00 :   5abca1:       mov    %rax,%rdi
    0.00 :   5abca4:       mov    %rax,0x20(%rsp)
    0.00 :   5abca9:       callq  5ee4f0 <onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&, std::shared_ptr<onnxruntime::IAllocator>)>
         :            if (_M_pi != nullptr)
    0.00 :   5abcae:       mov    0x48(%rsp),%r15
    0.00 :   5abcb3:       test   %r15,%r15
    0.00 :   5abcb6:       je     5abcdc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x133c>
         :            if (__gthread_active_p())
    0.00 :   5abcb8:       mov    0x67c249(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5abcbf:       test   %r12,%r12
    0.00 :   5abcc2:       je     5abf93 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x15f3>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abcc8:       mov    $0xffffffff,%eax
    0.00 :   5abccd:       lock xadd %eax,0x8(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5abcd3:       cmp    $0x1,%eax
    0.00 :   5abcd6:       je     5ac02a <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x168a>
    0.00 :   5abcdc:       callq  59bf30 <onnxruntime::DataTypeImpl const* onnxruntime::DataTypeImpl::GetType<onnxruntime::Tensor>()>
    0.00 :   5abce1:       mov    %rax,%r15
    0.00 :   5abce4:       mov    (%rax),%rax
    0.00 :   5abce7:       mov    %r15,%rdi
    0.00 :   5abcea:       callq  *0x20(%rax)
         :            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :   5abced:       mov    $0x20,%edi
    0.00 :   5abcf2:       mov    %rax,%r12
    0.00 :   5abcf5:       callq  53340 <operator new(unsigned long)@plt>
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5abcfa:       movabs $0x100000001,%rcx
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5abd04:       lea    0x665aa5(%rip),%rdx        # c117b0 <vtable for std::_Sp_counted_deleter<void*, void (*)(void*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>>
         :            explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
    0.00 :   5abd0b:       mov    %r12,0x10(%rax)
         :            : _M_use_count(1), _M_weak_count(1) { }
    0.00 :   5abd0f:       mov    %rcx,0x8(%rax)
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5abd13:       mov    0x20(%rsp),%rcx
         :            : _M_impl(__p, std::move(__d), __a) { }
    0.00 :   5abd18:       add    $0x10,%rdx
    0.00 :   5abd1c:       mov    %rdx,(%rax)
         :            : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
    0.00 :   5abd1f:       mov    %rcx,0x18(%rax)
         :            _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    0.00 :   5abd23:       mov    0x8(%r14),%rdx
         :            // concept requirements
         :            __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :            _Tp __tmp = _GLIBCXX_MOVE(__a);
         :            __a = _GLIBCXX_MOVE(__b);
         :            __b = _GLIBCXX_MOVE(__tmp);
    0.00 :   5abd27:       mov    %rcx,(%r14)
         :            __r._M_pi = _M_pi;
    0.00 :   5abd2a:       mov    %rax,0x8(%r14)
         :            if (_M_pi != nullptr)
    0.00 :   5abd2e:       test   %rdx,%rdx
    0.00 :   5abd31:       je     5abd56 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x13b6>
         :            if (__gthread_active_p())
    0.00 :   5abd33:       mov    0x67c1ce(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5abd3a:       test   %r12,%r12
    0.00 :   5abd3d:       je     5abf85 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x15e5>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abd43:       mov    $0xffffffff,%eax
    0.00 :   5abd48:       lock xadd %eax,0x8(%rdx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5abd4d:       cmp    $0x1,%eax
    0.00 :   5abd50:       je     5abff1 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1651>
         :            if (_M_pi != nullptr)
    0.00 :   5abd56:       mov    0x38(%rsp),%rax
    0.00 :   5abd5b:       mov    %r15,0x10(%r14)
    0.00 :   5abd5f:       test   %rax,%rax
    0.00 :   5abd62:       je     5ab3ec <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xa4c>
         :            if (__gthread_active_p())
    0.00 :   5abd68:       mov    0x67c199(%rip),%r12        # c27f08 <__pthread_key_create@GLIBC_2.2.5>
    0.00 :   5abd6f:       test   %r12,%r12
    0.00 :   5abd72:       je     5abf77 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x15d7>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abd78:       mov    $0xffffffff,%edx
    0.00 :   5abd7d:       lock xadd %edx,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5abd82:       cmp    $0x1,%edx
    0.00 :   5abd85:       je     5abfb4 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1614>
    0.00 :   5abd8b:       mov    0x10(%r14),%r15
    0.00 :   5abd8f:       test   %r15,%r15
    0.00 :   5abd92:       je     5ab404 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xa64>
    0.00 :   5abd98:       jmpq   5ab3ec <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xa4c>
    0.00 :   5abd9d:       nopl   (%rax)
    0.00 :   5abda0:       mov    0x80(%rsp),%rax
    0.00 :   5abda8:       mov    -0x18(%rax),%rdi
    0.00 :   5abdac:       add    %rbx,%rdi
    0.00 :   5abdaf:       mov    0x20(%rdi),%esi
    0.00 :   5abdb2:       or     $0x1,%esi
    0.00 :   5abdb5:       callq  53b90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   5abdba:       jmpq   5ab5bd <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xc1d>
    0.00 :   5abdbf:       nop
         :            { *__mem += __val; }
    0.00 :   5abdc0:       addl   $0x1,0x8(%rax)
    0.00 :   5abdc4:       jmpq   5ab20d <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x86d>
    0.00 :   5abdc9:       nopl   0x0(%rax)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   5abdd0:       xor    %r15d,%r15d
    0.00 :   5abdd3:       jmpq   5aaf52 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x5b2>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abdd8:       mov    0x8(%r15),%edx
         :            *__mem += __val;
    0.00 :   5abddc:       lea    -0x1(%rdx),%esi
    0.00 :   5abddf:       mov    %esi,0x8(%r15)
         :            return __result;
    0.00 :   5abde3:       jmpq   5ab0ec <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x74c>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abde8:       mov    0x8(%r15),%edx
         :            *__mem += __val;
    0.00 :   5abdec:       lea    -0x1(%rdx),%esi
    0.00 :   5abdef:       mov    %esi,0x8(%r15)
         :            return __result;
    0.00 :   5abdf3:       jmpq   5ab152 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x7b2>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abdf8:       mov    0x8(%r15),%edx
         :            *__mem += __val;
    0.00 :   5abdfc:       lea    -0x1(%rdx),%edi
    0.00 :   5abdff:       mov    %edi,0x8(%r15)
    0.00 :   5abe03:       cmp    $0x1,%edx
    0.00 :   5abe06:       jne    5ab240 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x8a0>
         :            _M_dispose();
    0.00 :   5abe0c:       mov    (%r15),%rdx
    0.00 :   5abe0f:       mov    %rsi,0x10(%rsp)
    0.00 :   5abe14:       mov    %r15,%rdi
    0.00 :   5abe17:       mov    %rax,(%rsp)
    0.00 :   5abe1b:       callq  *0x10(%rdx)
         :            if (__gthread_active_p())
    0.00 :   5abe1e:       test   %r12,%r12
    0.00 :   5abe21:       mov    (%rsp),%rax
    0.00 :   5abe25:       mov    0x10(%rsp),%rsi
    0.00 :   5abe2a:       je     5abf59 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x15b9>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abe30:       mov    $0xffffffff,%edx
    0.00 :   5abe35:       lock xadd %edx,0xc(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5abe3b:       cmp    $0x1,%edx
    0.00 :   5abe3e:       jne    5ab240 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x8a0>
         :            _M_destroy();
    0.00 :   5abe44:       mov    (%r15),%rdx
    0.00 :   5abe47:       mov    %rsi,0x10(%rsp)
    0.00 :   5abe4c:       mov    %r15,%rdi
    0.00 :   5abe4f:       mov    %rax,(%rsp)
    0.00 :   5abe53:       callq  *0x18(%rdx)
    0.00 :   5abe56:       mov    0x10(%rsp),%rsi
    0.00 :   5abe5b:       mov    (%rsp),%rax
    0.00 :   5abe5f:       jmpq   5ab240 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x8a0>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abe64:       mov    0x8(%rax),%edi
         :            *__mem += __val;
    0.00 :   5abe67:       lea    -0x1(%rdi),%r8d
    0.00 :   5abe6b:       mov    %r8d,0x8(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
    0.00 :   5abe6f:       cmp    $0x1,%edi
    0.00 :   5abe72:       jne    5ab1d0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x830>
         :            _M_dispose();
    0.00 :   5abe78:       mov    (%rax),%r8
    0.00 :   5abe7b:       mov    %rsi,0x18(%rsp)
    0.00 :   5abe80:       mov    %rax,%rdi
    0.00 :   5abe83:       mov    %rdx,0x10(%rsp)
    0.00 :   5abe88:       mov    %rax,(%rsp)
    0.00 :   5abe8c:       callq  *0x10(%r8)
         :            if (__gthread_active_p())
    0.00 :   5abe90:       test   %r12,%r12
    0.00 :   5abe93:       mov    (%rsp),%rax
    0.00 :   5abe97:       mov    0x10(%rsp),%rdx
    0.00 :   5abe9c:       mov    0x18(%rsp),%rsi
    0.00 :   5abea1:       je     5abf69 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x15c9>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abea7:       mov    $0xffffffff,%ecx
    0.00 :   5abeac:       lock xadd %ecx,0xc(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5abeb1:       cmp    $0x1,%ecx
    0.00 :   5abeb4:       jne    5ab1d0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x830>
         :            _M_destroy();
    0.00 :   5abeba:       mov    (%rax),%rcx
    0.00 :   5abebd:       mov    %rsi,0x10(%rsp)
    0.00 :   5abec2:       mov    %rax,%rdi
    0.00 :   5abec5:       mov    %rdx,(%rsp)
    0.00 :   5abec9:       callq  *0x18(%rcx)
    0.00 :   5abecc:       mov    0x10(%rsp),%rsi
    0.00 :   5abed1:       mov    (%rsp),%rdx
    0.00 :   5abed5:       jmpq   5ab1d0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x830>
    0.00 :   5abeda:       mov    0x1f8(%rsp),%rax
    0.00 :   5abee2:       xor    %fs:0x28,%rax
    0.00 :   5abeeb:       jne    5ac085 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x16e5>
    0.00 :   5abef1:       add    $0x208,%rsp
    0.00 :   5abef8:       pop    %rbx
    0.00 :   5abef9:       pop    %rbp
    0.00 :   5abefa:       pop    %r12
    0.00 :   5abefc:       pop    %r13
    0.00 :   5abefe:       pop    %r14
    0.00 :   5abf00:       pop    %r15
    0.00 :   5abf02:       retq
         :            this->_M_assign(__str);
    0.00 :   5abf03:       lea    0x50(%rbx),%rsi
    0.00 :   5abf07:       mov    %rbp,%rdi
    0.00 :   5abf0a:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5abf0f:       jmpq   5aae0b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x46b>
         :            _M_limit(__pos, __n1), __s, __n2);
    0.00 :   5abf14:       sub    %rcx,%r8
    0.00 :   5abf17:       xor    %edx,%edx
    0.00 :   5abf19:       xor    %esi,%esi
    0.00 :   5abf1b:       mov    %rbp,%rdi
    0.00 :   5abf1e:       callq  539a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    0.00 :   5abf23:       jmpq   5ab615 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xc75>
    0.00 :   5abf28:       xor    %r15d,%r15d
    0.00 :   5abf2b:       jmpq   5ab75c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xdbc>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abf30:       mov    0xc(%r15),%edx
         :            *__mem += __val;
    0.00 :   5abf34:       lea    -0x1(%rdx),%ecx
    0.00 :   5abf37:       mov    %ecx,0xc(%r15)
         :            return __result;
    0.00 :   5abf3b:       jmpq   5ababa <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x111a>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abf40:       mov    0xc(%r15),%edx
         :            *__mem += __val;
    0.00 :   5abf44:       lea    -0x1(%rdx),%ecx
    0.00 :   5abf47:       mov    %ecx,0xc(%r15)
         :            return __result;
    0.00 :   5abf4b:       jmpq   5abb02 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1162>
         :            { *__mem += __val; }
    0.00 :   5abf50:       addl   $0x1,0x8(%rax)
    0.00 :   5abf54:       jmpq   5abc8c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x12ec>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abf59:       mov    0xc(%r15),%edx
         :            *__mem += __val;
    0.00 :   5abf5d:       lea    -0x1(%rdx),%ecx
    0.00 :   5abf60:       mov    %ecx,0xc(%r15)
         :            return __result;
    0.00 :   5abf64:       jmpq   5abe3b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x149b>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abf69:       mov    0xc(%rax),%ecx
         :            *__mem += __val;
    0.00 :   5abf6c:       lea    -0x1(%rcx),%edi
    0.00 :   5abf6f:       mov    %edi,0xc(%rax)
         :            return __result;
    0.00 :   5abf72:       jmpq   5abeb1 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1511>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abf77:       mov    0x8(%rax),%edx
         :            *__mem += __val;
    0.00 :   5abf7a:       lea    -0x1(%rdx),%esi
    0.00 :   5abf7d:       mov    %esi,0x8(%rax)
         :            return __result;
    0.00 :   5abf80:       jmpq   5abd82 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x13e2>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abf85:       mov    0x8(%rdx),%eax
         :            *__mem += __val;
    0.00 :   5abf88:       lea    -0x1(%rax),%esi
    0.00 :   5abf8b:       mov    %esi,0x8(%rdx)
         :            return __result;
    0.00 :   5abf8e:       jmpq   5abd4d <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x13ad>
         :            _Atomic_word __result = *__mem;
    0.00 :   5abf93:       mov    0x8(%r15),%eax
         :            *__mem += __val;
    0.00 :   5abf97:       lea    -0x1(%rax),%edx
    0.00 :   5abf9a:       mov    %edx,0x8(%r15)
         :            return __result;
    0.00 :   5abf9e:       jmpq   5abcd3 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1333>
         :            this->_M_assign(__str);
    0.00 :   5abfa3:       lea    0x50(%rbx),%rsi
    0.00 :   5abfa7:       mov    %rbp,%rdi
    0.00 :   5abfaa:       callq  52d90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    0.00 :   5abfaf:       jmpq   5ab615 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0xc75>
         :            _M_dispose();
    0.00 :   5abfb4:       mov    (%rax),%rdx
    0.00 :   5abfb7:       mov    %rax,%rdi
    0.00 :   5abfba:       mov    %rax,0x20(%rsp)
    0.00 :   5abfbf:       callq  *0x10(%rdx)
         :            if (__gthread_active_p())
    0.00 :   5abfc2:       test   %r12,%r12
    0.00 :   5abfc5:       mov    0x20(%rsp),%rax
    0.00 :   5abfca:       je     5ac05a <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x16ba>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5abfd0:       mov    $0xffffffff,%edx
    0.00 :   5abfd5:       lock xadd %edx,0xc(%rax)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5abfda:       cmp    $0x1,%edx
    0.00 :   5abfdd:       jne    5abd8b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x13eb>
         :            _M_destroy();
    0.00 :   5abfe3:       mov    (%rax),%rdx
    0.00 :   5abfe6:       mov    %rax,%rdi
    0.00 :   5abfe9:       callq  *0x18(%rdx)
    0.00 :   5abfec:       jmpq   5abd8b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x13eb>
         :            _M_dispose();
    0.00 :   5abff1:       mov    (%rdx),%rax
    0.00 :   5abff4:       mov    %rdx,%rdi
    0.00 :   5abff7:       mov    %rdx,0x20(%rsp)
    0.00 :   5abffc:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5abfff:       test   %r12,%r12
    0.00 :   5ac002:       mov    0x20(%rsp),%rdx
    0.00 :   5ac007:       je     5ac068 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x16c8>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ac009:       mov    $0xffffffff,%eax
    0.00 :   5ac00e:       lock xadd %eax,0xc(%rdx)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ac013:       cmp    $0x1,%eax
    0.00 :   5ac016:       jne    5abd56 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x13b6>
         :            _M_destroy();
    0.00 :   5ac01c:       mov    (%rdx),%rax
    0.00 :   5ac01f:       mov    %rdx,%rdi
    0.00 :   5ac022:       callq  *0x18(%rax)
    0.00 :   5ac025:       jmpq   5abd56 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x13b6>
         :            _M_dispose();
    0.00 :   5ac02a:       mov    (%r15),%rax
    0.00 :   5ac02d:       mov    %r15,%rdi
    0.00 :   5ac030:       callq  *0x10(%rax)
         :            if (__gthread_active_p())
    0.00 :   5ac033:       test   %r12,%r12
    0.00 :   5ac036:       je     5ac073 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x16d3>
         :            { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    0.00 :   5ac038:       mov    $0xffffffff,%eax
    0.00 :   5ac03d:       lock xadd %eax,0xc(%r15)
         :            if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
    0.00 :   5ac043:       cmp    $0x1,%eax
    0.00 :   5ac046:       jne    5abcdc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x133c>
         :            _M_destroy();
    0.00 :   5ac04c:       mov    (%r15),%rax
    0.00 :   5ac04f:       mov    %r15,%rdi
    0.00 :   5ac052:       callq  *0x18(%rax)
    0.00 :   5ac055:       jmpq   5abcdc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x133c>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ac05a:       mov    0xc(%rax),%edx
         :            *__mem += __val;
    0.00 :   5ac05d:       lea    -0x1(%rdx),%ecx
    0.00 :   5ac060:       mov    %ecx,0xc(%rax)
         :            return __result;
    0.00 :   5ac063:       jmpq   5abfda <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x163a>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ac068:       mov    0xc(%rdx),%eax
         :            *__mem += __val;
    0.00 :   5ac06b:       lea    -0x1(%rax),%ecx
    0.00 :   5ac06e:       mov    %ecx,0xc(%rdx)
         :            return __result;
    0.00 :   5ac071:       jmp    5ac013 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x1673>
         :            _Atomic_word __result = *__mem;
    0.00 :   5ac073:       mov    0xc(%r15),%eax
         :            *__mem += __val;
    0.00 :   5ac077:       lea    -0x1(%rax),%edx
    0.00 :   5ac07a:       mov    %edx,0xc(%r15)
         :            return __result;
    0.00 :   5ac07e:       jmp    5ac043 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)+0x16a3>
         :            std::__throw_bad_alloc();
    0.00 :   5ac080:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5ac085:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5ac08a:       mov    $0xa0,%edi
    0.00 :   5ac08f:       lea    0x60(%rsp),%rbp
    0.00 :   5ac094:       lea    0x40(%rsp),%r15
    0.00 :   5ac099:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5ac09e:       mov    %rbp,%rdi
    0.00 :   5ac0a1:       mov    %rax,%r12
    0.00 :   5ac0a4:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5ac0a9:       mov    %r15,%rdi
    0.00 :   5ac0ac:       mov    %r15,(%rsp)
    0.00 :   5ac0b0:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ac0b5:       lea    0x80(%rsp),%rbx
    0.00 :   5ac0bd:       mov    %r15,%r8
    0.00 :   5ac0c0:       lea    0x2e4639(%rip),%rcx        # 890700 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)::__PRETTY_FUNCTION__>
    0.00 :   5ac0c7:       mov    $0x75,%edx
    0.00 :   5ac0cc:       lea    0x2e3965(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5ac0d3:       mov    %rbx,%rdi
    0.00 :   5ac0d6:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5ac0db:       mov    %rbp,%rcx
    0.00 :   5ac0de:       lea    0x2e3b43(%rip),%rdx        # 88fc28 <std::piecewise_construct+0x34b>
    0.00 :   5ac0e5:       mov    %rbx,%rsi
    0.00 :   5ac0e8:       mov    %r12,%rdi
    0.00 :   5ac0eb:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5ac0f0:       mov    %rbx,%rdi
         :            if (!_M_is_local())
    0.00 :   5ac0f3:       add    $0x10,%rbp
    0.00 :   5ac0f7:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ac0fc:       mov    %r15,%rdi
    0.00 :   5ac0ff:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ac104:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ac109:       cmp    %rbp,%rdi
    0.00 :   5ac10c:       je     b1538 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0xc4>
         :            ::operator delete(__p);
    0.00 :   5ac112:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ac117:       jmpq   b1538 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0xc4>
         :            std::__throw_bad_alloc();
    0.00 :   5ac11c:       callq  52ba0 <std::__throw_bad_alloc()@plt>
    0.00 :   5ac121:       mov    $0xa0,%edi
    0.00 :   5ac126:       lea    0x60(%rsp),%rbp
    0.00 :   5ac12b:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5ac130:       mov    %rbp,%rdi
    0.00 :   5ac133:       mov    %rax,%r12
    0.00 :   5ac136:       callq  1122d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<>()>
    0.00 :   5ac13b:       lea    0x40(%rsp),%rax
    0.00 :   5ac140:       mov    %rax,%rdi
    0.00 :   5ac143:       mov    %rax,(%rsp)
    0.00 :   5ac147:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5ac14c:       mov    (%rsp),%r15
    0.00 :   5ac150:       lea    0x80(%rsp),%rbx
    0.00 :   5ac158:       lea    0x2e45a1(%rip),%rcx        # 890700 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&)::__PRETTY_FUNCTION__>
    0.00 :   5ac15f:       mov    $0x76,%edx
    0.00 :   5ac164:       lea    0x2e38cd(%rip),%rsi        # 88fa38 <std::piecewise_construct+0x15b>
    0.00 :   5ac16b:       mov    %rbx,%rdi
    0.00 :   5ac16e:       mov    %r15,%r8
    0.00 :   5ac171:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5ac176:       mov    %rbp,%rcx
    0.00 :   5ac179:       lea    0x2e3ad8(%rip),%rdx        # 88fc58 <std::piecewise_construct+0x37b>
    0.00 :   5ac180:       mov    %rbx,%rsi
    0.00 :   5ac183:       mov    %r12,%rdi
    0.00 :   5ac186:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5ac18b:       mov    %rbx,%rdi
    0.00 :   5ac18e:       add    $0x10,%rbp
    0.00 :   5ac192:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5ac197:       mov    %r15,%rdi
    0.00 :   5ac19a:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5ac19f:       mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5ac1a4:       cmp    %rbp,%rdi
    0.00 :   5ac1a7:       je     b1474 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]>
         :            ::operator delete(__p);
    0.00 :   5ac1ad:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5ac1b2:       jmpq   b1474 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]>
    0.00 :   5ac1b7:       mov    %rax,%r12
    0.00 :   5ac1ba:       jmpq   b14d0 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x5c>
    0.00 :   5ac1bf:       mov    %rax,%r13
    0.00 :   5ac1c2:       jmpq   b1501 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x8d>
    0.00 :   5ac1c7:       mov    %rax,%rbx
    0.00 :   5ac1ca:       jmpq   b150c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x98>
    0.00 :   5ac1cf:       mov    %rax,%rbx
    0.00 :   5ac1d2:       jmpq   b1515 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0xa1>
    0.00 :   5ac1d7:       mov    %rax,%r12
    0.00 :   5ac1da:       jmpq   b14ba <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x46>
    0.00 :   5ac1df:       mov    %rax,%rbx
    0.00 :   5ac1e2:       jmpq   b14dc <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x68>
    0.00 :   5ac1e7:       jmpq   b154e <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0xda>
    0.00 :   5ac1ec:       mov    %rax,%rbx
    0.00 :   5ac1ef:       jmpq   b1577 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x103>
    0.00 :   5ac1f4:       mov    %rax,%r12
    0.00 :   5ac1f7:       jmpq   b159d <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x129>
    0.00 :   5ac1fc:       jmpq   b15d6 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x162>
    0.00 :   5ac201:       mov    %rax,%r12
    0.00 :   5ac204:       jmpq   b162f <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x1bb>
    0.00 :   5ac209:       mov    %rax,%r12
    0.00 :   5ac20c:       jmpq   b15a5 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x131>
    0.00 :   5ac211:       jmpq   b1718 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x2a4>
    0.00 :   5ac216:       mov    %rax,%rbx
    0.00 :   5ac219:       jmpq   b180c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x398>
    0.00 :   5ac21e:       mov    %rax,%r12
    0.00 :   5ac221:       jmpq   b1619 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x1a5>
    0.00 :   5ac226:       mov    %rax,%rbx
    0.00 :   5ac229:       jmpq   b167c <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x208>
    0.00 :   5ac22e:       mov    %rax,%rbx
    0.00 :   5ac231:       jmpq   b1685 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x211>
    0.00 :   5ac236:       mov    %rax,%rbx
    0.00 :   5ac239:       jmpq   b15b1 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x13d>
    0.00 :   5ac23e:       jmpq   b16a5 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x231>
    0.00 :   5ac243:       jmpq   b16bd <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x249>
    0.00 :   5ac248:       mov    %rax,%rbx
    0.00 :   5ac24b:       jmpq   b1568 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0xf4>
    0.00 :   5ac250:       jmpq   b16df <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x26b>
    0.00 :   5ac255:       mov    %rax,%rbx
    0.00 :   5ac258:       jmpq   b15c4 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x150>
    0.00 :   5ac25d:       jmpq   b1701 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x28d>
    0.00 :   5ac262:       mov    %rax,%rbx
    0.00 :   5ac265:       jmpq   b173b <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x2c7>
    0.00 :   5ac26a:       mov    %rax,%rbx
    0.00 :   5ac26d:       jmpq   b1744 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x2d0>
    0.00 :   5ac272:       mov    %rax,%r13
    0.00 :   5ac275:       jmpq   b1730 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x2bc>
    0.00 :   5ac27a:       mov    %rax,%r12
    0.00 :   5ac27d:       jmpq   b1767 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x2f3>
    0.00 :   5ac282:       mov    %rax,%r12
    0.00 :   5ac285:       jmpq   b14a4 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x30>
    0.00 :   5ac28a:       jmpq   b1774 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x300>
    0.00 :   5ac28f:       jmpq   b179e <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x32a>
    0.00 :   5ac294:       jmpq   b17d8 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x364>
    0.00 :   5ac299:       mov    %rax,%rbx
    0.00 :   5ac29c:       jmpq   b14ef <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x7b>
    0.00 :   5ac2a1:       jmpq   b17b6 <onnxruntime::IExecutionFrame::Init(std::vector<int, std::allocator<int> > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&, std::unordered_map<int, OrtValue, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, OrtValue> > > const&, std::vector<OrtValue, std::allocator<OrtValue> > const&) [clone .cold.433]+0x342>
 Percent |	Source code & Disassembly of onnxruntime_pybind11_state.so for cache-misses (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000005f28d0 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const>:
         :            _ZNK11onnxruntime11TensorShape15SizeToDimensionEm():
  100.00 :   5f28d0:       push   %r14
    0.00 :   5f28d2:       push   %r13
    0.00 :   5f28d4:       push   %r12
    0.00 :   5f28d6:       push   %rbp
    0.00 :   5f28d7:       push   %rbx
    0.00 :   5f28d8:       sub    $0xe0,%rsp
    0.00 :   5f28df:       mov    %rsi,0x8(%rsp)
    0.00 :   5f28e4:       mov    %fs:0x28,%rax
    0.00 :   5f28ed:       mov    %rax,0xd8(%rsp)
    0.00 :   5f28f5:       xor    %eax,%eax
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   5f28f7:       mov    0x8(%rdi),%rax
    0.00 :   5f28fb:       sub    (%rdi),%rax
    0.00 :   5f28fe:       sar    $0x3,%rax
    0.00 :   5f2902:       mov    %rax,0x18(%rsp)
    0.00 :   5f2907:       cmp    %rax,%rsi
    0.00 :   5f290a:       ja     5f293d <onnxruntime::TensorShape::SizeToDimension(unsigned long) const+0x6d>
    0.00 :   5f290c:       mov    %rsi,%rdx
    0.00 :   5f290f:       xor    %esi,%esi
    0.00 :   5f2911:       callq  5f2670 <onnxruntime::TensorShape::SizeHelper(unsigned long, unsigned long) const>
    0.00 :   5f2916:       mov    0xd8(%rsp),%rcx
    0.00 :   5f291e:       xor    %fs:0x28,%rcx
    0.00 :   5f2927:       jne    5f2a03 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const+0x133>
    0.00 :   5f292d:       add    $0xe0,%rsp
    0.00 :   5f2934:       pop    %rbx
    0.00 :   5f2935:       pop    %rbp
    0.00 :   5f2936:       pop    %r12
    0.00 :   5f2938:       pop    %r13
    0.00 :   5f293a:       pop    %r14
    0.00 :   5f293c:       retq
    0.00 :   5f293d:       mov    $0xa0,%edi
    0.00 :   5f2942:       lea    0x30(%rsp),%r13
    0.00 :   5f2947:       lea    0x50(%rsp),%rbx
    0.00 :   5f294c:       callq  52cf0 <__cxa_allocate_exception@plt>
    0.00 :   5f2951:       mov    %rbx,%rdi
    0.00 :   5f2954:       lea    0x28(%rsp),%rcx
    0.00 :   5f2959:       mov    %r13,%r9
    0.00 :   5f295c:       mov    %rax,%r12
    0.00 :   5f295f:       lea    0x8(%rsp),%rdx
    0.00 :   5f2964:       lea    0x20(%rsp),%rsi
    0.00 :   5f2969:       lea    0x25d4e2(%rip),%rax        # 84fe52 <typeinfo name for onnxruntime::ml::FeatureVectorizer+0x232>
    0.00 :   5f2970:       lea    0x18(%rsp),%r8
    0.00 :   5f2975:       mov    %rax,0x30(%rsp)
    0.00 :   5f297a:       lea    0x2a2ddf(%rip),%rax        # 895760 <typeinfo name for onnxruntime::TensorAllocatorWithMemPattern+0x160>
    0.00 :   5f2981:       mov    %rax,0x28(%rsp)
    0.00 :   5f2986:       lea    0x2a2da2(%rip),%rax        # 89572f <typeinfo name for onnxruntime::TensorAllocatorWithMemPattern+0x12f>
    0.00 :   5f298d:       mov    %rax,0x20(%rsp)
    0.00 :   5f2992:       callq  5f2050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > onnxruntime::detail::MakeStringImpl<char const*, unsigned long, char const*, unsigned long, char const*>(char const* const&, unsigned long const&, char const* const&, unsigned long const&, char const* const&)>
    0.00 :   5f2997:       mov    %r13,%rdi
    0.00 :   5f299a:       callq  6a6e10 <onnxruntime::GetStackTrace[abi:cxx11]()>
    0.00 :   5f299f:       lea    0x70(%rsp),%r14
    0.00 :   5f29a4:       mov    %r13,%r8
    0.00 :   5f29a7:       lea    0x2a2eb2(%rip),%rcx        # 895860 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const::__PRETTY_FUNCTION__>
    0.00 :   5f29ae:       mov    $0x25,%edx
    0.00 :   5f29b3:       lea    0x2a2d0e(%rip),%rsi        # 8956c8 <typeinfo name for onnxruntime::TensorAllocatorWithMemPattern+0xc8>
    0.00 :   5f29ba:       mov    %r14,%rdi
    0.00 :   5f29bd:       callq  fed60 <onnxruntime::CodeLocation::CodeLocation(char const*, int, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
    0.00 :   5f29c2:       mov    %rbx,%rcx
    0.00 :   5f29c5:       lea    0x2a2d79(%rip),%rdx        # 895745 <typeinfo name for onnxruntime::TensorAllocatorWithMemPattern+0x145>
    0.00 :   5f29cc:       mov    %r14,%rsi
    0.00 :   5f29cf:       mov    %r12,%rdi
    0.00 :   5f29d2:       callq  fe730 <onnxruntime::OnnxRuntimeException::OnnxRuntimeException(onnxruntime::CodeLocation const&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    0.00 :   5f29d7:       mov    %r14,%rdi
         :            _M_create(size_type&, size_type);
         :
         :            void
         :            _M_dispose()
         :            {
         :            if (!_M_is_local())
    0.00 :   5f29da:       add    $0x10,%rbx
    0.00 :   5f29de:       callq  f9cd0 <onnxruntime::CodeLocation::~CodeLocation()>
    0.00 :   5f29e3:       mov    %r13,%rdi
    0.00 :   5f29e6:       callq  fa560 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
         :            { return _M_data() == _M_local_data(); }
    0.00 :   5f29eb:       mov    0x50(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   5f29f0:       cmp    %rbx,%rdi
    0.00 :   5f29f3:       je     b77de <onnxruntime::TensorShape::SizeToDimension(unsigned long) const [clone .cold.97]>
         :            {
         :            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p);
    0.00 :   5f29f9:       callq  53300 <operator delete(void*)@plt>
    0.00 :   5f29fe:       jmpq   b77de <onnxruntime::TensorShape::SizeToDimension(unsigned long) const [clone .cold.97]>
    0.00 :   5f2a03:       callq  53460 <__stack_chk_fail@plt>
    0.00 :   5f2a08:       mov    %rax,%rbp
    0.00 :   5f2a0b:       jmpq   b77f4 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const [clone .cold.97]+0x16>
    0.00 :   5f2a10:       mov    %rax,%rbp
    0.00 :   5f2a13:       jmpq   b77fc <onnxruntime::TensorShape::SizeToDimension(unsigned long) const [clone .cold.97]+0x1e>
    0.00 :   5f2a18:       mov    %rax,%rbp
    0.00 :   5f2a1b:       jmpq   b7804 <onnxruntime::TensorShape::SizeToDimension(unsigned long) const [clone .cold.97]+0x26>
 Percent |	Source code & Disassembly of python3.7 for cache-misses (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000165cc0 <_PyUnicodeWriter_Finish>:
         :            _PyUnicodeWriter_Finish():
    0.00 :   165cc0:       push   %r13
    0.00 :   165cc2:       push   %r12
  100.00 :   165cc4:       push   %rbp
    0.00 :   165cc5:       push   %rbx
    0.00 :   165cc6:       sub    $0x18,%rsp
    0.00 :   165cca:       mov    0x20(%rdi),%rbp
    0.00 :   165cce:       mov    (%rdi),%rbx
    0.00 :   165cd1:       test   %rbp,%rbp
    0.00 :   165cd4:       je     165fa0 <_PyUnicodeWriter_Finish+0x2e0>
    0.00 :   165cda:       cmpb   $0x0,0x35(%rdi)
    0.00 :   165cde:       movq   $0x0,(%rdi)
    0.00 :   165ce5:       jne    165cfa <_PyUnicodeWriter_Finish+0x3a>
    0.00 :   165ce7:       mov    0x10(%rbx),%r10
    0.00 :   165ceb:       cmp    %r10,%rbp
    0.00 :   165cee:       jne    165d10 <_PyUnicodeWriter_Finish+0x50>
         :            unicode_result_ready():
    0.00 :   165cf0:       cmp    $0x1,%r10
    0.00 :   165cf4:       je     165f20 <_PyUnicodeWriter_Finish+0x260>
         :            _PyUnicodeWriter_Finish():
    0.00 :   165cfa:       add    $0x18,%rsp
    0.00 :   165cfe:       mov    %rbx,%rax
    0.00 :   165d01:       pop    %rbx
    0.00 :   165d02:       pop    %rbp
    0.00 :   165d03:       pop    %r12
    0.00 :   165d05:       pop    %r13
    0.00 :   165d07:       retq
    0.00 :   165d08:       nopl   0x0(%rax,%rax,1)
         :            resize_compact():
    0.00 :   165d10:       movzbl 0x20(%rbx),%ecx
    0.00 :   165d14:       mov    0x28(%rbx),%r13
    0.00 :   165d18:       mov    %ecx,%edi
    0.00 :   165d1a:       mov    %ecx,%eax
    0.00 :   165d1c:       shr    $0x2,%dil
    0.00 :   165d20:       and    $0x20,%eax
    0.00 :   165d23:       mov    %rdi,%r9
    0.00 :   165d26:       and    $0x7,%r9d
    0.00 :   165d2a:       test   $0x40,%cl
    0.00 :   165d2d:       je     165e00 <_PyUnicodeWriter_Finish+0x140>
    0.00 :   165d33:       test   %al,%al
    0.00 :   165d35:       je     9add6 <_PyUnicodeWriter_Finish.cold.1787+0x137>
    0.00 :   165d3b:       lea    0x30(%rbx),%r12
         :            _PyUnicodeWriter_Finish():
    0.00 :   165d3f:       mov    $0x30,%r8d
         :            resize_compact():
    0.00 :   165d45:       movabs $0x7fffffffffffffcf,%rax
    0.00 :   165d4f:       cmp    $0x1,%r9
    0.00 :   165d53:       jne    165e26 <_PyUnicodeWriter_Finish+0x166>
    0.00 :   165d59:       sub    $0x1,%rax
    0.00 :   165d5d:       cmp    %rax,%rbp
    0.00 :   165d60:       jg     9adb9 <_PyUnicodeWriter_Finish.cold.1787+0x11a>
    0.00 :   165d66:       lea    0x1(%rbp),%rsi
    0.00 :   165d6a:       and    $0x60,%ecx
    0.00 :   165d6d:       imul   %r9,%rsi
    0.00 :   165d71:       add    %r8,%rsi
    0.00 :   165d74:       cmp    $0x60,%cl
    0.00 :   165d77:       jne    165e40 <_PyUnicodeWriter_Finish+0x180>
    0.00 :   165d7d:       mov    %rbx,%rdi
    0.00 :   165d80:       addr32 callq 107620 <PyObject_Realloc>
    0.00 :   165d86:       test   %rax,%rax
    0.00 :   165d89:       je     9ae82 <_PyUnicodeWriter_Finish.cold.1787+0x1e3>
    0.00 :   165d8f:       movq   $0x1,(%rax)
    0.00 :   165d96:       movzbl 0x20(%rax),%r11d
    0.00 :   165d9b:       mov    %rbp,0x10(%rax)
    0.00 :   165d9f:       cmp    %r12,%r13
    0.00 :   165da2:       je     165ea0 <_PyUnicodeWriter_Finish+0x1e0>
    0.00 :   165da8:       mov    0x28(%rax),%rdi
    0.00 :   165dac:       test   %rdi,%rdi
    0.00 :   165daf:       jne    9adfa <_PyUnicodeWriter_Finish.cold.1787+0x15b>
    0.00 :   165db5:       mov    %r11d,%ebx
    0.00 :   165db8:       mov    %r11d,%esi
    0.00 :   165dbb:       shr    $0x2,%bl
    0.00 :   165dbe:       and    $0x20,%esi
    0.00 :   165dc1:       and    $0x7,%ebx
    0.00 :   165dc4:       cmp    $0x1,%bl
    0.00 :   165dc7:       jne    165e60 <_PyUnicodeWriter_Finish+0x1a0>
    0.00 :   165dcd:       test   %sil,%sil
    0.00 :   165dd0:       je     9ae53 <_PyUnicodeWriter_Finish.cold.1787+0x1b4>
    0.00 :   165dd6:       and    $0x40,%r11d
    0.00 :   165dda:       je     165fd5 <_PyUnicodeWriter_Finish+0x315>
    0.00 :   165de0:       movb   $0x0,0x30(%rax,%rbp,1)
         :            unicode_result_ready():
    0.00 :   165de5:       mov    0x10(%rax),%r10
    0.00 :   165de9:       test   %r10,%r10
    0.00 :   165dec:       je     9accc <_PyUnicodeWriter_Finish.cold.1787+0x2d>
    0.00 :   165df2:       mov    %rax,%rbx
    0.00 :   165df5:       jmpq   165cf0 <_PyUnicodeWriter_Finish+0x30>
    0.00 :   165dfa:       nopw   0x0(%rax,%rax,1)
         :            resize_compact():
    0.00 :   165e00:       test   %al,%al
    0.00 :   165e02:       je     9acb0 <_PyUnicodeWriter_Finish.cold.1787+0x11>
    0.00 :   165e08:       lea    0x48(%rbx),%r12
         :            _PyUnicodeWriter_Finish():
    0.00 :   165e0c:       mov    $0x48,%r8d
         :            resize_compact():
    0.00 :   165e12:       movabs $0x7fffffffffffffb7,%rax
    0.00 :   165e1c:       cmp    $0x1,%r9
    0.00 :   165e20:       je     165d59 <_PyUnicodeWriter_Finish+0x99>
    0.00 :   165e26:       cqto
    0.00 :   165e28:       idiv   %r9
    0.00 :   165e2b:       sub    $0x1,%rax
    0.00 :   165e2f:       cmp    %rax,%rbp
    0.00 :   165e32:       jle    165d66 <_PyUnicodeWriter_Finish+0xa6>
    0.00 :   165e38:       jmpq   9adb9 <_PyUnicodeWriter_Finish.cold.1787+0x11a>
    0.00 :   165e3d:       nopl   (%rax)
    0.00 :   165e40:       mov    0x38(%rbx),%rdi
    0.00 :   165e44:       test   %rdi,%rdi
    0.00 :   165e47:       je     165d7d <_PyUnicodeWriter_Finish+0xbd>
    0.00 :   165e4d:       cmp    %r12,%rdi
    0.00 :   165e50:       jne    9ad94 <_PyUnicodeWriter_Finish.cold.1787+0xf5>
    0.00 :   165e56:       jmpq   165d7d <_PyUnicodeWriter_Finish+0xbd>
    0.00 :   165e5b:       nopl   0x0(%rax,%rax,1)
    0.00 :   165e60:       cmp    $0x2,%bl
    0.00 :   165e63:       je     165ef0 <_PyUnicodeWriter_Finish+0x230>
    0.00 :   165e69:       test   %sil,%sil
    0.00 :   165e6c:       je     9ad12 <_PyUnicodeWriter_Finish.cold.1787+0x73>
    0.00 :   165e72:       and    $0x40,%r11d
    0.00 :   165e76:       jne    9ad09 <_PyUnicodeWriter_Finish.cold.1787+0x6a>
    0.00 :   165e7c:       lea    0x48(%rax),%rcx
    0.00 :   165e80:       movl   $0x0,(%rcx,%rbp,4)
         :            unicode_result_ready():
    0.00 :   165e87:       mov    0x10(%rax),%r10
    0.00 :   165e8b:       mov    %rax,%rbx
    0.00 :   165e8e:       test   %r10,%r10
    0.00 :   165e91:       je     9accc <_PyUnicodeWriter_Finish.cold.1787+0x2d>
    0.00 :   165e97:       jmpq   165cf0 <_PyUnicodeWriter_Finish+0x30>
    0.00 :   165e9c:       nopl   0x0(%rax)
    0.00 :   165ea0:       mov    %r11d,%edi
         :            resize_compact():
    0.00 :   165ea3:       mov    %r11d,%esi
    0.00 :   165ea6:       and    $0x40,%edi
    0.00 :   165ea9:       and    $0x20,%esi
    0.00 :   165eac:       je     9ad3a <_PyUnicodeWriter_Finish.cold.1787+0x9b>
    0.00 :   165eb2:       test   %dil,%dil
    0.00 :   165eb5:       jne    9ad6c <_PyUnicodeWriter_Finish.cold.1787+0xcd>
    0.00 :   165ebb:       lea    0x48(%rax),%r9
    0.00 :   165ebf:       mov    %r9,0x28(%rax)
    0.00 :   165ec3:       mov    %rbp,0x40(%rax)
    0.00 :   165ec7:       mov    %r11d,%r13d
    0.00 :   165eca:       shr    $0x2,%r13b
    0.00 :   165ece:       and    $0x7,%r13d
    0.00 :   165ed2:       cmp    $0x1,%r13b
    0.00 :   165ed6:       je     165dcd <_PyUnicodeWriter_Finish+0x10d>
    0.00 :   165edc:       cmp    $0x2,%r13b
    0.00 :   165ee0:       jne    165e69 <_PyUnicodeWriter_Finish+0x1a9>
    0.00 :   165ee2:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   165eed:       nopl   (%rax)
    0.00 :   165ef0:       test   %sil,%sil
    0.00 :   165ef3:       je     9adf1 <_PyUnicodeWriter_Finish.cold.1787+0x152>
    0.00 :   165ef9:       and    $0x40,%r11d
    0.00 :   165efd:       jne    9ade8 <_PyUnicodeWriter_Finish.cold.1787+0x149>
    0.00 :   165f03:       lea    0x48(%rax),%r8
    0.00 :   165f07:       xor    %ebx,%ebx
    0.00 :   165f09:       mov    %bx,(%r8,%rbp,2)
    0.00 :   165f0e:       jmpq   165e87 <_PyUnicodeWriter_Finish+0x1c7>
    0.00 :   165f13:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   165f1e:       xchg   %ax,%ax
         :            unicode_result_ready():
    0.00 :   165f20:       movzbl 0x20(%rbx),%eax
    0.00 :   165f24:       test   $0x20,%al
    0.00 :   165f26:       je     9aca7 <_PyUnicodeWriter_Finish.cold.1787+0x8>
    0.00 :   165f2c:       lea    0x30(%rbx),%r11
    0.00 :   165f30:       lea    0x48(%rbx),%rbp
    0.00 :   165f34:       test   $0x40,%al
    0.00 :   165f36:       cmovne %r11,%rbp
    0.00 :   165f3a:       shr    $0x2,%al
    0.00 :   165f3d:       and    $0x7,%eax
    0.00 :   165f40:       cmp    $0x1,%eax
    0.00 :   165f43:       jne    165f88 <_PyUnicodeWriter_Finish+0x2c8>
    0.00 :   165f45:       movzbl 0x0(%rbp),%esi
    0.00 :   165f49:       lea    0x1eaed0(%rip),%rdi        # 350e20 <unicode_latin1>
    0.00 :   165f50:       mov    (%rdi,%rsi,8),%r13
    0.00 :   165f54:       test   %r13,%r13
    0.00 :   165f57:       je     165fe7 <_PyUnicodeWriter_Finish+0x327>
    0.00 :   165f5d:       cmp    %rbx,%r13
    0.00 :   165f60:       je     165cfa <_PyUnicodeWriter_Finish+0x3a>
    0.00 :   165f66:       addq   $0x1,0x0(%r13)
    0.00 :   165f6b:       subq   $0x1,(%rbx)
    0.00 :   165f6f:       jne    9ac9f <_PyUnicodeWriter_Finish.cold.1787>
    0.00 :   165f75:       mov    0x8(%rbx),%r9
    0.00 :   165f79:       mov    %rbx,%rdi
    0.00 :   165f7c:       mov    %r13,%rbx
    0.00 :   165f7f:       callq  *0x30(%r9)
    0.00 :   165f83:       jmpq   165cfa <_PyUnicodeWriter_Finish+0x3a>
    0.00 :   165f88:       cmp    $0x2,%eax
    0.00 :   165f8b:       jne    165fe2 <_PyUnicodeWriter_Finish+0x322>
    0.00 :   165f8d:       movzwl 0x0(%rbp),%esi
    0.00 :   165f91:       cmp    $0xff,%esi
    0.00 :   165f97:       ja     165cfa <_PyUnicodeWriter_Finish+0x3a>
    0.00 :   165f9d:       jmp    165f49 <_PyUnicodeWriter_Finish+0x289>
    0.00 :   165f9f:       nop
         :            _PyUnicodeWriter_Finish():
    0.00 :   165fa0:       test   %rbx,%rbx
    0.00 :   165fa3:       je     165fbc <_PyUnicodeWriter_Finish+0x2fc>
    0.00 :   165fa5:       movq   $0x0,(%rdi)
    0.00 :   165fac:       subq   $0x1,(%rbx)
    0.00 :   165fb0:       jne    165fbc <_PyUnicodeWriter_Finish+0x2fc>
    0.00 :   165fb2:       mov    0x8(%rbx),%rcx
    0.00 :   165fb6:       mov    %rbx,%rdi
    0.00 :   165fb9:       callq  *0x30(%rcx)
    0.00 :   165fbc:       mov    0x1eb665(%rip),%rbx        # 351628 <unicode_empty>
    0.00 :   165fc3:       test   %rbx,%rbx
    0.00 :   165fc6:       je     9ae5c <_PyUnicodeWriter_Finish.cold.1787+0x1bd>
    0.00 :   165fcc:       addq   $0x1,(%rbx)
    0.00 :   165fd0:       jmpq   165cfa <_PyUnicodeWriter_Finish+0x3a>
         :            resize_compact():
    0.00 :   165fd5:       lea    0x48(%rax),%rcx
    0.00 :   165fd9:       movb   $0x0,(%rcx,%rbp,1)
    0.00 :   165fdd:       jmpq   165e87 <_PyUnicodeWriter_Finish+0x1c7>
         :            unicode_result_ready():
    0.00 :   165fe2:       mov    0x0(%rbp),%esi
    0.00 :   165fe5:       jmp    165f91 <_PyUnicodeWriter_Finish+0x2d1>
    0.00 :   165fe7:       addq   $0x1,(%rbx)
    0.00 :   165feb:       mov    %rbx,(%rdi,%rsi,8)
    0.00 :   165fef:       jmpq   165cfa <_PyUnicodeWriter_Finish+0x3a>
 Percent |	Source code & Disassembly of python3.7 for cache-misses (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000001367a0 <_PyCFunction_FastCallDict>:
         :            _PyCFunction_FastCallDict():
    0.00 :   1367a0:       push   %rbx
    0.00 :   1367a1:       mov    %rdi,%rbx
    0.00 :   1367a4:       mov    0x10(%rdi),%rdi
    0.00 :   1367a8:       mov    %rcx,%r8
    0.00 :   1367ab:       mov    %rdx,%rcx
    0.00 :   1367ae:       mov    %rsi,%rdx
    0.00 :   1367b1:       testb  $0x20,0x10(%rdi)
  100.00 :   1367b5:       jne    1367d0 <_PyCFunction_FastCallDict+0x30>
    0.00 :   1367b7:       mov    0x18(%rbx),%rsi
    0.00 :   1367bb:       addr32 callq 1363f0 <_PyMethodDef_RawFastCallDict>
    0.00 :   1367c1:       mov    %rbx,%rdi
    0.00 :   1367c4:       xor    %edx,%edx
    0.00 :   1367c6:       pop    %rbx
    0.00 :   1367c7:       mov    %rax,%rsi
    0.00 :   1367ca:       jmpq   127300 <_Py_CheckFunctionResult>
    0.00 :   1367cf:       nop
    0.00 :   1367d0:       xor    %esi,%esi
    0.00 :   1367d2:       jmp    1367bb <_PyCFunction_FastCallDict+0x1b>
 Percent |	Source code & Disassembly of python3.7 for cache-misses (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000165650 <_PyMethodDef_RawFastCallKeywords>:
         :            _PyMethodDef_RawFastCallKeywords():
    0.00 :   165650:       push   %r15
    0.00 :   165652:       push   %r14
    0.00 :   165654:       push   %r13
    0.00 :   165656:       mov    %rdx,%r13
    0.00 :   165659:       mov    %rcx,%rdx
    0.00 :   16565c:       push   %r12
    0.00 :   16565e:       mov    %rsi,%r12
    0.00 :   165661:       push   %rbp
    0.00 :   165662:       mov    %rdi,%rbp
    0.00 :   165665:       push   %rbx
    0.00 :   165666:       sub    $0x28,%rsp
    0.00 :   16566a:       mov    0x10(%rdi),%r15d
    0.00 :   16566e:       mov    0x8(%rdi),%r14
    0.00 :   165672:       mov    %r15d,%ebx
    0.00 :   165675:       and    $0xffffff8f,%ebx
    0.00 :   165678:       test   %r8,%r8
    0.00 :   16567b:       jne    1658cd <_PyMethodDef_RawFastCallKeywords+0x27d>
    0.00 :   165681:       mov    0x1e7340(%rip),%rsi        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   165688:       mov    0x20(%rsi),%eax
    0.00 :   16568b:       add    $0x1,%eax
    0.00 :   16568e:       cmp    0x1a4628(%rip),%eax        # 309cbc <_Py_CheckRecursionLimit>
    0.00 :   165694:       mov    %eax,0x20(%rsi)
    0.00 :   165697:       jg     9a39f <_PyMethodDef_RawFastCallKeywords.cold.1778+0x7>
    0.00 :   16569d:       cmp    $0x4,%ebx
    0.00 :   1656a0:       je     165780 <_PyMethodDef_RawFastCallKeywords+0x130>
    0.00 :   1656a6:       jle    1657f0 <_PyMethodDef_RawFastCallKeywords+0x1a0>
    0.00 :   1656ac:       cmp    $0x80,%ebx
    0.00 :   1656b2:       je     165730 <_PyMethodDef_RawFastCallKeywords+0xe0>
    0.00 :   1656b4:       cmp    $0x82,%ebx
    0.00 :   1656ba:       je     1657e0 <_PyMethodDef_RawFastCallKeywords+0x190>
    0.00 :   1656c0:       cmp    $0x8,%ebx
    0.00 :   1656c3:       jne    165870 <_PyMethodDef_RawFastCallKeywords+0x220>
    0.00 :   1656c9:       cmp    $0x1,%rdx
    0.00 :   1656cd:       jne    9a422 <_PyMethodDef_RawFastCallKeywords.cold.1778+0x8a>
    0.00 :   1656d3:       mov    0x0(%r13),%rsi
    0.00 :   1656d7:       mov    %r12,%rdi
    0.00 :   1656da:       callq  *%r14
    0.00 :   1656dd:       mov    0x1e72e4(%rip),%r15        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1656e4:       mov    0x1a45d1(%rip),%r8d        # 309cbc <_Py_CheckRecursionLimit>
    0.00 :   1656eb:       mov    0x20(%r15),%esi
    0.00 :   1656ef:       lea    -0x1(%rsi),%r11d
    0.00 :   1656f3:       mov    %r11d,0x20(%r15)
    0.00 :   1656f7:       cmp    $0xc8,%r8d
    0.00 :   1656fe:       jle    1659a2 <_PyMethodDef_RawFastCallKeywords+0x352>
    0.00 :   165704:       sub    $0x32,%r8d
    0.00 :   165708:       cmp    %r8d,%r11d
    0.00 :   16570b:       jge    165718 <_PyMethodDef_RawFastCallKeywords+0xc8>
    0.00 :   16570d:       mov    0x1e72b4(%rip),%rcx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   165714:       movb   $0x0,0x24(%rcx)
    0.00 :   165718:       add    $0x28,%rsp
    0.00 :   16571c:       pop    %rbx
    0.00 :   16571d:       pop    %rbp
    0.00 :   16571e:       pop    %r12
    0.00 :   165720:       pop    %r13
    0.00 :   165722:       pop    %r14
    0.00 :   165724:       pop    %r15
    0.00 :   165726:       retq
    0.00 :   165727:       test   %rcx,%rcx
    0.00 :   16572a:       jne    9a401 <_PyMethodDef_RawFastCallKeywords.cold.1778+0x69>
    0.00 :   165730:       mov    %r12,%rdi
    0.00 :   165733:       mov    %r13,%rsi
    0.00 :   165736:       callq  *%r14
    0.00 :   165739:       mov    0x1e7288(%rip),%r9        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   165740:       mov    0x1a4575(%rip),%r8d        # 309cbc <_Py_CheckRecursionLimit>
  100.00 :   165747:       mov    0x20(%r9),%edi
    0.00 :   16574b:       lea    -0x1(%rdi),%r11d
    0.00 :   16574f:       mov    %r11d,0x20(%r9)
    0.00 :   165753:       cmp    $0xc8,%r8d
    0.00 :   16575a:       jle    1659a2 <_PyMethodDef_RawFastCallKeywords+0x352>
    0.00 :   165760:       sub    $0x32,%r8d
    0.00 :   165764:       cmp    %r8d,%r11d
    0.00 :   165767:       jge    165718 <_PyMethodDef_RawFastCallKeywords+0xc8>
    0.00 :   165769:       mov    0x1e7258(%rip),%rdx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   165770:       movb   $0x0,0x24(%rdx)
    0.00 :   165774:       jmp    165718 <_PyMethodDef_RawFastCallKeywords+0xc8>
    0.00 :   165776:       test   %rcx,%rcx
    0.00 :   165779:       jne    9a401 <_PyMethodDef_RawFastCallKeywords.cold.1778+0x69>
    0.00 :   16577f:       nop
    0.00 :   165780:       test   %rdx,%rdx
    0.00 :   165783:       jne    9a3dd <_PyMethodDef_RawFastCallKeywords.cold.1778+0x45>
    0.00 :   165789:       xor    %esi,%esi
    0.00 :   16578b:       mov    %r12,%rdi
    0.00 :   16578e:       callq  *%r14
    0.00 :   165791:       mov    0x1e7230(%rip),%rbx        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   165798:       mov    0x1a451d(%rip),%r8d        # 309cbc <_Py_CheckRecursionLimit>
    0.00 :   16579f:       mov    0x20(%rbx),%r10d
    0.00 :   1657a3:       lea    -0x1(%r10),%r11d
    0.00 :   1657a7:       mov    %r11d,0x20(%rbx)
    0.00 :   1657ab:       cmp    $0xc8,%r8d
    0.00 :   1657b2:       jle    1659a2 <_PyMethodDef_RawFastCallKeywords+0x352>
    0.00 :   1657b8:       sub    $0x32,%r8d
    0.00 :   1657bc:       cmp    %r11d,%r8d
    0.00 :   1657bf:       jle    165718 <_PyMethodDef_RawFastCallKeywords+0xc8>
    0.00 :   1657c5:       mov    0x1e71fc(%rip),%rbp        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1657cc:       movb   $0x0,0x24(%rbp)
    0.00 :   1657d0:       jmpq   165718 <_PyMethodDef_RawFastCallKeywords+0xc8>
    0.00 :   1657d5:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1657e0:       mov    %r8,%rcx
    0.00 :   1657e3:       mov    %r13,%rsi
    0.00 :   1657e6:       mov    %r12,%rdi
    0.00 :   1657e9:       callq  *%r14
    0.00 :   1657ec:       jmp    165791 <_PyMethodDef_RawFastCallKeywords+0x141>
    0.00 :   1657ee:       xchg   %ax,%ax
    0.00 :   1657f0:       xor    %ecx,%ecx
    0.00 :   1657f2:       cmp    $0x1,%ebx
    0.00 :   1657f5:       jne    1658c0 <_PyMethodDef_RawFastCallKeywords+0x270>
    0.00 :   1657fb:       mov    %r8,0x18(%rsp)
    0.00 :   165800:       mov    %rdx,%rsi
    0.00 :   165803:       mov    %r13,%rdi
    0.00 :   165806:       mov    %rcx,0x10(%rsp)
    0.00 :   16580b:       mov    %rdx,0x8(%rsp)
    0.00 :   165810:       addr32 callq 125810 <_PyStack_AsTuple>
    0.00 :   165816:       mov    %rax,%rbx
    0.00 :   165819:       test   %rax,%rax
    0.00 :   16581c:       je     9a398 <_PyMethodDef_RawFastCallKeywords.cold.1778>
    0.00 :   165822:       and    $0x2,%r15d
    0.00 :   165826:       mov    0x8(%rsp),%r10
    0.00 :   16582b:       mov    0x10(%rsp),%r11
    0.00 :   165830:       mov    0x18(%rsp),%r8
    0.00 :   165835:       jne    1658a0 <_PyMethodDef_RawFastCallKeywords+0x250>
    0.00 :   165837:       mov    %rax,%rsi
    0.00 :   16583a:       mov    %r12,%rdi
    0.00 :   16583d:       callq  *%r14
    0.00 :   165840:       subq   $0x1,(%rbx)
    0.00 :   165844:       jne    165791 <_PyMethodDef_RawFastCallKeywords+0x141>
    0.00 :   16584a:       mov    0x8(%rbx),%r13
    0.00 :   16584e:       mov    %rax,0x8(%rsp)
    0.00 :   165853:       mov    %rbx,%rdi
    0.00 :   165856:       callq  *0x30(%r13)
    0.00 :   16585a:       mov    0x8(%rsp),%rax
    0.00 :   16585f:       jmpq   165791 <_PyMethodDef_RawFastCallKeywords+0x141>
    0.00 :   165864:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   16586f:       nop
    0.00 :   165870:       mov    0x0(%rbp),%rdx
    0.00 :   165874:       lea    0xd5717(%rip),%rsi        # 23af92 <_IO_stdin_used+0x1f92>
    0.00 :   16587b:       mov    0x1d244e(%rip),%rdi        # 337cd0 <PyExc_SystemError>
    0.00 :   165882:       xor    %eax,%eax
    0.00 :   165884:       addr32 callq 127720 <PyErr_Format>
    0.00 :   16588a:       xor    %eax,%eax
    0.00 :   16588c:       jmpq   165791 <_PyMethodDef_RawFastCallKeywords+0x141>
    0.00 :   165891:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   16589c:       nopl   0x0(%rax)
    0.00 :   1658a0:       test   %r11,%r11
    0.00 :   1658a3:       jg     165930 <_PyMethodDef_RawFastCallKeywords+0x2e0>
    0.00 :   1658a9:       xor    %edx,%edx
    0.00 :   1658ab:       mov    %rax,%rsi
    0.00 :   1658ae:       mov    %r12,%rdi
    0.00 :   1658b1:       callq  *%r14
    0.00 :   1658b4:       jmp    165840 <_PyMethodDef_RawFastCallKeywords+0x1f0>
    0.00 :   1658b6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   1658c0:       cmp    $0x3,%ebx
    0.00 :   1658c3:       jne    165870 <_PyMethodDef_RawFastCallKeywords+0x220>
    0.00 :   1658c5:       mov    %r8,%rcx
    0.00 :   1658c8:       jmpq   1657fb <_PyMethodDef_RawFastCallKeywords+0x1ab>
    0.00 :   1658cd:       mov    0x10(%r8),%rcx
    0.00 :   1658d1:       mov    0x1e70f0(%rip),%rdi        # 34c9c8 <_PyRuntime+0x5c8>
    0.00 :   1658d8:       mov    0x20(%rdi),%r9d
    0.00 :   1658dc:       add    $0x1,%r9d
    0.00 :   1658e0:       cmp    0x1a43d5(%rip),%r9d        # 309cbc <_Py_CheckRecursionLimit>
    0.00 :   1658e7:       mov    %r9d,0x20(%rdi)
    0.00 :   1658eb:       jg     9a3a1 <_PyMethodDef_RawFastCallKeywords.cold.1778+0x9>
    0.00 :   1658f1:       cmp    $0x4,%ebx
    0.00 :   1658f4:       je     165776 <_PyMethodDef_RawFastCallKeywords+0x126>
    0.00 :   1658fa:       jle    16597c <_PyMethodDef_RawFastCallKeywords+0x32c>
    0.00 :   165900:       cmp    $0x80,%ebx
    0.00 :   165906:       je     165727 <_PyMethodDef_RawFastCallKeywords+0xd7>
    0.00 :   16590c:       cmp    $0x82,%ebx
    0.00 :   165912:       je     1657e0 <_PyMethodDef_RawFastCallKeywords+0x190>
    0.00 :   165918:       cmp    $0x8,%ebx
    0.00 :   16591b:       jne    16598f <_PyMethodDef_RawFastCallKeywords+0x33f>
    0.00 :   16591d:       test   %rcx,%rcx
    0.00 :   165920:       je     1656c9 <_PyMethodDef_RawFastCallKeywords+0x79>
    0.00 :   165926:       jmpq   9a401 <_PyMethodDef_RawFastCallKeywords.cold.1778+0x69>
    0.00 :   16592b:       nopl   0x0(%rax,%rax,1)
    0.00 :   165930:       lea    0x0(%r13,%r10,8),%rdi
    0.00 :   165935:       mov    %r8,%rsi
    0.00 :   165938:       addr32 callq 165580 <_PyStack_AsDict>
    0.00 :   16593e:       mov    %rax,%rbp
    0.00 :   165941:       test   %rax,%rax
    0.00 :   165944:       je     9a446 <_PyMethodDef_RawFastCallKeywords.cold.1778+0xae>
    0.00 :   16594a:       mov    %rax,%rdx
    0.00 :   16594d:       mov    %rbx,%rsi
    0.00 :   165950:       mov    %r12,%rdi
    0.00 :   165953:       callq  *%r14
    0.00 :   165956:       subq   $0x1,0x0(%rbp)
    0.00 :   16595b:       jne    165840 <_PyMethodDef_RawFastCallKeywords+0x1f0>
    0.00 :   165961:       mov    0x8(%rbp),%r12
    0.00 :   165965:       mov    %rax,0x8(%rsp)
    0.00 :   16596a:       mov    %rbp,%rdi
    0.00 :   16596d:       callq  *0x30(%r12)
    0.00 :   165972:       mov    0x8(%rsp),%rax
    0.00 :   165977:       jmpq   165840 <_PyMethodDef_RawFastCallKeywords+0x1f0>
    0.00 :   16597c:       cmp    $0x1,%ebx
    0.00 :   16597f:       jne    165994 <_PyMethodDef_RawFastCallKeywords+0x344>
    0.00 :   165981:       test   %rcx,%rcx
    0.00 :   165984:       je     1657fb <_PyMethodDef_RawFastCallKeywords+0x1ab>
    0.00 :   16598a:       jmpq   9a401 <_PyMethodDef_RawFastCallKeywords.cold.1778+0x69>
    0.00 :   16598f:       jmpq   165870 <_PyMethodDef_RawFastCallKeywords+0x220>
    0.00 :   165994:       cmp    $0x3,%ebx
    0.00 :   165997:       je     1657fb <_PyMethodDef_RawFastCallKeywords+0x1ab>
    0.00 :   16599d:       jmpq   165870 <_PyMethodDef_RawFastCallKeywords+0x220>
    0.00 :   1659a2:       sar    $0x2,%r8d
    0.00 :   1659a6:       lea    (%r8,%r8,2),%r8d
    0.00 :   1659aa:       jmpq   1657bc <_PyMethodDef_RawFastCallKeywords+0x16c>
 Percent |	Source code & Disassembly of libc-2.27.so for cache-misses (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           000000000008d0f0 <_IO_file_underflow@@GLIBC_2.2.5>:
    0.00 :   8d0f0:       mov    (%rdi),%eax
    0.00 :   8d0f2:       test   $0x4,%al
    0.00 :   8d0f4:       jne    8d340 <_IO_file_underflow@@GLIBC_2.2.5+0x250>
    0.00 :   8d0fa:       mov    0x8(%rdi),%rdx
    0.00 :   8d0fe:       cmp    0x10(%rdi),%rdx
    0.00 :   8d102:       jb     8d250 <_IO_file_underflow@@GLIBC_2.2.5+0x160>
    0.00 :   8d108:       push   %r14
    0.00 :   8d10a:       push   %r13
    0.00 :   8d10c:       push   %r12
    0.00 :   8d10e:       push   %rbp
    0.00 :   8d10f:       push   %rbx
    0.00 :   8d110:       cmpq   $0x0,0x38(%rdi)
    0.00 :   8d115:       mov    %rdi,%rbx
    0.00 :   8d118:       je     8d308 <_IO_file_underflow@@GLIBC_2.2.5+0x218>
    0.00 :   8d11e:       lea    0x35a63b(%rip),%r12        # 3e7760 <h_nerr@@GLIBC_2.2.5+0x22acb0>
    0.00 :   8d125:       lea    0x35b39c(%rip),%rbp        # 3e84c8 <_IO_file_jumps@@GLIBC_2.2.5+0x228>
    0.00 :   8d12c:       sub    %r12,%rbp
    0.00 :   8d12f:       test   $0x202,%eax
    0.00 :   8d134:       je     8d1d0 <_IO_file_underflow@@GLIBC_2.2.5+0xe0>
    0.00 :   8d13a:       mov    0x35f707(%rip),%r13        # 3ec848 <_IO_2_1_stdout_@@GLIBC_2.2.5+0xe8>
    0.00 :   8d141:       mov    0x0(%r13),%edx
    0.00 :   8d145:       mov    %edx,%eax
    0.00 :   8d147:       and    $0x8000,%eax
    0.00 :   8d14c:       je     8d288 <_IO_file_underflow@@GLIBC_2.2.5+0x198>
    0.00 :   8d152:       and    $0x288,%edx
    0.00 :   8d158:       cmp    $0x280,%edx
    0.00 :   8d15e:       jne    8d1d0 <_IO_file_underflow@@GLIBC_2.2.5+0xe0>
    0.00 :   8d160:       mov    %r13,%rdi
    0.00 :   8d163:       mov    0xd8(%rdi),%r14
    0.00 :   8d16a:       mov    %r14,%rax
    0.00 :   8d16d:       sub    %r12,%rax
    0.00 :   8d170:       cmp    %rbp,%rax
    0.00 :   8d173:       jae    8d360 <_IO_file_underflow@@GLIBC_2.2.5+0x270>
    0.00 :   8d179:       mov    $0xffffffff,%esi
    0.00 :   8d17e:       callq  *0x18(%r14)
    0.00 :   8d182:       testl  $0x8000,0x0(%r13)
    0.00 :   8d18a:       jne    8d1d0 <_IO_file_underflow@@GLIBC_2.2.5+0xe0>
    0.00 :   8d18c:       mov    0x88(%r13),%rdx
    0.00 :   8d193:       subl   $0x1,0x4(%rdx)
    0.00 :   8d197:       jne    8d1d0 <_IO_file_underflow@@GLIBC_2.2.5+0xe0>
    0.00 :   8d199:       movq   $0x0,0x8(%rdx)
    0.00 :   8d1a1:       cmpl   $0x0,0x363830(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   8d1a8:       je     8d1b1 <_IO_file_underflow@@GLIBC_2.2.5+0xc1>
    0.00 :   8d1aa:       lock decl (%rdx)
    0.00 :   8d1ad:       jne    8d1b5 <_IO_file_underflow@@GLIBC_2.2.5+0xc5>
    0.00 :   8d1af:       jmp    8d1cb <_IO_file_underflow@@GLIBC_2.2.5+0xdb>
    0.00 :   8d1b1:       decl   (%rdx)
    0.00 :   8d1b3:       je     8d1cb <_IO_file_underflow@@GLIBC_2.2.5+0xdb>
    0.00 :   8d1b5:       lea    (%rdx),%rdi
    0.00 :   8d1b8:       sub    $0x80,%rsp
    0.00 :   8d1bf:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   8d1c4:       add    $0x80,%rsp
    0.00 :   8d1cb:       nopl   0x0(%rax,%rax,1)
    0.00 :   8d1d0:       mov    %rbx,%rdi
    0.00 :   8d1d3:       callq  8de80 <_IO_switch_to_get_mode@@GLIBC_2.2.5>
    0.00 :   8d1d8:       mov    0xd8(%rbx),%r13
    0.00 :   8d1df:       mov    0x38(%rbx),%rsi
    0.00 :   8d1e3:       mov    %r13,%rax
    0.00 :   8d1e6:       mov    %rsi,0x8(%rbx)
    0.00 :   8d1ea:       mov    %rsi,0x18(%rbx)
    0.00 :   8d1ee:       sub    %r12,%rax
    0.00 :   8d1f1:       mov    %rsi,0x10(%rbx)
    0.00 :   8d1f5:       mov    %rsi,0x30(%rbx)
    0.00 :   8d1f9:       cmp    %rbp,%rax
    0.00 :   8d1fc:       mov    %rsi,0x28(%rbx)
    0.00 :   8d200:       mov    %rsi,0x20(%rbx)
    0.00 :   8d204:       jae    8d330 <_IO_file_underflow@@GLIBC_2.2.5+0x240>
    0.00 :   8d20a:       mov    0x40(%rbx),%rdx
    0.00 :   8d20e:       mov    %rbx,%rdi
    0.00 :   8d211:       sub    %rsi,%rdx
    0.00 :   8d214:       callq  *0x70(%r13)
  100.00 :   8d218:       test   %rax,%rax
    0.00 :   8d21b:       jle    8d258 <_IO_file_underflow@@GLIBC_2.2.5+0x168>
    0.00 :   8d21d:       mov    0x90(%rbx),%rdx
    0.00 :   8d224:       add    %rax,0x10(%rbx)
    0.00 :   8d228:       cmp    $0xffffffffffffffff,%rdx
    0.00 :   8d22c:       je     8d238 <_IO_file_underflow@@GLIBC_2.2.5+0x148>
    0.00 :   8d22e:       add    %rdx,%rax
    0.00 :   8d231:       mov    %rax,0x90(%rbx)
    0.00 :   8d238:       mov    0x8(%rbx),%rax
    0.00 :   8d23c:       pop    %rbx
    0.00 :   8d23d:       pop    %rbp
    0.00 :   8d23e:       movzbl (%rax),%eax
    0.00 :   8d241:       pop    %r12
    0.00 :   8d243:       pop    %r13
    0.00 :   8d245:       pop    %r14
    0.00 :   8d247:       retq
    0.00 :   8d248:       nopl   0x0(%rax,%rax,1)
    0.00 :   8d250:       movzbl (%rdx),%eax
    0.00 :   8d253:       retq
    0.00 :   8d254:       nopl   0x0(%rax)
    0.00 :   8d258:       mov    (%rbx),%edx
    0.00 :   8d25a:       mov    %edx,%ecx
    0.00 :   8d25c:       or     $0x20,%edx
    0.00 :   8d25f:       or     $0x10,%ecx
    0.00 :   8d262:       test   %rax,%rax
    0.00 :   8d265:       mov    $0xffffffffffffffff,%rax
    0.00 :   8d26c:       cmove  %ecx,%edx
    0.00 :   8d26f:       mov    %rax,0x90(%rbx)
    0.00 :   8d276:       mov    %edx,(%rbx)
    0.00 :   8d278:       pop    %rbx
    0.00 :   8d279:       pop    %rbp
    0.00 :   8d27a:       pop    %r12
    0.00 :   8d27c:       pop    %r13
    0.00 :   8d27e:       pop    %r14
    0.00 :   8d280:       retq
    0.00 :   8d281:       nopl   0x0(%rax)
    0.00 :   8d288:       mov    0x88(%r13),%r8
    0.00 :   8d28f:       mov    %r13,%rdi
    0.00 :   8d292:       mov    %fs:0x10,%r9
    0.00 :   8d29b:       cmp    %r9,0x8(%r8)
    0.00 :   8d29f:       je     8d2e8 <_IO_file_underflow@@GLIBC_2.2.5+0x1f8>
    0.00 :   8d2a1:       mov    $0x1,%esi
    0.00 :   8d2a6:       cmpl   $0x0,0x36372b(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   8d2ad:       je     8d2b8 <_IO_file_underflow@@GLIBC_2.2.5+0x1c8>
    0.00 :   8d2af:       lock cmpxchg %esi,(%r8)
    0.00 :   8d2b4:       jne    8d2be <_IO_file_underflow@@GLIBC_2.2.5+0x1ce>
    0.00 :   8d2b6:       jmp    8d2d4 <_IO_file_underflow@@GLIBC_2.2.5+0x1e4>
    0.00 :   8d2b8:       cmpxchg %esi,(%r8)
    0.00 :   8d2bc:       je     8d2d4 <_IO_file_underflow@@GLIBC_2.2.5+0x1e4>
    0.00 :   8d2be:       lea    (%r8),%rdi
    0.00 :   8d2c1:       sub    $0x80,%rsp
    0.00 :   8d2c8:       callq  130520 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   8d2cd:       add    $0x80,%rsp
    0.00 :   8d2d4:       mov    0x35f56d(%rip),%rdi        # 3ec848 <_IO_2_1_stdout_@@GLIBC_2.2.5+0xe8>
    0.00 :   8d2db:       mov    0x88(%r13),%r8
    0.00 :   8d2e2:       mov    (%rdi),%edx
    0.00 :   8d2e4:       mov    %r9,0x8(%r8)
    0.00 :   8d2e8:       and    $0x288,%edx
    0.00 :   8d2ee:       addl   $0x1,0x4(%r8)
    0.00 :   8d2f3:       cmp    $0x280,%edx
    0.00 :   8d2f9:       jne    8d182 <_IO_file_underflow@@GLIBC_2.2.5+0x92>
    0.00 :   8d2ff:       jmpq   8d163 <_IO_file_underflow@@GLIBC_2.2.5+0x73>
    0.00 :   8d304:       nopl   0x0(%rax)
    0.00 :   8d308:       mov    0x48(%rdi),%rdi
    0.00 :   8d30c:       test   %rdi,%rdi
    0.00 :   8d30f:       je     8d31c <_IO_file_underflow@@GLIBC_2.2.5+0x22c>
    0.00 :   8d311:       callq  212c8 <free@plt>
    0.00 :   8d316:       andl   $0xfffffeff,(%rbx)
    0.00 :   8d31c:       mov    %rbx,%rdi
    0.00 :   8d31f:       callq  8e3d0 <_IO_doallocbuf@@GLIBC_2.2.5>
    0.00 :   8d324:       mov    (%rbx),%eax
    0.00 :   8d326:       jmpq   8d11e <_IO_file_underflow@@GLIBC_2.2.5+0x2e>
    0.00 :   8d32b:       nopl   0x0(%rax,%rax,1)
    0.00 :   8d330:       callq  8a220 <fmemopen@GLIBC_2.2.5+0x230>
    0.00 :   8d335:       mov    0x38(%rbx),%rsi
    0.00 :   8d339:       jmpq   8d20a <_IO_file_underflow@@GLIBC_2.2.5+0x11a>
    0.00 :   8d33e:       xchg   %ax,%ax
    0.00 :   8d340:       or     $0x20,%eax
    0.00 :   8d343:       mov    %eax,(%rdi)
    0.00 :   8d345:       mov    0x35db1c(%rip),%rax        # 3eae68 <h_errlist@@GLIBC_2.2.5+0xdc8>
    0.00 :   8d34c:       movl   $0x9,%fs:(%rax)
    0.00 :   8d353:       mov    $0xffffffff,%eax
    0.00 :   8d358:       retq
    0.00 :   8d359:       nopl   0x0(%rax)
    0.00 :   8d360:       callq  8a220 <fmemopen@GLIBC_2.2.5+0x230>
    0.00 :   8d365:       mov    0x35f4dc(%rip),%rdi        # 3ec848 <_IO_2_1_stdout_@@GLIBC_2.2.5+0xe8>
    0.00 :   8d36c:       jmpq   8d179 <_IO_file_underflow@@GLIBC_2.2.5+0x89>
    0.00 :   8d371:       testl  $0x8000,0x0(%r13)
    0.00 :   8d379:       mov    %rax,%rsi
    0.00 :   8d37c:       jne    8d3bd <_IO_file_underflow@@GLIBC_2.2.5+0x2cd>
    0.00 :   8d37e:       mov    0x88(%r13),%rdx
    0.00 :   8d385:       subl   $0x1,0x4(%rdx)
    0.00 :   8d389:       jne    8d3bd <_IO_file_underflow@@GLIBC_2.2.5+0x2cd>
    0.00 :   8d38b:       movq   $0x0,0x8(%rdx)
    0.00 :   8d393:       cmpl   $0x0,0x36363e(%rip)        # 3f09d8 <argp_program_version_hook@@GLIBC_2.2.5+0x1d8>
    0.00 :   8d39a:       je     8d3a3 <_IO_file_underflow@@GLIBC_2.2.5+0x2b3>
    0.00 :   8d39c:       lock decl (%rdx)
    0.00 :   8d39f:       jne    8d3a7 <_IO_file_underflow@@GLIBC_2.2.5+0x2b7>
    0.00 :   8d3a1:       jmp    8d3bd <_IO_file_underflow@@GLIBC_2.2.5+0x2cd>
    0.00 :   8d3a3:       decl   (%rdx)
    0.00 :   8d3a5:       je     8d3bd <_IO_file_underflow@@GLIBC_2.2.5+0x2cd>
    0.00 :   8d3a7:       lea    (%rdx),%rdi
    0.00 :   8d3aa:       sub    $0x80,%rsp
    0.00 :   8d3b1:       callq  130550 <pthread_setcanceltype@@GLIBC_2.2.5+0x60>
    0.00 :   8d3b6:       add    $0x80,%rsp
    0.00 :   8d3bd:       mov    %rsi,%rdi
    0.00 :   8d3c0:       callq  21ed0 <gnu_get_libc_version@@GLIBC_2.2.5+0x1d0>
